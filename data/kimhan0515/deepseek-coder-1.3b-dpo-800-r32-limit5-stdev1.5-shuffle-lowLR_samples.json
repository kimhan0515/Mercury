{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top > bottom:\n                break\n            \n            for i in range(right, left - 1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            \n            if left > right:\n                break\n            \n            for i in range(bottom, top - 1, -1):\n                res.append(matrix[i][left])\n            left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        start = nums[0]\n        end = nums[0]\n        ranges = []\n        \n        for num in nums[1:]:\n            if num == end + 1:\n                end = num\n            else:\n                if start == end:\n                    ranges.append(str(start))\n                else:\n                    ranges.append(str(start) + \"->\" + str(end))\n                start = num\n                end = num\n        \n        if start == end:\n            ranges.append(str(start))\n        else:\n            ranges.append(str(start) + \"->\" + str(end))\n        \n        return ranges"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        if len(s) == len(t):\n            if s == t:\n                return 1\n            else:\n                return 0\n        \n        # dp[i] is the number of distinct subsequences of s[:i] that equals t[:j]\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        count = 0\n        for c in s:\n            if c == t[0]:\n                count += 1\n            dp[1] = count\n            dp[1] += dp[0]\n        for i in range(2, len(s) + 1):\n            if s[i - 1] == t[0]:\n                count += 1\n            dp[i] = count\n            dp[i] += dp[i - 1]\n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers as 0\n        # 2. mark all 0s as 1\n        # 3. mark all numbers as 1 if they are positive\n        # 4. iterate through the array and mark the number as negative if it is positive\n        # 5. iterate through the array again and if the number is positive, then it is the first missing positive\n        # 6. if the number is 0, then it is already marked as negative\n        # 7. if the number is 1, then it is already marked as negative\n        # 8. if the number is 2, then it is already marked as negative\n        # 9. if the number is 3, then it is already marked as negative\n        # 10. if the number is 4, then it is already marked as negative\n        # 11. if the number is 5, then it is already marked as negative\n        # 12. if the number is 6, then it is already marked as negative\n        # 13. if the number is 7, then it is already marked as negative\n        # 14. if the number is 8, then it is already marked as negative\n        # 15. if the number is 9, then it is already marked as negative\n        # 16. if the number is 10, then it is already marked as negative\n        # 17. if the number is 11, then it is already marked as negative\n        # 18. if the number is 12, then it is already marked as negative\n        # 19. if the number is 13, then it is already marked as negative\n        # 20. if the number is 14, then it is already marked as negative\n        # 21. if the number is 15, then it is already marked as negative\n        # 22. if the number is 16, then it is already marked as negative\n        # 23. if the number is 17, then it is already marked as negative\n        # 24. if the number is 18, then it is already marked as negative\n        # 25. if the number is 19, then it is already marked as negative\n        # 26. if the number is 20, then it is already marked as negative\n        # 27. if the number is 21, then it is already marked as negative\n        # 28. if the number is 22, then it is already marked as negative\n        # 29. if the number is 23, then it is already marked as negative\n        # 30. if the number is 24, then it is already marked as negative\n        # 31. if the number is 25, then it is already marked as negative\n        # 32. if the number is 26, then it is already marked as negative\n        # 33. if the number is 27, then it is already marked as negative\n        # 34. if the number is 28, then it is already marked as negative\n        # 35. if the number is 29, then it is already marked as negative\n        # 36. if the number is 30, then it is already marked as negative\n        # 37. if the number is 31, then it is already marked as negative\n        # 38. if the number is 32, then it is already marked as negative\n        # 39. if the number is 33, then it is already marked as negative\n        # 40. if the number is 34, then it is already marked as negative\n        # 41. if the number is 35, then it is already marked as negative\n        # 42. if the number is 36, then it is already marked as negative\n        # 43. if the number is 37, then it is already marked as negative\n        # 44. if the number is 38, then it is already marked as negative\n        # 45. if the number is 39, then it is already marked as negative\n        # 46. if the number is 40, then it is already marked as negative\n        # 47. if the number is 41, then it is already marked as negative\n        # 48. if the number is 42, then it is already marked as negative\n        #"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        ans = \"\"\n        nums = [i for i in range(1, n+1)]\n        for i in range(n-1, -1, -1):\n            # 2.1 calculate the number of digits to be skipped\n            skip = k // fact\n            # 2.2 calculate the digit to be skipped\n            digit = nums[skip]\n            # 2.3 remove the digit from the list\n            nums.remove(digit)\n            # 2.4 calculate the kth permutation\n            k = k % fact\n            # 2.5 calculate the factorial of n-1\n            fact = fact // i\n            # 2.6 add the digit to the answer\n            ans += str(digit)\n        \n        # 3. add the remaining digits to the answer\n        ans += \"\".join(map(str, nums))\n        \n        return ans"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. use two pointers\n        # 2. if the sum is greater than target, move the right pointer to the left\n        # 3. if the sum is less than target, move the left pointer to the right\n        # 4. if the sum is equal to target, return the indices\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] > target:\n                right -= 1\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                return [left + 1, right + 1]\n        \n        return [left + 1, right + 1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if not num:\n            return []\n        \n        n = len(num)\n        ans = []\n        last_num = 0\n        last_op = '+'\n        last_op_num = num[0]\n        last_op_num_len = 1\n        last_op_num_str = num[0]\n        \n        for i in range(1, n):\n            cur_num = int(num[i])\n            if last_op == '+':\n                last_num = last_num * 10 + cur_num\n            elif last_op == '-':\n                last_num = -cur_num\n            elif last_op == '*':\n                last_num = last_num * 10 + cur_num\n            else:\n                raise ValueError('Invalid operator')\n            \n            if last_op_num_len == 1:\n                last_op_num_str = str(cur_num)\n                last_op_num_len = 2\n            else:\n                last_op_num_str += str(cur_num)\n            \n            if i == n - 1:\n                if last_op == '+':\n                    if last_num == target:\n                        ans.append(last_op_num_str)\n                    if last_num < target:\n                        ans.append(last_op_num_str + '=' + str(target - last_num))\n                elif last_op == '-':\n                    if last_num == target:\n                        ans.append(last_op_num_str)\n                    if last_num < target:\n                        ans.append(last_op_num_str + '=' + str(target + last_num))\n                elif last_op == '*':\n                    if last_num == target:\n                        ans.append(last_op_num_str)\n                    if last_num < target:\n                        ans.append(last_op_num_str + '=' + str(target // last_num))\n                else:\n                    raise ValueError('Invalid operator')\n                \n                if last_num == 0:\n                    break\n                \n                last_num = 0\n                last_op = '+'\n                last_op_num = num[0]\n                last_op_num_len = 1\n                last_op_num_str = num[0]\n        \n        return ans"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.total = 0\n        self.dfs(root, 0)\n        return self.total\n        \n    def dfs(self, node, curr):\n        if not node:\n            return 0\n        curr = curr * 10 + node.val\n        if not node.left and not node.right:\n            self.total += curr\n        self.dfs(node.left, curr)\n        self.dfs(node.right, curr)\n        return curr"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        \n        r = n % k\n        if r == 0:\n            r = k\n        \n        return s[:-r] + '-' + s[-r:]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank, total, start = 0, 0, 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n            total += gas[i] - cost[i]\n        \n        if total < 0:\n            return -1\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[1]\n        dp[-1] = nums[-2]\n        for i in range(1, n - 1):\n            dp[i] = nums[i]\n        for i in range(n - 2, 0, -1):\n            dp[i] = max(dp[i], dp[i + 1])\n        ans = 0\n        left = nums[0]\n        for i in range(1, n - 1):\n            ans += left * nums[i]\n            left = max(left, nums[i])\n        right = nums[-1]\n        for i in range(n - 2, 0, -1):\n            ans += right * nums[i]\n            right = max(right, nums[i])\n        return ans + dp[1] + dp[-2]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if digits[-1] != 9:\n            digits[-1] += 1\n            return digits\n        \n        carry = 1\n        for i in reversed(range(len(digits)-1)):\n            if digits[i] == 9:\n                digits[i] = 0\n                carry = 1\n            else:\n                digits[i] += 1\n                carry = 0\n                break\n        \n        if carry == 1:\n            digits.insert(0, 1)\n        \n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, then it can only be empty string\n        if p == \"*\":\n            return True\n        \n        # if s is empty, then it can only be empty string\n        if s == \"\":\n            return False\n        \n        # if p is not empty and s is empty, then it can only be empty string\n        if p != \"\" and s == \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s is not empty, then it can only be empty string\n        if p != \"\" and s != \"\":\n            return False\n        \n        # if p is not empty and s"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the length of the longest subarray that can be made from nums1\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k subarrays\n        # from nums1\n        # if the length is equal to k, then we can make at most k subarrays\n        # from nums1 and nums2\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is equal to k, then we can make at most k - len(nums1)\n        # subarrays from nums2\n        # if the length is less than k, then we can't make any subarray\n        # if the length is greater than k, then we can make at most k - len(nums1)"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num <= 1:\n            return False\n        \n        divisors = [1]\n        sqrt = int(math.sqrt(num))\n        for i in range(2, sqrt + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if num // i != i:\n                    divisors.append(num // i)\n        \n        return num == sum(divisors) - 1"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        \n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[-1][-2] = dp[-2][-1] = -dungeon[-1][-1] + 1\n        for i in range(m - 1, -1, -1):\n            dp[-1][-1] = dp[-1][-2] = -dungeon[i][-1] + 1\n            dp[-1][-2] = dp[-2][-1] = max(dp[-1][-2], dp[-2][-1] - dungeon[i][-1])\n        for i in range(n - 2, -1, -1):\n            dp[-1][-1] = dp[-1][-2] = max(dp[-1][-2], dp[-2][-1] - dungeon[m - 1][i])\n        for i in range(m - 2, -1, -1):\n            dp[-1][-1] = dp[-1][-2] = max(dp[-1][-2], dp[-2][-1] - dungeon[i][n - 1])\n            dp[-1][-2] = dp[-2][-1] = max(dp[-1][-2], dp[-2][-1] - dungeon[i][-1])\n            dp[-1][-3] = dp[-2][-2] = max(dp[-1][-3], dp[-2][-2] - dungeon[i][-1])\n            dp[-1][-4] = dp[-2][-3] = max(dp[-1][-4], dp[-2][-3] - dungeon[i][-1])\n            dp[-1][-5] = dp[-2][-4] = max(dp[-1][-5], dp[-2][-4] - dungeon[i][-1])\n            dp[-1][-6] = dp[-2][-5] = max(dp[-1][-6], dp[-2][-5] - dungeon[i][-1])\n            dp[-1][-7] = dp[-2][-6] = max(dp[-1][-7], dp[-2][-6] - dungeon[i][-1])\n            dp[-1][-8] = dp[-2][-7] = max(dp[-1][-8], dp[-2][-7] - dungeon[i][-1])\n            dp[-1][-9] = dp[-2][-8] = max(dp[-1][-9], dp[-2][-8] - dungeon[i][-1])\n            dp[-1][-10] = dp[-2][-9] = max(dp[-1][-10], dp[-2][-9] - dungeon[i][-1])\n            dp[-1][-11] = dp[-2][-10] = max(dp[-1][-11], dp[-2][-10] - dungeon[i][-1])\n            dp[-1][-12] = dp[-2][-11] = max(dp[-1][-12], dp[-2][-11] - dungeon[i][-1])\n            dp[-1][-13] = dp[-2][-12] = max(dp[-1][-13], dp[-2][-12] - dungeon[i][-1])\n            dp[-1][-14] = dp[-2][-13] = max(dp[-1][-14], dp[-2][-13] - dungeon[i][-1])\n            dp[-1][-15] = dp[-2][-14] = max(dp[-1][-15], dp[-2][-14] - dungeon[i][-1])\n            dp[-1][-16] = dp[-2][-15] = max(dp[-1][-16], dp[-2][-1"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # sort the array\n        nums.sort()\n        \n        # initialize the left and right pointers\n        left, right = 0, 1\n        \n        # initialize the count to 0\n        count = 0\n        \n        # initialize the distance to the difference between the first and second element\n        distance = nums[1] - nums[0]\n        \n        # iterate over the array\n        for num in nums[2:]:\n            # if the distance is greater than the difference between the current and the previous element\n            if num - nums[left] > distance:\n                # increment the left pointer\n                left += 1\n            # otherwise, increment the count\n            else:\n                # increment the count\n                count += right\n            \n            # increment the right pointer\n            right += 1\n            \n            # update the distance\n            distance = min(distance, num - nums[left])\n        \n        # return the count\n        return count if k <= count else nums[-1] - nums[left]"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = set('aeiouAEIOU')\n        l, r = 0, len(s) - 1\n        s = list(s)\n        \n        while l < r:\n            if s[l] in vowels and s[r] in vowels:\n                s[l], s[r] = s[r], s[l]\n                l += 1\n                r -= 1\n            elif s[l] not in vowels:\n                l += 1\n            elif s[r] not in vowels:\n                r -= 1\n        \n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        \n        for num in nums_set:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                \n                longest = max(longest, curr_len)\n        \n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all the numbers from 0 to n+58\n        ## XOR all the numbers from 0 to n+59"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        wordList.add(beginWord)\n        \n        queue = collections.deque([beginWord])\n        distance = 1\n        found = False\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                if word == endWord:\n                    found = True\n                    break\n                for i in range(len(word)):\n                    new_word = word[:i] + '*' + word[i+1:]\n                    for w in wordList:\n                        if w.startswith(new_word):\n                            queue.append(w)\n                            wordList.remove(w)\n            if found:\n                break\n            distance += 1\n        \n        if not found:\n            return 0\n        \n        return distance"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     carry = 0\n        # else:\n        #     carry = 0\n        #     a, b = b, a\n        #     carry = 1\n        # \n        # ans = ''\n        # \n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == '1':\n        #         if b[i] == '1':\n        #             ans = '1' + ans\n        #             carry = 1\n        #         else:\n        #             ans = '0' + ans\n        #             carry = 1\n        #     else:\n        #         if b[i] == '1':\n        #             if carry == 1:\n        #                 ans = '0' + ans\n        #             else:\n        #                 ans = '1' + ans\n        #         else:\n        #             if carry == 1:\n        #                 ans = '1' + ans\n        #             else:\n        #                 ans = '0' + ans\n        # \n        # if carry == 1:\n        #     ans = '1' + ans\n        # \n        # return ans\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     carry = 0\n        # else:\n        #     carry = 0\n        #     a, b = b, a\n        #     carry = 1\n        # \n        # ans = ''\n        # \n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == '1':\n        #         if carry == 1:\n        #             ans = '0' + ans\n        #         else:\n        #             ans = '1' + ans\n        #     else:\n        #         if b[i] == '1':\n        #             if carry == 1:\n        #                 ans = '1' + ans\n        #             else:\n        #                 ans = '0' + ans\n        #         else:\n        #             if carry == 1:\n        #                 ans = '1' + ans\n        #             else:\n        #                 ans = '0' + ans\n        # \n        # if carry == 1:\n        #     ans = '1' + ans\n        # \n        # return ans\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     carry = 0\n        # else:\n        #     carry = 0\n        #     a, b = b, a\n        #     carry = 1\n        # \n        # ans = ''\n        # \n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == '1':\n        #         if carry == 1:\n        #             ans = '0' + ans\n        #         else:\n        #             ans = '1' + ans\n        #     else:\n        #         if b[i] == '1':\n        #             if carry == 1:\n        #                 ans = '1' + ans\n        #             else:\n        #                 ans = '0' + ans\n        #         else:\n        #             if carry == 1:\n        #                 ans = '1' + ans\n        #             else:\n        #                 ans = '0' + ans\n        # \n        # if carry == 1:\n        #     ans = '1' + ans\n        # \n        # return ans\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     carry = 0\n        # else:\n        #     carry = 0\n        #     a, b = b, a\n        #     carry = 1\n        # \n        # ans = ''\n        # \n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == '1':\n        #         if carry == 1:\n        #             ans ="}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right and nums[left] != target:\n            left += 1\n        if nums[left] != target:\n            return [-1, -1]\n        \n        while left < right and nums[right] == target:\n            right -= 1\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return len(nums)\n        \n        k = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[k-1]:\n                nums[k] = nums[i]\n                k += 1\n        \n        return k"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        cur_reach = nums[0]\n        jumps = 1\n        \n        for i in range(1, len(nums) - 1):\n            if i > max_reach:\n                jumps += 1\n                max_reach = cur_reach\n            cur_reach = max(cur_reach, nums[i] + i)\n        \n        if max_reach >= len(nums) - 1:\n            return jumps\n        \n        if nums[-2] == 0:\n            return -1\n        \n        if nums[-1] == 0:\n            return jumps\n        \n        if nums[-1] > max_reach:\n            return -1\n        \n        jumps += 1\n        max_reach = nums[-1]\n        \n        for i in range(len(nums) - 2, max_reach, -1):\n            if nums[i] + i > max_reach:\n                jumps += 1\n                max_reach = i\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i] - prices[i - 1] if prices[i - 1] > 0 else 0 for i in range(1, len(prices))) if prices else 0)\n        \n        buy = [float('-inf')] * k\n        sell = [0] * k\n        \n        for price in prices:\n            buy[0] = max(buy[0], -price)\n            sell[0] = max(sell[0], price + buy[0])\n            for i in range(1, k):\n                buy[i] = max(buy[i], sell[i - 1] - price)\n                sell[i] = max(sell[i], buy[i] + price)\n        \n        return sell[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_str = ''\n        \n        while num > 0:\n            hex_str = hex_dict[num % 16] + hex_str\n            num = num // 16\n        \n        return hex_str if hex_str else '0'"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap with character as key and its index as value\n        # if character is seen before, update its value to -1\n        # if character is seen for the first time, update its value to -2\n        # if character is seen for the second time, update its value to -3\n        # if character is seen for the third time, update its value to -4\n        # if character is seen for the fourth time, update its value to -5\n        # if character is seen for the fifth time, update its value to -6\n        # if character is seen for the sixth time, update its value to -7\n        # if character is seen for the seventh time, update its value to -8\n        # if character is seen for the eighth time, update its value to -9\n        # if character is seen for the ninth time, update its value to -10\n        # if character is seen for the tenth time, update its value to -11\n        # if character is seen for the eleventh time, update its value to -12\n        # if character is seen for the twelfth time, update its value to -13\n        # if character is seen for the thirteenth time, update its value to -14\n        # if character is seen for the fourteenth time, update its value to -15\n        # if character is seen for the fifteenth time, update its value to -16\n        # if character is seen for the sixteenth time, update its value to -17\n        # if character is seen for the seventeenth time, update its value to -18\n        # if character is seen for the eighteenth time, update its value to -19\n        # if character is seen for the nineteenth time, update its value to -20\n        # if character is seen for the twentieth time, update its value to -21\n        # if character is seen for the twenty-first time, update its value to -22\n        # if character is seen for the twenty-second time, update its value to -23\n        # if character is seen for the twenty-third time, update its value to -24\n        # if character is seen for the twenty-fourth time, update its value to -25\n        # if character is seen for the twenty-fifth time, update its value to -26\n        # if character is seen for the twenty-sixth time, update its value to -27\n        # if character is seen for the twenty-seventh time, update its value to -28\n        # if character is seen for the twenty-eighth time, update its value to -29\n        # if character is seen for the twentieth-ninth time, update its value to -30\n        # if character is seen for the twentieth-tenth time, update its value to -31\n        # if character is seen for the twentieth-eleventh time, update its value to -32\n        # if character is seen for the twentieth-twelfth time, update its value to -33\n        # if character is seen for the twentieth-thirtieth time, update its value to -34\n        # if character is seen for the twentieth-thirtieth-first time, update its value to -35\n        # if character is seen for the twentieth-thirtieth-second time, update its value to -36\n        # if character is seen for the twentieth-thirtieth-third time, update its value to -37\n        # if character is seen for the twentieth-thirtieth-fourth time, update its value to -38\n        # if character is seen for the twentieth-thirtieth-fifth time, update its value to -39\n        # if character is seen for the twentieth-thirtieth-sixth time, update its value to -40\n        # if character is seen for the twentieth-thirtieth-seventh time, update its value to -41\n        # if character is seen for the twentieth-thirtieth-eighth time, update its value to -42\n        # if character is seen for the twentieth-thirtieth-ninth time, update its value to -43\n        # if character is seen for the twentieth-thirtieth-tenth time, update its value to -44\n        # if character is seen for the twentieth-thirtieth-"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2 or valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = -indexDiff - 1\n        \n        # bucket size = valueDiff + 1\n        # if valueDiff = 0, then we can't have duplicate values\n        # if valueDiff > 0, then we can't have duplicate values\n        # if valueDiff < 0, then we can't have duplicate values\n        # if valueDiff = -1, then we can have duplicate values\n        # if valueDiff = -2, then we can have duplicate values\n        # if valueDiff = -3, then we can have duplicate values\n        # if valueDiff = -4, then we can have duplicate values\n        # if valueDiff = -5, then we can have duplicate values\n        # if valueDiff = -6, then we can have duplicate values\n        # if valueDiff = -7, then we can have duplicate values\n        # if valueDiff = -8, then we can have duplicate values\n        # if valueDiff = -9, then we can have duplicate values\n        # if valueDiff = -10, then we can have duplicate values\n        # if valueDiff = -11, then we can have duplicate values\n        # if valueDiff = -12, then we can have duplicate values\n        # if valueDiff = -13, then we can have duplicate values\n        # if valueDiff = -14, then we can have duplicate values\n        # if valueDiff = -15, then we can have duplicate values\n        # if valueDiff = -16, then we can have duplicate values\n        # if valueDiff = -17, then we can have duplicate values\n        # if valueDiff = -18, then we can have duplicate values\n        # if valueDiff = -19, then we can have duplicate values\n        # if valueDiff = -20, then we can have duplicate values\n        # if valueDiff = -21, then we can have duplicate values\n        # if valueDiff = -22, then we can have duplicate values\n        # if valueDiff = -23, then we can have duplicate values\n        # if valueDiff = -24, then we can have duplicate values\n        # if valueDiff = -25, then we can have duplicate values\n        # if valueDiff = -26, then we can have duplicate values\n        # if valueDiff = -27, then we can have duplicate values\n        # if valueDiff = -28, then we can have duplicate values\n        # if valueDiff = -29, then we can have duplicate values\n        # if valueDiff = -30, then we can have duplicate values\n        # if valueDiff = -31, then we can have duplicate values\n        # if valueDiff = -32, then we can have duplicate values\n        # if valueDiff = -33, then we can have duplicate values\n        # if valueDiff = -34, then we can have duplicate values\n        # if valueDiff = -35, then we can have duplicate values\n        # if valueDiff = -36, then we can have duplicate values\n        # if valueDiff = -37, then we can have duplicate values\n        # if valueDiff = -38, then we can have duplicate values\n        # if valueDiff = -39, then we can have duplicate values\n        # if valueDiff = -40, then we can have duplicate values\n        # if valueDiff = -41, then we can have duplicate values\n        # if valueDiff = -42, then we can have duplicate values\n        # if valueDiff = -43, then we can have duplicate values\n        # if valueDiff = -44, then we can have duplicate values\n        # if valueDiff = -45, then we can have duplicate values\n        # if valueDiff = -46, then we can have duplicate values\n        # if valueDiff = -47, then we can have duplicate values\n        # if valueDiff = -48, then we can have duplicate values\n        # if valueDiff = -49, then we can have duplicate values\n        # if valueDiff = -50, then we can have duplicate values\n        # if valueDiff = -51, then we can have duplicate values\n        # if valueDiff = -52, then we can have duplicate values\n        # if valueDiff = -53, then we can have duplicate values\n        # if valueDiff = -54, then we can have duplicate values\n        # if valueDiff = -55, then"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        curr_ones = 0\n        \n        for n in nums:\n            if n == 1:\n                curr_ones += 1\n            else:\n                curr_ones = 0\n            max_ones = max(max_ones, curr_ones)\n        \n        return max_ones"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = 0\n        left_node = root\n        while left_node.left:\n            left_height += 1\n            left_node = left_node.left\n        \n        right_height = 0\n        right_node = root\n        while right_node.right:\n            right_height += 1\n            right_node = right_node.right\n        \n        if left_height == right_height:\n            return 2**left_height + self.countNodes(root.right)\n        else:\n            return 2**right_height + self.countNodes(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = num1[::-1], num2[::-1]\n        \n        carry = 0\n        ans = ''\n        for i in range(len(num1)):\n            if i < len(num2):\n                carry, digit = divmod(int(num1[i]) + int(num2[i]) + carry, 10)\n            else:\n                carry, digit = divmod(int(num1[i]) + carry, 10)\n            ans += str(digit)\n        \n        if carry:\n            ans += str(carry)\n        \n        return ans[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the result and the sign\n        result, sign, num = 0, 1, 0\n        \n        # 2. Iterate over the string\n        for c in s:\n            # 2.1 If the character is a digit, add it to the current number\n            if c.isdigit():\n                num = 10 * num + int(c)\n            # 2.2 If the character is an opening parenthesis, set the sign to the current result\n            elif c == '+':\n                result += sign * num\n                sign = 1\n                num = 0\n            # 2.3 If the character is a closing parenthesis, set the sign to the current result and set the result to the current result\n            elif c == '-':\n                result += sign * num\n                sign = -1\n                num = 0\n            # 2.4 If the character is an opening parenthesis, set the sign to the current result and set the result to the current result\n            elif c == '(':\n                result += sign * num\n                sign = 1\n                num = 0\n            # 2.5 If the character is a closing parenthesis, set the sign to the current result and set the result to the current result\n            elif c == ')':\n                result += sign * num\n                sign = -1\n                # 2.5.1 If the result is negative, set the result to the negative of the result\n                if result < 0:\n                    result = -result\n                # 2.5.2 If the result is positive, set the result to the positive of the result\n                else:\n                    result = result\n                # 2.5.3 Set the sign to the current result\n                sign = 1\n                # 2.5.4 Set the number to the current number\n                num = 0\n        \n        # 3. If the number is not zero, add it to the result\n        if num != 0:\n            result += sign * num\n        \n        # 4. Return the result\n        return result"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # O(nlogn)\n        sorted_capital, sorted_profits = zip(*sorted(zip(capital, profits)))\n        \n        # O(n)\n        pq = []\n        \n        # O(k)\n        curr_capital = w\n        \n        # O(n)\n        for i in range(len(sorted_profits)):\n            # O(logn)\n            if pq and pq[0][0] <= sorted_capital[i]:\n                # O(logn)\n                heappush(pq, (-sorted_profits[i], sorted_profits[i]))\n            # O(logk)\n            elif len(pq) < k:\n                # O(logn)\n                heappush(pq, (-sorted_profits[i], sorted_profits[i]))\n            # O(logk)\n            else:\n                # O(logn)\n                heappush(pq, (-sorted_profits[i], sorted_profits[i]))\n                # O(logn)\n                curr_capital -= heappop(pq)[1]\n        \n        # O(n)\n        while pq:\n            # O(logn)\n            curr_capital += -heappop(pq)[1]\n        \n        # O(1)\n        return curr_capital"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) % 2 == 1:\n            return False\n        \n        stack = []\n        brackets = {\n            ')': '(',\n            ']': '[',\n            '}': '{',\n        }\n        \n        for c in s:\n            if c in brackets:\n                if stack and stack[-1] == brackets[c]:\n                    stack.pop()\n                else:\n                    return False\n            else:\n                stack.append(c)\n        \n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # if not found, it means the array is sorted in descending order\n        # so we need to reverse the array\n        # if we find a number that is smaller than the next number,\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number\n        # we need to find the number that is just larger than the number that is smaller than the next number"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        d = {}\n        \n        for i, n in enumerate(nums):\n            if n in d and i - d[n] <= k:\n                return True\n            d[n] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        max_num = max(nums)\n        min_num = min(nums)\n        \n        if min_num == max_num:\n            return 0\n        \n        bucket_size = (max_num - min_num) // (len(nums) - 1) or 1\n        bucket_min = [None] * (len(nums) - 1)\n        bucket_max = [None] * (len(nums) - 1)\n        \n        for num in nums:\n            if bucket_min[num // bucket_size] is None:\n                bucket_min[num // bucket_size] = num\n                bucket_max[num // bucket_size] = num\n            else:\n                bucket_min[num // bucket_size] = min(bucket_min[num // bucket_size], num)\n                bucket_max[num // bucket_size] = max(bucket_max[num // bucket_size], num)\n        \n        prev_max = bucket_max[0]\n        max_gap = 0\n        \n        for i in range(1, len(bucket_min)):\n            if bucket_min[i] is not None:\n                max_gap = max(max_gap, bucket_min[i] - prev_max)\n                prev_max = bucket_max[i]\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q if node.left for child in [node.left, node.right] if child]\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row) // 2\n        d = {x: i // 2 for i, x in enumerate(row)}\n        ans = 0\n        for x in row[::2]:\n            if d[x] == d[x ^ 1]:\n                continue\n            if d[x] > d[x ^ 1]:\n                d[x ^ 1], d[x] = d[x], d[x ^ 1]\n            else:\n                d[x ^ 1] = d[x]\n            ans += 1\n        return ans - n"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1\n        \n        if s1 == s3[:len(s1)] and s2 == s3[len(s1):]:\n            return True\n        \n        if s2 == s3[:len(s2)]:\n            return s1 == s3[len(s2):]\n        \n        if s1 == s3[len(s2):]:\n            return s2 == s3[len(s2) + len(s1):]\n        \n        return False"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        g_len = len(g)\n        s_len = len(s)\n        \n        g_idx = 0\n        s_idx = 0\n        \n        content_children = 0\n        \n        while g_idx < g_len and s_idx < s_len:\n            if s[s_idx] >= g[g_idx]:\n                content_children += 1\n                g_idx += 1\n            s_idx += 1\n        \n        return content_children"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        first_row = set('qwertyuiop')\n        second_row = set('asdfghjkl')\n        third_row = set('zxcvbnm')\n        \n        res = []\n        for word in words:\n            if word[0] in first_row:\n                row = first_row\n            elif word[0] in second_row:\n                row = second_row\n            else:\n                row = third_row\n            if all(c in row for c in word[1:]):\n                res.append(word)\n        \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        i = 1\n        \n        while i < left:\n            prev = curr\n            curr = curr.next\n            i += 1\n        \n        # prev is the node before the left node\n        # curr is the left node\n        # next is the node after the left node\n        prev.next = None\n        next = curr\n        \n        while i < right:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            i += 1\n        \n        # prev is the node before the right node\n        # curr is the right node\n        # next is the node after the right node\n        prev.next = curr\n        next.next = next\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that starts with s\n        # reverse(s) + s\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse(s) is not a palindrome\n        # if s is a palindrome, then reverse(s) is a palindrome\n        # if s is not a palindrome, then reverse"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        # create a hashmap for the characters in t\n        # and their counts\n        t_map = {}\n        for c in t:\n            if c not in t_map:\n                t_map[c] = 0\n            t_map[c] += 1\n        \n        # create a hashmap for the characters in s\n        # and their counts\n        s_map = {}\n        for c in s:\n            if c not in s_map:\n                s_map[c] = 0\n            s_map[c] += 1\n        \n        # create a hashmap for the characters in t\n        # and their counts\n        # and a variable to keep track of the number\n        # of characters in t that have not yet been\n        # found in s\n        t_count = len(t_map)\n        # create a variable to keep track of the\n        # minimum window size\n        min_window_size = len(s) + 1\n        # create a variable to keep track of the\n        # start index of the minimum window\n        min_window_start = 0\n        # create a variable to keep track of the\n        # end index of the minimum window\n        min_window_end = 0\n        # create a variable to keep track of the\n        # start index of the current window\n        window_start = 0\n        \n        # iterate through the characters in s\n        for window_end in range(len(s)):\n            # if the character at the current index\n            # is in t_map, add 1 to the count\n            if s[window_end] in t_map:\n                if s_map[s[window_end]] < t_map[s[window_end]]:\n                    t_count -= 1\n                s_map[s[window_end]] += 1\n            \n            # if the number of characters in t that\n            # have not yet been found in s is 0,\n            # this means that all characters in t\n            # have been found in s\n            if t_count == 0:\n                # if the current window size is less\n                # than the minimum window size, update\n                # the minimum window size and the start\n                # index of the minimum window\n                if window_end - window_start < min_window_size:\n                    min_window_size = window_end - window_start\n                    min_window_start = window_start\n                # if the character at the start index\n                # of the current window is in t_map,\n                # decrement the count\n                if s_map[s[window_start]] <= t_map[s[window_start]]:\n                    t_count += 1\n                # increment the count\n                s_map[s[window_start]] += 1\n                # increment the start index of the\n                # current window\n                window_start += 1\n        \n        # if the minimum window size is greater than\n        # the length of s, return an empty string\n        if min_window_size > len(s):\n            return \"\"\n        \n        # return the substring of s that has the minimum\n        # window size\n        return s[min_window_start:min_window_start + min_window_size]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[3] == 0 or distance[1] == 0:\n            return False\n        \n        if distance[2] >= distance[0] and distance[4] >= distance[2]:\n            return True\n        \n        if distance[1] >= distance[0] and distance[3] >= distance[1]:\n            return True\n        \n        if distance[2] >= distance[0] and distance[4] >= distance[2] and distance[5] >= distance[3]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        curr = head\n        \n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # if the frequency is odd, add 1 to the count\n        # if the frequency is even, add 2 to the count\n        # the count will be the length of the longest palindrome\n        # if the count is greater than 1, add 1 to the length\n        # if the count is 1, add 0 to the length\n        # if the count is 0, add 0 to the length\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome\n        # the length will be the length of the longest palindrome"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root_val = postorder[-1]\n        root_idx = inorder.index(root_val)\n        \n        left_inorder = inorder[:root_idx]\n        right_inorder = inorder[root_idx + 1:]\n        \n        left_postorder = postorder[:-1]\n        right_postorder = postorder[root_idx:-1]\n        \n        root = TreeNode(root_val)\n        root.left = self.buildTree(left_inorder, left_postorder)\n        root.right = self.buildTree(right_inorder, right_postorder)\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        trees = []\n        m, n = len(forest), len(forest[0])\n        for i in range(m):\n            for j in range(n):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        trees.sort(key=lambda x: x[0])\n        \n        ans = 0\n        curr_r, curr_c = 0, 0\n        for h, r, c in trees:\n            dist = self.bfs(forest, h, curr_r, curr_c)\n            if dist == -1:\n                return -1\n            ans += dist\n            curr_r, curr_c = r, c\n        return ans\n        \n    def bfs(self, forest, h, r, c):\n        m, n = len(forest), len(forest[0])\n        q = collections.deque([(r, c)])\n        visited = set([(r, c)])\n        dist = 0\n        while q:\n            dist += 1\n            for _ in range(len(q)):\n                r, c = q.popleft()\n                if forest[r][c] > h:\n                    if r > 0 and (r-1, c) not in visited:\n                        q.append((r-1, c))\n                        visited.add((r-1, c))\n                    elif c > 0 and (r, c-1) not in visited:\n                        q.append((r, c-1))\n                        visited.add((r, c-1))\n        return dist if (r == 0 and c == 0) else -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. use a hashmap to store the number of prefix sum\n        # 5. the number of range sum is the number of prefix sum - 1\n        \n        # 1. calculate the prefix sum\n        n = len(nums)\n        if n == 0:\n            return 0\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        prefix_sum.sort()\n        \n        # 2. use two pointers to find the range sum\n        # 3. use a hashmap to store the number of prefix sum\n        # 4. the number of range sum is the number of prefix sum - 1\n        ans = 0\n        prefix_sum_dict = {}\n        for i in prefix_sum:\n            ans += prefix_sum_dict.get(i - lower, 0)\n            prefix_sum_dict[i - upper] = prefix_sum_dict.get(i - upper, 0) + 1\n        return ans"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 1)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)\n        \n        # n = n - (n - 1) / 2\n        # return int(sqrt(2 * n + 0.25) - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q if node.left for child in [node.left, node.right] if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev // 10 or x == rev // 100"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        a, b = 1, 1\n        \n        for i in range(1, len(s)):\n            if s[i] == '0':\n                a = 0\n            if int(s[i-1:i+1]) > 26:\n                a = 0\n            a, b = b, a + b\n        \n        return b"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        if len(s) == 0:\n            return True\n        \n        s_ptr = 0\n        t_ptr = 0\n        \n        while t_ptr < len(t):\n            if s[s_ptr] == t[t_ptr]:\n                s_ptr += 1\n            if s_ptr == len(s):\n                return True\n            t_ptr += 1\n        \n        return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 10000000000000000000000000000000\n        # 0000000000000000000000000000001\n        # 0000000000000000000000000000010\n        # 0000000000000000000000000000100\n        # 0000000000000000000000000001000\n        # 0000000000000000000000000010000\n        # 0000000000000000000000000100000\n        # 0000000000000000000000001000000\n        # 0000000000000000000000010000000\n        # 0000000000000000000000100000000\n        # 0000000000000000000001000000000\n        # 0000000000000000000010000000000\n        # 0000000000000000000100000000000\n        # 0000000000000000001000000000000\n        # 0000000000000000010000000000000\n        # 0000000000000000100000000000000\n        # 0000000000000001000000000000000\n        # 0000000000000010000000000000000\n        # 0000000000000100000000000000000\n        # 0000000000001000000000000000000\n        # 0000000000010000000000000000000\n        # 0000000000100000000000000000000\n        # 0000000001000000000000000000000\n        # 0000000010000000000000000000000\n        # 0000000100000000000000000000000\n        # 0000001000000000000000000000000\n        # 0000010000000000000000000000000\n        # 0000100000000000000000000000000\n        # 0001000000000000000000000000000\n        # 00100"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        \n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # create a set of words from wordDict\n        word_set = set(wordDict)\n        \n        # create a list of booleans to track if the word is in the word_set\n        word_break = [False] * (len(s) + 1)\n        \n        # initialize the first word_break to True\n        word_break[0] = True\n        \n        # iterate through the string s\n        for i in range(len(s)):\n            # if the current word is in the word_set, set the word_break to True\n            if s[i] in word_set:\n                word_break[i + 1] = True\n        \n        # initialize the length of the string\n        n = len(s)\n        \n        # iterate through the string backwards\n        for i in range(n - 1, -1, -1):\n            # if the word_break at the current index is True\n            if word_break[i]:\n                # check if the word before the current index is in the word_set\n                if s[i:] in word_set:\n                    # set the word_break at the current index to True\n                    word_break[i] = True\n        \n        # return the word_break at the first index\n        return word_break[0]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is None and root.right is None:\n        #     return True\n        \n        # if root.left is None:\n        #     if root.val < root.right.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.right is None:\n        #     if root.val > root.left.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.left.val < root.val < root.right.val:\n        #     return True\n        \n        # return False\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is None and root.right is None:\n        #     return True\n        \n        # if root.left is None:\n        #     if root.val < root.right.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.right is None:\n        #     if root.val > root.left.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.left.val < root.val < root.right.val:\n        #     return True\n        \n        # return False\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is None and root.right is None:\n        #     return True\n        \n        # if root.left is None:\n        #     if root.val < root.right.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.right is None:\n        #     if root.val > root.left.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.left.val < root.val < root.right.val:\n        #     return True\n        \n        # return False\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is None and root.right is None:\n        #     return True\n        \n        # if root.left is None:\n        #     if root.val < root.right.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.right is None:\n        #     if root.val > root.left.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.left.val < root.val < root.right.val:\n        #     return True\n        \n        # return False\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is None and root.right is None:\n        #     return True\n        \n        # if root.left is None:\n        #     if root.val < root.right.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.right is None:\n        #     if root.val > root.left.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.left.val < root.val < root.right.val:\n        #     return True\n        \n        # return False\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is None and root.right is None:\n        #     return True\n        \n        # if root.left is None:\n        #     if root.val < root.right.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.right is None:\n        #     if root.val > root.left.val:\n        #         return True\n        #     else:\n        #         return False\n        \n        # if root.left.val < root.val < root.right.val:\n        #     return True\n        \n        # return False\n        \n        # if root is None:\n        #     return True\n        \n        # if root.left is None and root.right is None:\n        #"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is empty, return the list\n        if newInterval[0] == 0:\n            return [newInterval]\n        \n        # if the new interval is not empty, add it to the list\n        # and sort the list\n        if newInterval[1] == 0:\n            return [newInterval]\n        \n        # initialize the list of intervals\n        # and the index of the new interval\n        new_intervals = [newInterval]\n        new_index = 0\n        \n        # loop through the list of intervals\n        for interval in intervals:\n            # if the interval is not empty\n            if interval[1] != 0:\n                # add the interval to the list\n                new_intervals.append(interval)\n                # increment the index\n                new_index += 1\n            # if the interval is empty\n            else:\n                # increment the index\n                new_index += 1\n        \n        # sort the list of intervals\n        new_intervals.sort()\n        \n        # initialize the list of merged intervals\n        merged_intervals = []\n        \n        # initialize the index of the merged interval\n        merged_index = 0\n        \n        # loop through the list of intervals\n        for interval in new_intervals:\n            # if the interval is not empty\n            if interval[0] != 0:\n                # if the interval is not the first interval\n                if merged_intervals and merged_intervals[merged_index][1] >= interval[0]:\n                    # if the interval is not the last interval\n                    if merged_intervals[merged_index][1] < interval[1]:\n                        # set the last interval to the maximum of the last interval and the interval\n                        merged_intervals[merged_index][1] = max(merged_intervals[merged_index][1], interval[1])\n                    # if the interval is the last interval\n                    else:\n                        # set the last interval to the interval\n                        merged_intervals[merged_index][1] = interval[1]\n                # if the interval is the first interval\n                else:\n                    # set the first interval to the interval\n                    merged_intervals.append(interval)\n                    # increment the index\n                    merged_index += 1\n            # if the interval is empty\n            else:\n                # increment the index\n                merged_index += 1\n        \n        # loop through the list of merged intervals\n        for interval in merged_intervals:\n            # if the interval is not empty\n            if interval[1] != 0:\n                # if the interval is not the first interval\n                if merged_intervals and merged_intervals[merged_index][1] >= interval[0]:\n                    # if the interval is not the last interval\n                    if merged_intervals[merged_index][1] < interval[1]:\n                        # set the last interval to the maximum of the last interval and the interval\n                        merged_intervals[merged_index][1] = max(merged_intervals[merged_index][1], interval[1])\n                    # if the interval is the last interval\n                    else:\n                        # set the last interval to the interval\n                        merged_intervals[merged_index][1] = interval[1]\n                # if the interval is the first interval\n                else:\n                    # set the first interval to the interval\n                    merged_intervals.append(interval)\n                    # increment the index\n                    merged_index += 1\n            # if the interval is empty\n            else:\n                # increment the index\n                merged_index += 1\n        \n        # loop through the list of merged intervals\n        for interval in merged_intervals:\n            # if the interval is not empty\n            if interval[1] != 0:\n                # if the interval is not the first interval\n                if new_index and new_intervals[new_index - 1][1] >= interval[0]:\n                    # if the interval is not the last interval\n                    if new_intervals[new_index - 1][1] < interval[1]:\n                        # set the last interval to the maximum of the last interval and the interval\n                        new_intervals[new_index - 1][1] = max(new_intervals[new_index - 1][1], interval[1])\n                    # if the interval is the last interval\n                    else:"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        if not s:\n            return [[]]\n        \n        n = len(s)\n        dp = [[False] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = True\n            if i > 0:\n                dp[i][i-1] = True\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = dp[i+1][j-1] and s[i] == s[j]\n        \n        res = []\n        cur = []\n        self.dfs(s, dp, 0, cur, res)\n        return res\n    \n    def dfs(self, s, dp, start, cur, res):\n        if start == len(s):\n            res.append(cur[:])\n            return\n        \n        for i in range(start, len(s)):\n            if dp[start][i]:\n                cur.append(s[start:i+1])\n                self.dfs(s, dp, i+1, cur, res)\n                cur.pop()"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the min and max of all the numbers in the first list\n        min_num = nums[0][0]\n        max_num = nums[0][0]\n        for l in nums[1:]:\n            if l[0] < min_num:\n                min_num = l[0]\n            if l[-1] > max_num:\n                max_num = l[-1]\n        \n        # find the min and max of all the numbers in the last list\n        min_num_last = nums[-1][0]\n        max_num_last = nums[-1][0]\n        for l in nums[:-1]:\n            if l[0] < min_num_last:\n                min_num_last = l[0]\n            if l[-1] > max_num_last:\n                max_num_last = l[-1]\n        \n        # if the min and max of the first list is greater than the max of the last list, then the smallest range is the entire first list\n        if min_num_last > max_num:\n            return [min_num, max_num]\n        \n        # if the min and max of the last list is greater than the max of the first list, then the smallest range is the entire last list\n        if min_num > max_num_last:\n            return [max_num_last, max_num_last]\n        \n        # if the min and max of the first list is equal to the max of the last list, then the smallest range is the entire first list\n        if min_num == max_num:\n            return [min_num, max_num]\n        \n        # if the min and max of the last list is equal to the max of the first list, then the smallest range is the entire last list\n        if min_num_last == max_num_last:\n            return [min_num_last, max_num_last]\n        \n        # if the min and max of the first list is greater than the max of the last list, then the smallest range is the entire first list\n        if min_num > max_num_last:\n            return [min_num, max_num_last]\n        \n        # if the min and max of the last list is greater than the max of the first list, then the smallest range is the entire last list\n        if min_num_last > max_num:\n            return [max_num_last, max_num_last]\n        \n        # if the min and max of the first list is equal to the max of the last list, then the smallest range is the entire first list\n        if min_num == max_num:\n            return [min_num, max_num]\n        \n        # if the min and max of the last list is equal to the max of the first list, then the smallest range is the entire last list\n        if min_num_last == max_num_last:\n            return [min_num_last, max_num_last]\n        \n        # if the min and max of the first list is greater than the max of the last list, then the smallest range is the entire first list\n        if min_num > max_num_last:\n            return [min_num, max_num_last]\n        \n        # if the min and max of the last list is greater than the max of the first list, then the smallest range is the entire last list\n        if min_num_last > max_num:\n            return [max_num_last, max_num_last]\n        \n        # if the min and max of the first list is equal to the max of the last list, then the smallest range is the entire first list\n        if min_num == max_num:\n            return [min_num, max_num]\n        \n        # if the min and max of the last list is equal to the max of the first list, then the smallest range is the entire last list\n        if min_num_last == max_num_last:\n            return [min_num_last, max_num_last]\n        \n        # if the min and max of the first list is greater than the max of the last list, then the smallest range is the entire first list\n        if min_num > max_num_last:\n            return [min_num, max_num_last]\n        \n        # if the min and max of the last list is greater than the max of the first list, then the smallest range is the entire last list"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes, 15 minutes\n        # 1000 / 15 = 62.5\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5 buckets, 15 minutes, 15 minutes\n        # 62.5"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # BFS\n        # O(n^2 log(n^2))\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2)\n        # O(n^2"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2:\n        #     return n - 1\n        # if n == 2:\n        #     return m - 1\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] *= i\n        # return dp[-1] // reduce(lambda x, y: x * y, dp[:-1])\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + dp[j]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     dp[0] = 1\n        #     for j in range(1, n):\n        #         dp[j] = dp[j - 1] + d"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = int(num1)\n        num2 = int(num2)\n        \n        product = num1 * num2\n        \n        return str(product)"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = buy2 = prices[0]\n        # profit1 = profit2 = 0\n        \n        # for p in prices[1:]:\n        #     if p < buy1:\n        #         buy1 = p\n        #         profit1 = 0\n        #     elif p > buy1:\n        #         profit1 = p - buy1\n        #         if profit1 > profit2:\n        #             buy2 = buy1\n        #             profit2 = profit1\n        #     elif p > buy2:\n        #         profit2 = p - buy2\n        \n        # return profit2\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = buy2 = prices[0]\n        # profit1 = profit2 = 0\n        \n        # for p in prices[1:]:\n        #     if p < buy1:\n        #         buy1 = p\n        #         profit1 = 0\n        #     elif p > buy1:\n        #         profit1 = p - buy1\n        #         if profit1 > profit2:\n        #             profit2 = profit1\n        #             buy2 = buy1\n        #     elif p > buy2:\n        #         profit2 = p - buy2\n        \n        # return profit2\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = buy2 = prices[0]\n        # profit1 = profit2 = 0\n        \n        # for p in prices[1:]:\n        #     if p < buy1:\n        #         buy1 = p\n        #         profit1 = 0\n        #     elif p > buy1:\n        #         profit1 = p - buy1\n        #         if profit1 > profit2:\n        #             profit2 = profit1\n        #             buy2 = buy1\n        #     elif p > buy2:\n        #         profit2 = p - buy2\n        \n        # return profit2\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = buy2 = prices[0]\n        # profit1 = profit2 = 0\n        \n        # for p in prices[1:]:\n        #     if p < buy1:\n        #         buy1 = p\n        #         profit1 = 0\n        #     elif p > buy1:\n        #         profit1 = p - buy1\n        #         if profit1 > profit2:\n        #             profit2 = profit1\n        #             buy2 = buy1\n        #     elif p > buy2:\n        #         profit2 = p - buy2\n        \n        # return profit2\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = buy2 = prices[0]\n        # profit1 = profit2 = 0\n        \n        # for p in prices[1:]:\n        #     if p < buy1:\n        #         buy1 = p\n        #         profit1 = 0\n        #     elif p > buy1:\n        #         profit1 = p - buy1\n        #         if profit1 > profit2:\n        #             profit2 = profit1\n        #             buy2 = buy1\n        #     elif p > buy2:\n        #         profit2 = p - buy2\n        \n        # return profit2\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = buy2 = prices[0]\n        # profit1 = profit2 = 0\n        \n        # for p in prices[1:]:\n        #     if p < buy1:\n        #         buy1 = p\n        #         profit1 = 0\n        #     elif p > buy1:\n        #         profit1 = p - buy1\n        #         if profit1 > profit2:\n        #             profit2 = profit1\n        #             buy2 = buy1\n        #     elif p > buy2:\n        #         profit2 = p - buy2\n        \n        # return profit2\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy1 = buy2 = prices[0]\n        # profit1 = profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        cur = []\n        seen = set()\n        n = len(candidates)\n        i = 0\n        while i < n:\n            if candidates[i] > target:\n                break\n            if candidates[i] not in seen:\n                seen.add(candidates[i])\n                cur.append(candidates[i])\n                res.append(cur[:])\n                cur = []\n            i += 1\n        if not cur:\n            return res\n        cur.append(candidates[i - 1])\n        res.append(cur[:])\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root_val = preorder[0]\n        root_idx = inorder.index(root_val)\n        \n        left_inorder = inorder[:root_idx]\n        right_inorder = inorder[root_idx+1:]\n        \n        left_preorder = preorder[1:root_idx+1]\n        right_preorder = preorder[root_idx+1:]\n        \n        root = TreeNode(root_val)\n        root.left = self.buildTree(left_preorder, left_inorder)\n        root.right = self.buildTree(right_preorder, right_inorder)\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the number of left and right parentheses\n        left, right = 0, 0\n        for c in s:\n            if c == '(':\n                left += 1\n            elif c == ')':\n                if left > 0:\n                    left -= 1\n                else:\n                    right += 1\n        # find the number of left and right parentheses\n        # that are not matched\n        # and add them to the right number of right parentheses\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        # and then reverse the list again\n        # to make the number of left parentheses equal\n        # to the number of right parentheses\n        # and then reverse the list again\n        # to make the number of right parentheses equal\n        # to the number of left parentheses\n        #"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        # find the shortest list\n        shortest = min(lists, key=lambda x: x.val if x else float('inf'))\n        \n        # if the shortest list is empty, return None\n        if not shortest:\n            return None\n        \n        # create a new list node with the value of the shortest list\n        head = shortest\n        \n        # if the shortest list has a next node, update the shortest list to the next node\n        if shortest.next:\n            shortest = shortest.next\n            lists[lists.index(shortest)] = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head = ListNode(val=shortest.val)\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head\n        \n        # if the shortest list has a next node, update the shortest list to the next node\n        if shortest.next:\n            shortest = shortest.next\n            lists[lists.index(shortest)] = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next\n        \n        # create a new list node with the value of the shortest list\n        new_head_next.next = shortest\n        \n        # create a new list node with the value of the shortest list\n        new_head_next = new_head_next.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # n = len(s)\n        # dp = [n-1] * n\n        # palindrome = [True] * n\n        \n        # for i in range(n-2, -1, -1):\n        #     if s[i] == s[i+1]:\n        #         dp[i] = 0\n        #         palindrome[i] = True\n        #     else:\n        #         dp[i] = 1\n        #         palindrome[i] = False\n        \n        # for i in range(1, n):\n        #     if palindrome[i-1]:\n        #         dp[i] = min(dp[i], dp[i-1] + 1)\n        #         if i > 1 and s[i-1] == s[i-2]:\n        #             dp[i] = min(dp[i], dp[i-2] + 1)\n        \n        # return dp[n-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # n = len(s)\n        # dp = [n-1] * n\n        # palindrome = [True] * n\n        \n        # for i in range(n-2, -1, -1):\n        #     if s[i] == s[i+1]:\n        #         dp[i] = 0\n        #         palindrome[i] = True\n        #     else:\n        #         dp[i] = 1\n        #         palindrome[i] = False\n        \n        # for i in range(1, n):\n        #     if palindrome[i-1]:\n        #         dp[i] = min(dp[i], dp[i-1] + 1)\n        #         if i > 1 and s[i-1] == s[i-2]:\n        #             dp[i] = min(dp[i], dp[i-2] + 1)\n        \n        # return dp[n-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # n = len(s)\n        # dp = [n-1] * n\n        # palindrome = [True] * n\n        \n        # for i in range(n-2, -1, -1):\n        #     if s[i] == s[i+1]:\n        #         dp[i] = 0\n        #         palindrome[i] = True\n        #     else:\n        #         dp[i] = 1\n        #         palindrome[i] = False\n        \n        # for i in range(1, n):\n        #     if palindrome[i-1]:\n        #         dp[i] = min(dp[i], dp[i-1] + 1)\n        #         if i > 1 and s[i-1] == s[i-2]:\n        #             dp[i] = min(dp[i], dp[i-2] + 1)\n        \n        # return dp[n-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # n = len(s)\n        # dp = [n-1] * n\n        # palindrome = [True] * n\n        \n        # for i in range(n-2, -1, -1):\n        #     if s[i] == s[i+1]:\n        #         dp[i] = 0\n        #         palindrome[i] = True\n        #     else:\n        #         dp[i] = 1\n        #         palindrome[i] = False\n        \n        # for i in range(1, n):\n        #     if palindrome[i-1]:\n        #         dp[i] = min(dp[i], dp[i-1] + 1)\n        #         if i > 1 and s[i-1] == s[i-2]:\n        #             dp[i] = min(dp[i], dp[i-2] + 1)\n        \n        # return dp"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^10 = 10^5 * 5\n        # 2. 10^10 = 10^5 * 5\n        # 3. 10^10 = 10^5 * 5\n        # 4. 10^10 = 10^5 * 5\n        # 5. 10^10 = 10^5 * 5\n        # 6. 10^10 = 10^5 * 5\n        # 7. 10^10 = 10^5 * 5\n        # 8. 10^10 = 10^5 * 5\n        # 9. 10^10 = 10^5 * 5\n        # 10. 10^10 = 10^5 * 5\n        # 11. 10^10 = 10^5 * 5\n        # 12. 10^10 = 10^5 * 5\n        # 13. 10^10 = 10^5 * 5\n        # 14. 10^10 = 10^5 * 5\n        # 15. 10^10 = 10^5 * 5\n        # 16. 10^10 = 10^5 * 5\n        # 17. 10^10 = 10^5 * 5\n        # 18. 10^10 = 10^5 * 5\n        # 19. 10^10 = 10^5 * 5\n        # 20. 10^10 = 10^5 * 5\n        # 21. 10^10 = 10^5 * 5\n        # 22. 10^10 = 10^5 * 5\n        # 23. 10^10 = 10^5 * 5\n        # 24. 10^10 = 10^5 * 5\n        # 25. 10^10 = 10^5 * 5\n        # 26. 10^10 = 10^5 * 5\n        # 27. 10^10 = 10^5 * 5\n        # 28. 10^10 = 10^5 * 5\n        # 29. 10^10 = 10^5 * 5\n        # 30. 10^10 = 10^5 * 5\n        # 31. 10^10 = 10^5 * 5\n        # 32. 10^10 = 10^5 * 5\n        # 33. 10^10 = 10^5 * 5\n        # 34. 10^10 = 10^5 * 5\n        # 35. 10^10 = 10^5 * 5\n        # 36. 10^10 = 10^5 * 5\n        # 37. 10^10 = 10^5 * 5\n        # 38. 10^10 = 10^5 * 5\n        # 39. 10^10 = 10^5 * 5\n        # 40. 10^10 = 10^5 * 5\n        # 41. 10^10 = 10^5 * 5\n        # 42. 10^10 = 10^5 * 5\n        # 43. 10^10 = 10^5 * 5\n        # 44. 10^10 = 10^5 * 5\n        # 45. 10^10 = 10^5 * 5\n        # 46. 10^10 = 10^5 * 5\n        # 47. 10^10 = 10^5 * 5\n        # 48. 10^10 = 10^5 * 5\n        # 49. 10^10 = 10^5 * 5\n        # 5"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a hashmap to store the reverse of each word\n        # and its index\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # if the empty string is a palindrome\n        if \"\" in word_map:\n            # add the index of the empty string to the result\n            # since it is the only palindrome that has an empty string as a prefix\n            # and the empty string itself is a palindrome\n            # since the empty string is the only palindrome that has an empty string as a suffix\n            # and the empty string itself is a palindrome\n            # so the result will be [[0, word_map[\"\"]]]\n            # since the empty string is the only palindrome that has an empty string as a suffix\n            # and the empty string itself is a palindrome\n            # so the result will be [[word_map[\"\"], 0]]\n            return [[word_map[\"\"], i] for i in range(len(words)) if i != 0]\n        \n        # initialize the result\n        result = []\n        \n        # iterate over the words\n        for i, word in enumerate(words):\n            # if the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # add the index of the word to the result\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[i, word_map[word[::-1]]]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[word_map[word[::-1]], i]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[i, word_map[word[::-1]]]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[word_map[word[::-1]], i]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[i, word_map[word[::-1]]]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[word_map[word[::-1]], i]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[i, word_map[word[::-1]]]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[word_map[word[::-1]], i]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[i, word_map[word[::-1]]]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[word_map[word[::-1]], i]]\n            # since the word is a palindrome\n            # and the reverse of the word is a palindrome\n            # and the reverse of the word is not the same as the word\n            # so the result will be [[i, word_map[word[::-1]]]]\n            # since the word is a palindrome"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        infected, viral = 0, 0\n        for i in range(m):\n            if isInfected[i][0] == 1:\n                infected += 1\n                viral += 1\n                isInfected[i][0] = 2\n            elif isInfected[i][n-1] == 1:\n                infected += 1\n                viral += 1\n                isInfected[i][n-1] = 2\n        if infected == 0:\n            return 0\n        if viral == 0:\n            return infected - 1\n        \n        # build walls\n        walls = 0\n        for i in range(m):\n            if isInfected[i][0] == 2:\n                walls += 1\n                isInfected[i][0] = 3\n            elif isInfected[i][n-1] == 2:\n                walls += 1\n                isInfected[i][n-1] = 3\n        if walls == 0:\n            return 0\n        \n        # infect\n        infected = 0\n        for i in range(m):\n            if isInfected[i][0] == 3:\n                infected += 1\n                isInfected[i][0] = 4\n        if infected == 0:\n            return 0\n        \n        # spread\n        for i in range(m):\n            if isInfected[i][0] == 4:\n                isInfected[i][0] = 5\n        \n        # count walls\n        walls = 0\n        for i in range(m):\n            if isInfected[i][0] == 3:\n                walls += 1\n                isInfected[i][0] = 2\n            elif isInfected[i][n-1] == 3:\n                walls += 1\n                isInfected[i][n-1] = 2\n        if walls == 0:\n            return 0\n        \n        # infect\n        infected = 0\n        for i in range(m):\n            if isInfected[i][0] == 2:\n                infected += 1\n                isInfected[i][0] = 3\n        if infected == 0:\n            return 0\n        \n        # spread\n        for i in range(m):\n            if isInfected[i][0] == 3:\n                isInfected[i][0] = 4\n        \n        # count walls\n        walls = 0\n        for i in range(m):\n            if isInfected[i][0] == 2:\n                walls += 1\n                isInfected[i][0] = 3\n            elif isInfected[i][n-1] == 2:\n                walls += 1\n                isInfected[i][n-1] = 3\n        if walls == 0:\n            return 0\n        \n        # infect\n        infected = 0\n        for i in range(m):\n            if isInfected[i][0] == 3:\n                infected += 1\n                isInfected[i][0] = 4\n        if infected == 0:\n            return 0\n        \n        # spread\n        for i in range(m):\n            if isInfected[i][0] == 4:\n                isInfected[i][0] = 5\n        \n        # count walls\n        walls = 0\n        for i in range(m):\n            if isInfected[i][0] == 3:\n                walls += 1\n                isInfected[i][0] = 2\n            elif isInfected[i][n-1] == 3:\n                walls += 1\n                isInfected[i][n-1] = 2\n        if walls == 0:\n            return 0\n        \n        # infect\n        infected = 0\n        for i in range(m):\n            if isInfected[i][0] == 2:\n                infected += 1\n                isInfected[i][0] = 3\n        if infected == 0:\n            return 0\n        \n        # spread\n        for i in range(m):\n            if isInfected[i][0] == 3:\n                isInfected[i][0] = 4\n        \n        # count walls\n        walls = 0\n        for i in range(m):\n            if isInfected[i"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        ans = 0\n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        \n        for i in range(m):\n            for j in range(n):\n                if dp[i][j]:\n                    continue\n                ans = 1\n                dp[i][j] = 1\n                for d in dirs:\n                    x, y = i + d[0], j + d[1]\n                    if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                        ans = max(ans, dp[x][y])\n                dp[i][j] += ans\n                ans = max(ans, dp[i][j])\n        \n        return ans"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 1:\n            return 0\n        \n        if n < 10:\n            return 1\n        \n        if n < 100:\n            return 10\n        \n        if n < 1000:\n            return 100\n        \n        if n < 10000:\n            return 1000\n        \n        if n < 100000:\n            return 10000\n        \n        if n < 1000000:\n            return 100000\n        \n        if n < 10000000:\n            return 1000000\n        \n        if n < 100000000:\n            return 10000000\n        \n        if n < 1000000000:\n            return 100000000\n        \n        if n < 10000000000:\n            return 1000000000\n        \n        if n < 100000000000:\n            return 10000000000\n        \n        if n < 1000000000000:\n            return 100000000000\n        \n        if n < 10000000000000:\n            return 1000000000000\n        \n        if n < 100000000000000:\n            return 10000000000000\n        \n        if n < 1000000000000000:\n            return 100000000000000\n        \n        if n < 10000000000000000:\n            return 1000000000000000\n        \n        if n < 100000000000000000:\n            return 10000000000000000\n        \n        if n < 1000000000000000000:\n            return 100000000000000000\n        \n        if n < 10000000000000000000:\n            return 1000000000000000000\n        \n        if n < 100000000000000000000:\n            return 10000000000000000000\n        \n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        \n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        \n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        \n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        \n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        \n        if n < 100000000000000000000000000:\n            return"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. build a dict\n        word_dict = set(wordDict)\n        \n        # 2. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 3. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 4. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 5. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 6. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 7. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 8. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 9. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 10. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 11. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 12. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 13. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 14. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 15. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 16. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 17. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 18. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:\n                words.append(s[i])\n            else:\n                words.append(words[-1] + s[i])\n        \n        # 19. build a dict of words\n        word_dict = {word: True for word in words}\n        \n        # 20. build a list of words\n        words = [s[0]]\n        for i in range(1, len(s)):\n            if s[i] in word_dict:"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            size = len(queue)\n            for _ in range(size):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        if turnedOn == 0:\n            return [\"0:00\"]\n        \n        if turnedOn == 1:\n            return [\"0:01\", \"0:02\", \"0:04\", \"0:08\", \"0:16\", \"0:32\", \"0:64\", \"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n        \n        if turnedOn == 2:\n            return [\"0:03\", \"0:05\", \"0:06\", \"0:12\", \"0:17\", \"0:33\", \"0:34\", \"0:40\", \"0:64\", \"0:65\", \"1:01\", \"1:02\", \"1:04\", \"1:12\", \"1:13\", \"1:20\", \"1:24\", \"1:32\", \"1:33\", \"1:40\", \"1:64\", \"1:65\", \"2:01\", \"2:02\", \"2:04\", \"2:12\", \"2:13\", \"2:20\", \"2:24\", \"2:32\", \"2:33\", \"2:40\", \"2:64\", \"2:65\", \"3:01\", \"3:02\", \"3:04\", \"3:12\", \"3:13\", \"3:20\", \"3:24\", \"3:32\", \"3:33\", \"3:40\", \"3:64\", \"3:65\", \"4:01\", \"4:02\", \"4:04\", \"4:12\", \"4:13\", \"4:20\", \"4:24\", \"4:32\", \"4:33\", \"4:40\", \"4:64\", \"4:65\", \"5:01\", \"5:02\", \"5:04\", \"5:12\", \"5:13\", \"5:20\", \"5:24\", \"5:32\", \"5:33\", \"5:40\", \"5:64\", \"5:65\", \"6:01\", \"6:02\", \"6:04\", \"6:12\", \"6:13\", \"6:20\", \"6:24\", \"6:32\", \"6:33\", \"6:40\", \"6:64\", \"6:65\", \"7:01\", \"7:02\", \"7:04\", \"7:12\", \"7:13\", \"7:20\", \"7:24\", \"7:32\", \"7:33\", \"7:40\", \"7:64\", \"7:65\", \"8:01\", \"8:02\", \"8:04\", \"8:12\", \"8:13\", \"8:20\", \"8:24\", \"8:32\", \"8:33\", \"8:40\", \"8:64\", \"8:65\", \"9:01\", \"9:02\", \"9:04\", \"9:12\", \"9:13\", \"9:20\", \"9:24\", \"9:32\", \"9:33\", \"9:40\", \"9:64\", \"9:65\", \"10:01\", \"10:02\", \"10:04\", \"10:12\", \"10:13\", \"10:20\", \"10:24\", \"10:32\", \"10:33\", \"10:40\", \"10:64\", \"10:65\", \"11:01\", \"11:02\", \"11:04\", \"11:12\", \"11:13\", \"11:20\", \"11:24\", \"11:32\", \"11:33\", \"11:40\", \"11:64\", \"11:65\", \"12:01\", \"12:02\", \"12:04\", \"12:1"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1,1]]\n        \n        res = [[1,1]]\n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[-1][j-1] + res[-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 3 == 0:\n            return self.isPowerOfThree(n / 3)\n        \n        return False"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        left_max, right_max = heightMap[0][0], heightMap[0][n - 1]\n        top_max, bottom_max = heightMap[m - 1][0], heightMap[m - 1][n - 1]\n        \n        for i in range(1, n):\n            if heightMap[0][i] < left_max:\n                left_max = heightMap[0][i]\n            if heightMap[m - 1][i] < right_max:\n                right_max = heightMap[m - 1][i]\n        \n        for i in range(1, m - 1):\n            if heightMap[i][0] < top_max:\n                top_max = heightMap[i][0]\n            if heightMap[i][n - 1] < bottom_max:\n                bottom_max = heightMap[i][n - 1]\n        \n        ans = 0\n        \n        while left < right and top < bottom:\n            if left_max < right_max:\n                ans += left_max - heightMap[top][left]\n                left_max = max(left_max, heightMap[top][left])\n                top += 1\n            else:\n                ans += right_max - heightMap[top][right]\n                right_max = max(right_max, heightMap[top][right])\n                right -= 1\n            \n            if top_max < bottom_max:\n                ans += top_max - heightMap[bottom][left]\n                top_max = max(top_max, heightMap[bottom][left])\n                bottom -= 1\n            else:\n                ans += bottom_max - heightMap[bottom][right]\n                bottom_max = max(bottom_max, heightMap[bottom][right])\n                bottom += 1\n        \n        if left == right:\n            for i in range(top, bottom + 1):\n                ans += right_max - heightMap[i][left]\n                right_max = max(right_max, heightMap[i][left])\n        \n        if top == bottom:\n            for i in range(left, right + 1):\n                ans += left_max - heightMap[top][i]\n                left_max = max(left_max, heightMap[top][i])\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is empty\n        if not s:\n            return True\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k is odd, we need to take the middle number\n        if k % 2 == 1:\n            median = nums[k // 2]\n        else:\n            median = (nums[k // 2] + nums[k // 2 - 1]) / 2.0\n        \n        # initialize the result list\n        result = [median]\n        \n        # iterate over the rest of the numbers\n        for i in range(k, len(nums)):\n            # if the current number is smaller than the median,\n            # we need to subtract the median\n            if nums[i] < median:\n                median -= 1\n            # if the current number is larger than the median,\n            # we need to add the median\n            else:\n                median += 1\n            # update the median\n            median = (nums[i] + median) / 2.0\n            # add the median to the result list\n            result.append(median)\n        \n        # return the result list\n        return result"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head\n        new_head = head\n        if k % length:\n            new_head = head\n            for i in range(k % length):\n                new_head = new_head.next\n        \n        # find the new tail\n        new_tail = head\n        if k % length:\n            for i in range(length - k % length - 1):\n                new_tail = new_tail.next\n        \n        # rotate the list\n        new_tail.next = None\n        new_head = new_tail.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new head and tail\n        new_tail.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return self.isUgly(n // 2)\n        \n        if n % 3 == 0:\n            return self.isUgly(n // 3)\n        \n        if n % 5 == 0:\n            return self.isUgly(n // 5)\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the positions by left\n        # 2. use a dict to store the max height of the current falling square\n        # 3. use a set to store the left of the current falling square\n        # 4. use a set to store the right of the current falling square\n        # 5. use a variable to store the max height of the current falling square\n        # 6. use a variable to store the max height of the current falling square\n        \n        # 1. sort the positions by left\n        positions.sort(key=lambda x: x[0])\n        \n        # 2. use a dict to store the max height of the current falling square\n        max_height = 0\n        max_height_dict = {0: 0}\n        \n        # 3. use a set to store the left of the current falling square\n        left_set = set()\n        \n        # 4. use a set to store the right of the current falling square\n        right_set = set()\n        \n        # 5. use a variable to store the max height of the current falling square\n        curr_max_height = 0\n        \n        # 6. use a variable to store the max height of the current falling square\n        prev_max_height = 0\n        \n        # 7. iterate over the positions\n        for left, height in positions:\n            # 8. add the right of the current falling square to the set\n            right_set.add(left + height)\n            \n            # 9. add the left of the current falling square to the set\n            left_set.add(left)\n            \n            # 10. update the max height of the current falling square\n            curr_max_height = max(curr_max_height, height)\n            \n            # 11. update the max height of the current falling square\n            prev_max_height = max(prev_max_height, max_height)\n            \n            # 12. update the max height of the current falling square\n            max_height = max(max_height, curr_max_height)\n            \n            # 13. update the max height of the current falling square\n            max_height_dict[left] = max_height\n            \n            # 14. update the max height of the current falling square\n            max_height_dict[left + height] = max_height\n            \n            # 15. update the max height of the current falling square\n            max_height_dict[left + height - 1] = max_height\n            \n            # 16. update the max height of the current falling square\n            max_height_dict[left + height + 1] = max_height\n            \n            # 17. update the max height of the current falling square\n            max_height_dict[left + height + 2] = max_height\n            \n            # 18. update the max height of the current falling square\n            max_height_dict[left + height + 3] = max_height\n            \n            # 19. update the max height of the current falling square\n            max_height_dict[left + height + 4] = max_height\n            \n            # 20. update the max height of the current falling square\n            max_height_dict[left + height + 5] = max_height\n            \n            # 21. update the max height of the current falling square\n            max_height_dict[left + height + 6] = max_height\n            \n            # 22. update the max height of the current falling square\n            max_height_dict[left + height + 7] = max_height\n            \n            # 23. update the max height of the current falling square\n            max_height_dict[left + height + 8] = max_height\n            \n            # 24. update the max height of the current falling square\n            max_height_dict[left + height + 9] = max_height\n            \n            # 25. update the max height of the current falling square\n            max_height_dict[left + height + 10] = max_height\n            \n            # 26. update the max height of the current falling square\n            max_height_dict[left + height + 11] = max_height\n            \n            # 27. update the max height of the current falling square\n            max_height_dict[left + height + 12] = max_height"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        ans = float('-inf')\n        prefix_sum = [0] * n\n        if m > n:\n            matrix = zip(*matrix)\n            n = m\n            m = n\n        \n        for i in range(n):\n            prefix_sum[i] = matrix[i][0] if i == 0 else prefix_sum[i-1] + matrix[i][0]\n            ans = max(ans, prefix_sum[i])\n            if ans == k:\n                return ans\n            q = set()\n            q.add(prefix_sum[i])\n            for j in range(i+1, n):\n                prefix_sum[j] += matrix[j][i]\n                ans = max(ans, prefix_sum[j] - k)\n                if ans == k:\n                    return ans\n                ans = max(ans, prefix_sum[j] - q.bisect_left(prefix_sum[j] - k))\n                q.add(prefix_sum[j])\n                ans = max(ans, prefix_sum[j] - q.bisect_left(prefix_sum[j] - k))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_sum[j] - ans))\n                ans = max(ans, prefix_sum[j] - q.bisect_right(prefix_"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend > 0 and divisor > 0:\n            sign = 1\n        elif dividend > 0 and divisor < 0:\n            sign = -1\n        elif dividend < 0 and divisor > 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        \n        quotient = 0\n        while dividend >= divisor:\n            dividend -= divisor\n            quotient += 1\n        \n        if sign == 1:\n            if quotient > 2147483647:\n                return 2147483647\n            else:\n                return quotient\n        else:\n            if quotient > 2147483648:\n                return -2147483648\n            else:\n                return -quotient"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        # mark all the border 'O's as 'T's\n        for i in range(m):\n            if board[i][0] == 'O':\n                board[i][0] = 'T'\n            if board[i][n-1] == 'O':\n                board[i][n-1] = 'T'\n        \n        for j in range(n):\n            if board[0][j] == 'O':\n                board[0][j] = 'T'\n            if board[m-1][j] == 'O':\n                board[m-1][j] = 'T'\n        \n        # mark all the 'O's that are not on the border as 'T's\n        for i in range(1, m-1):\n            if board[i][0] == 'O':\n                board[i][0] = 'T'\n            if board[i][n-1] == 'O':\n                board[i][n-1] = 'T'\n        \n        # mark all the 'T's as 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n        \n        # mark all the 'F's as 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n        \n        # mark all the 'T's as 'O's\n        for i in range(m):\n            if board[i][0] == 'T':\n                board[i][0] = 'O'\n            if board[i][n-1] == 'T':\n                board[i][n-1] = 'O'\n        \n        # mark all the 'F's as 'O's\n        for j in range(n):\n            if board[0][j] == 'F':\n                board[0][j] = 'O'\n            if board[m-1][j] == 'F':\n                board[m-1][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # key: number\n        # value: index\n        nums_dict = {}\n        \n        # iterate through the list\n        for i, num in enumerate(nums):\n            # if the number is in the dictionary, return the index and the number\n            if num in nums_dict:\n                return [nums_dict[num], i]\n            # if not, add the number to the dictionary\n            else:\n                nums_dict[target - num] = i\n\n# Time Complexity: O(n)\n# Space Complexity: O(n)"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(set(cards)) == 1:\n            return False\n        \n        if 3 in cards:\n            return True\n        \n        if 2 in cards:\n            if 2 in cards[cards.index(2) + 1:]:\n                return True\n            if 2 in cards[:cards.index(2)]:\n                return True\n            return False\n        \n        if 1 in cards:\n            if 1 in cards[cards.index(1) + 1:]:\n                return True\n            if 1 in cards[:cards.index(1)]:\n                return True\n            return False\n        \n        if 0 in cards:\n            if 0 in cards[cards.index(0) + 1:]:\n                return True\n            if 0 in cards[:cards.index(0)]:\n                return True\n            return False\n        \n        if 0 in cards[1:]:\n            return False\n        \n        if 0 in cards[:-1]:\n            return False\n        \n        if 0 in cards[2:]:\n            return False\n        \n        if 0 in cards[3:]:\n            return False\n        \n        if 0 in cards[4:]:\n            return False\n        \n        if 0 in cards[5:]:\n            return False\n        \n        if 0 in cards[6:]:\n            return False\n        \n        if 0 in cards[7:]:\n            return False\n        \n        if 0 in cards[8:]:\n            return False\n        \n        if 0 in cards[9:]:\n            return False\n        \n        if 0 in cards[10:]:\n            return False\n        \n        if 0 in cards[11:]:\n            return False\n        \n        if 0 in cards[12:]:\n            return False\n        \n        if 0 in cards[13:]:\n            return False\n        \n        if 0 in cards[14:]:\n            return False\n        \n        if 0 in cards[15:]:\n            return False\n        \n        if 0 in cards[16:]:\n            return False\n        \n        if 0 in cards[17:]:\n            return False\n        \n        if 0 in cards[18:]:\n            return False\n        \n        if 0 in cards[19:]:\n            return False\n        \n        if 0 in cards[20:]:\n            return False\n        \n        if 0 in cards[21:]:\n            return False\n        \n        if 0 in cards[22:]:\n            return False\n        \n        if 0 in cards[23:]:\n            return False\n        \n        if 0 in cards[24:]:\n            return False\n        \n        if 0 in cards[25:]:\n            return False\n        \n        if 0 in cards[26:]:\n            return False\n        \n        if 0 in cards[27:]:\n            return False\n        \n        if 0 in cards[28:]:\n            return False\n        \n        if 0 in cards[29:]:\n            return False\n        \n        if 0 in cards[30:]:\n            return False\n        \n        if 0 in cards[31:]:\n            return False\n        \n        if 0 in cards[32:]:\n            return False\n        \n        if 0 in cards[33:]:\n            return False\n        \n        if 0 in cards[34:]:\n            return False\n        \n        if 0 in cards[35:]:\n            return False\n        \n        if 0 in cards[36:]:\n            return False\n        \n        if 0 in cards[37:]:\n            return False\n        \n        if 0 in cards[38:]:\n            return False\n        \n        if 0 in cards[39:]:\n            return False\n        \n        if 0 in cards[40:]:\n            return False\n        \n        if 0 in cards[41:]:\n            return False\n        \n        if 0 in cards[42:]:\n            return False\n        \n        if 0 in cards[43:]:\n            return False\n        \n        if 0 in cards[44:]:\n            return False\n        \n        if 0 in cards[45:]:\n            return False\n        \n        if"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.endswith('*'):\n            return False\n        \n        star = p.rfind('*')\n        if star == len(p) - 1:\n            return True\n        \n        if star == 0:\n            return False\n        \n        if s[0] != p[star - 1] and p[star - 1] != '*':\n            return False\n        \n        return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':\n        #     return False\n        \n        # return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':\n        #     return False\n        \n        # return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':\n        #     return False\n        \n        # return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':\n        #     return False\n        \n        # return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':\n        #     return False\n        \n        # return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':\n        #     return False\n        \n        # return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':\n        #     return False\n        \n        # return True\n        \n        # if not p.endswith('*'):\n        #     return False\n        \n        # star = p.rfind('*')\n        # if star == len(p) - 1:\n        #     return True\n        \n        # if star == 0:\n        #     return False\n        \n        # if s[0] != p[star - 1] and p[star - 1] != '*':"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100382/Python-O(n)-solution-with-explanation\n        \n        # Boyer-Moore Voting Algorithm"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a hashmap of the airports\n        # and a list of the airports that are connected to it\n        # if the airport is not in the hashmap,\n        # create a new list\n        # if the airport is in the hashmap,\n        # add the airport to the list\n        # add the list to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the hashmap\n        # add the airport to the list\n        # add the airport to the"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        if n < 4:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] > target:\n            return []\n        \n        if nums[n-1] + nums[n-2] + nums[n-3] + nums[n-4] < target:\n            return []\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5] == nums[n-6]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5] == nums[n-6] == nums[n-7]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5] == nums[n-6] == nums[n-7] == nums[n-8]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5] == nums[n-6] == nums[n-7] == nums[n-8] == nums[n-9]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5] == nums[n-6] == nums[n-7] == nums[n-8] == nums[n-9] == nums[n-10]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5] == nums[n-6] == nums[n-7] == nums[n-8] == nums[n-9] == nums[n-10] == nums[n-11]:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4] == nums[n-5] == nums[n-6] == nums[n-7] == nums[n-8] == nums[n-9] == nums[n-10] == nums[n-1"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings = sorted([(l, -h, r) for l, r, h in buildings])\n        \n        # sort the buildings by right edge\n        buildings += [(r, 0, 0) for r, _, _ in buildings]\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # initialize the current height\n        curr_height = 0\n        \n        # initialize the left edge of the previous building\n        prev_l = -1\n        \n        # iterate over the buildings\n        for l, h, r in buildings:\n            \n            # if the right edge of the current building is different from the previous building\n            if l != prev_l:\n                \n                # if the current building has a height\n                if h:\n                    \n                    # add the current building to the result\n                    result.append([l, -h])\n                    \n                # otherwise, the current building has no height\n                else:\n                    \n                    # remove the current building from the result\n                    result.pop()\n                    \n                # update the current height\n                curr_height = -h\n                \n            # if the current building has a height\n            if h:\n                \n                # update the current height\n                curr_height = max(curr_height, h)\n                \n            # if the current building has no height\n            else:\n                \n                # remove the current building from the result\n                result.pop()\n                \n                # update the current height\n                curr_height = 0\n                \n            # update the left edge of the previous building\n            prev_l = l\n            \n        # initialize the current height\n        curr_height = 0\n        \n        # initialize the right edge of the previous building\n        prev_r = -1\n        \n        # iterate over the buildings\n        for r, h, _ in buildings:\n            \n            # if the right edge of the current building is different from the previous building\n            if r != prev_r:\n                \n                # if the current building has a height\n                if h:\n                    \n                    # add the current building to the result\n                    result.append([r, -h])\n                    \n                # otherwise, the current building has no height\n                else:\n                    \n                    # remove the current building from the result\n                    result.pop()\n                    \n                # update the current height\n                curr_height = -h\n                \n            # if the current building has a height\n            if h:\n                \n                # update the current height\n                curr_height = max(curr_height, h)\n                \n            # if the current building has no height\n            else:\n                \n                # remove the current building from the result\n                result.pop()\n                \n                # update the current height\n                curr_height = 0\n                \n            # update the right edge of the previous building\n            prev_r = r\n            \n        # initialize the current height\n        curr_height = 0\n        \n        # initialize the right edge of the previous building\n        prev_r = -1\n        \n        # iterate over the buildings\n        for r, h, _ in buildings:\n            \n            # if the right edge of the current building is different from the previous building\n            if r != prev_r:\n                \n                # if the current building has a height\n                if h:\n                    \n                    # add the current building to the result\n                    result.append([r, -h])\n                    \n                # otherwise, the current building has no height\n                else:\n                    \n                    # remove the current building from the result\n                    result.pop()\n                    \n                # update the current height\n                curr_height = -h\n                \n            # if the current building has a height\n            if h:\n                \n                # update the current height\n                curr_height = max(curr_height, h)\n                \n            # if the current building has no height\n            else:\n                \n                # remove the current building from the result\n                result.pop()\n                \n                # update the current height\n                curr_height = 0\n                \n            # update the right edge of the previous building\n            prev_r = r\n            \n        # initialize the current height\n        curr_height = 0\n        \n        # initialize the right edge of the previous building\n        prev_r = -1\n        \n        # iterate over the buildings\n        for r, h, _ in buildings:"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # return the reversed string\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) space\n        if not triangle:\n            return 0\n        \n        n = len(triangle[-1])\n        dp = triangle[-1]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(len(triangle[i])):\n                dp[j] = min(dp[j], dp[j+1]) + triangle[i][j]\n        \n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def toWords(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + (\"\" if num % 10 == 0 else \" \" + ones[num % 10])\n            if num < 1000:\n                return ones[num // 100] + \" Hundred\" + (\"\" if num % 100 == 0 else \" \" + toWords(num % 100))\n            if num < 1000000:\n                return toWords(num // 1000) + \" Thousand\" + (\"\" if num % 1000 == 0 else \" \" + toWords(num % 1000))\n            if num < 1000000000:\n                return toWords(num // 1000000) + \" Million\" + (\"\" if num % 1000000 == 0 else \" \" + toWords(num % 1000000))\n            return toWords(num // 1000000000) + \" Billion\" + (\"\" if num % 1000000000 == 0 else \" \" + toWords(num % 1000000000))\n        \n        return toWords(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. If k > n/2, then the number of inverse pairs is 0.\n        # 2. If k == n/2, then the number of inverse pairs is n.\n        # 3. If k < n/2, then the number of inverse pairs is n - k.\n        # 4. If k > n/2, then the number of inverse pairs is n - k.\n        # 5. If k < n/2, then the number of inverse pairs is n - k.\n        # 6. If k > n/2, then the number of inverse pairs is n - k.\n        # 7. If k < n/2, then the number of inverse pairs is n - k.\n        # 8. If k > n/2, then the number of inverse pairs is n - k.\n        # 9. If k < n/2, then the number of inverse pairs is n - k.\n        # 10. If k > n/2, then the number of inverse pairs is n - k.\n        # 11. If k < n/2, then the number of inverse pairs is n - k.\n        # 12. If k > n/2, then the number of inverse pairs is n - k.\n        # 13. If k < n/2, then the number of inverse pairs is n - k.\n        # 14. If k > n/2, then the number of inverse pairs is n - k.\n        # 15. If k < n/2, then the number of inverse pairs is n - k.\n        # 16. If k > n/2, then the number of inverse pairs is n - k.\n        # 17. If k < n/2, then the number of inverse pairs is n - k.\n        # 18. If k > n/2, then the number of inverse pairs is n - k.\n        # 19. If k < n/2, then the number of inverse pairs is n - k.\n        # 20. If k > n/2, then the number of inverse pairs is n - k.\n        # 21. If k < n/2, then the number of inverse pairs is n - k.\n        # 22. If k > n/2, then the number of inverse pairs is n - k.\n        # 23. If k < n/2, then the number of inverse pairs is n - k.\n        # 24. If k > n/2, then the number of inverse pairs is n - k.\n        # 25. If k < n/2, then the number of inverse pairs is n - k.\n        # 26. If k > n/2, then the number of inverse pairs is n - k.\n        # 27. If k < n/2, then the number of inverse pairs is n - k.\n        # 28. If k > n/2, then the number of inverse pairs is n - k.\n        # 29. If k < n/2, then the number of inverse pairs is n - k.\n        # 30. If k > n/2, then the number of inverse pairs is n - k.\n        # 31. If k < n/2, then the number of inverse pairs is n - k.\n        # 32. If k > n/2, then the number of inverse pairs is n - k.\n        # 33. If k < n/2, then the number of inverse pairs is n - k.\n        # 34. If k > n/2, then the number of inverse pairs is n - k.\n        # 35. If k < n/2, then the number of inverse pairs is n - k.\n        # 36. If k > n/2, then the number of inverse pairs is n - k.\n        # 37. If k < n/2, then the number of inverse pairs is n - k.\n        # 38. If k > n/2, then the number of inverse pairs is n - k.\n        # 39. If k < n/2, then the number of inverse pairs is n - k.\n        # 40. If k > n/2, then the number of inverse pairs is n - k.\n        # 41. If k < n/2, then the number of inverse pairs is n - k.\n        # 42. If k > n/"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = first.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create pointers to the dummy nodes\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first partition\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # if the current node is greater than or equal to x, add it to the second partition\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # set the next node of the second partition to None\n        p2.next = None\n        \n        # set the next node of the first partition to the second partition\n        p1.next = dummy2.next\n        \n        # return the first partition\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent1 = -1\n        parent2 = -1\n        parent1_cnt = 0\n        parent2_cnt = 0\n        node_cnt = len(edges)\n        parent_to_node = {}\n        for edge in edges:\n            if edge[1] not in parent_to_node:\n                parent_to_node[edge[1]] = 1\n            else:\n                parent_to_node[edge[1]] += 1\n                if parent_to_node[edge[1]] == 2:\n                    parent1 = edge[1]\n                    parent1_cnt += 1\n            if edge[0] not in parent_to_node:\n                parent_to_node[edge[0]] = 1\n            else:\n                parent_to_node[edge[0]] += 1\n                if parent_to_node[edge[0]] == 2:\n                    parent2 = edge[0]\n                    parent2_cnt += 1\n        \n        if parent1_cnt == 0:\n            return [parent2, edges[0][1]]\n        if parent2_cnt == 0:\n            return [parent1, edges[0][0]]\n        \n        # find the node with only one parent\n        node_to_parent = {}\n        for edge in edges:\n            if edge[0] not in node_to_parent:\n                node_to_parent[edge[0]] = edge[1]\n            else:\n                if node_to_parent[edge[0]] != edge[1]:\n                    return [edge[0], edge[1]]\n        \n        # find the node with only one parent\n        node_to_parent = {}\n        for edge in edges:\n            if edge[1] not in node_to_parent:\n                node_to_parent[edge[1]] = edge[0]\n            else:\n                if node_to_parent[edge[1]] != edge[0]:\n                    return [edge[1], edge[0]]\n        \n        # find the node with only one parent\n        node_to_parent = {}\n        for edge in edges:\n            if edge[0] not in node_to_parent:\n                node_to_parent[edge[0]] = edge[1]\n            else:\n                if node_to_parent[edge[0]] != edge[1]:\n                    return [edge[0], edge[1]]\n        \n        return [parent1, parent2]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [nums[0]]\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i-1]:\n                res.append(nums[i])\n        \n        if len(res) == 1:\n            return [nums]\n        \n        res.append(res[-1])\n        res[-2] = res[-1]\n        \n        res = [res[0]] + res[1:]\n        \n        res_list = []\n        for i in range(len(res)):\n            if i == 0 or res[i] != res[i-1]:\n                res_list.append([res[i]])\n            else:\n                res_list[-1].append(res[i])\n        \n        res_list = [r[:] for r in res_list]\n        \n        res_list[-1][-1] = res[-1]\n        \n        res_list[-2][-1] = res[-2]\n        \n        res_list[-2][-2] = res[-1]\n        \n        res_list[-1][-2] = res[-2]\n        \n        res_list[-1][-3] = res[-3]\n        \n        res_list[-2][-3] = res[-3]\n        \n        res_list[-3][-2] = res[-2]\n        \n        res_list[-3][-3] = res[-1]\n        \n        res_list[-3][-4] = res[-4]\n        \n        res_list[-4][-3] = res[-3]\n        \n        res_list[-4][-4] = res[-2]\n        \n        res_list[-3][-4] = res[-1]\n        \n        res_list[-2][-4] = res[-4]\n        \n        res_list[-4][-2] = res[-2]\n        \n        res_list[-2][-5] = res[-5]\n        \n        res_list[-5][-2] = res[-2]\n        \n        res_list[-5][-3] = res[-3]\n        \n        res_list[-5][-4] = res[-4]\n        \n        res_list[-5][-5] = res[-5]\n        \n        res_list[-4][-5] = res[-6]\n        \n        res_list[-6][-4] = res[-4]\n        \n        res_list[-6][-5] = res[-5]\n        \n        res_list[-5][-6] = res[-6]\n        \n        res_list[-6][-6] = res[-7]\n        \n        res_list[-7][-6] = res[-6]\n        \n        res_list[-7][-7] = res[-7]\n        \n        res_list[-6][-7] = res[-8]\n        \n        res_list[-8][-6] = res[-6]\n        \n        res_list[-8][-7] = res[-7]\n        \n        res_list[-7][-8] = res[-8]\n        \n        res_list[-8][-8] = res[-9]\n        \n        res_list[-9][-8] = res[-8]\n        \n        res_list[-9][-9] = res[-9]\n        \n        res_list[-8][-9] = res[-10]\n        \n        res_list[-10][-8] = res[-8]\n        \n        res_list[-10][-9] = res[-9]\n        \n        res_list[-9][-10] = res[-10]\n        \n        res_list[-10][-10] = res[-11]\n        \n        res_list[-11][-10] = res[-10]\n        \n        res_list[-11][-11] = res[-11]\n        \n        res_list[-10][-11] = res[-12]\n        \n        res_list[-12][-10] = res[-10]\n        \n        res_list[-12][-11] = res[-11]\n        \n        res_list[-11][-12] = res[-12"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR all the numbers\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 2 = 2\n        # 2 ^ 0 = 2\n        # 2 ^ 2 = 0\n        # 0 ^ 3 = 3\n        # 3 ^ 0 = 3\n        # 3 ^ 3 = 0\n        # 0 ^ 4 = 4\n        # 4 ^ 0 = 4\n        # 4 ^ 4 = 0\n        # 0 ^ 5 = 5\n        # 5 ^ 0 = 5\n        # 5 ^ 5 = 0\n        # 0 ^ 6 = 6\n        # 6 ^ 0 = 6\n        # 6 ^ 6 = 0\n        # 0 ^ 7 = 7\n        # 7 ^ 0 = 7\n        # 7 ^ 7 = 0\n        # 0 ^ 8 = 8\n        # 8 ^ 0 = 8\n        # 8 ^ 8 = 0\n        # 0 ^ 9 = 9\n        # 9 ^ 0 = 9\n        # 9 ^ 9 = 0\n        # 0 ^ 10 = 10\n        # 10 ^ 0 = 10\n        # 10 ^ 10 = 0\n        # 0 ^ 11 = 11\n        # 11 ^ 0 = 11\n        # 11 ^ 11 = 0\n        # 0 ^ 12 = 12\n        # 12 ^ 0 = 12\n        # 12 ^ 12 = 0\n        # 0 ^ 13 = 13\n        # 13 ^ 0 = 13\n        # 13 ^ 13 = 0\n        # 0 ^ 14 = 14\n        # 14 ^ 0 = 14\n        # 14 ^ 14 = 0\n        # 0 ^ 15 = 15\n        # 15 ^ 0 = 15\n        # 15 ^ 15 = 0\n        # 0 ^ 16 = 16\n        # 16 ^ 0 = 16\n        # 16 ^ 16 = 0\n        # 0 ^ 17 = 17\n        # 17 ^ 0 = 17\n        # 17 ^ 17 = 0\n        # 0 ^ 18 = 18\n        # 18 ^ 0 = 18\n        # 18 ^ 18 = 0\n        # 0 ^ 19 = 19\n        # 19 ^ 0 = 19\n        # 19 ^ 19 = 0\n        # 0 ^ 20 = 20\n        # 20 ^ 0 = 20\n        # 20 ^ 20 = 0\n        # 0 ^ 21 = 21\n        # 21 ^ 0 = 21\n        # 21 ^ 21 = 0\n        # 0 ^ 22 = 22\n        # 22 ^ 0 = 22\n        # 22 ^ 22 = 0\n        # 0 ^ 23 = 23\n        # 23 ^ 0 = 23\n        # 23 ^ 23 = 0\n        # 0 ^ 24 = 24\n        # 24 ^ 0 = 24\n        # 24 ^ 24 = 0\n        # 0 ^ 25 = 25\n        # 25 ^ 0 = 25\n        # 25 ^ 25 = 0\n        # 0 ^ 26 = 26\n        # 26 ^ 0 = 26\n        # 26 ^ 26 = 0\n        # 0 ^ 27 = 27\n        # 27 ^ 0 = 27\n        # 27 ^ 27 = 0\n        # 0 ^ 28 = 28\n        # 28 ^ 0 = 28\n        # 28 ^ 28 = 0\n        # 0 ^ 29 = 29\n        # 29 ^ 0 = 29\n        # 29 ^ 29 = 0\n        # 0 ^ 30 = 30\n        # 3"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # If the string is empty, return 0\n        if not words:\n            return 0\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0] if grid[0][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp2 = [[0] * n for _ in range(n)]\n        dp2[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp2[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp3 = [[0] * n for _ in range(n)]\n        dp3[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp3[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp4 = [[0] * n for _ in range(n)]\n        dp4[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp4[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp5 = [[0] * n for _ in range(n)]\n        dp5[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp5[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp6 = [[0] * n for _ in range(n)]\n        dp6[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp6[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp7 = [[0] * n for _ in range(n)]\n        dp7[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp7[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp8 = [[0] * n for _ in range(n)]\n        dp8[0][n - 1] = grid[0][n - 1] if grid[0][n - 1] > 0 else 0\n        dp8[n - 1][0] = grid[n - 1][0] if grid[n - 1][0] > 0 else 0\n        \n        # dp[i][j] = max cherries at (i, j)\n        dp9 = [[0] * n for _ in range(n)]\n        dp9[0][n - 1] = grid[0][n - 1] if"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        while True:\n            slow = sum(int(i)**2 for i in str(slow))\n            fast = sum(int(i)**2 for i in str(fast))\n            fast = sum(int(i)**2 for i in str(fast))\n            \n            if slow == 1:\n                return True\n            if fast == 1:\n                return False\n            if slow == fast:\n                return False\n        \n        return True"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return its index\n        # if not, return the index where it would be if it were inserted in order\n        \n        # if target is less than the first element, return 0\n        # if target is greater than the last element, return len(nums)\n        # otherwise, use binary search to find the index\n        \n        if target < nums[0]:\n            return 0\n        if target > nums[-1]:\n            return len(nums)\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # last_index = len(nums) - 1\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     if max_reach >= last_index:\n        #         return True\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # last_index = len(nums) - 1\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     if max_reach >= last_index:\n        #         return True\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # last_index = len(nums) - 1\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     if max_reach >= last_index:\n        #         return True\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # last_index = len(nums) - 1\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     if max_reach >= last_index:\n        #         return True\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # last_index = len(nums) - 1\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     if max_reach >= last_index:\n        #         return True\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # last_index = len(nums) - 1\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     if max_reach >= last_index:\n        #         return True\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # last_index = len(nums) - 1\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     if max_reach >= last_index:\n        #         return True\n        #     max_reach = max(max_reach, nums[i] + i)\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        #"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not grid:\n            return 0\n        \n        m, n = len(grid), len(grid[0])\n        \n        dp = [0] * n\n        dp[0] = grid[0][0]\n        \n        for i in range(1, n):\n            dp[i] = dp[i-1] + grid[0][i]\n        \n        for i in range(1, m):\n            dp[0] = dp[0] + grid[i][0]\n            for j in range(1, n):\n                dp[j] = min(dp[j], dp[j-1]) + grid[i][j]\n        \n        return dp[-1] if m > 1 else dp[0]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        prev = \"1\"\n        curr = \"\"\n        count = 1\n        for i in range(2, n+1):\n            if prev[0] == curr[0]:\n                count += 1\n            else:\n                curr = str(count) + prev[0]\n                count = 1\n            prev = curr\n        return curr"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search for the max element in nums\n        # we need to find the max element in nums\n        # because we need to split nums into k non-empty subarrays\n        # such that the largest sum of any subarray is minimized\n        # so we need to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to find the max element in nums\n        # we can use binary search to"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return -1\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        rot = left\n        left, right = 0, len(nums) - 1\n        if target >= nums[rot]:\n            left = rot\n        else:\n            right = rot\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            elif nums[mid] > target:\n                right = mid - 1\n            else:\n                return mid\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        combinations = ['']\n        \n        for digit in digits:\n            combinations = [combination + letter for combination in combinations\n                            for letter in digit_to_letters[digit]]\n        \n        return combinations"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        cur = []\n        self.dfs(candidates, target, 0, cur, res)\n        return res\n        \n    def dfs(self, candidates, target, start, cur, res):\n        if target == 0:\n            res.append(cur[:])\n            return\n        for i in xrange(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            cur.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], i, cur, res)\n            cur.pop()"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '9'\n            else:\n                return '9' + '0' * (len(n) - 1)\n        \n        if n[0] == '0':\n            return '0'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '0':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '0':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '0':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '0':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '0':\n            return '9'\n        \n        if"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        matrix = [[0] * n for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i] = matrix[i][::-1]\n        \n        # transpose back\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables to keep track of the maximum product and the current maximum product\n        max_product = nums[0]\n        curr_max_product = max_product\n        \n        # Initialize the variables to keep track of the minimum product and the current minimum product\n        min_product = nums[0]\n        curr_min_product = min_product\n        \n        # Iterate through the array from the second element\n        for num in nums[1:]:\n            # If the current number is positive, update the maximum product\n            if num > 0:\n                curr_max_product = max(num, curr_max_product * num)\n                curr_min_product = min(num, curr_min_product * num)\n            # If the current number is negative, update the minimum product\n            else:\n                # If the current minimum product is negative, update the maximum product\n                if curr_min_product < 0:\n                    curr_max_product = max(num, curr_max_product * num)\n                # If the current minimum product is positive, update the minimum product\n                else:\n                    curr_max_product = max(num, curr_min_product * num)\n                # Update the minimum product\n                curr_min_product = min(num, curr_min_product * num)\n            # Update the maximum product if necessary\n            max_product = max(max_product, curr_max_product)\n        \n        # Return the maximum product\n        return max_product"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        stone_set = set(stones)\n        stone_set.add(stones[-1])\n        \n        stone_to_index = {stone: i for i, stone in enumerate(stones)}\n        \n        last_index = stone_to_index[stones[-1]]\n        \n        dp = {0: stone_to_index[stones[0]]}\n        \n        for stone in stones[1:]:\n            if stone - last_index > 1:\n                return False\n            dp[stone] = last_index\n            last_index = stone\n        \n        for stone in dp:\n            if stone_to_index.get(stone + 1) > last_index:\n                return False\n            last_index = stone\n        \n        if last_index == stone_to_index[stones[-1]]:\n            return True\n        \n        last_index = stone_to_index[stones[-1]]\n        \n        for stone in stones[::-1]:\n            if stone_to_index.get(stone - 1) > last_index:\n                return False\n            last_index = stone\n        \n        if last_index == stone_to_index[stones[-1]]:\n            return True\n        \n        return False"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a dictionary to store the index of each score\n        score_dict = {score_sorted[i]: i for i in range(len(score_sorted))}\n        \n        # create a list to store the rank of each score\n        rank = ['Gold Medal', 'Silver Medal', 'Bronze Medal'] + [str(i+1) for i in range(3, len(score_sorted))]\n        \n        # create a list to store the relative rank of each score\n        relative_rank = [rank[score_dict[score]] for score in score]\n        \n        return relative_rank"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the max length to 0\n        max_len = 0\n        \n        # Initialize the start of the window\n        start = 0\n        \n        # Initialize the dictionary to store the characters\n        char_dict = {}\n        \n        # Iterate through the string\n        for i, char in enumerate(s):\n            # If the character is already in the dictionary, update the start of the window to the index of the character + 1\n            if char in char_dict:\n                start = max(start, char_dict[char] + 1)\n            # Update the character in the dictionary to the index of the character\n            char_dict[char] = i\n            # Update the max length to the max of the current length and the difference between the current index and the start of the window\n            max_len = max(max_len, i - start + 1)\n        \n        # Return the max length\n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 1\n            else:\n                word_dict[word] += 1\n        \n        word_dict_len = len(word_dict)\n        s_len = len(s)\n        if word_len * word_count > s_len:\n            return []\n        \n        word_dict_len_s = word_len * word_count\n        s_dict = {}\n        for i in range(word_len):\n            if s[i:i+word_len] not in s_dict:\n                s_dict[s[i:i+word_len]] = 1\n            else:\n                s_dict[s[i:i+word_len]] += 1\n        \n        if word_dict_len_s == len(s_dict):\n            return [0]\n        \n        start = 0\n        end = word_len\n        res = []\n        while end <= s_len:\n            if s_dict[s[start:end]] == word_dict_len_s:\n                if s[start:end] not in word_dict:\n                    s_dict[s[start:end]] = 1\n                else:\n                    s_dict[s[start:end]] += 1\n                if s_dict[s[start:end]] == word_dict[s[start:end]]:\n                    word_dict[s[start:end]] -= 1\n                else:\n                    s_dict[s[start:end]] -= 1\n                if word_dict[s[start:end]] == 0:\n                    word_dict.pop(s[start:end])\n            else:\n                if s[start:end] not in word_dict:\n                    s_dict[s[start:end]] = 1\n                else:\n                    s_dict[s[start:end]] += 1\n                if s_dict[s[start:end]] == word_dict[s[start:end]]:\n                    word_dict[s[start:end]] -= 1\n                else:\n                    s_dict[s[start:end]] -= 1\n                if word_dict[s[start:end]] == 0:\n                    word_dict.pop(s[start:end])\n            if len(word_dict) == 0:\n                res.append(start)\n            start += 1\n            end += 1\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max element in the array\n        # 2. find the index of the max element\n        # 3. if the max element is at the index, then we have a chunk\n        # 4. if the max element is not at the index, then we have a chunk\n        # 5. if the max element is at the index, then we have a chunk\n        # 6. if the max element is not at the index, then we have a chunk\n        # 7. if the max element is at the index, then we have a chunk\n        # 8. if the max element is not at the index, then we have a chunk\n        # 9. if the max element is at the index, then we have a chunk\n        # 10. if the max element is not at the index, then we have a chunk\n        # 11. if the max element is at the index, then we have a chunk\n        # 12. if the max element is not at the index, then we have a chunk\n        # 13. if the max element is at the index, then we have a chunk\n        # 14. if the max element is not at the index, then we have a chunk\n        # 15. if the max element is at the index, then we have a chunk\n        # 16. if the max element is not at the index, then we have a chunk\n        # 17. if the max element is at the index, then we have a chunk\n        # 18. if the max element is not at the index, then we have a chunk\n        # 19. if the max element is at the index, then we have a chunk\n        # 20. if the max element is not at the index, then we have a chunk\n        # 21. if the max element is at the index, then we have a chunk\n        # 22. if the max element is not at the index, then we have a chunk\n        # 23. if the max element is at the index, then we have a chunk\n        # 24. if the max element is not at the index, then we have a chunk\n        # 25. if the max element is at the index, then we have a chunk\n        # 26. if the max element is not at the index, then we have a chunk\n        # 27. if the max element is at the index, then we have a chunk\n        # 28. if the max element is not at the index, then we have a chunk\n        # 29. if the max element is at the index, then we have a chunk\n        # 30. if the max element is not at the index, then we have a chunk\n        # 31. if the max element is at the index, then we have a chunk\n        # 32. if the max element is not at the index, then we have a chunk\n        # 33. if the max element is at the index, then we have a chunk\n        # 34. if the max element is not at the index, then we have a chunk\n        # 35. if the max element is at the index, then we have a chunk\n        # 36. if the max element is not at the index, then we have a chunk\n        # 37. if the max element is at the index, then we have a chunk\n        # 38. if the max element is not at the index, then we have a chunk\n        # 39. if the max element is at the index, then we have a chunk\n        # 40. if the max element is not at the index, then we have a chunk\n        # 41. if the max element is at the index, then we have a chunk\n        # 42. if the max element is not at the index, then we have a chunk\n        # 43. if the max element is at the index, then we have a chunk\n        # 44. if the max element is not at the index, then we have a chunk\n        # 45. if the max element is at the index, then we have a chunk\n        # 46. if the max element is not at the index, then we have a chunk\n        # 47. if the max element is at the index, then we have a chunk\n        # 48. if the max element is not at the index, then we have a chunk\n        # 49. if the max element is at the index, then"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head.next\n        prev = head\n        prev.next = None\n        \n        while curr:\n            if curr.val < prev.val:\n                prev.next = curr.next\n                curr.next = dummy.next\n                dummy.next = curr\n                curr = prev.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                curr = curr.next\n                prev.next = curr\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        n = len(nums)\n        \n        if n < 3:\n            return res\n        \n        if nums[0] > 0 or nums[-1] < 0:\n            return res\n        \n        if nums[0] == 0 and nums[-1] == 0:\n            res.append([0,0,0])\n            return res\n        \n        if nums[0] == 0:\n            res.append([0,0,0])\n            return res\n        \n        if nums[-1] == 0:\n            return res\n        \n        if nums[0] == nums[-1]:\n            if nums[0] == 0:\n                res.append([0,0,0])\n                return res\n            else:\n                return res\n        \n        if nums[0] < 0:\n            left = 0\n            right = n - 1\n            while left < right:\n                if nums[left] > 0:\n                    break\n                if nums[left] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] < 0:\n                    if nums[left] == nums[left + 1]:\n                        res.append([0,0,0])\n                        left += 1\n                        continue\n                    if nums[left] > -nums[left + 1]:\n                        break\n                    if nums[left] < -nums[left + 1]:\n                        left += 1\n                        continue\n                if nums[right] > 0:\n                    break\n                if nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[right] < 0:\n                    if nums[right] == nums[right - 1]:\n                        res.append([0,0,0])\n                        right -= 1\n                        continue\n                    if nums[right] > -nums[right - 1]:\n                        break\n                    if nums[right] < -nums[right - 1]:\n                        right -= 1\n                        continue\n                if nums[left] + nums[right] > 0:\n                    break\n                if nums[left] + nums[right] < 0:\n                    if nums[left] + nums[right] == -nums[left + 1]:\n                        res.append([0,0,0])\n                        left += 1\n                        continue\n                    if nums[left] + nums[right] < -nums[left + 1]:\n                        break\n                    if nums[left] + nums[right] > -nums[left + 1]:\n                        left += 1\n                        continue\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] + nums[right] == 0:\n                    res.append([0,0,0])\n                    break\n                if nums[left] +"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        if m > n:\n            word1, word2 = word2, word1\n            m, n = n, m\n        \n        dp = [0] * (n + 1)\n        prev = 0\n        for i in range(m):\n            curr = prev\n            prev = dp[0]\n            dp[0] = i + 1\n            for j in range(1, n + 1):\n                temp = curr\n                curr = dp[j]\n                if word1[i] == word2[j - 1]:\n                    dp[j] = temp\n                else:\n                    dp[j] = min(temp, curr) + 1\n            prev = curr\n        \n        return n - prev"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        if left:\n            left = [str(root.val) + '->' + path for path in left]\n        else:\n            left = [str(root.val)]\n        \n        if right:\n            right = [path + '->' + str(root.val) for path in right]\n        else:\n            right = [str(root.val)]\n        \n        return left + right"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. sort the array\n        # 3. count the number of reverse pairs\n        # 4. use binary search to find the number of elements smaller than nums[i] / 2\n        # 5. add the number of reverse pairs to the answer\n        \n        # 1. 2 pointers\n        # 2. sort the array\n        nums = [2 * n - 1 for n in nums]\n        nums.sort()\n        \n        # 3. count the number of reverse pairs\n        ans = 0\n        cnt = 0\n        for n in nums:\n            ans += cnt\n            if n > 1:\n                cnt += 1\n        \n        # 4. use binary search to find the number of elements smaller than nums[i] / 2\n        # 5. add the number of reverse pairs to the answer\n        cnt = 0\n        for n in nums:\n            if n > 1:\n                cnt += 1\n            ans -= cnt\n        \n        return ans // 2"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if tx < sx or ty < sy:\n            return False\n        \n        if sx == tx and sy < ty:\n            return (ty - sy) % sx == 0\n        \n        if sy == ty and sx < tx:\n            return (tx - sx) % sy == 0\n        \n        return True"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        if len(v1) > len(v2):\n            v2.extend([0] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0] * (len(v2) - len(v1)))\n        \n        for i, v in enumerate(v1):\n            if v > v2[i]:\n                return 1\n            elif v < v2[i]:\n                return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit = 0\n        # for price in prices[1:]:\n        #     if price < buy:\n        #         buy = price\n        #     else:\n        #         profit = max(profit, price - buy)\n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # buy = prices[0]\n        # profit ="}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        \n        # max heap\n        max_heap = []\n        \n        # total time\n        total_time = 0\n        \n        # number of courses\n        n = len(courses)\n        \n        # iterate over courses\n        for duration, end_time in courses:\n            # add course to max heap\n            heapq.heappush(max_heap, (-duration, end_time))\n            \n            # update total time\n            total_time += duration\n            \n            # if number of courses is greater than n, remove the course with the longest duration\n            if len(max_heap) > n:\n                # get the duration of the course with the longest duration\n                duration, end_time = heapq.heappop(max_heap)\n                \n                # update total time\n                total_time -= -duration\n                \n        # return the number of courses\n        return len(max_heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = curr\n                curr = curr.next\n            else:\n                curr = curr.next\n        \n        if count % k != 0:\n            prev.next = None\n        \n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 1:\n                temp = curr.next\n                curr.next = prev.next\n                prev.next = curr\n                curr = temp\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] == s[len(s) - 1] and len(set(s[1:len(s) - 1])) == 1:\n            return True\n        \n        if s[0] != s[len(s) - 1]:\n            return False\n        \n        if s[0] == s[1]:\n            return False\n        \n        if s[0] != s[len(s) - 2]:\n            return False\n        \n        if s[0] == s[2]:\n            return True\n        \n        if s[0] != s[3]:\n            return False\n        \n        if s[0] == s[4]:\n            return True\n        \n        if s[0] != s[5]:\n            return False\n        \n        if s[0] == s[6]:\n            return True\n        \n        if s[0] != s[7]:\n            return False\n        \n        if s[0] == s[8]:\n            return True\n        \n        if s[0] != s[9]:\n            return False\n        \n        if s[0] == s[10]:\n            return True\n        \n        if s[0] != s[11]:\n            return False\n        \n        if s[0] == s[12]:\n            return True\n        \n        if s[0] != s[13]:\n            return False\n        \n        if s[0] == s[14]:\n            return True\n        \n        if s[0] != s[15]:\n            return False\n        \n        if s[0] == s[16]:\n            return True\n        \n        if s[0] != s[17]:\n            return False\n        \n        if s[0] == s[18]:\n            return True\n        \n        if s[0] != s[19]:\n            return False\n        \n        if s[0] == s[20]:\n            return True\n        \n        if s[0] != s[21]:\n            return False\n        \n        if s[0] == s[22]:\n            return True\n        \n        if s[0] != s[23]:\n            return False\n        \n        if s[0] == s[24]:\n            return True\n        \n        if s[0] != s[25]:\n            return False\n        \n        if s[0] == s[26]:\n            return True\n        \n        if s[0] != s[27]:\n            return False\n        \n        if s[0] == s[28]:\n            return True\n        \n        if s[0] != s[29]:\n            return False\n        \n        if s[0] == s[30]:\n            return True\n        \n        if s[0] != s[31]:\n            return False\n        \n        if s[0] == s[32]:\n            return True\n        \n        if s[0] != s[33]:\n            return False\n        \n        if s[0] == s[34]:\n            return True\n        \n        if s[0] != s[35]:\n            return False\n        \n        if s[0] == s[36]:\n            return True\n        \n        if s[0] != s[37]:\n            return False\n        \n        if s[0] == s[38]:\n            return True\n        \n        if s[0] != s[39]:\n            return False\n        \n        if s[0] == s[40]:\n            return True\n        \n        if s[0] != s[41]:\n            return False\n        \n        if s[0] == s[42]:\n            return True\n        \n        if s[0] != s[43]:\n            return False\n        \n        if s[0] == s[44]:\n            return True\n        \n        if s[0] != s[45]:\n            return False\n        \n        if s[0] == s[46]:\n            return True\n        \n        if s[0] != s[47]:\n            return False\n        \n        if s[0] =="}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n        # 2. 1, 3, 6, 15, 36, 84, 190, 435, 1001, 2405, 5760, 13080, 29856, 65536, 137280, 294960, 605440\n        # 3. 1, 4, 10, 40, 120, 360, 1080, 3600, 10800, 36036, 108010, 360360, 1080108, 3603600, 10801080, 36036000, 108010800, 360360000\n        # 4. 1, 5, 20, 120, 505, 2400, 10800, 54650, 288000, 1654000, 9460000, 62740000, 403200000, 2416000000, 14400000000, 80640000000, 466560000000, 2748000000000\n        # 5. 1, 6, 35, 210, 1050, 5505, 31530, 167960, 870200, 4895000, 28032000, 164540000, 958900000, 5895000000, 34350000000, 196800000000, 1033300000000, 5592000000000, 31460000000000\n        # 6. 1, 7, 56, 390, 2640, 16800, 100800, 54650, 300300, 1680000, 9460000, 62740000, 403200000, 2416000000, 14400000000, 80640000000, 466560000000, 2748000000000, 15500000000000\n        # 7. 1, 8, 70, 510, 3850, 28000, 196000, 128000, 700000, 4032000, 24160000, 144000000, 806400000, 4665600000, 27480000000, 155000000000, 870200000000, 4895000000000, 28032000000000\n        # 8. 1, 9, 84, 660, 5"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR of a number with itself is 0\n        # 3. XOR of a number with 0 is the number\n        # 4. XOR of a number with itself is the number\n        # 5. XOR of a number with 0 is the number\n        # 6. XOR of a number with itself is the number\n        # 7. XOR of a number with 0 is the number\n        # 8. XOR of a number with itself is the number\n        # 9. XOR of a number with 0 is the number\n        # 10. XOR of a number with itself is the number\n        # 11. XOR of a number with 0 is the number\n        # 12. XOR of a number with itself is the number\n        # 13. XOR of a number with 0 is the number\n        # 14. XOR of a number with itself is the number\n        # 15. XOR of a number with 0 is the number\n        # 16. XOR of a number with itself is the number\n        # 17. XOR of a number with 0 is the number\n        # 18. XOR of a number with itself is the number\n        # 19. XOR of a number with 0 is the number\n        # 20. XOR of a number with itself is the number\n        # 21. XOR of a number with 0 is the number\n        # 22. XOR of a number with itself is the number\n        # 23. XOR of a number with 0 is the number\n        # 24. XOR of a number with itself is the number\n        # 25. XOR of a number with 0 is the number\n        # 26. XOR of a number with itself is the number\n        # 27. XOR of a number with 0 is the number\n        # 28. XOR of a number with itself is the number\n        # 29. XOR of a number with 0 is the number\n        # 30. XOR of a number with itself is the number\n        # 31. XOR of a number with 0 is the number\n        # 32. XOR of a number with itself is the number\n        # 33. XOR of a number with 0 is the number\n        # 34. XOR of a number with itself is the number\n        # 35. XOR of a number with 0 is the number\n        # 36. XOR of a number with itself is the number\n        # 37. XOR of a number with 0 is the number\n        # 38. XOR of a number with itself is the number\n        # 39. XOR of a number with 0 is the number\n        # 40. XOR of a number with itself is the number\n        # 41. XOR of a number with 0 is the number\n        # 42. XOR of a number with itself is the number\n        # 43. XOR of a number with 0 is the number\n        # 44. XOR of a number with itself is the number\n        # 45. XOR of a number with 0 is the number\n        # 46. XOR of a number with itself is the number\n        # 47. XOR of a number with 0 is the number\n        # 48. XOR of a number with itself is the number\n        # 49. XOR of a number with 0 is the number\n        # 50. XOR of a number with itself is the number\n        # 51. XOR of a number with 0 is the number\n        # 52. XOR of a number with itself is the number\n        # 53. XOR of a number with 0 is the number\n        # 54. XOR of a number with itself is the number\n        # 55. XOR of a number with 0 is the number\n        # 56. XOR of a number with itself is the number\n        # 57. XOR of a number with 0 is the number\n        # 58. XOR of a number with itself is the number\n        # 59. XOR of a number with 0 is the number\n        # 60."}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the frequency of each letter in target\n        # 2. Create a dictionary with the frequency as key and the letters as value\n        # 3. Create a list of the letters in target\n        # 4. Create a list of the stickers\n        # 5. Create a list of the stickers with the frequency of each letter in target\n        # 6. Create a list of the stickers with the frequency of each letter in target\n        # 7. Create a list of the stickers with the frequency of each letter in target\n        # 8. Create a list of the stickers with the frequency of each letter in target\n        # 9. Create a list of the stickers with the frequency of each letter in target\n        # 10. Create a list of the stickers with the frequency of each letter in target\n        # 11. Create a list of the stickers with the frequency of each letter in target\n        # 12. Create a list of the stickers with the frequency of each letter in target\n        # 13. Create a list of the stickers with the frequency of each letter in target\n        # 14. Create a list of the stickers with the frequency of each letter in target\n        # 15. Create a list of the stickers with the frequency of each letter in target\n        # 16. Create a list of the stickers with the frequency of each letter in target\n        # 17. Create a list of the stickers with the frequency of each letter in target\n        # 18. Create a list of the stickers with the frequency of each letter in target\n        # 19. Create a list of the stickers with the frequency of each letter in target\n        # 20. Create a list of the stickers with the frequency of each letter in target\n        # 21. Create a list of the stickers with the frequency of each letter in target\n        # 22. Create a list of the stickers with the frequency of each letter in target\n        # 23. Create a list of the stickers with the frequency of each letter in target\n        # 24. Create a list of the stickers with the frequency of each letter in target\n        # 25. Create a list of the stickers with the frequency of each letter in target\n        # 26. Create a list of the stickers with the frequency of each letter in target\n        # 27. Create a list of the stickers with the frequency of each letter in target\n        # 28. Create a list of the stickers with the frequency of each letter in target\n        # 29. Create a list of the stickers with the frequency of each letter in target\n        # 30. Create a list of the stickers with the frequency of each letter in target\n        # 31. Create a list of the stickers with the frequency of each letter in target\n        # 32. Create a list of the stickers with the frequency of each letter in target\n        # 33. Create a list of the stickers with the frequency of each letter in target\n        # 34. Create a list of the stickers with the frequency of each letter in target\n        # 35. Create a list of the stickers with the frequency of each letter in target\n        # 36. Create a list of the stickers with the frequency of each letter in target\n        # 37. Create a list of the stickers with the frequency of each letter in target\n        # 38. Create a list of the stickers with the frequency of each letter in target\n        # 39. Create a list of the stickers with the frequency of each letter in target\n        # 40. Create a list of the stickers with the frequency of each letter in target\n        # 41. Create a list of the stickers with the frequency of each letter in target\n        # 42. Create a list of the stickers with the frequency of each letter in target\n        # 43. Create a list of the stickers with the frequency of each letter in target\n        # 44. Create a list of the stickers with the frequency of each letter in target\n        # 45. Create a list of the stickers with the frequency of each letter in target\n        # 46. Create a list of the stickers with the frequency of each letter in target\n        # 47. Create a list of the stickers with the frequency of each letter in target\n        # 48. Create a list of the stickers with the frequency of each letter in target"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n == 0:\n            return 0\n        \n        dp = [1] * n\n        prev = s[0]\n        ans = 1\n        \n        for i in range(1, n):\n            if s[i] == prev:\n                dp[i] = dp[i-1] + 1\n            else:\n                dp[i] = 1\n                prev = s[i]\n                ans += 1\n        \n        return ans + dp[n-1] - 1 if dp[n-1] > 1 else ans"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        if x == 2:\n            return 1\n        \n        if x == 3:\n            return 1\n        \n        if x == 4:\n            return 2\n        \n        if x == 5:\n            return 2\n        \n        if x == 6:\n            return 2\n        \n        if x == 7:\n            return 2\n        \n        if x == 8:\n            return 3\n        \n        if x == 9:\n            return 3\n        \n        if x == 10:\n            return 3\n        \n        if x == 11:\n            return 3\n        \n        if x == 12:\n            return 3\n        \n        if x == 13:\n            return 3\n        \n        if x == 14:\n            return 4\n        \n        if x == 15:\n            return 4\n        \n        if x == 16:\n            return 4\n        \n        if x == 17:\n            return 4\n        \n        if x == 18:\n            return 4\n        \n        if x == 19:\n            return 4\n        \n        if x == 20:\n            return 5\n        \n        if x == 21:\n            return 5\n        \n        if x == 22:\n            return 5\n        \n        if x == 23:\n            return 5\n        \n        if x == 24:\n            return 5\n        \n        if x == 25:\n            return 5\n        \n        if x == 26:\n            return 5\n        \n        if x == 27:\n            return 5\n        \n        if x == 28:\n            return 5\n        \n        if x == 29:\n            return 5\n        \n        if x == 30:\n            return 6\n        \n        if x == 31:\n            return 6\n        \n        if x == 32:\n            return 6\n        \n        if x == 33:\n            return 6\n        \n        if x == 34:\n            return 6\n        \n        if x == 35:\n            return 6\n        \n        if x == 36:\n            return 6\n        \n        if x == 37:\n            return 6\n        \n        if x == 38:\n            return 6\n        \n        if x == 39:\n            return 6\n        \n        if x == 40:\n            return 7\n        \n        if x == 41:\n            return 7\n        \n        if x == 42:\n            return 7\n        \n        if x == 43:\n            return 7\n        \n        if x == 44:\n            return 7\n        \n        if x == 45:\n            return 7\n        \n        if x == 46:\n            return 7\n        \n        if x == 47:\n            return 7\n        \n        if x == 48:\n            return 7\n        \n        if x == 49:\n            return 7\n        \n        if x == 50:\n            return 8\n        \n        if x == 51:\n            return 8\n        \n        if x == 52:\n            return 8\n        \n        if x == 53:\n            return 8\n        \n        if x == 54:\n            return 8\n        \n        if x == 55:\n            return 8\n        \n        if x == 56:\n            return 8\n        \n        if x == 57:\n            return 8\n        \n        if x == 58:\n            return 8\n        \n        if x == 59:\n            return 8\n        \n        if x == 60:\n            return 9\n        \n        if x == 61:\n            return 9\n        \n        if x == 62:\n            return 9\n        \n        if x == 63:\n            return 9\n        \n        if x == 64:\n            return 9\n        \n        if x == 65:\n            return 9\n        \n        if x == 66:\n            return 9\n        \n        if x == 67:\n            return 9\n        \n        if x == 68:\n            return 9"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to map roman numerals to their integer values\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        \n        # initialize the result to the last value in the dictionary\n        result = roman_dict[s[-1]]\n        \n        # iterate through the string in reverse order\n        for i in range(len(s) - 2, -1, -1):\n            # if the current value is less than the next value, subtract it from the result\n            if roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            # otherwise, add the current value to the result\n            else:\n                result += roman_dict[s[i]]\n        \n        # return the result\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        res = []\n        for i in range(k):\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n        \n        res.append(nums[q[0]])\n        \n        for i in range(k, len(nums)):\n            if q[0] == i - k:\n                q.popleft()\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n            res.append(nums[q[0]])\n        \n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        if len(nums2) == 0:\n            return nums1[len(nums1) // 2] if len(nums1) % 2 == 1 else (nums1[len(nums1) // 2 - 1] + nums1[len(nums1) // 2]) / 2.0\n        \n        if len(nums1) == 0:\n            if len(nums2) % 2 == 1:\n                return nums2[len(nums2) // 2]\n            else:\n                return (nums2[len(nums2) // 2 - 1] + nums2[len(nums2) // 2]) / 2.0\n        \n        if len(nums1) == 1 and len(nums2) == 1:\n            return (nums1[0] + nums2[0]) / 2.0\n        \n        if len(nums1) == 1:\n            if nums1[0] < nums2[0]:\n                return nums1[0]\n            else:\n                return nums2[0]\n        \n        if len(nums2) == 1:\n            if nums1[0] < nums2[0]:\n                return nums1[0]\n            else:\n                return nums2[0]\n        \n        if nums1[0] < nums2[0]:\n            if len(nums1) % 2 == 1:\n                return nums1[len(nums1) // 2]\n            else:\n                return (nums1[len(nums1) // 2 - 1] + nums1[len(nums1) // 2]) / 2.0\n        else:\n            if len(nums2) % 2 == 1:\n                return nums2[len(nums2) // 2]\n            else:\n                return (nums2[len(nums2) // 2 - 1] + nums2[len(nums2) // 2]) / 2.0\n        \n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums2[0]\n        # nums1[0] < nums"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            \n            if nums[mid] > nums[0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row.append(row[i-1] * (rowIndex - i + 1) // i)\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        path = [root.val]\n        self.dfs(root, targetSum - root.val, res, path)\n        return res\n        \n    def dfs(self, node, target, res, path):\n        if not node.left and not node.right and target == 0:\n            res.append(path[:])\n            return\n        \n        if node.left:\n            path.append(node.left.val)\n            self.dfs(node.left, target - node.left.val, res, path)\n            path.pop()\n        \n        if node.right:\n            path.append(node.right.val)\n            self.dfs(node.right, target - node.right.val, res, path)\n            path.pop()\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        path = [root.val]\n        self.dfs(root, targetSum - root.val, res, path)\n        return res\n        \n    def dfs(self, node, target, res, path):\n        if not node.left and not node.right and target == 0:\n            res.append(path[:])\n            return\n        \n        if node.left:\n            path.append(node.left.val)\n            self.dfs(node.left, target - node.left.val, res, path)\n            path.pop()\n        \n        if node.right:\n            path.append(node.right.val)\n            self.dfs(node.right, target - node.right.val, res, path)\n            path.pop()\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        path = [root.val]\n        self.dfs(root, targetSum - root.val, res, path)\n        return res\n        \n    def dfs(self, node, target, res, path):\n        if not node.left and not node.right and target == 0:\n            res.append(path[:])\n            return\n        \n        if node.left:\n            path.append(node.left.val)\n            self.dfs(node.left, target - node.left.val, res, path)\n            path.pop()\n        \n        if node.right:\n            path.append(node.right.val)\n            self.dfs(node.right, target - node.right.val, res, path)\n            path.pop()\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        path = [root.val]\n        self.dfs(root, targetSum - root.val, res, path)\n        return res\n        \n    def dfs(self, node, target, res, path):\n        if not node.left and not"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the square root of area\n        # 2. find the largest number that is less than square root of area\n        # 3. return [area/largest, largest]\n        # 4. if area is perfect square, return [area, 1]\n        \n        if area < 2:\n            return [area, 1]\n        \n        root = int(math.sqrt(area))\n        if root * root == area:\n            return [root, root]\n        \n        return [area, root]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build a graph\n        wordSet = set(wordList)\n        if endWord not in wordSet:\n            return []\n        \n        # build a graph\n        graph = collections.defaultdict(set)\n        for word in wordSet:\n            graph[word].add(word)\n            graph[word].add(beginWord)\n        \n        # build a graph\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '_' + word[i+1:]].add(word)\n        \n        # build a graph\n        q = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        found = False\n        level = 0\n        res = []\n        \n        # build a graph\n        while q:\n            level += 1\n            new_q = collections.deque()\n            for word in q:\n                if word == endWord:\n                    found = True\n                for nxt in graph[word]:\n                    if nxt not in visited:\n                        visited[nxt] = 1\n                        new_q.append(nxt)\n            q = new_q\n        \n        # build a graph\n        if not found:\n            return []\n        \n        # build a graph\n        if level == 1:\n            return [[beginWord, endWord]]\n        \n        # build a graph\n        if endWord not in visited:\n            return []\n        \n        # build a graph\n        prev = {endWord: beginWord}\n        while prev[endWord] != beginWord:\n            endWord = prev[endWord]\n            prev[endWord] = beginWord\n        \n        # build a graph\n        res = [[beginWord, endWord]]\n        \n        # build a graph\n        while endWord != beginWord:\n            endWord = prev[endWord]\n            res.append([endWord, beginWord])\n        \n        # build a graph\n        return res[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(node):\n            if not node:\n                return 0\n            left = height(node.left)\n            if left == -1:\n                return -1\n            right = height(node.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        prev = None\n        curr = 0\n        for num in nums:\n            if num != prev:\n                curr = 1\n                prev = num\n            else:\n                curr += 1\n            res.append(res[-1] + [num] * curr)\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \uc2a4\ud0dd\uc5d0 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud55c\ub2e4.\n        ## 2. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        ## 3. \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uc758 \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        ## 4. \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        ## 5. \uc67c\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc67c\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uc758 \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        ## 6. \uc67c\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        ## 7. \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uc758 \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        ## 8. \uc624\ub978\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        ## 9. \uc67c\ucabd\uc5d0 \ub354 \uc791\uc740 \uc218\uac00 \uc788\ub2e4\uba74 \ufffd"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x1, y1, x2, y2 = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        seen = set()\n        \n        for x, y, a, b in rectangles:\n            x1, y1, x2, y2 = min(x1, a), min(y1, b), max(x2, a), max(y2, b)\n            area += (a - x) * (b - y)\n            seen.add((x, y))\n            seen.add((x, b))\n            seen.add((a, y))\n            seen.add((a, b))\n        \n        if (x1, y1) not in seen or (x1, y2) not in seen or (x2, y1) not in seen or (x2, y2) not in seen:\n            return False\n        \n        if area != (x2 - x1) * (y2 - y1):\n            return False\n        \n        if (x1, y1) in seen and (x1, y2) in seen and (x2, y1) in seen and (x2, y2) in seen:\n            return True\n        \n        return False"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 701\n        # 26^3 = 19683\n        # 26^4 = 48221\n        # 26^5 = 115303\n        # 26^6 = 304021\n        # 26^7 = 792403\n        # 26^8 = 2388201\n        # 26^9 = 6561603\n        # 26^10 = 1944401\n        # 26^11 = 5826203\n        # 26^12 = 17710601\n        # 26^13 = 52262603\n        # 26^14 = 156998601\n        # 26^15 = 47755603\n        # 26^16 = 143511201\n        # 26^17 = 430333603\n        # 26^18 = 129177201\n        # 26^19 = 387533603\n        # 26^20 = 1162977601\n        # 26^21 = 3489533603\n        # 26^22 = 1046462401\n        # 26^23 = 293024003\n        # 26^24 = 97633201\n        # 26^25 = 282177603\n        # 26^26 = 946433601\n        # 26^27 = 273027763\n        # 26^28 = 893101361\n        # 26^29 = 2679334403\n        # 26^30 = 807477201\n        # 26^31 = 2432233603\n        # 26^32 = 8299977601\n        # 26^33 = 25155533603\n        # 26^34 = 8501102401\n        # 26^35 = 2573333603\n        # 26^36 = 8799997601\n        # 26^37 = 26155553603\n        # 26^38 = 8871102401\n        # 26^39 = 2643333603\n        # 26^40 = 8999997601\n        # 26^41 = 26755553603\n        # 26^42 = 9071102401\n        # 26^43 = 2693333603\n        # 26^44 = 9199997601\n        # 26^45 = 27155553603\n        # 26^46 = 9371102401\n        # 26^47 = 2743333603\n        # 26^48 = 9599997601\n        # 26^49 = 27755553603\n        # 26^50 = 9771102401\n        # 26^51 = 2803333603\n        # 26^52 = 9999997601\n        # 26^53 = 30155553603\n        # 26^54 = 10231102401\n        # 2"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        \n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = num\n            else:\n                cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = [board[0][0]*10 + board[0][1], board[0][2],\n                   board[1][0]*10 + board[1][1]]\n        \n        # convert board_1d to a 0-indexed array\n        board_1d = [board_1d[1], board_1d[2], board_1d[0]]\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 12 and board_1d[1] == 3 and board_1d[2] == 0:\n            return 0\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 0 and board_1d[1] == 1 and board_1d[2] == 2:\n            return 1\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 4 and board_1d[1] == 5 and board_1d[2] == 3:\n            return 2\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 1 and board_1d[1] == 2 and board_1d[2] == 3:\n            return 3\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 2 and board_1d[1] == 5 and board_1d[2] == 4:\n            return 4\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 3 and board_1d[1] == 5 and board_1d[2] == 1:\n            return 5\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 5 and board_1d[1] == 2 and board_1d[2] == 4:\n            return 6\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 3 and board_1d[1] == 1 and board_1d[2] == 0:\n            return 7\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 1 and board_1d[1] == 5 and board_1d[2] == 2:\n            return 8\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 2 and board_1d[1] == 4 and board_1d[2] == 3:\n            return 9\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 4 and board_1d[1] == 3 and board_1d[2] == 1:\n            return 10\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 2 and board_1d[1] == 0 and board_1d[2] == 5:\n            return 11\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 5 and board_1d[1] == 3 and board_1d[2] == 2:\n            return 12\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 3 and board_1d[1] == 2 and board_1d[2] == 1:\n            return 13\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 1 and board_1d[1] == 0 and board_1d[2] == 4:\n            return 14\n        \n        # convert board_1d to a 0-indexed array\n        if board_1d[0] == 4 and board_1d[1] == 1 and board_1d[2] == 3:\n            return 15\n        \n        # convert board_1d to a 0-index"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t and t[i] != s_to_t[s[i]]:\n                return False\n            if t[i] in t_to_s and s[i] != t_to_s[t[i]]:\n                return False\n            s_to_t[s[i]] = t[i]\n            t_to_s[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r = m\n        pivot = l\n        \n        # if target is in the first half, search there\n        if nums[pivot] <= target <= nums[-1]:\n            l, r = 0, pivot\n        else:\n            l, r = pivot, len(nums) - 1\n        \n        # binary search\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            elif nums[m] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        \n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        \n        dp = [0] * n\n        dp[0] = 1\n        \n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                dp[0] = 0\n            if dp[0] == 0:\n                dp[0] = 1\n            else:\n                dp[0] = 0\n            for j in range(1, n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                else:\n                    dp[j] += dp[j-1]\n        \n        if dp[n-1] == 0:\n            return 0\n        \n        last = dp[n-1]\n        \n        for i in range(m-2, -1, -1):\n            if obstacleGrid[i][n-1] == 1:\n                last = 0\n            if last == 0:\n                dp[n-1] = 0\n            else:\n                dp[n-1] = last\n                last = dp[n-1]\n            for j in range(n-2, -1, -1):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                else:\n                    dp[j] += dp[j+1]\n        \n        return dp[0]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if s[-1] == '0':\n            return 0\n        \n        if s[-2] == '0':\n            return 0\n        \n        if s[-2] > '2' or s[-2] == '0' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '1':\n            return 0\n        \n        if s[-2] == '2' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '2' and s[-1] == '6':\n            return 1\n        \n        if s[-2] == '2' and s[-1] == '7':\n            return 1\n        \n        if s[-2] == '2' and s[-1] == '8':\n            return 1\n        \n        if s[-2] == '2' and s[-1] == '9':\n            return 1\n        \n        if s[-2] == '3' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '3' and s[-1] == '6':\n            return 1\n        \n        if s[-2] == '3' and s[-1] == '7':\n            return 1\n        \n        if s[-2] == '3' and s[-1] == '8':\n            return 1\n        \n        if s[-2] == '3' and s[-1] == '9':\n            return 1\n        \n        if s[-2] == '4' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '4' and s[-1] == '6':\n            return 1\n        \n        if s[-2] == '4' and s[-1] == '7':\n            return 1\n        \n        if s[-2] == '4' and s[-1] == '8':\n            return 1\n        \n        if s[-2] == '4' and s[-1] == '9':\n            return 1\n        \n        if s[-2] == '5' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '5' and s[-1] == '6':\n            return 1\n        \n        if s[-2] == '5' and s[-1] == '7':\n            return 1\n        \n        if s[-2] == '5' and s[-1] == '8':\n            return 1\n        \n        if s[-2] == '5' and s[-1] == '9':\n            return 1\n        \n        if s[-2] == '6' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '6' and s[-1] == '6':\n            return 1\n        \n        if s[-2] == '6' and s[-1] == '7':\n            return 1\n        \n        if s[-2] == '6' and s[-1] == '8':\n            return 1\n        \n        if s[-2] == '6' and s[-1] == '9':\n            return 1\n        \n        if s[-2] == '7' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '7' and s[-1] == '6':\n            return 1\n        \n        if s[-2] == '7' and s[-1] == '7':\n            return 1\n        \n        if s[-2] == '7' and s[-1] == '8':\n            return 1\n        \n        if s[-2] == '7' and s[-1] == '9':\n            return 1\n        \n        if s[-2] == '8' and s[-1] > '6':\n            return 0\n        \n        if s[-2] == '8' and s[-1] == '6':\n            return 1\n        \n        if s[-2] == '8' and s[-1] == '7':\n            return 1\n        \n        if s[-2] == '"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(n-2):\n            left = i + 1\n            right = n - 1\n            \n            while left < right:\n                curr_sum = nums[i] + nums[left] + nums[right]\n                \n                if curr_sum == target:\n                    return target\n                \n                if abs(curr_sum - target) < abs(closest - target):\n                    closest = curr_sum\n                \n                if curr_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        d = {}\n        for n in nums1:\n            if n not in d:\n                d[n] = 1\n            else:\n                d[n] += 1\n        \n        res = []\n        for n in nums2:\n            if n in d and d[n] > 0:\n                res.append(n)\n                d[n] -= 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        prev = None\n        ans = float('inf')\n        curr = root\n        \n        while curr:\n            if curr.left:\n                prev = curr.left\n                while prev.right:\n                    prev = prev.right\n                ans = min(ans, curr.val - prev.val)\n            curr = curr.right\n        \n        return ans"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of them\n        # if the tree is empty, return []\n        # if the tree has only one element, return [element]\n        # if the tree has no elements, return []\n        \n        # find the most frequent element\n        # if there are multiple modes, return any one of"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle not in haystack:\n            return -1\n        \n        return haystack.find(needle)"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lower, upper, and digit\n        lower, upper, digit = 0, 0, 0\n        for c in password:\n            if c.islower():\n                lower += 1\n            elif c.isupper():\n                upper += 1\n            elif c.isdigit():\n                digit += 1\n        \n        # 2. Count the number of repeating characters\n        repeat = 0\n        if lower:\n            repeat = max(lower - 1, 0)\n        if upper:\n            repeat = max(upper - 1, repeat)\n        if digit:\n            repeat = max(digit - 1, repeat)\n        \n        # 3. Count the number of characters that can be replaced\n        replace = 0\n        if len(password) < 6:\n            replace = 6 - len(password)\n        elif len(password) > 20:\n            replace = len(password) - 20\n        \n        # 4. Calculate the number of steps\n        steps = max(lower - 1, upper - 1, digit - 1)\n        steps = max(steps, repeat)\n        steps = max(steps, replace)\n        \n        # 5. Calculate the number of steps\n        if len(password) < 6:\n            steps = max(steps, 6 - len(password))\n        elif len(password) > 20:\n            steps = max(steps, len(password) - 20)\n        \n        # 6. Calculate the number of steps\n        if steps == 0:\n            return 0\n        \n        # 7. Calculate the number of steps\n        if len(password) < 6:\n            steps = max(steps, 1)\n        elif len(password) > 20:\n            steps = max(steps, 3)\n        \n        # 8. Calculate the number of steps\n        if steps == 0:\n            return 0\n        \n        # 9. Calculate the number of steps\n        if lower == 0:\n            steps = max(steps, 1)\n        elif lower == 1:\n            steps = max(steps, 2)\n        elif lower == 2:\n            steps = max(steps, 3)\n        elif lower == 3:\n            steps = max(steps, 4)\n        elif lower == 4:\n            steps = max(steps, 5)\n        \n        # 10. Calculate the number of steps\n        if upper == 0:\n            steps = max(steps, 1)\n        elif upper == 1:\n            steps = max(steps, 2)\n        elif upper == 2:\n            steps = max(steps, 3)\n        elif upper == 3:\n            steps = max(steps, 4)\n        elif upper == 4:\n            steps = max(steps, 5)\n        \n        # 11. Calculate the number of steps\n        if digit == 0:\n            steps = max(steps, 1)\n        elif digit == 1:\n            steps = max(steps, 2)\n        elif digit == 2:\n            steps = max(steps, 3)\n        elif digit == 3:\n            steps = max(steps, 4)\n        elif digit == 4:\n            steps = max(steps, 5)\n        \n        # 12. Calculate the number of steps\n        if repeat == 0:\n            steps = max(steps, 1)\n        elif repeat == 1:\n            steps = max(steps, 2)\n        elif repeat == 2:\n            steps = max(steps, 3)\n        elif repeat == 3:\n            steps = max(steps, 4)\n        elif repeat == 4:\n            steps = max(steps, 5)\n        \n        # 13. Calculate the number of steps\n        if replace == 0:\n            steps = max(steps, 1)\n        elif replace == 1:\n            steps = max(steps, 2)\n        elif replace == 2:\n            steps = max(steps, 3)\n        elif replace == 3:\n            steps = max(steps, 4)\n        elif replace == 4:\n            steps = max(steps, 5)\n        \n        # 14. Calculate the number of steps\n        if steps == 0:\n            return 0\n        \n        # 15. Calculate the number of steps\n        if lower == 0:\n            steps"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        return n//5 + self.trailingZeroes(n//5)"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        if numRows == 2:\n            return s[::2]\n        \n        if numRows == 3:\n            return s[::3]\n        \n        if numRows > 3:\n            return s[::3]\n        \n        if numRows == 4:\n            return s[::4]\n        \n        if numRows > 4:\n            return s[::4]\n        \n        return s"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = height[left], height[right]\n        ans = 0\n        \n        while left < right:\n            if left_max < right_max:\n                ans += left_max - height[left]\n                left_max = max(left_max, height[left])\n                left += 1\n            else:\n                ans += right_max - height[right]\n                right_max = max(right_max, height[right])\n                right -= 1\n        \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) space\n        ## O(n) time\n        \n        ## O(n) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        nums = [(n, i) for i, n in enumerate(nums)]\n        nums.sort()\n        \n        # count the number of smaller numbers to the right\n        ans = [0] * len(nums)\n        cnt = 0\n        for i in reversed(xrange(len(nums))):\n            if nums[i][1] == i:\n                cnt += 1\n            else:\n                ans[i] = cnt\n            nums[i] = (nums[i][0], i)\n        \n        # count the number of smaller numbers to the left\n        cnt = 0\n        for i in xrange(len(nums)):\n            if nums[i][1] == i:\n                cnt += 1\n            else:\n                ans[i] += cnt\n            nums[i] = (nums[i][0], i)\n        \n        return ans"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by start, then end\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        \n        # initialize the first two values\n        first, second = intervals[0][1], intervals[0][1] - 1\n        \n        # initialize the count\n        count = 0\n        \n        # loop through the rest of the intervals\n        for i in intervals[1:]:\n            # if the start is greater than the second value,\n            # update the second value\n            if i[0] > second:\n                second = i[1] - 1\n                # increment the count\n                count += 1\n            # if the end is greater than the second value,\n            # update the second value\n            elif i[1] > second:\n                second = i[1]\n        \n        # return the count\n        return count"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, left, right):\n        if left is None or right is None:\n            return left is None and right is None\n        \n        return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the formula into tokens\n        # 2. build a dict of elements and their counts\n        # 3. build a dict of elements and their counts\n        # 4. build a dict of elements and their counts\n        # 5. build a dict of elements and their counts\n        # 6. build a dict of elements and their counts\n        # 7. build a dict of elements and their counts\n        # 8. build a dict of elements and their counts\n        # 9. build a dict of elements and their counts\n        # 10. build a dict of elements and their counts\n        # 11. build a dict of elements and their counts\n        # 12. build a dict of elements and their counts\n        # 13. build a dict of elements and their counts\n        # 14. build a dict of elements and their counts\n        # 15. build a dict of elements and their counts\n        # 16. build a dict of elements and their counts\n        # 17. build a dict of elements and their counts\n        # 18. build a dict of elements and their counts\n        # 19. build a dict of elements and their counts\n        # 20. build a dict of elements and their counts\n        # 21. build a dict of elements and their counts\n        # 22. build a dict of elements and their counts\n        # 23. build a dict of elements and their counts\n        # 24. build a dict of elements and their counts\n        # 25. build a dict of elements and their counts\n        # 26. build a dict of elements and their counts\n        # 27. build a dict of elements and their counts\n        # 28. build a dict of elements and their counts\n        # 29. build a dict of elements and their counts\n        # 30. build a dict of elements and their counts\n        # 31. build a dict of elements and their counts\n        # 32. build a dict of elements and their counts\n        # 33. build a dict of elements and their counts\n        # 34. build a dict of elements and their counts\n        # 35. build a dict of elements and their counts\n        # 36. build a dict of elements and their counts\n        # 37. build a dict of elements and their counts\n        # 38. build a dict of elements and their counts\n        # 39. build a dict of elements and their counts\n        # 40. build a dict of elements and their counts\n        # 41. build a dict of elements and their counts\n        # 42. build a dict of elements and their counts\n        # 43. build a dict of elements and their counts\n        # 44. build a dict of elements and their counts\n        # 45. build a dict of elements and their counts\n        # 46. build a dict of elements and their counts\n        # 47. build a dict of elements and their counts\n        # 48. build a dict of elements and their counts\n        # 49. build a dict of elements and their counts\n        # 50. build a dict of elements and their counts\n        # 51. build a dict of elements and their counts\n        # 52. build a dict of elements and their counts\n        # 53. build a dict of elements and their counts\n        # 54. build a dict of elements and their counts\n        # 55. build a dict of elements and their counts\n        # 56. build a dict of elements and their counts\n        # 57. build a dict of elements and their counts\n        # 58. build a dict of elements and their counts\n        # 59. build a dict of elements and their counts\n        # 60. build a dict of elements and their counts\n        # 61. build a dict of elements and their counts\n        # 62. build a dict of elements and their counts\n        # 63. build a dict of elements and their counts\n        # 64. build a dict of elements and their counts\n        # 65. build a dict of elements and their counts\n        # 66. build a dict of elements and their counts\n        # 67. build a dict of elements and their counts\n        # 68. build a dict of elements and their counts\n        # 69. build a dict of elements and their counts"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1010101010101010101010101010101\n        # 0101010101010101010101010101010\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 0000000000000000000000000000000\n        # 000000"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        left = root.left\n        root.left = root.right\n        root.right = left\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = ['()']\n        for i in range(1, n-1):\n            res.append('()' + res[0])\n            res[0] = '(' + res[0] + ')'\n        \n        if n % 2 == 1:\n            res.append('()' + res[0])\n            res[0] = '(' + res[0] + ')'\n        \n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > 1:\n            return 1\n        \n        # initialize\n        patches = 0\n        nums_len = len(nums)\n        nums_idx = 0\n        curr_num = 1\n        \n        # iterate\n        while curr_num <= n:\n            if nums_idx < nums_len and nums[nums_idx] <= curr_num:\n                curr_num += nums[nums_idx]\n                nums_idx += 1\n            else:\n                curr_num += curr_num\n                patches += 1\n        \n        # handle last number\n        if curr_num > n:\n            patches -= 1\n        \n        # return\n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # cur_len = 0\n        \n        # for i, c in enumerate(s):\n        #     if c == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if not stack:\n        #             stack.append(i)\n        #         else:\n        #             cur_len = i - stack[-1]\n        #             max_len = max(max_len, cur_len)\n        #     max_len = max(max_len, cur_len)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # left = 0\n        # right = 0\n        # max_len = 0\n        \n        # for c in s:\n        #     if c == '(':\n        #         left += 1\n        #     else:\n        #         right += 1\n        #         if right > left:\n        #             left = 0\n        #             right = 0\n        #     max_len = max(max_len, left + right)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # left = 0\n        # right = 0\n        # max_len = 0\n        \n        # for c in s:\n        #     if c == '(':\n        #         left += 1\n        #     else:\n        #         right += 1\n        #         if right > left:\n        #             left = 0\n        #             right = 1\n        #     max_len = max(max_len, left)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # left = 0\n        # max_len = 0\n        \n        # for c in s:\n        #     if c == '(':\n        #         left += 1\n        #     else:\n        #         left -= 1\n        #         if left < 0:\n        #             left = 0\n        #     max_len = max(max_len, left)\n        # return max_len + left\n        \n        if len(s) < 2:\n            return 0\n        \n        left = 0\n        max_len = 0\n        last_index = -1\n        \n        for i, c in enumerate(s):\n            if c == '(':\n                left += 1\n            else:\n                if left > 0:\n                    left -= 1\n                    max_len += 1\n                else:\n                    last_index = i\n                    left = 0\n        \n        if left > 0:\n            max_len += left\n            left = 0\n        \n        if last_index >= 0:\n            max_len += left\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if denominator == 0:\n            return \"NaN\"\n        \n        if numerator < 0 and denominator > 0:\n            sign = -1\n        elif numerator > 0 and denominator < 0:\n            sign = 1\n        else:\n            sign = 1\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return str(sign * quotient)\n        \n        if remainder * 10 in denominator:\n            return str(sign * quotient) + \".\" + str(remainder * 10 // denominator) + \"(\" + str(remainder) + \")\"\n        \n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        \n        decimal_part = \"\"\n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            \n            if remainder in remainder_dict:\n                decimal_part = \"(\" + decimal_part\n                decimal_part += str(remainder_dict[remainder] - 1) + \")\"\n                break\n            \n            remainder_dict[remainder] = len(remainder_dict)\n            decimal_part += str(quotient)\n        \n        return str(sign * quotient) + \".\" + decimal_part"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the second half\n        mid = self.sortList(mid)\n        \n        # merge the two halves\n        head = mid\n        while mid and mid.next:\n            temp = mid.next\n            mid.next = mid.next.next\n            temp.next = head\n            head = temp\n        \n        return head"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # sort by width, then height\n        # if width is the same, sort by height\n        # descending order\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)\n        \n        # find longest increasing subsequence\n        # O(nlogn)\n        # O(n)\n        # O(n)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(1) space\n        ## O(m+n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ##"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the n is larger than the length of the list\n        if n == 1:\n            head.next = None\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is negative\n        if n < 0:\n            return head\n        \n        # initialize the slow and fast pointers\n        slow = head\n        fast = head\n        \n        # move the fast pointer n steps\n        for i in range(n):\n            fast = fast.next\n        \n        # if the fast pointer is None, the nth node is the last node\n        if not fast:\n            return head\n        \n        # move the slow pointer until the fast pointer reaches the end\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # if the slow pointer is the last node, remove the nth node\n        if not slow.next:\n            slow.next = slow.next.next\n        else:\n            slow.next = slow.next.next.next\n        \n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersection(nums2, nums1)\n        \n        nums1 = set(nums1)\n        return list(nums1 & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) // len(machines)\n        ans = avg * len(machines)\n        curr = 0\n        for m in machines:\n            curr += m - avg\n            ans = max(ans, curr)\n            ans = max(ans, m - avg)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if m > n:\n            m, n = n, m\n        \n        if k == 1:\n            return min(m, n) - 1\n        \n        if k == 2:\n            return min(m, n) - 1 if m > n else n - 1\n        \n        if k == 3:\n            return min(m, n) - 2\n        \n        if k == 4:\n            return min(m, n) - 2 if m > n else n - 2\n        \n        if k == 5:\n            return min(m, n) - 2 if m > n else n - 2 if m > n else n - 1\n        \n        if k == 6:\n            return min(m, n) - 3\n        \n        if k == 7:\n            return min(m, n) - 3 if m > n else n - 3\n        \n        if k == 8:\n            return min(m, n) - 3 if m > n else n - 3 if m > n else n - 2\n        \n        if k == 9:\n            return min(m, n) - 3 if m > n else n - 3 if m > n else n - 2 if m > n else n - 1\n        \n        if k == 10:\n            return min(m, n) - 4\n        \n        if k == 11:\n            return min(m, n) - 4 if m > n else n - 4\n        \n        if k == 12:\n            return min(m, n) - 4 if m > n else n - 4 if m > n else n - 3\n        \n        if k == 13:\n            return min(m, n) - 4 if m > n else n - 4 if m > n else n - 3 if m > n else n - 2\n        \n        if k == 14:\n            return min(m, n) - 4 if m > n else n - 4 if m > n else n - 3 if m > n else n - 2 if m > n else n - 1\n        \n        if k == 15:\n            return min(m, n) - 5\n        \n        if k == 16:\n            return min(m, n) - 5 if m > n else n - 5\n        \n        if k == 17:\n            return min(m, n) - 5 if m > n else n - 5 if m > n else n - 4\n        \n        if k == 18:\n            return min(m, n) - 5 if m > n else n - 5 if m > n else n - 4 if m > n else n - 3\n        \n        if k == 19:\n            return min(m, n) - 5 if m > n else n - 5 if m > n else n - 4 if m > n else n - 3 if m > n else n - 2\n        \n        if k == 20:\n            return min(m, n) - 5 if m > n else n - 5 if m > n else n - 4 if m > n else n - 3 if m > n else n - 2 if m > n else n - 1\n        \n        if k == 21:\n            return min(m, n) - 6\n        \n        if k == 22:\n            return min(m, n) - 6 if m > n else n - 6\n        \n        if k == 23:\n            return min(m, n) - 6 if m > n else n - 6 if m > n else n - 5\n        \n        if k == 24:\n            return min(m, n) - 6 if m > n else n - 6 if m > n else n - 5 if m > n else n - 4\n        \n        if k == 25:\n            return min(m, n) - 6 if m > n else n - 6 if m > n else n - 5 if m > n else n - 4 if m > n else n - 3\n        \n        if k == 26:\n            return min(m, n) - 6 if m > n else n - 6 if m > n else n - 5 if m > n else n - 4 if m > n else n - 3 if m > n else"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        # find the middle of the linked list\n        slow = head\n        fast = head.next.next\n        # slow will be the middle of the list\n        # fast will be the end of the list\n        # slow.next will be the middle of the list\n        # fast.next will be the end of the list\n        # slow.next.next will be the middle of the list\n        # fast.next.next will be the end of the list\n        # slow.next.next.next will be the middle of the list\n        # fast.next.next.next will be the end of the list\n        # slow.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next will be the end of the list\n        # slow.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next.next will be the middle of the list\n        # fast.next"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        elif list2:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        left = [0] * n\n        right = [n] * n\n        max_area = 0\n        \n        for i in range(m):\n            cur_left = 0\n            cur_right = n\n            \n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    left[j] = max(left[j], cur_left)\n                else:\n                    left[j] = 0\n                    cur_left = j + 1\n            for j in range(n - 1, -1, -1):\n                if matrix[i][j] == '1':\n                    right[j] = min(right[j], cur_right)\n                else:\n                    right[j] = n\n                    cur_right = j\n            for j in range(n):\n                max_area = max(max_area, (right[j] - left[j] - 1) * heights[j])\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not nums:\n            return [[]]\n        \n        if len(nums) == 1:\n            return [[], nums[0]]\n        \n        nums.sort()\n        \n        res = [[]]\n        prev = nums[0]\n        \n        for n in nums[1:]:\n            if n != prev:\n                res.append([prev])\n                prev = n\n            res[-1].append(n)\n        \n        res.append([prev])\n        \n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. remove all spaces\n        s = s.strip()\n        \n        # 2. check if it is a valid number\n        if not s or s[0] not in '+-' and s[0] not in '0123456789':\n            return False\n        \n        # 3. check if it is a valid integer\n        if s[0] in '+-' and len(s) > 1:\n            s = s[1:]\n        elif s[0] not in '0123456789':\n            return False\n        \n        # 4. check if it is a valid decimal\n        if s[0] not in '0123456789' and s[1] not in 'eE' and s[1] not in '+-':\n            return False\n        \n        # 5. check if it is a valid decimal\n        if s[0] in '0123456789' and s[1] in 'eE' and s[2] not in '+-':\n            return False\n        \n        # 6. check if it is a valid decimal\n        if s[0] in '0123456789' and s[1] in 'eE' and s[2] in '+-':\n            s = s[3:]\n        \n        # 7. check if it is a valid decimal\n        if s[0] not in '0123456789' and s[1] not in 'eE' and s[1] not in '+-':\n            return False\n        \n        # 8. check if it is a valid decimal\n        if s[0] in '0123456789' and s[1] in 'eE' and s[2] in '+-':\n            s = s[3:]\n        \n        # 9. check if it is a valid decimal\n        if s[0] not in '0123456789' and s[1] not in 'eE' and s[1] not in '+-':\n            return False\n        \n        # 10. check if it is a valid decimal\n        if s[0] in '0123456789' and s[1] in 'eE' and s[2] in '+-':\n            s = s[3:]\n        \n        # 11. check if it is a valid decimal\n        if s[0] not in '0123456789' and s[1] not in 'eE' and s[1] not in '+-':\n            return False\n        \n        # 12. check if it is a valid decimal\n        if s[0] in '0123456789' and s[1] in 'eE' and s[2] in '+-':\n            s = s[3:]\n        \n        # 13. check if it is a valid decimal\n        if s[0] not in '0123456789' and s[1] not in 'eE' and s[1] not in '+-':\n            return False\n        \n        # 14. check if it is a valid decimal\n        if s[0] in '0123456789' and s[1] in 'eE' and s[2] in '+-':\n            s = s[3:]\n        \n        # 15. check if it is a valid decimal\n        if s[0] not in '0123456789' and s[1] not in 'eE' and s[1] not in '+-':\n            return False\n        \n        # 16. check if it is a valid decimal\n        if s[0] in '0123456789' and s[1] in 'eE' and s[2] in '+-':\n            s = s[3:]\n        \n        # 17. check if it is a valid decimal\n        if s[0] not in '0123456789' and s[1] not in 'eE' and s[1] not in '+-':\n            return False\n        \n        #"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X\n        # 1000, 9"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 1 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 0 = 0\n        # 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # 1. Find the empty cell\n        empty_cell = None\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] == '.':\n                    empty_cell = (i, j)\n                    break\n            if empty_cell:\n                break\n        \n        # 2. Recursively solve the rest of the board\n        self.solve(board, empty_cell[0], empty_cell[1])\n        \n        # 3. Return the board\n        return board\n    \n    def solve(self, board, row, col):\n        # 1. Find the possible values for the current cell\n        possible_values = set(range(1, 10))\n        if board[row][col] != '.':\n            possible_values.remove(int(board[row][col]))\n        \n        # 2. Find the possible values for the row\n        for i in range(9):\n            if board[row][i] != '.':\n                possible_values.remove(int(board[row][i]))\n        \n        # 3. Find the possible values for the column\n        for i in range(9):\n            if board[i][col] != '.':\n                possible_values.remove(int(board[i][col]))\n        \n        # 4. Find the possible values for the 3x3 box\n        box_row = row // 3 * 3\n        box_col = col // 3 * 3\n        for i in range(box_row, box_row + 3):\n            for j in range(box_col, box_col + 3):\n                if board[i][j] != '.':\n                    possible_values.remove(int(board[i][j]))\n        \n        # 5. Find the possible values for the current cell\n        possible_values = possible_values - set(map(int, board[row][col]))\n        \n        # 6. If there are no possible values, the board is solved\n        if not possible_values:\n            return True\n        \n        # 7. Otherwise, try to fill the current cell with a possible value\n        for value in possible_values:\n            board[row][col] = str(value)\n            \n            # 8. Recursively solve the rest of the board\n            if self.solve(board, row, col):\n                return True\n            \n            # 9. If the recursive call fails, try the next possible value\n            board[row][col] = '.'\n        \n        # 10. If the current cell is not a valid solution, return False\n        return False"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the two nodes that are swapped\n        # first, find the first node that is smaller than the previous node\n        # second, find the first node that is larger than the previous node\n        # swap the values of the two nodes\n        # update the previous node to the second node\n        \n        # initialize the previous node with a dummy value\n        prev = TreeNode(float('-inf'))\n        \n        # initialize the first and second nodes with dummy values\n        first = second = None\n        \n        # initialize the stack\n        stack = []\n        \n        # initialize the current node\n        curr = root\n        \n        # loop until the current node is not None\n        while curr:\n            # if the current node is the left child of the previous node\n            if curr.left:\n                # push the current node onto the stack\n                stack.append(curr)\n                # set the current node to the left child of the current node\n                curr = curr.left\n            # otherwise, the current node is the right child of the previous node\n            else:\n                # if the previous node is the first node that is smaller than the current node\n                if prev.val > curr.val:\n                    # if the first node is not set\n                    if first is None:\n                        # set the first node to the previous node\n                        first = prev\n                        # set the second node to the current node\n                        second = curr\n                    # otherwise, the second node is set\n                    else:\n                        # set the second node to the current node\n                        second = curr\n                # set the previous node to the current node\n                prev = curr\n                # set the current node to the right child of the current node\n                curr = curr.right\n                # if the stack is not empty\n                if stack:\n                    # pop the top node from the stack\n                    stack.pop()\n                # otherwise, the current node is the right child of the previous node\n                else:\n                    # set the current node to the right child of the previous node\n                    curr = curr.right\n        \n        # swap the values of the first and second nodes\n        first.val, second.val = second.val, first.val\n        \n        return root"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # check if the first half of the list is equal to the second half of the list\n        left = head\n        right = prev\n        while right:\n            if left.val != right.val:\n                return False\n            left = left.next\n            right = right.next\n        \n        # restore the original list\n        if slow:\n            left = left.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num // 2\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        ans = [0]\n        last_one = 0\n        \n        for i in range(1, n+1):\n            if i & 1 == 1:\n                last_one += 1\n            ans.append(ans[i-last_one] + 1)\n        \n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        n = len(s1)\n        dp = {}\n        \n        for i in range(1, n):\n            if s1[i] != s2[n - i - 1]:\n                dp[(s1[i], s1[n - i - 1])] = 1\n            else:\n                dp[(s1[i], s1[n - i - 1])] = 0\n        \n        for i in range(1, n):\n            if s1[i] != s2[0]:\n                dp[(s1[i], s1[0])] = 1\n            else:\n                dp[(s1[i], s1[0])] = 0\n        \n        for i in range(n - 1):\n            if s1[i] != s2[n - 1 - i]:\n                dp[(s1[i], s1[n - 1 - i])] = 1\n            else:\n                dp[(s1[i], s1[n - 1 - i])] = 0\n        \n        for i in range(n - 1):\n            if s1[i] != s2[i]:\n                dp[(s1[i], s1[i])] = 1\n            else:\n                dp[(s1[i], s1[i])] = 0\n        \n        for i in range(n - 2):\n            if s1[i] != s2[n - 1 - i - 1]:\n                dp[(s1[i], s1[n - 1 - i - 1])] = 1\n            else:\n                dp[(s1[i], s1[n - 1 - i - 1])] = 0\n        \n        for i in range(n - 2):\n            if s1[i] != s2[i]:\n                dp[(s1[i], s1[i])] = 1\n            else:\n                dp[(s1[i], s1[i])] = 0\n        \n        for i in range(n - 3):\n            if s1[i] != s2[n - 2 - i - 1]:\n                dp[(s1[i], s1[n - 2 - i - 1])] = 1\n            else:\n                dp[(s1[i], s1[n - 2 - i - 1])] = 0\n        \n        for i in range(n - 3):\n            if s1[i] != s2[i]:\n                dp[(s1[i], s1[i])] = 1\n            else:\n                dp[(s1[i], s1[i])] = 0\n        \n        for i in range(n - 4):\n            if s1[i] != s2[n - 3 - i - 1]:\n                dp[(s1[i], s1[n - 3 - i - 1])] = 1\n            else:\n                dp[(s1[i], s1[n - 3 - i - 1])] = 0\n        \n        for i in range(n - 4):\n            if s1[i] != s2[i]:\n                dp[(s1[i], s1[i])] = 1\n            else:\n                dp[(s1[i], s1[i])] = 0\n        \n        for i in range(n - 5):\n            if s1[i] != s2[n - 4 - i - 1]:\n                dp[(s1[i], s1[n - 4 - i - 1])] = 1\n            else:\n                dp[(s1[i], s1[n - 4 - i - 1])] = 0\n        \n        for i in range(n - 5):\n            if s1[i] != s2[i]:\n                dp[(s1[i], s1[i])] = 1\n            else:\n                dp[(s1[i], s1[i])] = 0\n        \n        for i in range(n - 6):\n            if s1[i]"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # remove empty strings from the list\n        dirs = [d for d in dirs if d]\n        \n        # initialize a stack to store the directories\n        stack = []\n        \n        # iterate over the list of directories\n        for d in dirs:\n            # if the directory is '..'\n            if d == '..':\n                # if the stack is not empty, pop the last directory from the stack\n                if stack:\n                    stack.pop()\n            # if the directory is not '..'\n            else:\n                # add the directory to the stack\n                stack.append(d)\n        \n        # initialize a string to store the simplified path\n        simplified_path = '/'\n        \n        # iterate over the stack\n        for d in stack:\n            # add the directory to the simplified path\n            simplified_path += d + '/'\n        \n        # if the simplified path ends with a slash, remove it\n        if simplified_path.endswith('/'):\n            simplified_path = simplified_path[:-1]\n        \n        # return the simplified path\n        return simplified_path"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not board or not board[0]:\n            return []\n        \n        # build a trie\n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = '#'\n        \n        # build a set of words\n        word_set = set()\n        for word in words:\n            word_set.add(word)\n        \n        # build a set of rows and columns\n        rows, cols = len(board), len(board[0])\n        \n        # build a set of words that start with a letter in the first row\n        first_row_words = set()\n        for c in trie:\n            if c != '#':\n                first_row_words.add(c)\n        \n        # build a set of words that start with a letter in the last row\n        last_row_words = set()\n        for c in trie:\n            if c != '#':\n                last_row_words.add(c)\n        \n        # build a set of words that start with a letter in the first column\n        first_col_words = set()\n        for c in trie:\n            if c != '#':\n                first_col_words.add(c)\n        \n        # build a set of words that start with a letter in the last column\n        last_col_words = set()\n        for c in trie:\n            if c != '#':\n                last_col_words.add(c)\n        \n        # build a set of words that start with a letter in the first column\n        first_col_words = set()\n        for c in trie:\n            if c != '#':\n                first_col_words.add(c)\n        \n        # build a set of words that start with a letter in the last column\n        last_col_words = set()\n        for c in trie:\n            if c != '#':\n                last_col_words.add(c)\n        \n        # build a set of words that start with a letter in the first column\n        first_col_words = set()\n        for c in trie:\n            if c != '#':\n                first_col_words.add(c)\n        \n        # build a set of words that start with a letter in the last column\n        last_col_words = set()\n        for c in trie:\n            if c != '#':\n                last_col_words.add(c)\n        \n        # build a set of words that start with a letter in the first column\n        first_col_words = set()\n        for c in trie:\n            if c != '#':\n                first_col_words.add(c)\n        \n        # build a set of words that start with a letter in the last column\n        last_col_words = set()\n        for c in trie:\n            if c != '#':\n                last_col_words.add(c)\n        \n        # build a set of words that start with a letter in the first column\n        first_col_words = set()\n        for c in trie:\n            if c != '#':\n                first_col_words.add(c)\n        \n        # build a set of words that start with a letter in the last column\n        last_col_words = set()\n        for c in trie:\n            if c != '#':\n                last_col_words.add(c)\n        \n        # build a set of words that start with a letter in the first column\n        first_col_words = set()\n        for c in trie:\n            if c != '#':\n                first_col_words.add(c)\n        \n        # build a set of words that start with a letter in the last column\n        last_col_words = set()\n        for c in trie:\n            if c != '#':\n                last_col_words.add(c)\n        \n        # build a set of words that start with a letter in the first column\n        first_col_words = set()\n        for c in trie:\n            if c != '#':\n                first_col_words.add(c)\n        \n        # build a set of words that start with a letter in the last column\n        last_"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for k, v in s_dict.items():\n            if v != t_dict.get(k, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check if each row has unique numbers\n        # 2. check if each column has unique numbers\n        # 3. check if each 3x3 box has unique numbers\n        \n        # 1.\n        row_set = [set() for _ in range(9)]\n        col_set = [set() for _ in range(9)]\n        \n        # 2.\n        box_set = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    if board[i][j] in row_set[i]:\n                        return False\n                    row_set[i].add(board[i][j])\n                    \n                    if board[i][j] in col_set[j]:\n                        return False\n                    col_set[j].add(board[i][j])\n                    \n                    if board[i][j] in box_set[i//3*3 + j//3]:\n                        return False\n                    box_set[i//3*3 + j//3].add(board[i][j])\n        \n        # 3.\n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 15 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        \n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the whole string\n        s = s[::-1]\n        \n        # reverse each word\n        s = s.split(' ')\n        \n        # reverse each word\n        s = [word[::-1] for word in s]\n        \n        # join each word with a single space\n        return ' '.join(s)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 2401\n        # 26^4 = 8129\n        # 26^5 = 32768\n        # 26^6 = 134217728\n        # 26^7 = 536870912\n        # 26^8 = 2147483648\n        # 26^9 = 8589934592\n        # 26^10 = 34359738368\n        # 26^11 = 128829018880\n        # 26^12 = 477634215040\n        # 26^13 = 1851005683320\n        # 26^14 = 7036874417760\n        # 26^15 = 28153165035520\n        # 26^16 = 109460375095296\n        # 26^17 = 454920556293504\n        # 26^18 = 1894701993459520\n        # 26^19 = 7773767591815040\n        # 26^20 = 31111303775801280\n        # 26^21 = 124449011189204480\n        # 26^22 = 489940044557017600\n        # 26^23 = 1979760199990051200\n        # 26^24 = 771912075556016000\n        # 26^25 = 3143441199990080000\n        # 26^26 = 1258994755560160000\n        # 26^27 = 4877971199990080000\n        # 26^28 = 1951190755560160000\n        # 26^29 = 7674761199990080000\n        # 26^30 = 3099110755560160000\n        # 26^31 = 12474441199990080000\n        # 26^32 = 4913996755560160000\n        # 26^33 = 19647991199990080000\n        # 26^34 = 7703196755560160000\n        # 26^35 = 3125871199990080000\n        # 26^36 = 1258714755560160000\n        # 26^37 = 4915049199990080000\n        # 26^38 = 19660196755560160000\n        # 26^39 = 7702071199990080000\n        # 26^40 = 3125824755560160000\n        # 26^41 = 12587103199990080000\n        #"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n < 2:\n            return n\n        \n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        total = candies[-1]\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n            total += candies[i]\n        \n        return total"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second = slow.next\n        slow.next = None\n        prev = None\n        while second:\n            next = second.next\n            second.next = prev\n            prev = second\n            second = next\n        \n        # merge the two lists\n        first = head\n        second = prev\n        while second:\n            next1 = first.next\n            next2 = second.next\n            first.next = second\n            second.next = next1\n            first = next1\n            second = next2\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping between pattern and words\n        mapping = {}\n        \n        # create a set to store the set of words that have been seen before\n        seen = set()\n        \n        # iterate over the pattern and words\n        for p, w in zip(pattern, words):\n            # if the pattern is not in the mapping, add it to the mapping\n            if p not in mapping:\n                # if the word has already been seen, return False\n                if w in seen:\n                    return False\n                # add the word to the set of seen words\n                seen.add(w)\n                # add the pattern to the mapping\n                mapping[p] = w\n            # if the pattern is in the mapping, check if the word is the same as the mapping\n            else:\n                # if the word is not the same as the mapping, return False\n                if mapping[p] != w:\n                    return False\n        \n        # return True if the pattern and words are equal length and the mapping is complete\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        if len(nums) == 2:\n            return [nums, [nums[1], nums[0]]]\n        \n        if len(nums) == 3:\n            return [nums, [nums[2], nums[0], nums[1]], [nums[2], nums[1], nums[0]]]\n        \n        if len(nums) == 4:\n            return [nums, [nums[3], nums[0], nums[1], nums[2]], [nums[3], nums[0], nums[2], nums[1]], [nums[3], nums[1], nums[0], nums[2]], [nums[3], nums[2], nums[0], nums[1]], [nums[2], nums[3], nums[0], nums[1]], [nums[2], nums[3], nums[1], nums[0]], [nums[1], nums[3], nums[0], nums[2]], [nums[1], nums[3], nums[2], nums[0]], [nums[2], nums[1], nums[3], nums[0]], [nums[2], nums[1], nums[0], nums[3]], [nums[0], nums[3], nums[1], nums[2]], [nums[0], nums[3], nums[2], nums[1]], [nums[1], nums[0], nums[3], nums[2]], [nums[1], nums[0], nums[2], nums[3]], [nums[2], nums[1], nums[0], nums[3]], [nums[2], nums[1], nums[3], nums[0]], [nums[0], nums[2], nums[3], nums[1]], [nums[0], nums[2], nums[1], nums[3]], [nums[1], nums[0], nums[2], nums[3]], [nums[1], nums[2], nums[0], nums[3]], [nums[2], nums[1], nums[0], nums[3]], [nums[2], nums[1], nums[3], nums[0]], [nums[0], nums[3], nums[2], nums[1]], [nums[0], nums[3], nums[1], nums[2]], [nums[1], nums[0], nums[3], nums[2]], [nums[1], nums[3], nums[0], nums[2]], [nums[2], nums[1], nums[0], nums[3]], [nums[2], nums[1], nums[3], nums[0]], [nums[0], nums[2], nums[3], nums[1]], [nums[0], nums[2], nums[1], nums[3]], [nums[1], nums[0], nums[2], nums[3]], [nums[1], nums[2], nums[0], nums[3]], [nums[2], nums[1], nums[0], nums[3]], [nums[2], nums[1], nums[3], nums[0]], [nums[0], nums[3], nums[2], nums[1]], [nums[0], nums[3], nums[1], nums[2]], [nums[1], nums[0], nums[3], nums[2]], [nums[1], nums[3], nums[0], nums[2]], [nums[2], nums[1], nums[0], nums[3]], [nums[2], nums[1], nums[3], nums[0]], [nums[0], nums[2], nums[3], nums[1]"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        if not matrix:\n            return False\n        \n        m, n = len(matrix), len(matrix[0])\n        \n        if target < matrix[0][0] or target > matrix[-1][-1]:\n            return False\n        \n        if target == matrix[0][0]:\n            return True\n        \n        if target == matrix[-1][-1]:\n            return True\n        \n        if target == matrix[-1][0]:\n            return True\n        \n        if target == matrix[0][-1]:\n            return True\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target > matrix[-1][0]:\n            return False\n        \n        if target < matrix[0][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target > matrix[-1][0]:\n            return False\n        \n        if target > matrix[-1][-1]:\n            return False\n        \n        if target > matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False\n        \n        if target < matrix[-1][0]:\n            return False\n        \n        if target < matrix[-1][-1]:\n            return False\n        \n        if target < matrix[0][0]:\n            return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the result list with the first node of the first list\n        result = ListNode(l1.val + l2.val)\n        \n        # Initialize the current node of the result list\n        current = result\n        \n        # Initialize the carry variable to 0\n        carry = 0\n        \n        # Iterate over the remaining nodes of the first list\n        l1 = l1.next\n        \n        # Iterate over the remaining nodes of the second list\n        l2 = l2.next\n        \n        # Iterate over the remaining nodes of the first list\n        while l1 or l2:\n            # If the first list is longer than the second list, set the value of the current node to 0\n            if not l1:\n                l1 = ListNode(0)\n            # If the second list is longer than the first list, set the value of the current node to 0\n            if not l2:\n                l2 = ListNode(0)\n            # Add the values of the current nodes of the first list and the second list\n            sum_val = l1.val + l2.val + carry\n            # Set the value of the current node to the sum modulo 10\n            current.next = ListNode(sum_val % 10)\n            # Set the carry to the sum divided by 10\n            carry = sum_val // 10\n            # Set the current node to the next node\n            current = current.next\n            # Set the current node of the first list to the next node\n            l1 = l1.next\n            # Set the current node of the second list to the next node\n            l2 = l2.next\n        \n        # If the carry is greater than 0, set the value of the current node to the carry\n        if carry > 0:\n            current.next = ListNode(carry)\n        \n        # Return the result list\n        return result"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the highest bit\n        # 2. flip all bits to 1\n        # 3. flip all bits to 0\n        # 4. add 1 to the highest bit\n        # 5. add 1 to the number\n        # 6. subtract 1 from the number\n        # 7. return the number\n        \n        # 1. find the highest bit\n        highest_bit = 0\n        while num & 1 == 0:\n            highest_bit += 1\n            num >>= 1\n        \n        # 2. flip all bits to 1\n        num |= num >> 1\n        \n        # 3. flip all bits to 0\n        num |= num >> 2\n        \n        # 4. add 1 to the highest bit\n        num |= num >> 4\n        \n        # 5. add 1 to the number\n        num += 1\n        \n        # 6. subtract 1 from the number\n        num -= 1\n        \n        # 7. return the number\n        return num >> highest_bit"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        diff = nums[1] - nums[0]\n        count = 0\n        ans = 0\n        \n        for i in nums[2:]:\n            if i - diff == diff:\n                count += 1\n                ans += count\n            else:\n                diff = i - diff\n                count = 1\n        \n        return ans"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # initialize the result list\n        result = []\n        \n        # initialize the current line\n        current_line = []\n        \n        # initialize the current line length\n        current_line_length = 0\n        \n        # initialize the number of words in the current line\n        num_words = 0\n        \n        # iterate over the words\n        for word in words:\n            # if the current line length + the length of the word + the number of words in the current line is less than the max width\n            if current_line_length + len(word) + num_words < maxWidth:\n                # add the word to the current line\n                current_line.append(word)\n                # add the length of the word to the current line length\n                current_line_length += len(word)\n                # increment the number of words in the current line\n                num_words += 1\n            # if the current line length + the length of the word + the number of words in the current line is equal to the max width\n            else:\n                # add the word to the current line\n                current_line.append(word)\n                # add the length of the word to the current line length\n                current_line_length += len(word)\n                # increment the number of words in the current line\n                num_words += 1\n                # add the current line to the result list\n                result.append(' '.join(current_line))\n                # reset the current line\n                current_line = []\n                # reset the current line length\n                current_line_length = 0\n                # reset the number of words in the current line\n                num_words = 0\n        \n        # if the number of words in the current line is greater than 0\n        if num_words > 0:\n            # add the current line to the result list\n            result.append(' '.join(current_line))\n        \n        # initialize the result string\n        result_str = ''\n        \n        # initialize the number of spaces\n        num_spaces = maxWidth - current_line_length\n        \n        # if the number of words in the current line is greater than 1\n        if num_words > 1:\n            # initialize the number of spaces per word\n            num_spaces_per_word = num_spaces // (num_words - 1)\n            # initialize the number of extra spaces\n            num_extra_spaces = num_spaces % (num_words - 1)\n            # initialize the index\n            index = 0\n            # iterate over the words in the current line\n            for word in current_line:\n                # if the index is less than the number of extra spaces\n                if index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result_str += ' '\n                # if the index is less than the number of extra spaces\n                elif index < num_extra_spaces:\n                    # add a space to the result string\n                    result"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        while stack:\n            node = stack.pop()\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n            result.append(node.val)\n        \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        max_height = height[right]\n        while left < right:\n            if height[left] < height[right]:\n                max_area = max(max_area, height[left] * (right - left))\n                max_height = max(max_height, height[left])\n                left += 1\n            else:\n                max_area = max(max_area, height[right] * (right - left))\n                max_height = max(max_height, height[right])\n                right -= 1\n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time: O(N)\n        # Space: O(N)\n        \n        # Create a set of words\n        word_set = set(words)\n        \n        # Create a dictionary to store the longest word that can be concatenated\n        # with the current word\n        longest_word_dict = {}\n        \n        # Create a list of all the words that can be concatenated with any other word\n        # in the set\n        concatenated_words = []\n        \n        # Iterate over the words in the set\n        for word in word_set:\n            # If the word is longer than 1, it can be concatenated with another word\n            if len(word) > 1:\n                # Add the word to the list of concatenated words\n                concatenated_words.append(word)\n                \n        # Sort the list of concatenated words\n        concatenated_words.sort(key=len)\n        \n        # Iterate over the list of concatenated words\n        for word in concatenated_words:\n            # If the longest word that can be concatenated with the current word\n            # is not in the dictionary, add the current word to the dictionary\n            if word not in longest_word_dict:\n                longest_word_dict[word] = word\n            # Otherwise, the longest word that can be concatenated with the current\n            # word is in the dictionary, so the current word can be concatenated with\n            # the longest word that can be concatenated with the current word\n            else:\n                longest_word_dict[word] = longest_word_dict[word]\n        \n        # Create a list to store the concatenated words\n        concatenated_words = []\n        \n        # Iterate over the words in the set\n        for word in word_set:\n            # If the word is longer than 1, it can be concatenated with another word\n            if len(word) > 1:\n                # If the longest word that can be concatenated with the current word\n                # is in the dictionary, the current word can be concatenated with the\n                # longest word that can be concatenated with the current word\n                if longest_word_dict[word] in word_set:\n                    concatenated_words.append(word)\n        \n        # Create a set to store the concatenated words\n        concatenated_words_set = set(concatenated_words)\n        \n        # Iterate over the words in the set\n        for word in concatenated_words_set:\n            # If the word is longer than 1, it can be concatenated with another word\n            if len(word) > 1:\n                # If the longest word that can be concatenated with the current word\n                # is in the dictionary, the current word can be concatenated with the\n                # longest word that can be concatenated with the current word\n                if longest_word_dict[word] in word_set:\n                    # If the current word is not in the set of concatenated words,\n                    # add the current word to the set of concatenated words\n                    if word not in concatenated_words_set:\n                        concatenated_words_set.add(word)\n        \n        # Return the set of concatenated words\n        return concatenated_words_set"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num < 0:\n            return '-' + str(abs(num))[-1] + str(abs(num)//7)[1:]\n        else:\n            return str(num)[-1] + str(num//7)[1:] if num else '0'"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n is a multiple of 4, then it can't win\n        if n % 4 == 0:\n            return False\n        else:\n            return True"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. Initialize the board\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        \n        # 2. Initialize the result\n        result = []\n        \n        # 3. Initialize the column and the diagonal\n        col = set()\n        diagonal1 = set()\n        diagonal2 = set()\n        \n        # 4. Recursive function\n        def backtrack(row):\n            # 4.1 If the row is equal to n, it means we have found a solution\n            if row == n:\n                # 4.1.1 Convert the board to a string\n                temp = []\n                for row in board:\n                    temp.append(''.join(row))\n                result.append(temp)\n                return\n            \n            # 4.2 For each column, check if it is valid\n            for col_num in range(n):\n                # 4.2.1 If the column is valid, check if the current row is valid\n                if board[row][col_num] == 'Q' or (col_num in col and (row + col_num) in diagonal1) or (col_num in col and (row - col_num) in diagonal2):\n                    continue\n                \n                # 4.2.2 If the column is valid, add it to the set\n                col.add(col_num)\n                diagonal1.add(row + col_num)\n                diagonal2.add(row - col_num)\n                \n                # 4.2.3 If the column is valid, add the current row to the board\n                board[row][col_num] = 'Q'\n                \n                # 4.2.4 Recursively call the backtrack function\n                backtrack(row + 1)\n                \n                # 4.2.5 If the column is valid, remove the current row from the board\n                board[row][col_num] = '.'\n                \n                # 4.2.6 Remove the current row from the set\n                col.remove(col_num)\n                diagonal1.remove(row + col_num)\n                diagonal2.remove(row - col_num)\n        \n        # 5. Call the backtrack function\n        backtrack(0)\n        \n        # 6. Return the result\n        return result"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return False\n        \n        if not board:\n            return False\n        \n        if not board[0]:\n            return False\n        \n        if not word[0]:\n            return False\n        \n        if len(word) > len(board[0]) * len(board):\n            return False\n        \n        if len(word) > len(board) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False\n        \n        if len(word) > len(board[0]) * len(board[0]):\n            return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # m, n = m - 1, n - 1\n        # p = m + n\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p+1] = nums2[:n+1]\n        \n        # nums1[:m+1] = nums1[:m+1][::-1]\n        \n        # nums1[:] = nums1[:m+n+1][::-1]\n        \n        # nums1[:n] = nums2[:n]\n        \n        # nums1[:m] = nums1[:m]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:m][::-1]\n        \n        # nums1[:m] = nums1[:"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the first, second, third maximum values\n        first_max = second_max = third_max = float('-inf')\n        \n        # Iterate over the nums list\n        for num in nums:\n            # If the current number is greater than the first maximum, update the first maximum\n            if num > first_max:\n                first_max = num\n                # If the current number is equal to the first maximum, set the second maximum to the first maximum\n                if num == first_max:\n                    second_max = first_max\n            # If the current number is greater than the second maximum, update the second maximum\n            elif num > second_max:\n                second_max = num\n                # If the current number is equal to the second maximum, set the third maximum to the second maximum\n                if num == second_max:\n                    third_max = second_max\n            # If the current number is greater than the third maximum, update the third maximum\n            elif num > third_max:\n                third_max = num\n        \n        # If the third maximum is not equal to the first maximum, return the third maximum\n        if third_max != float('-inf'):\n            return third_max\n        # If the second maximum is not equal to the first maximum, return the second maximum\n        elif second_max != float('-inf'):\n            return second_max\n        # If the first maximum is not equal to the second maximum, return the first maximum\n        else:\n            return first_max"}]}