{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers and all numbers greater than n as 0\n        # 2. iterate through the array and mark the numbers as negative\n        # 3. iterate through the array again and return the first number that is not negative\n        # 4. if all numbers are negative, return n + 1\n        \n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        res = \"\"\n        nums = [i for i in range(1, n+1)]\n        for i in range(n-1, -1, -1):\n            # 2.1 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.2 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.3 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.4 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.5 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.6 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.7 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.8 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.9 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.10 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.11 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.12 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.13 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.14 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.15 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.16 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.17 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.18 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.19 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.20 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.21 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.22 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.23 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.24 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.25 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.26 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.27 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.28 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.29 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.30 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.31 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.32 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.33 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.34 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.35 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.36 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.37 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.38 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.39 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.40 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.41 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.42 calculate the number of permutations that can be chosen from the remaining numbers\n            # 2.43 calculate the number of permutations that can"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Two pointers\n        # left, right = 0, len(numbers) - 1\n        # while left < right:\n        #     if numbers[left] + numbers[right] == target:\n        #         return [left+1, right+1]\n        #     elif numbers[left] + numbers[right] < target:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        \n        # 3. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 4. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 5. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 6. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 7. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 8. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 9. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 10. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 11. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 12. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers[i+1:].index(complement) + i + 2]\n        \n        # 13. Binary search\n        # for i in range(len(numbers)):\n        #     complement = target - numbers[i]\n        #     if complement in numbers[i+1:]:\n        #         return [i+1, numbers"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            if i > 0:\n                backtrack(i + 1, curr + int(num[i]), int(num[i]), res, op + '+' + num[i])\n                backtrack(i + 1, curr - int(num[i]), -int(num[i]), res, op + '-' + num[i])\n                backtrack(i + 1, curr - prev + prev * int(num[i]), prev * int(num[i]), res, op + '*' + num[i])\n        \n        if not num:\n            return []\n        res = []\n        backtrack(0, 0, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return '-'.join(s[i:i+k] for i in range(0, n, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '.')\n        \n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    (first_match and self.isMatch(s[1:], p)))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i, n in en.umerate(nums):\n                while out and n > out[-1] and len(out) + len(nums) - i > k:\n                    out.pop()\n                if len(out) < k:\n                    out.append(n)\n            return out\n        \n        m, n = len(nums1), len(nums2)\n        if m + n < k:\n            return []\n        return max(pick(nums1, k) + pick(nums2, k - len(nums1)), pick(nums2, k) + pick(nums1, k - len(nums2)))"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num / i == i:\n                    sum += i\n                else:\n                    sum += i + num / i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        lo, hi = 0, nums[-1] - nums[0]\n        while lo < hi:\n            mid = (lo + hi) // 2\n            count, left = 0, 0\n            for right in range(len(nums)):\n                while nums[right] - nums[left] > mid:\n                    left += 1\n                count += right - left\n            if count < k:\n                lo = mid + 1\n            else:\n                hi = mid\n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            while l < r and s[l] not in vowels:\n                l += 1\n            while l < r and s[r] not in vowels:\n                r -= 1\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ## Solution 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Runtime: 120 ms, faster than 99.44% of Python online submissions for Missing Number.\n        ## Memory Usage: 14.9 MB, less than 99.44% of Python online submissions for Missing Number.\n        \n        ##"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(N * 26 * W)\n        # Space: O(N * 26 * W)\n        # N: number of words in wordList\n        # W: average length of a word\n        # 26: number of possible characters in a word\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        \n        while queue:\n            word, level = queue.popleft()\n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    new_word = word[:i] + c + word[i+1:]\n                    if new_word == endWord:\n                        return level + 1\n                    if new_word in wordList:\n                        queue.append((new_word, level + 1))\n                        wordList.remove(new_word)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        res = []\n        for i in range(len(a)-1, -1, -1):\n            if i < len(b):\n                carry += int(a[i]) + int(b[i])\n            else:\n                carry += int(a[i])\n            res.append(str(carry % 2))\n            carry //= 2\n        \n        if carry:\n            res.append(str(carry))\n        \n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        if nums[0] == 0:\n            return -1\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(1, len(nums)):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) / 2:\n            return sum(max(prices[i+1] - prices[i] for i in range(0, len(prices) - 1)) - (max(prices[i+1] - prices[i] for i in range(0, len(prices) - 1)) % 2)\n        \n        dp = [[0] * 2 for _ in range(k + 1)]\n        \n        for i in range(len(prices)):\n            for j in range(1, k + 1):\n                dp[j][0] = max(dp[j][0], dp[j - 1][1] + prices[i])\n                dp[j][1] = max(dp[j][1], dp[j - 1][0] - prices[i])\n        \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10: \"a\", 11: \"b\", 12: \"c\", 13: \"d\", 14: \"e\", 15: \"f\"}\n        hex_list = []\n        \n        while num > 0:\n            hex_list.append(num % 16)\n            num = num // 16\n        \n        hex_list.reverse()\n        \n        for i in range(len(hex_list)):\n            if hex_list[i] >= 10:\n                hex_list[i] = hex_dict[hex_list[i]]\n        \n        return \"\".join(map(str, hex_list))"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary with key as the character and value as the index\n        # create a list to store the index of the first occurence of each character\n        # iterate through the string and check if the character is already in the dictionary\n        # if it is, remove it from the dictionary and add the index to the list\n        # if it is not, add the index to the dictionary\n        # return the first element in the list\n        \n        d = {}\n        l = []\n        for i, c in enumerate(s):\n            if c in d:\n                l.remove(d[c])\n            else:\n                l.append(i)\n                d[c] = i\n        if len(l) == 0:\n            return -1\n        else:\n            return l[0]"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= nums[-1] - nums[0]:\n            return True\n        \n        if valueDiff == 0:\n            return False\n        \n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff:\n                    if abs(i - j) <= indexDiff:\n                        return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert to int\n        # 2. add\n        # 3. convert to str\n        \n        # 1. convert to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. add\n        sum = num1 + num2\n        \n        # 3. convert to str\n        return str(sum)"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                elif sign == '/':\n                    stack.append(int(stack.pop() / num))\n                sign = s[i]\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # iterate over capital, if k > 0, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to w, if profit > w, add profit to w\n        # if k == 0, add profit to w, if profit > w, add profit to w\n        # if k > 0, add profit to"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '{':\n                stack.append('}')\n            elif i == '[':\n                stack.append(']')\n            elif stack and stack[-1] == i:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the numbers after the point\n        \n        # find the first number that is smaller than the next number\n        for i in range(len(nums)-2, -1, -1):\n            if nums[i] < nums[i+1]:\n                break\n        \n        # find the first number that is larger than the next number\n        for j in range(len(nums)-1, i, -1):\n            if nums[j] > nums[i]:\n                break\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers after the point\n        nums[i+1:] = nums[len(nums)-1:i:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        \n        if len(nums) == 3:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[0] == nums[2]\n        \n        if len(nums) == 4:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[0] == nums[3]\n        \n        if len(nums) == 5:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[0] == nums[4]\n        \n        if len(nums) == 6:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[0] == nums[5]\n        \n        if len(nums) == 7:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[0] == nums[6]\n        \n        if len(nums) == 8:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[0] == nums[7]\n        \n        if len(nums) == 9:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[0] == nums[8]\n        \n        if len(nums) == 10:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[0] == nums[9]\n        \n        if len(nums) == 11:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[9] == nums[10] or nums[0] == nums[10]\n        \n        if len(nums) == 12:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 0:\n            return 0\n        \n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        \n        swaps = 0\n        for i in range(0, n, 2):\n            if couples[i][0] / 2 != couples[i][1] / 2:\n                j = i + 1\n                while couples[j][0] / 2 != couples[i][1] / 2:\n                    j += 1\n                couples[i], couples[j] = couples[j], couples[i]\n                swaps += 1\n        \n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2 and s1 == s3:\n            return True\n        \n        if s1 == s3 or s2 == s3:\n            return True\n        \n        if s1 == \"\" and s2 == \"\":\n            return True\n        \n        if s1 == \"\" and s2 != \"\":\n            return s2 == s3\n        \n        if s1 != \"\" and s2 == \"\":\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        ans = []\n        for word in words:\n            if word[0] in row1:\n                r = row1\n            elif word[0] in row2:\n                r = row2\n            else:\n                r = row3\n            for c in word:\n                if c not in r:\n                    break\n            else:\n                ans.append(word)\n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        for i in range(right - left):\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # then add the rest of the string to the beginning\n        # O(n) time and O(n) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find the longest palindrome that can be centered at the beginning of the string\n        # 2. add the rest of the string to the beginning\n        # 3. return the string\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # O(n) time and O(1) space\n        # 1. find"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        # create a hashmap for the characters in t\n        # and their counts\n        count_t = collections.Counter(t)\n        \n        # create a hashmap for the characters in s\n        # and their counts\n        count_s = collections.Counter()\n        \n        # create a hashmap for the characters in s\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        #"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i - 1] == distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2]:\n                return True\n            if i >= 5 and distance[i - 2] >= distance[i - 4] and distance[i - 1] <= distance[i - 3] and distance[i - 1] + distance[i - 5] >= distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the number of each letter\n        # 2. if the number is odd, add 1 to the result\n        # 3. if the number is even, add it to the result\n        \n        # 1.\n        letter_count = {}\n        for letter in s:\n            if letter not in letter_count:\n                letter_count[letter] = 1\n            else:\n                letter_count[letter] += 1\n        \n        # 2.\n        result = 0\n        for letter in letter_count:\n            if letter_count[letter] % 2 == 0:\n                result += letter_count[letter]\n            else:\n                result += letter_count[letter] - 1\n        \n        # 3.\n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def bfs(start, end):\n            q = [start]\n            visited = set()\n            steps = 0\n            while q:\n                for _ in range(len(q)):\n                    i, j = q.pop(0)\n                    if (i, j) == end:\n                        return steps\n                    for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                        ni, nj = i + di, j + dj\n                        if 0 <= ni < m and 0 <= nj < n and forest[ni][nj] > 0 and (ni, nj) not in visited:\n                            q.append((ni, nj))\n                            visited.add((ni, nj))\n                steps += 1\n            return -1\n        \n        m, n = len(forest), len(forest[0])\n        trees = [(i, j) for i in range(m) for j in range(n) if forest[i][j] > 1]\n        trees.sort((lambda x: (forest[x[0]][x[1]], x[0] * n + x[1])))\n        steps = 0\n        for i, j in trees:\n            steps += bfs((0, 0), (i, j))\n            if steps < 0:\n                return steps\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. use a hashmap to store the count of range sum\n        # 5. return the count\n        \n        # 1. calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. use a hashmap to store the count of range sum\n        # 5. return the count\n        prefix_sum.sort()\n        count = 0\n        for i in range(n):\n            count += bisect.bisect_right(prefix_sum, upper) - bisect.bisect_left(prefix_sum, lower - prefix_sum[i])\n        return count"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1: Binary Search\n        # Time Complexity: O(log(n))\n        # Space Complexity: O(1)\n        # 1. Find the number of complete rows\n        # 2. Find the number of coins in the last row\n        # 3. Find the number of coins in the first row\n        # 4. Find the number of coins in the second row\n        # 5. Find the number of coins in the third row\n        # 6. Find the number of coins in the fourth row\n        # 7. Find the number of coins in the fifth row\n        # 8. Find the number of coins in the sixth row\n        # 9. Find the number of coins in the seventh row\n        # 10. Find the number of coins in the eighth row\n        # 11. Find the number of coins in the ninth row\n        # 12. Find the number of coins in the tenth row\n        # 13. Find the number of coins in the eleventh row\n        # 14. Find the number of coins in the twelfth row\n        # 15. Find the number of coins in the thirteenth row\n        # 16. Find the number of coins in the fourteenth row\n        # 17. Find the number of coins in the fifteenth row\n        # 18. Find the number of coins in the sixteenth row\n        # 19. Find the number of coins in the seventeenth row\n        # 20. Find the number of coins in the eighteenth row\n        # 21. Find the number of coins in the nineteenth row\n        # 22. Find the number of coins in the twentieth row\n        # 23. Find the number of coins in the twenty-first row\n        # 24. Find the number of coins in the twenty-second row\n        # 25. Find the number of coins in the twenty-third row\n        # 26. Find the number of coins in the twenty-fourth row\n        # 27. Find the number of coins in the twenty-fifth row\n        # 28. Find the number of coins in the twenty-sixth row\n        # 29. Find the number of coins in the twenty-seventh row\n        # 30. Find the number of coins in the twenty-eighth row\n        # 31. Find the number of coins in the twenty-ninth row\n        # 32. Find the number of coins in the thirty-first row\n        # 33. Find the number of coins in the thirty-second row\n        # 34. Find the number of coins in the thirty-third row\n        # 35. Find the number of coins in the thirty-fourth row\n        # 36. Find the number of coins in the thirty-fifth row\n        # 37. Find the number of coins in the thirty-sixth row\n        # 38. Find the number of coins in the thirty-seventh row\n        # 39. Find the number of coins in the thirty-eighth row\n        # 40. Find the number of coins in the thirty-ninth row\n        # 41. Find the number of coins in the forty-first row\n        # 42. Find the number of coins in the forty-second row\n        # 43. Find the number of coins in the forty-third row\n        # 44. Find the number of coins in the forty-fourth row\n        # 45. Find the number of coins in the forty-fifth row\n        # 46. Find the number of coins in the forty-sixth row\n        # 47. Find the number of coins in the forty-seventh row\n        # 48. Find the number of coins in the forty-eighth row\n        # 49. Find the number of coins in the forty-ninth row\n        # 50. Find the number of coins in the fifty-first row\n        # 51. Find the number of coins in the fifty-second row\n        # 52. Find the number of coins in the fifty-third row\n        # 53. Find the number of coins in the fifty-fourth row\n        # 54. Find the number of coins in the fifty-fifth row\n        # 55. Find the number of coins in the fifty-sixth row\n        # 56. Find the number of coins"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.pop(0)\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        for c in t:\n            if i == len(s):\n                return True\n            if c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2^n - 1 is the max number we can generate\n        # 2. 2^n - 1 is the max number we can generate\n        # 3. 2^n - 1 is the max number we can generate\n        # 4. 2^n - 1 is the max number we can generate\n        # 5. 2^n - 1 is the max number we can generate\n        # 6. 2^n - 1 is the max number we can generate\n        # 7. 2^n - 1 is the max number we can generate\n        # 8. 2^n - 1 is the max number we can generate\n        # 9. 2^n - 1 is the max number we can generate\n        # 10. 2^n - 1 is the max number we can generate\n        # 11. 2^n - 1 is the max number we can generate\n        # 12. 2^n - 1 is the max number we can generate\n        # 13. 2^n - 1 is the max number we can generate\n        # 14. 2^n - 1 is the max number we can generate\n        # 15. 2^n - 1 is the max number we can generate\n        # 16. 2^n - 1 is the max number we can generate\n        # 17. 2^n - 1 is the max number we can generate\n        # 18. 2^n - 1 is the max number we can generate\n        # 19. 2^n - 1 is the max number we can generate\n        # 20. 2^n - 1 is the max number we can generate\n        # 21. 2^n - 1 is the max number we can generate\n        # 22. 2^n - 1 is the max number we can generate\n        # 23. 2^n - 1 is the max number we can generate\n        # 24. 2^n - 1 is the max number we can generate\n        # 25. 2^n - 1 is the max number we can generate\n        # 26. 2^n - 1 is the max number we can generate\n        # 27. 2^n - 1 is the max number we can generate\n        # 28. 2^n - 1 is the max number we can generate\n        # 29. 2^n - 1 is the max number we can generate\n        # 30. 2^n - 1 is the max number we can generate\n        # 31. 2^n - 1 is the max number we can generate\n        # 32. 2^n - 1 is the max number we can generate\n        # 33. 2^n - 1 is the max number we can generate\n        # 34. 2^n - 1 is the max number we can generate\n        # 35. 2^n - 1 is the max number we can generate\n        # 36. 2^n - 1 is the max number we can generate\n        # 37. 2^n - 1 is the max number we can generate\n        # 38. 2^n - 1 is the max number we can generate\n        # 39. 2^n - 1 is the max number we can generate\n        # 40. 2^n - 1 is the max number we can generate\n        # 41. 2^n - 1 is the max number we can generate\n        # 42. 2^n - 1 is the max number we can generate\n        # 43. 2^n - 1 is the max number we can generate\n        # 44. 2^n - 1 is the max number we can generate\n        # 45. 2^n - 1 is the max number we can generate\n        # 46. 2^n - 1 is the max number we can generate\n        # 47. 2^n - 1 is the max number we can generate\n        # 48. 2^n - 1 is the max number we can generate\n        # 49. 2^n - 1 is the max number we can generate\n        # 5"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if (left and node.val <= left.val) or (right and node.val >= right.val):\n                return False\n            \n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is smaller than the first element in the list, insert it at the beginning\n        if newInterval[0] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if the new interval is larger than the last element in the list, insert it at the end\n        if newInterval[1] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        # if the new interval overlaps with the first element in the list, merge it with the first element\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        \n        # if the new interval overlaps with the last element in the list, merge it with the last element\n        if newInterval[0] >= intervals[-1][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals[:-1] + [newInterval]\n        \n        # if the new interval overlaps with the middle elements in the list, merge it with the middle elements\n        for i in range(len(intervals)):\n            if newInterval[0] >= intervals[i][0] and newInterval[1] <= intervals[i][1]:\n                return intervals[:i] + [(min(intervals[i][0], newInterval[0]), max(intervals[i][1], newInterval[1]))] + intervals[i+1:]\n        \n        # if the new interval does not overlap with any elements in the list, insert it at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] > intervals[i][1]:\n                continue\n            elif newInterval[1] < intervals[i][0]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n            else:\n                return intervals[:i] + [(min(intervals[i][0], newInterval[0]), max(intervals[i][1], newInterval[1]))] + intervals[i+1:]"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of each list\n        # 2. use min heap to store the max of each list\n        # 3. use max heap to store the min of each list\n        # 4. compare the max of the min heap with the min of the max heap\n        # 5. if the max of the min heap is greater than the min of the max heap, update the min and max\n        # 6. if the max of the min heap is equal to the min of the max heap, return the min and max\n        \n        # 1. find the min and max of each list\n        min_val = float('inf')\n        max_val = float('-inf')\n        for num in nums:\n            min_val = min(min_val, num[0])\n            max_val = max(max_val, num[-1])\n        \n        # 2. use min heap to store the max of each list\n        max_heap = [(num[-1], i, len(nums)) for i, num in en\n        enumerate(nums)]\n        heapq.heapify(max_heap)\n        \n        # 3. use max heap to store the min of each list\n        min_heap = [(num[0], i, len(nums)) for i, num in enumerate(nums)]\n        heapq.heapify(min_heap)\n        \n        # 4. compare the max of the min heap with the min of the max heap\n        # 5. if the max of the min heap is greater than the min of the max heap, update the min and max\n        # 6. if the max of the min heap is equal to the min of the max heap, return the min and max\n        res = [min_val, max_val]\n        while True:\n            max_val, i, n = heapq.heappop(max_heap)\n            if max_val - min_val < res[1] - res[0]:\n                res = [min_val, max_val]\n            if i + 1 < n:\n                heapq.heappush(max_heap, (nums[i + 1][-1], i + 1, n))\n            else:\n                break\n            \n            min_val = min_heap[0][0]\n            heapq.heapreplace(min_heap, (nums[i][0], i, n))\n            \n        return res"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 pig can test 1 bucket\n        # 2. 1 pig can test 2 buckets\n        # 3. 1 pig can test 4 buckets\n        # 4. 1 pig can test 8 buckets\n        # 5. 1 pig can test 16 buckets\n        # 6. 1 pig can test 32 buckets\n        # 7. 1 pig can test 64 buckets\n        # 8. 1 pig can test 128 buckets\n        # 9. 1 pig can test 256 buckets\n        # 10. 1 pig can test 512 buckets\n        # 11. 1 pig can test 1024 buckets\n        # 12. 1 pig can test 2048 buckets\n        # 13. 1 pig can test 4096 buckets\n        # 14. 1 pig can test 8192 buckets\n        # 15. 1 pig can test 16384 buckets\n        # 16. 1 pig can test 32768 buckets\n        # 17. 1 pig can test 65536 buckets\n        # 18. 1 pig can test 131072 buckets\n        # 19. 1 pig can test 262144 buckets\n        # 20. 1 pig can test 524288 buckets\n        # 21. 1 pig can test 1048576 buckets\n        # 22. 1 pig can test 2097152 buckets\n        # 23. 1 pig can test 4194304 buckets\n        # 24. 1 pig can test 8388608 buckets\n        # 25. 1 pig can test 16777216 buckets\n        # 26. 1 pig can test 33554432 buckets\n        # 27. 1 pig can test 67108864 buckets\n        # 28. 1 pig can test 134217728 buckets\n        # 29. 1 pig can test 268435456 buckets\n        # 30. 1 pig can test 536870912 buckets\n        # 31. 1 pig can test 1073741824 buckets\n        # 32. 1 pig can test 2147483648 buckets\n        # 33. 1 pig can test 4294967296 buckets\n        # 34. 1 pig can test 8589934592 buckets\n        # 35. 1 pig can test 17179869184 buckets\n        # 36. 1 pig can test 34359738368 buckets\n        # 37. 1 pig can test 68719476736 buckets\n        # 38. 1 pig can test 137438953472 buckets\n        # 39. 1 pig can test 274877906944 buckets\n        # 40. 1 pig can test 549755813888 buckets\n        # 41. 1 pig can test 1099511627776 buckets\n        # 42. 1 pig can test 2199023255552 buckets\n        # 43. 1 pig can test 4398046511104 buckets\n        # 44. 1 pig can test 8796093022208 buckets\n        # 45. 1 pig can test 17592186044416 buckets\n        # 46. 1 pig can test 35184372088832 buckets\n        # 47. 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                    visited.add((nx, ny))\n        \n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2D array\n        # 2. 1D array\n        # 3. DP\n        # 4. Math\n        # 5. BFS\n        # 6. DFS\n        # 7. Greedy\n        # 8. Backtracking\n        # 9. Bit Manipulation\n        # 10. Math\n        # 11. Math\n        # 12. Math\n        # 13. Math\n        # 14. Math\n        # 15. Math\n        # 16. Math\n        # 17. Math\n        # 18. Math\n        # 19. Math\n        # 20. Math\n        # 21. Math\n        # 22. Math\n        # 23. Math\n        # 24. Math\n        # 25. Math\n        # 26. Math\n        # 27. Math\n        # 28. Math\n        # 29. Math\n        # 30. Math\n        # 31. Math\n        # 32. Math\n        # 33. Math\n        # 34. Math\n        # 35. Math\n        # 36. Math\n        # 37. Math\n        # 38. Math\n        # 39. Math\n        # 40. Math\n        # 41. Math\n        # 42. Math\n        # 43. Math\n        # 44. Math\n        # 45. Math\n        # 46. Math\n        # 47. Math\n        # 48. Math\n        # 49. Math\n        # 50. Math\n        # 51. Math\n        # 52. Math\n        # 53. Math\n        # 54. Math\n        # 55. Math\n        # 56. Math\n        # 57. Math\n        # 58. Math\n        # 59. Math\n        # 60. Math\n        # 61. Math\n        # 62. Math\n        # 63. Math\n        # 64. Math\n        # 65. Math\n        # 66. Math\n        # 67. Math\n        # 68. Math\n        # 69. Math\n        # 70. Math\n        # 71. Math\n        # 72. Math\n        # 73. Math\n        # 74. Math\n        # 75. Math\n        # 76. Math\n        # 77. Math\n        # 78. Math\n        # 79. Math\n        # 80. Math\n        # 81. Math\n        # 82. Math\n        # 83. Math\n        # 84. Math\n        # 85. Math\n        # 86. Math\n        # 87. Math\n        # 88. Math\n        # 89. Math\n        # 90. Math\n        # 91. Math\n        # 92. Math\n        # 93. Math\n        # 94. Math\n        # 95. Math\n        # 96. Math\n        # 97. Math\n        # 98. Math\n        # 99. Math\n        # 100. Math\n        # 101. Math\n        # 102. Math\n        # 103. Math\n        # 104. Math\n        # 105. Math\n        # 106. Math\n        # 107. Math\n        # 108. Math\n        # 109. Math\n        # 110. Math\n        # 111. Math\n        # 112. Math\n        # 113. Math\n        # 114. Math\n        # 115. Math\n        # 116. Math\n        # 117. Math\n        # 118. Math\n        # 119. Math\n        # 120. Math\n        # 121. Math\n        # 122. Math\n        # 123. Math\n        # 124. Math"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] %= 10\n            \n        res = [str(x) for x in res]\n        res = \"\".join(res[::-1]).lstrip(\"0\")\n        \n        return res or \"0\""}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, nums, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if nums[i] > target:\n                break\n            self.dfs(nums, target - nums[i], i + 1, path + [nums[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper() and word[1:].islower():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Brute force\n        ## Time complexity: O(n^2)\n        ## Space complexity: O(1)\n        ## Runtime: 104 ms, faster than 99.95% of Python online submissions for Best Time to Buy and Sell Stock.\n        ## Memory Usage: 14.5 MB, less than 99.95% of Python online submissions for Best Time to Buy and Sell Stock.\n        ## 1. Find the minimum price\n        ## 2. Find the maximum price\n        ## 3. Return the difference\n        ## 4. If the minimum price is greater than the maximum price, return 0\n        ## 5. Otherwise, return the difference\n        \n        if not prices:\n            return 0\n        \n        min_price = prices[0]\n        max_price = prices[0]\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price > max_price:\n                max_price = price\n            max_profit = max(max_profit, max_price - min_price)\n        \n        return max_profit if max_profit > 0 else 0"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n                \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    if count > 0:\n                        count -= 1\n                    else:\n                        return False\n            return count == 0\n        \n        queue = collections.deque([s])\n        seen = {s}\n        while queue:\n            s = queue.popleft()\n            if isValid(s):\n                return [s]\n            for i in range(len(s)):\n                if s[i] not in '()':\n                    continue\n                t = s[:i] + s[i+1:]\n                if t not in seen:\n                    queue.append(t)\n                    seen.add(t)\n        return list(seen)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode()\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        if l1:\n            tail.next = l1\n        if l2:\n            tail.next = l2\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the number of trailing zeros in n\n        # 2. find the number of trailing zeros in n-1\n        # 3. find the number of trailing zeros in n-2\n        # 4. find the number of trailing zeros in n-3\n        # 5. find the number of trailing zeros in n-4\n        # 6. find the number of trailing zeros in n-5\n        # 7. find the number of trailing zeros in n-6\n        # 8. find the number of trailing zeros in n-7\n        # 9. find the number of trailing zeros in n-8\n        # 10. find the number of trailing zeros in n-9\n        # 11. find the number of trailing zeros in n-10\n        # 12. find the number of trailing zeros in n-11\n        # 13. find the number of trailing zeros in n-12\n        # 14. find the number of trailing zeros in n-13\n        # 15. find the number of trailing zeros in n-14\n        # 16. find the number of trailing zeros in n-15\n        # 17. find the number of trailing zeros in n-16\n        # 18. find the number of trailing zeros in n-17\n        # 19. find the number of trailing zeros in n-18\n        # 20. find the number of trailing zeros in n-19\n        # 21. find the number of trailing zeros in n-20\n        # 22. find the number of trailing zeros in n-21\n        # 23. find the number of trailing zeros in n-22\n        # 24. find the number of trailing zeros in n-23\n        # 25. find the number of trailing zeros in n-24\n        # 26. find the number of trailing zeros in n-25\n        # 27. find the number of trailing zeros in n-26\n        # 28. find the number of trailing zeros in n-27\n        # 29. find the number of trailing zeros in n-28\n        # 30. find the number of trailing zeros in n-29\n        # 31. find the number of trailing zeros in n-30\n        # 32. find the number of trailing zeros in n-31\n        # 33. find the number of trailing zeros in n-32\n        # 34. find the number of trailing zeros in n-33\n        # 35. find the number of trailing zeros in n-34\n        # 36. find the number of trailing zeros in n-35\n        # 37. find the number of trailing zeros in n-36\n        # 38. find the number of trailing zeros in n-37\n        # 39. find the number of trailing zeros in n-38\n        # 40. find the number of trailing zeros in n-39\n        # 41. find the number of trailing zeros in n-40\n        # 42. find the number of trailing zeros in n-41\n        # 43. find the number of trailing zeros in n-42\n        # 44. find the number of trailing zeros in n-43\n        # 45. find the number of trailing zeros in n-44\n        # 46. find the number of trailing zeros in n-45\n        # 47. find the number of trailing zeros in n-46\n        # 48. find the number of trailing zeros in n-47\n        # 49. find the number of trailing zeros in n-48\n        # 50. find the number of trailing zeros in n-49\n        # 51. find the number of trailing zeros in n-50\n        # 52. find the number of trailing zeros in n-51\n        # 53"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a hashmap to store the reverse of each word\n        # and the index of the word\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # create a list to store the result\n        result = []\n        \n        # iterate over each word\n        for i, word in enumerate(words):\n            # iterate over each character in the word\n            for j in range(len(word) + 1):\n                # get the prefix and suffix\n                prefix = word[:j]\n                suffix = word[j:]\n                \n                # check if the prefix is a palindrome\n                if prefix in word_map and word_map[prefix] != i and suffix == suffix[::-1]:\n                    result.append([i, word_map[prefix]])\n                \n                # check if the suffix is a palindrome\n                if suffix in word_map and word_map[suffix] != i and prefix == prefix[::-1]:\n                    result.append([word_map[suffix], i])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def spread(isInfected):\n            m, n = len(isInfected), len(isInfected[0])\n            res = 0\n            while True:\n                infected = set()\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.add((i, j))\n                if not infected:\n                    break\n                for i, j in infected:\n                    isInfected[i][j] = 2\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                                if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 0:\n                                    isInfected[ni][nj] = 1\n                res += 1\n            return res\n        \n        return len(isInfected) * len(isInfected[0]) - spread(isInfected) - spread(list(zip(*isInfected)))"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        max_len = 1\n        \n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        if not dp[-1]:\n            return []\n        \n        res = []\n        self.dfs(s, wordDict, 0, [], res)\n        return res\n    \n    def dfs(self, s, wordDict, start, path, res):\n        if start == len(s):\n            res.append(' '.join(path))\n            return\n        \n        for i in range(start + 1, len(s) + 1):\n            if s[start:i] in wordDict:\n                self.dfs(s, wordDict, i, path + [s[start:i]], res)"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level += 1\n            level_list = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_list.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                result.append(level_list[::-1])\n            else:\n                result.append(level_list)\n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(h, m):\n            if h > 11 or m > 59:\n                return\n            return \"%d:%02d\" % (h, m)\n        \n        def get_times(h, m):\n            if h > 11 or m > 59:\n                return\n            return [get_time(h, m), get_time(h + 1, m - 1), get_time(h + 2, m - 2), get_time(h + 3, m - 3), get_time(h + 4, m - 4), get_time(h + 5, m - 5), get_time(h + 6, m - 6), get_time(h + 7, m - 7), get_time(h + 8, m - 8), get_time(h + 9, m - 9)]\n        \n        if turnedOn > 10:\n            return []\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append(get_time(h, m))\n        \n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, i):\n                row.append(res[i-1][j-1] + res[i-1][j])\n            row.append(1)\n            res.append(row)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            new_path = node.val + left_gain + right_gain\n            \n            self.max_sum = max(self.max_sum, new_path)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if (i, j) not in seen:\n                seen.add((i, j))\n                ans += h\n                for ni, nj in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n                    if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                        heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. find the median\n        # 3. return the median\n        \n        # 1. sort the array\n        nums.sort()\n        \n        # 2. find the median\n        if len(nums) % 2 == 0:\n            return (nums[k//2] + nums[k//2 - 1]) / 2.0\n        else:\n            return nums[k//2]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        \n        if k == 0:\n            return head\n        \n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        while n % 3 == 0:\n            n = n / 3\n        while n % 5 == 0:\n            n = n / 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                res = max(res, self.maxSubarray(sums, k))\n                if res == k:\n                    return k\n        return res\n    \n    def maxSubarray(self, sums, k):\n        s = set([0])\n        res = float('-inf')\n        for sum in sums:\n            res = max(res, sum - k)\n            if res in s:\n                return res\n            s.add(sum)\n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend > 0 and divisor > 0:\n            return min(max(dividend//divisor, -2147483648), 2147483647)\n        \n        if dividend > 0 and divisor < 0:\n            return -self.divide(dividend, -divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -self.divide(-dividend, divisor)\n        \n        if dividend < 0 and divisor < 0:\n            return self.divide(-dividend, -divisor)"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i,j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board)-1 or j == 0 or j == len(board[0])-1:\n                    dfs(i,j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the current element to the dictionary\n        # if the complement is not in the dictionary, add the current element to the dictionary\n        # return the index of the complement and the index of the current element\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current element\n        # if it is not, add the"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(len(cards)):\n                    if i != j:\n                        a, b = cards[i], cards[j]\n                        for op in ['+', '-', '*', '/']:\n                            if op == '+':\n                                new_a, new_b = a + b, a - b\n                            elif op == '-':\n                                new_a, new_b = a - b, b - a\n                            elif op == '*':\n                                new_a, new_b = a * b, a / b\n                            else:\n                                new_a, new_b = b / a, a / b\n                            if new_b > 0 and backtrack([new_a] + cards[0:i] + cards[i+1:j] + cards[j+1:], target):\n                                return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return true if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if first character matches\n        first_match = bool(s) and p[0] in (s[0], '?')\n        \n        # if p is not empty, check if there is a star\n        if len(p) > 1 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100288/Python-O(n)-solution-with-explanation\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a].append(b)\n        \n        # dfs\n        res = []\n        def dfs(node):\n            # if there is no more nodes, add to res\n            if len(graph[node]) == 0:\n                res.append(node)\n                return\n            # if there is a node, pop it out\n            for i in range(len(graph[node])):\n                nei = graph[node].pop(0)\n                dfs(nei)\n                # if there is no more nodes, add to res\n                if len(graph[node]) == 0:\n                    res.append(node)\n                    return\n        dfs('JFK')\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the building is ending\n            if building[1] < 0:\n                # add the building to the result\n                result.append([building[0], -building[1]])\n            else:\n                # find the index of the building in the result\n                index = len(result) - 1\n                # if the building is ending\n                if building[1] > result[index][1]:\n                    # add the building to the result\n                    result.append([building[0], building[1]])\n                else:\n                    # update the height of the building\n                    result[index][1] = building[1]\n        \n        # sort the result by x coordinate\n        result.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        skyline = []\n        \n        # iterate over the result\n        for i in range(len(result)):\n            # if the building is ending\n            if result[i][1] < 0:\n                # add the building to the skyline\n                skyline.append([result[i][0], -result[i][1]])\n            else:\n                # add the building to the skyline\n                skyline.append([result[i][0], result[i][1]])\n        \n        # return the skyline\n        return skyline"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # return the reversed string\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 20:\n                return ones[num]\n            if num < 100:\n                return tens[num//10] + helper(num%10)\n            if num < 1000:\n                return ones[num//100] + \" Hundred\" + helper(num%100)\n            if num < 1000000:\n                return helper(num//1000) + \" Thousand\" + helper(num%1000)\n            if num < 1000000000:\n                return helper(num//1000000) + \" Million\" + helper(num%1000000)\n            return helper(num//1000000000) + \" Billion\" + helper(num%1000000000)\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        \n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-2][j-1]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = {}\n        child = {}\n        for edge in edges:\n            if edge[0] in parent:\n                if parent[edge[0]] != edge[1]:\n                    return [parent[edge[0]], edge[1]]\n            else:\n                parent[edge[0]] = edge[1]\n            child[edge[1]] = edge[0]\n        \n        # find the node with only one parent\n        for edge in edges:\n            if edge[0] not in parent:\n                if edge[1] not in child:\n                    return edge\n                else:\n                    return [child[edge[1]], edge[1]]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                res.append(nums[:])\n            else:\n                for i in range(first, n):\n                    if nums[i] not in used:\n                        used.add(nums[i])\n                        nums[first], nums[i] = nums[i], nums[first]\n                        backtrack(first + 1)\n                        nums[first], nums[i] = nums[i], nums[first]\n                        \n        n = len(nums)\n        res = []\n        nums.sort()\n        used = set()\n        backtrack()\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use bit manipulation\n        ## 4. use XOR\n        ## 5. use math\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3."}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(n):\n                for j2 in range(n):\n                    p1 = max(j1 - 1, 0)\n                    p2 = min(j1 + 1, n - 1)\n                    p3 = max(j2 - 1, 0)\n                    p4 = min(j2 + 1, n - 1)\n                    if grid[i][j1] == -1 or grid[i][j2] == -1:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2]\n                    elif j1 == j2:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1]\n                    else:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1] + grid[i][j2]\n                    if p1 <= p2 and p3 <= p4:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][p1][p3])\n        return max(dp[n - 1][j1][j2] for j1 in range(n) for j2 in range(n) if grid[n - 1][j1] * 2 + grid[n - 1][j2] * 2 - 4 == grid[n - 1][j1] + grid[n - 1][j2])"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log n) runtime complexity\n        # O(1) space complexity\n        \n        # binary search\n        # O(log"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # for i in range(1, len(nums)):\n        #     if nums[i] + i >= len(nums) - 1:\n        #         return True\n        #     if nums[i] == 0:\n        #         return False\n        #     if nums[i] + i > nums[i - 1]:\n        #         nums[i] = nums[i - 1]\n        #     else:\n        #         nums[i] = nums[i - 1] - 1\n        # return True\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # for i in range(len(nums) - 2, -1, -1):\n        #     if nums[i] + i >= len(nums) - 1:\n        #         return True\n        #     if nums[i] == 0:\n        #         return False\n        #     if nums[i] + i > nums[i + 1]:\n        #         nums[i] = nums[i + 1]\n        #     else:\n        #         nums[i] = nums[i + 1] - 1\n        # return True\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # for i in range(len(nums) - 2, -1, -1):\n        #     if nums[i] + i >= len(nums) - 1:\n        #         return True\n        #     if nums[i] == 0:\n        #         return False\n        #     if nums[i] + i > nums[i + 1]:\n        #         nums[i] = nums[i + 1]\n        #     else:\n        #         nums[i] = nums[i + 1] - 1\n        # return True\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # for i in range(len(nums) - 2, -1, -1):\n        #     if nums[i] + i >= len(nums) - 1:\n        #         return True\n        #     if nums[i] == 0:\n        #         return False\n        #     if nums[i] + i > nums[i + 1]:\n        #         nums[i] = nums[i + 1]\n        #     else:\n        #         nums[i] = nums[i + 1] - 1\n        # return True\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # for i in range(len(nums) - 2, -1, -1):\n        #     if nums[i] + i >= len(nums) - 1:\n        #         return True\n        #     if nums[i] == 0:\n        #         return False\n        #     if nums[i] + i > nums[i + 1]:\n        #         nums[i] = nums[i + 1]\n        #     else:\n        #         nums[i] = nums[i + 1] - 1\n        # return True\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # for i in range(len(nums) - 2, -1, -1):\n        #     if nums[i] + i >= len(nums) - 1:\n        #         return True\n        #     if nums[i] == 0:\n        #         return False\n        #     if nums[i] + i > nums[i + 1"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j == 0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                else:\n                    grid[i][j] = min(grid[i][j-1], grid[i-1][j]) + grid[i][j]\n        \n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        if n == 2:\n            return '11'\n        \n        if n == 3:\n            return '21'\n        \n        if n == 4:\n            return '1211'\n        \n        if n == 5:\n            return '111221'\n        \n        if n == 6:\n            return '312211'\n        \n        if n == 7:\n            return '13112221'\n        \n        if n == 8:\n            return '1113213211'\n        \n        if n == 9:\n            return '31131211131221'\n        \n        if n == 10:\n            return '13211311123113112211'\n        \n        if n == 11:\n            return '11131221133112132132221'\n        \n        if n == 12:\n            return '311311222123213221131112311312211'\n        \n        if n == 13:\n            return '132113111231131122112131221131122211'\n        \n        if n == 14:\n            return '1113122113311213213222123132113123113122112132221132122212313211312311312211'\n        \n        if n == 15:\n            return '31131122212321322113111231131221121322211321222123132113123113122112132221132122212313211312311312211213322113312221221'\n        \n        if n == 16:\n            return '13211311123113112211213122113112221121322211321222123132113123113122112132221132122212313211312311312211213322113312221221213211312221121332211331222122123132113123113122112132221132122212313211312311312211213322113312221221213211312221121332211331222122123132113123113122112132221132122212313211312311312211213322113312221221213211312221121332211331222122123132113123113122112132221132122212313211312311312211213322113312221221213211312"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max sum\n        # find the min sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if the target is in the first half of the array\n        if nums[pivot] <= target <= nums[-1]:\n            return self.binary_search(nums, target, 0, pivot)\n        # if the target is in the second half of the array\n        elif nums[0] <= target <= nums[pivot]:\n            return self.binary_search(nums, target, pivot, len(nums) - 1)\n        # if the target is not in the array\n        else:\n            return -1\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        def backtrack(combination, next_digits):\n            # base case: no more digits to check\n            if not next_digits:\n                # completed combination\n                output.append(combination)\n            else:\n                # get the next digit\n                first, rest = next_digits[0], next_digits[1:]\n                # get the letters that the next digit maps to\n                letters = digit_to_letters[first]\n                # add the letters to the beginning of each string in the combination\n                for letter in letters:\n                    backtrack(combination + letter, rest)\n        \n        output = []\n        backtrack(\"\", digits)\n        return output"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of the string\n        length = len(n)\n        \n        # 2. get the left and right part of the string\n        left = n[:length//2]\n        right = n[length//2:][::-1]\n        \n        # 3. get the list of all possible palindromes\n        palindromes = [int(left + right), int(left + \"0\" + right[1:]), int(left + \"1\" + right[1:]), int(left + \"0\" + right)]\n        \n        # 4. get the closest palindrome\n        closest = min(palindromes, key=lambda x: abs(x - int(n)))\n        \n        # 5. return the closest palindrome\n        return str(closest)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            \n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables to keep track of the maximum and minimum product seen so far\n        max_product = nums[0]\n        min_product = nums[0]\n        result = max_product\n        \n        # Iterate through the array, updating the maximum and minimum product seen so far\n        for i in range(1, len(nums)):\n            current_max = max(nums[i], max_product * nums[i], min_product * nums[i])\n            min_product = min(nums[i], min_product * nums[i], max_product * nums[i])\n            max_product = current_max\n            result = max(result, max_product)\n            \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score list\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a dictionary to map the score to the rank\n        score_rank = {}\n        for i, s in enumerate(score_sorted):\n            score_rank[s] = i + 1\n        \n        # create a list of ranks\n        ranks = []\n        for s in score:\n            ranks.append(score_rank[s])\n        \n        # create a list of ranks\n        ranks_str = []\n        for r in ranks:\n            if r == 1:\n                ranks_str.append(\"Gold Medal\")\n            elif r == 2:\n                ranks_str.append(\"Silver Medal\")\n            elif r == 3:\n                ranks_str.append(\"Bronze Medal\")\n            else:\n                ranks_str.append(str(r))\n        \n        return ranks_str"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. left pointer\n        # 2. right pointer\n        # 3. hashmap\n        # 4. max length\n        \n        # 1. left pointer\n        left = 0\n        # 2. right pointer\n        right = 0\n        # 3. hashmap\n        hashmap = {}\n        # 4. max length\n        max_length = 0\n        \n        while right < len(s):\n            # 5. if the character is in the hashmap, update the left pointer to the max of the current character and the previous occurence of the character\n            if s[right] in hashmap:\n                left = max(left, hashmap[s[right]] + 1)\n            # 6. update the hashmap with the character and its index\n            hashmap[s[right]] = right\n            # 7. update the max length\n            max_length = max(max_length, right - left + 1)\n            # 8. increment the right pointer\n            right += 1\n            \n        return max_length"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = collections.Counter(words)\n        res = []\n        \n        for i in range(word_len):\n            left = i\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s) - word_len + 1, word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                else:\n                    left = j + word_len\n                    word_dict_copy = word_dict.copy()\n                if not word_dict_copy:\n                    res.append(left)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. find the max value in the array\n        # 3. find the max value in the array\n        # 4. find the max value in the array\n        # 5. find the max value in the array\n        # 6. find the max value in the array\n        # 7. find the max value in the array\n        # 8. find the max value in the array\n        # 9. find the max value in the array\n        # 10. find the max value in the array\n        # 11. find the max value in the array\n        # 12. find the max value in the array\n        # 13. find the max value in the array\n        # 14. find the max value in the array\n        # 15. find the max value in the array\n        # 16. find the max value in the array\n        # 17. find the max value in the array\n        # 18. find the max value in the array\n        # 19. find the max value in the array\n        # 20. find the max value in the array\n        # 21. find the max value in the array\n        # 22. find the max value in the array\n        # 23. find the max value in the array\n        # 24. find the max value in the array\n        # 25. find the max value in the array\n        # 26. find the max value in the array\n        # 27. find the max value in the array\n        # 28. find the max value in the array\n        # 29. find the max value in the array\n        # 30. find the max value in the array\n        # 31. find the max value in the array\n        # 32. find the max value in the array\n        # 33. find the max value in the array\n        # 34. find the max value in the array\n        # 35. find the max value in the array\n        # 36. find the max value in the array\n        # 37. find the max value in the array\n        # 38. find the max value in the array\n        # 39. find the max value in the array\n        # 40. find the max value in the array\n        # 41. find the max value in the array\n        # 42. find the max value in the array\n        # 43. find the max value in the array\n        # 44. find the max value in the array\n        # 45. find the max value in the array\n        # 46. find the max value in the array\n        # 47. find the max value in the array\n        # 48. find the max value in the array\n        # 49. find the max value in the array\n        # 50. find the max value in the array\n        # 51. find the max value in the array\n        # 52. find the max value in the array\n        # 53. find the max value in the array\n        # 54. find the max value in the array\n        # 55. find the max value in the array\n        # 56. find the max value in the array\n        # 57. find the max value in the array\n        # 58. find the max value in the array\n        # 59. find the max value in the array\n        # 60. find the max value in the array\n        # 61. find the max value in the array\n        # 62. find the max value in the array\n        # 63. find the max value in the array\n        # 64. find the max value in the array\n        # 65. find the max value in the array\n        # 66. find the max value in the array\n        # 67. find the max value in the array\n        # 68. find the max value in the array\n        # 69. find the max value in the array\n        # 70. find the max value in the array\n        # 71. find the max value in the array\n        # 72. find the max value in the array\n        # 73. find the max value in the array\n        # 74. find the max value in the array"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                curr.next, curr.next.next, prev.next = curr.next.next, curr, prev.next\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            cnt = 0\n            while i <= mid and j <= right:\n                if nums[i] > nums[j] * 2:\n                    cnt += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return cnt\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            cnt = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            cnt += merge(nums, left, mid, right)\n            return cnt\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(i) for i in version1.split('.')]\n        v2 = [int(i) for i in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                if v1[i] > v2[i]:\n                    return 1\n                elif v1[i] < v2[i]:\n                    return -1\n            else:\n                if v2[i] > 0:\n                    return 1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        for duration, end in courses:\n            # add to priority queue\n            heapq.heappush(pq, -duration)\n            \n            # add to total time\n            total += duration\n            \n            # if total time exceeds end date, remove the longest course\n            if total > end:\n                total += heapq.heappop(pq)\n                \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while True:\n            kth = prev\n            for i in range(k):\n                if not kth:\n                    break\n                kth = kth.next\n            if not kth:\n                break\n            start = prev.next\n            end = kth.next\n            for i in range(k - 1):\n                tmp = start.next\n                start.next = end.next\n                end.next = end.next.next\n                start.next.next = tmp\n            prev.next = kth\n            prev = start\n        \n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s)//i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4) + dp[i-6] * 2 * (2*i - 11) / (i-5)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4) + dp[i-6] * 2 * (2*i - 11) / (i-5) + dp[i-7] * 2 * (2*i - 13) / (i-6)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4) + dp[i-6] * 2 * (2*i - 11) / (i-5) + dp[i-7] * 2 * (2*i - 13) / (i-6) + dp[i-8] * 2 * (2*i - 15) / (i-7)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) /"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. use a dictionary to store the count of each number\n        # 2. iterate through the dictionary and return the number with count = 1\n        # 3. use a set to store the seen numbers\n        # 4. iterate through the list and add each number to the set\n        # 5. iterate through the list again and check if the number is in the set\n        # 6. if it is, remove it from the set\n        # 7. if the set is empty, return the last number in the list\n        \n        # 1.\n        num_dict = {}\n        for num in nums:\n            if num not in num_dict:\n                num_dict[num] = 1\n            else:\n                num_dict[num] += 1\n        \n        # 2.\n        for num in num_dict:\n            if num_dict[num] == 1:\n                return num\n        \n        # 3.\n        seen_set = set()\n        for num in nums:\n            if num not in seen_set:\n                seen_set.add(num)\n            else:\n                seen_set.remove(num)\n        \n        # 4.\n        for num in nums:\n            if num in seen_set:\n                seen_set.remove(num)\n        \n        # 5.\n        return seen_set.pop()"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict of all the letters in the target\n        # 2. build a dict of all the letters in the stickers\n        # 3. build a dict of all the letters in the stickers\n        # 4. build a dict of all the letters in the stickers\n        # 5. build a dict of all the letters in the stickers\n        # 6. build a dict of all the letters in the stickers\n        # 7. build a dict of all the letters in the stickers\n        # 8. build a dict of all the letters in the stickers\n        # 9. build a dict of all the letters in the stickers\n        # 10. build a dict of all the letters in the stickers\n        # 11. build a dict of all the letters in the stickers\n        # 12. build a dict of all the letters in the stickers\n        # 13. build a dict of all the letters in the stickers\n        # 14. build a dict of all the letters in the stickers\n        # 15. build a dict of all the letters in the stickers\n        # 16. build a dict of all the letters in the stickers\n        # 17. build a dict of all the letters in the stickers\n        # 18. build a dict of all the letters in the stickers\n        # 19. build a dict of all the letters in the stickers\n        # 20. build a dict of all the letters in the stickers\n        # 21. build a dict of all the letters in the stickers\n        # 22. build a dict of all the letters in the stickers\n        # 23. build a dict of all the letters in the stickers\n        # 24. build a dict of all the letters in the stickers\n        # 25. build a dict of all the letters in the stickers\n        # 26. build a dict of all the letters in the stickers\n        # 27. build a dict of all the letters in the stickers\n        # 28. build a dict of all the letters in the stickers\n        # 29. build a dict of all the letters in the stickers\n        # 30. build a dict of all the letters in the stickers\n        # 31. build a dict of all the letters in the stickers\n        # 32. build a dict of all the letters in the stickers\n        # 33. build a dict of all the letters in the stickers\n        # 34. build a dict of all the letters in the stickers\n        # 35. build a dict of all the letters in the stickers\n        # 36. build a dict of all the letters in the stickers\n        # 37. build a dict of all the letters in the stickers\n        # 38. build a dict of all the letters in the stickers\n        # 39. build a dict of all the letters in the stickers\n        # 40. build a dict of all the letters in the stickers\n        # 41. build a dict of all the letters in the stickers\n        # 42. build a dict of all the letters in the stickers\n        # 43. build a dict of all the letters in the stickers\n        # 44. build a dict of all the letters in the stickers\n        # 45. build a dict of all the letters in the stickers\n        # 46. build a dict of all the letters in the stickers\n        # 47. build a dict of all the letters in the stickers\n        # 48. build a dict of all the letters in the stickers\n        # 49. build a dict of all the letters in the stickers\n        # 50. build a dict of all the letters in the stickers\n        # 51. build a dict of all the letters in the stickers\n        # 52. build a dict of all the letters in the stickers\n        # 53. build a dict of all the letters in the stickers\n        # 54. build a dict of all the letters in the stickers\n        # 55. build a dict of all the letters in the stickers\n        # 56. build a dict of all the letters in the stickers\n        # 57. build a dict of all the letters in the stickers\n        # 58. build a"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = min(dp[i][j - 1] + 1, dp[j][j])\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        \n        for i in range(len(s)):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the deque and output list\n        dq = collections.deque()\n        output = []\n        \n        # Iterate over the input array\n        for i in range(len(nums)):\n            \n            # Remove any elements that are out of the current window\n            if dq and dq[0] == i - k:\n                dq.popleft()\n            \n            # Remove any elements that are smaller than the current element\n            while dq and nums[dq[-1]] < nums[i]:\n                dq.pop()\n            \n            # Add the current element to the deque\n            dq.append(i)\n            \n            # Add the maximum element to the output list\n            if i >= k - 1:\n                output.append(nums[dq[0]])\n        \n        return output"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # merge the two arrays\n        nums1.extend(nums2)\n        nums1.sort()\n        \n        # find the median\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2.0\n        else:\n            return nums1[len(nums1) // 2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     if nums[mid] < nums[mid - 1]:\n        #         return nums[mid]\n        #     if nums[mid] > nums[0]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            if nums[mid] > nums[0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and root.val == targetSum:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area ** 0.5)\n        # 2. 2 * area ** 0.5\n        # 3. 2 * math.sqrt(area)\n        # 4. 2 * math.sqrt(area) ** 0.5\n        # 5. 2 * math.sqrt(area) ** 0.5\n        # 6. 2 * math.sqrt(area) ** 0.5\n        # 7. 2 * math.sqrt(area) ** 0.5\n        # 8. 2 * math.sqrt(area) ** 0.5\n        # 9. 2 * math.sqrt(area) ** 0.5\n        # 10. 2 * math.sqrt(area) ** 0.5\n        # 11. 2 * math.sqrt(area) ** 0.5\n        # 12. 2 * math.sqrt(area) ** 0.5\n        # 13. 2 * math.sqrt(area) ** 0.5\n        # 14. 2 * math.sqrt(area) ** 0.5\n        # 15. 2 * math.sqrt(area) ** 0.5\n        # 16. 2 * math.sqrt(area) ** 0.5\n        # 17. 2 * math.sqrt(area) ** 0.5\n        # 18. 2 * math.sqrt(area) ** 0.5\n        # 19. 2 * math.sqrt(area) ** 0.5\n        # 20. 2 * math.sqrt(area) ** 0.5\n        # 21. 2 * math.sqrt(area) ** 0.5\n        # 22. 2 * math.sqrt(area) ** 0.5\n        # 23. 2 * math.sqrt(area) ** 0.5\n        # 24. 2 * math.sqrt(area) ** 0.5\n        # 25. 2 * math.sqrt(area) ** 0.5\n        # 26. 2 * math.sqrt(area) ** 0.5\n        # 27. 2 * math.sqrt(area) ** 0.5\n        # 28. 2 * math.sqrt(area) ** 0.5\n        # 29. 2 * math.sqrt(area) ** 0.5\n        # 30. 2 * math.sqrt(area) ** 0.5\n        # 31. 2 * math.sqrt(area) ** 0.5\n        # 32. 2 * math.sqrt(area) ** 0.5\n        # 33. 2 * math.sqrt(area) ** 0.5\n        # 34. 2 * math.sqrt(area) ** 0.5\n        # 35. 2 * math.sqrt(area) ** 0.5\n        # 36. 2 * math.sqrt(area) ** 0.5\n        # 37. 2 * math.sqrt(area) ** 0.5\n        # 38. 2 * math.sqrt(area) ** 0.5\n        # 39. 2 * math.sqrt(area) ** 0.5\n        # 40. 2 * math.sqrt(area) ** 0.5\n        # 41. 2 * math.sqrt(area) ** 0.5\n        # 42. 2 * math.sqrt(area) ** 0.5\n        # 43. 2 * math.sqrt(area) ** 0.5\n        # 44. 2 * math.sqrt(area) ** 0.5\n        # 45. 2 * math.sqrt(area) ** 0.5\n        # 46. 2 * math.sqrt(area) ** 0.5\n        # 47. 2 * math.sqrt(area) ** 0.5\n        # 48. 2 * math.sqrt(area) ** 0.5\n        # 49. 2 * math.sqrt(area) ** 0.5\n        # 50. 2 * math.sqrt(area) **"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        while queue:\n            word = queue.popleft()\n            if word == endWord:\n                break\n            for i in range(len(word)):\n                for j in range(26):\n                    neighbor = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    for n in graph[neighbor]:\n                        if n not in visited:\n                            visited[n] = visited[word] + 1\n                            queue.append(n)\n        \n        # build the result\n        res = []\n        if endWord not in visited:\n            return res\n        while endWord in visited:\n            res.append([endWord])\n            endWord = visited[endWord]\n        return res[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]] + r for r in res]\n            else:\n                res += [nums[i]]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 3. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uac12\uc744 \ucc3e\uc558\uc744 \ub54c, \uc624\ub978\ucabd \uac12\uc774 \uc67c\ucabd \uac12\ubcf4\ub2e4 \ud06c\uba74 \uc624\ub978\ucabd \uac12\uc744 \uc2a4\ud0dd\uc5d0 \ub123\ub294\ub2e4.\n        # 4. \uc624\ub978\ucabd \uac12\uc774 \uc67c\ucabd \uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uac12\uc744 \ube7c\ub0b8\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \ub0a8\uc544\uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 6. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uac12\uc744 \ucc3e\uc558\uc744 \ub54c, \uc624\ub978\ucabd \uac12\uc774 \uc67c\ucabd \uac12\ubcf4\ub2e4 \ud06c\uba74 \uc624\ub978\ucabd \uac12\uc744 \uc2a4\ud0dd\uc5d0 \ub123\ub294\ub2e4.\n        # 7. \uc624\ub978\ucabd \uac12\uc774 \uc67c\ucabd \uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uac12\uc744 \ube7c\ub0b8\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \ub0a8\uc544\uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 9. \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uac12\uc744 \ucc3e\uc558\uc744 \ub54c, \uc624\ub978\ucabd \uac12\uc774 \uc67c\ucabd \uac12\ubcf4\ub2e4 \ud06c\uba74 \uc624\ub978\ucabd \uac12\uc744 \uc2a4\ud0dd\uc5d0 \ub123\ub294\ub2e4.\n        # 10. \uc624\ub978\ucabd \uac12\uc774 \uc67c\ucabd \uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uac12\uc744 \ube7c\ub0b8\ub2e4.\n        # 11. \uc2a4\ud0dd\uc5d0 \ub0a8\uc544\uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ufffd"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_max, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 26\u8fdb\u5236\u8f6c\u6362\n        # 2. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 3. 26\u8fdb\u5236\u8f6c\u6362\n        # 4. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 5. 26\u8fdb\u5236\u8f6c\u6362\n        # 6. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 7. 26\u8fdb\u5236\u8f6c\u6362\n        # 8. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 9. 26\u8fdb\u5236\u8f6c\u6362\n        # 10. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 11. 26\u8fdb\u5236\u8f6c\u6362\n        # 12. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 13. 26\u8fdb\u5236\u8f6c\u6362\n        # 14. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 15. 26\u8fdb\u5236\u8f6c\u6362\n        # 16. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 17. 26\u8fdb\u5236\u8f6c\u6362\n        # 18. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 19. 26\u8fdb\u5236\u8f6c\u6362\n        # 20. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 21. 26\u8fdb\u5236\u8f6c\u6362\n        # 22. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 23. 26\u8fdb\u5236\u8f6c\u6362\n        # 24. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 25. 26\u8fdb\u5236\u8f6c\u6362\n        # 26. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 27. 26\u8fdb\u5236\u8f6c\u6362\n        # 28. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 29. 26\u8fdb\u5236\u8f6c\u6362\n        # 30. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 31. 26\u8fdb\u5236\u8f6c\u6362\n        # 32. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 33. 26\u8fdb\u5236\u8f6c\u6362\n        # 34. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 35. 26\u8fdb\u5236\u8f6c\u6362\n        # 36. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 37. 26\u8fdb\u5236\u8f6c\u6362\n        # 38. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 39. 26\u8fdb\u5236\u8f6c\u6362\n        # 40. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 41. 26\u8fdb\u5236\u8f6c\u6362\n        # 42. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 43. 26\u8fdb\u5236\u8f6c\u6362\n        # 44. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 45. 26\u8fdb\u5236\u8f6c\u6362\n        # 46. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 47. 26\u8fdb\u5236\u8f6c\u6362\n        # 48. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 49. 26\u8fdb\u5236\u8f6c\u6362\n        # 50. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 51. 26\u8fdb\u5236\u8f6c\u6362\n        # 52. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 53. 26\u8fdb\u5236\u8f6c\u6362\n        # 54. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 55. 26\u8fdb\u5236\u8f6c\u6362\n        # 56. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 57. 26\u8fdb\u5236\u8f6c\u6362\n        # 58. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 59. 26\u8fdb\u5236\u8f6c\u6362\n        # 60. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 61. 26\u8fdb\u5236\u8f6c\u6362\n        # 62. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 63. 26\u8fdb\u5236\u8f6c\u6362\n        # 64. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 65. 26\u8fdb\u5236\u8f6c\u6362\n        # 66. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 67. 26\u8fdb\u5236\u8f6c\u6362\n        # 68. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 69. 26\u8fdb\u5236\u8f6c\u6362\n        # 70. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 71. 26\u8fdb\u5236\u8f6c\u6362\n        # 72. \u4ece\u540e\u5f80\u524d\u904d\u5386\n        # 73. 26\u8fdb\u5236\u8f6c\u6362\n        # 74. \u4ece\u540e\u5f80\u524d"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        \n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n            \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = []\n        for row in board:\n            for col in row:\n                board_1d.append(col)\n        \n        # convert board_1d to a string\n        board_str = ''.join(str(x) for x in board_1d)\n        \n        # convert board_str to a 6-digit number\n        board_num = int(board_str)\n        \n        # convert board_num to a list of 6 digits\n        board_list = [board_num // 100000, (board_num % 100000) // 10000, (board_num % 10000) // 1000, (board_num % 1000) // 100, (board_num % 100) // 10, board_num % 10]\n        \n        # convert board_list to a 1D array\n        board_1d = []\n        for num in board_list:\n            board_1d.append(num)\n        \n        # convert board_1d to a string\n        board_str = ''.join(str(x) for x in board_1d)\n        \n        # convert board_str to a 6-digit number\n        board_num = int(board_str)\n        \n        # convert board_num to a list of 6 digits\n        board_list = [board_num // 100000, (board_num % 100000) // 10000, (board_num % 10000) // 1000, (board_num % 1000) // 100, (board_num % 100) // 10, board_num % 10]\n        \n        # convert board_list to a 1D array\n        board_1d = []\n        for num in board_list:\n            board_1d.append(num)\n        \n        # convert board_1d to a string\n        board_str = ''.join(str(x) for x in board_1d)\n        \n        # convert board_str to a 6-digit number\n        board_num = int(board_str)\n        \n        # convert board_num to a list of 6 digits\n        board_list = [board_num // 100000, (board_num % 100000) // 10000, (board_num % 10000) // 1000, (board_num % 1000) // 100, (board_num % 100) // 10, board_num % 10]\n        \n        # convert board_list to a 1D array\n        board_1d = []\n        for num in board_list:\n            board_1d.append(num)\n        \n        # convert board_1d to a string\n        board_str = ''.join(str(x) for x in board_1d)\n        \n        # convert board_str to a 6-digit number\n        board_num = int(board_str)\n        \n        # convert board_num to a list of 6 digits\n        board_list = [board_num // 100000, (board_num % 100000) // 10000, (board_num % 10000) // 1000, (board_num % 1000) // 100, (board_num % 100) // 10, board_num % 10]\n        \n        # convert board_list to a 1D array\n        board_1d = []\n        for num in board_list:\n            board_1d.append(num)\n        \n        # convert board_1d to a string\n        board_str = ''.join(str(x) for x in board_1d)\n        \n        # convert board_str to a 6-digit number\n        board_num = int(board_str)\n        \n        # convert board_num to a list of 6 digits\n        board_list = [board"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_to_s:\n                    return False\n                s_to_t[s[i]] = t[i]\n                t_to_s[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if the target is in the first half\n        if nums[pivot] == target:\n            return True\n        \n        # if the target is in the second half\n        if nums[0] <= target:\n            return self.binary_search(nums, 0, pivot - 1, target)\n        \n        # if the target is in the first half\n        return self.binary_search(nums, pivot + 1, len(nums) - 1, target)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return left\n        \n    def binary_search(self, nums, left, right, target):\n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if abs(s - target) < abs(closest - target):\n                    closest = s\n                if s < target:\n                    l += 1\n                else:\n                    r -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                yield from inorder(root.left)\n                yield root.val\n                yield from inorder(root.right)\n        \n        prev = None\n        min_diff = float('inf')\n        for n in inorder(root):\n            if prev:\n                min_diff = min(min_diff, n - prev)\n            prev = n\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return []\n            left = dfs(root.left)\n            right = dfs(root.right)\n            if len(left) > len(right):\n                return [root.val] + left\n            elif len(left) < len(right):\n                return [root.val] + right\n            else:\n                return [root.val] + left + right\n        \n        return dfs(root)"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first 3 repeating characters\n        # 3. replace the first 3 repeating characters with a character\n        # 4. add 2 more characters to the end of the password\n        # 5. repeat steps 2 and 3 until password is strong"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 10 = 2 * 5\n        # 2 = 2 * 2\n        # 5 = 5 * 5\n        # 25 = 5 * 5\n        # 125 = 5 * 5 * 5\n        # 625 = 5 * 5 * 5 * 5\n        # 3125 = 5 * 5 * 5 * 5 * 5\n        # 15625 = 5 * 5 * 5 * 5 * 5 * 5\n        # 78125 = 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 390625 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 1953125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 9765625 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 48828125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 244140625 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 1220703125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 6103017578125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 30517578125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 152587890625000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 762939453125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 3814697265625000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 19073486328125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 95367431640625000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 476837158203125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 2384185791015625000 = 5 *"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        curRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[curRow] += c\n            if curRow == 0 or curRow == numRows - 1:\n                goingDown = not goingDown\n            curRow += 1 if goingDown else -1\n        \n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 pass\n        # 3. 2 pass\n        # 4. 3 pass\n        # 5. 4 pass\n        # 6. 5 pass\n        # 7. 6 pass\n        # 8. 7 pass\n        # 9. 8 pass\n        # 10. 9 pass\n        # 11. 10 pass\n        # 12. 11 pass\n        # 13. 12 pass\n        # 14. 13 pass\n        # 15. 14 pass\n        # 16. 15 pass\n        # 17. 16 pass\n        # 18. 17 pass\n        # 19. 18 pass\n        # 20. 19 pass\n        # 21. 20 pass\n        # 22. 21 pass\n        # 23. 22 pass\n        # 24. 23 pass\n        # 25. 24 pass\n        # 26. 25 pass\n        # 27. 26 pass\n        # 28. 27 pass\n        # 29. 28 pass\n        # 30. 29 pass\n        # 31. 30 pass\n        # 32. 31 pass\n        # 33. 32 pass\n        # 34. 33 pass\n        # 35. 34 pass\n        # 36. 35 pass\n        # 37. 36 pass\n        # 38. 37 pass\n        # 39. 38 pass\n        # 40. 39 pass\n        # 41. 40 pass\n        # 42. 41 pass\n        # 43. 42 pass\n        # 44. 43 pass\n        # 45. 44 pass\n        # 46. 45 pass\n        # 47. 46 pass\n        # 48. 47 pass\n        # 49. 48 pass\n        # 50. 49 pass\n        # 51. 50 pass\n        # 52. 51 pass\n        # 53. 52 pass\n        # 54. 53 pass\n        # 55. 54 pass\n        # 56. 55 pass\n        # 57. 56 pass\n        # 58. 57 pass\n        # 59. 58 pass\n        # 60. 59 pass\n        # 61. 60 pass\n        # 62. 61 pass\n        # 63. 62 pass\n        # 64. 63 pass\n        # 65. 64 pass\n        # 66. 65 pass\n        # 67. 66 pass\n        # 68. 67 pass\n        # 69. 68 pass\n        # 70. 69 pass\n        # 71. 70 pass\n        # 72. 71 pass\n        # 73. 72 pass\n        # 74. 73 pass\n        # 75. 74 pass\n        # 76. 75 pass\n        # 77. 76 pass\n        # 78. 77 pass\n        # 79. 78 pass\n        # 80. 79 pass\n        # 81. 80 pass\n        # 82. 81 pass\n        # 83. 82 pass\n        # 84. 83 pass\n        # 85. 84 pass\n        # 86. 85 pass\n        # 87. 86 pass\n        # 88. 87 pass\n        # 89. 88 pass\n        # 90. 89 pass\n        # 91. 90 pass\n        # 92. 91 pass\n        # 93. 92 pass\n        # 94. 93 pass\n        # 95."}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        return [i + 1 for i in range(len(nums)) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. iterate over the array from right to left\n        # 3. for each element, find the number of smaller elements to the right\n        # 4. add the number of smaller elements to the result\n        \n        # 1. sort the array\n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        \n        # 2. iterate over the array from right to left\n        res = [0] * len(nums)\n        for i in range(len(nums) - 2, -1, -1):\n            # 3. for each element, find the number of smaller elements to the right\n            # 4. add the number of smaller elements to the result\n            res[i] = res[i + 1] + (nums[i + 1][1] > nums[i][1])\n        \n        return res"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the intervals by start and end\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        \n        # initialize the result and the current interval\n        res = curr = 0\n        \n        # iterate over the intervals\n        for s, e in intervals:\n            # if the current interval is not fully covered\n            if s > curr:\n                # increment the result by 2\n                res += 2\n                # update the current interval\n                curr += 2\n            # otherwise, if the current interval is fully covered\n            else:\n                # increment the result by 1\n                res += 1\n                # update the current interval\n                curr = e\n        \n        # return the result\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n /= 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # initialize\n        patches = 0\n        i = 0\n        num_sum = 0\n        \n        # iterate\n        while num_sum < n:\n            if i < len(nums) and nums[i] <= num_sum + 1:\n                num_sum += nums[i]\n                i += 1\n            else:\n                num_sum += num_sum + 1\n                patches += 1\n        \n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return '0'\n        \n        if numerator < 0 == denominator < 0:\n            sign = ''\n        elif numerator < 0:\n            sign = '-'\n        else:\n            sign = '+'\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        \n        quotient, remainder = divmod(numerator, denominator)\n        if remainder == 0:\n            return sign + str(quotient)\n        \n        seen = {remainder: 0}\n        res = [sign + str(quotient), '(']\n        \n        while remainder != 0:\n            remainder *= 10\n            quotient, remainder = divmod(remainder, denominator)\n            if remainder in seen:\n                res.insert(seen[remainder], ')')\n                break\n            seen[remainder] = len(res)\n            res.append(str(quotient))\n        \n        return ''.join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add any remaining nodes from the left half\n        if left:\n            curr.next = left\n        \n        # add any remaining nodes from the right half\n        if right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        \n        for i in range(len(envelopes)):\n            if not dp or dp[-1] < envelopes[i][1]:\n                dp.append(envelopes[i][1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = envelopes[i][1]\n        \n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        ## O(1) space\n        \n        ## O(m+n) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # create a slow and fast pointer\n        slow = dummy\n        fast = dummy\n        \n        # move the fast pointer n steps ahead\n        for i in range(n):\n            fast = fast.next\n        \n        # move both pointers at the same speed\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the nth node\n        slow.next = slow.next.next\n        \n        # return the modified list\n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) / len(machines)\n        ans = 0\n        curr = 0\n        for i in machines:\n            curr += i - avg\n            ans = max(ans, abs(curr))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        \n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.next.val)\n        root.right = self.sortedListToBST(slow.next.next)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0, curr = []):\n            if len(curr) == k:\n                output.append(curr[:])\n                return\n            for i in range(first, n):\n                curr.append(nums[i])\n                backtrack(i + 1, curr)\n                curr.pop()\n        \n        output = [[]]\n        n = len(nums)\n        for k in range(1, n + 1):\n            backtrack()\n        return output"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. remove all spaces\n        s = s.strip()\n        \n        # 2. check if it is a valid number\n        if not s or s[0] not in ('+', '-') and not s[0].isdigit():\n            return False\n        \n        # 3. check if it is a valid integer\n        if s[0] in ('+', '-') and len(s) > 1 and s[1] in ('+', '-') and s[1] != '.' and not s[1].isdigit():\n            return False\n        \n        # 4. check if it is a valid decimal\n        if s[0] not in ('+', '-') and s[0] != '.' and not s[0].isdigit():\n            return False\n        \n        # 5. check if it is a valid exponent\n        if s[0] in ('+', '-') and s[1] == 'e' and len(s) > 2 and s[2] in ('+', '-') and s[2] != '.' and not s[2].isdigit():\n            return False\n        \n        # 6. check if it is a valid exponent\n        if s[0] not in ('+', '-') and s[1] == 'e' and len(s) > 2 and s[2] in ('+', '-') and s[2] != '.' and not s[2].isdigit():\n            return False\n        \n        # 7. check if it is a valid integer\n        if s[0] not in ('+', '-') and s[1] == 'e' and len(s) > 2 and s[2] not in ('+', '-') and not s[2].isdigit():\n            return False\n        \n        # 8. check if it is a valid decimal\n        if s[0] not in ('+', '-') and s[1] not in ('+', '-') and s[1] != '.' and not s[1].isdigit():\n            return False\n        \n        # 9. check if it is a valid integer\n        if s[0] not in ('+', '-') and s[1] not in ('+', '-') and s[1] == '.' and len(s) > 2 and s[2] in ('+', '-') and s[2] != '.' and not s[2].isdigit():\n            return False\n        \n        # 10. check if it is a valid decimal\n        if s[0] not in ('+', '-') and s[1] not in ('+', '-') and s[1] == '.' and len(s) > 2 and s[2] not in ('+', '-') and not s[2].isdigit():\n            return False\n        \n        # 11. check if it is a valid integer\n        if s[0] not in ('+', '-') and s[1] not in ('+', '-') and s[1] == '.' and len(s) > 2 and s[2] not in ('+', '-') and s[2] != '.' and not s[2].isdigit():\n            return False\n        \n        # 12. check if it is a valid integer\n        if s[0] not in ('+', '-') and s[1] not in ('+', '-') and s[1] == '.' and len(s) > 2 and s[2] not in ('+', '-') and s[2] != '.' and s[2] != 'e':\n            return False\n        \n        # 13. check if it is a valid integer\n        if s[0] not in ('+', '-') and s[1] not in ('+', '-') and s[1] == '.' and len(s) > 2 and s[2] not in ('+', '-') and s[2] != '.' and s[2] == 'e':\n            return False\n        \n        # 14. check if it is a valid integer\n        if s[0] not in ('+', '-') and s[1] not in ('+', '-') and s[1] == '.' and len(s) > 2 and s[2] not in ('+', '-') and s[2] == 'e':\n            return False\n        \n        # 15. check if it is a valid integer\n        if"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X, XX, XXX, XL, L, XC, LX, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## 1st method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26 letters in the alphabet\n        ## 26"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i, j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i, j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            \n            if empty is None:\n                return True\n            \n            for i in range(1, 10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half with the second half\n        while prev:\n            if head.val != prev.val:\n                return False\n            head = head.next\n            prev = prev.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 0\n        right = num\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        \n        ans = [0, 1]\n        for i in range(2, n + 1):\n            if i % 2 == 0:\n                ans.append(ans[i // 2])\n            else:\n                ans.append(ans[i // 2] + 1)\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, node, path):\n            if node not in node.children:\n                return\n            if node.word:\n                res.append(node.word)\n            for x, y in [(i + 1, j), (i - 1, j), (i, j + 1), (i, j - 1)]:\n                if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] in node.children:\n                    dfs(x, y, node.children[board[x][y]], path + board[x][y])\n            node.word = path\n        \n        class TrieNode:\n            def __init__(self):\n                self.children = {}\n                self.word = None\n        \n        root = TrieNode()\n        for word in words:\n            node = root\n            for c in word:\n                if c not in node.children:\n                    node.children[c] = TrieNode()\n                node = node.children[c]\n            node.word = word\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, root, board[i][j])\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                box = [board[x][y] for x in (i, i + 1, i + 2) for y in (j, j + 1, j + 2)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a single string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert string to list\n        # 2. reverse the list\n        # 3. iterate through the list\n        # 4. multiply the number by 26^(index)\n        # 5. add the number to the sum\n        # 6. return the sum\n        \n        # 1. convert string to list\n        columnTitle = list(columnTitle)\n        \n        # 2. reverse the list\n        columnTitle.reverse()\n        \n        # 3. iterate through the list\n        sum = 0\n        for i in range(len(columnTitle)):\n            # 4. multiply the number by 26^(index)\n            sum += (26**i) * (ord(columnTitle[i]) - ord('A') + 1)\n            \n        # 5. return the sum\n        return sum"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        elif p == None or q == None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second.next:\n            first, second = first.next, second.next\n        \n        return first"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate over the pattern and words\n        for c, w in zip(pattern, words):\n            # if the word is not in the mapping, add it\n            if w not in mapping:\n                mapping[w] = c\n            # if the word is in the mapping, check if it matches the pattern\n            elif mapping[w] != c:\n                return False\n        \n        # if we reach here, all words are mapped correctly\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            # if all integers are used up\n            # we've a valid combination\n            if first == n:  \n                output.append(nums[:])\n            for i in range(first, n):\n                # place i-th integer first \n                # in the current permutation\n                nums[first], nums[i] = nums[i], nums[first]\n                # use next integers to complete the permutation\n                backtrack(first + 1)\n                # backtrack\n                nums[first], nums[i] = nums[i], nums[first]\n        \n        n = len(nums)\n        output = []\n        backtrack()\n        return output"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode()\n        # create a pointer to the dummy node\n        curr = dummy\n        # create a carry variable\n        carry = 0\n        # loop until both lists are empty\n        while l1 or l2 or carry:\n            # if l1 is empty, set sum to 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            # if l2 is empty, set sum to 0\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n            # if sum is greater than 10, set carry to 1\n            if sum > 10:\n                carry = 1\n                sum %= 10\n            # create a new node with the sum\n            curr.next = ListNode(sum)\n            # move to the next node\n            curr = curr.next\n            # if carry is 1, create a new node with a 1\n            if carry == 1:\n                curr.next = ListNode(1)\n            # move to the next node\n            curr = curr.next\n            # if l1 is empty, set sum to 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            # if l2 is empty, set sum to 0\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n            # if sum is greater than 10, set carry to 1\n            if sum > 10:\n                carry = 1\n                sum %= 10\n            # create a new node with the sum\n            curr.next = ListNode(sum)\n            # move to the next node\n            curr = curr.next\n            # if carry is 1, create a new node with a 1\n            if carry == 1:\n                curr.next = ListNode(1)\n            # move to the next node\n            curr = curr.next\n            # if l1 is empty, set sum to 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            # if l2 is empty, set sum to 0\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n            # if sum is greater than 10, set carry to 1\n            if sum > 10:\n                carry = 1\n                sum %= 10\n            # create a new node with the sum\n            curr.next = ListNode(sum)\n            # move to the next node\n            curr = curr.next\n            # if carry is 1, create a new node with a 1\n            if carry == 1:\n                curr.next = ListNode(1)\n            # move to the next node\n            curr = curr.next\n            # if l1 is empty, set sum to 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            # if l2 is empty, set sum to 0\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n            # if sum is greater than 10, set carry to 1\n            if sum > 10:\n                carry = 1\n                sum %= 10\n            # create a new node with the sum\n            curr.next = ListNode(sum)\n            # move to the next node\n            curr = curr.next\n            # if carry is 1, create a new node with a 1\n            if carry == 1:\n                curr.next = ListNode(1)\n            # move to the next node\n            curr = curr.next\n            # if l1 is empty, set sum to 0\n            if l1:\n                sum += l1.val\n                l1 = l1.next\n            # if l2 is empty, set sum to 0\n            if l2:\n                sum += l2.val\n                l2 = l2.next\n            # if sum is greater than 10, set carry to 1\n            if sum > 10:\n                carry = 1\n                sum %= 10\n            # create a new node with the sum\n            curr.next = ListNode(sum)\n            # move to the next node\n            curr = cur"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        ## 1. convert to binary\n        ## 2. flip the bits\n        ## 3. convert back to decimal\n        \n        ## 1. convert to binary\n        binary = bin(num)[2:]\n        \n        ## 2. flip the bits\n        binary = ''.join(['1' if x == '0' else '0' for x in binary])\n        \n        ## 3. convert back to decimal\n        return int(binary, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time: O(N^2)\n        # Space: O(N)\n        # 1. Sort the words by length\n        # 2. Iterate over the words, and for each word, check if it can be formed by concatenating any of the words in the dictionary\n        # 3. If the word can be formed, add it to the result\n        # 4. Return the result\n        \n        words.sort(key=len)\n        d = set(words)\n        res = []\n        \n        for word in words:\n            if self.dfs(word, d):\n                res.append(word)\n                \n        return res\n    \n    def dfs(self, word, d):\n        for i in range(1, len(word)):\n            prefix, suffix = word[:i], word[i:]\n            if prefix in d and suffix in d:\n                return True\n            if prefix in d and self.dfs(suffix, d):\n                return True\n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    count += backtrack(row + 1, cols | {col}, diag1 | {row + col}, diag2 | {row - col})\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.'] * n for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the list\n        # 2. if the list has less than 3 elements, return the max element\n        # 3. if the list has 3 elements, return the third element\n        # 4. if the list has more than 3 elements, return the third element\n        \n        nums = sorted(set(nums))\n        \n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}