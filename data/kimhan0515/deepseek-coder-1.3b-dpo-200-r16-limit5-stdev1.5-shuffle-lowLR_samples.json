{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(1, len(s) + 1):\n            for j in range(len(t), 0, -1):\n                if s[i - 1] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if the array is empty\n        if not nums:\n            return 1\n        \n        # 2. check if the array contains 0\n        if 0 in nums:\n            return 1\n        \n        # 3. check if the array contains negative numbers\n        if any(num < 0 for num in nums):\n            return 1\n        \n        # 4. check if the array contains numbers greater than the length of the array\n        if max(nums) > len(nums):\n            return len(nums) + 1\n        \n        # 5. check if the array contains duplicate numbers\n        if len(set(nums)) != len(nums):\n            return len(nums) + 1\n        \n        # 6. check if the array contains 1\n        if 1 not in nums:\n            return 1\n        \n        # 7. check if the array contains 2\n        if 2 not in nums:\n            return 2\n        \n        # 8. check if the array contains 3\n        if 3 not in nums:\n            return 3\n        \n        # 9. check if the array contains 4\n        if 4 not in nums:\n            return 4\n        \n        # 10. check if the array contains 5\n        if 5 not in nums:\n            return 5\n        \n        # 11. check if the array contains 6\n        if 6 not in nums:\n            return 6\n        \n        # 12. check if the array contains 7\n        if 7 not in nums:\n            return 7\n        \n        # 13. check if the array contains 8\n        if 8 not in nums:\n            return 8\n        \n        # 14. check if the array contains 9\n        if 9 not in nums:\n            return 9\n        \n        # 15. check if the array contains 10\n        if 10 not in nums:\n            return 10\n        \n        # 16. check if the array contains 11\n        if 11 not in nums:\n            return 11\n        \n        # 17. check if the array contains 12\n        if 12 not in nums:\n            return 12\n        \n        # 18. check if the array contains 13\n        if 13 not in nums:\n            return 13\n        \n        # 19. check if the array contains 14\n        if 14 not in nums:\n            return 14\n        \n        # 20. check if the array contains 15\n        if 15 not in nums:\n            return 15\n        \n        # 21. check if the array contains 16\n        if 16 not in nums:\n            return 16\n        \n        # 22. check if the array contains 17\n        if 17 not in nums:\n            return 17\n        \n        # 23. check if the array contains 18\n        if 18 not in nums:\n            return 18\n        \n        # 24. check if the array contains 19\n        if 19 not in nums:\n            return 19\n        \n        # 25. check if the array contains 20\n        if 20 not in nums:\n            return 20\n        \n        # 26. check if the array contains 21\n        if 21 not in nums:\n            return 21\n        \n        # 27. check if the array contains 22\n        if 22 not in nums:\n            return 22\n        \n        # 28. check if the array contains 23\n        if 23 not in nums:\n            return 23\n        \n        # 29. check if the array contains 24\n        if 24 not in nums:\n            return 24\n        \n        # 30. check if the array contains 25\n        if 25 not in nums:\n            return 25\n        \n        # 31. check if the array contains 26\n        if 26 not in nums:\n            return"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find the kth permutation\n        # 3. return the kth permutation\n        \n        # 1. generate all permutations\n        # 2. find"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # iterate through the array\n        for i, num in enumerate(numbers):\n            \n            # if the difference between the target and the current number is in the hashmap, return the indices\n            if target - num in hashmap:\n                return [hashmap[target - num] + 1, i + 1]\n            \n            # otherwise, add the current number to the hashmap\n            hashmap[num] = i\n            \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            for j in range(i, len(num)):\n                if j > i and num[i] == '0':\n                    break\n                curr = curr * 10 + int(num[j])\n                if op:\n                    backtrack(j + 1, curr, curr, res, op + '*' + num[j])\n                else:\n                    backtrack(j + 1, curr, curr, res, num[j])\n                    backtrack(j + 1, -curr, -curr, res, '-' + num[j])\n                    backtrack(j + 1, curr, -curr, res, num[j] + '/' + str(curr))\n                    backtrack(j + 1, -curr, curr, res, '-' + num[j] + '/' + str(curr))\n                curr = curr // 10\n        \n        res = []\n        backtrack(0, 0, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            left_sum = dfs(root.left, curr_sum * 10 + root.val)\n            right_sum = dfs(root.right, curr_sum * 10 + root.val)\n            \n            return left_sum + right_sum\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s.upper()\n        n = len(s)\n        if n <= k:\n            return s\n        if n % k == 0:\n            return s[:k]\n        else:\n            return s[:n % k] + '-' + s[n % k:]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. find the sum of gas and cost\n        ## 2. if the sum of gas is less than the sum of cost, return -1\n        ## 3. if the sum of gas is greater than the sum of cost, return 0\n        ## 4. if the sum of gas is equal to the sum of cost, return 0\n        ## 5. if the sum of gas is greater than the sum of cost, return 0\n        ## 6. if the sum of gas is less than the sum of cost, return 0\n        ## 7. if the sum of gas is greater than the sum of cost, return 0\n        ## 8. if the sum of gas is equal to the sum of cost, return 0\n        ## 9. if the sum of gas is greater than the sum of cost, return 0\n        ## 10. if the sum of gas is less than the sum of cost, return 0\n        ## 11. if the sum of gas is greater than the sum of cost, return 0\n        ## 12. if the sum of gas is equal to the sum of cost, return 0\n        ## 13. if the sum of gas is greater than the sum of cost, return 0\n        ## 14. if the sum of gas is less than the sum of cost, return 0\n        ## 15. if the sum of gas is greater than the sum of cost, return 0\n        ## 16. if the sum of gas is equal to the sum of cost, return 0\n        ## 17. if the sum of gas is greater than the sum of cost, return 0\n        ## 18. if the sum of gas is less than the sum of cost, return 0\n        ## 19. if the sum of gas is greater than the sum of cost, return 0\n        ## 20. if the sum of gas is equal to the sum of cost, return 0\n        ## 21. if the sum of gas is greater than the sum of cost, return 0\n        ## 22. if the sum of gas is less than the sum of cost, return 0\n        ## 23. if the sum of gas is greater than the sum of cost, return 0\n        ## 24. if the sum of gas is equal to the sum of cost, return 0\n        ## 25. if the sum of gas is greater than the sum of cost, return 0\n        ## 26. if the sum of gas is less than the sum of cost, return 0\n        ## 27. if the sum of gas is greater than the sum of cost, return 0\n        ## 28. if the sum of gas is equal to the sum of cost, return 0\n        ## 29. if the sum of gas is greater than the sum of cost, return 0\n        ## 30. if the sum of gas is less than the sum of cost, return 0\n        ## 31. if the sum of gas is greater than the sum of cost, return 0\n        ## 32. if the sum of gas is equal to the sum of cost, return 0\n        ## 33. if the sum of gas is greater than the sum of cost, return 0\n        ## 34. if the sum of gas is less than the sum of cost, return 0\n        ## 35. if the sum of gas is greater than the sum of cost, return 0\n        ## 36. if the sum of gas is equal to the sum of cost, return 0\n        ## 37. if the sum of gas is greater than the sum of cost, return 0\n        ## 38. if the sum of gas is less than the sum of cost, return 0\n        ## 39. if the sum of gas is greater than the sum of cost, return 0\n        ## 40. if the sum of gas is equal to the sum of cost, return 0\n        ## 41. if the sum of gas is greater than the sum of cost, return 0\n        ## 42. if the sum of gas is less than the sum of cost, return 0\n        ## 43. if the sum of gas is greater than the sum of cost, return 0\n        ## 44. if the sum"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return false if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if first character matches\n        first_match = bool(s) and p[0] in (s[0], '.')\n        \n        # if p is longer than s, return false\n        if len(p) > 1 and p[1] == '*':\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s)"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i, n in en.umerate(nums):\n                if len(out) < k:\n                    if n > out[-1]:\n                        out.append(n)\n                else:\n                    if n > out[-1]:\n                        out.pop()\n                        out.append(n)\n            return out\n        \n        def merge(nums1, nums2):\n            out = []\n            i, j = 0, 0\n            while i < len(nums1) and j < len(nums2):\n                if nums1[i] > nums2[j]:\n                    out.append(nums1[i])\n                    i += 1\n                else:\n                    out.append(nums2[j])\n                    j += 1\n            out.extend(nums1[i:])\n            out.extend(nums2[j:])\n            return out\n        \n        def find_max(nums, k):\n            out = []\n            for i in range(len(nums)):\n                if len(out) < k:\n                    out.append(nums[i])\n                else:\n                    if nums[i] > out[-1]:\n                        out.pop()\n                        out.append(nums[i])\n            return out\n        \n        m, n = len(nums1), len(nums2)\n        if m + n < k:\n            return []\n        if m < k:\n            return nums2\n        if n < k:\n            return nums1\n        if m == n == k:\n            return nums1\n        \n        out = []\n        for i in range(k):\n            if i <= m - k + n:\n                out.append(nums1[i])\n            else:\n                out.append(nums2[i - (m - k)])\n        return out"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                sum += i\n                if i ** 2 != num:\n                    sum += num / i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1, 1-dungeon[i][j])\n                elif i == m-1:\n                    dp[i][j] = max(1, dp[i][j+1]-dungeon[i][j])\n                elif j == n-1:\n                    dp[i][j] = max(1, dp[i+1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i+1][j], dp[i][j+1])-dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        l, r = 0, nums[-1] - nums[0]\n        while l < r:\n            m = (l + r) // 2\n            cnt = 0\n            j = 0\n            for i in range(n):\n                while j < n and nums[j] - nums[i] <= m:\n                    j += 1\n                cnt += j - i - 1\n            if cnt >= k:\n                r = m\n            else:\n                l = m + 1\n        return l"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        vowel_indices = []\n        for i in range(len(s_list)):\n            if s_list[i] in vowels:\n                vowel_indices.append(i)\n        \n        vowel_indices.reverse()\n        \n        for i in range(len(vowel_indices)):\n            s_list[vowel_indices[i]] = s[i]\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10\n        ##"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        # BFS\n        # Time:"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) > len(b):\n            b = '0' * (len(a) - len(b)) + b\n        elif len(b) > len(a):\n            a = '0' * (len(b) - len(a)) + a\n        \n        carry = 0\n        result = ''\n        for i in range(len(a) - 1, -1, -1):\n            if a[i] == '1' and b[i] == '1':\n                if carry == 1:\n                    result = '1' + result\n                else:\n                    result = '0' + result\n                carry = 1\n            elif a[i] == '0' and b[i] == '0':\n                if carry == 1:\n                    result = '1' + result\n                else:\n                    result = '0' + result\n                carry = 0\n            else:\n                if carry == 1:\n                    result = '0' + result\n                else:\n                    result = '1' + result\n                carry = 1\n        if carry == 1:\n            result = '1' + result\n        return result"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, find_left):\n            left, right = 0, len(nums) - 1\n            idx = -1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid] > target or (find_left and nums[mid] == target):\n                    right = mid - 1\n                    idx = mid\n                else:\n                    left = mid + 1\n            return idx\n        \n        left_idx = binary_search(nums, target, True)\n        right_idx = binary_search(nums, target, False)\n        \n        return [left_idx, right_idx]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = 0\n        \n        for i in range(n):\n            if i > cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) / 2:\n            return sum(max(prices[i+1] - prices[i] for i in range(len(prices) - 1)) - (max(prices[i+1] - prices[i] for i in range(len(prices) - 1)) % 2)\n        \n        dp = [[0] * (k + 1) for _ in range(len(prices))]\n        \n        for i in range(1, len(prices)):\n            for j in range(1, k + 1):\n                dp[i][j] = max(dp[i - 1][j] + (prices[i] - prices[i - 1] if prices[i] > prices[i - 1] else 0), dp[i - 1][j - 1] + prices[i] - prices[i - 1])\n        \n        return dp[-1][-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_list = []\n        if num < 0:\n            num = num + 2**32\n        \n        while num > 0:\n            hex_list.append(num % 16)\n            num = num // 16\n        \n        hex_list.reverse()\n        hex_str = ''\n        for i in hex_list:\n            if i < 10:\n                hex_str += str(i)\n            else:\n                hex_str += hex_dict[i]\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to store the frequency of each character\n        freq = {}\n        \n        # iterate through the string and update the frequency of each character\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # iterate through the string again and return the first character with frequency 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= nums[-1] - nums[0]:\n            return True\n        \n        if valueDiff == 0:\n            return False\n        \n        for i in range(len(nums)):\n            for j in range(i + 1, len(nums)):\n                if abs(nums[i] - nums[j]) <= valueDiff:\n                    if abs(i - j) <= indexDiff:\n                        return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = num1[::-1], num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            val = int(num1[i]) + int(num2[i]) + carry\n            carry = val // 10\n            res.append(str(val % 10))\n        \n        for i in range(len(num1), len(num2)):\n            val = int(num2[i]) + carry\n            carry = val // 10\n            res.append(str(val % 10))\n        \n        if carry:\n            res.append(str(carry))\n        \n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 2. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 3. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 4. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 5. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 6. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 7. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 8. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 9. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 10. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 11. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 12. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 13. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 14. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 15. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 16. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 17. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 18. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 19. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 20. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 21. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 22. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 23. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 24. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 25. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 26. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 27. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 28. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 29. \uc5f0\uc0b0\uc790 \uc6b0\uc120\ufffd"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # iterate over capital and profits\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w\n        # if k > 0, add profit to w\n        # else, add capital to w\n        # if capital > w, add profit to w\n        # else, add capital to w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if no such index exists, then the array is already sorted in descending order\n        if i == -1:\n            return nums.reverse()\n        \n        # find the first index j such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the subarray nums[i+1:]\n        nums[i+1:] = nums[i+1:][::-1]\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time: O(n)\n        # Space: O(n)\n        # Hashmap\n        # 1. Create a hashmap\n        # 2. Iterate through the array\n        # 3. If the current element is already in the hashmap, return True\n        # 4. Otherwise, add the element to the hashmap\n        # 5. If the length of the hashmap is greater than k, remove the element at the beginning of the array\n        # 6. Return False\n        \n        hashmap = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                return True\n            hashmap[nums[i]] = i\n            if len(hashmap) > k:\n                del hashmap[nums[i - k]]\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            level = []\n            for i in range(len(q)):\n                node = q.pop(0)\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for i in range(len(s2) + 1)] for j in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        \n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        ans = []\n        for word in words:\n            if word[0] in row1:\n                r = row1\n            elif word[0] in row2:\n                r = row2\n            else:\n                r = row3\n            for c in word:\n                if c not in r:\n                    break\n            else:\n                ans.append(word)\n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        for i in range(left - 1):\n            prev = curr\n            curr = curr.next\n        \n        prev.next = None\n        tail = curr\n        for i in range(right - left):\n            next = curr.next\n            curr.next = next.next\n            next.next = prev.next\n            prev.next = next\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome substring\n        # reverse the string and add it to the end of the original string\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome, then the original string is not a palindrome\n        # if the reversed string is a palindrome, then the original string is a palindrome\n        # if the reversed string is not a palindrome,"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        if len(t) == 0:\n            return \"\"\n        \n        if len(s) == 0:\n            return \"\"\n        \n        if len(s) == 1:\n            return s\n        \n        if len(s) == 2:\n            if s[0] == t[0] and s[1] == t[1]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 3:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 4:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 5:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 6:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 7:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 8:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 9:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 10:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 11:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10]:\n                return s\n            else:\n                return \"\"\n        \n        if len(s) == 12:\n            if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)-3):\n            if distance[i] >= distance[i+2] and distance[i+1] <= distance[i+3]:\n                return True\n            if i >= 3 and distance[i] == distance[i-2] and distance[i-1] == distance[i-3] and distance[i-3] + distance[i] >= distance[i-1]:\n                return True\n            if i >= 4 and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] == distance[i-3] and distance[i-2] + distance[i-4] >= distance[i-4]:\n                return True\n            if i >= 5 and distance[i] + distance[i-5] >= distance[i-3] and distance[i-1] + distance[i-4] >= distance[i-3] and distance[i-2] + distance[i-5] >= distance[i-4]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and add the max of odd and even\n        # 3. if the hashmap has more than 1 odd character, add 1 to the result\n        # 4. return the result\n        \n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        result = 0\n        for key in hashmap:\n            if hashmap[key] % 2 == 0:\n                result += hashmap[key]\n            else:\n                result += hashmap[key] - 1\n        \n        if len(s) > result:\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(postorder[-1])\n        \n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def bfs(start, end):\n            q = [start]\n            visited = set()\n            steps = 0\n            while q:\n                for _ in range(len(q)):\n                    x, y = q.pop(0)\n                    if (x, y) == end:\n                        return steps\n                    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < m and 0 <= ny < n and forest[nx][ny] > 0 and (nx, ny) not in visited:\n                            q.append((nx, ny))\n                            visited.add((nx, ny))\n                steps += 1\n            return -1\n        \n        m, n = len(forest), len(forest[0])\n        trees = [(x, y) for x in range(m) for y in range(n) if forest[x][y] > 1]\n        trees.sort(key=lambda x: forest[x[0]][x[1]])\n        steps = 0\n        for i in range(1, len(trees)):\n            steps += bfs(trees[i - 1], trees[i])\n            if steps < 0:\n                return steps\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1: Binary Search\n        # Time Complexity: O(log(n))\n        # Space Complexity: O(1)\n        # 1. Find the number of complete rows\n        # 2. Find the number of coins in the last row\n        # 3. Find the number of coins in the first row\n        # 4. Find the number of coins in the second row\n        # 5. Find the number of coins in the third row\n        # 6. Find the number of coins in the fourth row\n        # 7. Find the number of coins in the fifth row\n        # 8. Find the number of coins in the sixth row\n        # 9. Find the number of coins in the seventh row\n        # 10. Find the number of coins in the eighth row\n        # 11. Find the number of coins in the ninth row\n        # 12. Find the number of coins in the tenth row\n        # 13. Find the number of coins in the eleventh row\n        # 14. Find the number of coins in the twelfth row\n        # 15. Find the number of coins in the thirteenth row\n        # 16. Find the number of coins in the fourteenth row\n        # 17. Find the number of coins in the fifteenth row\n        # 18. Find the number of coins in the sixteenth row\n        # 19. Find the number of coins in the seventeenth row\n        # 20. Find the number of coins in the eighteenth row\n        # 21. Find the number of coins in the nineteenth row\n        # 22. Find the number of coins in the twentieth row\n        # 23. Find the number of coins in the twenty-first row\n        # 24. Find the number of coins in the twenty-second row\n        # 25. Find the number of coins in the twenty-third row\n        # 26. Find the number of coins in the twenty-fourth row\n        # 27. Find the number of coins in the twenty-fifth row\n        # 28. Find the number of coins in the twenty-sixth row\n        # 29. Find the number of coins in the twenty-seventh row\n        # 30. Find the number of coins in the twenty-eighth row\n        # 31. Find the number of coins in the twenty-ninth row\n        # 32. Find the number of coins in the thirty-first row\n        # 33. Find the number of coins in the thirty-second row\n        # 34. Find the number of coins in the thirty-third row\n        # 35. Find the number of coins in the thirty-fourth row\n        # 36. Find the number of coins in the thirty-fifth row\n        # 37. Find the number of coins in the thirty-sixth row\n        # 38. Find the number of coins in the thirty-seventh row\n        # 39. Find the number of coins in the thirty-eighth row\n        # 40. Find the number of coins in the thirty-ninth row\n        # 41. Find the number of coins in the forty-first row\n        # 42. Find the number of coins in the forty-second row\n        # 43. Find the number of coins in the forty-third row\n        # 44. Find the number of coins in the forty-fourth row\n        # 45. Find the number of coins in the forty-fifth row\n        # 46. Find the number of coins in the forty-sixth row\n        # 47. Find the number of coins in the forty-seventh row\n        # 48. Find the number of coins in the forty-eighth row\n        # 49. Find the number of coins in the forty-ninth row\n        # 50. Find the number of coins in the fifty-first row\n        # 51. Find the number of coins in the fifty-second row\n        # 52. Find the number of coins in the fifty-third row\n        # 53. Find the number of coins in the fifty-fourth row\n        # 54. Find the number of coins in the fifty-fifth row\n        # 55. Find the number of coins in the fifty-sixth row\n        # 56. Find the number of coins"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0,1]\n        for i in range(1,n):\n            res.append(res[i]+2**i)\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, lower, upper):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return helper(node.left, lower, node.val) and helper(node.right, node.val, upper)\n        \n        return helper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is smaller than the first element in the list, insert it at the beginning\n        if newInterval[0] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if the new interval is larger than the last element in the list, insert it at the end\n        if newInterval[1] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        # if the new interval overlaps with the first element in the list, merge the new interval with the first element\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        \n        # if the new interval overlaps with the last element in the list, merge the new interval with the last element\n        if newInterval[0] >= intervals[-1][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals[:-1] + [newInterval]\n        \n        # if the new interval overlaps with the middle elements in the list, merge the new interval with the middle elements\n        for i in range(len(intervals)):\n            if newInterval[0] >= intervals[i][0] and newInterval[1] <= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i+1:]\n        \n        # if the new interval does not overlap with any element in the list, insert it at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] < intervals[i][0] and newInterval[1] > intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any element in the list, insert it at the end\n        return intervals + [newInterval]"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of each list\n        # 2. find the min and max of the range\n        # 3. find the min and max of the range\n        # 4. find the min and max of the range\n        # 5. find the min and max of the range\n        # 6. find the min and max of the range\n        # 7. find the min and max of the range\n        # 8. find the min and max of the range\n        # 9. find the min and max of the range\n        # 10. find the min and max of the range\n        # 11. find the min and max of the range\n        # 12. find the min and max of the range\n        # 13. find the min and max of the range\n        # 14. find the min and max of the range\n        # 15. find the min and max of the range\n        # 16. find the min and max of the range\n        # 17. find the min and max of the range\n        # 18. find the min and max of the range\n        # 19. find the min and max of the range\n        # 20. find the min and max of the range\n        # 21. find the min and max of the range\n        # 22. find the min and max of the range\n        # 23. find the min and max of the range\n        # 24. find the min and max of the range\n        # 25. find the min and max of the range\n        # 26. find the min and max of the range\n        # 27. find the min and max of the range\n        # 28. find the min and max of the range\n        # 29. find the min and max of the range\n        # 30. find the min and max of the range\n        # 31. find the min and max of the range\n        # 32. find the min and max of the range\n        # 33. find the min and max of the range\n        # 34. find the min and max of the range\n        # 35. find the min and max of the range\n        # 36. find the min and max of the range\n        # 37. find the min and max of the range\n        # 38. find the min and max of the range\n        # 39. find the min and max of the range\n        # 40. find the min and max of the range\n        # 41. find the min and max of the range\n        # 42. find the min and max of the range\n        # 43. find the min and max of the range\n        # 44. find the min and max of the range\n        # 45. find the min and max of the range\n        # 46. find the min and max of the range\n        # 47. find the min and max of the range\n        # 48. find the min and max of the range\n        # 49. find the min and max of the range\n        # 50. find the min and max of the range\n        # 51. find the min and max of the range\n        # 52. find the min and max of the range\n        # 53. find the min and max of the range\n        # 54. find the min and max of the range\n        # 55. find the min and max of the range\n        # 56. find the min and max of the range\n        # 57. find the min and max of the range\n        # 58. find the min and max of the range\n        # 59. find the min and max of the range\n        # 60. find the min and max of the range\n        # 61. find the min and max of the range\n        # 62. find the min and max of the range\n        # 63. find the min and max of the range\n        # 64. find the min and max of the range\n        # 65. find the min and max of the range\n        # 66. find the min and max of the range\n        # 67. find the min and max of the range\n        # 68. find the min and max of the range\n        # 69. find the min and max of the"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 pig can test 1 bucket\n        # 2. 1 pig can test 2 buckets\n        # 3. 1 pig can test 4 buckets\n        # 4. 1 pig can test 8 buckets\n        # 5. 1 pig can test 16 buckets\n        # 6. 1 pig can test 32 buckets\n        # 7. 1 pig can test 64 buckets\n        # 8. 1 pig can test 128 buckets\n        # 9. 1 pig can test 256 buckets\n        # 10. 1 pig can test 512 buckets\n        # 11. 1 pig can test 1024 buckets\n        # 12. 1 pig can test 2048 buckets\n        # 13. 1 pig can test 4096 buckets\n        # 14. 1 pig can test 8192 buckets\n        # 15. 1 pig can test 16384 buckets\n        # 16. 1 pig can test 32768 buckets\n        # 17. 1 pig can test 65536 buckets\n        # 18. 1 pig can test 131072 buckets\n        # 19. 1 pig can test 262144 buckets\n        # 20. 1 pig can test 524288 buckets\n        # 21. 1 pig can test 1048576 buckets\n        # 22. 1 pig can test 2097152 buckets\n        # 23. 1 pig can test 4194304 buckets\n        # 24. 1 pig can test 8388608 buckets\n        # 25. 1 pig can test 16777216 buckets\n        # 26. 1 pig can test 33554432 buckets\n        # 27. 1 pig can test 67108864 buckets\n        # 28. 1 pig can test 134217728 buckets\n        # 29. 1 pig can test 268435456 buckets\n        # 30. 1 pig can test 536870912 buckets\n        # 31. 1 pig can test 1073741824 buckets\n        # 32. 1 pig can test 2147483648 buckets\n        # 33. 1 pig can test 4294967296 buckets\n        # 34. 1 pig can test 8589934592 buckets\n        # 35. 1 pig can test 17179869184 buckets\n        # 36. 1 pig can test 34359738368 buckets\n        # 37. 1 pig can test 68719476736 buckets\n        # 38. 1 pig can test 137438953472 buckets\n        # 39. 1 pig can test 274877906944 buckets\n        # 40. 1 pig can test 549755813888 buckets\n        # 41. 1 pig can test 1099511627776 buckets\n        # 42. 1 pig can test 2199023255552 buckets\n        # 43. 1 pig can test 4398046511104 buckets\n        # 44. 1 pig can test 8796093022208 buckets\n        # 45. 1 pig can test 17592186044416 buckets\n        # 46. 1 pig can test 35184372088832 buckets\n        # 47. 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in visited:\n                    heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                    visited.add((nx, ny))\n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. DP\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] %= 10\n            \n        res = [str(x) for x in res]\n        \n        while len(res) > 1 and res[-1] == '0':\n            res.pop()\n            \n        return ''.join(res[::-1])"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max profit by buying and selling the stock\n        # 2. find the max profit by buying and selling the stock\n        # 3. find the max profit by buying and selling the stock\n        # 4. find the max profit by buying and selling the stock\n        # 5. find the max profit by buying and selling the stock\n        # 6. find the max profit by buying and selling the stock\n        # 7. find the max profit by buying and selling the stock\n        # 8. find the max profit by buying and selling the stock\n        # 9. find the max profit by buying and selling the stock\n        # 10. find the max profit by buying and selling the stock\n        # 11. find the max profit by buying and selling the stock\n        # 12. find the max profit by buying and selling the stock\n        # 13. find the max profit by buying and selling the stock\n        # 14. find the max profit by buying and selling the stock\n        # 15. find the max profit by buying and selling the stock\n        # 16. find the max profit by buying and selling the stock\n        # 17. find the max profit by buying and selling the stock\n        # 18. find the max profit by buying and selling the stock\n        # 19. find the max profit by buying and selling the stock\n        # 20. find the max profit by buying and selling the stock\n        # 21. find the max profit by buying and selling the stock\n        # 22. find the max profit by buying and selling the stock\n        # 23. find the max profit by buying and selling the stock\n        # 24. find the max profit by buying and selling the stock\n        # 25. find the max profit by buying and selling the stock\n        # 26. find the max profit by buying and selling the stock\n        # 27. find the max profit by buying and selling the stock\n        # 28. find the max profit by buying and selling the stock\n        # 29. find the max profit by buying and selling the stock\n        # 30. find the max profit by buying and selling the stock\n        # 31. find the max profit by buying and selling the stock\n        # 32. find the max profit by buying and selling the stock\n        # 33. find the max profit by buying and selling the stock\n        # 34. find the max profit by buying and selling the stock\n        # 35. find the max profit by buying and selling the stock\n        # 36. find the max profit by buying and selling the stock\n        # 37. find the max profit by buying and selling the stock\n        # 38. find the max profit by buying and selling the stock\n        # 39. find the max profit by buying and selling the stock\n        # 40. find the max profit by buying and selling the stock\n        # 41. find the max profit by buying and selling the stock\n        # 42. find the max profit by buying and selling the stock\n        # 43. find the max profit by buying and selling the stock\n        # 44. find the max profit by buying and selling the stock\n        # 45. find the max profit by buying and selling the stock\n        # 46. find the max profit by buying and selling the stock\n        # 47. find the max profit by buying and selling the stock\n        # 48. find the max profit by buying and selling the stock\n        # 49. find the max profit by buying and selling the stock\n        # 50. find the max profit by buying and selling the stock\n        # 51. find the max profit by buying and selling the stock\n        # 52. find the max profit by buying and selling the stock\n        # 53. find the max profit by buying and selling the stock\n        # 54. find the max profit by buying and selling the stock\n        # 55. find the max profit by buying and selling the stock\n        # 56. find the max profit by buying and selling the stock\n        # 57. find the max profit by buying and selling the stock\n        # 58. find the max profit by buying and selling the stock\n        # 59. find the max profit by buying and selling the stock\n        # 60. find the max profit by buying and selling the stock\n        # 61. find the max profit by buying and"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        \n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word.istitle():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Brute force\n        ## Time: O(n^2)\n        ## Space: O(1)\n        ## TLE\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ## 10/10 cases passed (N/A)\n        ##"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the left and right parentheses\n        # 2. remove the left and right parentheses\n        # 3. find the valid parentheses\n        # 4. remove the invalid parentheses\n        # 5. repeat 2 and 3 until the left and right parentheses are removed\n        # 6. return the valid parentheses\n        \n        # 1. find the left and right parentheses\n        left_count = 0\n        right_count = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                left_count += 1\n            elif s[i] == ')':\n                if left_count > 0:\n                    left_count -= 1\n                else:\n                    right_count += 1\n        \n        # 2. remove the left and right parentheses\n        s = s.replace('()', '')\n        \n        # 3. find the valid parentheses\n        valid_parentheses = []\n        for i in range(len(s)):\n            if s[i] == '(':\n                left_count -= 1\n            elif s[i] == ')':\n                right_count -= 1\n            if left_count == 0 and right_count == 0:\n                valid_parentheses.append(s[:i+1] + s[i+1:])\n        \n        # 4. remove the invalid parentheses\n        for i in range(len(valid_parentheses)):\n            valid_parentheses[i] = valid_parentheses[i].replace('()', '')\n        \n        # 5. repeat 2 and 3 until the left and right parentheses are removed\n        while left_count > 0 or right_count > 0:\n            new_valid_parentheses = []\n            for i in range(len(valid_parentheses)):\n                for j in range(len(valid_parentheses[i])):\n                    if valid_parentheses[i][j] == '(':\n                        new_valid_parentheses.append(valid_parentheses[i][:j] + valid_parentheses[i][j+1:])\n            valid_parentheses = new_valid_parentheses\n        \n        # 6. return the valid parentheses\n        return valid_parentheses"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Time Complexity: O(nlogk)\n        # Space Complexity: O(1)\n        \n        # Merge k sorted linked lists\n        # Use a min heap to store the head of each linked list\n        # Iterate through the heap, and merge the head of each linked list\n        # Return the head of the merged linked list\n        \n        # Initialize the heap\n        heap = []\n        \n        # Iterate through the linked lists\n        for i in range(len(lists)):\n            # If the linked list is not empty, add its head to the heap\n            if lists[i]:\n                heapq.heappush(heap, (lists[i].val, i))\n        \n        # Initialize the dummy head\n        dummy = ListNode()\n        curr = dummy\n        \n        # Iterate through the heap\n        while heap:\n            # Get the head of the linked list with the smallest value\n            val, idx = heapq.heappop(heap)\n            \n            # Add the head of the linked list to the merged linked list\n            curr.next = ListNode(val)\n            curr = curr.next\n            \n            # If the next node is not empty, add its head to the heap\n            if lists[idx].next:\n                heapq.heappush(heap, (lists[idx].next.val, idx))\n                lists[idx] = lists[idx].next\n        \n        # Return the merged linked list\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def is_palindrome(word):\n            return word == word[::-1]\n        \n        def get_index(word):\n            return {word: i for i, word in enumerate(words)}\n        \n        index = get_index(words)\n        result = []\n        \n        for i, word in enumerate(words):\n            for j in range(len(word) + 1):\n                prefix = word[:j]\n                suffix = word[j:]\n                if is_palindrome(prefix):\n                    rev_suffix = suffix[::-1]\n                    if rev_suffix in index and index[rev_suffix] != i:\n                        result.append([i, index[rev_suffix]])\n                if j != len(word) and is_palindrome(suffix):\n                    rev_prefix = prefix[::-1]\n                    if rev_prefix in index and index[rev_prefix] != i:\n                        result.append([index[rev_prefix], i])\n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def spread(isInfected):\n            m, n = len(isInfected), len(isInfected[0])\n            count = 0\n            while True:\n                infected = set()\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.add((i, j))\n                if not infected:\n                    break\n                for i, j in infected:\n                    isInfected[i][j] = 2\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                                if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 0:\n                                    isInfected[ni][nj] = 1\n                count += 1\n            return count\n        \n        return spread(isInfected) + spread(list(zip(*isInfected)))"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        max_len = 1\n        \n        for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, ni, nj))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 1:\n            return 0\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += (n // i) * i + max(0, min(i, n % i))\n            i *= 10\n        \n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        # If dp[len(s)] is True, then we have a valid word break.\n        # Construct the list of valid word breaks.\n        if dp[len(s)]:\n            res = []\n            self.dfs(s, wordDict, 0, '', res)\n            return res\n        else:\n            return []\n        \n    def dfs(self, s, wordDict, start, path, res):\n        if start == len(s):\n            res.append(path[1:])\n            return\n        \n        for i in range(start + 1, len(s) + 1):\n            if s[start:i] in wordDict:\n                self.dfs(s, wordDict, i, path + ' ' + s[start:i], res)"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_nodes = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_nodes.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                level_nodes.reverse()\n            result.append(level_nodes)\n            level += 1\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(n):\n            if n == 0:\n                return []\n            if n == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            if n == 2:\n                return ['0:03','0:05','0:06','0:09','0:15','0:30','0:60','1:01','2:01','4:01','8:01']\n            if n == 3:\n                return ['0:04','0:07','0:08','0:11','0:17','0:34','0:68','1:02','2:02','4:02','8:02']\n            if n == 4:\n                return ['0:05','0:09','0:17','0:33','0:65','0:12','0:18','0:35','0:69','1:03','2:03','4:03','8:03']\n            if n == 5:\n                return ['0:06','0:10','0:18','0:34','0:66','0:13','0:19','0:36','0:70','1:04','2:04','4:04','8:04']\n            if n == 6:\n                return ['0:07','0:11','0:19','0:35','0:67','0:14','0:20','0:37','0:71','1:05','2:05','4:05','8:05']\n            if n == 7:\n                return ['0:08','0:12','0:20','0:36','0:68','0:15','0:21','0:38','0:72','1:06','2:06','4:06','8:06']\n            if n == 8:\n                return ['0:09','0:13','0:22','0:37','0:69','0:16','0:23','0:39','0:73','1:07','2:07','4:07','8:07']\n            if n == 9:\n                return ['0:10','0:14','0:24','0:38','0:70','0:17','0:25','0:40','0:74','1:08','2:08','4:08','8:08']\n            if n == 10:\n                return ['0:11','0:15','0:25','0:41','0:75','0:18','0:26','0:42','0:76','1:09','2:09','4:09','8:09']\n            if n == 11:\n                return ['0:12','0:16','0:26','0:43','0:77','0:19','0:27','0:44','0:78','1:10','2:10','4:10','8:10']\n            if n == 12:\n                return ['0:13','0:17','0:27','0:45','0:79','0:20','0:28','0:46','0:80','1:11','2:11','4:11','8:11']\n            if n == 13:\n                return ['0:14','0:18','0:28','0:47','0:81','0:21','0:29','0:48','0:82','1:12','2:12','4:12','8:12']\n            if n == 14:\n                return ['0:15','0:19','0:29','0:49','0:83','0:22','0"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def dfs(node):\n            if not node:\n                return 0\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            left = max(left, 0)\n            right = max(right, 0)\n            \n            self.max_sum = max(self.max_sum, left + right + node.val)\n            \n            return max(left, right) + node.val\n        \n        dfs(root)\n        \n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if (i, j) not in seen:\n                seen.add((i, j))\n                ans += h\n                for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                    if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                        heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. Initialize the result list\n        result = []\n        \n        # 2. Initialize the window\n        window = nums[:k]\n        \n        # 3. Calculate the median\n        median = self.calculateMedian(window)\n        \n        # 4. Append the median to the result list\n        result.append(median)\n        \n        # 5. Iterate over the remaining elements\n        for i in range(k, len(nums)):\n            # 6. Remove the first element from the window\n            window.pop(0)\n            \n            # 7. Add the new element to the window\n            window.append(nums[i])\n            \n            # 8. Calculate the median\n            median = self.calculateMedian(window)\n            \n            # 9. Append the median to the result list\n            result.append(median)\n        \n        # 10. Return the result list\n        return result\n    \n    def calculateMedian(self, window):\n        # 1. Sort the window\n        window.sort()\n        \n        # 2. Calculate the median\n        if len(window) % 2 == 0:\n            # 3. If the window is even, return the mean of the two middle elements\n            return (window[len(window) // 2] + window[len(window) // 2 - 1]) / 2.0\n        else:\n            # 4. If the window is odd, return the middle element\n            return window[len(window) // 2]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k % length - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = head\n        for i in range(length - k % length):\n            new_tail = new_tail.next\n        \n        # connect the new tail to the new head\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        while n % 5 == 0:\n            n = n / 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        \n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                res = max(res, self.maxSubarray(sums, k))\n                if res == k:\n                    return k\n        \n        for r in range(m):\n            sums = [0] * n\n            for c in range(r, m):\n                for i in range(n):\n                    sums[i] += matrix[c][i]\n                res = max(res, self.maxSubarray(sums, k))\n                if res == k:\n                    return k\n        \n        return res\n    \n    def maxSubarray(self, nums, k):\n        s = 0\n        d = {0: -1}\n        res = 0\n        for i, n in en.umerate(nums):\n            s += n\n            if s - k in d:\n                res = max(res, s - k)\n            if s not in d:\n                d[s] = i\n            res = max(res, s)\n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        \n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == -214748"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i,j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board)-1 or j == 0 or j == len(board[0])-1:\n                    dfs(i,j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the difference between the target and the current number is in the dictionary\n        # if it is, return the index of the current number and the index of the difference\n        # if it is not, add the current number to the dictionary\n        \n        # create a dictionary\n        nums_dict = {}\n        \n        # iterate through the list\n        for i, num in enumerate(nums):\n            \n            # check if the difference between the target and the current number is in the dictionary\n            if target - num in nums_dict:\n                \n                # if it is, return the index of the current number and the index of the difference\n                return [nums_dict[target - num], i]\n            \n            # if it is not, add the current number to the dictionary\n            nums_dict[num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            new_cards = [a + b] + [c for c in cards if c != a and c != b]\n                        elif op == '-':\n                            new_cards = [a - b] + [c for c in cards if c != a and c != b]\n                        elif op == '*':\n                            new_cards = [a * b] + [c for c in cards if c != a and c != b]\n                        else:\n                            if b == 0:\n                                continue\n                            new_cards = [float(a) / b] + [c for c in cards if c != a and c != b]\n                        if dfs(new_cards, 24):\n                            return True\n            return False\n        \n        return dfs(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if not s:\n            return False\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        if p[0] == s[0] or p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in tickets:\n            graph[from_city].append(to_city)\n        \n        # sort the graph\n        for city in graph:\n            graph[city].sort(reverse=True)\n        \n        # dfs\n        res = []\n        def dfs(city):\n            while graph[city]:\n                dfs(graph[city].pop())\n            res.append(city)\n        \n        dfs('JFK')\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # initialize the current height\n        curr_height = 0\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the current building is taller than the previous building\n            if building[2] > curr_height:\n                # add the current building to the result\n                result.append([building[0], building[2]])\n                # update the current height\n                curr_height = building[2]\n            # if the current building is shorter than the previous building\n            else:\n                # remove the previous building from the result\n                result.pop()\n                # update the current height\n                curr_height = building[2]\n        \n        # return the result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # return the string\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] ="}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        # 1000 - 999\n        # 1000000 - 999999\n        # 1000000000 - 9223372036854775807\n        # 1000000000000 - 9223372036854775807\n        # 1000000000000000 - 9223372036854775807\n        # 1000000000000000000 - 9223372036854775807\n        # 1000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000000000000 -"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6] - dp[i-k-1][j-7]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6] - dp[i-k-1][j-7] + dp[i-k-1][j-8]\n        # dp[i][j] = dp[i][j-1] + dp[i-k-1][j] - dp[i-k-1][j-1] + dp[i-k-1][j-2] - dp[i-k-1][j-3] + dp[i-k-1][j-4] - dp[i-k-1][j-5] + dp[i-k-1][j-6] - dp[i-k-1][j-7] + dp[i"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        p1 = dummy1\n        p2 = dummy2\n        \n        while head:\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            else:\n                p2.next = head\n                p2 = p2.next\n            head = head.next\n        \n        p1.next = dummy2.next\n        p2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. build a graph\n        # 2. find the cycle\n        # 3. find the node that has more than 1 parent\n        # 4. find the edge that connects the node with more than 1 parent\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n        \n        # find the cycle\n        visited = set()\n        parent = set()\n        for u in graph:\n            if u not in visited:\n                if self.dfs(u, -1, graph, visited, parent):\n                    return [u, parent.pop()]\n        \n        # find the node that has more than 1 parent\n        for u in graph:\n            if len(graph[u]) > 1:\n                return [u, graph[u][0]]\n        \n        return []\n        \n    def dfs(self, u, parent, graph, visited, parent):\n        visited.add(u)\n        for v in graph[u]:\n            if v not in visited:\n                if self.dfs(v, u, graph, visited, parent):\n                    return True\n            elif v != parent:\n                parent.add(v)\n                return True\n        return False"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                res.append(nums[:])\n            else:\n                for i in range(first, n):\n                    if nums[i] not in used:\n                        used.add(nums[i])\n                        nums[first], nums[i] = nums[i], nums[first]\n                        backtrack(first + 1)\n                        nums[first], nums[i] = nums[i], nums[first]\n        \n        n = len(nums)\n        res = []\n        used = set()\n        backtrack()\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(map(int, str(num)))\n        return num"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        ## 2 ^ 2 = 0\n        ## 2 ^ 1 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 11:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 12:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 13:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 14:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 15:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 16:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 17:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 18:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 19:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 20:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 21:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 22:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 23:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 24:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 25:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 26:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 27:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j in range(n):\n                for k in range(n):\n                    dp[i][j][k] = dp[i - 1][j][k] + grid[i][j]\n                    if j > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k] + grid[i][j])\n                    if k > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1] + grid[i][j])\n                    if j > 0 and k > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k - 1] + grid[i][j])\n        return max(dp[n - 1][n - 1])"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # edge case\n        if target < nums[0]:\n            return 0\n        if target > nums[-1]:\n            return len(nums)\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        if n == 2:\n            return '11'\n        \n        if n == 3:\n            return '21'\n        \n        if n == 4:\n            return '1211'\n        \n        if n == 5:\n            return '111221'\n        \n        if n == 6:\n            return '312211'\n        \n        if n == 7:\n            return '13112221'\n        \n        if n == 8:\n            return '1113213211'\n        \n        if n == 9:\n            return '31131211131221'\n        \n        if n == 10:\n            return '13211311123113112211'\n        \n        if n == 11:\n            return '11131221133112132132221'\n        \n        if n == 12:\n            return '3113112221232132211311121312211'\n        \n        if n == 13:\n            return '13211311123113112211231131221131211'\n        \n        if n == 14:\n            return '11131221133112132132221231131221123113112221'\n        \n        if n == 15:\n            return '31131122212321322113111213122112311312211312112211'\n        \n        if n == 16:\n            return '1321131112311311221123113122112311311222123213221131112131221123113122113121122112311312211312112211'\n        \n        if n == 17:\n            return '111312211331121321322212311312211231131122212321322113111213122112311312211312112211231131221131211221123113122113121122112311312211312112211'\n        \n        if n == 18:\n            return '3113112221232132211311121312211231131221131211221123113122113121122112311312211312112211231131221131211221123113122113121122112311312211312112211'\n        \n        if n == 19:\n            return '13211311123113112211231131221123113112221232132211311121312211231131221131211221123113122113121122112311312211"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max sum\n        # find the min sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum\n        # binary search the min sum\n        # find the mid sum\n        # binary search the mid sum\n        # find the max sum\n        # binary search the max sum\n        # find the min sum"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if the target is in the first half of the array, search in the first half\n        if nums[pivot] <= target <= nums[-1]:\n            return self.binary_search(nums, target, 0, pivot)\n        \n        # if the target is in the second half of the array, search in the second half\n        else:\n            return self.binary_search(nums, target, pivot, len(nums) - 1)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        if len(digits) == 1:\n            return list(map(lambda x: x, list(map(lambda x: chr(ord('a') + x - 2), list(map(lambda x: int(digits[0]) - 2, range(0, 9)))))))\n        \n        res = []\n        for i in range(0, len(digits)):\n            if i == 0:\n                res = list(map(lambda x: x, list(map(lambda x: chr(ord('a') + x - 2), list(map(lambda x: int(digits[0]) - 2, range(0, 9)))))))\n            else:\n                tmp = []\n                for j in range(0, len(res)):\n                    for k in range(0, len(map(lambda x: chr(ord('a') + x - 2), list(map(lambda x: int(digits[i]) - 2, range(0, 9)))))):\n                        tmp.append(res[j] + map(lambda x: chr(ord('a') + x - 2), list(map(lambda x: int(digits[i]) - 2, range(0, 9))))[k])\n                res = tmp\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the current index\n        current_index = 0\n        \n        # initialize the current target\n        current_target = target\n        \n        # loop through the candidates\n        while current_index < len(candidates):\n            # if the current sum is less than the target\n            if current_sum < current_target:\n                # add the current candidate to the current combination\n                current.append(candidates[current_index])\n                \n                # update the current sum\n                current_sum += candidates[current_index]\n                \n                # recursively call the function with the current combination and the current sum\n                self.find_combination(candidates, current, current_sum, current_index, current_target, result)\n                \n                # remove the last element from the current combination\n                current.pop()\n                \n                # update the current sum\n                current_sum -= candidates[current_index]\n                \n                # increment the current index\n                current_index += 1\n            else:\n                # if the current sum is equal to the target\n                if current_sum == current_target:\n                    # add the current combination to the result\n                    result.append(current[:])\n                break\n        \n        return result\n    \n    def find_combination(self, candidates, current, current_sum, current_index, current_target, result):\n        # loop through the candidates\n        for i in range(current_index, len(candidates)):\n            # if the current sum is less than the target\n            if current_sum + candidates[i] <= current_target:\n                # add the current candidate to the current combination\n                current.append(candidates[i])\n                \n                # recursively call the function with the current combination and the current sum\n                self.find_combination(candidates, current, current_sum + candidates[i], i, current_target, result)\n                \n                # remove the last element from the current combination\n                current.pop()\n\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022-09-24 15:54:00\n# 2022"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of the string\n        length = len(n)\n        \n        # 2. get the left and right part of the string\n        left = n[:length//2]\n        right = n[length//2:]\n        \n        # 3. get the list of all possible palindromes\n        palindromes = [int(left + right), int(left + \"0\" + right[::-1]), int(left + \"1\" + right[1:]), int(left + \"9\" + right[1:])]\n        \n        # 4. get the closest palindrome\n        closest = min(palindromes, key=lambda x: abs(x - int(n)))\n        \n        # 5. return the closest palindrome\n        return str(closest)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n-1, 0, n-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            \n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum product and the current product\n        max_product = nums[0]\n        curr_product = nums[0]\n        \n        # Iterate through the array\n        for i in range(1, len(nums)):\n            # If the current number is positive, update the current product\n            if nums[i] > 0:\n                curr_product *= nums[i]\n            # If the current number is zero, reset the current product\n            elif nums[i] == 0:\n                curr_product = 1\n            # If the current number is negative, update the maximum product\n            else:\n                max_product = max(max_product, curr_product)\n                curr_product = max(nums[i], curr_product * nums[i])\n        \n        # Return the maximum product\n        return max_product"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. build a hashmap\n        # 2. iterate through the stones\n        # 3. if the stone is 0, return False\n        # 4. if the stone is the last stone, return True\n        # 5. if the stone is not in the hashmap, return False\n        # 6. if the stone is in the hashmap, check if the stone is the last stone\n        # 7. if the stone is not the last stone, check if the stone is the last stone\n        # 8. if the stone is the last stone, return True\n        # 9. if the stone is not the last stone, check if the stone is the last stone\n        # 10. if the stone is the last stone, return True\n        # 11. if the stone is not the last stone, check if the stone is the last stone\n        # 12. if the stone is the last stone, return True\n        # 13. if the stone is not the last stone, check if the stone is the last stone\n        # 14. if the stone is the last stone, return True\n        # 15. if the stone is not the last stone, check if the stone is the last stone\n        # 16. if the stone is the last stone, return True\n        # 17. if the stone is not the last stone, check if the stone is the last stone\n        # 18. if the stone is the last stone, return True\n        # 19. if the stone is not the last stone, check if the stone is the last stone\n        # 20. if the stone is the last stone, return True\n        # 21. if the stone is not the last stone, check if the stone is the last stone\n        # 22. if the stone is the last stone, return True\n        # 23. if the stone is not the last stone, check if the stone is the last stone\n        # 24. if the stone is the last stone, return True\n        # 25. if the stone is not the last stone, check if the stone is the last stone\n        # 26. if the stone is the last stone, return True\n        # 27. if the stone is not the last stone, check if the stone is the last stone\n        # 28. if the stone is the last stone, return True\n        # 29. if the stone is not the last stone, check if the stone is the last stone\n        # 30. if the stone is the last stone, return True\n        # 31. if the stone is not the last stone, check if the stone is the last stone\n        # 32. if the stone is the last stone, return True\n        # 33. if the stone is not the last stone, check if the stone is the last stone\n        # 34. if the stone is the last stone, return True\n        # 35. if the stone is not the last stone, check if the stone is the last stone\n        # 36. if the stone is the last stone, return True\n        # 37. if the stone is not the last stone, check if the stone is the last stone\n        # 38. if the stone is the last stone, return True\n        # 39. if the stone is not the last stone, check if the stone is the last stone\n        # 40. if the stone is the last stone, return True\n        # 41. if the stone is not the last stone, check if the stone is the last stone\n        # 42. if the stone is the last stone, return True\n        # 43. if the stone is not the last stone, check if the stone is the last stone\n        # 44. if the stone is the last stone, return True\n        # 45. if the stone is not the last stone, check if the stone is the last stone\n        # 46. if the stone is the last stone, return True\n        # 47. if the stone is not the last stone, check if the stone is the last stone\n        # 48. if the stone is the last stone, return True\n        # 49. if the stone is not the last stone, check if the stone is the last stone\n        # 50. if the stone is the last stone, return True\n        # 51. if the stone is not the last stone, check if the stone is the last stone\n        # 52. if the"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score.sort(reverse=True)\n        \n        # create a dictionary to store the rank of each score\n        rank_dict = {}\n        \n        # assign rank to each score\n        for i, score in enumerate(score):\n            rank_dict[score] = i + 1\n        \n        # assign rank to each score\n        for i, score in enumerate(score):\n            if i == 0:\n                score_rank = \"Gold Medal\"\n            elif i == 1:\n                score_rank = \"Silver Medal\"\n            elif i == 2:\n                score_rank = \"Bronze Medal\"\n            else:\n                score_rank = str(i + 1)\n            score_rank = score_rank\n            score_rank = rank_dict[score]\n        \n        return score_rank"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        curr_len = 0\n        curr_str = ''\n        \n        for i in range(len(s)):\n            if s[i] not in curr_str:\n                curr_str += s[i]\n                curr_len += 1\n            else:\n                max_len = max(max_len, curr_len)\n                curr_str = curr_str[curr_str.index(s[i])+1:] + s[i]\n                curr_len = len(curr_str)\n        \n        return max(max_len, curr_len)"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 0\n            word_dict[word] += 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            curr_dict = {}\n            for j in range(i, i + word_len * word_count, word_len):\n                curr_word = s[j:j+word_len]\n                if curr_word in word_dict:\n                    if curr_word not in curr_dict:\n                        curr_dict[curr_word] = 0\n                    curr_dict[curr_word] += 1\n            if curr_dict == word_dict:\n                res.append(i)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        count = 0\n        \n        for i in range(len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                count += 1\n                \n        return count"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                prev = dummy\n                while prev.next.val < cur.next.val:\n                    prev = prev.next\n                cur.next, cur.next.next, prev.next = cur.next.next, cur.next, prev.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            count = 0\n            for k in range(left, right + 1):\n                if i > mid:\n                    nums[k] = nums[j]\n                    j += 1\n                elif j > right:\n                    nums[k] = nums[i]\n                    i += 1\n                elif nums[i] > 2 * nums[j]:\n                    count += mid - i + 1\n                    nums[k] = nums[j]\n                    j += 1\n                else:\n                    nums[k] = nums[i]\n                    i += 1\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = int(v1[i])\n            if i < len(v2):\n                v2[i] = int(v2[i])\n            \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                if v1[i] > v2[i]:\n                    return 1\n                elif v1[i] < v2[i]:\n                    return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # iterate over courses\n        for duration, end in courses:\n            # add course to queue\n            heapq.heappush(pq, (-duration, end))\n            \n            # add course to total time\n            total += duration\n            \n            # if total time exceeds end date\n            if total > end:\n                # remove course from queue\n                total += heapq.heappop(pq)[0]\n                \n        # return length of queue\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            next_node = curr.next\n            for i in range(k):\n                if curr.next:\n                    curr = curr.next\n                else:\n                    return dummy.next\n            prev.next = curr\n            curr = next_node\n            for i in range(k):\n                if curr:\n                    curr = curr.next\n                else:\n                    return dummy.next\n            prev.next = curr\n            prev = curr\n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s)//i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 = 0\n        ## 1 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 = 0\n        ## 1 ^ 0 ^ 0 ^ 0 = 1\n        ## 0 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 0 ^ 0 ^ 1 ^ 1 ^ 0 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min number of stickers needed to form target[0:i]\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n):\n            dp[i][i] = 1\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = dp[i][j-1]\n                for k in range(i+1, j+1):\n                    if s[k] == s[j]:\n                        dp[i][j] = max(dp[i][j], dp[i][k-1] + dp[k+1][j-1])\n        \n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to map roman numerals to integers\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        \n        # initialize result to 0\n        result = 0\n        \n        # loop through the string\n        for i in range(len(s)):\n            # if the current character is larger than the next character, subtract it from the result\n            if i < len(s) - 1 and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            # otherwise, add the current character to the result\n            else:\n                result += roman_dict[s[i]]\n        \n        # return the result\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [nums[0]]\n        \n        if k == 1:\n            return nums\n        \n        max_list = []\n        max_num = max(nums[0:k])\n        max_list.append(max_num)\n        \n        for i in range(k, len(nums)):\n            if nums[i] > max_num:\n                max_num = nums[i]\n            if i >= k:\n                if nums[i-k] == max_num:\n                    max_num = max(nums[i-k+1:i+1])\n                else:\n                    max_num = max(max_num, nums[i-k+1])\n            max_list.append(max_num)\n        \n        return max_list"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # merge the two arrays\n        nums1.extend(nums2)\n        nums1.sort()\n        \n        # find the median\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2.0\n        else:\n            return nums1[len(nums1) // 2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     if nums[mid] < nums[mid - 1]:\n        #         return nums[mid]\n        #     if nums[mid] > nums[0]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            if nums[mid] > nums[0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 <= area <= 10^9\n        # 2. area is a perfect square\n        # 3. area is a perfect square\n        # 4. area is a perfect square\n        # 5. area is a perfect square\n        # 6. area is a perfect square\n        # 7. area is a perfect square\n        # 8. area is a perfect square\n        # 9. area is a perfect square\n        # 10. area is a perfect square\n        # 11. area is a perfect square\n        # 12. area is a perfect square\n        # 13. area is a perfect square\n        # 14. area is a perfect square\n        # 15. area is a perfect square\n        # 16. area is a perfect square\n        # 17. area is a perfect square\n        # 18. area is a perfect square\n        # 19. area is a perfect square\n        # 20. area is a perfect square\n        # 21. area is a perfect square\n        # 22. area is a perfect square\n        # 23. area is a perfect square\n        # 24. area is a perfect square\n        # 25. area is a perfect square\n        # 26. area is a perfect square\n        # 27. area is a perfect square\n        # 28. area is a perfect square\n        # 29. area is a perfect square\n        # 30. area is a perfect square\n        # 31. area is a perfect square\n        # 32. area is a perfect square\n        # 33. area is a perfect square\n        # 34. area is a perfect square\n        # 35. area is a perfect square\n        # 36. area is a perfect square\n        # 37. area is a perfect square\n        # 38. area is a perfect square\n        # 39. area is a perfect square\n        # 40. area is a perfect square\n        # 41. area is a perfect square\n        # 42. area is a perfect square\n        # 43. area is a perfect square\n        # 44. area is a perfect square\n        # 45. area is a perfect square\n        # 46. area is a perfect square\n        # 47. area is a perfect square\n        # 48. area is a perfect square\n        # 49. area is a perfect square\n        # 50. area is a perfect square\n        # 51. area is a perfect square\n        # 52. area is a perfect square\n        # 53. area is a perfect square\n        # 54. area is a perfect square\n        # 55. area is a perfect square\n        # 56. area is a perfect square\n        # 57. area is a perfect square\n        # 58. area is a perfect square\n        # 59. area is a perfect square\n        # 60. area is a perfect square\n        # 61. area is a perfect square\n        # 62. area is a perfect square\n        # 63. area is a perfect square\n        # 64. area is a perfect square\n        # 65. area is a perfect square\n        # 66. area is a perfect square\n        # 67. area is a perfect square\n        # 68. area is a perfect square\n        # 69. area is a perfect square\n        # 70. area is a perfect square\n        # 71. area is a perfect square\n        # 72. area is a perfect square\n        # 73. area is a perfect square\n        # 74. area is a perfect square\n        # 75. area is a perfect square\n        # 76. area is a perfect square\n        # 77. area is a perfect square\n        # 78. area is a perfect square\n        # 79. area is a perfect square\n        # 80. area is a perfect square\n        # 81. area is a perfect square\n        # 82. area is a perfect square\n        # 83. area is a perfect square\n        # 84. area is a perfect square\n        # 85. area is a perfect square\n        # 86. area is a"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # BFS\n        q = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        while q:\n            curr = q.popleft()\n            if curr == endWord:\n                break\n            for i in range(len(curr)):\n                for j in range(26):\n                    neighbor = curr[:i] + chr(ord('a') + j) + curr[i+1:]\n                    for n in graph[neighbor]:\n                        if n not in visited:\n                            visited[n] = visited[curr] + 1\n                            q.append(n)\n        \n        # DFS\n        res = []\n        if endWord not in visited:\n            return res\n        self.dfs(beginWord, endWord, visited, graph, [beginWord], res)\n        return res\n    \n    def dfs(self, curr, endWord, visited, graph, path, res):\n        if curr == endWord:\n            res.append(list(path))\n            return\n        for i in range(len(curr)):\n            for j in range(26):\n                neighbor = curr[:i] + chr(ord('a') + j) + curr[i+1:]\n                for n in graph[neighbor]:\n                    if n not in visited:\n                        visited[n] = visited[curr] + 1\n                        self.dfs(n, endWord, visited, graph, path + [n], res)\n                        visited.pop(n)"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]]\n            else:\n                res += [nums[i]]\n                for j in range(len(res)-1, -1, -1):\n                    res.append(res[j] + [nums[i]])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uc5d0\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc9c4\ufffd"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        \n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n                \n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_min) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 2. 10\u8fdb\u5236\u8f6c26\u8fdb\u5236\n        # 3. 26\u8fdb\u5236\u8f6c\u5b57\u7b26\n        \n        # 1. 26\u8fdb\u5236\u8f6c10\u8fdb\u5236"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = [0] * 12\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                board_1d[i * 3 + j] = board[i][j]\n        \n        # convert board_1d to a string\n        board_str = ''.join(str(x) for x in board_1d)\n        \n        # convert board_str to a tuple\n        board_tuple = tuple(board_str)\n        \n        # convert board_tuple to a set\n        board_set = set([board_tuple])\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[0]: 0}\n        \n        # convert board_dict to a queue\n        board_queue = collections.deque([board_dict])\n        \n        # convert board_queue to a set\n        board_set = set(board_queue)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_dict:\n                if s_dict[s[i]] != t[i]:\n                    return False\n            else:\n                s_dict[s[i]] = t[i]\n                \n            if t[i] in t_dict:\n                if t_dict[t[i]] != s[i]:\n                    return False\n            else:\n                t_dict[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if the target is in the first half of the array, search in the first half\n        if nums[pivot] == target:\n            return True\n        \n        # if the target is in the second half of the array, search in the second half\n        if nums[len(nums)-1] >= target:\n            return self.binary_search(nums, target, pivot, len(nums)-1)\n        \n        # if the target is not in the first half of the array, search in the second half\n        return self.binary_search(nums, target, 0, pivot-1)\n        \n    def find_pivot(self, nums):\n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            l = i + 1\n            r = len(nums) - 1\n            \n            while l < r:\n                sum = nums[i] + nums[l] + nums[r]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    l += 1\n                else:\n                    r -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root == None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.min_diff = min(self.min_diff, root.val - self.prev)\n                self.prev = root.val\n                inorder(root.right)\n                \n        self.min_diff = float('inf')\n        self.prev = -float('inf')\n        inorder(root)\n        return self.min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return []\n            left = dfs(root.left)\n            right = dfs(root.right)\n            return [root.val] + left + right\n        \n        return sorted(Counter(dfs(root)).most_common(1)[0][0]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a character\n        # 4. repeat steps 2 and 3 until password is strong\n        \n        # 1"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        count = 0\n        while n > 0:\n            n = n // 5\n            count += n\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for i in range(numRows)]\n        curRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[curRow] += c\n            if curRow == 0 or curRow == numRows - 1:\n                goingDown = not goingDown\n            curRow += 1 if goingDown else -1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 pointers\n        # 3. 2 pointers\n        # 4. 2 pointers\n        # 5. 2 pointers\n        # 6. 2 pointers\n        # 7. 2 pointers\n        # 8. 2 pointers\n        # 9. 2 pointers\n        # 10. 2 pointers\n        # 11. 2 pointers\n        # 12. 2 pointers\n        # 13. 2 pointers\n        # 14. 2 pointers\n        # 15. 2 pointers\n        # 16. 2 pointers\n        # 17. 2 pointers\n        # 18. 2 pointers\n        # 19. 2 pointers\n        # 20. 2 pointers\n        # 21. 2 pointers\n        # 22. 2 pointers\n        # 23. 2 pointers\n        # 24. 2 pointers\n        # 25. 2 pointers\n        # 26. 2 pointers\n        # 27. 2 pointers\n        # 28. 2 pointers\n        # 29. 2 pointers\n        # 30. 2 pointers\n        # 31. 2 pointers\n        # 32. 2 pointers\n        # 33. 2 pointers\n        # 34. 2 pointers\n        # 35. 2 pointers\n        # 36. 2 pointers\n        # 37. 2 pointers\n        # 38. 2 pointers\n        # 39. 2 pointers\n        # 40. 2 pointers\n        # 41. 2 pointers\n        # 42. 2 pointers\n        # 43. 2 pointers\n        # 44. 2 pointers\n        # 45. 2 pointers\n        # 46. 2 pointers\n        # 47. 2 pointers\n        # 48. 2 pointers\n        # 49. 2 pointers\n        # 50. 2 pointers\n        # 51. 2 pointers\n        # 52. 2 pointers\n        # 53. 2 pointers\n        # 54. 2 pointers\n        # 55. 2 pointers\n        # 56. 2 pointers\n        # 57. 2 pointers\n        # 58. 2 pointers\n        # 59. 2 pointers\n        # 60. 2 pointers\n        # 61. 2 pointers\n        # 62. 2 pointers\n        # 63. 2 pointers\n        # 64. 2 pointers\n        # 65. 2 pointers\n        # 66. 2 pointers\n        # 67. 2 pointers\n        # 68. 2 pointers\n        # 69. 2 pointers\n        # 70. 2 pointers\n        # 71. 2 pointers\n        # 72. 2 pointers\n        # 73. 2 pointers\n        # 74. 2 pointers\n        # 75. 2 pointers\n        # 76. 2 pointers\n        # 77. 2 pointers\n        # 78. 2 pointers\n        # 79. 2 pointers\n        # 80. 2 pointers\n        # 81. 2 pointers\n        # 82. 2 pointers\n        # 83. 2 pointers\n        # 84. 2 pointers\n        # 85. 2 pointers\n        # 86. 2 pointers"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) space\n        ## O(n) time\n        ## 1 <= n <= 10\u2075\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <= n\n        ## 1 <= nums[i] <="}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. for each element, find the number of smaller elements to the right\n        # 3. use binary search to find the number of smaller elements to the left\n        # 4. use binary search to find the number of smaller elements to the right\n        # 5. use binary search to find the number of smaller elements to the left\n        # 6. use binary search to find the number of smaller elements to the right\n        # 7. use binary search to find the number of smaller elements to the left\n        # 8. use binary search to find the number of smaller elements to the right\n        # 9. use binary search to find the number of smaller elements to the left\n        # 10. use binary search to find the number of smaller elements to the right\n        # 11. use binary search to find the number of smaller elements to the left\n        # 12. use binary search to find the number of smaller elements to the right\n        # 13. use binary search to find the number of smaller elements to the left\n        # 14. use binary search to find the number of smaller elements to the right\n        # 15. use binary search to find the number of smaller elements to the left\n        # 16. use binary search to find the number of smaller elements to the right\n        # 17. use binary search to find the number of smaller elements to the left\n        # 18. use binary search to find the number of smaller elements to the right\n        # 19. use binary search to find the number of smaller elements to the left\n        # 20. use binary search to find the number of smaller elements to the right\n        # 21. use binary search to find the number of smaller elements to the left\n        # 22. use binary search to find the number of smaller elements to the right\n        # 23. use binary search to find the number of smaller elements to the left\n        # 24. use binary search to find the number of smaller elements to the right\n        # 25. use binary search to find the number of smaller elements to the left\n        # 26. use binary search to find the number of smaller elements to the right\n        # 27. use binary search to find the number of smaller elements to the left\n        # 28. use binary search to find the number of smaller elements to the right\n        # 29. use binary search to find the number of smaller elements to the left\n        # 30. use binary search to find the number of smaller elements to the right\n        # 31. use binary search to find the number of smaller elements to the left\n        # 32. use binary search to find the number of smaller elements to the right\n        # 33. use binary search to find the number of smaller elements to the left\n        # 34. use binary search to find the number of smaller elements to the right\n        # 35. use binary search to find the number of smaller elements to the left\n        # 36. use binary search to find the number of smaller elements to the right\n        # 37. use binary search to find the number of smaller elements to the left\n        # 38. use binary search to find the number of smaller elements to the right\n        # 39. use binary search to find the number of smaller elements to the left\n        # 40. use binary search to find the number of smaller elements to the right\n        # 41. use binary search to find the number of smaller elements to the left\n        # 42. use binary search to find the number of smaller elements to the right\n        # 43. use binary search to find the number of smaller elements to the left\n        # 44. use binary search to find the number of smaller elements to the right\n        # 45. use binary search to find the number of smaller elements to the left\n        # 46. use binary search to find the number of smaller elements to the right\n        # 47. use binary search to find the number of smaller elements to the left\n        # 48. use binary search to find the number of smaller elements to the right\n        # 49. use binary search to find the number of smaller elements to the left\n        # 50. use binary search to find the number of smaller elements to the right\n        # 51. use binary search to find the number of smaller elements to the left\n        # 52. use binary search to find the number of smaller elements to the right\n        #"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the intervals by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        res = 0\n        \n        # initialize the last two ends\n        last_end1 = -1\n        last_end2 = -1\n        \n        # iterate over the intervals\n        for interval in intervals:\n            # if the current interval starts before the last end\n            if interval[0] > last_end2:\n                # update the result\n                res += 2\n                # update the last two ends\n                last_end1 = last_end2\n                last_end2 = interval[1]\n            # if the current interval ends before the last end\n            elif interval[1] < last_end1:\n                # update the result\n                res += 1\n                # update the last two ends\n                last_end1 = last_end2\n                last_end2 = interval[1]\n            # if the current interval ends after the last end\n            else:\n                # update the last end\n                last_end2 = interval[1]\n        \n        # return the result\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n /= 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # initialize\n        patches = 0\n        i = 0\n        \n        # iterate\n        while i < len(nums):\n            if nums[i] <= n:\n                n += nums[i]\n                i += 1\n            else:\n                patches += 1\n                n += n\n        \n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        # 6. recursion\n        # 7. stack\n        # 8. dp\n        # 9. math\n        # 10. recursion\n        # 11. stack\n        # 12. dp\n        # 13. math\n        # 14. recursion\n        # 15. stack\n        # 16. dp\n        # 17. math\n        # 18. recursion\n        # 19. stack\n        # 20. dp\n        # 21. math\n        # 22. recursion\n        # 23. stack\n        # 24. dp\n        # 25. math\n        # 26. recursion\n        # 27. stack\n        # 28. dp\n        # 29. math\n        # 30. recursion\n        # 31. stack\n        # 32. dp\n        # 33. math\n        # 34. recursion\n        # 35. stack\n        # 36. dp\n        # 37. math\n        # 38. recursion\n        # 39. stack\n        # 40. dp\n        # 41. math\n        # 42. recursion\n        # 43. stack\n        # 44. dp\n        # 45. math\n        # 46. recursion\n        # 47. stack\n        # 48. dp\n        # 49. math\n        # 50. recursion\n        # 51. stack\n        # 52. dp\n        # 53. math\n        # 54. recursion\n        # 55. stack\n        # 56. dp\n        # 57. math\n        # 58. recursion\n        # 59. stack\n        # 60. dp\n        # 61. math\n        # 62. recursion\n        # 63. stack\n        # 64. dp\n        # 65. math\n        # 66. recursion\n        # 67. stack\n        # 68. dp\n        # 69. math\n        # 70. recursion\n        # 71. stack\n        # 72. dp\n        # 73. math\n        # 74. recursion\n        # 75. stack\n        # 76. dp\n        # 77. math\n        # 78. recursion\n        # 79. stack\n        # 80. dp\n        # 81. math\n        # 82. recursion\n        # 83. stack\n        # 84. dp\n        # 85. math\n        # 86. recursion\n        # 87. stack\n        # 88. dp\n        # 89. math\n        # 90. recursion\n        # 91. stack\n        # 92. dp\n        # 93. math\n        # 94. recursion\n        # 95. stack\n        # 96. dp\n        # 97. math\n        # 98. recursion\n        # 99. stack\n        # 100. dp\n        # 101. math\n        # 102. recursion\n        # 103. stack\n        # 104. dp\n        # 105. math\n        # 106. recursion\n        # 107. stack\n        # 108. dp\n        # 109. math\n        # 110. recursion\n        # 111. stack\n        # 112. dp\n        # 113. math\n        # 114. recursion\n        # 115. stack\n        # 116. dp\n        # 117. math\n        # 118. recursion\n        # 119."}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if denominator == 0:\n            return \"NaN\"\n        \n        if numerator < 0 and denominator > 0:\n            sign = -1\n        elif numerator > 0 and denominator < 0:\n            sign = 1\n        else:\n            sign = 1\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return str(sign * quotient)\n        \n        result = str(sign * quotient) + \".\"\n        \n        remainder_dict = {}\n        while remainder != 0:\n            if remainder in remainder_dict:\n                result += \"(\"\n                result += str(remainder_dict[remainder])\n                result += \")\"\n                break\n            remainder_dict[remainder] = len(result)\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            result += str(quotient)\n        \n        return result"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # recursively sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add any remaining nodes from the left half\n        curr.next = left if left else right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the array by width\n        envelopes.sort(key=lambda x: x[0])\n        \n        # find the longest increasing subsequence\n        dp = [1] * len(envelopes)\n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[j][1] < envelopes[i][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        ## row and col are set to 0 if the element is 0\n        ## row and col are not set to 0 if the element is not 0\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0\n        ## if the element is not 0, set the element in the row and col to 1\n        ## iterate through the matrix again and set the element to 0 if the element is 0\n        ## set the element to 0 if the element is not 0\n        \n        ## O(1) space\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0\n        ## if the element is not 0, set the element in the row and col to 1\n        ## iterate through the matrix again and set the element to 0 if the element is 0\n        ## set the element to 0 if the element is not 0\n        \n        ## O(1) space\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0\n        ## if the element is not 0, set the element in the row and col to 1\n        ## iterate through the matrix again and set the element to 0 if the element is 0\n        ## set the element to 0 if the element is not 0\n        \n        ## O(1) space\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0\n        ## if the element is not 0, set the element in the row and col to 1\n        ## iterate through the matrix again and set the element to 0 if the element is 0\n        ## set the element to 0 if the element is not 0\n        \n        ## O(1) space\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0\n        ## if the element is not 0, set the element in the row and col to 1\n        ## iterate through the matrix again and set the element to 0 if the element is 0\n        ## set the element to 0 if the element is not 0\n        \n        ## O(1) space\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0\n        ## if the element is not 0, set the element in the row and col to 1\n        ## iterate through the matrix again and set the element to 0 if the element is 0\n        ## set the element to 0 if the element is not 0\n        \n        ## O(1) space\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0\n        ## if the element is not 0, set the element in the row and col to 1\n        ## iterate through the matrix again and set the element to 0 if the element is 0\n        ## set the element to 0 if the element is not 0\n        \n        ## O(1) space\n        ## use the first row and col to store the row and col of 0\n        ## iterate through the matrix and check if the element is 0\n        ## if it is 0, set the element in the row and col to 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # create two pointers\n        left = dummy\n        right = dummy\n        \n        # move right pointer n steps\n        for i in range(n + 1):\n            right = right.next\n        \n        # move both pointers at the same time\n        while right:\n            left = left.next\n            right = right.next\n        \n        # delete the node\n        left.next = left.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## 1. use set\n        ## 2. use dict\n        ## 3. use collections.Counter\n        ## 4. use collections.defaultdict\n        ## 5. use collections.Counter\n        ## 6. use collections.defaultdict\n        ## 7. use collections.Counter\n        ## 8. use collections.defaultdict\n        ## 9. use collections.Counter\n        ## 10. use collections.defaultdict\n        ## 11. use collections.Counter\n        ## 12. use collections.defaultdict\n        ## 13. use collections.Counter\n        ## 14. use collections.defaultdict\n        ## 15. use collections.Counter\n        ## 16. use collections.defaultdict\n        ## 17. use collections.Counter\n        ## 18. use collections.defaultdict\n        ## 19. use collections.Counter\n        ## 20. use collections.defaultdict\n        ## 21. use collections.Counter\n        ## 22. use collections.defaultdict\n        ## 23. use collections.Counter\n        ## 24. use collections.defaultdict\n        ## 25. use collections.Counter\n        ## 26. use collections.defaultdict\n        ## 27. use collections.Counter\n        ## 28. use collections.defaultdict\n        ## 29. use collections.Counter\n        ## 30. use collections.defaultdict\n        ## 31. use collections.Counter\n        ## 32. use collections.defaultdict\n        ## 33. use collections.Counter\n        ## 34. use collections.defaultdict\n        ## 35. use collections.Counter\n        ## 36. use collections.defaultdict\n        ## 37. use collections.Counter\n        ## 38. use collections.defaultdict\n        ## 39. use collections.Counter\n        ## 40. use collections.defaultdict\n        ## 41. use collections.Counter\n        ## 42. use collections.defaultdict\n        ## 43. use collections.Counter\n        ## 44. use collections.defaultdict\n        ## 45. use collections.Counter\n        ## 46. use collections.defaultdict\n        ## 47. use collections.Counter\n        ## 48. use collections.defaultdict\n        ## 49. use collections.Counter\n        ## 50. use collections.defaultdict\n        ## 51. use collections.Counter\n        ## 52. use collections.defaultdict\n        ## 53. use collections.Counter\n        ## 54. use collections.defaultdict\n        ## 55. use collections.Counter\n        ## 56. use collections.defaultdict\n        ## 57. use collections.Counter\n        ## 58. use collections.defaultdict\n        ## 59. use collections.Counter\n        ## 60. use collections.defaultdict\n        ## 61. use collections.Counter\n        ## 62. use collections.defaultdict\n        ## 63. use collections.Counter\n        ## 64. use collections.defaultdict\n        ## 65. use collections.Counter\n        ## 66. use collections.defaultdict\n        ## 67. use collections.Counter\n        ## 68. use collections.defaultdict\n        ## 69. use collections.Counter\n        ## 70. use collections.defaultdict\n        ## 71. use collections.Counter\n        ## 72. use collections.defaultdict\n        ## 73. use collections.Counter\n        ## 74. use collections.defaultdict\n        ## 75. use collections.Counter\n        ## 76. use collections.defaultdict\n        ## 77. use collections.Counter\n        ## 78. use collections.defaultdict\n        ## 79. use collections.Counter\n        ## 80. use collections.defaultdict\n        ## 81. use collections.Counter\n        ## 82. use collections.defaultdict\n        ## 83. use collections.Counter"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 0:\n            return 0\n        \n        total = sum(machines)\n        if total % n != 0:\n            return -1\n        \n        avg = total / n\n        curr = 0\n        ans = 0\n        for i in range(n):\n            curr += machines[i] - avg\n            ans = max(ans, abs(curr))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.right = self.sortedListToBST(slow.next)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is None:\n            curr.next = list2\n        else:\n            curr.next = list1\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == len(nums):\n                output.append(subset[:])\n            else:\n                # include nums[first] in subset\n                subset.append(nums[first])\n                backtrack(first + 1)\n                # not include nums[first] in subset\n                subset.pop()\n                backtrack(first + 1)\n        \n        output = []\n        subset = []\n        backtrack()\n        return output"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. remove all spaces\n        s = s.strip()\n        \n        # 2. check if it is empty\n        if not s:\n            return False\n        \n        # 3. check if it is a valid number\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X, XX, XXX, XL, L, XC, LX, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX, XC, C, XL, LXX"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 1. XOR all the characters in s and t\n        ## 2. XOR the result with 0\n        ## 3. Return the result\n        \n        result = 0\n        for c in s:\n            result ^= ord(c)\n        for c in t:\n            result ^= ord(c)\n        return chr(result)"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_location(board, l):\n            for row in range(9):\n                for col in range(9):\n                    if board[row][col] == '.':\n                        l[0] = row\n                        l[1] = col\n                        return True\n            return False\n        \n        def used_in_row(board, row, num):\n            for col in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_col(board, col, num):\n            for row in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_box(board, row, col, num):\n            for i in range(3):\n                for j in range(3):\n                    if board[i+row][j+col] == num:\n                        return True\n            return False\n        \n        def is_valid(board, row, col, num):\n            return not used_in_row(board, row, num) and not used_in_col(board, col, num) and not used_in_box(board, row - row % 3, col - col % 3, num)\n        \n        def solve_sudoku(board):\n            l = [0, 0]\n            if not find_empty_location(board, l):\n                return True\n            \n            row = l[0]\n            col = l[1]\n            \n            for num in range(1, 10):\n                if is_valid(board, row, col, num):\n                    board[row][col] = num\n                    \n                    if solve_sudoku(board):\n                        return True\n                    \n                    board[row][col] = '.'\n            \n            return False\n        \n        solve_sudoku(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        i = 1\n        while i * i < num:\n            i += 1\n        \n        return i * i == num"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        ans = [0,1]\n        i = 2\n        while i <= n:\n            ans.append(ans[i//2] + i%2)\n            i += 1\n        \n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, node, path):\n            if node not in node.children:\n                return\n            if node.word:\n                res.append(node.word)\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            if board[i][j] not in node.children:\n                return\n            tmp = board[i][j]\n            board[i][j] = '#'\n            dfs(i + 1, j, node.children[tmp], path + tmp)\n            dfs(i - 1, j, node.children[tmp], path + tmp)\n            dfs(i, j + 1, node.children[tmp], path + tmp)\n            dfs(i, j - 1, node.children[tmp], path + tmp)\n            board[i][j] = tmp\n        \n        class TrieNode:\n            def __init__(self):\n                self.children = {}\n                self.word = None\n        \n        root = TrieNode()\n        for word in words:\n            node = root\n            for c in word:\n                if c not in node.children:\n                    node.children[c] = TrieNode()\n                node = node.children[c]\n            node.word = word\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, root, '')\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n            \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n            \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                box = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert string to list\n        # 2. reverse the list\n        # 3. iterate over the list\n        # 4. multiply the current element by 26^(index)\n        # 5. add the result to the total\n        # 6. return the total\n        \n        # 1. convert string to list\n        columnTitle = list(columnTitle)\n        \n        # 2. reverse the list\n        columnTitle.reverse()\n        \n        # 3. iterate over the list\n        total = 0\n        for i in range(len(columnTitle)):\n            # 4. multiply the current element by 26^(index)\n            total += (26**i) * (ord(columnTitle[i]) - ord('A') + 1)\n            \n        # 5. return the total\n        return total"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second.next:\n            first, second = first.next, second.next\n        \n        return first"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # check if the length of pattern and words are equal\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate over the pattern and words\n        for i in range(len(pattern)):\n            # check if the pattern and word are already mapped\n            if pattern[i] in mapping:\n                # check if the pattern and word are mapped to the same word\n                if mapping[pattern[i]] != words[i]:\n                    return False\n            # check if the pattern and word are not already mapped\n            else:\n                # check if the word is already mapped to a different pattern\n                if words[i] in mapping.values():\n                    return False\n                # map the pattern and word\n                mapping[pattern[i]] = words[i]\n        \n        # all words are mapped to a pattern\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                output.append(nums[:])\n            for i in range(first, n):\n                nums[first], nums[i] = nums[i], nums[first]\n                backtrack(first + 1)\n                nums[first], nums[i] = nums[i], nums[first]\n        \n        n = len(nums)\n        output = []\n        backtrack()\n        return output"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        if target < matrix[0][0] or target > matrix[-1][-1]:\n            return False\n        \n        left = 0\n        right = m * n - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        head = ListNode(0)\n        curr = head\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        ## 1. convert to binary\n        ## 2. flip the bits\n        ## 3. convert back to decimal\n        \n        ## 1. convert to binary\n        binary = bin(num)[2:]\n        \n        ## 2. flip the bits\n        flip_binary = \"\"\n        for bit in binary:\n            if bit == \"0\":\n                flip_binary += \"1\"\n            else:\n                flip_binary += \"0\"\n        \n        ## 3. convert back to decimal\n        return int(flip_binary, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n                \n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) time and O(1) space\n        # Two pointers\n        # left and right pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # O(n) time and O(n) space\n        # Hashmap\n        # max_area = 0\n        # height_map = {}\n        # for i, h in en enumerate(height):\n        #     if h not in height_map:\n        #         height_map[h] = i\n        # for i, h in enumerate(height):\n        #     if h in height_map:\n        #         max_area = max(max_area, h * (i - height_map[h]))\n        # return max_area\n        \n        # O(n) time and O(1) space\n        # Two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # O(n) time and O(1) space\n        # Hashmap\n        # max_area = 0\n        # height_map = {}\n        # for i, h in enumerate(height):\n        #     if h not in height_map:\n        #         height_map[h] = i\n        # for i, h in enumerate(height):\n        #     if h in height_map:\n        #         max_area = max(max_area, h * (i - height_map[h]))\n        # return max_area\n        \n        # O(n) time and O(1) space\n        # Two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # O(n) time and O(1) space\n        # Hashmap\n        # max_area = 0\n        # height_map = {}\n        # for i, h in enumerate(height):\n        #     if h not in height_map:\n        #         height_map[h] = i\n        # for i, h in enumerate(height):\n        #     if h in height_map:\n        #         max_area = max(max_area, h * (i - height_map[h]))\n        # return max_area\n        \n        # O(n) time and O(1) space\n        # Two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # O(n) time and O(1) space\n        # Hashmap\n        # max_area = 0\n        # height_map = {}\n        # for i, h in enumerate(height):\n        #     if h not in height_map:\n        #         height_map[h] = i\n        # for i"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a dict\n        word_dict = {}\n        for word in words:\n            word_dict[word] = 1\n        \n        # build a list of concatenated words\n        res = []\n        for word in words:\n            if self.isConcatenated(word, word_dict):\n                res.append(word)\n        \n        return res\n    \n    def isConcatenated(self, word, word_dict):\n        # base case\n        if word in word_dict:\n            return True\n        \n        # recursive case\n        for i in range(1, len(word)):\n            left = word[:i]\n            right = word[i:]\n            if left in word_dict and right in word_dict:\n                return True\n        \n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = -num\n            sign = -1\n        else:\n            sign = 1\n        \n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign * res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    count += backtrack(row + 1, cols + [col], diag1 + [row + col], diag2 + [row - col])\n            return count\n        \n        return backtrack(0, [], [], [])"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, idx):\n            if idx == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[idx]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i+1, j, idx+1) or dfs(i-1, j, idx+1) or dfs(i, j+1, idx+1) or dfs(i, j-1, idx+1)\n            board[i][j] = word[idx]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the list\n        # 2. find the third max\n        # 3. return the third max\n        \n        nums = sorted(set(nums))\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}