{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        while left <= right and top <= bottom:\n            for col in range(left, right+1):\n                res.append(matrix[top][col])\n            top += 1\n            if top > bottom:\n                break\n            for row in range(top, bottom+1):\n                res.append(matrix[row][right])\n            right -= 1\n            if left > right:\n                break\n            for col in range(right, left-1, -1):\n                res.append(matrix[bottom][col])\n            bottom -= 1\n            if top > bottom:\n                break\n            for row in range(bottom, top-1, -1):\n                res.append(matrix[row][left])\n            left += 1\n            \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        start = nums[0]\n        res = []\n        \n        for num in nums[1:]:\n            if num != start + 1:\n                if start != num:\n                    res.append(str(start) + '->' + str(num))\n                else:\n                    res.append(str(start))\n                start = num\n                \n        if start != nums[-1]:\n            res.append(str(start) + '->' + str(nums[-1]))\n        else:\n            res.append(str(start))\n            \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if not t:\n            return 1\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for c in s:\n            for i in range(len(t), c, -1):\n                dp[i] += dp[i - c]\n                \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Mark all negative numbers as 0\n        # 2. Mark all numbers that are in the range [1, n] as 1\n        # 3. Iterate through the array and check if nums[i] is positive. If so, mark nums[nums[i] - 1] as negative.\n        # 4. Iterate through the array again and find the first positive number. If the number is not 1, it means that the missing positive is nums[i] + 1.\n        # 5. If all numbers are positive, return 1.\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for num in nums:\n            if abs(num) <= n:\n                nums[abs(num) - 1] = -abs(nums[abs(num) - 1])\n        \n        for i in range(1, n):\n            if nums[i] > 0:\n                return i\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        nums = [str(i) for i in range(1, n + 1)]\n        k -= 1\n        res = ''\n        factor = 1\n        \n        for i in range(n - 1):\n            factor *= nums[i]\n            idx = k // factor\n            res += nums[idx]\n            nums.pop(idx)\n            k %= factor\n        \n        res += nums[0]\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] > target:\n                right -= 1\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                return [left + 1, right + 1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if not num:\n            return []\n        \n        res = []\n        n = len(num)\n        d = 10**(n-1)\n        dp = [(num[0], d)]\n        for i in xrange(1, n):\n            dp.append((dp[-1][1]*10 + int(num[i]), dp[-1][1]*10 + int(num[i])))\n            if dp[-1][1] > 0:\n                dp[-1] = (dp[-1][0] + dp[-2][0], dp[-1][1] + dp[-2][0])\n            if num[i] != '0':\n                res.append(dp[-1][0] - dp[-2][0] + dp[-1][1])\n                if res[-1] * dp[-1][1] == target:\n                    res.append(str(dp[-1][1] // dp[-2][1]))\n                    if dp[-1][1] % dp[-2][1] == 0:\n                        res.append(str(dp[-1][0] // dp[-2][1]))\n        return res if res[-1] == target else []"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, num):\n            if not node:\n                return 0\n            if not node.left and not node.right:\n                return num * 10 + node.val\n            return dfs(node.left, num * 10 + node.val) + dfs(node.right, num * 10 + node.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()[::-1]\n        res = []\n        for i in range(0, len(s) % k, k):\n            res.append(s[i:i+k])\n        return '-'.join(res[::-1])"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total_gas = sum(gas) - sum(cost)\n        if total_gas < 0:\n            return -1\n        \n        curr_gas = 0\n        start = 0\n        \n        for i, g in enumerate(gas):\n            curr_gas += g - cost[i]\n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [0] * n\n        for i in range(n-2, -1, -1):\n            dp[nums[nums[i+1]]-1] = max(nums[i]*dp[nums[nums[i+1]]], dp[nums[i]-1])\n            dp[nums[nums[i]-1]-1] += nums[i]*dp[nums[nums[i]-1]]\n            dp[nums[i]-1] += nums[nums[i]]*dp[nums[nums[i]-1]]\n        return dp[0]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in reversed(range(len(digits))):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0, 1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        p_star = p.find('*')\n        s_len = len(s)\n        p_len = len(p)\n        dp = [False] * (s_len + 1)\n        dp[0] = True\n        \n        for i in range(1, p_len + 1):\n            if p[i - 1] == p_star or p[i - 1] == '.' :\n                dp[i] = dp[i - 1]\n            if p[i - 1] == s_star or p[i - 1] == '.':\n                dp[i] = dp[i - 2]\n            if p_star > 0:\n                dp[i] = dp[i] or dp[i - p_star - 1]\n            s_star = s_len - p_len + i - p_star\n            if p[i - 1] == s_star or p[i - 1] == '.':\n                dp[i] = dp[i] and dp[s_star]\n            \n        return dp[p_len]"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) < k:\n            return nums2[:k]\n        \n        if len(nums2) < k:\n            return nums1[:k]\n        \n        res = []\n        for num in nums1[k-len(nums2):]:\n            if num > res[-1]:\n                res.pop()\n            else if res and num < res[-1]:\n                while nums2 and num > nums2[-1] and len(res) + len(nums2) - k > k:\n                    res.pop()\n                if res and nums2:\n                    res.append(nums2.pop())\n            res.append(num)\n        return res"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num <= 1:\n            return False\n        \n        divisors = set([1])\n        sqrt_num = int(num ** 0.5)\n        \n        for i in range(2, sqrt_num + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num // i)\n        \n        return num in divisors"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 2:\n            return n\n        \n        a, b = 0, 1\n        for i in range(n - 1):\n            a, b = b, a + b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[-1][-2] = dp[-2][-1] = -dungeon[-1][-1] + 1 if dungeon[-1][-1] < 0 else 1\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(dp[i + 1][j] - dungeon[i][j], dp[i][j + 1] - dungeon[i][j])\n                if dp[i][j] < 1:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j]\n        \n        return dp[0][1]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        lo, hi = 0, nums[-1] - nums[0]\n        \n        while lo < hi:\n            mid = (lo + hi) // 2\n            count, left = 0, 0\n            for num in nums:\n                count += left\n                if num - mid > 0:\n                    count -= (n - left)\n                left += 1\n            if count >= k:\n                hi = mid\n            else:\n                lo = mid + 1\n        \n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        l, r = 0, len(s) - 1\n        s = list(s)\n        while l < r:\n            if s[l] in vowels:\n                while r and s[r] not in vowels:\n                    r -= 1\n                if s[r] in vowels:\n                    s[l], s[r] = s[r], s[l]\n                    r -= 1\n            l += 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums_set:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR all the numbers from 0 to n, and the numbers in nums\n        # XOR all the numbers from 0 to n+1, and the number n\n        # The XOR of a number and 0 is the number itself\n        # XOR of a number and itself is 0\n        # So the XOR of the numbers from 0 to n, and the numbers in nums is the missing number\n        # Time: O(n)\n        # Space: O(1)\n        \n        xor_nums = 0\n        xor_n = len(nums)\n        \n        for num in nums:\n            xor_nums ^= num\n            xor_n ^= num\n        \n        return xor_nums ^ xor_n"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        wordSet = set(wordList)\n        if endWord not in wordSet:\n            return 0\n        \n        queue = collections.deque([(beginWord, 1)])\n        wordSet.add(beginWord)\n        \n        while queue:\n            word, length = queue.popleft()\n            for i in range(len(word)):\n                newWord = word[:i] + '*' + word[i+1:]\n                for word in wordSet & set(wordSet - {newWord}):\n                    if word == endWord:\n                        return length + 1\n                    queue.append((word, length + 1))\n                    wordSet.remove(word)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        res = ''\n        for i in range(len(a)-1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if b and b[i] == '1':\n                carry += 1\n            res = str(carry % 2) + res\n            carry //= 2\n            if i > 0:\n                if a[i-1] == '1':\n                    carry += 1\n        if carry:\n            res = '1' + res\n        return res"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right and nums[left] != target:\n            mid = left + (right - left) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        res = [left, left]\n        left, right = 0, len(nums) - 1\n        while left < right and nums[right] == target:\n            mid = left + (right - left) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        res[1] = right\n        return res"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 0\n        \n        unique_idx = 1\n        for num in nums[1:]:\n            if nums[unique_idx - 1] != num:\n                nums[unique_idx] = num\n                unique_idx += 1\n        \n        return unique_idx"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = nums[0]\n        \n        for i in range(1, len(nums)):\n            if max_reach >= i:\n                max_reach = max(max_reach, nums[i] + i)\n            if cur_reach == i:\n                jumps += 1\n                cur_reach = max_reach\n                \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(0, price - prices[i]) for i, price in enumerate(prices[1:], 1) if price > prices[i - 1])\n        \n        # dp[i][j] represents the max profit with j transactions up to prices[i]\n        dp = [0] * (k + 1)\n        for price in prices:\n            dp[1] = max(dp[1], price - dp[0])\n            for j in xrange(k, price - 1, -1):\n                dp[j] = max(dp[j], price - dp[j - 1])\n        \n        return dp[k]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_map = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_str = ''\n        if num < 0:\n            num = 0xffffffff + num + 1\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_map[remainder] + hex_str\n            num = num // 16\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # use a hashmap to store the frequency of each character\n        # use a hashset to store the characters that have appeared more than once\n        # iterate through the string and check if the character is in the hashset\n        # if it is, remove it from the hashset\n        # otherwise, add it to the hashmap\n        # if the character is not in the hashmap, return its index\n        # otherwise, return -1\n        \n        freq = {}\n        seen = set()\n        \n        for c in s:\n            if c not in freq:\n                freq[c] = 1\n            else:\n                freq[c] += 1\n            if freq[c] > 1:\n                seen.remove(c)\n            else:\n                seen.add(c)\n        \n        for i, c in enumerate(s):\n            if c in seen:\n                return i\n        \n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if valueDiff < 0:\n            return False\n        \n        bucketDict = {}\n        bucketSize = valueDiff + 1\n        \n        for num in nums:\n            bucketId = num // bucketSize\n            \n            if bucketId in bucketDict:\n                return True\n            \n            if bucketId - 1 in bucketDict and num - bucketDict[bucketId - 1] <= valueDiff:\n                return True\n            \n            if bucketId + 1 in bucketDict and bucketDict[bucketId + 1] - num <= valueDiff:\n                return True\n            \n            bucketDict[bucketId] = num\n            \n            if len(bucketDict) > bucketSize:\n                del bucketDict[nums[bucketSize * (bucketId - 1) // bucketSize] if bucketId - 1 in bucketDict else nums[bucketSize * (bucketId + 1) // bucketSize] + 1]\n            \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # two pointers\n        # left, right = 0, 0\n        # for i in nums:\n        #     if i == 1:\n        #         nums[right], nums[left] = nums[right], nums[left]\n        #         right += 1\n        #     elif i == 2:\n        #         nums[right], nums[i] = nums[i], nums[right]\n        #         right += 1\n        #         left += 1\n        #         # nums[i], nums[right] = nums[right], nums[i]\n        \n        # Dutch National Flag Algorithm\n        # zero, two = 0, len(nums) - 1\n        # i = 0\n        # while i <= two:\n        #     if nums[i] == 0:\n        #         nums[i], nums[zero] = nums[zero], nums[i]\n        #         zero += 1\n        #         i += 1\n        #     elif nums[i] == 2:\n        #         two -= 1\n        #         if nums[two] == 1:\n        #             nums[i], nums[two] = nums[two], nums[i]\n        #     else:\n        #         i += 1"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for num in nums:\n            if num == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        \n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = 0\n        left = root\n        while left.left:\n            left = left.left\n            left_height += 1\n        \n        right_height = 0\n        right = root\n        while right.right:\n            right = right.right\n            right_height += 1\n        \n        if left_height == right_height:\n            return (2**left_height) + self.countNodes(right.left)\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if not num1 or num1 == '0':\n            return num2\n        if not num2 or num2 == '0':\n            return num1\n        \n        num1, num2 = num1[::-1], num2[::-1]\n        res = ''\n        carry = 0\n        for i in range(min(len(num1), len(num2))):\n            val = (ord(num1[i]) - ord('0') + ord(num2[i]) - ord('0') + carry)\n            res += str(val % 10)\n            carry = val // 10\n            \n        if len(num1) > len(num2):\n            for i in num1[i+1:]:\n                val = (ord(i) - ord('0') + carry)\n                res += str(val % 10)\n                carry = val // 10\n        elif len(num2) > len(num1):\n            for i in num2[i+1:]:\n                val = (ord(i) - ord('0') + carry)\n                res += str(val % 10)\n                carry = val // 10\n        if carry:\n            res += str(carry)\n        return res[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        num = 0\n        sign = 1\n        stack = [1]\n        for c in s + '+':\n            if c == ' ':\n                continue\n            if c == '+' or c == '-':\n                num *= sign\n                sign = 1 if c == '+' else -1\n            elif c == '(':\n                num *= sign\n                stack.append(num)\n                sign = 1\n            elif c == ')':\n                num *= sign\n                num = stack.pop() * num\n            else:\n                num = num * 10 + int(c)\n        return num - sign"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # greedily pick the capital that will maximize profits\n        # if we have enough capital, we can pick the next capital\n        # otherwise, we can only pick the next profit\n        # if we have k projects, we can stop\n        # if we have more capital than we have projects, we can't do anything\n        # if we have less capital than we have projects, we can't do anything\n        # if we have more projects than k, we can't do anything\n        # if we have less projects than k, we can pick the next profit\n        # if we have more profits than k, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can't do anything\n        # if we have less profits than k, we can pick the next capital\n        # if we have more capital than we have profits, we can't do anything\n        # if we have less capital than we have profits, we can'"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {')': '(', '}': '{', ']': '['}\n        \n        for c in s:\n            if c not in d:\n                stack.append(c)\n            elif not stack or d[c] != stack.pop():\n                return False\n                \n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first decreasing number from the end\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if the number is the largest, then reverse the whole array\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first number greater than the number at i\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the rest of the array\n        nums[i + 1: ] = nums[len(nums) - 1: i:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time: O(n)\n        # Space: O(n)\n        \n        seen = {}\n        \n        for i, num in enumerate(nums):\n            if num in seen and i - seen[num] <= k:\n                return True\n            seen[num] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for n in nums[1:]:\n            max_diff = max(max_diff, n - nums[nums.index(n)])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            queue = queue[len(level):]\n            \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) time and O(n) space\n        # Hash map to store the ID of the partner of each ID\n        # If the partner of ID is already in the hash map, then we have found the partner of the partner\n        # Otherwise, we need to add the partner of ID to the hash map\n        # The number of swaps is the number of IDs in the hash map\n        hash_map = {id // 2: id % 2 for id in row}\n        res = 0\n        for id in row:\n            if hash_map[id // 2] == id % 2 + 1:\n                continue\n            res += 1\n            hash_map[hash_map[id // 2]] = id % 2\n        return res"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3 or s2 == s3:\n            return True\n        \n        dp = {s2[i]: i for i in range(len(s2)) if s2[i] == s3[i]}\n        \n        if s1[0] != s2[0] and s2[0] not in dp:\n            return False\n        \n        prev = s1[0] == s3[0]\n        \n        for c in s2[1:]:\n            curr = c in dp and prev\n            prev = curr\n            if curr:\n                dp[c] -= 1\n                if dp[c] == 0:\n                    del dp[c]\n        \n        for c in s1:\n            if c != s3[0] and c not in dp:\n                return False\n            curr = c in dp\n            dp[c] -= 1\n            if dp[c] == 0:\n                del dp[c]\n            prev = curr\n        \n        return True"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        g_idx = len(g) - 1\n        s_idx = len(s) - 1\n        \n        count = 0\n        \n        while g_idx >= 0 and s_idx >= 0:\n            if g[g_idx] <= s[s_idx]:\n                count += 1\n                g_idx -= 1\n            s_idx -= 1\n            \n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiopQWERTYUIOP')\n        row2 = set('asdfghjklASDFGHJKL')\n        row3 = set('zxcvbnmZXCVBNM')\n        \n        res = []\n        for word in words:\n            if word[0] in row1:\n                if set(word) <= row1:\n                    res.append(word)\n            elif word[0] in row2:\n                if set(word) <= row2:\n                    res.append(word)\n            else:\n                if set(word) <= row3:\n                    res.append(word)\n                    \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0, head)\n        dummy_prev = dummy\n        curr = head\n        \n        for _ in range(left - 1):\n            dummy_prev = dummy_prev.next\n            curr = curr.next\n        \n        prev = None\n        curr = curr.next\n        \n        for _ in range(right - left):\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        dummy_prev.next.next = curr\n        dummy.next = prev\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\"\n        # if the string has only one character, return s + s\n        \n        # reverse the string\n        # find the longest palindrome that can be prepended to the original string\n        # return the reversed string + the original string\n        # if the string is already a palindrome, return s\n        # if the string is empty, return \"\""}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if not t or not s:\n            return \"\"\n        \n        count_t = collections.Counter(t)\n        window_count = collections.defaultdict(int)\n        left = 0\n        min_length = float('inf')\n        min_start = 0\n        required = len(count_t)\n        for right, char in enumerate(s):\n            if char in count_t:\n                window_count[char] += 1\n                if window_count[char] == count_t[char]:\n                    required -= 1\n            \n            if required == 0:\n                while window_count[s[left]] > count_t[s[left]]:\n                    window_count[s[left]] -= 1\n                    left += 1\n                \n                if min_length > right - left + 1:\n                    min_length = right - left + 1\n                    min_start = left\n                \n                window_count[s[left]] -= 1\n                if window_count[s[left]] < count_t[s[left]]:\n                    required += 1\n                \n                left += 1\n        \n        return s[min_start:min_start + min_length] if min_length != float('inf') else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) <= 3:\n            return False\n        \n        if distance[3] >= distance[1] and distance[2] >= distance[0]:\n            return True\n        \n        if distance[4] + distance[1] >= distance[2] and distance[3] >= distance[0]:\n            return True\n        \n        if distance[3] + distance[5] >= distance[1] and distance[4] >= distance[2]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        \n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Hashmap to store the frequency of each character\n        # If the frequency is odd, add it to the result\n        # If the frequency is even, add it to the result\n        # If the frequency is 1, it means we have seen the character before, so we don't need it\n        # in the palindrome\n        freq = collections.Counter(s)\n        result = 0\n        for freq_char in freq.values():\n            result += freq_char // 2 * 2\n            if result % 2 == 0 and freq_char % 2 == 1:\n                result += 1\n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root_val = postorder[-1]\n        root_idx = inorder.index(root_val)\n        \n        root = TreeNode(root_val)\n        root.right = self.buildTree(inorder[root_idx+1:], postorder[root_idx: -1])\n        root.left = self.buildTree(inorder[:root_idx], postorder[:root_idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        heights = sorted([(v, r, c) for r, row in enumerate(forest) for v in row if v > 1)\n        m, n = len(forest), len(forest[0])\n        sr, sc = 0, 0\n        res = 0\n        for h, r, c in heights:\n            dist = self.bfs(forest, h, sr, sc)\n            if dist == -1: return -1\n            res += dist\n            sr, sc = r, c\n        return res"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # hashmap to store the cumulative sum and its frequency\n        # we iterate through the nums array and keep track of the cumulative sum\n        # if cumulative sum - target exists in the hashmap, we add the frequency of the cumulative sum - target to the answer\n        # if cumulative sum - k exists in the hashmap, we add the frequency of cumulative sum - k to the answer\n        # we add the cumulative sum to the hashmap\n        # time complexity: O(nlog(n))\n        # space complexity: O(n)\n        cum_sum = 0\n        hashmap = {0: 1}\n        ans = 0\n        for num in nums:\n            cum_sum += num\n            if cum_sum - upper in hashmap:\n                ans += hashmap[cum_sum - upper]\n            if cum_sum - lower in hashmap:\n                ans += hashmap[cum_sum - lower]\n            if cum_sum in hashmap:\n                hashmap[cum_sum] += 1\n            else:\n                hashmap[cum_sum] = 1\n            ans += hashmap[cum_sum - cum_sum]\n            # update the hashmap\n            # if cum_sum - num exists in the hashmap, we add the frequency of num to the answer\n            # if num exists in the hashmap, we add the frequency of num to the answer\n            # we add num to the hashmap\n            # time complexity: O(n)\n            # space complexity: O(n)\n        return ans"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + sqrt(1 + 8 * n)) / 2)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        \n        return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            queue = queue[len(level):]\n        \n        return result[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0 or (x % 10 == 0 and x != 0):\n            return False\n        \n        rev = 0\n        original = x\n        \n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n            \n        return rev == original or rev // 10 == original"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        one, two = 1, 1\n        \n        for c in s[1:]:\n            if c == '0':\n                one = 0\n            cur = one + two\n            if c != '0' and int(c) <= 6:\n                two = cur\n            if c == '7' or c > '2' * (c[0] - '0'):\n                cur = two\n            one = cur\n        \n        return one"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        s_ptr = 0\n        for char in t:\n            if s_ptr == len(s):\n                return True\n            if char == s[s_ptr]:\n                s_ptr += 1\n        \n        return s_ptr == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        res = [0]\n        for i in range(n):\n            res += [res[-1] | 1 << i]\n        return res[:(1<<n)]"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 2:\n            return n\n        \n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a + b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        wordSet = set(wordDict)\n        \n        for i in range(len(s)):\n            for word in wordSet:\n                if s[i - len(word) + 1:i + 1] == word and dp[i - len(word) + 1]:\n                    dp[i + 1] = True\n                    \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(root, lower = float('-inf'), upper = float('inf')):\n            if not root:\n                return True\n            \n            if root.val <= lower or root.val >= upper:\n                return False\n            \n            return helper(root.left, lower, root.val) and helper(root.right, root.val, upper)\n        \n        return helper(root)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        start, end = newInterval\n        res = []\n        \n        for interval in intervals:\n            if interval[1] < start:\n                res.append(interval)\n            elif end < interval[0]:\n                res.append([start, end])\n                start = interval[0]\n                end = interval[1]\n            else:\n                start = min(start, interval[0])\n                end = max(end, interval[1])\n        \n        res.append([start, end])\n        return res"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        if not s:\n            return [[]]\n        \n        dp = [[] for _ in s]\n        dp[0].append(s[0])\n        \n        for i in range(1, len(s)):\n            for j in range(i):\n                if s[j] == s[i] and (dp[j] or not dp[i-1]):\n                    dp[i].append(s[j:i+1])\n                    dp[i].extend(dp[j] + [s[j:i+1][::-1]] if dp[j] else [s[j:i+1]])\n        \n        return dp[-1] if dp[-1] else [s]"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # min heap\n        min_val = float('inf')\n        max_val = -min_val\n        heap = [(nums[i][0], i, 0) for i in range(len(nums))]\n        heapq.heapify(heap)\n        max_val = heap[0][0]\n        res = [min_val, max_val]\n        \n        for num in heap:\n            if num_val, idx, num_val_idx = heap[0] - min_val, num[1], heap[num_val_idx][1] + 1\n            if num_val_idx < len(nums[idx]):\n                max_val = max(max_val, nums[idx][num_val_idx])\n                heapq.heappush(heap, (nums[idx][num_val_idx], idx, num_val_idx + 1))\n            else:\n                break\n            \n            if max_val - min_val < res[1] - res[0]:\n                res = [min_val, max_val]\n                \n        return res"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # pigs = ceil(log(buckets) / (minutesToTest / minutesToDie))\n        # pigs * minutesToTest >= buckets\n        # pigs = log(buckets) / minutesToDie + 1\n        return ceil(log(buckets, minutesToDie + 1))"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        seen = {grid[0][0]: 0}\n        max_val = grid[n-1][n-1]\n        \n        dirs = [(0, 1), (1, 0), (-1, 0), (0, -1)]\n        \n        while heap[0][0] < max_val:\n            val, r, c = heapq.heappop(heap)\n            if r == c == n-1:\n                return val\n            \n            for dr, dc in dirs:\n                nr, nc = r + dr, c + dc\n                if nr < 0 or nr == n or nc < 0 or nc == n or grid[nr][nc] > val:\n                    continue\n                \n                if grid[nr][nc] > seen.get(seen.get(val, val), val):\n                    seen[grid[nr][nc]] = val\n                    heapq.heappush(heap, (val, nr, nc))\n                else:\n                    seen[val] = val\n                    heapq.heappush(heap, (val, nr, nc))\n                \n        return max_val"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [1] * n\n        \n        for i in range(1, m):\n            dp[0] *= i\n        \n        n_minus_one = n - 1\n        \n        divisor = dp[0]\n        \n        for i in range(1, m):\n            dp[n_minus_one] *= (n_minus_one - i)\n            divisor *= n_minus_one - i\n            n_minus_one -= 1\n            \n            dp[n_minus_one] //= divisor\n            \n        return dp[-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        res = 0\n        num1_rev = int(num1[::-1])\n        num2_rev = int(num2[::-1])\n        \n        for digit1 in num1_rev:\n            temp_res = num2_rev * digit1\n            res += num2_rev * (digit1 * 10)\n            num2_rev = temp_res\n            \n        return str(res)"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # buy1, buy2 = float('inf'), float('inf')\n        # profit = 0\n        # for price in prices:\n        #     buy1 = min(buy1, price)\n        #     profit = max(profit, price - buy1)\n        #     buy2 = min(buy2, price - profit)\n        # return profit\n        \n        # buy1, buy2 = prices[0], float('inf')\n        # profit = 0\n        # for price in prices:\n        #     buy1 = min(buy1, price)\n        #     profit = max(profit, price - buy1)\n        #     buy2 = min(buy2, price - profit)\n        # return profit\n        \n        buy1, buy2 = prices[0], float('inf')\n        profit = 0\n        for price in prices:\n            buy1 = min(buy1, price)\n            profit = max(profit, price - buy1)\n            buy2 = max(buy2, price - profit)\n        return profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        curr = []\n        self.dfs(candidates, target, 0, curr, res)\n        return res\n        \n    def dfs(self, nums, target, start, curr, res):\n        if target == 0:\n            res.append(curr[:])\n            return\n        \n        for i in xrange(start, len(nums)):\n            if nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            curr.append(nums[i])\n            self.dfs(nums, target - nums[i], i + 1, curr, res)\n            curr.pop()"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        \n        if word[1].isupper():\n            return all(word[1:].isupper())\n        \n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [], []\n        \n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res.append(root.val)\n                root = root.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root_val = preorder[0]\n        root_idx = inorder.index(root_val)\n        \n        root = TreeNode(root_val)\n        root.left = self.buildTree(preorder[1:root_idx+1], inorder[:root_idx])\n        root.right = self.buildTree(preorder[root_idx+1:], inorder[root_idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the number of left and right parentheses\n        left, right = 0, s.count('(')\n        # keep track of the set of valid strings\n        seen = {s}\n        # iterate over the string, removing invalid parentheses\n        for c in s:\n            if c == '(':\n                right -= 1\n            elif right:\n                right -= 1\n                seen |= {rem[0:i] + rem[i+1:]\n                        for rem in seen if rem.count('(') > right}\n            # if no more right parentheses, we have found all valid strings\n            if not right:\n                return list(seen)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists or len(lists) == 0:\n            return None\n        \n        import heapq\n        minHeap = []\n        dummy = ListNode(0)\n        curr = dummy\n        \n        for node in lists:\n            if node:\n                heapq.heappush(minHeap, (node.val, node))\n                \n        while minHeap:\n            val, node = heapq.heappop(minHeap)\n            curr.next = node\n            if node.next:\n                heapq.heappush(minHeap, (node.next.val, node.next))\n            curr = curr.next\n            \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n <= 1:\n            return 0\n        \n        dp = [n-1] * (n+1)\n        dp[0] = -1\n        p_table = [True] + [False] * n\n        for i in range(1, n+1):\n            for j in range(i):\n                if p_table[j] and s[j:i] == s[j:i][::-1]:\n                    p_table[i] = True\n                    dp[i] = min(dp[i], dp[j] + 1)\n           \n        return dp[n]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1, 5, 12, 26, 56, 126, 286, 586, 1286, 2886, 5886, 12886, 28886, 58886, 128886, 288886, 588886, 1288886, 2888886, 5888886, 12888886, 28888886, 58888886, 128888886, 288888886, 588888886, 1288888886, 2888888886, 5888888886, 12888888886, 28888888886, 58888888886, 128888888886, 288888888886, 588888888886, 1288888888886, 2888888888886, 5888888888886, 12888888888886, 28888888888886, 58888888888886, 128888888888886, 288888888888886, 588888888888886, 1288888888888886, 2888888888888886, 5888888888888886, 12888888888888886, 28888888888888886, 58888888888888886, 128888888888888886, 288888888888888886, 588888888888888886, 1288888888888888886, 2888888888888888886, 5888888888888888886, 12888888888888888886, 28888888888888888886, 58888888888888888886, 128888888888888888886, 288888888888888888886, 588888888888888888886, 1288888888888888888886, 2888888888888888888886, 5888888888888888888886, 12888888888888888888886, 28888888888888888888886, 58888888888888888888886, 128888888888888888888886, 288888888888888888888886, 588888"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # build a hashmap with word as key and index as value\n        word_map = {word: i for i, word in enumerate(words)}\n        \n        # build a hashmap with reversed word as key and index as value\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is in the hashmap\n        # if word is a palindrome, then its reverse is not in the hashmap\n        # if word is not a palindrome, then its reverse is in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palindrome, then its reverse is not in the hashmap\n        # if word is a palindrome, then its reverse is also a palindrome\n        # if word is not a palind"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        total_infected = sum(sum(row) for row in isInfected)\n        if total_infected <= m * n // 4:\n            return 0\n        \n        # BFS to find the largest region\n        infected_cnt = 0\n        max_region = 0\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        seen = set()\n        for r in xrange(m):\n            for c in xrange(n):\n                if isInfected[r][c] == 1:\n                    queue = collections.deque([(r, c)])\n                    cur_infected = 1\n                    seen.add((r, c))\n                    while queue:\n                        r, c = queue.popleft()\n                        for dr, dc in dirs:\n                            nr, nc = r + dr, c + dc\n                            if nr < 0 or nr >= m or nc < 0 or nc >= n or isInfected[nr][nc] == 3:\n                                continue\n                            if isInfected[nr][nc] == 1:\n                                cur_infected += 1\n                            if isInfected[nr][nc] == 0 and (nr, nc) not in seen:\n                                seen.add((nr, nc))\n                                queue.append((nr, nc))\n                    max_region = max(max_region, cur_infected)\n                    infected_cnt += cur_infected\n        return total_infected - max_region"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]: return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        cache = {}\n        longest = 1\n        \n        def dfs(i, j):\n            if (i, j) in cache: return cache[(i, j)]\n            \n            res = 1\n            for x, y in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    res = max(res, 1 + dfs(x, y))\n            \n            cache[(i, j)] = res\n            return res\n        \n        for i in range(m):\n            for j in range(n):\n                longest = max(longest, dfs(i, j))\n        \n        return longest"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        ones = 0\n        power = 1\n        \n        while n >= power:\n            ones += (n / power) * power + (n % power if n % power >= 1 else 0)\n            power *= 10\n            \n        return ones"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        dp = {0: set()}\n        for word in wordDict:\n            if word not in dp:\n                dp[len(word)] = set()\n            dp[len(word)].add(word)\n        \n        for i in range(1, len(s) + 1):\n            for word in dp[i - 1]:\n                if word in dp.get(s[i - len(word):]):\n                    if i - len(word) - 1 >= 0:\n                        dp[i].add(s[i - len(word):word])\n                    else:\n                        dp[i].add(word)\n        \n        if s in dp:\n            return [s.replace(word, ' ' * len(word)) for word in dp[s]]\n        return []"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            size = len(queue)\n            for _ in range(size):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                    \n            result.append(level)\n            left_to_right = not left_to_right\n            \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(9, -1, -1):\n            m = turnedOn - h\n            if m > 5:\n                continue\n            comb = math.comb(4, m)\n            if comb < 128:\n                res.append('%d:%02d' % (h, comb))\n        \n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        res = [[1] * (i + 1) for i in range(numRows)]\n        \n        for i in range(2, numRows):\n            for j in range(1, i):\n                res[i][j] = res[i - 1][j - 1] + res[i - 1][j]\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return 1162261467 % n == 0"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + node.val + right_gain)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]: return 0\n        \n        n, m = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][m-1], i, m-1) for i in range(n)]\n        seen = set({(0,0) | (n-1, m-1)})\n        res = 0\n        dirs = [(1,0), (-1,0), (0,1), (0,-1)]\n        max_h = float('-inf')\n        \n        for h, x, y in heap:\n            max_h = max(max_h, h)\n            if seen & {(x,y)}: continue\n            res += max_h - h\n            seen.add((x,y))\n            for dx, dy in dirs:\n                if x + dx >= 0 and x + dx < n and y + dy >= 0 and y + dy < m and (nx,ny) not in seen:\n                    heapq.heappush(heap, (heightMap[nx][ny], nx, ny))\n                    seen.add((nx,ny))\n        \n        return res"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase and remove non-alphanumeric characters\n        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # O(n) time and O(k) space\n        # Use a min heap to keep track of the median\n        # If the number is larger than the median, add it to the min heap\n        # If the number is smaller than the median, remove it from the max heap\n        # If the size of the min heap is larger than k, remove the largest number\n        # If the size of the min heap is smaller than k, add the median\n        # Time: O(nlogk)\n        # Space: O(k)\n        \n        if not nums:\n            return []\n        \n        median = (len(nums) - 1) // 2\n        min_heap = nums[:k]\n        if nums[k] > min_heap[median]:\n            heapq.heappush(min_heap, nums[k])\n        else:\n            heapq.heappush(min_heap, min_heap[median])\n            heapq.heappush(min_heap, nums[k])\n        result = [min_heap[median]]\n        for i in range(k, len(nums)):\n            if nums[i] > min_heap[median]:\n                heapq.heappush(min_heap, nums[i])\n            elif nums[i] < min_heap[median]:\n                heapq.heappush(min_heap, min_heap[median])\n                heapq.heappush(min_heap, nums[i])\n            if len(min_heap) > k:\n                heapq.heappop(min_heap)\n            result.append(min_heap[median])\n        return [num / 2.0 if len(min_heap) % 2 else min_heap[median] for num in result]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k %= length\n        if k == 0:\n            return head\n        \n        slow = fast = head\n        for _ in range(k):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        fast.next = head\n        head = slow.next\n        slow.next = None\n        \n        return head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return self.isUgly(n // 2)\n        \n        if n % 3 == 0:\n            return self.isUgly(n // 3)\n        \n        if n % 5 == 0:\n            return self.isUgly(n // 5)\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(nlogn) time, O(n) space\n        # maintain a max height for each position\n        # maintain a max height for each square\n        # if the square is falling, update max height\n        # if the square is rising, update max height\n        # return max height\n        \n        max_height = 0\n        max_height_map = {0: 0}\n        res = [0]\n        for pos, height in positions:\n            new_max = max_height + height\n            max_height = max(max_height, max_height_map.get(new_max, 0) + height)\n            max_height_map[pos] = max_height\n            max_height_map[pos + height] = max_height\n            res.append(max_height)\n        return res[1:]"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        if m * n <= k: return max(matrix[i][j] for i in range(m) for j in range(n))\n        \n        row_sums = [0] * n\n        max_sum = float('-inf')\n        for row in matrix:\n            for j in range(n - 1, -1, -1):\n                row_sums[j] += row[j] if j else row_sums[j] + row[j]\n                num = row_sums[j] if row_sums[j] <= k else row_sums[row_sums[j] - k]\n                max_sum = max(max_sum, num if max_sum != float('-inf') else row_sums[row_sums[j] - k])\n                if max_sum == k: return k\n                if num in row_sums: max_sum = max(max_sum, row_sums[num] - num)\n                row_sums[row_sums[j]] = row_sums[row_sums[j]] + row_sums[j] if row_sums[row_sums[j]] else row_sums[num]\n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        sign = 1 if dividend > 0 == divisor > 0 else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        \n        if dividend < divisor:\n            return 0\n        \n        quotient = 1\n        temp = divisor\n        \n        while temp <= dividend:\n            if temp <= dividend - temp:\n                quotient <<= 1\n                temp <<= 1\n            else:\n                quotient += 1\n                dividend -= temp\n                \n        return sign * quotient"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board or not board[0]: return\n        \n        m, n = len(board), len(board[0])\n        \n        # mark all the O's on the border as 'T'\n        for i in range(m):\n            if board[i][0] == 'O':\n                self.mark(board, i, 0)\n            if board[i][n-1] == 'O':\n                self.mark(board, i, n-1)\n        for j in range(n):\n            if board[0][j] == 'O':\n                self.mark(board, 0, j)\n            if board[m-1][j] == 'O':\n                self.mark(board, m-1, j)\n        \n        # change all the rest of the O's to X\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n        \n        \n    def mark(self, board, i, j):\n        if board[i][j] == 'O':\n            board[i][j] = 'T'\n            if i > 0:\n                self.mark(board, i-1, j)\n            if j > 0:\n                self.mark(board, i, j-1)\n            if i < len(board) - 1:\n                self.mark(board, i+1, j)\n            if j < len(board[0]) - 1:\n                self.mark(board, i, j+1)"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        hashmap = {}\n        \n        for i, num in enumerate(nums):\n            if num in hashmap:\n                return [hashmap[num], i]\n            hashmap[target - num] = i\n        \n        return None"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if not any(c % 4 == 3 for c in set(cards)):\n            return True\n        \n        seen = set([c * c for c in cards])\n        \n        for c1 in seen:\n            if c1 in seen:\n                return True\n            candidates = set([c1 / 4.0, c1 / 2.0, c1 * 3.0])\n            for c2 in seen - candidates:\n                if c2 * 4 in seen or c2 * 2 in seen or c2 in candidates:\n                    return True\n                candidates.add(c2 - c1)\n                if c2 * 2 in seen:\n                    candidates.add(c1 / 2.0)\n                if c1 * 3 in seen:\n                    candidates.add(c2 / 3.0)\n            seen = candidates\n        \n        return False"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        s_len = len(s)\n        p_len = len(p)\n        \n        dp = [[False for _ in range(p_len + 1)] for _ in range(s_len + 1)]\n        dp[0][0] = True\n        \n        for i in range(1, p_len + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = True\n        \n        for i in range(1, s_len + 1):\n            for j in range(1, p_len + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i - 1][j] or dp[i][j - 1]\n                elif p[j - 1] == '?' or s[i - 1] == p[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n        \n        return dp[s_len][p_len]"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a hashmap to store the tickets\n        # sort the tickets by departure airport\n        # iterate over the hashmap in reverse order\n        # if there is a key with no outgoing edges, add it to the result\n        # decrement the value of the key\n        # if the value becomes 0, remove it from the hashmap\n        # repeat until the hashmap is empty\n        \n        # Time: O(E + KlogK) where E is the number of edges and K is the number of tickets\n        # Space: O(E + K)\n        \n        # build a hashmap to store the tickets\n        # sort the tickets by departure airport\n        # iterate over the hashmap in reverse order\n        # if there is a key with no outgoing edges, add it to the result\n        # decrement the value of the key\n        # if the value becomes 0, remove it from the hashmap\n        # repeat until the hashmap is empty\n        \n        hashmap = collections.defaultdict(list)\n        for departure, arrival in tickets:\n            hashmap[departure].append(arrival)\n        \n        # sort the tickets by departure airport\n        for departure in hashmap:\n            hashmap[departure].sort(reverse = True)\n        \n        result = ['JFK']\n        # iterate over the hashmap in reverse order\n        while hashmap:\n            departure = result[-1]\n            if departure not in hashmap:\n                continue\n            arrival = hashmap[departure].pop()\n            result.append(arrival)\n            if not hashmap[arrival]:\n                del hashmap[arrival]\n        \n        return result"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = {}\n        for i in range(len(nums)-3):\n            if nums[i]*4 > target:\n                break\n            if nums[i]*nums[i+1]*2 > target:\n                if nums[i]*nums[i+1] in res:\n                    for val in res[nums[i]*nums[i+1]]:\n                        if val[0] == nums[i]:\n                            res[nums[i]*nums[i+1]].append([nums[i], val[1]])\n                else:\n                    res[nums[i]*nums[i+1]] = []\n            d = {}\n            for j in range(i+1, len(nums)-2):\n                if nums[j]*2 in d:\n                    for val in d[nums[j]*2]:\n                        if val[1] > j:\n                            res[nums[i] + nums[j] + val[0]].append([nums[j], val[1]])\n                if nums[j] in d:\n                    d[nums[j]] += [(nums[j], j)]\n                else:\n                    d[nums[j]] = [(nums[j], j)]\n            if nums[i]*nums[i+1] in d:\n                for val in d[nums[i]*nums[i+1]]:\n                    if val[0] == nums[i]:\n                        res[nums[i]*nums[i+1]].append([nums[i], val[1]])\n        return [list(val) for val in res.get(target//4, [])]"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort by left, and add height to heap\n        # if height is negative, add to heap\n        # if height is 0, remove from heap\n        # if new height is different, update result\n        # return result\n        heap = [(-b[2], b[1]) for b in buildings]\n        heapq.heapify(heap)\n        res = [(-heap[0][0], b[1])]\n        for r in sorted([h[1] for h in heap] + [-b[0] for b in buildings]):\n            if res[-1][1] != r:\n                res.append((r, -h))\n            else:\n                heapq.heappush(heap, (-h, r))\n        return res[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        dp = triangle[-1]\n        for row in triangle[::-1][1:]:\n            for i, num in enumerate(row):\n                dp[i] = num + min(dp[i], dp[i+1])\n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        thousands = ['', 'Thousand', 'Million', 'Billion']\n        \n        res = ''\n        i = 0\n        while num > 0:\n            if num % 1000 != 0:\n                res = ones[num % 1000] + ' ' + thousands[i] + res if res else ones[num % 1000] + res\n            num //= 1000\n            i += 1\n            if num == 0:\n                break\n            res = ' ' + tens[num % 10] + res if num % 10 else res\n            num //= 10\n            \n        return res.strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [0] * (k+1)\n        dp[0] = 1\n        \n        for i in range(1, n+1):\n            cur = (dp[k] - (dp[k-i] if k-i >= 1 else 0) + MOD) % MOD\n            dp[i] = (cur - dp[i-1] + MOD) % MOD\n            cur = (cur - dp[i-1] + MOD) % MOD\n            dp[i] = (cur - dp[i-1] + MOD) % MOD\n            \n        return dp[k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            curr.next = second\n            first.next = second.next\n            second.next = first\n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        curr = head\n        \n        while curr:\n            if curr.val < x:\n                curr1.next = curr\n                curr1 = curr1.next\n            else:\n                curr2.next = curr\n                curr2 = curr2.next\n            curr = curr.next\n            \n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge case: if there is a cycle, return the edge that creates the cycle\n        # otherwise, we can find the parent of each node, and if there is a node with more than 1 parent, return that node\n        # otherwise, return the edge that creates the cycle\n        parent = {}\n        parent_edge = None\n        edge_map = {}\n        \n        for edge in edges:\n            if edge[1] in edge_map:\n                parent_edge = edge\n                parent[edge[1]] = edge[0]\n            else:\n                edge_map[edge[1]] = edge[0]\n            if parent[edge[0]]:\n                return [parent[edge[0]], edge[1]]\n            else:\n                parent[edge[0]] = edge[1]\n        \n        # if there is no parent, it means there is no cycle, return the edge that creates the cycle\n        if parent_edge:\n            return parent_edge\n        \n        # otherwise, find the node with more than 1 parent\n        parent = {}\n        for edge in edges:\n            if edge[1] in parent:\n                return edge\n            parent[edge[1]] = edge[0]\n        \n        return [parent[edge_map[parent[edge[0]]]], edge_map[parent[edge[0]]]]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [nums]\n        seen = {nums: True}\n        \n        for num in nums[1:]:\n            if num != nums[len(res) - 1]:\n                new_res = []\n                seen = {}\n            new_res.extend(n * [num] + res[r] for n in seen.get(num, []) for r in res)\n            seen[num] = new_res\n            res.extend(new_res)\n            \n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        return 1 + (num - 1) % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR of a number with itself is 0\n        # XOR of a number with 0 is the number itself\n        # so we can use XOR to find the single number\n        ans = 0\n        for num in nums:\n            ans ^= num\n        return ans"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words and get the last word\n        return len(s.split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * (n + 1) for _ in xrange(n + 1)]\n        dp[1][1] = grid[0][0]\n        \n        for r in grid[::-1]:\n            for c1, c2 in zip(dp[1:], dp[n - 1][1:][::-1]):\n                for c in (c1, c2) + (c1 if c2 > c1 else c2):\n                    if r[c] == -1:\n                        c = 0\n                    c += r[c - 1]\n                dp[c] = c\n        \n        return dp[n][n] if dp[n][n] > 0 else 0"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [1, 2, 4]\n        if n < 3:\n            return dp[n]\n        \n        a, l, p = 1, 2, 4\n        for i in range(3, n + 1):\n            a, l, p = (a + l + p) % mod, (a + p) % mod, (2 * l + p) % mod\n        \n        return (a * (a + 1) * p + a * l * (a + p) + l * (l + 1) * p) % mod"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        while True:\n            slow = sum(int(d)**2 for d in str(slow))\n            if slow == 1:\n                return True\n            fast = sum(int(d)**2 for d in str(fast)\n                       if fast in (slow, 1))\n            if fast == 1:\n                return True\n            if slow == fast:\n                return False"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reach = 0\n        \n        for i, num in enumerate(nums):\n            if max_reach < i:\n                return False\n            max_reach = max(max_reach, num + i)\n        \n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not grid or not grid[0]: return 0\n        \n        m, n = len(grid), len(grid[0])\n        \n        for i in range(1, m):\n            grid[i][0] += grid[i-1]\n        \n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        res = '1'\n        curr = res\n        for i in range(2, n+1):\n            curr = res\n            res = ''\n            count = 1\n            for j in range(1, len(curr)):\n                if curr[j] == curr[j-1]:\n                    count += 1\n                else:\n                    res += str(count) + curr[j-1]\n                    count = 1\n            res += str(count) + curr[-1]\n            \n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search on the max value in nums\n        lo, hi = max(nums), sum(nums)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            # if we can split nums into k subarrays with sum at least mid,\n            # then try to find a smaller mid\n            if self.canSplit(nums, mid, k):\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digitToChar = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n        \n        res = [digitToChar[digits[0]]]\n        \n        for digit in digits[1:]:\n            temp = res\n            res = []\n            for char in digitToChar[digit]:\n                for c in temp:\n                    res.append(c + char)\n        \n        return res if res else []"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        curr = [0] * (target + 1)\n        curr[0] = 1\n        \n        for num in candidates:\n            for i in range(num, target + 1):\n                curr[i] += curr[i - num]\n            if curr[num] > 0:\n                res += [ [num] * curr[num] for num in curr[num:]]\n                \n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) + 1) if int(n) + 1 >= 10**(len(n) - 1) else '1' + '0' * (len(n) - 1)\n        \n        num = int(n)\n        palindrome = {int(str(num - (10**(len(n) - 1) - 1 if num >= 10**(len(n) - 1) - 1)) + (10**(len(n) - 1) - num if num >= 10**(len(n) - 1) - 1 else '')), num - 1, num, num + 1, int(str(num + 1) + str(num)[::-1][1:])}\n        \n        if num - 1 in palindrome:\n            return str(palindrome[num - 1])\n        if num in palindrome:\n            return str(palindrome[num])\n        return min(palindrome, key = lambda x: abs(x - num))"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n-1, 0, n-1\n        \n        while left <= right and top <= bottom:\n            for col in range(left, right+1):\n                matrix[top][col] = num\n                num += 1\n            top += 1\n            \n            for row in range(top, bottom+1):\n                matrix[row][right] = num\n                num += 1\n            right -= 1\n            \n            if top > bottom:\n                break\n            \n            for col in range(right, left-1, -1):\n                matrix[bottom][col] = num\n                num += 1\n            bottom -= 1\n            \n            if left > right:\n                break\n            \n            for row in range(bottom, top-1, -1):\n                matrix[row][left] = num\n                num += 1\n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n            x = -x\n        else:\n            sign = 1\n            \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            if rev > 2**31 - 1:\n                return 0\n            x //= 10\n            \n        return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[j][i], matrix[i][j] = matrix[i][j], matrix[j][i]\n        \n        # reverse each row\n        for row in matrix:\n            row.reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        res = max_prod\n        \n        for num in nums[1:]:\n            curr_max = max_prod * num\n            curr_min = min_prod * num\n            \n            max_prod = max(curr_max, curr_min, num)\n            min_prod = min(curr_max, curr_min, num)\n            \n            res = max(max_prod, res)\n            \n            if num < 0:\n                max_prod, min_prod = min_prod, max_prod\n                \n        return res"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        d = {stone: set() for stone in stones}\n        d[stones[0]] = {1}\n        \n        for stone in stones:\n            if stone in d:\n                for val in d[stone]:\n                    if stone + val + 1 in d:\n                        d[stone + val + 1].add(val + 1)\n                    if val > 1 and stone + val - 1 in d:\n                        d[stone + val - 1].add(val)\n                    if stone in d:\n                        d[stone + val].add(val)\n                \n        return d[stones[-1]] != set()"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score_map = {s: i for i, s in enumerate(score, 1)}\n        score.sort(reverse=True)\n        \n        res = [None] * len(score)\n        for i, s in enumerate(score):\n            if i in score_map:\n                res[score_map[s]] = \"Gold Medal\" if i == 1 else str(i + 1)\n            score_map[s] = i\n            \n        return res"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        char_to_index = {}\n        max_len = 0\n        left = 0\n        \n        for right in range(len(s)):\n            if s[right] in char_to_index:\n                left = max(char_to_index[s[right]] + 1, left)\n            \n            max_len = max(max_len, right - left + 1)\n            char_to_index[s[right]] = right\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_map = collections.Counter(words)\n        word_len = len(words[0])\n        word_count = len(word_map)\n        window_len = word_len * word_count\n        window_map = collections.defaultdict(int)\n        \n        for i in range(0, len(s) - window_len + 1):\n            if s[i:i + window_len] in word_map:\n                window_map[s[i:i + window_len]] += 1\n                if window_map[s[i:i + window_len]] == word_map[s[i:i + window_len]]:\n                    word_count += 1\n                if window_map[s[i:i + word_len]] == word_map[s[i:i + word_len]]:\n                    word_count -= 1\n            else:\n                window_map.clear()\n                window_map[s[i:i + word_len]] = 1\n                if word_map[s[i:i + word_len]] == 1:\n                    word_count = 1\n            \n            if word_count == word_count_map:\n                if window_map[s[i:i + word_len]] == word_map[s[i:i + word_len]]:\n                    word_count -= 1\n                window_map[s[i:i + word_len]] -= 1\n                if window_map[s[i + window_len:i + window_len + word_len]] == word_map[s[i + window_len:i + window_len + word_len]]:\n                    word_count += 1\n                if word_map[s[i + window_len:i + window_len + word_len]] == 1:\n                    word_count -= 1\n                if word_count == 1:\n                    res.append(i + word_len)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_num = max(arr)\n        res = 1\n        curr_max = 0\n        \n        for i, num in enumerate(arr):\n            if num > curr_max:\n                curr_max = num\n            if curr_max == i:\n                res += 1\n                curr_max = max_num\n                \n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = dummy.next\n            prev = dummy\n            \n            while prev.next and prev.next.val < curr.val:\n                prev = prev.next\n                \n            curr.next = prev.next\n            prev.next = curr\n            curr = temp\n            \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        dummy = ListNode(0, head)\n        curr = dummy\n        \n        while head:\n            if head.next and head.val == head.next.val:\n                while head.next and head.val == head.next.val:\n                    head = head.next\n                curr.next = head.next\n            else:\n                curr = curr.next\n            head = head.next\n            \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if nums[i] > 0:\n                break\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            left, right = i+1, len(nums)-1\n            while left < right:\n                if nums[left] + nums[right] + nums[i] == 0:\n                    res.append([nums[i], nums[left], nums[right]])\n                    left += 1\n                    while left < right and nums[left] == nums[left-1]:\n                        left += 1\n                elif nums[left] + nums[right] + nums[i] < 0:\n                    left += 1\n                else:\n                    right -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n            \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        paths = []\n        path = str(root.val)\n        if not root.left and not root.right:\n            return [path]\n        \n        if root.left:\n            paths += self.binaryTreePaths(root.left)\n        if root.right:\n            paths += self.binaryTreePaths(root.right)\n        \n        return [path + '->' + path_str for path_str in paths]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [2 * n - 1 for n in nums]\n        nums = sorted(set(nums))\n        return self.merge(nums)\n        \n    def merge(self, nums):\n        count = 0\n        cnt = {n: 0 for n in nums}\n        for n in nums:\n            count += cnt[n // 2]\n            cnt[n] += 1\n        return count"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if tx < sx or ty < sy:\n            return False\n        \n        if sx == tx and sy <= ty:\n            return (ty - sy) % ty == 0\n        \n        if sy == ty and sx <= tx:\n            return (tx - sx) % tx == 0\n        \n        if sy < tx and ty < sx:\n            return False\n        \n        if sy == sx:\n            return (ty - sy - 1) % sx == 0\n        \n        return self.reachingPoints(sy % tx, sx, tx, ty)"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(v) for v in version1.split('.')]\n        v2 = [int(v) for v in version2.split('.')]\n        \n        for v1_num, v2_num in zip(v1, v2):\n            if v1_num > v2_num:\n                return 1\n            if v1_num < v2_num:\n                return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            max_profit = max(max_profit, price - min_price)\n            min_price = min(min_price, price)\n            \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        \n        # max heap\n        pq = []\n        \n        # total time\n        curr_time = 0\n        \n        for duration, end_time in courses:\n            curr_time += duration\n            heapq.heappush(pq, -duration)\n            \n            # if curr_time > end_time, remove the longest course\n            if curr_time > end_time:\n                curr_time += heapq.heappop(pq)\n            \n            # update max heap\n            heapq.heapify(pq)\n            \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        curr = dummy\n        while curr:\n            next_group_head = curr.next\n            curr.next = None\n            curr = self.reverse_group(next_group_head, k)\n            next_group_head.next = curr\n            curr = next_group_head\n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2 or s[1] != s[0]:\n            return False\n        \n        n = len(s)\n        substr = s[0] * (n // 2)\n        if substr == s:\n            return True\n        \n        if substr in s:\n            return True\n        \n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n                \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR with the same number will cancel out the contribution of that number\n        # XOR with 0 will leave the contribution of that number\n        # XOR with the number twice will leave the number\n        # so we XOR all the numbers in the array\n        # the number that doesn't have a contribution is the single number\n        res = 0\n        for num in nums:\n            res ^= num\n        return res"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # count the frequency of each letter in target\n        count = collections.Counter(c - ord('a') for c in collections.Counter(target) if c > 0)\n        \n        # dp[c] is the min number of stickers needed to form target with count[c]\n        dp = {count[c]: -1 for c in count}\n        dp[0] = 0\n        \n        for s in stickers:\n            new_count = collections.Counter(c - ord('a') for c in count + collections.Counter(s))\n            new_dp = {new_count[c]: float('inf') for c in new_count}\n            for c in dp:\n                if new_count[c]:\n                    new_dp[new_count[c]] = min(new_dp[new_count[c]], dp[c] + 1)\n                for nc in new_count:\n                    new_dp[nc] = min(new_dp[nc], dp[nc] + (new_count[nc] if new_count[nc] > c else 1))\n            dp = new_dp\n        \n        return dp[count[0]] if dp[count[0]] < float('inf') else -1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [1] * n\n        \n        for i in range(1, n):\n            dp[i] = dp[i - 1] + 1\n            prev = s[i]\n            \n            for j in range(i - 1, -1, -1):\n                if s[j] == prev:\n                    dp[i] = min(dp[i], dp[j] + 1)\n                else:\n                    break\n                \n        return dp[-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid <= x:\n                low = mid + 1\n                ans = mid\n            else:\n                high = mid - 1\n        \n        return ans"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_map = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        prev = 0\n        \n        for c in s[::-1]:\n            curr = roman_map[c]\n            if curr < prev:\n                total -= curr\n            else:\n                total += curr\n            prev = curr\n            \n        return total"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = []\n        res = []\n        \n        for i in range(len(nums)):\n            if q and q[0] == i - k:\n                q.pop(0)\n            while q and nums[q[-1]] <= nums[i]:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        \n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n            \n        m, n = len(nums1), len(nums2)\n        if n == 0:\n            if m % 2 == 1:\n                return nums1[m//2]\n            else:\n                return (nums1[m//2 - 1] + nums1[m//2]) / 2.0\n        \n        left_min, left_max = 0, m\n        while left_min <= left_max:\n            mid2 = (left_min + left_max) // 2\n            mid1 = (m + n + 1) // 2 - mid2\n            \n            if nums1[mid1] < nums2[mid2]:\n                left_min = mid2 + 1\n            else:\n                left_max = mid2 - 1\n                \n        mid2 = left_min\n        if mid2 == 0:\n            num1_min = float('-inf')\n        else:\n            num1_min = nums1[mid2 - 1]\n        if (m + n) % 2 == 1:\n            return num1_min\n        \n        num2_min = nums2[mid2]\n        if mid2 == n:\n            num2_min = float('inf')\n        else:\n            num2_min = nums2[mid2 + 1]\n            \n        return (num1_min + num2_min) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        \n        if nums[left] <= nums[right]:\n            return nums[left]\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return nums[right]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        row = [1, 1]\n        \n        for i in range(1, rowIndex):\n            row = [1, row[0] + row[1]] + [1 for _ in row[1: -1]] + [1]\n            \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # paths = {0: [ [root.val] ]}\n        # total = root.val\n        # left_paths = paths.get(total - targetSum, [])\n        \n        # for path in left_paths:\n        #     paths[total + root.val] = [path + [root.val]]\n        \n        # if root.left:\n        #     left_paths = paths.get(total + root.left.val, [])\n        #     left_paths.extend(pathSum(root.left, targetSum) for path in left_paths)\n        #     paths[total + root.left.val] = left_paths\n        \n        # if root.right:\n        #     right_paths = paths.get(total + root.right.val, [])\n        #     right_paths.extend(pathSum(root.right, targetSum) for path in right_paths)\n        #     paths[total + root.right.val] = right_paths\n        \n        # return paths.get(targetSum, [])\n        \n        if not root:\n            return []\n        \n        res = []\n        stack = [(root, root.val, [root.val])]\n        \n        while stack:\n            node, val, path = stack.pop()\n            if val == targetSum and not node.left and not node.right:\n                res.append(path)\n            if node.right:\n                stack.append((node.right, val + node.right.val, path + [node.right.val]))\n            if node.left:\n                stack.append((node.left, val + node.left.val, path + [node.left.val]))\n                \n        return res"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        sqrt = area ** 0.5\n        if sqrt * sqrt == area:\n            return [int(sqrt), sqrt]\n        \n        w = sqrt\n        while area % w:\n            w -= 1\n        return [area // w, w]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        wordSet = set(wordList)\n        if endWord not in wordSet:\n            return []\n        \n        ladder = {beginWord: [beginWord]}\n        queue = collections.deque([beginWord])\n        found = False\n        \n        while queue and not found:\n            size = len(ladder)\n            nextLadder = collections.defaultdict(set)\n            for word in ladder.keys():\n                for i in range(len(word)):\n                    newWord = word[:i] + '*' + word[i+1:]\n                    for neighbor in wordSet & wordSet - set(nextLadder[newWord]):\n                        nextLadder[neighbor].add(word)\n            for word in nextLadder:\n                if word in nextLadder:\n                    if word in nextLadder[word]:\n                        found = True\n                    nextLadder[word] |= nextLadder[word]\n                elif word in nextLadder:\n                    nextLadder[word] |= nextLadder[word]\n            if not found:\n                ladder = nextLadder\n        \n        res = []\n        if endWord in ladder:\n            res = [endWord] + [word for word in ladder[endWord] if word in ladder]\n            res.reverse()\n        \n        return res[::-1] if res else []"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            \n            left = height(root.left)\n            if left == -1:\n                return -1\n            \n            right = height(root.right)\n            if right == -1:\n                return -1\n            \n            if abs(left - right) > 1:\n                return -1\n            \n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and not n & (n - 1)"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = {()}\n        unique_nums = set()\n        \n        for num in nums:\n            unique_nums.add(num)\n            res = res | {nums_subset | {num} for nums_subset in res}\n        \n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        heights.append(0)\n        \n        for i, h in enumerate(heights):\n            if not stack or h > heights[stack[-1]]:\n                stack.append(i)\n            else:\n                while stack and heights[stack[-1]] > h:\n                    height = heights[stack.pop()]\n                    width = i - stack[-1] - 1 if stack else i\n                    max_area = max(max_area, height * width)\n                stack.append(i)\n        \n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    sign = 1 if first * second > 0 else -1\n                    stack.append(sign * (abs(first) // second))\n            else:\n                stack.append(int(token))\n        return stack.pop()"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        seen = set()\n        \n        for x1, y1, x2, y2 in rectangles:\n            area += (x2 - x1) * (y2 - y1)\n            x_min = min(x_min, x1)\n            y_min = min(y_min, y1)\n            x_max = max(x_max, x2)\n            y_max = max(y_max, y2)\n            if (x1, y1) in seen or (x1, y2) in seen or (x2, y1) in seen or (x2, y2) in seen:\n                seen.remove((x1, y1))\n                seen.remove((x1, y2))\n                seen.remove((x2, y1))\n                seen.remove((x2, y2))\n            else:\n                seen.add((x1, y1))\n                seen.add((x1, y2))\n                seen.add((x2, y1))\n                seen.add((x2, y2))\n        \n        if (x_min, y_min) in seen and (x_min, y_max) in seen and (x_max, y_min) in seen and (x_max, y_max) in seen:\n            return area == (x_max - x_min) * (y_max - y_min)\n        \n        return False"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        \n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        curr_sum = nums[0]\n        max_sum = nums[0]\n        \n        for num in nums[1:]:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n            \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = board[0][0]*4 + board[1][0]*2 + board[1][1]\n        if num == 12345: return 0\n        \n        # convert to a dictionary\n        d = {1:{2,3,5}, 2:{1,4,6}, 3:{1,4,7}, 4:{2,5,8}, 5:{3,6,9}, 6:{4,7,9}, 7:{5,8,9}}\n        if num in d: return len(d[num]) - 1\n        \n        # convert to a queue\n        q = collections.deque([num])\n        seen = {num}\n        steps = 0\n        while q:\n            size = len(q)\n            for _ in range(size):\n                num = q.popleft()\n                if num == 12345: return steps\n                for nxt in d[num % 10]:\n                    nxt_num = num // 10 + nxt\n                    if nxt_num not in seen:\n                        seen.add(nxt_num)\n                        q.append(nxt_num)\n                num //= 10\n            steps += 1\n        return -1"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for c1, c2 in zip(s, t):\n            if c1 in s_to_t and s_to_t[c1] != c2:\n                return False\n            if c2 in t_to_s and t_to_s[c2] != c1:\n                return False\n            s_to_t[c1] = c2\n            t_to_s[c2] = c1\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] == nums[left]:\n                left += 1\n            elif nums[mid] > nums[left]:\n                if nums[mid] > target and nums[left] <= target:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target or nums[right] >= target:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [1] * n\n        \n        for i in range(m - 1, -1, -1):\n            if obstacleGrid[i][n - 1] == 1:\n                dp[n - 1] = 0\n            else:\n                dp[n - 1] = 1\n            for j in n - 2, n - 1:\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                else:\n                    dp[j] += dp[j + 1]\n        \n        return dp[n - 1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        one, two = 1, 1\n        \n        for c in s[1:]:\n            if c == '0':\n                one = 0\n            one, two = two, one + (c != '0' and two)\n            if c != '0' and int(c) > 6:\n                two = one\n                \n        return one"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest_sum = nums[0] + nums[1] + nums[2]\n        n = len(nums)\n        \n        for i in range(n-2):\n            left = i + 1\n            right = n - 1\n            \n            while left < right:\n                curr_sum = nums[i] + nums[left] + nums[right]\n                \n                if curr_sum == target:\n                    return target\n                \n                if abs(curr_sum - target) < abs(closest_sum - target):\n                    closest_sum = curr_sum\n                \n                if curr_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n            \n        return closest_sum"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        counts = {}\n        res = []\n        \n        for num in nums1:\n            if num in counts:\n                counts[num] += 1\n            else:\n                counts[num] = 1\n        \n        for num in nums2:\n            if num in counts and counts[num] > 0:\n                res.append(num)\n                counts[num] -= 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        prev = float('-inf')\n        ans = float('inf')\n        node = root\n        \n        while node:\n            if node.left:\n                n = node.left\n                while n.right:\n                    n = n.right\n                ans = min(ans, n.val - prev)\n                prev = n.val\n            ans = min(ans, root.val - prev)\n            prev = root.val\n            root = root.right\n            \n        return ans"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        count = {}\n        max_count = 0\n        res = []\n        \n        def inorder(node):\n            if node.val not in count:\n                count[node.val] = 1\n            else:\n                count[node.val] += 1\n            if count[node.val] > max_count:\n                max_count = count[node.val]\n            if count[node.val] == max_count:\n                res.append(node.val)\n            if node.left:\n                inorder(node.left)\n            if node.right:\n                inorder(node.right)\n        \n        inorder(root)\n        return res"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle not in haystack:\n            return -1\n        \n        return haystack.find(needle)"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lower, upper, and digit\n        low, dig, special = 0, 0, 0\n        count = [0] * 26\n        for c in password:\n            if c.isdigit():\n                dig += 1\n                count[ord(c) - ord('0')] += 1\n            elif c.islower():\n                low += 1\n                count[ord(c) - ord('a')] += 1\n            else:\n                special += 1\n                count[ord(c) - ord('a')] += 1\n        \n        # 2. If the length is less than 6, add the difference to the extra chars needed\n        extra = max(low - 2, 0)\n        \n        # 3. If the length is between 6 and 20, use the extra chars as many as possible\n        total = len(password) - dig\n        if total <= 2 * special:\n            return total\n        \n        # 4. If the length is more than 20, use the extra chars as many as possible, and add one more 'a'\n        extra -= min(special, count[25] - 1)\n        low -= min(special, count[25])\n        special -= min(special, count[25])\n        \n        # 5. Add the extra chars to the total number of operations\n        total += extra // 3\n        extra %= 3\n        \n        # 6. Add the extra 'a' if it is possible\n        total += low // 1\n        \n        return total + (extra > 0)"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 2:\n            return 0\n        \n        return n//5 + self.trailingZeroes(n//5)"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        rowIdx = 0\n        isDown = False\n        \n        for c in s:\n            res[rowIdx] += c\n            if rowIdx == 0:\n                isDown = True\n            elif rowIdx == numRows - 1:\n                isDown = False\n            \n            if isDown:\n                rowIdx += 1\n            else:\n                rowIdx -= 1\n                \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                left_max = max(left_max, height[left])\n                res += left_max - height[left]\n                left += 1\n            else:\n                right_max = max(right_max, height[right])\n                res += right_max - height[right]\n                right -= 1\n                \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Time: O(n)\n        # Space: O(1)\n        \n        # We can use the array as a hash table, where the value at nums[i] is negative if nums[i] is missing.\n        # Iterate through the array once again and for each number, if the absolute value is not negative, add it to the result.\n        # Note that we don't need to worry about the index.\n        # We can use the index as a hash table key, so that if nums[i] is negative, we can mark the number at nums[nums[i] - 1] as negative.\n        # This way, if nums[i] is missing, nums[nums[i] - 1] will be negative.\n        # We can then iterate through the array again and collect all missing numbers into the result.\n        \n        for num in nums:\n            if nums[abs(num) - 1] > 0:\n                nums[abs(num) - 1] *= -1\n        \n        result = []\n        for i, num in enumerate(nums):\n            if nums[i] > 0:\n                result.append(i + 1)\n        \n        return result"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(nlogn) time and O(n) space\n        # use a sorted list to keep track of the number of smaller numbers\n        # for each number in nums, find the number of smaller numbers in the sorted list\n        # add the number to the sorted list\n        # return the count list\n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        count = [0] * len(nums)\n        res = {num: 0 for num in nums}\n        \n        for num, idx in nums:\n            count[res[num]] += 1\n            res[nums[count[num] - 1]] += 1\n            \n        return [count[num] for num in count]"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = cur = 2\n        for s, e in intervals:\n            if s > cur:\n                cur = e\n            else:\n                cur = min(cur, e - 1)\n                res += 1\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, left, right):\n        if not left and not right:\n            return True\n        \n        if not left or not right:\n            return False\n        \n        return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # Use a defaultdict(int) to store the count of each element\n        # Use a defaultdict(int) to store the count of the previous element\n        # Use a stack to store the count of the previous element\n        # Use a regular expression to parse the formula\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the element\n        # Use a hashmap to store the count of the"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and n & (n - 1) == 0 and n & 0x5555555555555555 == 0"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        res = [('', 0)]\n        \n        for i in range(n):\n            tmp = []\n            for s, cnt in res:\n                if cnt > 0:\n                    tmp.append(s + ')')\n                    cnt -= 1\n                tmp.append(s + '(')\n                cnt += 1\n            res = tmp\n        \n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > n:\n            return n\n        \n        # initialize result and curr with 1\n        res, curr = 0, 1\n        \n        # iterate through nums\n        for num in nums:\n            # if curr is greater than num, we need to add curr to result and double curr\n            if curr <= num:\n                curr += curr\n                if curr > n:\n                    res += 1\n                    curr = num + 1\n            # if curr is less than num, we need to add num to curr\n            else:\n                curr += num\n            \n            # if curr exceeds n, we need to add curr to result and double curr\n            if curr > n:\n                res += 1\n                curr = num + 1\n        \n        # return result\n        return res"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        max_len = 0\n        stack = [-1]\n        \n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n            else:\n                if stack[-1] >= 0 and s[stack[-1]] == '(':\n                    stack.pop()\n                    max_len = max(max_len, i - stack[-1])\n                else:\n                    stack.append(i)\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return '0'\n        \n        if denominator == 0:\n            return ''\n        \n        if (numerator < 0) ^ (denominator < 0):\n            res = '-'\n        else:\n            res = ''\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        \n        res += str(numerator // denominator)\n        numerator %= denominator\n        \n        if numerator == 0:\n            return res\n        \n        res += '.'\n        remainderToFraction = {}\n        remainder = numerator * 10\n        \n        while remainder not in remainderToFraction:\n            remainderToFraction[remainder] = len(res)\n            res += str(remainder // denominator)\n            remainder = remainder % denominator * 10\n            \n            if remainder == 0:\n                return res\n            \n        res = res[:remainderToFraction[remainder]] + '(' + res[remainderToFraction[remainder]:] + ')'\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the linked list\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(slow)\n        \n        # merge the two sorted lists\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # merge the remaining nodes if any\n        curr.next = left if left else right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for w, h in envelopes:\n            if not dp or dp[-1] < h:\n                dp.append(h)\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < h:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = h\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        row_zero = False\n        \n        for i in range(m):\n            if matrix[i][0] == 0:\n                row_zero = True\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, m):\n            if matrix[i][0] == 0:\n                for j in range(1, n):\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            row_zero = True\n        \n        for j in range(n):\n            if matrix[0][j] == 0:\n                for i in range(1, m):\n                    matrix[i][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list has only one node, remove it\n        if not head:\n            return None\n        \n        # set slow and fast pointers to head\n        slow = fast = head\n        \n        # move fast pointer n steps ahead\n        for _ in range(n):\n            fast = fast.next\n        \n        # if fast is None, remove the head node\n        if not fast:\n            return head.next\n        \n        # move slow and fast pointers until fast reaches the end\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node\n        slow.next = slow.next.next\n        \n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1_set = set(nums1)\n        return list(nums1_set & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        curr = 0\n        ans = 0\n        for m in machines:\n            curr += m - avg\n            ans = max(ans, curr)\n            curr = max(curr, -m - avg)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # if k == 1, return 1\n        if k == 1:\n            return min(m, n) - 1\n        \n        # if k is larger than m * n, return m * n\n        if m * n < k:\n            return m * n\n        \n        # if k is 1, return 1\n        if k == 1:\n            return 1\n        \n        # start from 1\n        curr = 1\n        \n        # find the number of numbers smaller than curr\n        # in the first row\n        curr_count = m\n        \n        # while k > 1\n        while k > 1:\n            # if curr_count is too big,\n            # we need to move to the next row\n            if curr_count >= k:\n                curr *= n\n                curr_count = curr_count // n\n            else:\n                curr += curr_count\n                curr_count = (curr_count * n) - (n - 1)\n            k -= curr_count\n            \n        return curr"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        root.right = self.sortedListToBST(slow.next)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        if list2:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n            for j in range(n):\n                if heights[j] > 0:\n                    heights[j] += heights[j] - 1\n                else:\n                    heights[j] = 0\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            num = float(s)\n            return True\n        except:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_map = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n        result = ''\n        for key in roman_map.keys():\n            result += roman_map[key] * (num // key)\n            num %= key\n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR the two strings\n        # The XOR of two same characters is 0\n        # The XOR of two different characters is the character\n        # XOR of the two strings\n        # s ^ t\n        return (ord(s) ^ ord(t)) & 0xFFFF"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    box_idx = i // 3 * 3 + j // 3\n                    boxes[box_idx].add(num)\n                    \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] in rows[i] or board[i][j] in cols[j]:\n                    continue\n                box_idx = i // 3 * 3 + j // 3\n                if num in boxes[box_idx]:\n                    board[i][j] = '.'\n                    rows[i].remove(num)\n                    cols[j].remove(num)\n                    boxes[box_idx].remove(num)\n                else:\n                    board[i][j] = '.'\n                    \n        self.solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes\n        # set the first node to the node that was swapped\n        # set the second node to the node that was swapped\n        \n        # inorder traversal\n        # find the first and second node that is not in order\n        # swap the values of the two nodes"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head or not head.next:\n            return True\n        \n        # find the middle node\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev = None\n        while slow:\n            tmp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = tmp\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 1, num\n        while l <= r:\n            mid = (l + r) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                r = mid - 1\n            else:\n                l = mid + 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0]\n        if n == 0:\n            return ans\n        \n        cur = 1\n        for i in range(1, n+1):\n            if i & (i-1) == 0:\n                cur = 1\n                ans.append(1)\n            else:\n                ans.append(ans[cur] + 1)\n                cur += 1\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(val)\n        dummy.next = head\n        \n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        d = collections.defaultdict(int)\n        for c in s1:\n            d[c] += 1\n        \n        n = len(s1)\n        for i in range(1, n):\n            if d[s1[i]] != d[s2[n - i]] or d[s1[:i]] != d[s2[n - i:]] or \\\n                self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[n - i:]):\n                return True\n            if d[s1[i]] != d[s2[n - i - 1]] or d[s1[n - i - 1]] != d[s2[i]] or \\\n                self.isScramble(s1[i:n - i], s2[i:]) and self.isScramble(s1[:n - i], s2[n - i:]) :\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        \n        for p in path:\n            if p == '..' and stack:\n                stack.pop()\n            elif p and p != '.' :\n                stack.append(p)\n                \n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = word\n        \n        m, n = len(board), len(board[0])\n        res = set()\n        seen = set()\n        \n        def dfs(i, j, node):\n            if board[i][j] in node:\n                word = node[board[i][j]]\n                if word and '#' in word:\n                    res.add(word)\n                    seen.add(word)\n                if word in trie:\n                    nbr = trie[word]\n                    temp = board[i][j]\n                    board[i][j] = '#'\n                    if nbr and temp in nbr:\n                        dfs(i, j - 1, nbr[temp])\n                        dfs(i, j + 1, nbr[temp])\n                        dfs(i - 1, j, nbr[temp])\n                    board[i][j] = word\n                node = node[board[i][j]]\n            return node\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] in trie:\n                    dfs(i, j, trie[board[i][j]])\n        \n        return list(res)"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        hashmap = {}\n        \n        for char in s:\n            if char in hashmap:\n                hashmap[char] += 1\n            else:\n                hashmap[char] = 1\n        \n        for char in t:\n            if char in hashmap and hashmap[char] > 0:\n                hashmap[char] -= 1\n            else:\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    if num in rows[i] or num in cols[j] or num in boxes[(i // 3) * 3 + j // 3]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    boxes[i // 3 * 3 + j // 3].add(num)\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n                \n        return res"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        words = s.split()\n        words.reverse()\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for c in columnTitle:\n            res = res * 26 + (ord(c) - ord('A') + 1)\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n < 2:\n            return n\n        \n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n                \n        total = candies[-1]\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > candies[i + 1]:\n                candies[i] = candies[i + 1] + 1\n            total += candies[i]\n            \n        return total"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not p and not q:\n            return True\n        if not p or not q or p.val != q.val:\n            return False\n        \n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list\n        slow.next = None\n        # reverse the second half\n        prev = None\n        curr = slow\n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        # merge the two halves\n        first = head\n        second = prev\n        while second.next:\n            temp1 = first.next\n            temp2 = second.next\n            first.next = second\n            second.next = temp1\n            first = temp1\n            second = temp2\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s_map = {}\n        p_map = {}\n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        \n        for p, word in zip(pattern, words):\n            if p in p_map and s_map[p] != word:\n                return False\n            if word in s_map and p_map[s_map[word]] != p:\n                return False\n            p_map[p] = word\n            s_map[word] = p\n            \n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = [[]]\n        for n in nums:\n            new_res = []\n            for l in res:\n                for i in range(len(l) + 1):\n                    new_res.append(l[:i] + [n] + l[i:])\n            res = new_res\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        low, high = 0, m*n-1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 or l2 or carry:\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n            \n            total = val1 + val2 + carry\n            carry = total // 10\n            curr.next = ListNode(total % 10)\n            curr = curr.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n            \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the highest bit set in num\n        # 2. shift num to the right by that bit\n        # 3. invert the bits\n        # 4. subtract 1\n        # 5. return num\n        \n        highest_bit = 0\n        mask = 1\n        \n        while num & mask:\n            highest_bit += 1\n            mask <<= 1\n            \n        return (num ^ (1 << highest_bit)) - 1"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        dp = 0\n        ans = 0\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i - 2] == nums[i - 1]:\n                dp += 1\n                ans += dp\n            else:\n                dp = 0\n        \n        return ans"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res, cur, curLen = [], [], 0\n        \n        for word in words:\n            if curLen + len(word) + len(cur) > maxWidth:\n                if len(cur) == 1:\n                    res.append(cur[0] + ' ' * (maxWidth - curLen))\n                else:\n                    numSpaces = (maxWidth - curLen) // (len(cur) - 1)\n                    extraSpaces = (maxWidth - curLen) % (len(cur) - 1)\n                    res.append(''.join(cur[i] + ' ' * numSpaces + (' ' if extraSpaces else '') for i in range(len(cur) - 1)) + cur[-1])\n                cur, curLen = [word], len(word)\n            else:\n                cur.append(word)\n                curLen += len(word)\n        \n        res.append(' '.join(cur) + ' ' * (maxWidth - curLen - (len(cur) - 1 if cur else 0)))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        res = []\n        word_map = {}\n        \n        for word in words:\n            if word in word_map:\n                word_map[word] = True\n            else:\n                word_map[word] = False\n                cur_word = word\n                while cur_word:\n                    if cur_word in word_map:\n                        res.append(word)\n                        word_map[word] = True\n                        break\n                    cur_word = word_map.get(cur_word[1:], '')\n                \n                if word_map[word] and word_map[word] != 1:\n                    word_map[word] = True\n                \n        return res"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        \n        if num < 7:\n            return str(num)\n        \n        return self.convertToBase7(num // 7) + str(num % 7)"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. if n is odd, return 0\n        # 2. if n is even, return (n-1) * (n-2) / 2\n        # 3. if n is 1, return 1\n        if n % 2 == 1:\n            return 0\n        return (n-1) * (n-2) // 2"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        cols = set()\n        posDiag = set()\n        negDiag = set()\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        res = []\n        \n        def backtrack(row):\n            if row == n:\n                res.append([\"\".join(row) for row in board])\n                return\n            \n            for col in range(n):\n                if col in cols or row - col in posDiag or row + col in negDiag:\n                    continue\n                \n                cols.add(col)\n                posDiag.add(row - col)\n                negDiag.add(row + col)\n                board[row][col] = 'Q'\n                \n                backtrack(row + 1)\n                \n                cols.remove(col)\n                posDiag.remove(row - col)\n                negDiag.remove(row + col)\n                board[row][col] = '.'\n                \n        backtrack(0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return False\n        \n        if not board or not board[0]:\n            return False\n        \n        m, n = len(board), len(board[0])\n        visited = set()\n        \n        for i in xrange(m):\n            for j in xrange(n):\n                if board[i][j] == word[0]:\n                    if self.dfs(board, word[1:], i, j, visited):\n                        return True\n                \n        return False\n        \n    def dfs(self, board, word, i, j, visited):\n        if word == '':\n            return True\n        \n        if board[i][j] != word[0]:\n            return False\n        \n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        visited.add((i, j))\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if x < 0 or x >= len(board) or y < 0 or y >= len(board[0]) or (x, y) in visited:\n                continue\n            \n            if board[x][y] == word[1]:\n                if self.dfs(board, word[1:], x, y, visited):\n                    return True\n                \n        visited.remove((i, j))\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        p1 = m - 1\n        p2 = n - 1\n        p = m + n - 1\n        \n        while p1 >= 0 and p2 >= 0:\n            if nums1[p1] > nums2[p2]:\n                nums1[p] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[p] = nums2[p2]\n                p2 -= 1\n            p -= 1\n        \n        if p2 >= 0:\n            nums1[:p2 + 1] = nums2[:p2 + 1]"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}]}