{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            for i in range(right, left-1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            for i in range(bottom, top-1, -1):\n                res.append(matrix[i][left])\n            left += 1\n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        res = []\n        i = 0\n        while i < len(nums):\n            if i+1 < len(nums) and nums[i]+1 == nums[i+1]:\n                i += 1\n            else:\n                if i == len(nums)-1:\n                    res.append(str(nums[i]))\n                else:\n                    res.append(str(nums[i]) + \"->\" + str(nums[i+1]))\n                i += 1\n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] != t[j]\n        # dp[i][j] = dp[i-1][j] if s[i] !"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774 \uc544\ub2c8\uba74 1\uc744 \ubc18\ud658\n        # 3. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 2\ub97c \ubc18\ud658\n        # 4. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774 \uc544\ub2c8\uba74 1\uc744 \ubc18\ud658\n        # 5. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 2\ub97c \ubc18\ud658\n        # 6. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774 \uc544\ub2c8\uba74 1\uc744 \ubc18\ud658\n        # 7. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 2\ub97c \ubc18\ud658\n        # 8. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774 \uc544\ub2c8\uba74 1\uc744 \ubc18\ud658\n        # 9. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 2\ub97c \ubc18\ud658\n        # 10. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774 \uc544\ub2c8\uba74 1\uc744 \ubc18\ud658\n        # 11. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 2\ub97c \ubc18\ud658\n        # 12. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774 \uc544\ub2c8\uba74 1\uc744 \ubc18\ud658\n        # 13. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 2\ub97c \ubc18\ud658\n        # 14. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774 \uc544\ub2c8\uba74 1\uc744 \ubc18\ud658\n        # 15. \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 2\ub97c \ubc18\ufffd"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u9636\u4e58\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        # 2. \u8ba1\u7b97k\u7684\u9636\u4e58\n        k -= 1\n        # 3. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n        res = \"\"\n        for i in range(1, n + 1):\n            fact //= i\n            # \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 1. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 2. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 3. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 4. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 5. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 6. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 7. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 8. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 9. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 10. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 11. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 12. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 13. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 14. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 15. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 16. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 17. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 18. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 19. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 20. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 21. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 22. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 23. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 24. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 25. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 26. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 27. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 28. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 29. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 30. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 31. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 32. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 33. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 34. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 35. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 36. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 37. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 38. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 39. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 40. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 41. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 42. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 43. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 44. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 45. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 46. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 47. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 48. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 49. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 50. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 51. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 52. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 53. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 54. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 55. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 56. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 57. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 58. \u8ba1\u7b97\u7b2ck\u4e2a\u6392\u5217\u7684\u6570\u5b57\n            # 5"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 2 pointer approach\n        # 1. sort the array\n        # 2. set left and right pointer\n        # 3. if the sum of left and right is less than target, move left pointer to the right\n        # 4. if the sum of left and right is greater than target, move right pointer to the left\n        # 5. if the sum of left and right is equal to target, return [left+1, right+1]\n        # 6. if the sum of left and right is not equal to target, continue to 3\n\n        left = 0\n        right = len(numbers)-1\n\n        while left < right:\n            if numbers[left] + numbers[right] < target:\n                left += 1\n            elif numbers[left] + numbers[right] > target:\n                right -= 1\n            else:\n                return [left+1, right+1]\n\n        return [left+1, right+1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, prev, res, path):\n            if not num:\n                if target == 0:\n                    res.append(path)\n                return\n            for i in range(1, len(num)+1):\n                if i == 1 or num[0] != '0':\n                    cur = int(num[:i])\n                    if not path:\n                        dfs(num[i:], target-cur, cur, res, path+num[:i])\n                    else:\n                        dfs(num[i:], target-cur, cur, res, path+'+'+num[:i])\n                        dfs(num[i:], target+cur, -cur, res, path+'-'+num[:i])\n                        dfs(num[i:], target-prev+prev*cur, prev*cur, res, path+'*'+num[:i])\n        res = []\n        dfs(num, target, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s.upper()\n        s = s[::-1]\n        s = s[k:]\n        s = s[::-1]\n        s = s.replace('-', '')\n        return s"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_gas = 0\n        # for i in range(len(gas)):\n        #     curr_gas += gas[i] - cost[i]\n        #     if curr_gas < 0:\n        #         start_index = i + 1\n        #         curr_gas = 0\n        # return start_index\n\n        # if sum(gas) < sum(cost):\n        #     return -1\n\n        # start_index = 0\n        # curr_"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return True if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s matches the first character of p\n            if self.isMatch(s, p[2:]) or (s and p[0] in {s[0], '.'} and self.isMatch(s[1:], p)):\n                return True\n            else:\n                return self.isMatch(s, p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s matches the first character of p\n            if self.isMatch(s, p[2:]) or (s and p[0] in {s[0], '.'} and self.isMatch(s[1:], p)):\n                return True\n            else:\n                return self.isMatch(s, p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s matches the first character of p\n            if self.isMatch(s, p[2:]) or (s and p[0] in {s[0], '.'} and self.isMatch(s[1:], p)):\n                return True\n            else:\n                return self.isMatch(s, p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s matches the first character of p\n            if self.isMatch(s, p[2:]) or (s and p[0] in {s[0], '.'} and self.isMatch(s[1:], p)):\n                return True\n            else:\n                return self.isMatch(s, p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s matches the first character of p\n            if self.isMatch(s, p[2:]) or (s and p[0] in {s[0], '.'} and self.isMatch(s[1:], p)):\n                return True\n            else:\n                return self.isMatch(s, p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s matches the first character of p\n            if self.isMatch(s, p[2:]) or (s and p[0] in {s[0], '.'} and self.isMatch(s[1:], p)):\n                return True\n            else:\n                return self.isMatch(s, p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s matches the first character of p\n            if self.isMatch(s, p[2:]) or (s and p[0] in {s[0], '.'} and self.isMatch(s[1:], p)):\n                return True\n            else:"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick_largest(nums1, nums2, k):\n            # Pick the largest k numbers from nums1 and nums2\n            # and return them in a list\n            result = []\n            for i in range(k):\n                if len(nums1) > i and len(nums2) > k - i - 1:\n                    if nums1[i] > nums2[i]:\n                        result.append(nums1[i])\n                    else:\n                        result.append(nums2[i])\n                elif len(nums1) > i:\n                    result.append(nums1[i])\n                else:\n                    result.append(nums2[i])\n            return result\n\n        def pick_smallest(nums1, nums2, k):\n            # Pick the smallest k numbers from nums1 and nums2\n            # and return them in a list\n            result = []\n            for i in range(k):\n                if len(nums1) > i and len(nums2) > k - i - 1:\n                    if nums1[i] < nums2[i]:\n                        result.append(nums1[i])\n                    else:\n                        result.append(nums2[i])\n                elif len(nums1) > i:\n                    result.append(nums1[i])\n                else:\n                    result.append(nums2[i])\n            return result\n\n        def merge(nums1, nums2):\n            # Merge the two lists and return the merged list\n            result = []\n            i, j = 0, 0\n            while i < len(nums1) and j < len(nums2):\n                if nums1[i] > nums2[j]:\n                    result.append(nums1[i])\n                    i += 1\n                else:\n                    result.append(nums2[j])\n                    j += 1\n            while i < len(nums1):\n                result.append(nums1[i])\n                i += 1\n            while j < len(nums2):\n                result.append(nums2[j])\n                j += 1\n            return result\n\n        def merge_k_lists(nums1, nums2, k):\n            # Merge the k lists and return the merged list\n            if k == 0:\n                return []\n            if k == 1:\n                return nums1 + nums2\n            if k == 2:\n                return merge(nums1, nums2)\n            mid = k // 2\n            nums1_left = merge_k_lists(nums1[:mid], nums2[:mid], mid)\n            nums2_left = merge_k_lists(nums1[mid:], nums2[mid:], k - mid)\n            return merge(nums1_left, nums2_left)\n\n        return merge_k_lists(nums1, nums2, k)"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                if i**2 != num:\n                    sum += i + num//i\n                else:\n                    sum += i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n-1) + self.fib(n-2)"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1,1-dungeon[i][j])\n                elif i == m-1:\n                    dp[i][j] = max(1,dp[i][j+1]-dungeon[i][j])\n                elif j == n-1:\n                    dp[i][j] = max(1,dp[i+1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1,min(dp[i][j+1],dp[i+1][j])-dungeon[i][j])\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count, left_i = 0, 0\n            for right_i in range(len(nums)):\n                while nums[right_i] - nums[left_i] > mid:\n                    left_i += 1\n                count += right_i - left_i\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a','e','i','o','u','A','E','I','O','U']\n        s_list = list(s)\n        i = 0\n        j = len(s_list)-1\n        while i < j:\n            if s_list[i] in vowels and s_list[j] in vowels:\n                s_list[i], s_list[j] = s_list[j], s_list[i]\n                i += 1\n                j -= 1\n            elif s_list[i] not in vowels:\n                i += 1\n            elif s_list[j] not in vowels:\n                j -= 1\n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                max_len = max(max_len, curr_len)\n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # # Solution 1:\n        # # Time Complexity: O(n)\n        # # Space Complexity: O(1)\n        # # 1. Sum of n numbers from 0 to n\n        # # 2. Sum of all numbers in nums\n        # # 3. Subtract the sum of n numbers from the sum of all numbers in nums\n        # # 4. Return the result\n        # # 5. If the result is 0, it means that all numbers in nums are in the range [0, n]\n        # # 6. If the result is n+1, it means that the missing number is in the range [0, n+1]\n        # # 7. If the result is n+2, it means that the missing number is in the range [0, n+2]\n        # # 8. If the result is n+3, it means that the missing number is in the range [0, n+3]\n        # # 9. If the result is n+4, it means that the missing number is in the range [0, n+4]\n        # # 10. If the result is n+5, it means that the missing number is in the range [0, n+5]\n        # # 11. If the result is n+6, it means that the missing number is in the range [0, n+6]\n        # # 12. If the result is n+7, it means that the missing number is in the range [0, n+7]\n        # # 13. If the result is n+8, it means that the missing number is in the range [0, n+8]\n        # # 14. If the result is n+9, it means that the missing number is in the range [0, n+9]\n        # # 15. If the result is n+10, it means that the missing number is in the range [0, n+10]\n        # # 16. If the result is n+11, it means that the missing number is in the range [0, n+11]\n        # # 17. If the result is n+12, it means that the missing number is in the range [0, n+12]\n        # # 18. If the result is n+13, it means that the missing number is in the range [0, n+13]\n        # # 19. If the result is n+14, it means that the missing number is in the range [0, n+14]\n        # # 20. If the result is n+15, it means that the missing number is in the range [0, n+15]\n        # # 21. If the result is n+16, it means that the missing number is in the range [0, n+16]\n        # # 22. If the result is n+17, it means that the missing number is in the range [0, n+17]\n        # # 23. If the result is n+18, it means that the missing number is in the range [0, n+18]\n        # # 24. If the result is n+19, it means that the missing number is in the range [0, n+19]\n        # # 25. If the result is n+20, it means that the missing number is in the range [0, n+20]\n        # # 26. If the result is n+21, it means that the missing number is in the range [0, n+21]\n        # # 27. If the result is n+22, it means that the missing number is in the range [0, n+22]\n        # # 28. If the result is n+23, it means that the missing number is in the range [0, n+23]\n        # # 29. If the result is n+24, it means that the missing number is in the range [0, n+24]\n        # # 30. If the result is n+25, it means that the missing number is in the range [0, n+25]\n        # # 31. If the result is n+26, it means that the missing number is in the range [0, n+26]\n        # # 32"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # Create a set of words from the wordList\n        wordSet = set(wordList)\n        \n        # Create a queue to store the words to be visited\n        queue = deque([beginWord])\n        \n        # Create a set to store the visited words\n        visited = set()\n        \n        # Create a dictionary to store the number of steps to reach each word\n        steps = {beginWord: 1}\n        \n        # Loop until the queue is empty\n        while queue:\n            # Pop the first word from the queue\n            word = queue.popleft()\n            \n            # If the word is the endWord, return the number of steps\n            if word == endWord:\n                return steps[word]\n            \n            # Loop through the words in the wordSet\n            for i in range(len(word)):\n                # Loop through the letters of the word\n                for letter in string.ascii_lowercase:\n                    # If the letter is the same as the current letter, skip it\n                    if letter == word[i]:\n                        continue\n                    # Create a new word by replacing the i-th letter with the new letter\n                    newWord = word[:i] + letter + word[i+1:]\n                    # If the new word is in the wordSet, add it to the queue and mark it as visited\n                    if newWord in wordSet:\n                        queue.append(newWord)\n                        visited.add(newWord)\n                        steps[newWord] = steps[word] + 1\n        \n        # If the endWord is not in the wordSet, return 0\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        a = a[::-1]\n        b = b[::-1]\n        res = \"\"\n        carry = 0\n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == \"1\" and b[i] == \"1\":\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n                        carry = 1\n                elif a[i] == \"1\" and b[i] == \"0\":\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n                elif a[i] == \"0\" and b[i] == \"1\":\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n                else:\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n            else:\n                if a[i] == \"1\":\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n                else:\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n        if carry == 1:\n            res += \"1\"\n        return res[::-1]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, left):\n            left = 0\n            right = len(nums) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid] < target:\n                    left = mid + 1\n                elif nums[mid] > target:\n                    right = mid - 1\n                else:\n                    if left == mid:\n                        return mid\n                    else:\n                        right = mid\n            return -1\n        \n        left = binary_search(nums, target, True)\n        right = binary_search(nums, target, False)\n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc815\ub2f5\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n        answer = 0\n\n        # 2. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n        start = 0\n\n        # 3. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n        end = 0\n\n        # 4. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n        max_end = 0\n\n        # 5. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n        for i in range(len(nums)-1):\n            # 6. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n            max_end = max(max_end, i + nums[i])\n\n            # 7. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n            if i == start:\n                # 8. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n                answer += 1\n                # 9. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n                start = end\n                # 10. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n                end = max_end\n\n        # 11. \uc2dc\uc791\uc810\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\n        return answer"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices):\n            return sum(prices[1:]-prices[:-1])\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        \n        for i in range(1, len(prices)):\n            for j in range(1, k+1):\n                dp[j][0] = max(dp[j][0], dp[j-1][1]+prices[i])\n                dp[j][1] = max(dp[j][1], dp[j][0]-prices[i])\n        \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num += 2**32\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_str = \"\"\n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_dict[remainder] + hex_str\n            num = num // 16\n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a dictionary to store the frequency of each character in the string\n        freq = {}\n        \n        # Iterate through the string and count the frequency of each character\n        for char in s:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n        \n        # Iterate through the string again and return the first character with a frequency of 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # If no character with a frequency of 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff == 0 and valueDiff == 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff == 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff == 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff == 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff > 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff == 0 and valueDiff > 0:\n            return False\n        \n        if indexDiff"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0 -> left\n        # 1 -> right\n        # 2 -> right\n        # 3 -> left\n        # 4 -> right\n        # 5 -> left\n        # 6 -> right\n        # 7 -> left\n        # 8 -> right\n        # 9 -> left\n        # 10 -> right\n        # 11 -> left\n        # 12 -> right\n        # 13 -> left\n        # 14 -> right\n        # 15 -> left\n        # 16 -> right\n        # 17 -> left\n        # 18 -> right\n        # 19 -> left\n        # 20 -> right\n        # 21 -> left\n        # 22 -> right\n        # 23 -> left\n        # 24 -> right\n        # 25 -> left\n        # 26 -> right\n        # 27 -> left\n        # 28 -> right\n        # 29 -> left\n        # 30 -> right\n        # 31 -> left\n        # 32 -> right\n        # 33 -> left\n        # 34 -> right\n        # 35 -> left\n        # 36 -> right\n        # 37 -> left\n        # 38 -> right\n        # 39 -> left\n        # 40 -> right\n        # 41 -> left\n        # 42 -> right\n        # 43 -> left\n        # 44 -> right\n        # 45 -> left\n        # 46 -> right\n        # 47 -> left\n        # 48 -> right\n        # 49 -> left\n        # 50 -> right\n        # 51 -> left\n        # 52 -> right\n        # 53 -> left\n        # 54 -> right\n        # 55 -> left\n        # 56 -> right\n        # 57 -> left\n        # 58 -> right\n        # 59 -> left\n        # 60 -> right\n        # 61 -> left\n        # 62 -> right\n        # 63 -> left\n        # 64 -> right\n        # 65 -> left\n        # 66 -> right\n        # 67 -> left\n        # 68 -> right\n        # 69 -> left\n        # 70 -> right\n        # 71 -> left\n        # 72 -> right\n        # 73 -> left\n        # 74 -> right\n        # 75 -> left\n        # 76 -> right\n        # 77 -> left\n        # 78 -> right\n        # 79 -> left\n        # 80 -> right\n        # 81 -> left\n        # 82 -> right\n        # 83 -> left\n        # 84 -> right\n        # 85 -> left\n        # 86 -> right\n        # 87 -> left\n        # 88 -> right\n        # 89 -> left\n        # 90 -> right\n        # 91 -> left\n        # 92 -> right\n        # 93 -> left\n        # 94 -> right\n        # 95 -> left\n        # 96 -> right\n        # 97 -> left\n        # 98 -> right\n        # 99 -> left\n        # 100 -> right\n        # 101 -> left\n        # 102 -> right\n        # 103 -> left\n        # 104 -> right\n        # 105 -> left\n        # 106 -> right\n        # 107 -> left\n        # 108 -> right\n        # 109 -> left\n        # 110 -> right\n        # 111 -> left\n        # 112 -> right\n        # 1"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return 2**left_height + self.countNodes(root.right)\n        else:\n            return 2**right_height + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = \"\"\n        i = 0\n        while i < len(num1) and i < len(num2):\n            res += str(int(num1[i]) + int(num2[i]))\n            i += 1\n        while i < len(num1):\n            res += str(int(num1[i]))\n            i += 1\n        while i < len(num2):\n            res += str(int(num2[i]))\n            i += 1\n        res = res[::-1]\n        i = 0\n        while i < len(res):\n            if res[i] == \"0\":\n                i += 1\n            else:\n                break\n        res = res[i:]\n        return res"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 2. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 3. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 4. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 5. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 6. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 7. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 8. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 9. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 10. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 11. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 12. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 13. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 14. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 15. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 16. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 17. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 18. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 19. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 20. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 21. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 22. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 23. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 24. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 25. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 26. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 27. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 28. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 29. \uc5f0\uc0b0\uc790 \uc6b0\uc120\ufffd"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits[i] - capital[i]\n        # profits[i] - capital[i] >= 0\n        # profits[i] - capital[i] <= 0\n        # profits[i] - capital[i] > 0\n        # profits[i] - capital[i] < 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i] = 0\n        # profits[i] - capital[i]"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(s) % 2 != 0:\n        #     return False\n        # else:\n        #     stack = []\n        #     for i in s:\n        #         if i == '(' or i == '{' or i == '[':\n        #             stack.append(i)\n        #         else:\n        #             if len(stack) == 0:\n        #                 return False\n        #             else:\n        #                 if i == ')' and stack[-1] == '(':\n        #                     stack.pop()\n        #                 elif i == '}' and stack[-1] == '{':\n        #                     stack.pop()\n        #                 elif i == ']' and stack[-1] == '[':\n        #                     stack.pop()\n        #                 else:\n        #                     return False\n        #     if len(stack) == 0:\n        #         return True\n        #     else:\n        #         return False\n\n        # if len(s) % 2 != 0:\n        #     return False\n        # else:\n        #     stack = []\n        #     for i in s:\n        #         if i == '(' or i == '{' or i == '[':\n        #             stack.append(i)\n        #         else:\n        #             if len(stack) == 0:\n        #                 return False\n        #             else:\n        #                 if i == ')' and stack[-1] == '(':\n        #                     stack.pop()\n        #                 elif i == '}' and stack[-1] == '{':\n        #                     stack.pop()\n        #                 elif i == ']' and stack[-1] == '[':\n        #                     stack.pop()\n        #                 else:\n        #                     return False\n        #     if len(stack) == 0:\n        #         return True\n        #     else:\n        #         return False\n\n        if len(s) % 2 != 0:\n            return False\n        else:\n            stack = []\n            for i in s:\n                if i == '(' or i == '{' or i == '[':\n                    stack.append(i)\n                else:\n                    if len(stack) == 0:\n                        return False\n                    else:\n                        if i == ')' and stack[-1] == '(':\n                            stack.pop()\n                        elif i == '}' and stack[-1] == '{':\n                            stack.pop()\n                        elif i == ']' and stack[-1] == '[':\n                            stack.pop()\n                        else:\n                            return False\n            if len(stack) == 0:\n                return True\n            else:\n                return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. Find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # 2. Find the first index j such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # 3. Swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # 4. Reverse the subarray nums[i+1:]\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) <= 1:\n        #     return False\n        # else:\n        #     for i in range(len(nums)-1):\n        #         for j in range(i+1, len(nums)):\n        #             if nums[i] == nums[j] and j-i <= k:\n        #                 return True\n        #     return False\n\n        # if len(nums) <= 1:\n        #     return False\n        # else:\n        #     for i in range(len(nums)-1):\n        #         for j in range(i+1, len(nums)):\n        #             if nums[i] == nums[j] and j-i <= k:\n        #                 return True\n        #     return False\n\n        # if len(nums) <= 1:\n        #     return False\n        # else:\n        #     for i in range(len(nums)-1):\n        #         for j in range(i+1, len(nums)):\n        #             if nums[i] == nums[j] and j-i <= k:\n        #                 return True\n        #     return False\n\n        if len(nums) <= 1:\n            return False\n        else:\n            d = {}\n            for i in range(len(nums)):\n                if nums[i] in d:\n                    if i - d[nums[i]] <= k:\n                        return True\n                d[nums[i]] = i\n            return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i-1])\n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 2:\n            return 0\n        \n        # 1. \u5efa\u7acb\u6620\u5c04\u5173\u7cfb\n        # 2. \u904d\u5386\u6620\u5c04\u5173\u7cfb\uff0c\u7edf\u8ba1\u5bf9\u5e94\u7684\u5bf9\u6570\n        # 3. \u8fd4\u56de\u5bf9\u6570\u7684\u603b\u548c\n        # 4. \u65f6\u95f4\u590d\u6742\u5ea6O(n)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # 5. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 6. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 7. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 8. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 9. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 10. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 11. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 12. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 13. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 14. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 15. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 16. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 17. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 18. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 19. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 20. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 21. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 22. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 23. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 24. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 25. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 26. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 27. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 28. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 29. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 30. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 31. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 32. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 33. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 34. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 35. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 36. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 37. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 38. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 39. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 40. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 41. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 42. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 43. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 44. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 45. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 46. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 47. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 48. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 49. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a\n        # 50. \u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u5efa\u7acb\u5728\u6620\u5c04\u5173\u7cfb\u4e0a\n        # 51. \u6620\u5c04\u5173\u7cfb\u5efa\u7acb\u5728\u5bf9\u6570\u7684\u5bf9\u5e94\u5173\u7cfb\u4e0a"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = \"qwertyuiop\"\n        row2 = \"asdfghjkl\"\n        row3 = \"zxcvbnm\"\n        res = []\n        for word in words:\n            if word[0].lower() in row1:\n                r1 = True\n            else:\n                r1 = False\n            if word[0].lower() in row2:\n                r2 = True\n            else:\n                r2 = False\n            if word[0].lower() in row3:\n                r3 = True\n            else:\n                r3 = False\n            for i in range(1,len(word)):\n                if word[i].lower() in row1:\n                    if r1:\n                        r1 = True\n                    else:\n                        r1 = False\n                if word[i].lower() in row2:\n                    if r2:\n                        r2 = True\n                    else:\n                        r2 = False\n                if word[i].lower() in row3:\n                    if r3:\n                        r3 = True\n                    else:\n                        r3 = False\n            if r1 and r2 and r3:\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        for i in range(1, left):\n            curr = curr.next\n        prev = curr\n        curr = curr.next\n        for i in range(left, right):\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Add the substring to the beginning of s\n        # 3. Return s"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            return s if s == t else \"\"\n        \n        # Create a dictionary to store the frequency of each character in t\n        t_dict = {}\n        for char in t:\n            if char not in t_dict:\n                t_dict[char] = 1\n            else:\n                t_dict[char] += 1\n        \n        # Create a dictionary to store the frequency of each character in s\n        s_dict = {}\n        for char in s:\n            if char not in s_dict:\n                s_dict[char] = 1\n            else:\n                s_dict[char] += 1\n        \n        # Initialize the minimum window\n        min_window = \"\"\n        min_len = float('inf')\n        \n        # Iterate through the characters in s\n        i = 0\n        for j in range(len(s)):\n            # If the character is in t, increment the frequency in s_dict\n            if s[j] in t_dict:\n                if s[j] in s_dict:\n                    s_dict[s[j]] += 1\n                else:\n                    s_dict[s[j]] = 1\n            \n            # If the frequency of the character in s is greater than the frequency in t, increment i\n            while i < j and s_dict[s[i]] > t_dict[s[i]]:\n                s_dict[s[i]] -= 1\n                i += 1\n            \n            # If the frequency of the character in s is equal to the frequency in t, update the minimum window\n            if s_dict[s[j]] == t_dict[s[j]]:\n                if j - i + 1 < min_len:\n                    min_len = j - i + 1\n                    min_window = s[i:j+1]\n                s_dict[s[i]] -= 1\n                i += 1\n        \n        return min_window"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:\n                return True\n            if i >= 4 and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] == distance[i-3]:\n                return True\n            if i >= 5 and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] + distance[i-5] >= distance[i-3] and distance[i-2] + distance[i-4] >= distance[i-4]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            while curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 4. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 5. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 6. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 7. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 8. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 9. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 10. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc5f4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 11. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u6811\u7684\u4f4d\u7f6e\n        # 2. \u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 3. \u4ece\u6700\u77ed\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u4f9d\u6b21\u8d70\u5230\u6700\u957f\u7684\u9ad8\u5ea6\n        # 4. \u5982\u679c\u4e0d\u80fd\u8d70\u5230\u6700\u957f\u7684\u9ad8\u5ea6\uff0c\u8fd4\u56de -1\n        # 5. \u5982\u679c\u8d70\u5230\u6700\u957f\u7684\u9ad8\u5ea6\uff0c\u8fd4\u56de\u6b65\u6570\n\n        # 1. \u627e\u5230\u6240\u6709\u6811\u7684\u4f4d\u7f6e\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((i, j))\n\n        # 2. \u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        trees.sort(key=lambda x: forest[x[0]][x[1]])\n\n        # 3. \u4ece\u6700\u77ed\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u4f9d\u6b21\u8d70\u5230\u6700\u957f\u7684\u9ad8\u5ea6\n        # 4. \u5982\u679c\u4e0d\u80fd\u8d70\u5230\u6700\u957f\u7684\u9ad8\u5ea6\uff0c\u8fd4\u56de -1\n        # 5. \u5982\u679c\u8d70\u5230\u6700\u957f\u7684\u9ad8\u5ea6\uff0c\u8fd4\u56de\u6b65\u6570\n        steps = 0\n        start = (0, 0)\n        for tree in trees:\n            steps += self.walk(forest, start, tree)\n            if steps == -1:\n                return -1\n            start = tree\n        return steps\n\n    def walk(self, forest, start, end):\n        # \u4ece start \u8d70\u5230 end\n        # \u8fd4\u56de\u6b65\u6570\uff0c\u5982\u679c\u4e0d\u80fd\u8d70\u5230 end\uff0c\u8fd4\u56de -1\n        # \u5982\u679c\u8d70\u5230 end\uff0c\u8fd4\u56de\u6b65\u6570\n        m, n = len(forest), len(forest[0])\n        visited = [[False] * n for _ in range(m)]\n        queue = deque([start])\n        visited[start[0]][start[1]] = True\n        steps = 0\n        while queue:\n            for _ in range(len(queue)):\n                i, j = queue.popleft()\n                if (i, j) == end:\n                    return steps\n                for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < m and 0 <= nj < n and not visited[ni][nj] and forest[ni][nj] > 0:\n                        visited[ni][nj] = True\n                        queue.append((ni, nj))\n            steps += 1\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u524d\u7f00\u548c\n        # 2. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8elower\u7684\u7d22\u5f15i\n        # 3. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8eupper\u7684\u7d22\u5f15j\n        # 4. \u8fd4\u56dej-i+1\n        # 5. \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # 6. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 7. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 8. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 9. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 10. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 11. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 12. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 13. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 14. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 15. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 16. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 17. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 18. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 19. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 20. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 21. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 22. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 23. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]\n        # 24. \u524d\u7f00\u548c\u7684\u6027\u8d28\uff1a\u524d\u7f00\u548c[i,j] = \u524d\u7f00\u548c[0,j] - \u524d\u7f00\u548c[0,i-1]"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1 + 2 + 3 + ... + k = k(k+1)/2\n        # k(k+1)/2 = n\n        # k = (2n - 1) / 2\n        return int((2*n - 1)**0.5 / 2)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(temp)\n            queue = queue[len(temp):]\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        if x < 10:\n            return True\n        if x % 10 == 0:\n            return False\n        if x % 10 == x:\n            return True\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:\n            return True\n        if x % 10 != x // 10:\n            return False\n        if x % 10 == x // 10:"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == '0':\n                return 0\n            if int(s) <= 26:\n                return 2\n            else:\n                return 1\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[i-1]+2**i)\n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        if n == 3:\n            return 3\n        if n == 4:\n            return 5\n        if n == 5:\n            return 8\n        if n == 6:\n            return 13\n        if n == 7:\n            return 20\n        if n == 8:\n            return 35\n        if n == 9:\n            return 56\n        if n == 10:\n            return 84\n        if n == 11:\n            return 126\n        if n == 12:\n            return 202\n        if n == 13:\n            return 377\n        if n == 14:\n            return 656\n        if n == 15:\n            return 1064\n        if n == 16:\n            return 1742\n        if n == 17:\n            return 2865\n        if n == 18:\n            return 4636\n        if n == 19:\n            return 7502\n        if n == 20:\n            return 12139\n        if n == 21:\n            return 19641\n        if n == 22:\n            return 35245\n        if n == 23:\n            return 59953\n        if n == 24:\n            return 102334\n        if n == 25:\n            return 165580\n        if n == 26:\n            return 274432\n        if n == 27:\n            return 444241\n        if n == 28:\n            return 701408\n        if n == 29:\n            return 1146643\n        if n == 30:\n            return 1846330\n        if n == 31:\n            return 3024251\n        if n == 32:\n            return 4971215\n        if n == 33:\n            return 7980376\n        if n == 34:\n            return 12964697\n        if n == 35:\n            return 20922189\n        if n == 36:\n            return 35825143\n        if n == 37:\n            return 57640764\n        if n == 38:\n            return 92378165\n        if n == 39:\n            return 149303529\n        if n == 40:\n            return 241578178\n        if n == 41:\n            return 390881697\n        if n == 42:\n            return 632459864\n        if n == 43:\n            return 1023341553\n        if n == 44:\n            return 1655801412\n        if n == 45:\n            return 2679142969\n        if n == 46:\n            return 4344436464\n        if n == 47:\n            return 7014080001\n        if n == 48:\n            return 11466430000\n        if n == 49:\n            return 18463300001\n        if n == 50:\n            return 30242510000\n        if n == 51:\n            return 49712150001\n        if n == 52:\n            return 79803760000\n        if n == 53:\n            return 129646970001\n        if n == 54:\n            return 209221890000\n        if n == 55:\n            return 358251430001\n        if n == 56:\n            return 576407640000"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] is a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[0] = True\n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = True if s[:i] is a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in wordDict\n        # dp[i] = False if s[:i] is not a word in"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTHelper(root, min_val, max_val):\n            if root is None:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return isValidBSTHelper(root.left, min_val, root.val) and isValidBSTHelper(root.right, root.val, max_val)\n        \n        return isValidBSTHelper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if newInterval is empty, return intervals\n        if not newInterval:\n            return intervals\n        \n        # if intervals is empty, return newInterval\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is not overlapping with any interval in intervals, return newInterval\n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with the last interval in intervals, update the last interval\n        if newInterval[0] <= intervals[-1][0]:\n            intervals[-1][1] = max(intervals[-1][1], newInterval[1])\n            return intervals\n        \n        # if newInterval is overlapping with the first interval in intervals, insert newInterval in the correct position\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with any interval in intervals, insert newInterval in the correct position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                continue\n            if newInterval[0] <= intervals[i][1] and newInterval[1] >= intervals[i][0]:\n                newInterval[0] = min(newInterval[0], intervals[i][0])\n                newInterval[1] = max(newInterval[1], intervals[i][1])\n                intervals.pop(i)\n                i -= 1\n            if newInterval[0] > intervals[i][1]:\n                intervals.insert(i+1, newInterval)\n                return intervals\n        \n        # if newInterval is overlapping with the last interval in intervals, insert newInterval in the correct position\n        if newInterval[0] <= intervals[-1][0]:\n            intervals[-1][1] = max(intervals[-1][1], newInterval[1])\n            return intervals\n        \n        # if newInterval is overlapping with the first interval in intervals, insert newInterval in the correct position\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with any interval in intervals, insert newInterval in the correct position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                continue\n            if newInterval[0] <= intervals[i][1] and newInterval[1] >= intervals[i][0]:\n                newInterval[0] = min(newInterval[0], intervals[i][0])\n                newInterval[1] = max(newInterval[1], intervals[i][1])\n                intervals.pop(i)\n                i -= 1\n            if newInterval[0] > intervals[i][1]:\n                intervals.insert(i+1, newInterval)\n                return intervals\n        \n        # if newInterval is overlapping with the last interval in intervals, insert newInterval in the correct position\n        if newInterval[0] <= intervals[-1][0]:\n            intervals[-1][1] = max(intervals[-1][1], newInterval[1])\n            return intervals\n        \n        # if newInterval is overlapping with the first interval in intervals, insert newInterval in the correct position\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with any interval in intervals, insert newInterval in the correct position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                continue\n            if newInterval[0] <= intervals[i][1] and newInterval[1] >= intervals[i][0]:\n                newInterval[0] = min(newInterval[0], intervals[i][0])\n                newInterval[1] = max(newInterval[1], intervals[i][1])\n                intervals.pop(i)\n                i -= 1\n            if newInterval[0] > intervals[i][1]:\n                intervals.insert(i+1, newInterval)\n                return intervals\n        \n        # if newInterval is overlapping with the last interval in intervals, insert newInterval in the correct position\n        if newInterval[0] <= intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 2. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 3. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 4. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 5. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 6. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 7. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 8. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 9. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 10. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 11. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 12. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 13. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 14. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 15. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 16. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 17. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 18. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 19. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 20. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 21. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 22. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 23. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 24. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 25. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 26. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 27. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 28. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 29. \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12 \ucc3e\uae30\n        # 30. \ucd5c\uc18c\uac12,"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1000 buckets, 15 minutes to die, 15 minutes to test\n        # 2. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 3. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 4. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 5. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 6. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 7. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 8. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 9. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 10. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 11. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 12. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 13. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 14. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 15. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 16. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 17. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 18. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 19. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 20. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 21. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 22. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 23. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 24. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 25. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 26. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 27. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 28. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 29. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 30. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 31. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 32. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 33. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 34. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 35. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 36. 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 37. 1000 buckets, 15 minutes to die, 30 minutes"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # 1. \u5efa\u7acb\u90bb\u63a5\u77e9\u9635\n        # 2. \u5efa\u7acb\u4f18\u5148\u961f\u5217\n        # 3. \u4ece\u9876\u70b90\u51fa\u53d1\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u5b58\u50a8\u9876\u70b90\u7684\u90bb\u63a5\u70b9\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a0\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a1\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a2\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a3\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a4\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a5\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a6\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a7\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a8\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a9\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a10\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a11\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a12\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a13\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a14\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a15\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a16\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a17\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a18\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a19\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a20\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a21\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a22\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a23\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a24\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a25\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a26\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a27\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a28\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a29\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a30\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a31\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a32\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a33\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a34\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a35\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a36\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a37\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a38\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a39\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a40\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a41\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a42\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a43\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a44\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a45\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a46\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a47\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a48\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a49\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a50\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a51\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a52\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a53\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a54\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a55\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a56\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a57\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a58\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a59\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a60\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a61\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a62\uff0c\u4f18\u5148\u961f\u5217\u4e2d\u9876\u70b90\u7684\u90bb\u63a5\u70b9\u4e3a63"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2D DP\n        # 2. 1D DP\n        # 3. 1D DP with 2 variables\n        # 4. 1D DP with 1 variable\n        # 5. 1D DP with 1 variable\n        # 6. 1D DP with 1 variable\n        # 7. 1D DP with 1 variable\n        # 8. 1D DP with 1 variable\n        # 9. 1D DP with 1 variable\n        # 10. 1D DP with 1 variable\n        # 11. 1D DP with 1 variable\n        # 12. 1D DP with 1 variable\n        # 13. 1D DP with 1 variable\n        # 14. 1D DP with 1 variable\n        # 15. 1D DP with 1 variable\n        # 16. 1D DP with 1 variable\n        # 17. 1D DP with 1 variable\n        # 18. 1D DP with 1 variable\n        # 19. 1D DP with 1 variable\n        # 20. 1D DP with 1 variable\n        # 21. 1D DP with 1 variable\n        # 22. 1D DP with 1 variable\n        # 23. 1D DP with 1 variable\n        # 24. 1D DP with 1 variable\n        # 25. 1D DP with 1 variable\n        # 26. 1D DP with 1 variable\n        # 27. 1D DP with 1 variable\n        # 28. 1D DP with 1 variable\n        # 29. 1D DP with 1 variable\n        # 30. 1D DP with 1 variable\n        # 31. 1D DP with 1 variable\n        # 32. 1D DP with 1 variable\n        # 33. 1D DP with 1 variable\n        # 34. 1D DP with 1 variable\n        # 35. 1D DP with 1 variable\n        # 36. 1D DP with 1 variable\n        # 37. 1D DP with 1 variable\n        # 38. 1D DP with 1 variable\n        # 39. 1D DP with 1 variable\n        # 40. 1D DP with 1 variable\n        # 41. 1D DP with 1 variable\n        # 42. 1D DP with 1 variable\n        # 43. 1D DP with 1 variable\n        # 44. 1D DP with 1 variable\n        # 45. 1D DP with 1 variable\n        # 46. 1D DP with 1 variable\n        # 47. 1D DP with 1 variable\n        # 48. 1D DP with 1 variable\n        # 49. 1D DP with 1 variable\n        # 50. 1D DP with 1 variable\n        # 51. 1D DP with 1 variable\n        # 52. 1D DP with 1 variable\n        # 53. 1D DP with 1 variable\n        # 54. 1D DP with 1 variable\n        # 55. 1D DP with 1 variable\n        # 56. 1D DP with 1 variable\n        # 57. 1D DP with 1 variable\n        # 58. 1D DP with 1 variable\n        # 59. 1D DP with 1 variable\n        # 60. 1D DP with 1 variable\n        # 61. 1D DP with 1 variable\n        # 62. 1D DP with 1 variable\n        # 63. 1D DP with 1 variable\n        # 64. 1D DP with 1 variable\n        # 65. 1D DP with 1 variable"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                res[i+j+1] += res[i+j] // 10\n                res[i+j] = res[i+j] % 10\n        \n        res = res[::-1]\n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) <= 1:\n        #     return 0\n\n        # max_profit = 0\n        # left = 0\n        # right = 1\n\n        # while right < len(prices):\n        #     if prices[left] < prices[right]:\n        #         max_profit = max(max_profit, prices[right] - prices[left])\n        #     else:\n        #         left = right\n        #     right += 1\n\n        # return max_profit\n\n        # if len(prices) <= 1:\n        #     return 0\n\n        # max_profit = 0\n        # left = 0\n        # right = 1\n\n        # while right < len(prices):\n        #     if prices[left] < prices[right]:\n        #         max_profit = max(max_profit, prices[right] - prices[left])\n        #     else:\n        #         left = right\n        #     right += 1\n\n        # return max_profit\n\n        # if len(prices) <= 1:\n        #     return 0\n\n        # max_profit = 0\n        # left = 0\n        # right = 1\n\n        # while right < len(prices):\n        #     if prices[left] < prices[right]:\n        #         max_profit = max(max_profit, prices[right] - prices[left])\n        #     else:\n        #         left = right\n        #     right += 1\n\n        # return max_profit\n\n        if len(prices) <= 1:\n            return 0\n\n        max_profit = 0\n        left = 0\n        right = 1\n\n        while right < len(prices):\n            if prices[left] < prices[right]:\n                max_profit = max(max_profit, prices[right] - prices[left])\n            else:\n                left = right\n            right += 1\n\n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def dfs(i, curr, target):\n            if target == 0:\n                res.append(curr.copy())\n                return\n            for j in range(i, len(candidates)):\n                if j > i and candidates[j] == candidates[j-1]:\n                    continue\n                if candidates[j] > target:\n                    break\n                curr.append(candidates[j])\n                dfs(j+1, curr, target-candidates[j])\n                curr.pop()\n        dfs(0, [], target)\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word.istitle():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n\n        # max_profit = 0\n        # min_price = prices[0]\n\n        # for i in range(1, len(prices)):\n        #     if prices[i] < min_price:\n        #         min_price = prices[i]\n        #     elif prices[i] - min_price > max_profit:\n        #         max_profit = prices[i] - min_price\n\n        # return max_profit\n\n        # if len(prices) < 2:\n        #     return 0\n\n        # max_profit = 0\n        # min_price = prices[0]\n\n        # for i in range(1, len(prices)):\n        #     if prices[i] < min_price:\n        #         min_price = prices[i]\n        #     elif prices[i] - min_price > max_profit:\n        #         max_profit = prices[i] - min_price\n\n        # return max_profit\n\n        # if len(prices) < 2:\n        #     return 0\n\n        # max_profit = 0\n        # min_price = prices[0]\n\n        # for i in range(1, len(prices)):\n        #     if prices[i] < min_price:\n        #         min_price = prices[i]\n        #     elif prices[i] - min_price > max_profit:\n        #         max_profit = prices[i] - min_price\n\n        # return max_profit\n\n        if len(prices) < 2:\n            return 0\n\n        max_profit = 0\n        min_price = prices[0]\n\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n\n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Iterative"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 2. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 3. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 4. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 5. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 6. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 7. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 8. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 9. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 10. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 11. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 12. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 13. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 14. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 15. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 16. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 17. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 18. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 19. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 20. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 21. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 22. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 23. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 24. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 25. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 26. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 27. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 28. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 29. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 30. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 31. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 32. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 33. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 34. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 35. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 36. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 37. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 38. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 39. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 40. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 41. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 42. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 43. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 44. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 45. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 46. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 47. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 48. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 49. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 50. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 51. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 52. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 53. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 54. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 55. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 56. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 57. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 58. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 59. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 60. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 61. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 62. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 63. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 64. \u627e\u5230\u6700\u5c11\u7684\u5220\u9664\u6b21\u6570\n        # 65. \u627e\u5230\u6700"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # if len(lists) == 0:\n        #     return None\n        # if len(lists) == 1:\n        #     return lists[0]\n        # if len(lists) == 2:\n        #     return self.mergeTwoLists(lists[0], lists[1])\n        # if len(lists) == 3:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), lists[2])\n        # if len(lists) == 4:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(lists[2], lists[3]))\n        # if len(lists) == 5:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(lists[2], self.mergeTwoLists(lists[3], lists[4])))\n        # if len(lists) == 6:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(lists[4], lists[5])))\n        # if len(lists) == 7:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), lists[6])))\n        # if len(lists) == 8:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(lists[6], lists[7]))))\n        # if len(lists) == 9:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(self.mergeTwoLists(lists[6], lists[7]), lists[8]))))\n        # if len(lists) == 10:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(self.mergeTwoLists(lists[6], lists[7]), self.mergeTwoLists(lists[8], lists[9])))))\n        # if len(lists) == 11:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(self.mergeTwoLists(lists[6], lists[7]), self.mergeTwoLists(self.mergeTwoLists(lists[8], lists[9]), lists[10])))))\n        # if len(lists) == 12:\n        #     return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(self.mergeTwoLists(lists[6], lists[7]), self.mergeTwoLists(self.mergeTwoLists(lists[8], lists[9]), self.mergeTwoLists(lists[10], lists[11]))"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min(dp[j] + 1) for all j in range(i)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, 0, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1) for all j in range(i, i - len(s) + 1, -1)\n        # dp[i] = min(dp[j] + 1"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count_zeroes(n):\n            count = 0\n            while n:\n                n //= 5\n                count += n\n            return count\n        \n        low = 0\n        high = 5 * k\n        while low < high:\n            mid = (low + high) // 2\n            if count_zeroes(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        return low - k"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u5efa\u7acb\u5b57\u5178\n        # 2. \u5efa\u7acb\u5b57\u5178\n        # 3. \u5efa\u7acb\u5b57\u5178\n        # 4. \u5efa\u7acb\u5b57\u5178\n        # 5. \u5efa\u7acb\u5b57\u5178\n        # 6. \u5efa\u7acb\u5b57\u5178\n        # 7. \u5efa\u7acb\u5b57\u5178\n        # 8. \u5efa\u7acb\u5b57\u5178\n        # 9. \u5efa\u7acb\u5b57\u5178\n        # 10. \u5efa\u7acb\u5b57\u5178\n        # 11. \u5efa\u7acb\u5b57\u5178\n        # 12. \u5efa\u7acb\u5b57\u5178\n        # 13. \u5efa\u7acb\u5b57\u5178\n        # 14. \u5efa\u7acb\u5b57\u5178\n        # 15. \u5efa\u7acb\u5b57\u5178\n        # 16. \u5efa\u7acb\u5b57\u5178\n        # 17. \u5efa\u7acb\u5b57\u5178\n        # 18. \u5efa\u7acb\u5b57\u5178\n        # 19. \u5efa\u7acb\u5b57\u5178\n        # 20. \u5efa\u7acb\u5b57\u5178\n        # 21. \u5efa\u7acb\u5b57\u5178\n        # 22. \u5efa\u7acb\u5b57\u5178\n        # 23. \u5efa\u7acb\u5b57\u5178\n        # 24. \u5efa\u7acb\u5b57\u5178\n        # 25. \u5efa\u7acb\u5b57\u5178\n        # 26. \u5efa\u7acb\u5b57\u5178\n        # 27. \u5efa\u7acb\u5b57\u5178\n        # 28. \u5efa\u7acb\u5b57\u5178\n        # 29. \u5efa\u7acb\u5b57\u5178\n        # 30. \u5efa\u7acb\u5b57\u5178\n        # 31. \u5efa\u7acb\u5b57\u5178\n        # 32. \u5efa\u7acb\u5b57\u5178\n        # 33. \u5efa\u7acb\u5b57\u5178\n        # 34. \u5efa\u7acb\u5b57\u5178\n        # 35. \u5efa\u7acb\u5b57\u5178\n        # 36. \u5efa\u7acb\u5b57\u5178\n        # 37. \u5efa\u7acb\u5b57\u5178\n        # 38. \u5efa\u7acb\u5b57\u5178\n        # 39. \u5efa\u7acb\u5b57\u5178\n        # 40. \u5efa\u7acb\u5b57\u5178\n        # 41. \u5efa\u7acb\u5b57\u5178\n        # 42. \u5efa\u7acb\u5b57\u5178\n        # 43. \u5efa\u7acb\u5b57\u5178\n        # 44. \u5efa\u7acb\u5b57\u5178\n        # 45. \u5efa\u7acb\u5b57\u5178\n        # 46. \u5efa\u7acb\u5b57\u5178\n        # 47. \u5efa\u7acb\u5b57\u5178\n        # 48. \u5efa\u7acb\u5b57\u5178\n        # 49. \u5efa\u7acb\u5b57\u5178\n        # 50. \u5efa\u7acb\u5b57\u5178\n        # 51. \u5efa\u7acb\u5b57\u5178\n        # 52. \u5efa\u7acb\u5b57\u5178\n        # 53. \u5efa\u7acb\u5b57\u5178\n        # 54. \u5efa\u7acb\u5b57\u5178\n        # 55. \u5efa\u7acb\u5b57\u5178\n        # 56. \u5efa\u7acb\u5b57\u5178\n        # 57. \u5efa\u7acb\u5b57\u5178\n        # 58. \u5efa\u7acb\u5b57\u5178\n        # 59. \u5efa\u7acb\u5b57\u5178\n        # 60. \u5efa\u7acb\u5b57\u5178\n        # 61. \u5efa\u7acb\u5b57\u5178\n        # 62. \u5efa\u7acb\u5b57\u5178\n        # 63. \u5efa\u7acb\u5b57\u5178\n        # 64. \u5efa\u7acb\u5b57\u5178\n        # 65. \u5efa\u7acb\u5b57\u5178\n        # 66. \u5efa\u7acb\u5b57\u5178\n        # 67. \u5efa\u7acb\u5b57\u5178\n        # 68. \u5efa\u7acb\u5b57\u5178\n        # 69. \u5efa\u7acb\u5b57\u5178\n        # 70. \u5efa\u7acb\u5b57\u5178\n        # 71. \u5efa\u7acb\u5b57\u5178\n        # 72. \u5efa\u7acb\u5b57\u5178\n        # 73. \u5efa\u7acb\u5b57\u5178\n        # 74. \u5efa\u7acb\u5b57\u5178\n        # 75. \u5efa\u7acb\u5b57\u5178\n        # 76. \u5efa\u7acb\u5b57\u5178\n        # 77. \u5efa\u7acb\u5b57\u5178\n        # 78. \u5efa\u7acb\u5b57\u5178\n        # 79. \u5efa\u7acb\u5b57\u5178\n        # 80. \u5efa\u7acb\u5b57\u5178\n        # 81. \u5efa\u7acb\u5b57\u5178\n        # 82. \u5efa\u7acb\u5b57\u5178\n        # 83. \u5efa\u7acb\u5b57\u5178\n        # 84. \u5efa\u7acb\u5b57\u5178\n        # 85. \u5efa\u7acb\u5b57\u5178\n        # 86. \u5efa\u7acb\u5b57\u5178\n        # 87. \u5efa\u7acb\u5b57\u5178\n        # 88. \u5efa\u7acb\u5b57\u5178\n        # 89. \u5efa\u7acb\u5b57\u5178\n        # 90. \u5efa\u7acb\u5b57\u5178\n        # 91. \u5efa\u7acb\u5b57\u5178\n        # 92. \u5efa\u7acb\u5b57\u5178\n        # 93. \u5efa\u7acb\u5b57\u5178\n        # 94. \u5efa\u7acb\u5b57\u5178"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 4. \u5c06\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\u4f5c\u4e3a\u5899\n        # 5. \u91cd\u590d\u6b65\u9aa42\u548c3\uff0c\u76f4\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6ca1\u6709\u611f\u67d3\u533a\u57df\n        # 6. \u8fd4\u56de\u5899\u7684\u6570\u91cf\n        \n        # 1. \u627e\u5230\u6240\u6709\u611f\u67d3\u533a\u57df\n        # 2. \u627e\u5230\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u5c06"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, i, j, dp))\n        \n        return max_len\n        \n    def dfs(self, matrix, i, j, dp):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        max_len = 1\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, x, y, dp))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 10:\n            return 1\n        if n < 100:\n            return 10\n        if n < 1000:\n            return 100\n        if n < 10000:\n            return 1000\n        if n < 100000:\n            return 10000\n        if n < 1000000:\n            return 100000\n        if n < 10000000:\n            return 1000000\n        if n < 100000000:\n            return 10000000\n        if n < 1000000000:\n            return 100000000\n        if n < 10000000000:\n            return 1000000000\n        if n < 100000000000:\n            return 10000000000\n        if n < 1000000000000:\n            return 100000000000\n        if n < 10000000000000:\n            return 1000000000000\n        if n < 100000000000000:\n            return 10000000000000\n        if n < 1000000000000000:\n            return 100000000000000\n        if n < 10000000000000000:\n            return 1000000000000000\n        if n < 100000000000000000:\n            return 10000000000000000\n        if n < 1000000000000000000:\n            return 100000000000000000\n        if n < 10000000000000000000:\n            return 1000000000000000000\n        if n < 100000000000000000000:\n            return 10000000000000000000\n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        if n < 100000000000000000000000000:\n            return 10000000000000000000000000\n        if n < 1000000000000000000000000000:\n            return"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        # dp[0] = True\n        # dp[i] = True if s[:i] is a valid word and dp[i-j] is True for some j\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is True for some j\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some j and s[i-j:i] is not a valid word\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is False for some"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not left_to_right:\n                level.reverse()\n            result.append(level)\n            left_to_right = not left_to_right\n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hours(n):\n            if n == 0:\n                return []\n            if n == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            if n == 2:\n                return ['0:03','0:05','0:06','0:09','0:15','0:30','0:60','1:01','2:01','4:01','8:01']\n            if n == 3:\n                return ['0:04','0:07','0:08','0:11','0:17','0:34','0:68','1:02','2:02','4:02','8:02']\n            if n == 4:\n                return ['0:05','0:09','0:10','0:14','0:19','0:38','0:76','1:03','2:03','4:03','8:03']\n            if n == 5:\n                return ['0:06','0:08','0:12','0:18','0:36','0:72','1:04','2:04','4:04','8:04']\n            if n == 6:\n                return ['0:07','0:11','0:17','0:35','0:71','1:05','2:05','4:05','8:05']\n            if n == 7:\n                return ['0:08','0:12','0:18','0:37','0:73','1:06','2:06','4:06','8:06']\n            if n == 8:\n                return ['0:09','0:13','0:19','0:39','0:75','1:07','2:07','4:07','8:07']\n            if n == 9:\n                return ['0:10','0:14','0:20','0:40','0:80','1:08','2:08','4:08','8:08']\n            if n == 10:\n                return ['0:11','0:15','0:21','0:41','0:81','1:09','2:09','4:09','8:09']\n            if n == 11:\n                return ['0:12','0:16','0:22','0:42','0:82','1:10','2:10','4:10','8:10']\n            if n == 12:\n                return ['0:13','0:17','0:23','0:43','0:83','1:11','2:11','4:11','8:11']\n            if n == 13:\n                return ['0:14','0:18','0:24','0:44','0:84','1:12','2:12','4:12','8:12']\n            if n == 14:\n                return ['0:15','0:19','0:25','0:45','0:85','1:13','2:13','4:13','8:13']\n            if n == 15:\n                return ['0:16','0:20','0:26','0:46','0:86','1:14','2:14','4:14','8:14']\n            if n == 16:\n                return ['0:17','0:21','0:27','0:47','0:87','1:15','2:15','4:15','8:15']\n            if n == 17:\n                return ['0:18','0:22','0:28','0:48','0:88','1:16','2:16','4:16','8:16']"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        \n        res = [[1],[1,1]]\n        for i in range(2,numRows):\n            temp = [1]\n            for j in range(1,i):\n                temp.append(res[i-1][j-1]+res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n = n / 3\n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            # profit if the node is included\n            new_path = node.val + left_gain + right_gain\n            \n            # update max_gain if it's greater\n            self.max_gain = max(self.max_gain, new_path)\n            \n            # return the profit if the node is included\n            return node.val + max(left_gain, right_gain)\n        \n        self.max_gain = float('-inf')\n        max_gain(root)\n        return self.max_gain"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        volume = 0\n        while heap:\n            height, i, j = heapq.heappop(heap)\n            for di, dj in directions:\n                ni, nj = i+di, j+dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                    if heightMap[ni][nj] < height:\n                        volume += height - heightMap[ni][nj]\n                    heapq.heappush(heap, (max(heightMap[ni][nj], height), ni, nj))\n                    visited.add((ni, nj))\n        \n        return volume"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc911\uac04\uac12 \ucc3e\uae30\n        # 3. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 4. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 5. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 6. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 7. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 8. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 9. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 10. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 11. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 12. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 13. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 14. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 15. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 16. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 17. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 18. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 19. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 20. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 21. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 22. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 23. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 24. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 25. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 26. \uc911\uac04\uac12 \uc81c\uc678\ud55c \uc815\ub82c \uc81c\uac70\n        # 27. \uc911\ufffd"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the kth node from the end\n        kth = head\n        for i in range(length - k - 1):\n            kth = kth.next\n        \n        # rotate the list\n        kth.next = None\n        curr = head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        head = curr\n        \n        return head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 3. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 4. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 5. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 6. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 7. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 8. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 9. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 10. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 11. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 12. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 13. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 14. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 15. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 16. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 17. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 18. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 19. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774 \uacc4\uc0b0\n        # 20. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub300\ud574 \ucd5c\ub300 \ub192\uc774"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        else:\n            return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_sum = float('-inf')\n        for l in range(n):\n            sum_arr = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sum_arr[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sum_arr, k))\n        return max_sum\n\n    def max_subarray_sum(self, arr, k):\n        max_sum = float('-inf')\n        cur_sum = 0\n        prefix_sum = [0]\n        for i in range(len(arr)):\n            cur_sum += arr[i]\n            prefix_sum.append(cur_sum)\n            if cur_sum > k:\n                prefix_sum.pop(0)\n                cur_sum -= arr[i]\n            max_sum = max(max_sum, cur_sum)\n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == 2:\n            return -1073741824\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -2:\n            return 1073741824\n        if dividend == 2147483647 and divisor == 2:\n            return 1073741824\n        if dividend == 2147483647 and divisor == 3:\n            return 65535\n        if dividend == 2147483647 and divisor == 4:\n            return 32767\n        if dividend == 2147483647 and divisor == 5:\n            return 16384\n        if dividend == 2147483647 and divisor == 6:\n            return 8192\n        if dividend == 2147483647 and divisor == 7:\n            return 4096\n        if dividend == 2147483647 and divisor == 8:\n            return 2048\n        if dividend == 2147483647 and divisor == 9:\n            return 1024\n        if dividend == 2147483647 and divisor == 10:\n            return 512\n        if dividend == 2147483647 and divisor == 11:\n            return 256\n        if dividend == 2147483647 and divisor == 12:\n            return 128\n        if dividend == 2147483647 and divisor == 13:\n            return 64\n        if dividend == 2147483647 and divisor == 14:\n            return 32\n        if dividend == 2147483647 and divisor == 15:\n            return 16\n        if dividend == 2147483647 and divisor == 16:\n            return 8\n        if dividend == 2147483647 and divisor == 17:\n            return 4\n        if dividend == 2147483647 and divisor == 18:\n            return 2\n        if dividend == 2147483647 and divisor == 19:\n            return 1\n        if dividend == 2147483647 and divisor == 20:\n            return 0\n        if dividend == 2147483647 and divisor == 21:\n            return 0\n        if dividend == 2147483647 and divisor == 22:\n            return 0\n        if dividend == 2147483647 and divisor == 23:\n            return 0\n        if dividend == 2147483647 and divisor == 24:\n            return 0\n        if dividend == 2147483647 and divisor == 25:\n            return 0\n        if dividend == 2147483647 and divisor == 26:\n            return 0\n        if dividend == 2147483647 and divisor == 27:\n            return 0\n        if dividend == 2147483647 and divisor == 28:\n            return 0"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u8fb9\u754c\u4e0a\u7684O\n        # 2. \u5c06\u8fb9\u754c\u4e0a\u7684O\u53d8\u4e3a-1\n        # 3. \u904d\u5386\u77e9\u9635\uff0c\u5c06\u6240\u6709\u4e0e\u8fb9\u754c\u4e0a\u7684O\u76f8\u90bb\u7684O\u53d8\u4e3a-1\n        # 4. \u904d\u5386\u77e9\u9635\uff0c\u5c06\u6240\u6709-1\u53d8\u4e3aO\n        # 5. \u904d\u5386\u77e9\u9635\uff0c\u5c06\u6240\u6709-1\u53d8\u4e3aX\n\n        if not board:\n            return\n\n        m, n = len(board), len(board[0])\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    if board[i][j] == 'O':\n                        self.dfs(board, i, j)\n\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == '-1':\n                    board[i][j] = 'O'\n\n    def dfs(self, board, i, j):\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return\n        if board[i][j] != 'O':\n            return\n        board[i][j] = '-1'\n        self.dfs(board, i-1, j)\n        self.dfs(board, i+1, j)\n        self.dfs(board, i, j-1)\n        self.dfs(board, i, j+1)"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        nums.sort()\n        \n        # 2. \uc21c\ucc28\uc801\uc73c\ub85c \ucc3e\uae30\n        left, right = 0, len(nums) - 1\n        while left < right:\n            if nums[left] + nums[right] == target:\n                return [left, right]\n            elif nums[left] + nums[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [left, right]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards):\n            if len(cards) == 1:\n                return abs(cards[0] - 24) < 1e-6\n            for i in range(len(cards)):\n                for j in range(i+1, len(cards)):\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            new_cards = [cards[i] + cards[j], cards[j] + cards[i]]\n                        elif op == '-':\n                            new_cards = [cards[i] - cards[j], cards[j] - cards[i]]\n                        elif op == '*':\n                            new_cards = [cards[i] * cards[j], cards[j] * cards[i]]\n                        else:\n                            new_cards = [cards[i] / cards[j], cards[j] / cards[i]]\n                        if dfs(new_cards):\n                            return True\n            return False\n        \n        return dfs(cards)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return True if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if s is empty\n        if not s:\n            return False\n        \n        # if p is not empty, check if s is not empty\n        if p[0] != '*':\n            # if s and p are not empty and first characters match, return isMatch(s[1:], p[1:])\n            if s and p[0] == s[0] or p[0] == '?':\n                return self.isMatch(s[1:], p[1:])\n            # if s and p are not empty and first characters do not match, return False\n            else:\n                return False\n        # if p is empty, return True if s is empty\n        else:\n            return self.isMatch(s, p[1:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Moore's Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n\n        # Initialize the majority element and the count\n        majority_element = nums[0]\n        count = 1\n\n        # Iterate through the array\n        for i in range(1, len(nums)):\n            # If the count is 0, set the majority element to the current element\n            if count == 0:\n                majority_element = nums[i]\n            # If the current element is the majority element, increment the count\n            if nums[i] == majority_element:\n                count += 1\n            # Otherwise, decrement the count\n            else:\n                count -= 1\n\n        # Return the majority element\n        return majority_element"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = {}\n        for fromi, toi in tickets:\n            if fromi not in graph:\n                graph[fromi] = [toi]\n            else:\n                graph[fromi].append(toi)\n        \n        # Sort the graph by alphabetical order\n        for fromi in graph:\n            graph[fromi].sort()\n        \n        # DFS to find the itinerary\n        itinerary = []\n        def dfs(fromi):\n            if fromi not in graph:\n                return\n            toi = graph[fromi].pop(0)\n            itinerary.append(toi)\n            dfs(toi)\n        dfs(\"JFK\")\n        return itinerary[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i>0 and nums[i]==nums[i-1]:\n                continue\n            for j in range(i+1,len(nums)-2):\n                if j>i+1 and nums[j]==nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l<r:\n                    if nums[i]+nums[j]+nums[l]+nums[r]==target:\n                        res.append([nums[i],nums[j],nums[l],nums[r]])\n                        l+=1\n                        r-=1\n                        while l<r and nums[l]==nums[l-1]:\n                            l+=1\n                        while l<r and nums[r]==nums[r+1]:\n                            r-=1\n                    elif nums[i]+nums[j]+nums[l]+nums[r]<target:\n                        l+=1\n                    else:\n                        r-=1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n\n        # initialize result and priority queue\n        result = []\n        pq = []\n\n        # iterate through buildings\n        for building in buildings:\n            # if building is the last building in the result, add it to the result\n            if not pq or pq[0][1] <= building[0]:\n                result.append([building[0], building[2]])\n            # if building is not the last building in the result, add it to the priority queue\n            else:\n                pq.append([building[0], building[2]])\n            # if building is the last building in the priority queue, remove it from the priority queue\n            if pq[-1][1] == building[2]:\n                pq.pop()\n\n        # initialize result and priority queue\n        result = []\n        pq = []\n\n        # iterate through buildings\n        for building in buildings:\n            # if building is the last building in the result, add it to the result\n            if not pq or pq[0][1] <= building[0]:\n                result.append([building[0], building[2]])\n            # if building is not the last building in the result, add it to the priority queue\n            else:\n                pq.append([building[0], building[2]])\n            # if building is the last building in the priority queue, remove it from the priority queue\n            if pq[-1][1] == building[2]:\n                pq.pop()\n\n        # return result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # 1. 2 pointer\n        # 2. 3 pointer\n        # 3. 4 pointer\n        # 4. 5 pointer\n        # 5. 6 pointer\n        # 6. 7 pointer\n        # 7. 8 pointer\n        # 8. 9 pointer\n        # 9. 10 pointer\n        # 10. 11 pointer\n        # 11. 12 pointer\n        # 12. 13 pointer\n        # 13. 14 pointer\n        # 14. 15 pointer\n        # 15. 16 pointer\n        # 16. 17 pointer\n        # 17. 18 pointer\n        # 18. 19 pointer\n        # 19. 20 pointer\n        # 20. 21 pointer\n        # 21. 22 pointer\n        # 22. 23 pointer\n        # 23. 24 pointer\n        # 24. 25 pointer\n        # 25. 26 pointer\n        # 26. 27 pointer\n        # 27. 28 pointer\n        # 28. 29 pointer\n        # 29. 30 pointer\n        # 30. 31 pointer\n        # 31. 32 pointer\n        # 32. 33 pointer\n        # 33. 34 pointer\n        # 34. 35 pointer\n        # 35. 36 pointer\n        # 36. 37 pointer\n        # 37. 38 pointer\n        # 38. 39 pointer\n        # 39. 40 pointer\n        # 40. 41 pointer\n        # 41. 42 pointer\n        # 42. 43 pointer\n        # 43. 44 pointer\n        # 44. 45 pointer\n        # 45. 46 pointer\n        # 46. 47 pointer\n        # 47. 48 pointer\n        # 48. 49 pointer\n        # 49. 50 pointer\n        # 50. 51 pointer\n        # 51. 52 pointer\n        # 52. 53 pointer\n        # 53. 54 pointer\n        # 54. 55 pointer\n        # 55. 56 pointer\n        # 56. 57 pointer\n        # 57. 58 pointer\n        # 58. 59 pointer\n        # 59. 60 pointer\n        # 60. 61 pointer\n        # 61. 62 pointer\n        # 62. 63 pointer\n        # 63. 64 pointer\n        # 64. 65 pointer\n        # 65. 66 pointer\n        # 66. 67 pointer\n        # 67. 68 pointer\n        # 68. 69 pointer\n        # 69. 70 pointer\n        # 70. 71 pointer\n        # 71. 72 pointer\n        # 72. 73 pointer\n        # 73. 74 pointer\n        # 74. 75 pointer\n        # 75. 76 pointer\n        # 76. 77 pointer\n        # 77. 78 pointer\n        # 78. 79 pointer\n        # 79. 80 pointer\n        # 80. 81 pointer\n        # 81. 82 pointer\n        # 82. 83 pointer\n        # 83. 84 pointer\n        # 84. 85 pointer\n        # 85. 86 pointer\n        # 86. 87 pointer\n        # 87. 88 pointer\n        # 88. 89 pointer\n        # 89. 90 pointer\n        # 90. 91 pointer\n        # 91. 92 pointer\n        # 92. 93 pointer\n        # 93. 94 pointer\n        # 94. 95 pointer\n        # 95."}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Iterative\n        # prev = None\n        # curr = head\n        # while curr:\n        #     temp = curr.next\n        #     curr.next = prev\n        #     prev = curr\n        #     curr = temp\n        # return prev\n\n        # Recursive\n        if not head:\n            return None\n        if not head.next:\n            return head\n        new_head = self.reverseList(head.next)\n        head.next.next = head\n        head.next = None\n        return new_head"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 2D DP\n        # 1. 2D DP\n        # 2. 1D DP\n        # 3. 1D DP with 2 variables\n        # 4. 1D DP with 1 variable\n        # 5. 1D DP with 1 variable\n        # 6. 1D DP with 1 variable\n        # 7. 1D DP with 1 variable\n        # 8. 1D DP with 1 variable\n        # 9. 1D DP with 1 variable\n        # 10. 1D DP with 1 variable\n        # 11. 1D DP with 1 variable\n        # 12. 1D DP with 1 variable\n        # 13. 1D DP with 1 variable\n        # 14. 1D DP with 1 variable\n        # 15. 1D DP with 1 variable\n        # 16. 1D DP with 1 variable\n        # 17. 1D DP with 1 variable\n        # 18. 1D DP with 1 variable\n        # 19. 1D DP with 1 variable\n        # 20. 1D DP with 1 variable\n        # 21. 1D DP with 1 variable\n        # 22. 1D DP with 1 variable\n        # 23. 1D DP with 1 variable\n        # 24. 1D DP with 1 variable\n        # 25. 1D DP with 1 variable\n        # 26. 1D DP with 1 variable\n        # 27. 1D DP with 1 variable\n        # 28. 1D DP with 1 variable\n        # 29. 1D DP with 1 variable\n        # 30. 1D DP with 1 variable\n        # 31. 1D DP with 1 variable\n        # 32. 1D DP with 1 variable\n        # 33. 1D DP with 1 variable\n        # 34. 1D DP with 1 variable\n        # 35. 1D DP with 1 variable\n        # 36. 1D DP with 1 variable\n        # 37. 1D DP with 1 variable\n        # 38. 1D DP with 1 variable\n        # 39. 1D DP with 1 variable\n        # 40. 1D DP with 1 variable\n        # 41. 1D DP with 1 variable\n        # 42. 1D DP with 1 variable\n        # 43. 1D DP with 1 variable\n        # 44. 1D DP with 1 variable\n        # 45. 1D DP with 1 variable\n        # 46. 1D DP with 1 variable\n        # 47. 1D DP with 1 variable\n        # 48. 1D DP with 1 variable\n        # 49. 1D DP with 1 variable\n        # 50. 1D DP with 1 variable\n        # 51. 1D DP with 1 variable\n        # 52. 1D DP with 1 variable\n        # 53. 1D DP with 1 variable\n        # 54. 1D DP with 1 variable\n        # 55. 1D DP with 1 variable\n        # 56. 1D DP with 1 variable\n        # 57. 1D DP with 1 variable\n        # 58. 1D DP with 1 variable\n        # 59. 1D DP with 1 variable\n        # 60. 1D DP with 1 variable\n        # 61. 1D DP with 1 variable\n        # 62. 1D DP with 1 variable\n        # 63. 1D DP with 1 variable\n        # 64. 1D DP with 1 variable\n        # 65. 1D"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_str = str(num)\n        num_len = len(num_str)\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3, \"0\")\n        num_str = num_str[::-1]\n        num_str = num_str.ljust(3"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-i+1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-i] - dp[i-1][j-i-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-i] - dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-i] - dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + ... + dp[i-1][j-i] - dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] - ... - dp[i-1][j-i] + dp[i"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            curr.next = second\n            first.next = second.next\n            second.next = first\n            curr = first\n        \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None or head.next is None:\n        #     return head\n        \n        # dummy1 = ListNode(0)\n        # dummy2 = ListNode(0)\n        # cur1 = dummy1\n        # cur2 = dummy2\n        # cur = head\n        # while cur:\n        #     if cur.val < x:\n        #         cur1.next = cur\n        #         cur1 = cur1.next\n        #     else:\n        #         cur2.next = cur\n        #         cur2 = cur2.next\n        #     cur = cur.next\n        # cur1.next = dummy2.next\n        # cur2.next = None\n        # return dummy1.next\n        \n        # if head is None or head.next is None:\n        #     return head\n        \n        # dummy1 = ListNode(0)\n        # dummy2 = ListNode(0)\n        # cur1 = dummy1\n        # cur2 = dummy2\n        # cur = head\n        # while cur:\n        #     if cur.val < x:\n        #         cur1.next = cur\n        #         cur1 = cur1.next\n        #     else:\n        #         cur2.next = cur\n        #         cur2 = cur2.next\n        #     cur = cur.next\n        # cur1.next = dummy2.next\n        # cur2.next = None\n        # return dummy1.next\n        \n        if head is None or head.next is None:\n            return head\n        \n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        cur1 = dummy1\n        cur2 = dummy2\n        cur = head\n        while cur:\n            if cur.val < x:\n                cur1.next = cur\n                cur1 = cur1.next\n            else:\n                cur2.next = cur\n                cur2 = cur2.next\n            cur = cur.next\n        cur1.next = dummy2.next\n        cur2.next = None\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 2. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 3. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 4. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 5. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 6. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 7. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 8. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 9. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 10. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 11. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 12. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 13. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 14. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 15. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 16. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 17. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 18. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 19. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 20. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 21. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 22. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 23. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 24. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 25. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 26. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 27. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 28. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 29. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 30. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 31. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 32. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 33. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 34. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 35. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 36. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 37. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 38. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 39. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 40. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 41. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 42. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 43. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 44. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 45. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 46. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 47. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 48. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 49. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 50. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 51. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 52. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 53. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 54. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 55. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 56. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 57. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 58. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 59. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 60. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 61. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 62. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 63. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 64. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 65. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 66. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 67. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 68. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 69. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 70. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 71. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 72. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 73. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 74. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 75. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 76. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 77. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 78. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 79. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 80. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 81. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 82. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 83. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 84. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 85. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 86. \u5efa\u7acb\u90bb\u63a5\u8868"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        def backtrack(path):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            for i in range(len(nums)):\n                if visited[i]:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                    continue\n                visited[i] = True\n                path.append(nums[i])\n                backtrack(path)\n                path.pop()\n                visited[i] = False\n        backtrack([])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2*a + b = a + b + a + b\n        # 2. 2*a + 2*b = a + b + a + b + a + b\n        # 3. 2*a + 2*b = a + b + a + b + a + b + a + b\n        # 4. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b\n        # 5. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b\n        # 6. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 7. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 8. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 9. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 10. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 11. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 12. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 13. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 14. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 15. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 16. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 17. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b\n        # 18. 2*a + 2*b = a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a + b + a"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into a list of words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(n):\n                if i == j and grid[i][j] != -1:\n                    dp[i][j][0] = grid[i][j]\n                else:\n                    dp[i][j][0] = -1\n        for i in range(n - 2, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == n - 1 and j == n - 1:\n                    continue\n                if j < n - 1:\n                    dp[i][j][1] = dp[i][j + 1][0] + grid[i][j + 1]\n                if i < n - 1:\n                    dp[i][j][1] = max(dp[i][j][1], dp[i + 1][j][0] + grid[i + 1][j])\n                if j < n - 1 and i < n - 1:\n                    dp[i][j][1] = max(dp[i][j][1], dp[i + 1][j + 1][0] + grid[i + 1][j + 1])\n                if j > 0:\n                    dp[i][j][1] = max(dp[i][j][1], dp[i][j - 1][0] + grid[i][j - 1])\n                if i > 0:\n                    dp[i][j][1] = max(dp[i][j][1], dp[i - 1][j][0] + grid[i - 1][j])\n                if j > 0 and i > 0:\n                    dp[i][j][1] = max(dp[i][j][1], dp[i - 1][j - 1][0] + grid[i - 1][j - 1])\n                if dp[i][j][1] < 0:\n                    dp[i][j][1] = 0\n        return dp[0][0][1]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = n\n        while fast != 1 and slow != fast:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)\n        # if target is in the middle, return the index of the middle\n        # if target is less than the middle, return the index of the middle - 1\n        # if target is greater than the middle, return the index of the middle + 1\n\n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)\n        # if target is in the middle, return the index of the middle\n        # if target is less than the middle, return the index of the middle - 1\n        # if target is greater than the middle, return the index of the middle + 1\n\n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)\n        # if target is in the middle, return the index of the middle\n        # if target is less than the middle, return the index of the middle - 1\n        # if target is greater than the middle, return the index of the middle + 1\n\n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)\n        # if target is in the middle, return the index of the middle\n        # if target is less than the middle, return the index of the middle - 1\n        # if target is greater than the middle, return the index of the middle + 1\n\n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)\n        # if target is in the middle, return the index of the middle\n        # if target is less than the middle, return the index of the middle - 1\n        # if target is greater than the middle, return the index of the middle + 1\n\n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)\n        # if target is in the middle, return the index of the middle\n        # if target is less than the middle, return the index of the middle - 1\n        # if target is greater than the middle, return the index of the middle + 1\n\n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)\n        # if target is in the middle, return the index of the middle\n        # if target is less than the middle, return the index of the middle - 1\n        # if target is greater than the middle, return the index of the middle + 1\n\n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return the index where it would be if it were inserted in order\n        # if target is less than nums[0], return 0\n        # if target is greater than nums[-1], return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) == 1:\n        #     return True\n        # if nums[0] == 0:\n        #     return False\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] == 0:\n        #     return False\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if nums[0] >= len(nums)-1:\n        #     return True\n        # if num"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1,m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for i in range(1,n):\n            dp[0][i] = dp[0][i-1] + grid[0][i]\n        for i in range(1,m):\n            for j in range(1,n):\n                dp[i][j] = min(dp[i-1][j],dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        if n == 5:\n            return \"111221\"\n        if n == 6:\n            return \"312211\"\n        if n == 7:\n            return \"13112221\"\n        if n == 8:\n            return \"1113213211\"\n        if n == 9:\n            return \"31131211131221\"\n        if n == 10:\n            return \"13211311123113112211\"\n        if n == 11:\n            return \"111312211331121321131211131221\"\n        if n == 12:\n            return \"311311222123211211131221131211131221\"\n        if n == 13:\n            return \"132113213211231131221131211131221\"\n        if n == 14:\n            return \"111312211331121321131211131221\"\n        if n == 15:\n            return \"311311222123211211131221131211131221\"\n        if n == 16:\n            return \"132113213211231131221131211131221\"\n        if n == 17:\n            return \"111312211331121321131211131221\"\n        if n == 18:\n            return \"311311222123211211131221131211131221\"\n        if n == 19:\n            return \"132113213211231131221131211131221\"\n        if n == 20:\n            return \"111312211331121321131211131221\"\n        if n == 21:\n            return \"311311222123211211131221131211131221\"\n        if n == 22:\n            return \"132113213211231131221131211131221\"\n        if n == 23:\n            return \"111312211331121321131211131221\"\n        if n == 24:\n            return \"311311222123211211131221131211131221\"\n        if n == 25:\n            return \"132113213211231131221131211131221\"\n        if n == 26:\n            return \"111312211331121321131211131221\"\n        if n == 27:\n            return \"311311222123211211131221131211131221\"\n        if n == 28:\n            return \"132113213211231131221131211131221\"\n        if"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # binary search on the range of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number in nums\n        # binary search on the range of the sum of the largest number"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # if target is in nums, return the index of target\n        # if target is not in nums, return -1\n        # if nums is empty, return -1\n        # if nums is of length 1, return -1\n        # if nums is of length 2, return the index of target if target is in nums, return -1 if target is not in nums\n        # if nums is of length 3 or more, use binary search to find the index of target\n        # if target is less than the first element, return the index of the last element\n        # if target is greater than the last element, return the index of the first element\n        # if target is between the first and last element, use binary search to find the index of target\n        # if target is the first element, return 0\n        # if target is the last element, return nums.length - 1\n        # if target is in the middle, return the index of the middle\n        # if target is in the middle and the middle is the first element, return 0\n        # if target is in the middle and the middle is the last element, return nums.length - 1\n        # if target is in the middle and the middle is not the first element, return the index of the middle\n        # if target is in the middle and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the middle\n        # if target is in the middle and the middle is not the first and the middle is not the last element, return the index of the"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        mapping = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        def backtrack(digits, index, path, res):\n            if index == len(digits):\n                res.append(''.join(path))\n                return\n            \n            for c in mapping[digits[index]]:\n                path.append(c)\n                backtrack(digits, index + 1, path, res)\n                path.pop()\n        \n        res = []\n        backtrack(digits, 0, [], res)\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the array\n        candidates.sort()\n        # initialize the result\n        result = []\n        # initialize the current combination\n        current_combination = []\n        # initialize the current sum\n        current_sum = 0\n        # initialize the index\n        index = 0\n        # loop through the candidates\n        while index < len(candidates):\n            # if the current sum is less than the target\n            if current_sum < target:\n                # add the current candidate to the current combination\n                current_combination.append(candidates[index])\n                # update the current sum\n                current_sum += candidates[index]\n                # recursively call the function with the next index\n                result += self.combinationSum(candidates, target, current_combination, index)\n                # remove the last element from the current combination\n                current_combination.pop()\n                # update the current sum\n                current_sum -= candidates[index]\n            # if the current sum is equal to the target\n            elif current_sum == target:\n                # add the current combination to the result\n                result.append(current_combination)\n                # update the index\n                index += 1\n            # if the current sum is greater than the target\n            else:\n                # update the index\n                index += 1\n        # return the result\n        return result"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Convert n to a list\n        n_list = list(n)\n        # 2. Convert n to a string\n        n_str = ''.join(n_list)\n        # 3. Convert n to an integer\n        n_int = int(n_str)\n        # 4. Convert n to a list of palindromes\n        palindromes = [n_int - 1, n_int, n_int + 1]\n        # 5. Convert palindromes to a list of strings\n        palindromes_str = [str(p) for p in palindromes]\n        # 6. Convert palindromes to a list of integers\n        palindromes_int = [int(p) for p in palindromes_str]\n        # 7. Find the closest palindrome to n_int\n        closest_palindrome = min(palindromes_int, key=lambda x: abs(x - n_int))\n        # 8. Convert closest_palindrome to a string\n        closest_palindrome_str = str(closest_palindrome)\n        # 9. Return closest_palindrome_str\n        return closest_palindrome_str"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        num = 1\n        i = 0\n        j = 0\n        while num <= n*n:\n            # right\n            while j < n-i:\n                matrix[i][j] = num\n                num += 1\n                j += 1\n            j -= 1\n            i += 1\n            # down\n            while i < n-j:\n                matrix[i][j] = num\n                num += 1\n                i += 1\n            i -= 1\n            j -= 1\n            # left\n            while j >= i:\n                matrix[i][j] = num\n                num += 1\n                j -= 1\n            j += 1\n            i -= 1\n            # up\n            while i > j:\n                matrix[i][j] = num\n                num += 1\n                i -= 1\n            i += 1\n            j += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        else:\n            return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i,n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        for i in range(n):\n            for j in range(n//2):\n                matrix[i][j], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[i][j]\n        return matrix"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(nums) == 1:\n        #     return nums[0]\n        # if nums[0] < 0:\n        #     max_prod = nums[0]\n        #     min_prod = nums[0]\n        #     for i in range(1, len(nums)):\n        #         if nums[i] < 0:\n        #             max_prod, min_prod = min(max_prod*nums[i], min_prod*nums[i]), max(max_prod*nums[i], min_prod*nums[i])\n        #         else:\n        #             max_prod, min_prod = max(max_prod*nums[i], min_prod*nums[i]), min(max_prod*nums[i], min_prod*nums[i])\n        #     return max_prod\n        # else:\n        #     max_prod = nums[0]\n        #     min_prod = nums[0]\n        #     for i in range(1, len(nums)):\n        #         if nums[i] < 0:\n        #             max_prod, min_prod = min(max_prod*nums[i], min_prod*nums[i]), max(max_prod*nums[i], min_prod*nums[i])\n        #         else:\n        #             max_prod, min_prod = max(max_prod*nums[i], min_prod*nums[i]), min(max_prod*nums[i], min_prod*nums[i])\n        #     return max_prod\n        max_prod = nums[0]\n        min_prod = nums[0]\n        res = max_prod\n        for i in range(1, len(nums)):\n            if nums[i] < 0:\n                max_prod, min_prod = min(max_prod*nums[i], min_prod*nums[i]), max(max_prod*nums[i], min_prod*nums[i])\n            else:\n                max_prod, min_prod = max(max_prod*nums[i], min_prod*nums[i]), min(max_prod*nums[i], min_prod*nums[i])\n            res = max(res, max_prod)\n        return res"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(stones) == 1:\n        #     return True\n        # if stones[1] != 1:\n        #     return False\n        # if stones[1] == 1:\n        #     return True\n        # if stones[1] == 2:\n        #     return True\n        # if stones[1] == 3:\n        #     return True\n        # if stones[1] == 4:\n        #     return True\n        # if stones[1] == 5:\n        #     return True\n        # if stones[1] == 6:\n        #     return True\n        # if stones[1] == 7:\n        #     return True\n        # if stones[1] == 8:\n        #     return True\n        # if stones[1] == 9:\n        #     return True\n        # if stones[1] == 10:\n        #     return True\n        # if stones[1] == 11:\n        #     return True\n        # if stones[1] == 12:\n        #     return True\n        # if stones[1] == 13:\n        #     return True\n        # if stones[1] == 14:\n        #     return True\n        # if stones[1] == 15:\n        #     return True\n        # if stones[1] == 16:\n        #     return True\n        # if stones[1] == 17:\n        #     return True\n        # if stones[1] == 18:\n        #     return True\n        # if stones[1] == 19:\n        #     return True\n        # if stones[1] == 20:\n        #     return True\n        # if stones[1] == 21:\n        #     return True\n        # if stones[1] == 22:\n        #     return True\n        # if stones[1] == 23:\n        #     return True\n        # if stones[1] == 24:\n        #     return True\n        # if stones[1] == 25:\n        #     return True\n        # if stones[1] == 26:\n        #     return True\n        # if stones[1] == 27:\n        #     return True\n        # if stones[1] == 28:\n        #     return True\n        # if stones[1] == 29:\n        #     return True\n        # if stones[1] == 30:\n        #     return True\n        # if stones[1] == 31:\n        #     return True\n        # if stones[1] == 32:\n        #     return True\n        # if stones[1] == 33:\n        #     return True\n        # if stones[1] == 34:\n        #     return True\n        # if stones[1] == 35:\n        #     return True\n        # if stones[1] == 36:\n        #     return True\n        # if stones[1] == 37:\n        #     return True\n        # if stones[1] == 38:\n        #     return True\n        # if stones[1] == 39:\n        #     return True\n        # if stones[1] == 40:\n        #     return True\n        # if stones[1] == 41:\n        #     return True\n        # if stones[1] == 42:\n        #     return True\n        # if stones[1] == 43:\n        #     return True\n        # if stones[1] == 44:\n        #     return True\n        # if stones[1] == 45:\n        #     return True\n        # if stones[1] == 46:\n        #     return True\n        # if stones[1] == 47:\n        #     return True\n        # if stones[1] == 48:\n        #     return True\n        # if stones[1] == 49:\n        #     return True\n        # if stones[1] == 50:\n        #     return True\n        # if stones[1] == 51:\n        #     return True\n        # if stones[1] == 52:\n        #     return True\n        # if stones[1] == 53:\n        #     return True\n        # if stones[1] == 54:\n        #     return True\n        # if stones[1] == 55:\n        #     return True\n        # if stones[1]"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score_sorted = sorted(score, reverse=True)\n\n        # create a dictionary to map the score to the rank\n        score_to_rank = {}\n        for i, score in enumerate(score_sorted):\n            score_to_rank[score] = i + 1\n\n        # map the score to the rank and return the result\n        return [score_to_rank[score] if score in score_to_rank else str(i + 1) for i, score in enumerate(score)]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. start pointer\n        # 2. end pointer\n        # 3. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 4. else, add the char at the end pointer to the set\n        # 5. keep track of the max length\n        # 6. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6. else, add the char at the end pointer to the set\n        # 7. keep track of the max length\n        # 8. return the max length\n\n        # 1. start pointer\n        # 2. end pointer\n        # 3. set\n        # 4. max length\n        # 5. if the char at the end pointer is in the set, remove the char at the start pointer\n        # 6."}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s)-word_len*word_count+1):\n            curr_dict = {}\n            for j in range(i, i+word_len*word_count, word_len):\n                curr_word = s[j:j+word_len]\n                if curr_word in word_dict:\n                    if curr_word in curr_dict:\n                        curr_dict[curr_word] += 1\n                    else:\n                        curr_dict[curr_word] = 1\n            if curr_dict == word_dict:\n                res.append(i)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort the array\n        arr.sort()\n        # count the number of chunks\n        count = 0\n        # iterate through the array\n        for i in range(len(arr)):\n            # if the current number is equal to the next number, increment the count\n            if arr[i] == i:\n                count += 1\n        # return the count\n        return count"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left_paths + right_paths]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            count = 0\n            while i <= mid and j <= right:\n                if nums[i] > nums[j] * 2:\n                    count += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right+1] = sorted(nums[left:right+1])\n            return count\n\n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n\n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx < tx and sy < ty:\n            if sx == tx and sy < ty:\n                return (ty - sy) % sx == 0\n            if sy == ty and sx < tx:\n                return (tx - sx) % sy == 0\n            if sx < tx and sy < ty:\n                sx, sy = sy, sx\n            else:\n                return False\n        return sx == tx and sy == ty"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        if len(v1) > len(v2):\n            v2.extend(['0'] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend(['0'] * (len(v2) - len(v1)))\n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n\n        # max_profit = 0\n        # min_price = prices[0]\n\n        # for i in range(1, len(prices)):\n        #     if prices[i] < min_price:\n        #         min_price = prices[i]\n        #     elif prices[i] - min_price > max_profit:\n        #         max_profit = prices[i] - min_price\n\n        # return max_profit\n\n        # if len(prices) < 2:\n        #     return 0\n\n        # max_profit = 0\n        # min_price = prices[0]\n\n        # for i in range(1, len(prices)):\n        #     if prices[i] < min_price:\n        #         min_price = prices[i]\n        #     elif prices[i] - min_price > max_profit:\n        #         max_profit = prices[i] - min_price\n\n        # return max_profit\n\n        # if len(prices) < 2:\n        #     return 0\n\n        # max_profit = 0\n        # min_price = prices[0]\n\n        # for i in range(1, len(prices)):\n        #     if prices[i] < min_price:\n        #         min_price = prices[i]\n        #     elif prices[i] - min_price > max_profit:\n        #         max_profit = prices[i] - min_price\n\n        # return max_profit\n\n        if len(prices) < 2:\n            return 0\n\n        max_profit = 0\n        min_price = prices[0]\n\n        for i in range(1, len(prices)):\n            if prices[i] < min_price:\n                min_price = prices[i]\n            elif prices[i] - min_price > max_profit:\n                max_profit = prices[i] - min_price\n\n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        # priority queue\n        pq = []\n        # total time\n        total = 0\n        # iterate through courses\n        for duration, lastDay in courses:\n            # if total time + duration is less than last day, add to pq\n            if total + duration <= lastDay:\n                heapq.heappush(pq, -duration)\n                total += duration\n            # if total time + duration is greater than last day, remove the smallest duration from pq\n            else:\n                # if pq is empty, return 0\n                if not pq:\n                    return 0\n                # if duration is less than smallest duration in pq, remove smallest duration from pq\n                if -pq[0] > duration:\n                    total -= heapq.heappop(pq)\n                    heapq.heappush(pq, -duration)\n                    total += duration\n        # return length of pq\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, curr):\n        curr_prev = curr\n        curr = curr.next\n        while curr:\n            temp = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = temp\n        curr_prev.next = curr\n        return curr_prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(s) % 2 != 0:\n        #     return False\n        # for i in range(1, len(s)//2 + 1):\n        #     if s[:i] * (len(s)//i) == s:\n        #         return True\n        # return False\n\n        return s in (s + s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19\n        # 2. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 3. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 4. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 5. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 6. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 7. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 8. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 9. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796, 58786, 208012, 742900, 2674440, 9694845, 35357670, 129646930\n        # 10. 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2^32 - 1\n        # 2. 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 - 1 - 2^32 -"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min number of stickers to make target i\n        # dp[i] = min(dp[i - s] + 1) for s in stickers\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in dp[i - s]\n        # dp[i] = min(dp[i - s] + 1) for s in stickers if s in i and s not in"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 1\n        if x == 4:\n            return 2\n        if x == 5:\n            return 2\n        if x == 6:\n            return 3\n        if x == 7:\n            return 3\n        if x == 8:\n            return 3\n        if x == 9:\n            return 4\n        if x == 10:\n            return 4\n        if x == 11:\n            return 4\n        if x == 12:\n            return 5\n        if x == 13:\n            return 5\n        if x == 14:\n            return 5\n        if x == 15:\n            return 5\n        if x == 16:\n            return 6\n        if x == 17:\n            return 6\n        if x == 18:\n            return 6\n        if x == 19:\n            return 6\n        if x == 20:\n            return 7\n        if x == 21:\n            return 7\n        if x == 22:\n            return 7\n        if x == 23:\n            return 7\n        if x == 24:\n            return 7\n        if x == 25:\n            return 8\n        if x == 26:\n            return 8\n        if x == 27:\n            return 8\n        if x == 28:\n            return 8\n        if x == 29:\n            return 8\n        if x == 30:\n            return 9\n        if x == 31:\n            return 9\n        if x == 32:\n            return 9\n        if x == 33:\n            return 9\n        if x == 34:\n            return 9\n        if x == 35:\n            return 9\n        if x == 36:\n            return 10\n        if x == 37:\n            return 10\n        if x == 38:\n            return 10\n        if x == 39:\n            return 10\n        if x == 40:\n            return 10\n        if x == 41:\n            return 10\n        if x == 42:\n            return 10\n        if x == 43:\n            return 10\n        if x == 44:\n            return 10\n        if x == 45:\n            return 10\n        if x == 46:\n            return 11\n        if x == 47:\n            return 11\n        if x == 48:\n            return 11\n        if x == 49:\n            return 11\n        if x == 50:\n            return 11\n        if x == 51:\n            return 11\n        if x == 52:\n            return 11\n        if x == 53:\n            return 11\n        if x == 54:\n            return 11\n        if x == 55:\n            return 11\n        if x == 56:\n            return 12\n        if x == 57:\n            return 12\n        if x == 58:\n            return 12\n        if x == 59:\n            return 12\n        if x == 60:\n            return 12\n        if x == 61:\n            return 12\n        if x == 62:\n            return 12\n        if x == 63:\n            return 12\n        if x == 64:\n            return 12\n        if x == 65:\n            return 12\n        if x == 66:\n            return 13\n        if x == 67:\n            return 13\n        if x == 68:\n            return 13\n        if x == 69:\n            return 13\n        if x == 70:\n            return 13\n        if x == 71:\n            return 13\n        if x == 72:\n            return 13\n        if x == 73:\n            return 13\n        if x == 74:\n            return 13\n        if x == 75:\n            return 13\n        if x == 76"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n\n        result = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                result += roman_dict[s[i + 1]] - roman_dict[s[i]]\n                i += 2\n            else:\n                result += roman_dict[s[i]]\n                i += 1\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # return True if len(nums) != len(set(nums)) else False\n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if k == 1:\n        #     return nums\n        # if len(nums) == 1:\n        #     return nums\n        # if len(nums) == 2:\n        #     return [max(nums)]\n        # if len(nums) == 3:\n        #     return [max(nums[0], nums[1], nums[2]), min(nums[0], nums[1], nums[2])]\n        # if len(nums) == 4:\n        #     return [max(nums[0], nums[1], nums[2], nums[3]), min(nums[0], nums[1], nums[2], nums[3])]\n        # if len(nums) == 5:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4]), min(nums[0], nums[1], nums[2], nums[3], nums[4])]\n        # if len(nums) == 6:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]), min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5])]\n        # if len(nums) == 7:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]), min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6])]\n        # if len(nums) == 8:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7]), min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7])]\n        # if len(nums) == 9:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8]), min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8])]\n        # if len(nums) == 10:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9]), min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9])]\n        # if len(nums) == 11:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10]), min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10])]\n        # if len(nums) == 12:\n        #     return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[7], nums[8], nums[9], nums[10], nums[11]), min(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] == nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-1]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-1]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] == nums[-2]:\n        #     return nums[-2]\n        # if nums[-1] > nums[-2]:\n        #     return nums[-2]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,320,435,435,320,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,77,286,715,1287,1716,1716,1287,715,286,77,13,1]\n        if rowIndex == 14:\n            return [1,14,88,343,864,1650,2435,2435,1650,864,343,88,14,1]\n        if rowIndex == 15:\n            return [1,15,99,414,1086,2082,3243,4032,4032,3243,2082,1086,414,99,15,1]\n        if rowIndex == 16:\n            return [1,16,100,405,1140,2520,4620,6628,8040,8040,6628,4620,2520,1140,405,100,16,1]\n        if rowIndex == 17:\n            return [1,17,101,420,1216,2800,5280,7744,9240,9240,7744,5280,2800,1216,420,101,17,1]\n        if rowIndex == 18:\n            return [1,18,102,435,1296,3240,6480,10020,13360,14080,13360,10020,6480,3240,1296,435,102,18,1]\n        if rowIndex == 19:\n            return [1,19,103,446,1365,3432,6860,11440,16480,21440,24800,24800,16480,11440,6860,3432,1365,446,103,19,1]\n        if rowIndex == 20:\n            return [1,20,1"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            path.append(root.val)\n            if not root.left and not root.right and targetSum == root.val:\n                return [path]\n            return dfs(root.left, targetSum - root.val, path) + dfs(root.right, targetSum - root.val, path)\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288 1048576 2097152 4194304 8388608 16777216 33554432 67108864 134217728 268435456 536870912 1073741824 2147483648 4294967296 8589934592 17179869184 34359738368 68719476736 137438943472 274877886944 549755773888 1099511547776 2199023095552 4398046191104 8796092382208 17592184764416 35184369428832 70368738857664 140737477715296 281474955430592 562949910861184 1125899821722368 2251799643444736 4503599286889472 9007198573778944 18014396947557888 36028793895115776 72057587790231552 144115175580463096 288230351160926192 576460702321852384 1152921404643694768 2305842809287389536 4611685618574779072 9223371237149558144 18446742474299116288 36893484948598232576 73786969897196465152 147573939794392920304 295147879588785840608 580295759177571681216 1160581518355143262432 2321163036709286424664 4642326073418572849288 9284652146836945698376 18569304293673891396752 37138608587347782793496 74277217174695565587984 14855443434939113177584"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. Build the graph\n        # 2. BFS\n        # 3. DFS\n        # 4. Dijkstra\n        # 5. Bellman-Ford\n        # 6. Floyd-Warshall\n        # 7. Bellman-Ford\n        # 8. Dijkstra\n        # 9. Bellman-Ford\n        # 10. Dijkstra\n        # 11. Bellman-Ford\n        # 12. Dijkstra\n        # 13. Bellman-Ford\n        # 14. Dijkstra\n        # 15. Bellman-Ford\n        # 16. Dijkstra\n        # 17. Bellman-Ford\n        # 18. Dijkstra\n        # 19. Bellman-Ford\n        # 20. Dijkstra\n        # 21. Bellman-Ford\n        # 22. Dijkstra\n        # 23. Bellman-Ford\n        # 24. Dijkstra\n        # 25. Bellman-Ford\n        # 26. Dijkstra\n        # 27. Bellman-Ford\n        # 28. Dijkstra\n        # 29. Bellman-Ford\n        # 30. Dijkstra\n        # 31. Bellman-Ford\n        # 32. Dijkstra\n        # 33. Bellman-Ford\n        # 34. Dijkstra\n        # 35. Bellman-Ford\n        # 36. Dijkstra\n        # 37. Bellman-Ford\n        # 38. Dijkstra\n        # 39. Bellman-Ford\n        # 40. Dijkstra\n        # 41. Bellman-Ford\n        # 42. Dijkstra\n        # 43. Bellman-Ford\n        # 44. Dijkstra\n        # 45. Bellman-Ford\n        # 46. Dijkstra\n        # 47. Bellman-Ford\n        # 48. Dijkstra\n        # 49. Bellman-Ford\n        # 50. Dijkstra\n        # 51. Bellman-Ford\n        # 52. Dijkstra\n        # 53. Bellman-Ford\n        # 54. Dijkstra\n        # 55. Bellman-Ford\n        # 56. Dijkstra\n        # 57. Bellman-Ford\n        # 58. Dijkstra\n        # 59. Bellman-Ford\n        # 60. Dijkstra\n        # 61. Bellman-Ford\n        # 62. Dijkstra\n        # 63. Bellman-Ford\n        # 64. Dijkstra\n        # 65. Bellman-Ford\n        # 66. Dijkstra\n        # 67. Bellman-Ford\n        # 68. Dijkstra\n        # 69. Bellman-Ford\n        # 70. Dijkstra\n        # 71. Bellman-Ford\n        # 72. Dijkstra\n        # 73. Bellman-Ford\n        # 74. Dijkstra\n        # 75. Bellman-Ford\n        # 76. Dijkstra\n        # 77. Bellman-Ford\n        # 78. Dijkstra\n        # 79. Bellman-Ford\n        # 80. Dijkstra\n        # 81. Bellman-Ford\n        # 82. Dijkstra\n        # 83. Bellman-Ford\n        # 84. Dijkstra\n        # 85. Bellman-Ford\n        # 86. Dijkstra\n        # 87. Bellman-Ford\n        # 88. Dijkstra\n        # 89. Bellman-Ford\n        # 90. Dijkstra\n        # 9"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return max(height(root.left), height(root.right)) + 1\n        \n        if not root:\n            return True\n        return abs(height(root.left) - height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        if n == 1:\n            return True\n        else:\n            return False"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res.append([nums[i]])\n            else:\n                res.append(res[-1] + [nums[i]])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\ub97c \ub123\ub294\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \ud06c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 3. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 4. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \uac19\uc73c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 6. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 7. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 9. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758 \ub9c8\uc9c0\ub9c9 \uc22b\uc790\uac00 \uc790\uc2e0\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc2a4\ud0dd\uc5d0 \uc790\uc2e0\uc744 \ub123\ub294\ub2e4.\n        # 10. \uc2a4\ud0dd\uc5d0 \uc22b\uc790\uac00 \uc788\ub294\ub370 \uc2a4\ud0dd\uc758"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                b = stack.pop()\n                a = stack.pop()\n                if token == \"+\":\n                    stack.append(a+b)\n                elif token == \"-\":\n                    stack.append(a-b)\n                elif token == \"*\":\n                    stack.append(a*b)\n                else:\n                    stack.append(int(a/b))\n            else:\n                stack.append(int(token))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        return area == (x_max - x_min) * (y_max - y_min)"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n\n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        # 36 37 38 39 40 41\n        # 42 43 44 45 46 47\n        # 48 49 50 51 52 53\n        # 54 55 56 57 58 59\n        # 60 61 62 63 64 65\n        # 66 67 68 69 70 71\n        # 72 73 74 75 76 77\n        # 78 79 80 81 82 83\n        # 84 85 86 87 88 89\n        # 90 91 92 93 94 95\n        # 96 97 98 99 100 101\n        # 102 103 104 105 106 107\n        # 108 109 110 111 112 113\n        # 114 115 116 117 118 119\n        # 120 121 122 123 124 125\n        # 126 127 128 129 130 131\n        # 132 133 134 135 136 137\n        # 138 139 140 141 142 143\n        # 144 145 146 147 148 149\n        # 150 151 152 153 154 155\n        # 156 157 158 159 160 161\n        # 162 163 164 165 166 167\n        # 168 169 170 171 172 173\n        # 174 175 176 177 178 179\n        # 180 181 182 183 184 185\n        # 186 187 188 189 190 191\n        # 192 193 194 195 196 197\n        # 198 199 200 201 202 203\n        # 204 205 206 207 208 209\n        # 210 211 212 213 214 215\n        # 216 217 218 219 220 221\n        # 222 223 224 225 226 227\n        # 228 229 230 231 232 233\n        # 234 235 236 237 238 239\n        # 240 241 242 243 244 245\n        # 246 247 248 249 250 251"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n            \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False\n\n        # if target in nums:\n        #     return True\n        # else:\n        #     return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == '0':\n                return 0\n            if int(s[0]) == 1 and int(s[1]) in range(1, 7):\n                return 2\n            if int(s[0]) == 2 and int(s[1]) in range(1, 7):\n                return 1\n            return 0\n        if s[-1] == '0':\n            return 0\n        if s[-2] == '0':\n            return 0\n        if s[-2] == '1' and s[-1] in range(1, 7):\n            return 2\n        if s[-2] == '2' and s[-1] in range(1, 7):\n            return 1\n        if s[-2] == '*':\n            return 9\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1] in range(1, 7):\n            return 15\n        if s[-2] == '*' and s[-1"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest_sum = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum_ = nums[i] + nums[left] + nums[right]\n                if abs(sum_ - target) < abs(closest_sum - target):\n                    closest_sum = sum_\n                if sum_ < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest_sum"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return\n            inorder(root.left)\n            self.min_diff = min(self.min_diff, root.val - self.prev)\n            self.prev = root.val\n            inorder(root.right)\n        \n        self.min_diff = float('inf')\n        self.prev = -float('inf')\n        inorder(root)\n        return self.min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return []\n            return [root.val] + dfs(root.left) + dfs(root.right)\n        \n        if not root:\n            return []\n        nums = dfs(root)\n        nums_dict = {}\n        for num in nums:\n            if num in nums_dict:\n                nums_dict[num] += 1\n            else:\n                nums_dict[num] = 1\n        max_count = max(nums_dict.values())\n        return [num for num, count in nums_dict.items() if count == max_count]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        if len(haystack) == 0:\n            return -1\n        \n        for i in range(len(haystack)-len(needle)+1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uae38\uc774 \uccb4\ud06c\n        # 2. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 3. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 4. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        # 5. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud55c \uac83\n        # 6. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac83\n        # 7. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud55c \uac83\n        # 8. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac83\n        # 9. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud55c \uac83\n        # 10. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac83\n        # 11. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud55c \uac83\n        # 12. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac83\n        # 13. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud55c \uac83\n        # 14. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \uac83\n        # 15. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud55c \uac83\n        # 16. \uc704 \uc870\uac74\uc744 \ubaa8\ub450 \ub9cc\uc871\ud558\uc9c0 \uc54a\uc73c\uba74 \uc554\ud638\uac00 \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ufffd"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 2, 5, 10, 25, 50, 100, 200, 400, 500, 1000, 2000, 4000, 5000, 10000, 20000, 40000, 50000, 100000, 200000, 400000, 500000, 1000000, 2000000, 4000000, 5000000, 10000000, 20000000, 40000000, 50000000, 100000000, 200000000, 400000000, 500000000, 1000000000, 2000000000, 4000000000, 5000000000, 10000000000, 20000000000, 40000000000, 50000000000, 100000000000, 200000000000, 400000000000, 500000000000, 1000000000000, 2000000000000, 4000000000000, 5000000000000, 10000000000000, 20000000000000, 40000000000000, 50000000000000, 100000000000000, 200000000000000, 400000000000000, 500000000000000, 1000000000000000, 2000000000000000, 4000000000000000, 5000000000000000, 10000000000000000, 20000000000000000, 40000000000000000, 50000000000000000, 100000000000000000, 200000000000000000, 400000000000000000, 500000000000000000, 1000000000000000000, 2000000000000000000, 4000000000000000000, 5000000000000000000, 10000000000000000000, 20000000000000000000, 40000000000000000000, 50000000000000000000, 100000000000000000000, 20000000"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        flag = -1\n        for c in s:\n            if i == 0:\n                flag = 1\n            if i == numRows - 1:\n                flag = -1\n            res[i] += c\n            i += flag\n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc81c\uc77c \uc67c\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc624\ub978\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 2. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 3. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 4. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 5. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 6. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 7. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 8. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 9. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 10. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744 \ucc3e\ub294\ub2e4.\n        # 11. \uc81c\uc77c \uc624\ub978\ucabd \ubd80\ud130 \uc2dc\uc791\ud558\uc5ec \uc81c\uc77c \uc67c\ucabd\uae4c\uc9c0 \uc2dc\uc791\ud558\ub294 \uad6c\uac04\uc744"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # nums = [4,3,2,7,8,2,3,1]\n        # nums = [1,1]\n        # nums = [1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,14,14,15,15,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,30,30,31,31,32,32,33,33,34,34,35,35,36,36,37,37,38,38,39,39,40,40,41,41,42,42,43,43,44,44,45,45,46,46,47,47,48,48,49,49,50,50,51,51,52,52,53,53,54,54,55,55,56,56,57,57,58,58,59,59,60,60,61,61,62,62,63,63,64,64,65,65,66,66,67,67,68,68,69,69,70,70,71,71,72,72,73,73,74,74,75,75,76,76,77,77,78,78,79,79,80,80,81,81,82,82,83,83,84,84,85,85,86,86,87,87,88,88,89,89,90,90,91,91,92,92,93,93,94,94,95,95,96,96,97,97,98,98,99,99,100,100,101,101,102,102,103,103,104,104,105,105,106,106,107,107,108,108,109,109,110,110,111,111,112,112,113,113,114,114,115,115,116,116,117,117,118,118,119,119,120,120,121,121,122,122,123,123,124,124,125,125,126,126,127,127,128,128,129,129,130,130,131,131,132,132,133,133,134,134,135,135,136,136,137,137,138,138,139,139,140,140,141,141,142,142,143,143,144,144,145,145,146,146,147,147,148,148,149,149,150,150,"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5efa\u7acb\u4e00\u4e2a\u6570\u7ec4\uff0c\u6570\u7ec4\u7684\u7d22\u5f15\u662fnums\u7684\u503c\uff0c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\n        # 2. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 3. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 4. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 5. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 6. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 7. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 8. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 9. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 10. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 11. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 12. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 13. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 14. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 15. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 16. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 17. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 18. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 19. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 20. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 21. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 22. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 23. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 24. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 25. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 26. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 27. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 28. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 29. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 30. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 31. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u6570\u7ec4\u7684\u503c\u662fnums\u7684\u7d22\u5f15\uff0c\u90a3\u4e48\u6570\u7ec4\u7684\u503c\u5c31\u52a01\n        # 32. \u904d\u5386"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            elif interval[0] > prev:\n                res += 1\n                prev = interval[1] - 1\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6240\u6709\u5143\u7d20\u7684\u6570\u91cf\u7edf\u8ba1\u51fa\u6765\n        # 2. \u518d\u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u7edf\u8ba1\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 4. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 5. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 6. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 7. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 8. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 9. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 10. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 11. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 12. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 13. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 14. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 15. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 16. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 17. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 18. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 19. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 20. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 21. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 22. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 23. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 24. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 25. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 26. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 27. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 28. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 29. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 30. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 31. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 32. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 33. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 34. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 35. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 36. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 37. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 38. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 39. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 40. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 41. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 42. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 43. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 44. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 45. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 46. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 47. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 48. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 49. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 50. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 51. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178\n        # 52. \u628a\u6240\u6709\u5143\u7d20\u7684\u540d\u5b57\u548c\u6570\u91cf\u7ec4\u5408\u6210\u4e00\u4e2a\u5b57\u5178"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n = n // 4\n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            for left in self.generateParenthesis(i):\n                for right in self.generateParenthesis(n-i-1):\n                    res.append('('+left+')'+right)\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 pointers\n        # 3. 2 pointers\n        # 4. 2 pointers\n        # 5. 2 pointers\n        # 6. 2 pointers\n        # 7. 2 pointers\n        # 8. 2 pointers\n        # 9. 2 pointers\n        # 10. 2 pointers\n        # 11. 2 pointers\n        # 12. 2 pointers\n        # 13. 2 pointers\n        # 14. 2 pointers\n        # 15. 2 pointers\n        # 16. 2 pointers\n        # 17. 2 pointers\n        # 18. 2 pointers\n        # 19. 2 pointers\n        # 20. 2 pointers\n        # 21. 2 pointers\n        # 22. 2 pointers\n        # 23. 2 pointers\n        # 24. 2 pointers\n        # 25. 2 pointers\n        # 26. 2 pointers\n        # 27. 2 pointers\n        # 28. 2 pointers\n        # 29. 2 pointers\n        # 30. 2 pointers\n        # 31. 2 pointers\n        # 32. 2 pointers\n        # 33. 2 pointers\n        # 34. 2 pointers\n        # 35. 2 pointers\n        # 36. 2 pointers\n        # 37. 2 pointers\n        # 38. 2 pointers\n        # 39. 2 pointers\n        # 40. 2 pointers\n        # 41. 2 pointers\n        # 42. 2 pointers\n        # 43. 2 pointers\n        # 44. 2 pointers\n        # 45. 2 pointers\n        # 46. 2 pointers\n        # 47. 2 pointers\n        # 48. 2 pointers\n        # 49. 2 pointers\n        # 50. 2 pointers\n        # 51. 2 pointers\n        # 52. 2 pointers\n        # 53. 2 pointers\n        # 54. 2 pointers\n        # 55. 2 pointers\n        # 56. 2 pointers\n        # 57. 2 pointers\n        # 58. 2 pointers\n        # 59. 2 pointers\n        # 60. 2 pointers\n        # 61. 2 pointers\n        # 62. 2 pointers\n        # 63. 2 pointers\n        # 64. 2 pointers\n        # 65. 2 pointers\n        # 66. 2 pointers\n        # 67. 2 pointers\n        # 68. 2 pointers\n        # 69. 2 pointers\n        # 70. 2 pointers\n        # 71. 2 pointers\n        # 72. 2 pointers\n        # 73. 2 pointers\n        # 74. 2 pointers\n        # 75. 2 pointers\n        # 76. 2 pointers\n        # 77. 2 pointers\n        # 78. 2 pointers\n        # 79. 2 pointers\n        # 80. 2 pointers\n        # 81. 2 pointers\n        # 82. 2 pointers\n        # 83. 2 pointers\n        # 84. 2 pointers\n        # 85. 2 pointers\n        # 86. 2 pointers"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 3. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucd94\uac00\ud55c\ub2e4.\n        # 4. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucd94\uac00\ud55c\ub2e4.\n        # 6. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 7. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 9. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 10. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 11. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 12. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 13. \uc2a4\ud0dd\uc5d0 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 14."}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            denominator = -denominator\n        elif denominator < 0:\n            denominator = -denominator\n            numerator = -numerator\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = \"\"\n        res += str(numerator // denominator) + \".\"\n        numerator = numerator % denominator\n        numerator *= 10\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + \"(\" + res[seen[numerator]:] + \")\"\n                break\n            seen[numerator] = len(res)\n            res += str(numerator // denominator)\n            numerator = numerator % denominator\n            numerator *= 10\n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two\n        mid = slow.next\n        slow.next = None\n        \n        # sort the left and right lists\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted lists\n        dummy = ListNode(0)\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = [envelopes[0][1]]\n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = envelopes[i][1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. 2 pass\n        # 2. 1 pass\n        # 3. 1 pass\n        # 4. 1 pass\n        # 5. 1 pass\n        # 6. 1 pass\n        # 7. 1 pass\n        # 8. 1 pass\n        # 9. 1 pass\n        # 10. 1 pass\n        # 11. 1 pass\n        # 12. 1 pass\n        # 13. 1 pass\n        # 14. 1 pass\n        # 15. 1 pass\n        # 16. 1 pass\n        # 17. 1 pass\n        # 18. 1 pass\n        # 19. 1 pass\n        # 20. 1 pass\n        # 21. 1 pass\n        # 22. 1 pass\n        # 23. 1 pass\n        # 24. 1 pass\n        # 25. 1 pass\n        # 26. 1 pass\n        # 27. 1 pass\n        # 28. 1 pass\n        # 29. 1 pass\n        # 30. 1 pass\n        # 31. 1 pass\n        # 32. 1 pass\n        # 33. 1 pass\n        # 34. 1 pass\n        # 35. 1 pass\n        # 36. 1 pass\n        # 37. 1 pass\n        # 38. 1 pass\n        # 39. 1 pass\n        # 40. 1 pass\n        # 41. 1 pass\n        # 42. 1 pass\n        # 43. 1 pass\n        # 44. 1 pass\n        # 45. 1 pass\n        # 46. 1 pass\n        # 47. 1 pass\n        # 48. 1 pass\n        # 49. 1 pass\n        # 50. 1 pass\n        # 51. 1 pass\n        # 52. 1 pass\n        # 53. 1 pass\n        # 54. 1 pass\n        # 55. 1 pass\n        # 56. 1 pass\n        # 57. 1 pass\n        # 58. 1 pass\n        # 59. 1 pass\n        # 60. 1 pass\n        # 61. 1 pass\n        # 62. 1 pass\n        # 63. 1 pass\n        # 64. 1 pass\n        # 65. 1 pass\n        # 66. 1 pass\n        # 67. 1 pass\n        # 68. 1 pass\n        # 69. 1 pass\n        # 70. 1 pass\n        # 71. 1 pass\n        # 72. 1 pass\n        # 73. 1 pass\n        # 74. 1 pass\n        # 75. 1 pass\n        # 76. 1 pass\n        # 77. 1 pass\n        # 78. 1 pass\n        # 79. 1 pass\n        # 80. 1 pass\n        # 81. 1 pass\n        # 82. 1 pass\n        # 83. 1 pass\n        # 84. 1 pass\n        # 85. 1 pass\n        # 86. 1 pass\n        # 87. 1 pass\n        # 88. 1 pass\n        # 89. 1 pass\n        # 90. 1 pass\n        # 91. 1 pass\n        # 92. 1 pass\n        # 93. 1 pass\n        # 94. 1 pass\n        # 95. 1 pass\n        # 96. 1 pass\n        # 97. 1 pass\n        # 98. 1 pass\n        # 99. 1 pass\n        # 100. 1 pass\n        # 101. 1 pass\n        # 102. 1 pass\n        # 103. 1 pass"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next\n        \n        # if the n is 1\n        if n == 1:\n            return head\n        \n        # if the n is greater than the length of the list\n        if n > self.length(head):\n            return head\n        \n        # if the n is 0\n        if n == 0:\n            return head.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                if i == 0 or nums1[i-1] != nums1[i]:\n                    res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u6c42\u51fa\u603b\u548c\n        total = sum(machines)\n        # 2. \u5982\u679c\u603b\u548c\u662f\u5947\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if total % n != 0:\n            return -1\n        # 3. \u6c42\u51fa\u5e73\u5747\u6570\n        average = total // n\n        # 4. \u6c42\u51fa\u6bcf\u4e2a\u673a\u5668\u7684\u79fb\u52a8\u6b21\u6570\n        moves = [0] * n\n        for i in range(n):\n            moves[i] = machines[i] - average\n        # 5. \u6c42\u51fa\u6700\u5927\u79fb\u52a8\u6b21\u6570\n        max_moves = max(moves)\n        # 6. \u6c42\u51fa\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\n        min_moves = min(moves)\n        # 7. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u8d1f\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves < 0:\n            return -1\n        # 8. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 9. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u96f6\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves == 0:\n            return 0\n        # 10. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u96f6\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves == 0:\n            return max_moves\n        # 11. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 12. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 13. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 14. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 15. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 16. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 17. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 18. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 19. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 20. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 21. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 22. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 23. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 24. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 25. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 26. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 27. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 28. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 29. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -1\n        # 30. \u5982\u679c\u6700\u5c0f\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if min_moves > 0:\n            return -1\n        # 31. \u5982\u679c\u6700\u5927\u79fb\u52a8\u6b21\u6570\u662f\u6b63\u6570\uff0c\u5219\u4e0d\u53ef\u80fd\n        if max_moves > 0:\n            return -"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m+1):\n                c += min(n, x//i)\n            return c\n        \n        l, r = 1, m*n\n        while l < r:\n            mid = (l+r)//2\n            if count(mid) < k:\n                l = mid+1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        if list2:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows, cols = len(matrix), len(matrix[0])\n        dp = [0] * cols\n        max_area = 0\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    dp[j] += 1\n                else:\n                    dp[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(dp))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] >= heights[i]:\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        \n        while stack:\n            height = heights[stack.pop()]\n            width = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        for i in range(2**len(nums)):\n            temp = []\n            for j in range(len(nums)):\n                if i & (1<<j):\n                    temp.append(nums[j])\n            res.append(temp)\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \uc815\uaddc\uc2dd \uc0ac\uc6a9\n        # 2. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 3. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 4. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 5. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 6. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 7. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 8. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 9. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 10. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 11. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 12. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 13. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 14. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 15. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 16. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 17. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 18. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 19. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 20. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac\n        # 21. \uc815\uaddc\uc2dd \uc0ac\uc6a9 \uc548\ud558\uace0 \uc9c1\uc811 \ucc98\ub9ac"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_num = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n\n        result = ''\n\n        for key in roman_num.keys():\n            while num >= key:\n                result += roman_num[key]\n                num -= key\n\n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0]) ^ ord(s[0]))\n\n        # if len(s) == 0:\n        #     return t[0]\n        # else:\n        #     return chr(ord(t[0"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def is_valid(board, row, col, num):\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n                if board[row][i] == num:\n                    return False\n            start_row = (row // 3) * 3\n            start_col = (col // 3) * 3\n            for i in range(start_row, start_row + 3):\n                for j in range(start_col, start_col + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n\n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if is_valid(board, i, j, str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n\n        solve(board)\n\n        return board"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first and second node that is out of order\n        # swap the values of the two nodes\n        # inorder traversal again to find the second node\n        # swap the values of the two nodes\n        # inorder traversal again to find the third node\n        # swap the values of the two nodes\n        # inorder traversal again to find the fourth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the fifth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the sixth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the seventh node\n        # swap the values of the two nodes\n        # inorder traversal again to find the eighth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the ninth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the tenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the eleventh node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twelfth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirteenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the fourteenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the fifteenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the sixteenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the seventeenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the eighteenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the nineteenth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twentieth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-first node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-second node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-third node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-fourth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-fifth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-sixth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-seventh node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-eighth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the twenty-ninth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirtieth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-first node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-second node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-third node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-fourth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-fifth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-sixth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-seventh node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-eighth node\n        # swap the values of the two nodes\n        # inorder traversal again to find the thirty-ninth node\n        # swap the values of the two nodes\n        # inorder traversal again to"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half with the second half\n        \n        # 1. Find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half with the second half\n        # 4. Reverse the second half of the linked list\n        # 5. Compare the first half with the second half\n        # 6. Reverse the second half of the linked list\n        # 7. Compare the first half with the second half\n        # 8. Reverse the second half of the linked list\n        # 9. Compare the first half with the second half\n        # 10. Reverse the second half of the linked list\n        # 11. Compare the first half with the second half\n        # 12. Reverse the second half of the linked list\n        # 13. Compare the first half with the second half\n        # 14. Reverse the second half of the linked list\n        # 15. Compare the first half with the second half\n        # 16. Reverse the second half of the linked list\n        # 17. Compare the first half with the second half\n        # 18. Reverse the second half of the linked list\n        # 19. Compare the first half with the second half\n        # 20. Reverse the second half of the linked list\n        # 21. Compare the first half with the second half\n        # 22. Reverse the second half of the linked list\n        # 23. Compare the first half with the second half\n        # 24. Reverse the second half of the linked list\n        # 25. Compare the first half with the second half\n        # 26. Reverse the second half of the linked list\n        # 27. Compare the first half with the second half\n        # 28. Reverse the second half of the linked list\n        # 29. Compare the first half with the second half\n        # 30. Reverse the second half of the linked list\n        # 31. Compare the first half with the second half\n        # 32. Reverse the second half of the linked list\n        # 33. Compare the first half with the second half\n        # 34. Reverse the second half of the linked list\n        # 35. Compare the first half with the second half\n        # 36. Reverse the second half of the linked list\n        # 37. Compare the first half with the second half\n        # 38. Reverse the second half of the linked list\n        # 39. Compare the first half with the second half\n        # 40. Reverse the second half of the linked list\n        # 41. Compare the first half with the second half\n        # 42. Reverse the second half of the linked list\n        # 43. Compare the first half with the second half\n        # 44. Reverse the second half of the linked list\n        # 45. Compare the first half with the second half\n        # 46. Reverse the second half of the linked list\n        # 47. Compare the first half with the second half\n        # 48. Reverse the second half of the linked list\n        # 49. Compare the first half with the second half\n        # 50. Reverse the second half of the linked list\n        # 51. Compare the first half with the second half\n        # 52. Reverse the second half of the linked list\n        # 53. Compare the first half with the second half\n        # 54. Reverse the second half of the linked list\n        # 55. Compare the first half with the second half\n        # 56. Reverse the second half of the linked list\n        # 57. Compare the first half with the second half\n        # 58. Reverse the second half of the linked list\n        # 59. Compare the first half with the second half\n        # 60. Reverse the second half"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        i = 1\n        while i*i <= num:\n            if i*i == num:\n                return True\n            i += 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,2]\n        if n == 4:\n            return [0,1,1,2,2]\n        if n == 5:\n            return [0,1,1,2,2,3]\n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]\n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11]\n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]\n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12]\n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]\n        if n == 25:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        # head.next = self.removeElements(head.next, val)\n        # return head\n        # if head is None:\n        #     return None\n        #"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if sorted(s1) != sorted(s2):\n            return False\n        if len(s1) == 1:\n            return True\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        for i in path:\n            if i == '':\n                continue\n            elif i == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. Build Trie\n        # 2. Traverse board and find words\n        # 3. Traverse Trie and find words\n        # 4. Return words\n        # 5. Time: O(m*n*4^L)\n        # 6. Space: O(L)\n\n        # 1. Build Trie\n        root = Trie()\n        for word in words:\n            root.insert(word)\n\n        # 2. Traverse board and find words\n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, root, res)\n\n        # 3. Traverse Trie and find words\n        return [word for word in res if root.search(word)]\n\n    def dfs(self, board, i, j, root, res):\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return\n        if board[i][j] not in root.children:\n            return\n        if root.children[board[i][j]] is None:\n            return\n        if root.children[board[i][j]].isWord:\n            res.append(root.children[board[i][j]].word)\n            root.children[board[i][j]].isWord = False\n        self.dfs(board, i+1, j, root.children[board[i][j]], res)\n        self.dfs(board, i-1, j, root.children[board[i][j]], res)\n        self.dfs(board, i, j+1, root.children[board[i][j]], res)\n        self.dfs(board, i, j-1, root.children[board[i][j]], res)"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_dict:\n                s_dict[s[i]] = 1\n            else:\n                s_dict[s[i]] += 1\n            \n            if t[i] not in t_dict:\n                t_dict[t[i]] = 1\n            else:\n                t_dict[t[i]] += 1\n        \n        for i in s_dict:\n            if i not in t_dict:\n                return False\n            else:\n                if s_dict[i] != t_dict[i]:\n                    return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 3x3 sub-boxes\n        # 2. 9 rows\n        # 3. 9 columns\n        # 4. 9 unique numbers\n        # 5. 9 unique numbers\n        # 6. 9 unique numbers\n        # 7. 9 unique numbers\n        # 8. 9 unique numbers\n        # 9. 9 unique numbers\n        # 10. 9 unique numbers\n        # 11. 9 unique numbers\n        # 12. 9 unique numbers\n        # 13. 9 unique numbers\n        # 14. 9 unique numbers\n        # 15. 9 unique numbers\n        # 16. 9 unique numbers\n        # 17. 9 unique numbers\n        # 18. 9 unique numbers\n        # 19. 9 unique numbers\n        # 20. 9 unique numbers\n        # 21. 9 unique numbers\n        # 22. 9 unique numbers\n        # 23. 9 unique numbers\n        # 24. 9 unique numbers\n        # 25. 9 unique numbers\n        # 26. 9 unique numbers\n        # 27. 9 unique numbers\n        # 28. 9 unique numbers\n        # 29. 9 unique numbers\n        # 30. 9 unique numbers\n        # 31. 9 unique numbers\n        # 32. 9 unique numbers\n        # 33. 9 unique numbers\n        # 34. 9 unique numbers\n        # 35. 9 unique numbers\n        # 36. 9 unique numbers\n        # 37. 9 unique numbers\n        # 38. 9 unique numbers\n        # 39. 9 unique numbers\n        # 40. 9 unique numbers\n        # 41. 9 unique numbers\n        # 42. 9 unique numbers\n        # 43. 9 unique numbers\n        # 44. 9 unique numbers\n        # 45. 9 unique numbers\n        # 46. 9 unique numbers\n        # 47. 9 unique numbers\n        # 48. 9 unique numbers\n        # 49. 9 unique numbers\n        # 50. 9 unique numbers\n        # 51. 9 unique numbers\n        # 52. 9 unique numbers\n        # 53. 9 unique numbers\n        # 54. 9 unique numbers\n        # 55. 9 unique numbers\n        # 56. 9 unique numbers\n        # 57. 9 unique numbers\n        # 58. 9 unique numbers\n        # 59. 9 unique numbers\n        # 60. 9 unique numbers\n        # 61. 9 unique numbers\n        # 62. 9 unique numbers\n        # 63. 9 unique numbers\n        # 64. 9 unique numbers\n        # 65. 9 unique numbers\n        # 66. 9 unique numbers\n        # 67. 9 unique numbers\n        # 68. 9 unique numbers\n        # 69. 9 unique numbers\n        # 70. 9 unique numbers\n        # 71. 9 unique numbers\n        # 72. 9 unique numbers\n        # 73. 9 unique numbers\n        # 74. 9 unique numbers\n        # 75. 9 unique numbers\n        # 76. 9 unique numbers\n        # 77. 9 unique numbers\n        # 78. 9 unique numbers\n        # 79. 9 unique numbers\n        # 80. 9 unique numbers\n        # 81. 9 unique numbers\n        # 82. 9 unique numbers\n        # 83. 9 unique numbers\n        # 84. 9 unique numbers\n        # 85. 9 unique numbers\n        # 86. 9 unique numbers\n        # 87. 9 unique numbers\n        # 88. 9 unique numbers\n        # 89. 9 unique numbers\n        # 90. 9 unique numbers\n        # 91. 9 unique numbers\n        # 92. 9 unique numbers\n        # 93. 9 unique numbers\n        # 94. 9"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a single string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 25600\n        # 26^4 = 144000\n        # 26^5 = 737200\n        # 26^6 = 3689600\n        # 26^7 = 19488000\n        # 26^8 = 103680000\n        # 26^9 = 491520000\n        # 26^10 = 2457600000\n        # 26^11 = 12964000000\n        # 26^12 = 65536000000\n        # 26^13 = 335544320000\n        # 26^14 = 1677721600000\n        # 26^15 = 8388608000000\n        # 26^16 = 41943040000000\n        # 26^17 = 209715200000000\n        # 26^18 = 1048576000000000\n        # 26^19 = 5242880000000000\n        # 26^20 = 26214400000000000\n        # 26^21 = 131072000000000000\n        # 26^22 = 655360000000000000\n        # 26^23 = 3276800000000000000\n        # 26^24 = 16384000000000000000\n        # 26^25 = 81920000000000000000\n        # 26^26 = 409600000000000000000\n        # 26^27 = 2048000000000000000000\n        # 26^28 = 10240000000000000000000\n        # 26^29 = 51200000000000000000000\n        # 26^30 = 256000000000000000000000\n        # 26^31 = 1280000000000000000000000\n        # 26^32 = 6400000000000000000000000\n        # 26^33 = 32000000000000000000000000\n        # 26^34 = 160000000000000000000000000\n        # 26^35 = 800000000000000000000000000\n        # 26^36 = 4000000000000000000000000000\n        # 26^37 = 20000000000000000000000000000\n        # 26^38 = 100000000000000000000000000000\n        # 26^39 = 500000"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n == 1:\n            return 1\n        \n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i-1]:\n                candies[i] = candies[i-1] + 1\n        \n        for i in range(n-2, -1, -1):\n            if ratings[i] > ratings[i+1]:\n                candies[i] = max(candies[i], candies[i+1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # 1. Find the middle of the list\n        # 2. Reverse the second half of the list\n        # 3. Merge the two lists\n        \n        # 1. Find the middle of the list\n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the list\n        # 3. Merge the two lists\n        # 2.1 Reverse the second half of the list\n        # 2.2 Merge the two lists\n        # 3.1 Reverse the first half of the list\n        # 3.2 Merge the two lists\n        # 3.3 Reverse the second half of the list\n        # 3.4 Merge the two lists\n        # 3.5 Reverse the first half of the list\n        # 3.6 Merge the two lists\n        # 3.7 Reverse the second half of the list\n        # 3.8 Merge the two lists\n        # 3.9 Reverse the first half of the list\n        # 3.10 Merge the two lists\n        # 3.11 Reverse the second half of the list\n        # 3.12 Merge the two lists\n        # 3.13 Reverse the first half of the list\n        # 3.14 Merge the two lists\n        # 3.15 Reverse the second half of the list\n        # 3.16 Merge the two lists\n        # 3.17 Reverse the first half of the list\n        # 3.18 Merge the two lists\n        # 3.19 Reverse the second half of the list\n        # 3.20 Merge the two lists\n        # 3.21 Reverse the first half of the list\n        # 3.22 Merge the two lists\n        # 3.23 Reverse the second half of the list\n        # 3.24 Merge the two lists\n        # 3.25 Reverse the first half of the list\n        # 3.26 Merge the two lists\n        # 3.27 Reverse the second half of the list\n        # 3.28 Merge the two lists\n        # 3.29 Reverse the first half of the list\n        # 3.30 Merge the two lists\n        # 3.31 Reverse the second half of the list\n        # 3.32 Merge the two lists\n        # 3.33 Reverse the first half of the list\n        # 3.34 Merge the two lists\n        # 3.35 Reverse the second half of the list\n        # 3.36 Merge the two lists\n        # 3.37 Reverse the first half of the list\n        # 3.38 Merge the two lists\n        # 3.39 Reverse the second half of the list\n        # 3.40 Merge the two lists\n        # 3.41 Reverse the first half of the list\n        # 3.42 Merge the two lists\n        # 3.43 Reverse the second half of the list\n        # 3.44 Merge the two lists\n        # 3.45 Reverse the first half of the list\n        # 3.46 Merge the two lists\n        # 3.47 Reverse the second half of the list\n        # 3.48 Merge the two lists\n        # 3.49 Reverse the first half of the list\n        # 3.50 Merge the two lists\n        # 3.51 Reverse the second half of the list\n        # 3.52 Merge the two lists\n        # 3.53 Reverse the first half of the list\n        # 3.54 Merge the two lists\n        # 3.55 Reverse the second half of the list\n        # 3.56 Merge the two lists\n        # 3.57 Reverse the first half of the list\n        # 3.58 Merge the two lists\n        # 3.59 Reverse the second half of the list\n        #"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]] != s[i]:\n                    return False\n            else:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))\n\n        # binary search\n        # O(m + n)\n        # O(1)\n        # O(log(m * n))"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new list node\n        # 2. Create a new list node\n        # 3. Create a new list node\n        # 4. Create a new list node\n        # 5. Create a new list node\n        # 6. Create a new list node\n        # 7. Create a new list node\n        # 8. Create a new list node\n        # 9. Create a new list node\n        # 10. Create a new list node\n        # 11. Create a new list node\n        # 12. Create a new list node\n        # 13. Create a new list node\n        # 14. Create a new list node\n        # 15. Create a new list node\n        # 16. Create a new list node\n        # 17. Create a new list node\n        # 18. Create a new list node\n        # 19. Create a new list node\n        # 20. Create a new list node\n        # 21. Create a new list node\n        # 22. Create a new list node\n        # 23. Create a new list node\n        # 24. Create a new list node\n        # 25. Create a new list node\n        # 26. Create a new list node\n        # 27. Create a new list node\n        # 28. Create a new list node\n        # 29. Create a new list node\n        # 30. Create a new list node\n        # 31. Create a new list node\n        # 32. Create a new list node\n        # 33. Create a new list node\n        # 34. Create a new list node\n        # 35. Create a new list node\n        # 36. Create a new list node\n        # 37. Create a new list node\n        # 38. Create a new list node\n        # 39. Create a new list node\n        # 40. Create a new list node\n        # 41. Create a new list node\n        # 42. Create a new list node\n        # 43. Create a new list node\n        # 44. Create a new list node\n        # 45. Create a new list node\n        # 46. Create a new list node\n        # 47. Create a new list node\n        # 48. Create a new list node\n        # 49. Create a new list node\n        # 50. Create a new list node\n        # 51. Create a new list node\n        # 52. Create a new list node\n        # 53. Create a new list node\n        # 54. Create a new list node\n        # 55. Create a new list node\n        # 56. Create a new list node\n        # 57. Create a new list node\n        # 58. Create a new list node\n        # 59. Create a new list node\n        # 60. Create a new list node\n        # 61. Create a new list node\n        # 62. Create a new list node\n        # 63. Create a new list node\n        # 64. Create a new list node\n        # 65. Create a new list node\n        # 66. Create a new list node\n        # 67. Create a new list node\n        # 68. Create a new list node\n        # 69. Create a new list node\n        # 70. Create a new list node\n        # 71. Create a new list node\n        # 72. Create a new list node\n        # 73. Create a new list node\n        # 74. Create a new list node\n        # 75. Create a new list node\n        # 76. Create a new list node\n        # 77. Create a new list node\n        # 78. Create a new list node\n        # 79. Create a new list node\n        # 80. Create a new list node\n        # 81. Create a new list node\n        # 82. Create a new list node\n        # 83. Create a new list node\n        # 84. Create a new list node\n        # 85. Create a new list node\n        # 86. Create a new list node"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert num to binary\n        # 2. Reverse binary\n        # 3. Convert binary to decimal\n        # 4. Convert decimal to binary\n        # 5. Convert binary to decimal\n        # 6. Convert binary to decimal\n        # 7. Convert binary to decimal\n        # 8. Convert binary to decimal\n        # 9. Convert binary to decimal\n        # 10. Convert binary to decimal\n        # 11. Convert binary to decimal\n        # 12. Convert binary to decimal\n        # 13. Convert binary to decimal\n        # 14. Convert binary to decimal\n        # 15. Convert binary to decimal\n        # 16. Convert binary to decimal\n        # 17. Convert binary to decimal\n        # 18. Convert binary to decimal\n        # 19. Convert binary to decimal\n        # 20. Convert binary to decimal\n        # 21. Convert binary to decimal\n        # 22. Convert binary to decimal\n        # 23. Convert binary to decimal\n        # 24. Convert binary to decimal\n        # 25. Convert binary to decimal\n        # 26. Convert binary to decimal\n        # 27. Convert binary to decimal\n        # 28. Convert binary to decimal\n        # 29. Convert binary to decimal\n        # 30. Convert binary to decimal\n        # 31. Convert binary to decimal\n        # 32. Convert binary to decimal\n        # 33. Convert binary to decimal\n        # 34. Convert binary to decimal\n        # 35. Convert binary to decimal\n        # 36. Convert binary to decimal\n        # 37. Convert binary to decimal\n        # 38. Convert binary to decimal\n        # 39. Convert binary to decimal\n        # 40. Convert binary to decimal\n        # 41. Convert binary to decimal\n        # 42. Convert binary to decimal\n        # 43. Convert binary to decimal\n        # 44. Convert binary to decimal\n        # 45. Convert binary to decimal\n        # 46. Convert binary to decimal\n        # 47. Convert binary to decimal\n        # 48. Convert binary to decimal\n        # 49. Convert binary to decimal\n        # 50. Convert binary to decimal\n        # 51. Convert binary to decimal\n        # 52. Convert binary to decimal\n        # 53. Convert binary to decimal\n        # 54. Convert binary to decimal\n        # 55. Convert binary to decimal\n        # 56. Convert binary to decimal\n        # 57. Convert binary to decimal\n        # 58. Convert binary to decimal\n        # 59. Convert binary to decimal\n        # 60. Convert binary to decimal\n        # 61. Convert binary to decimal\n        # 62. Convert binary to decimal\n        # 63. Convert binary to decimal\n        # 64. Convert binary to decimal\n        # 65. Convert binary to decimal\n        # 66. Convert binary to decimal\n        # 67. Convert binary to decimal\n        # 68. Convert binary to decimal\n        # 69. Convert binary to decimal\n        # 70. Convert binary to decimal\n        # 71. Convert binary to decimal\n        # 72. Convert binary to decimal\n        # 73. Convert binary to decimal\n        # 74. Convert binary to decimal\n        # 75. Convert binary to decimal\n        # 76. Convert binary to decimal\n        # 77. Convert binary to decimal\n        # 78. Convert binary to decimal\n        # 79. Convert binary to decimal\n        # 80. Convert binary to decimal\n        # 81. Convert binary to decimal\n        # 82. Convert binary to decimal\n        # 83. Convert binary to decimal\n        # 84. Convert binary to decimal\n        # 85. Convert binary to decimal\n        # 86. Convert binary to decimal\n        # 87. Convert binary to decimal\n        # 88. Convert binary to decimal\n        # 89. Convert binary to decimal\n        # 90. Convert binary to decimal\n        # 91. Convert binary to decimal\n        # 92. Convert binary to decimal\n        # 93. Convert binary to decimal\n        # 94. Convert binary to decimal"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        i = 0\n        while i < len(nums)-2:\n            if nums[i+2] - nums[i] == nums[i+1] - nums[i]:\n                count += 1\n                i += 1\n            else:\n                i += 1\n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        i = 0\n        while i < len(words):\n            curr_len = len(words[i])\n            j = i + 1\n            while j < len(words) and curr_len + len(words[j]) + 1 <= maxWidth:\n                curr_len += len(words[j]) + 1\n                j += 1\n            if j == len(words):\n                res.append(' '.join(words[i:j]) + ' ' * (maxWidth - len(words[i:j]) - (j - i - 1)))\n            else:\n                num_words = j - i\n                num_spaces = maxWidth - curr_len\n                if num_words == 1:\n                    res.append(words[i] + ' ' * num_spaces)\n                else:\n                    avg_spaces = num_spaces // (num_words - 1)\n                    extra_spaces = num_spaces % (num_words - 1)\n                    res.append(words[i] + ' ' * avg_spaces + ' '.join(words[i+1:j] + [' '] * extra_spaces))\n            i = j\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     res.append(node.val)\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return res[::-1]\n\n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     res.append(node.val)\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return res[::-1]\n\n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     res.append(node.val)\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return res[::-1]\n\n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     res.append(node.val)\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return res[::-1]\n\n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     res.append(node.val)\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return res[::-1]\n\n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     res.append(node.val)\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return res[::-1]\n\n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n\n        # if root is None:\n        #     return []\n        # stack = [root"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. left pointer\n        # 2. right pointer\n        # 3. max area\n        # 4. if height[left] < height[right]\n        # 5.   max area = max(max area, height[left] * (right - left))\n        # 6.   left += 1\n        # 7. else\n        # 8.   right -= 1\n        # 9. return max area\n\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n\n        while left < right:\n            max_area = max(max_area, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n\n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        # Approach: Dynamic Programming\n        # 1. Sort the words in the list in ascending order of length\n        # 2. Iterate through the words in the list\n        # 3. If the word is a concatenated word, then check if it is a concatenated word\n        # 4. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 5. If the word is a concatenated word, then check if the word is a concatenated word\n        # 6. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 7. If the word is a concatenated word, then check if the word is a concatenated word\n        # 8. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 9. If the word is a concatenated word, then check if the word is a concatenated word\n        # 10. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 11. If the word is a concatenated word, then check if the word is a concatenated word\n        # 12. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 13. If the word is a concatenated word, then check if the word is a concatenated word\n        # 14. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 15. If the word is a concatenated word, then check if the word is a concatenated word\n        # 16. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 17. If the word is a concatenated word, then check if the word is a concatenated word\n        # 18. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 19. If the word is a concatenated word, then check if the word is a concatenated word\n        # 20. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 21. If the word is a concatenated word, then check if the word is a concatenated word\n        # 22. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 23. If the word is a concatenated word, then check if the word is a concatenated word\n        # 24. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 25. If the word is a concatenated word, then check if the word is a concatenated word\n        # 26. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 27. If the word is a concatenated word, then check if the word is a concatenated word\n        # 28. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 29. If the word is a concatenated word, then check if the word is a concatenated word\n        # 30. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 31. If the word is a concatenated word, then check if the word is a concatenated word\n        # 32. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 33. If the word is a concatenated word, then check if the word is a concatenated word\n        # 34. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 35. If the word is a concatenated word, then check if the word is a concatenated word\n        # 36. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 37. If the word is a concatenated word, then check if the word is a concatenated word\n        # 38. If the word is not a concatenated word, then check if the word is a concatenated word\n        # 39. If the word is"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col):\n            for i in range(row):\n                if board[i][col] == 1:\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(row):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(row, col):\n                    board[row][col] = 1\n                    count += backtrack(row + 1)\n                    board[row][col] = 0\n            return count\n        \n        board = [[0 for _ in range(n)] for _ in range(n)]\n        return backtrack(0)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n\n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = list(set(nums))\n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}