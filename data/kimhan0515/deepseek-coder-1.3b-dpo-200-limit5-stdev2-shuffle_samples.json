{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for num in nums[1:]:\n            if num == end + 1:\n                end = num\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = num\n                end = num\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or not t:\n            return 0\n        \n        n, m = len(s), len(t)\n        dp = [0] * (m + 1)\n        dp[0] = 1\n        for i in range(n):\n            for j in range(m, 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[m]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers and all numbers larger than n as 0\n        # 2. iterate through the array and mark the numbers as negative\n        # 3. iterate through the array again and return the first number that is not negative\n        # 4. if all numbers are negative, return n + 1\n        # 5. if all numbers are positive, return n + 1\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            if abs(nums[i]) - 1 < n and nums[abs(nums[i]) - 1] > 0:\n                nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1]\n        \n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        ans = []\n        for i in range(n):\n            fact //= i + 1\n            ans.append(str(i + 1))\n            if k == fact:\n                break\n        \n        # 3. calculate the kth permutation\n        k %= fact\n        ans.append(str(n))\n        for i in range(n - 1):\n            fact //= n - i\n            if k == fact:\n                break\n            ans.append(str(n - i))\n        \n        return ''.join(ans)"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, pre, cur, res, operator):\n            if not num:\n                if cur == target:\n                    res.append(pre)\n                return\n            for i in range(1, len(num) + 1):\n                if i == 1 or num[0] != '0':\n                    cur = int(num[:i])\n                    if operator == '+':\n                        dfs(num[i:], target - cur, pre + cur, cur, res, '+')\n                    elif operator == '-':\n                        dfs(num[i:], target + cur, pre - cur, -cur, res, '-')\n                    else:\n                        dfs(num[i:], target - cur * (pre if operator == '*' else cur), pre * cur, cur, res, '*')\n        \n        if not num:\n            return []\n        res, dfs(num, eval(num), int(num), int(num), [str(int(num))], '+')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, prev_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return root.val + prev_sum * 10\n            return dfs(root.left, prev_sum * 10 + root.val) + dfs(root.right, prev_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper().replace('-', '')\n        n = len(s)\n        if n <= k:\n            return s\n        return s[:n - n % k].zfill(n - n % k) + '-' + s[n - n % k:]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        start = 0\n        tank = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        dp = [0] * len(nums)\n        for i in range(len(nums) - 2):\n            dp[i + 1] = max(dp[i - 1] + nums[i] * nums[i + 1], dp[i])\n        return dp[-2]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0, 1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        first_star = p.find('*')\n        if first_star > 0:\n            if s[:first_star] == p[:first_star]:\n                return self.isMatch(s[first_star:], p[first_star:])\n        return False\n        \n        return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick_largest(nums, k):\n            drop = len(nums) - k\n            out = []\n            for num in nums:\n                while drop and out and out[-1] < num:\n                    out.pop()\n                if len(out) < k:\n                    out.append(num)\n            return out\n        \n        if len(nums1) < k:\n            return pick_largest(nums2, k)\n        if len(nums2) < k:\n            return pick_largest(nums1, k)\n        \n        def merge(nums1, nums2, k):\n            return max(nums1[:k-len(nums2)], nums2)[:k]\n        \n        return merge(pick_largest(nums1, k), pick_largest(nums2, k), k)"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        return num == sum(i for i in range(1, int(num**0.5)+1) if num % i == 0)"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a, b = 0, 1\n        for i in range(n - 1):\n            a, b = b, a + b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[-1][-1] = dp[-2][-1] = dp[-1][-2] = 1 if dungeon[-1][-1] > 0 else -dungeon[-1][-1] + 1\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        \n        return dp[0][1]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        lo, hi = nums[1] - nums[0], nums[-1] - nums[0]\n        for num in nums[1:]:\n            hi = max(hi, num - nums[0])\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if sum(num - nums[i] for num in nums if num - nums[0] > mid) >= k:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            if s[l] in vowels and s[r] in vowels:\n                s[l], s[r] = s[r], s[l]\n                l += 1\n                r -= 1\n            elif s[l] not in vowels:\n                l += 1\n            elif s[r] not in vowels:\n                r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        num_set = set(nums)\n        max_len = 0\n        \n        for num in num_set:\n            if num - 1 not in num_set:\n                cur_num = num\n                cur_len = 1\n                \n                while cur_num + 1 in num_set:\n                    cur_num += 1\n                    cur_len += 1\n                    \n                max_len = max(max_len, cur_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR all the numbers from 0 to n, then XOR all the numbers from 0 to n+1\n        ## the missing number will be the XOR of the two numbers\n        ## the last number will be the missing number\n        ## if n is the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is the last number, then the missing number will be n\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is the last number, then the missing number will be n\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+1\n        ## if n is not the last number, then the missing number will be n+"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        q = collections.deque([beginWord])\n        step = 1\n        while q:\n            for i in range(len(q)):\n                word = q.popleft()\n                if word == endWord:\n                    return step\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        next_word = word[:i] + c + word[i+1:]\n                        if next_word in wordList:\n                            q.append(next_word)\n                            wordList.remove(next_word)\n            step += 1\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = list(a)\n        b = list(b)\n        \n        carry = 0\n        for i in range(len(a)-1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if b[i] == '1':\n                carry += 1\n            a[i] = str(carry % 2)\n            carry //= 2\n        \n        if carry == 1:\n            a.insert(0, '1')\n        \n        return ''.join(a)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left = bisect.bisect_left(nums, target)\n        if left == len(nums) or nums[left] != target:\n            return [-1, -1]\n        \n        right = bisect.bisect_right(nums, target)\n        return [left, right - 1]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 0\n        \n        k = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i-1]:\n                nums[k] = nums[i]\n                k += 1\n        \n        return k"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        step = 1\n        cur_reach = nums[0]\n        \n        for i in range(1, len(nums)):\n            if i > max_reach:\n                step += 1\n                max_reach = cur_reach\n            cur_reach = max(cur_reach, nums[i] + i)\n        \n        return step"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i] - prices[i - 1] for i in range(1, len(prices)) if prices[i] > prices[i - 1])\n        \n        buy = [float('-inf')] + [min(prices[i] for i in range(k)) for k in range(1, k + 1)]\n        sell = [0] + [max(prices[i] for i in range(k, len(prices))) for k in range(1, k + 1)]\n        \n        return sum(sell[i] - buy[i] for i in range(1, len(sell)))"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        if num < 0:\n            num = 2 ** 32 + num\n        \n        res = ''\n        while num:\n            res = hex_dict[num & 15] + res if num & 15 else '0' + res\n            num >>= 4\n        \n        return res if res else '0'"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. use a dict to store the index of each char\n        # 2. use a list to store the index of the first non-repeating char\n        # 3. if the list is empty, return -1\n        # 4. else, return the first element in the list\n        \n        # 1.\n        char_dict = {}\n        for i, c in en.umerate(s):\n            if c not in char_dict:\n                char_dict[c] = i\n            else:\n                char_dict[c] = -1\n        \n        # 2.\n        non_repeating_list = [i for i in char_dict.values() if i >= 0]\n        if non_repeating_list:\n            return min(non_repeating_list)\n        else:\n            return -1\n        \n        # 3.\n        # return char_dict.get(s, -1)\n        \n        # 4.\n        # return non_repeating_list[0] if non_repeating_list else -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff == 0:\n            return False\n        \n        if indexDiff == 0:\n            return True\n        \n        if valueDiff > nums[-1] - nums[0]:\n            return True\n        \n        if valueDiff == nums[-1] - nums[0]:\n            return True\n        \n        if valueDiff > nums[-1] // nums[0]:\n            return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0: red, 1: white, 2: blue\n        # 0"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return nums.count(1)"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        if left and right:\n            return left + right + 1\n        elif left:\n            return left + 1\n        else:\n            return right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' and num2 == '0':\n            return '0'\n        \n        if num1 == '0':\n            return num2\n        \n        if num2 == '0':\n            return num1\n        \n        if num1 == '1' and num2 == '1':\n            return '11'\n        \n        if num1 == '1':\n            return num2[1:]\n        \n        if num2 == '1':\n            return num1[1:]\n        \n        if num1[0] == '1':\n            return '1' + self.addStrings(num1[1:], num2)\n        \n        if num2[0] == '1':\n            return '1' + self.addStrings(num1, num2[1:])\n        \n        return '1' + self.addStrings(num1[1:], num2[1:])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        s = s.replace(' ', '')\n        s = s.replace('-', ' -')\n        s = s.replace('+', ' +')\n        s = s.split('+')\n        s = [int(i) for i in s]\n        return sum(s) - sum(i for i in s if i < 0)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort by capital\n        sorted_capital = sorted(zip(capital, profits))\n        \n        # greedy: pick up the capital that will maximize the profit\n        # if k > 0, pick up the capital that will maximize the profit\n        # if k == 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit\n        # if k < 0, pick up the capital that will minimize the profit\n        # if k < 0, pick up the capital that will maximize the profit"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) % 2 == 1:\n            return False\n        \n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(')')\n            elif c == '{':\n                stack.append('}')\n            elif c == '[':\n                stack.append(']')\n            elif not stack or stack.pop() != c:\n                return False\n        \n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        # find the first number that is larger than the number to its right\n        # swap the two numbers\n        # reverse the numbers to the right of the number to its right\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # find the first number that is larger than the number to its right\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers to the right of the number to its right\n        nums[i + 1:] = nums[i + 1:][::-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(set(nums)) == len(nums):\n            return False\n        \n        return True"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        return max(nums[i] - nums[i - 1] for i in range(1, len(nums)))"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n            queue = queue[len(level):]\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 2:\n            return 0\n        \n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30\n        # 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31\n        # 0, 2, 4, 6, 8, 10, 12,"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1 + s2\n        \n        return s3.startswith(s1 + s2)"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = j = 0\n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        return [word for word in words if (word[0] in row1) or (word[0] in row2) or (word[0] in row3)]"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        pre = dummy\n        for _ in range(left - 1):\n            pre = pre.next\n        cur = pre.next\n        \n        for _ in range(right - left):\n            cur = cur.next\n        \n        post = cur.next\n        cur.next = None\n        \n        pre.next = self.reverse(head, cur)\n        head.next = post\n        \n        return dummy.next\n    \n    def reverse(self, head, tail):\n        prev = tail\n        while head != tail:\n            nxt = head.next\n            head.next = prev\n            prev = head\n            head = nxt\n        return prev"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that ends with s\n        # reverse(s) + s\n        # if s is a palindrome, then reverse(s) + reverse(s) is also a palindrome\n        # if s + reverse(s) is a palindrome, then s is a palindrome\n        # if s + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome\n        # if s + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) + reverse(s) is a palindrome, then s + reverse(s) + reverse(s) + reverse(s) + reverse(s)"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if not t:\n            return \"\"\n        \n        from collections import Counter\n        need, missing = Counter(t), len(t)\n        i, left, right = 0, 0, 0\n        for j, c in enumerate(s, 1):\n            missing -= need[c] > 0\n            need[c] -= 1\n            if not missing:\n                while left < right and need[s[left]] + 1 > 0:\n                    need[s[left]] += 1\n                    left += 1\n                missing += 1\n                need[s[left]] -= 1\n                left += 1\n        return s[left - 1:right] if missing == 0 else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return any(distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3] for i in (3, 5)) or \\\n            (distance[1] == distance[3] and distance[2] < distance[4]) or \\\n            (distance[0] == distance[4] and distance[1] < distance[3] and distance[2] < distance[5])"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the number of each letter\n        # 2. if the number is odd, add 1 to the result\n        # 3. if the number is even, add it to the result\n        # 4. if the number is 1, add 0 to the result\n        # 5. return the result\n        \n        # 1.\n        count = collections.Counter(s)\n        \n        # 2.\n        res = 0\n        for c in count:\n            if count[c] % 2 == 0:\n                res += count[c]\n            else:\n                res += count[c] - 1\n        \n        # 3.\n        if res < len(s):\n            res += 1\n        \n        # 4.\n        return res"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # find the starting point\n        m, n = len(forest), len(forest[0])\n        trees = [(forest[i][j], i, j) for i in range(m) for j in range(n) if forest[i][j] > 1]\n        if not trees:\n            return -1\n        trees.sort(key=lambda x: x[0])\n        sx, sy = trees[0][1], trees[0][2]\n        res = 0\n        for h, x, y in trees[1:]:\n            d = self.bfs(forest, sx, sy, x, y)\n            if not d:\n                return -1\n            res += d\n            sx, sy = x, y\n        return res\n        \n    def bfs(self, forest, sx, sy, tx, ty):\n        m, n = len(forest), len(forest[0])\n        q = [(sx, sy)]\n        seen = {(sx, sy)}\n        step = 0\n        while q:\n            nq = []\n            for x, y in q:\n                if x == tx and y == ty:\n                    return step\n                for nx, ny in ((x, y-1), (x, y+1), (x-1, y), (x+1, y)):\n                    if 0 <= nx < m and 0 <= ny < n and forest[nx][ny] > 1:\n                        nq.append((nx, ny))\n                        seen.add((nx, ny))\n            q = nq\n            step += 1\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the sum of nums\n        # 2. calculate the sum of nums[i] - nums[j]\n        # 3. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 4. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 5. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 6. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 7. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 8. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 9. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 10. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 11. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 12. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 13. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 14. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 15. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 16. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 17. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 18. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 19. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 20. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 21. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 22. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 23. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 24. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 25. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 26. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 27. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 28. calculate the sum of nums[i] - nums[j] >= lower and nums[i] - nums[j] <= upper\n        # 29. calculate the sum of"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q if node.left for child in [node.left, node.right] if child]\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x % 10 == 1:\n            return True\n        \n        if x % 10 == 9:\n            return False\n        \n        if x % 10 == 8:\n            return True\n        \n        if x % 10 == 7:\n            return False\n        \n        if x % 10 == 6:\n            return True\n        \n        if x % 10 == 5:\n            return False\n        \n        if x % 10 == 4:\n            return False\n        \n        if x % 10 == 3:\n            return False\n        \n        if x % 10 == 2:\n            return False\n        \n        if x % 10 == 1:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x % 10 == 9:\n            return False\n        \n        if x % 10 == 8:\n            return True\n        \n        if x % 10 == 7:\n            return False\n        \n        if x % 10 == 6:\n            return True\n        \n        if x % 10 == 5:\n            return False\n        \n        if x % 10 == 4:\n            return False\n        \n        if x % 10 == 3:\n            return False\n        \n        if x % 10 == 2:\n            return False\n        \n        if x % 10 == 1:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x % 10 == 9:\n            return False\n        \n        if x % 10 == 8:\n            return True\n        \n        if x % 10 == 7:\n            return False\n        \n        if x % 10 == 6:\n            return True\n        \n        if x % 10 == 5:\n            return False\n        \n        if x % 10 == 4:\n            return False\n        \n        if x % 10 == 3:\n            return False\n        \n        if x % 10 == 2:\n            return False\n        \n        if x % 10 == 1:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x % 10 == 9:\n            return False\n        \n        if x % 10 == 8:\n            return True\n        \n        if x % 10 == 7:\n            return False\n        \n        if x % 10 == 6:\n            return True\n        \n        if x % 10 == 5:\n            return False\n        \n        if x % 10 == 4:\n            return False\n        \n        if x % 10 == 3:\n            return False\n        \n        if x % 10 == 2:\n            return False\n        \n        if x % 10 == 1:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x % 10 == 9:\n            return False\n        \n        if x % 10 == 8:\n            return True\n        \n        if x % 10 == 7:\n            return False\n        \n        if x % 10 == 6:\n            return True\n        \n        if x % 10 == 5:\n            return False\n        \n        if x % 10 == 4:\n            return False\n        \n        if x % 10 == 3:\n            return False\n        \n        if x % 10 == 2:\n            return False\n        \n        if x % 10 == 1:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x % 10 == 9:\n            return False\n        \n        if x % 10 == 8:\n            return True\n        \n        if x % 10 == 7:\n            return False\n        \n        if x % 10 == 6:\n            return True\n        \n        if x % 10 == 5:\n            return False\n        \n        if x % 10 == 4:\n            return False\n        \n        if x % 10 == 3:"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0] != '0' else 0\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        if len(s) == 0:\n            return True\n        \n        i = 0\n        for c in t:\n            if c == s[i]:\n                i += 1\n            if i == len(s):\n                return True\n        return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        return [i ^ (i >> 1) for i in range(1 << n)]"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        for i in range(3, n + 1):\n            a, b = b, a + b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words."}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            if left and left.val >= node.val:\n                return False\n            if right and right.val <= node.val:\n                return False\n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # insert new interval\n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] <= intervals[0][0]:\n            newInterval[0] = intervals[0][0]\n        \n        if newInterval[1] >= intervals[-1][1]:\n            newInterval[1] = intervals[-1][1]\n        \n        return [newInterval] + intervals[1:]"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s):\n            return s == s[::-1]\n        \n        if not s:\n            return [[]]\n        \n        if is_palindrome(s):\n            return [ [s] ]\n        \n        return [ [s[:i]] + [s[i:]]\n                for i, c in en\n                if is_palindrome(s[:i])]"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of all the numbers in the first list\n        # 2. find the min and max of all the numbers in the second list\n        # 3. find the min and max of all the numbers in the third list\n        # 4. find the min and max of all the numbers in the fourth list\n        # 5. find the min and max of all the numbers in the fifth list\n        # 6. find the min and max of all the numbers in the sixth list\n        # 7. find the min and max of all the numbers in the seventh list\n        # 8. find the min and max of all the numbers in the eighth list\n        # 9. find the min and max of all the numbers in the ninth list\n        # 10. find the min and max of all the numbers in the tenth list\n        # 11. find the min and max of all the numbers in the eleventh list\n        # 12. find the min and max of all the numbers in the twelfth list\n        # 13. find the min and max of all the numbers in the thirteenth list\n        # 14. find the min and max of all the numbers in the fourteenth list\n        # 15. find the min and max of all the numbers in the fifteenth list\n        # 16. find the min and max of all the numbers in the sixteenth list\n        # 17. find the min and max of all the numbers in the seventeenth list\n        # 18. find the min and max of all the numbers in the eighteenth list\n        # 19. find the min and max of all the numbers in the nineteenth list\n        # 20. find the min and max of all the numbers in the twentieth list\n        # 21. find the min and max of all the numbers in the twenty-first list\n        # 22. find the min and max of all the numbers in the twenty-second list\n        # 23. find the min and max of all the numbers in the twenty-third list\n        # 24. find the min and max of all the numbers in the twenty-fourth list\n        # 25. find the min and max of all the numbers in the twenty-fifth list\n        # 26. find the min and max of all the numbers in the twenty-sixth list\n        # 27. find the min and max of all the numbers in the twenty-seventh list\n        # 28. find the min and max of all the numbers in the twenty-eighth list\n        # 29. find the min and max of all the numbers in the twenty-ninth list\n        # 30. find the min and max of all the numbers in the thirty-first list\n        # 31. find the min and max of all the numbers in the thirty-second list\n        # 32. find the min and max of all the numbers in the thirty-third list\n        # 33. find the min and max of all the numbers in the thirty-fourth list\n        # 34. find the min and max of all the numbers in the thirty-fifth list\n        # 35. find the min and max of all the numbers in the thirty-sixth list\n        # 36. find the min and max of all the numbers in the thirty-seventh list\n        # 37. find the min and max of all the numbers in the thirty-eighth list\n        # 38. find the min and max of all the numbers in the thirty-ninth list\n        # 39. find the min and max of all the numbers in the forty-first list\n        # 40. find the min and max of all the numbers in the forty-second list\n        # 41. find the min and max of all the numbers in the forty-third list\n        # 42. find the min and max of all the numbers in the forty-fourth list\n        # 43. find the min and max of all the numbers in the forty-fifth list\n        # 44. find the min and max of all the numbers in the forty-sixth list\n        # 45. find the min and max of all the numbers in the forty-seventh list\n        # 46. find the min and max of all the numbers in the forty-eighth list\n        # 47. find the min and max of all the numbers in the forty-ninth list"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^(minutesToTest / minutesToDie) >= buckets\n        # 2. 10^(minutesToTest / minutesToDie) - 1 >= buckets\n        # 3. log(buckets) / log(10^(minutesToTest / minutesToDie)) + 1 >= buckets\n        # 4. log(buckets) / log(10^(minutesToTest / minutesToDie)) >= buckets\n        # 5. log(buckets) >= log(10^(minutesToTest / minutesToDie))\n        # 6. log(buckets) >= minutesToTest / minutesToDie\n        # 7. log(buckets) / log(minutesToTest / minutesToDie) >= log(buckets)\n        # 8. log(buckets) / log(minutesToTest / minutesToDie) >= buckets\n        # 9. log(buckets) >= buckets * log(minutesToTest / minutesToDie)\n        # 10. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1\n        # 11. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1)\n        # 12. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1\n        # 13. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1)\n        # 14. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1\n        # 15. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1)\n        # 16. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1\n        # 17. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1)\n        # 18. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1\n        # 19. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1)\n        # 20. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1\n        # 21. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1)\n        # 22. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1 + log(1) - 1\n        # 23. log(buckets) >= buckets * log(minutesToTest / minutesToDie) - 1 + log(1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # Binary search for the answer\n        lo, hi = grid[0][0], n * n - 1\n        while lo < hi:\n            mid = (lo + hi) / 2\n            if self.is_possible(grid, mid, n):\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo\n        \n    def is_possible(self, grid, t, n):\n        q = collections.deque([(0, 0)])\n        seen = set([(0, 0)])\n        while q:\n            x, y = q.popleft()\n            if grid[x][y] <= t:\n                return True\n            for nx, ny in ((x - 1, y), (x + 1, y), (x, y - 1), (x, y + 1)):\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in seen:\n                    q.append((nx, ny))\n                    seen.add((nx, ny))\n        return False"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # return self.uniquePaths(m - 1, n) + self.uniquePaths(m, n - 1)\n        \n        # return math.factorial(m + n - 2) // math.factorial(m - 1) // math.factorial(n - 1)\n        \n        # return math.comb(m + n - 2, m - 1)\n        \n        return math.comb(m + n - 2, m - 1)"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        res = '0'\n        for i in range(len(num1)):\n            digit1 = int(num1[~i])\n            for j in range(len(num2)):\n                digit2 = int(num2[~j])\n                res = str(digit1 * digit2 + int(res) + int(res[:-1] * digit1))\n        return res"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. find the max profit from left to right\n        ## 2. find the max profit from right to left\n        ## 3. return max(max_profit_from_left, max_profit_from_right)\n        \n        if not prices:\n            return 0\n        \n        max_profit_from_left = prices[0]\n        max_profit_from_right = prices[-1]\n        max_profit_from_left = max(max_profit_from_left, max_profit_from_right)\n        \n        for i in range(1, len(prices)):\n            max_profit_from_left = max(max_profit_from_left, prices[i] - min_price)\n            max_profit_from_right = max(max_profit_from_right, prices[len(prices) - i - 1] - min_price)\n            \n        return max(max_profit_from_left, max_profit_from_right)"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            if i == 0 or candidates[i] != candidates[i - 1]:\n                left = target - candidates[i]\n                right = self.combinationSum2(candidates[i:], left)\n                for r in right:\n                    res.append([candidates[i]] + r)\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word.isupper() and word[1:].islower():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not prices:\n            return 0\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res.append(root.val)\n                root = root.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the number of '(' and ')'\n        left, right = 0, 0\n        for c in s:\n            if c == '(':\n                left += 1\n            elif c == ')':\n                if left > 0:\n                    left -= 1\n                else:\n                    right += 1\n        # find the longest valid string\n        res = []\n        for c in s:\n            if c == '(':\n                if left > 0:\n                    left -= 1\n                else:\n                    res.append(c)\n            elif c == ')':\n                if right > 0:\n                    right -= 1\n                else:\n                    res.append(c)\n        return res"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5224\u65ad\u662f\u5426\u4e3a\u56de\u6587\n        # 2. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 3. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 4. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 5. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 6. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 7. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 8. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 9. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 10. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 11. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 12. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 13. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 14. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 15. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 16. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 17. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 18. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 19. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 20. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 21. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 22. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 23. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 24. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 25. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 26. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 27. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 28. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 29. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 30. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 31. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 32. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 33. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 34. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 35. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 36. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 37. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 38. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 39. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 40. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 41. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 42. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 43. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 44. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 45. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 46. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 47. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 48. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 49. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 50. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 51. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 52. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 53. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 54. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 55. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 56. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 57. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 58. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 59. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 60. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 61. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 62. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 63. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 64. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 65. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 66. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 67. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 68. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 69. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 70. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 71. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 72. \u5224\u65ad\u56de\u6587\u7684\u957f\u5ea6\n        # 73. \u5224\u65ad\u56de\u6587\u7684\u4e2a\u6570\n        # 74. \u5224\u65ad\u56de\u6587\u7684\u957f"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the first 5 in the factorial\n        # 2. find the last 5 in the factorial\n        # 3. return (last_5 - first_5) / 5\n        # 4. if k == 0, return 5\n        # 5. if k == 1, return 0\n        # 6. if k > 1, return 0\n        \n        if k == 0:\n            return 5\n        if k == 1:\n            return 0\n        if k > 1:\n            return 0\n        \n        # 1. find the first 5 in the factorial\n        first_5 = math.floor(math.log(k) / math.log(5))\n        # 2. find the last 5 in the factorial\n        last_5 = math.floor(math.log(k + 1) / math.log(5))\n        # 3. return (last_5 - first_5) / 5\n        return last_5 - first_5"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. build a hashmap for words\n        word_to_index = {word: i for i, word in en\n                        enumerate(words)}\n        \n        # 2. build a hashmap for reverse words\n        reverse_word_to_index = {word[::-1]: i for i, word in\n                                enumerate(words)}\n        \n        # 3. build a hashmap for palindrome words\n        palindrome_to_index = {}\n        for word in word_to_index:\n            if word == '':\n                palindrome_to_index[word] = word_to_index[word]\n            else:\n                palindrome_to_index[word] = word_to_index[word]\n                palindrome_to_index[word[::-1]] = word_to_index[word]\n        \n        # 4. build a list of palindrome pairs\n        res = []\n        for word in words:\n            if word in palindrome_to_index:\n                res.append([palindrome_to_index[word],\n                           palindrome_to_index[word] if word != '' else -1])\n            if word[::-1] in palindrome_to_index:\n                res.append([palindrome_to_index[word[::-1]],\n                           palindrome_to_index[word] if word != '' else -1])\n        return res"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        return TreeNode(nums[mid], self.sortedArrayToBST(nums[:mid]), self.sortedArrayToBST(nums[mid+1:]))"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        # 1. build walls\n        walls = sum(sum(i) for i in isInfected)\n        # 2. build viral regions\n        viral = sum(sum(i) for i in isInfected)\n        # 3. build contaminated regions\n        cont = sum(sum(i) for i in isInfected) - viral\n        # 4. build walls\n        walls += (viral - 1) // cont\n        # 5. build viral regions\n        viral += walls\n        # 6. build contaminated regions\n        cont += walls\n        # 7. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 8. build viral regions\n        viral += walls\n        # 9. build contaminated regions\n        cont += walls\n        # 10. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 11. build viral regions\n        viral += walls\n        # 12. build contaminated regions\n        cont += walls\n        # 13. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 14. build viral regions\n        viral += walls\n        # 15. build contaminated regions\n        cont += walls\n        # 16. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 17. build viral regions\n        viral += walls\n        # 18. build contaminated regions\n        cont += walls\n        # 19. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 20. build viral regions\n        viral += walls\n        # 21. build contaminated regions\n        cont += walls\n        # 22. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 23. build viral regions\n        viral += walls\n        # 24. build contaminated regions\n        cont += walls\n        # 25. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 26. build viral regions\n        viral += walls\n        # 27. build contaminated regions\n        cont += walls\n        # 28. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 29. build viral regions\n        viral += walls\n        # 30. build contaminated regions\n        cont += walls\n        # 31. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 32. build viral regions\n        viral += walls\n        # 33. build contaminated regions\n        cont += walls\n        # 34. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 35. build viral regions\n        viral += walls\n        # 36. build contaminated regions\n        cont += walls\n        # 37. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 38. build viral regions\n        viral += walls\n        # 39. build contaminated regions\n        cont += walls\n        # 40. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 41. build viral regions\n        viral += walls\n        # 42. build contaminated regions\n        cont += walls\n        # 43. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 44. build viral regions\n        viral += walls\n        # 45. build contaminated regions\n        cont += walls\n        # 46. build walls\n        walls += (cont - 1) // (viral - 1)\n        # 47. build viral regions\n        viral += walls\n        # 48. build contaminated regions\n        cont += walls\n        # 49. build walls\n        walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        ans = 0\n        \n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, self.dfs(matrix, dp, i, j))\n        \n        return ans\n    \n    def dfs(self, matrix, dp, i, j):\n        if not dp[i][j]:\n            val = matrix[i][j]\n            for x, y in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                if 0 <= x < len(matrix) and 0 <= y < len(matrix[0]) and matrix[x][y] > val:\n                    dp[i][j] = max(dp[i][j], self.dfs(matrix, dp, x, y))\n            dp[i][j] += 1\n        \n        return dp[i][j]"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        if n < 10:\n            return 1\n        if n < 100:\n            return 10\n        if n < 1000:\n            return 100\n        if n < 10000:\n            return 1000\n        if n < 100000:\n            return 10000\n        if n < 1000000:\n            return 100000\n        if n < 10000000:\n            return 1000000\n        if n < 100000000:\n            return 10000000\n        if n < 1000000000:\n            return 100000000\n        if n < 10000000000:\n            return 1000000000\n        if n < 100000000000:\n            return 10000000000\n        if n < 1000000000000:\n            return 100000000000\n        if n < 10000000000000:\n            return 1000000000000\n        if n < 100000000000000:\n            return 10000000000000\n        if n < 1000000000000000:\n            return 100000000000000\n        if n < 10000000000000000:\n            return 1000000000000000\n        if n < 100000000000000000:\n            return 10000000000000000\n        if n < 1000000000000000000:\n            return 100000000000000000\n        if n < 10000000000000000000:\n            return 1000000000000000000\n        if n < 100000000000000000000:\n            return 10000000000000000000\n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        if n < 100000000000000000000000000:\n            return 10000000000000000000000000\n        if n < 10000000000000000000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. build a dict\n        wordDict = set(wordDict)\n        \n        # 2. build a dp\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        # 3. dp\n        for i in range(len(s)):\n            for w in wordDict:\n                if s[i:i+len(w)] == w:\n                    dp[i+len(w)] = dp[i]\n        \n        # 4. build the result\n        if dp[-1]:\n            return [s[i:i+len(w)] for i, w in enumerate(wordDict) if s[i:i+len(w)] == w]\n        else:\n            return []"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        level = 0\n        \n        while queue:\n            level += 1\n            if level % 2 == 0:\n                res.append([node.val for node in queue[::-1]])\n            else:\n                res.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        \n        return res"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn == 0:\n            return ['0:00']\n        elif turnedOn == 1:\n            return ['0:01', '0:02', '0:04', '0:08', '0:16', '0:32', '0:64', '1:00', '2:00', '4:00', '8:00']\n        else:\n            return ['%d:%02d' % (h, m) for h in range(12) for m in range(60) if (bin(h) + bin(m)).count('1') == turnedOn]"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1, 1]]\n        \n        res = [[1] * numRows]\n        for i in range(1, numRows - 1):\n            res.append([1, 1])\n            res[-1].extend([res[-2][j] + res[-2][j + 1] for j in range(len(res[-2]) - 1)])\n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and 1162261467 % n == 0"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def maxGain(node):\n            if not node:\n                return 0\n            \n            leftGain = max(maxGain(node.left), 0)\n            rightGain = max(maxGain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, leftGain + rightGain + node.val)\n            \n            return max(leftGain, rightGain) + node.val\n        \n        self.max_sum = root.val\n        maxGain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = {(0, 0): heightMap[0][0], (m-1, n-1): heightMap[m-1][n-1]}\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        for i, j in seen:\n            for di, dj in dirs:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n:\n                    seen[(ni, nj)] = heightMap[ni][nj]\n                    heapq.heappush(heap, (heightMap[ni][nj], ni, nj))\n        \n        ans = 0\n        for i, j in seen:\n            for di, dj in dirs:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n:\n                    ans += max(0, seen[(ni, nj)] - heightMap[ni][nj])\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is empty\n        if not s:\n            return True\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. get the median\n        # 3. return the median\n        # 4. if the length of nums is odd, return the median\n        # 5. if the length of nums is even, return the mean of the two medians\n        \n        if len(nums) == 1:\n            return [nums[0]]\n        \n        if len(nums) % 2 == 1:\n            return [nums[len(nums) // 2]]\n        \n        return [(nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head and tail\n        new_head = head\n        if length > 0:\n            new_tail = head\n            for i in range(length - k - 1):\n                new_tail = new_tail.next\n            new_head = new_tail.next\n            new_tail.next = None\n        \n        # connect the new head to the tail\n        if new_head:\n            new_tail = new_head\n            while new_tail.next:\n                new_tail = new_tail.next\n            new_tail.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return self.isUgly(n // 2)\n        \n        if n % 3 == 0:\n            return self.isUgly(n // 3)\n        \n        if n % 5 == 0:\n            return self.isUgly(n // 5)\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix = zip(*matrix)\n            matrix = [self.maxSumSubarray(matrix, k) for matrix in matrix]\n            matrix = zip(*matrix)\n            matrix = [self.maxSumSubarray(matrix, k) for matrix in matrix]\n            matrix = zip(*matrix)\n        else:\n            matrix = [self.maxSumSubarray(matrix, k) for matrix in matrix]\n        \n        return max(matrix)\n    \n    def maxSumSubarray(self, matrix, k):\n        maxSum = float('-inf')\n        curSum = 0\n        sums = [0]\n        for num in matrix:\n            curSum += num\n            maxSum = max(maxSum, curSum - sums[curSum >= k])\n            sums.append(curSum)\n        return maxSum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend > 0 and divisor > 0:\n            return min(max(dividend//divisor, -2**31), 2**31 - 1)\n        \n        if dividend > 0 and divisor < 0:\n            return max(min(dividend//divisor, 2**31 - 1), -2**31)\n        \n        if dividend < 0 and divisor > 0:\n            return max(min(dividend//divisor, -2**31), -2**31)\n        \n        if dividend < 0 and divisor < 0:\n            return min(max(dividend//divisor, 2**31 - 1), -2**31)"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if board[i][j] == 'O':\n                board[i][j] = 'T'\n                if i > 0:\n                    dfs(i - 1, j)\n                if i < m - 1:\n                    dfs(i + 1, j)\n                if j > 0:\n                    dfs(i, j - 1)\n                if j < n - 1:\n                    dfs(i, j + 1)\n        \n        for i in range(m):\n            if board[i][0] == 'O':\n                dfs(i, 0)\n            if board[i][n - 1] == 'O':\n                dfs(i, n - 1)\n        for j in range(n):\n            if board[0][j] == 'O':\n                dfs(0, j)\n            if board[m - 1][j] == 'O':\n                dfs(m - 1, j)\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dict to store the value of each element\n        # and its index\n        num_to_index = {}\n        \n        # iterate over the nums list and store the value of each element\n        # in the dict\n        for i, num in enumerate(nums):\n            num_to_index[num] = i\n            \n        # iterate over the nums list again and check if the complement\n        # of the current element is in the dict\n        for i, num in en_nums:\n            if target - num in num_to_index:\n                return [num_to_index[target - num], i]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(set(cards) == 1:\n            return cards[0] == 24\n        \n        return any(self.judgePoint24(cards[:i] + [cards[i] * 2] + cards[i + 1:]) for i in range(len(cards) - 1)) or any(self.judgePoint24(cards[:i] + [cards[i] / 2] + cards[i + 1:]) for i in range(len(cards) - 1))"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        if '*' not in p:\n            return s == p\n        \n        if '?' not in p:\n            return s == p.replace('?', '')\n        \n        if p.startswith('*') and p.endswith('*'):\n            return True\n        \n        if p.startswith('*'):\n            return self.isMatch(s, p.replace('*', ''))\n        \n        if p.endswith('*'):\n            return self.isMatch(s, p.replace('*', ''))\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-beat-96.8-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100493/Python-O(n)-time-O(1)-space-"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to\n        # sort the hashmap by the key\n        # iterate the hashmap and build the result\n        # if there is a circle, return the result\n        # if there is no circle, return the result\n        \n        # build a hashmap\n        # key: from, value: list of to"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        if n < 4:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] > target:\n            return []\n        \n        if nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[n - 2] + nums[n - 1] == target:\n            return [[nums[0], nums[1], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[0] + nums[1] + nums[n - 1] + nums[n - 2] == target:\n            return [[nums[0], nums[1], nums[n - 1], nums[n - 2]]]\n        \n        if nums[0] + nums[1] + nums[n - 2] + nums[n - 3] == target:\n            return [[nums[0], nums[1], nums[n - 2], nums[n - 3]]]\n        \n        if nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 2] + nums[n - 1] + nums[n - 3] + nums[n - 4] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 3] + nums[n - 2] + nums[n - 1] + nums[n - 4] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 4] + nums[n - 3] + nums[n - 2] + nums[n - 1] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 1] + nums[n - 2] + nums[n - 3] + nums[n - 4] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 2] + nums[n - 1] + nums[n - 3] + nums[n - 4] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 3] + nums[n - 2] + nums[n - 1] + nums[n - 4] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], nums[n - 1]]]\n        \n        if nums[n - 4] + nums[n - 3] + nums[n - 2] + nums[n - 1] == target:\n            return [[nums[n - 4], nums[n - 3], nums[n - 2], num"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left edge\n        # 2. use a heap to store the right edge of the buildings\n        # 3. use a heap to store the height of the buildings\n        # 4. use a heap to store the current max height\n        # 5. use a heap to store the current max height\n        # 6. use a heap to store the current max height\n        # 7. use a heap to store the current max height\n        # 8. use a heap to store the current max height\n        # 9. use a heap to store the current max height\n        # 10. use a heap to store the current max height\n        # 11. use a heap to store the current max height\n        # 12. use a heap to store the current max height\n        # 13. use a heap to store the current max height\n        # 14. use a heap to store the current max height\n        # 15. use a heap to store the current max height\n        # 16. use a heap to store the current max height\n        # 17. use a heap to store the current max height\n        # 18. use a heap to store the current max height\n        # 19. use a heap to store the current max height\n        # 20. use a heap to store the current max height\n        # 21. use a heap to store the current max height\n        # 22. use a heap to store the current max height\n        # 23. use a heap to store the current max height\n        # 24. use a heap to store the current max height\n        # 25. use a heap to store the current max height\n        # 26. use a heap to store the current max height\n        # 27. use a heap to store the current max height\n        # 28. use a heap to store the current max height\n        # 29. use a heap to store the current max height\n        # 30. use a heap to store the current max height\n        # 31. use a heap to store the current max height\n        # 32. use a heap to store the current max height\n        # 33. use a heap to store the current max height\n        # 34. use a heap to store the current max height\n        # 35. use a heap to store the current max height\n        # 36. use a heap to store the current max height\n        # 37. use a heap to store the current max height\n        # 38. use a heap to store the current max height\n        # 39. use a heap to store the current max height\n        # 40. use a heap to store the current max height\n        # 41. use a heap to store the current max height\n        # 42. use a heap to store the current max height\n        # 43. use a heap to store the current max height\n        # 44. use a heap to store the current max height\n        # 45. use a heap to store the current max height\n        # 46. use a heap to store the current max height\n        # 47. use a heap to store the current max height\n        # 48. use a heap to store the current max height\n        # 49. use a heap to store the current max height\n        # 50. use a heap to store the current max height\n        # 51. use a heap to store the current max height\n        # 52. use a heap to store the current max height\n        # 53. use a heap to store the current max height\n        # 54. use a heap to store the current max height\n        # 55. use a heap to store the current max height\n        # 56. use a heap to store the current max height\n        # 57. use a heap to store the current max height\n        # 58. use a heap to store the current max height\n        # 59. use a heap to store the current max height\n        # 60. use a heap to store the current max height\n        # 61. use a heap to store the current max height\n        # 62. use a heap to store the current max height\n        # 63. use a heap to store the current max height\n        # 64. use a heap to store the current max height\n        # 65. use a heap"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string in place\n        s.reverse()\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]\n        \n        # or use the built-in function\n        s[:] = s[::-1]"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            triangle[i][0] += triangle[i - 1][0]\n            triangle[i][-1] += triangle[i - 1][-1]\n            for j in range(1, len(triangle[i]) - 1):\n                triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        def helper(num):\n            if num == 0:\n                return ''\n            elif num < 20:\n                return ones[num]\n            elif num < 100:\n                return tens[num // 10] + (' ' + helper(num % 10) if num % 10 else '')\n            else:\n                return ones[num // 100] + ' Hundred' + (' ' + helper(num % 100) if num % 100 else '')\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        tens = ['Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        ths = ['', 'Thousand', 'Million', 'Billion']\n        \n        if num < 1000:\n            return helper(num)\n        else:\n            return helper(num // 1000) + ' ' + ths[num // 1000000 % 10] + (' ' + helper(num % 1000) if num % 1000 else '')"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if n == 1:\n            return 0\n        if n == 2:\n            return k\n        if k % 2 == 0:\n            return (k // 2) * (n + 1)\n        else:\n            return (k // 2) * (n + 1) + (n - (k // 2))"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create two dummy nodes\n        # 2. create two pointers, one for the smaller list, one for the larger list\n        # 3. traverse the list, if the node.val < x, add it to the smaller list, otherwise add it to the larger list\n        # 4. connect the smaller list to the larger list\n        # 5. return the smaller list\n        \n        smaller = ListNode(0)\n        larger = ListNode(0)\n        s = smaller\n        l = larger\n        \n        while head:\n            if head.val < x:\n                s.next = head\n                s = s.next\n            else:\n                l.next = head\n                l = l.next\n            head = head.next\n        \n        s.next = larger.next\n        l.next = None\n        \n        return smaller.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = {}\n        child = {}\n        for edge in edges:\n            if edge[1] in parent:\n                return [parent[edge[1]], edge[1]]\n            else:\n                parent[edge[1]] = edge[0]\n        \n        # find the node with only one parent\n        for edge in edges:\n            if edge[0] not in parent:\n                child[edge[0]] = 1\n        \n        # find the node with only one child\n        for edge in edges:\n            if edge[1] not in child:\n                return [edge[0], edge[1]]\n        \n        return [parent[child[edge[1]][0]], edge[1]]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [nums]\n        for i in range(len(nums)-1):\n            if nums[i] == nums[i+1]:\n                res[-1] = res[-1][:-1] + res[-1][-1:]\n            else:\n                res.append(res[-1][:-1] + res[-1][-1:])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return 2 * sum(set(nums)) - sum(nums)"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0] if grid[0][0] > 0 else 0\n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + (grid[i][0] if grid[i][0] > 0 else 0)\n        for i in range(1, n):\n            dp[n - 1][i] = dp[n - 2][i - 1] + (grid[n - 1][i] if grid[n - 1][i] > 0 else 0)\n        for i in range(n - 2, -1, -1):\n            dp[i][n - 1] = dp[i + 1][n - 1] + (grid[i][n - 1] if grid[i][n - 1] > 0 else 0)\n        for i in range(n - 2, -1, -1):\n            dp[0][i] = dp[0][i + 1] + (grid[0][i] if grid[0][i] > 0 else 0)\n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = grid[i - 1][j - 1] + (grid[i - 1][j] if grid[i - 1][j] > 0 else 0) + (grid[i][j - 1] if grid[i][j - 1] > 0 else 0) - (grid[i][j] if grid[i][j] > 0 else 0)\n                if i != j:\n                    dp[i][j] += dp[j][i]\n        return dp[n - 1][n - 1] if dp[n - 1][n - 1] > 0 else 0"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        \n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 2. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 3. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 4. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 5. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 6. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 7. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 8. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 9. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 10. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 11. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 12. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 13. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 14. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True\n        # if max_reach < i:\n        #     return False\n        \n        # 15. \n        # max_reach = max(max_reach, nums[i] + i)\n        # if max_reach >= len(nums) - 1:\n        #     return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        if n == 2:\n            return '11'\n        \n        if n == 3:\n            return '21'\n        \n        if n == 4:\n            return '1211'\n        \n        if n == 5:\n            return '111221'\n        \n        if n == 6:\n            return '312211'\n        \n        if n == 7:\n            return '13112221'\n        \n        if n == 8:\n            return '1113213211'\n        \n        if n == 9:\n            return '31131211131221'\n        \n        if n == 10:\n            return '13211311123113112211'\n        \n        if n == 11:\n            return '11131221131112132132221'\n        \n        if n == 12:\n            return '3113112221232132211311121312211'\n        \n        if n == 13:\n            return '1311212132123211231131221131211'\n        \n        if n == 14:\n            return '111312211311121321322211231131221131211'\n        \n        if n == 15:\n            return '3113112221232132211311121312211231131221131211'\n        \n        if n == 16:\n            return '13211311123113112211232132112311312211231131221131211'\n        \n        if n == 17:\n            return '11131221131112132132221123113122112321321123113122112311312211'\n        \n        if n == 18:\n            return '31131122212321322113111213122112321321123113122112321321123113122112311312211'\n        \n        if n == 19:\n            return '132113111231131122112321321123213222112311312211232132112311312211232132112311312211232132112311312211'\n        \n        if n == 20:\n            return '11131221131112132132221123213211232132221123113122112321321123213222112311312211232132112321322211231131221123213211232132221'\n        \n        if n == 21:\n            return '311311222123213221123213211232132221123113122112321321123213"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search to find the max sum\n        # binary search to find the min sum\n        # binary search to find the mid sum\n        # binary search"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\n        \n        res = [phone[d] for d in digits if d in phone]\n        \n        if len(res) == 0:\n            return []\n        \n        if len(res) == 1:\n            return list(res[0])\n        \n        return [r + s for r in res for s in res]"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        for i in range(len(candidates)):\n            if candidates[i] > target:\n                break\n            if candidates[i] == target:\n                res.append([target])\n            else:\n                res.append([candidates[i], candidates[i]])\n                if target - candidates[i] < candidates[i]:\n                    break\n                res.append([target - candidates[i], candidates[i]])\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n == '11':\n            return '9'\n        elif n == '9':\n            return '10'\n        elif n == '10':\n            return '9'\n        else:\n            return str(int(n) - 1) if int(n) - 1 > 0 else str(int(n) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            return -self.reverse(-x)\n        \n        if x < 10:\n            return x\n        \n        if x % 10 == 0:\n            return x\n        \n        if x < 10 ** 5:\n            return x // 10 + x % 10 * 10\n        \n        return 0"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n // 2):\n            for j in range((n + 1) // 2):\n                matrix[i][j], matrix[~j][i] = matrix[~j][i], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max and min\n        # 2. find the max product of the array\n        # 3. find the max product of the array except the max\n        # 4. return max(max_product, max_product/min)\n        \n        max_product = nums[0]\n        min_product = nums[0]\n        max_product_exclude_min = nums[0]\n        max_product_exclude_max = nums[0]\n        \n        for num in nums[1:]:\n            if num < 0:\n                max_product, min_product = max(max_product, min_product), min(max_product, min_product)\n            max_product = max(max_product, num)\n            min_product = min(min_product, num)\n            max_product_exclude_min = max(max_product_exclude_min, num)\n            max_product_exclude_max = max(max_product_exclude_max, max_product_exclude_min * num)\n            \n        return max(max_product, max_product_exclude_max)"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        dp = {stones[0]: set([1])}\n        \n        for s in stones[1:]:\n            if s in dp:\n                dp[s] = dp.get(s, set()) | {s+1, s+2}\n            if s-1 in dp:\n                dp[s-1] = dp.get(s-1, set()) | {s}\n            if s-2 in dp:\n                dp[s-2] = dp.get(s-2, set()) | {s-1, s}\n        \n        return len(dp) > 0 and (stones[-1] in dp[-1])"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. sort the score\n        # 2. assign the rank\n        # 3. assign the rank\n        # 4. assign the rank\n        # 5. assign the rank\n        # 6. assign the rank\n        # 7. assign the rank\n        # 8. assign the rank\n        # 9. assign the rank\n        # 10. assign the rank\n        # 11. assign the rank\n        # 12. assign the rank\n        # 13. assign the rank\n        # 14. assign the rank\n        # 15. assign the rank\n        # 16. assign the rank\n        # 17. assign the rank\n        # 18. assign the rank\n        # 19. assign the rank\n        # 20. assign the rank\n        # 21. assign the rank\n        # 22. assign the rank\n        # 23. assign the rank\n        # 24. assign the rank\n        # 25. assign the rank\n        # 26. assign the rank\n        # 27. assign the rank\n        # 28. assign the rank\n        # 29. assign the rank\n        # 30. assign the rank\n        # 31. assign the rank\n        # 32. assign the rank\n        # 33. assign the rank\n        # 34. assign the rank\n        # 35. assign the rank\n        # 36. assign the rank\n        # 37. assign the rank\n        # 38. assign the rank\n        # 39. assign the rank\n        # 40. assign the rank\n        # 41. assign the rank\n        # 42. assign the rank\n        # 43. assign the rank\n        # 44. assign the rank\n        # 45. assign the rank\n        # 46. assign the rank\n        # 47. assign the rank\n        # 48. assign the rank\n        # 49. assign the rank\n        # 50. assign the rank\n        # 51. assign the rank\n        # 52. assign the rank\n        # 53. assign the rank\n        # 54. assign the rank\n        # 55. assign the rank\n        # 56. assign the rank\n        # 57. assign the rank\n        # 58. assign the rank\n        # 59. assign the rank\n        # 60. assign the rank\n        # 61. assign the rank\n        # 62. assign the rank\n        # 63. assign the rank\n        # 64. assign the rank\n        # 65. assign the rank\n        # 66. assign the rank\n        # 67. assign the rank\n        # 68. assign the rank\n        # 69. assign the rank\n        # 70. assign the rank\n        # 71. assign the rank\n        # 72. assign the rank\n        # 73. assign the rank\n        # 74. assign the rank\n        # 75. assign the rank\n        # 76. assign the rank\n        # 77. assign the rank\n        # 78. assign the rank\n        # 79. assign the rank\n        # 80. assign the rank\n        # 81. assign the rank\n        # 82. assign the rank\n        # 83. assign the rank\n        # 84. assign the rank\n        # 85. assign the rank\n        # 86. assign the rank\n        # 87. assign the rank\n        # 88. assign the rank\n        # 89. assign the rank\n        # 90. assign the rank\n        # 91. assign the rank\n        # 92. assign the rank\n        # 93. assign the rank\n        # 94. assign the rank\n        # 95. assign the rank\n        # 96. assign the rank\n        # 97. assign the rank\n        # 98. assign the rank\n        # 99. assign the rank\n        # 100. assign the rank\n        # 101. assign the rank\n        # 102. assign the rank\n        # 103. assign the rank"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. use a dict to store the last index of each char\n        # 2. use a variable to store the max length\n        # 3. use a variable to store the current length\n        # 4. use a variable to store the start index\n        # 5. iterate the string\n        # 6. if the char is in the dict, update the max length\n        # 7. if the char is not in the dict, add it to the dict\n        # 8. update the current length\n        # 9. update the max length if the current length is larger than the max length\n        # 10. update the start index\n        # 11. return the max length\n        \n        if not s:\n            return 0\n        \n        last_index = {}\n        max_len = 0\n        cur_len = 0\n        start_index = 0\n        \n        for i, c in en\n            if c in last_index:\n                max_len = max(max_len, cur_len)\n                start_index = max(start_index, last_index[c] + 1)\n            last_index[c] = i\n            cur_len = i - start_index + 1\n            \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = collections.Counter(words)\n        \n        res = []\n        for i in range(word_len):\n            left = right = i\n            word_counts = collections.Counter()\n            while right + word_len <= len(s):\n                word = s[right:right + word_len]\n                right += word_len\n                if word in word_dict:\n                    word_counts[word] += 1\n                    while word_counts[word] > word_dict[word]:\n                        word_counts[s[left:left + word_len]] -= 1\n                        left += word_len\n                if right - left == word_len * word_count:\n                    res.append(left)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max element in the array\n        # 2. find the index of the max element\n        # 3. if the index is the same as the max element, then it is the max chunk\n        # 4. if the index is not the same as the max element, then it is the max chunk + 1\n        \n        max_ele = max(arr)\n        max_idx = arr.index(max_ele)\n        return max_idx + 1 if max_idx == max_ele else max_idx"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                # find the node before cur\n                prev = dummy\n                while prev.next.val < cur.next.val:\n                    prev = prev.next\n                # insert cur after prev\n                tmp = cur.next\n                cur.next = tmp.next\n                tmp.next = prev.next\n                prev.next = tmp\n            else:\n                cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if nums[i] > 0:\n                break\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    while l < r and nums[l] == nums[l+1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r-1]:\n                        r -= 1\n                    l += 1\n                    r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        if m > n:\n            return self.minDistance(word2, word1)\n        \n        if n == 0:\n            return m\n        \n        dp = [0] * (n + 1)\n        for i in range(m + 1):\n            prev = dp[0]\n            dp[0] = i\n            for j in range(1, n + 1):\n                curr = dp[j]\n                if i == 0:\n                    dp[j] = j\n                elif word1[i - 1] == word2[j - 1]:\n                    dp[j] = prev\n                else:\n                    dp[j] = min(dp[j], dp[j - 1]) + 1\n                prev = curr\n        return dp[n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        return bin(x ^ y).count('1')"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return ['->'.join([str(root.val), path]) for path in (left + right) if path]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            for i in range(left, mid):\n                if nums[i] > nums[mid] * 2:\n                    count += mid - i\n            for i in range(mid, right):\n                if nums[i] > nums[mid]:\n                    count += right - i\n            nums[left:right] = sorted(nums[left:right])\n            return count\n        \n        def merge_sort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            return merge_sort(nums, left, mid) + merge_sort(nums, mid, right) + merge(nums, left, mid, right)\n        \n        return merge_sort(nums, 0, len(nums))"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(v) for v in version1.split('.')]\n        v2 = [int(v) for v in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] *= 10 ** (len(v1) - i - 1)\n            if i < len(v2):\n                v2[i] *= 10 ** (len(v2) - i - 1)\n        \n        return cmp(v1, v2)"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end day\n        courses.sort(key=lambda x: x[1])\n        # greedy: take the longest course\n        # if the course ends at day i, add it to the heap\n        # if the course starts at day i, remove the smallest course from the heap\n        # the heap will always have the longest course at the top\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is greater than the duration of the longest course, remove the smallest course\n        # the heap will have at most k courses\n        # the heap will have at most k courses\n        # if the sum of durations of all courses in the heap is"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        end = dummy\n        while end:\n            for i in range(k):\n                end = end.next\n                if not end:\n                    break\n            if not end:\n                break\n            start = prev.next\n            end = end.next\n            prev.next = end\n            prev = start\n            for i in range(k):\n                tmp = start.next\n                start.next = end.next\n                end.next = start.next\n                start = tmp\n            prev.next = end\n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in (s + s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20\n        # 2. 1, 3, 5, 9, 15, 25, 41, 65, 105, 165, 265, 429, 677, 1095, 1745, 2885, 4637, 7405, 11305\n        # 3. 1, 4, 9, 25, 65, 165, 429, 1095, 2885, 7405, 21125, 54625, 144425, 408255, 1064255, 2984255, 8324255, 24164255, 69124255, 207364255\n        # 4. 1, 5, 15, 45, 125, 425, 1425, 4625, 14425, 48625, 153425, 500425, 1653425, 4882425, 17482425, 58024255, 207364255, 70504255, 24164255, 8324255, 2984255, 9624255, 38424255, 12824255, 4294255, 1444255, 46255, 14425, 425, 125, 45, 15, 5, 1, 0\n        # 5. 1, 6, 21, 76, 252, 828, 3432, 11856, 40388, 122900, 387424, 1162400, 3971200, 12104000, 41704000, 130240000, 449200000, 1496000000, 4882400000, 16776000000, 54624000000, 186720000000, 614400000000, 2176000000000, 7760000000000, 27440000000000, 96240000000000, 384240000000000, 1282400000000000, 4294000000000000, 14442000000000000, 4625000000000000, 14425000000000000, 4250000000000000, 12500000000000000, 4500000000000000, 15000000000000000, 4500000000000000, 15"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. use bit manipulation\n        # 2. use dict\n        # 3. use set\n        # 4. use xor\n        # 5. use math\n        # 6. use bit manipulation\n        # 7. use bit manipulation\n        # 8. use bit manipulation\n        # 9. use bit manipulation\n        # 10. use bit manipulation\n        # 11. use bit manipulation\n        # 12. use bit manipulation\n        # 13. use bit manipulation\n        # 14. use bit manipulation\n        # 15. use bit manipulation\n        # 16. use bit manipulation\n        # 17. use bit manipulation\n        # 18. use bit manipulation\n        # 19. use bit manipulation\n        # 20. use bit manipulation\n        # 21. use bit manipulation\n        # 22. use bit manipulation\n        # 23. use bit manipulation\n        # 24. use bit manipulation\n        # 25. use bit manipulation\n        # 26. use bit manipulation\n        # 27. use bit manipulation\n        # 28. use bit manipulation\n        # 29. use bit manipulation\n        # 30. use bit manipulation\n        # 31. use bit manipulation\n        # 32. use bit manipulation\n        # 33. use bit manipulation\n        # 34. use bit manipulation\n        # 35. use bit manipulation\n        # 36. use bit manipulation\n        # 37. use bit manipulation\n        # 38. use bit manipulation\n        # 39. use bit manipulation\n        # 40. use bit manipulation\n        # 41. use bit manipulation\n        # 42. use bit manipulation\n        # 43. use bit manipulation\n        # 44. use bit manipulation\n        # 45. use bit manipulation\n        # 46. use bit manipulation\n        # 47. use bit manipulation\n        # 48. use bit manipulation\n        # 49. use bit manipulation\n        # 50. use bit manipulation\n        # 51. use bit manipulation\n        # 52. use bit manipulation\n        # 53. use bit manipulation\n        # 54. use bit manipulation\n        # 55. use bit manipulation\n        # 56. use bit manipulation\n        # 57. use bit manipulation\n        # 58. use bit manipulation\n        # 59. use bit manipulation\n        # 60. use bit manipulation\n        # 61. use bit manipulation\n        # 62. use bit manipulation\n        # 63. use bit manipulation\n        # 64. use bit manipulation\n        # 65. use bit manipulation\n        # 66. use bit manipulation\n        # 67. use bit manipulation\n        # 68. use bit manipulation\n        # 69. use bit manipulation\n        # 70. use bit manipulation\n        # 71. use bit manipulation\n        # 72. use bit manipulation\n        # 73. use bit manipulation\n        # 74. use bit manipulation\n        # 75. use bit manipulation\n        # 76. use bit manipulation\n        # 77. use bit manipulation\n        # 78. use bit manipulation\n        # 79. use bit manipulation\n        # 80. use bit manipulation\n        # 81. use bit manipulation\n        # 82. use bit manipulation\n        # 83. use bit manipulation\n        # 84. use bit manipulation\n        # 85. use bit manipulation\n        # 86. use bit manipulation\n        # 87. use bit manipulation\n        # 88. use bit manipulation\n        # 89. use bit manipulation\n        # 90. use bit manipulation\n        # 91. use bit manipulation\n        # 92. use bit manipulation\n        # 93. use bit manipulation\n        # 94. use bit manipulation\n        # 95."}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict for each sticker\n        # 2. build a dict for each letter in target\n        # 3. for each letter in target, if it is in stickers, add it to the dict\n        # 4. if it is not in stickers, add it to the dict\n        # 5. if the dict has a value > 0, add it to the dict\n        # 6. if the dict has a value == 0, add it to the dict\n        # 7. if the dict has a value == 1, add it to the dict\n        # 8. if the dict has a value > 1, add it to the dict\n        # 9. if the dict has a value == 0, add it to the dict\n        # 10. if the dict has a value == 1, add it to the dict\n        # 11. if the dict has a value > 1, add it to the dict\n        # 12. if the dict has a value == 0, add it to the dict\n        # 13. if the dict has a value == 1, add it to the dict\n        # 14. if the dict has a value > 1, add it to the dict\n        # 15. if the dict has a value == 0, add it to the dict\n        # 16. if the dict has a value == 1, add it to the dict\n        # 17. if the dict has a value > 1, add it to the dict\n        # 18. if the dict has a value == 0, add it to the dict\n        # 19. if the dict has a value == 1, add it to the dict\n        # 20. if the dict has a value > 1, add it to the dict\n        # 21. if the dict has a value == 0, add it to the dict\n        # 22. if the dict has a value == 1, add it to the dict\n        # 23. if the dict has a value > 1, add it to the dict\n        # 24. if the dict has a value == 0, add it to the dict\n        # 25. if the dict has a value == 1, add it to the dict\n        # 26. if the dict has a value > 1, add it to the dict\n        # 27. if the dict has a value == 0, add it to the dict\n        # 28. if the dict has a value == 1, add it to the dict\n        # 29. if the dict has a value > 1, add it to the dict\n        # 30. if the dict has a value == 0, add it to the dict\n        # 31. if the dict has a value == 1, add it to the dict\n        # 32. if the dict has a value > 1, add it to the dict\n        # 33. if the dict has a value == 0, add it to the dict\n        # 34. if the dict has a value == 1, add it to the dict\n        # 35. if the dict has a value > 1, add it to the dict\n        # 36. if the dict has a value == 0, add it to the dict\n        # 37. if the dict has a value == 1, add it to the dict\n        # 38. if the dict has a value > 1, add it to the dict\n        # 39. if the dict has a value == 0, add it to the dict\n        # 40. if the dict has a value == 1, add it to the dict\n        # 41. if the dict has a value > 1, add it to the dict\n        # 42. if the dict has a value == 0, add it to the dict\n        # 43. if the dict has a value == 1, add it to the dict\n        # 44. if the dict has a value > 1, add it to the dict\n        # 45. if the dict has a value == 0, add it to the dict\n        # 46. if the dict has a value == 1, add it to the dict\n        # 47. if the dict has a value > 1, add it to the dict\n        # 48. if the dict has a value == 0, add it to the dict\n        # 49. if the dict has a value == 1, add it to the dict\n        # 50. if the dict has a value > 1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [1] * n\n        for i in range(n - 1):\n            dp[i] = dp[i - 1] + 1 if s[i] == s[i - 1] else 1\n        for i in range(n - 2, -1, -1):\n            dp[i] = min(dp[i], dp[i + 1] - 1) if s[i] == s[i + 1] else dp[i]\n        return dp[-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary to map roman numerals to integers\n        roman_to_int = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        # initialize result to 0\n        result = 0\n        \n        # iterate over the string in reverse order\n        for i in range(len(s) - 1):\n            # if the current character is less than the next character, subtract it from the current value\n            if roman_to_int[s[i]] < roman_to_int[s[i+1]]:\n                result -= roman_to_int[s[i]]\n            # otherwise, add the current value to the result\n            else:\n                result += roman_to_int[s[i]]\n        \n        # add the last character to the result\n        result += roman_to_int[s[-1]]\n        \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        for i in range(k):\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n        \n        ans = [nums[q[0]]]\n        for i in range(k, len(nums)):\n            while q and nums[i] >= nums[q[-1]]:\n                q.pop()\n            q.append(i)\n            if q[0] == i - k:\n                q.popleft()\n            ans.append(nums[q[0]])\n        return ans"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        if n == 0:\n            return nums1[m // 2] if m % 2 == 1 else (nums1[m // 2 - 1] + nums1[m // 2]) / 2.0\n        \n        left, right = 0, m\n        while left < right:\n            i = (left + right) // 2\n            j = (m + n + 1) // 2 - i\n            if nums1[i] < nums2[j]:\n                left = i + 1\n            else:\n                right = i\n        \n        i = left\n        j = (m + n) // 2 - i\n        if i == 0:\n            max_left = nums2[j - 1]\n        elif j == 0:\n            max_left = nums1[i - 1]\n        else:\n            max_left = max(nums1[i - 1], nums2[j - 1])\n        \n        if (m + n) % 2 == 1:\n            return max_left\n        \n        if i == m:\n            min_right = nums2[j]\n        elif j == n:\n            min_right = nums1[i]\n        else:\n            min_right = min(nums1[i], nums2[j])\n        \n        return (max_left + min_right) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # find the index of the smallest element\n        # if the smallest element is not at the first position, it is the smallest element\n        # if the smallest element is at the first position, it is the largest element\n        # if the smallest element is at the last position, it is the smallest element\n        # if the smallest element is at the middle position, it is the largest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest element is at the middle position, it is the smallest element\n        # if the smallest"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1, 1]\n        \n        row = [1, 1]\n        for i in range(2, rowIndex + 1):\n            row = [1] + [row[j] + row[j + 1] for j in range(len(row) - 1)] + [1]\n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [[root.val] if root.val == targetSum else []]\n        \n        return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val) + [ [root.val] + path for path in self.pathSum(root.left, targetSum) + self.pathSum(root.right, targetSum)]"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        w = int(area ** 0.5)\n        return [area // w, w] if area // w * w == area else [area, 1]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            graph[word].append(word)\n            graph[word].append(word[:-1])\n            graph[word].append(word[1:])\n        \n        # build the distance map\n        dist = {beginWord: 1}\n        q = collections.deque([beginWord])\n        for word in graph[beginWord]:\n            if word in graph:\n                dist[word] = 2\n                q.append(word)\n        \n        # BFS\n        while q:\n            word = q.popleft()\n            if word == endWord:\n                break\n            for word in graph[word]:\n                if word in dist:\n                    dist[word] = dist[word] + 1\n                    q.append(word)\n        \n        # build the result\n        if endWord not in dist:\n            return []\n        res = [[endWord]]\n        if endWord in dist:\n            res.append([endWord])\n        \n        # build the parents map\n        parents = {endWord: beginWord}\n        while endWord in dist:\n            for word in graph[endWord]:\n                if word in dist:\n                    parents[word] = endWord\n                    if word not in res[dist[word] - 1]:\n                        res.append([word] + res[dist[word] - 1])\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and not (n & n - 1)"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        res = [[]]\n        for i in range(n):\n            if i == 0 or nums[i] != nums[i - 1]:\n                res += [nums[i]] + [num + nums[i] for num in res]\n            else:\n                res += res[-1]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u5355\u8c03\u6808\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 6. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212\n        # 7. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808\n        # 8. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 9. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808\n        # 10. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 11. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808\n        # 12. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 13. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808\n        # 14. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 15. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808\n        # 16. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 17. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808\n        # 18. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 19. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808\n        # 20. \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u52a8\u6001\u89c4\u5212 + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e + \u5355\u8c03\u6808 + \u4e8c\u5206\u67e5\u627e\n        # 21. \u5355\u8c03"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        return stack.pop()"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        if (x_min, y_min) not in rectangles or (x_max, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u8f6c10"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = num\n            else:\n                cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = board[0][0] * 4 + board[0][1]\n        if num == 12:\n            num = 0\n        elif num == 2:\n            num = 1\n        elif num == 13:\n            num = 2\n        elif num == 3:\n            num = 4\n        elif num == 11:\n            num = 8\n        else:\n            num = 16\n        \n        if num == 16:\n            if board[1][0] == 0:\n                num = 15\n            elif board[1][2] == 0:\n                num = 14\n        \n        if num == 15:\n            if board[0][1] == 0:\n                num = 13\n            elif board[0][1] == 2:\n                num = 12\n        \n        if num == 14:\n            if board[0][1] == 0:\n                num = 11\n            elif board[0][1] == 3:\n                num = 10\n        \n        if num == 13:\n            if board[0][1] == 0:\n                num = 9\n            elif board[0][1] == 2:\n                num = 8\n        \n        if num == 12:\n            if board[0][1] == 0:\n                num = 7\n            elif board[0][1] == 3:\n                num = 6\n        \n        if num == 11:\n            if board[0][1] == 0:\n                num = 5\n            elif board[0][1] == 3:\n                num = 4\n        \n        if num == 10:\n            if board[0][1] == 0:\n                num = 3\n            elif board[0][1] == 2:\n                num = 2\n        \n        if num == 9:\n            if board[0][1] == 0:\n                num = 1\n            elif board[0][1] == 3:\n                num = 0\n        \n        if num == 8:\n            if board[0][1] == 0:\n                num = 15\n            elif board[0][1] == 2:\n                num = 14\n        \n        if num == 7:\n            if board[0][1] == 0:\n                num = 13\n            elif board[0][1] == 2:\n                num = 12\n        \n        if num == 6:\n            if board[0][1] == 0:\n                num = 11\n            elif board[0][1] == 3:\n                num = 10\n        \n        if num == 5:\n            if board[0][1] == 0:\n                num = 9\n            elif board[0][1] == 3:\n                num = 8\n        \n        if num == 4:\n            if board[0][1] == 0:\n                num = 15\n            elif board[0][1] == 2:\n                num = 14\n        \n        if num == 3:\n            if board[0][1] == 0:\n                num = 13\n            elif board[0][1] == 2:\n                num = 12\n        \n        if num == 2:\n            if board[0][1] == 0:\n                num = 11\n            elif board[0][1] == 3:\n                num = 10\n        \n        if num == 1:\n            if board[0][1] == 0:\n                num = 15\n            elif board[0][1] == 2:\n                num = 14\n        \n        if num == 0:\n            if board[0][1] == 0:\n                num = 13\n            elif board[0][1] == 2:\n                num = 12\n        \n        return num"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(s)) == len(set(zip(s, t))) == len(set(t))"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot point\n        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] > nums[r]:\n                l = mid + 1\n            else:\n                r = mid\n        pivot = l\n        \n        # find the target\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[(mid + pivot) % len(nums)] == target:\n                return True\n            elif nums[(mid + pivot) % len(nums)] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m - 1][n - 1] == 1:\n            return 0\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        if m == 1 and n == 1:\n            return 1\n        \n        dp = [0] * n\n        dp[0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                elif j > 0:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0] != '0' else 0\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[n-1]\n        \n        if n < 3:\n            return ans\n        \n        if n == 3:\n            return target\n        \n        if nums[0] + nums[1] + nums[n-1] > target:\n            return nums[0] + nums[1] + nums[n-1]\n        \n        if nums[0] + nums[n-1] + nums[n-2] < target:\n            return nums[0] + nums[n-1] + nums[n-2]\n        \n        if nums[1] + nums[n-1] + nums[n-2] == target:\n            return target\n        \n        if nums[0] + nums[1] + nums[n-1] == target:\n            return target\n        \n        if nums[0] + nums[n-1] + nums[n-2] == target:\n            return target\n        \n        if nums[n-1] + nums[n-2] + nums[n-3] == target:\n            return target\n        \n        if nums[n-2] + nums[n-1] + nums[n-3] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums[n-1] == target:\n            return target\n        \n        if nums[n-3] + nums[n-2] + nums["}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                yield from inorder(root.left)\n                yield root.val\n                yield from inorder(root.right)\n        \n        return min(b - a for a, b in zip(inorder(root), inorder(root)) if a)"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the max frequency\n        max_freq, max_val = self.find_max_freq(root)\n        \n        # find the nodes with max frequency\n        max_nodes = [node.val for node in root.iter_nodes() if node.val == max_val]\n        \n        return max_nodes if max_freq == 1 else max_nodes[:1]\n        \n    def find_max_freq(self, root):\n        if not root:\n            return 0, None\n        \n        if not root.left:\n            return 1, root.val\n        \n        if not root.right:\n            return 1, root.val\n        \n        left_freq, left_val = self.find_max_freq(root.left)\n        right_freq, right_val = self.find_max_freq(root.right)\n        \n        if left_freq == right_freq:\n            return left_freq + 1, left_val\n        \n        return max(left_freq, right_freq) + 1, left_val if left_freq > right_freq else right_val"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check length\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        if len(password) <= 20:\n            return 0\n        \n        # 2. check if contains at least one lowercase, one uppercase, one digit\n        if password.islower() or password.isupper() or password.isdigit():\n            return max(20 - len(password), 0)\n        \n        # 3. check if contains three repeating characters in a row\n        if password.find('aaa') != -1:\n            return max(2, 20 - len(password))\n        if password.find('bbb') != -1:\n            return max(2, 20 - len(password))\n        return max(2, 20 - len(password))"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 10 = 2 * 5\n        # 10 = 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 10 = 2 * 2 *"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        idx = 0\n        step = 1\n        for c in s:\n            res[idx] += c\n            if idx == 0:\n                step = 1\n            elif idx == numRows - 1:\n                step = -1\n            idx += step\n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = height[left], height[right]\n        ans = 0\n        \n        while left < right:\n            if left_max < right_max:\n                left += 1\n                left_max = max(left_max, height[left])\n                ans += left_max - height[left]\n            else:\n                right -= 1\n                right_max = max(right_max, height[right])\n                ans += right_max - height[right]\n                \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## nums = [4,3,2,7,8,2,3,1]\n        ## nums = [1,1]\n        ## nums = [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = [0, 0]\n        for s, e in intervals:\n            if s <= ans[1]:\n                ans[0] += 1\n                ans[1] = min(ans[1], e)\n            else:\n                ans[0] += 1\n                ans[1] = e - 1\n        return ans[0]"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee\u76f8\u540c\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        # 5. \u5982\u679c\u6ca1\u6709\u51fa\u73b0\u8fc7\u67d0\u4e2a\u539f\u5b50\u6570\u76ee\uff0c\u5219\u6309\u7167\u539f\u5b50\u6570\u76ee\u51fa\u73b0\u7684\u987a\u5e8f\u62fc\u63a5\n        \n        # 1. \u5148\u628a\u539f\u59cb\u7684\u539f\u5b50\u6570\u76ee\u8ba1\u7b97\u51fa\u6765\n        # 2. \u518d\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u6392\u5e8f\n        # 3. \u6700\u540e\u628a\u539f\u5b50\u6570\u76ee\u6309\u7167\u539f\u5b50\u540d\u79f0\u62fc\u63a5\u8d77\u6765\n        # 4. \u5982\u679c\u6709\u591a\u4e2a\u539f\u5b50\u6570\u76ee"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and n & (n - 1) == 0 and n & 0x55555555 != 0"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        \n        max_len = 0\n        stack = [-1]\n        \n        for i, c in en.umerate(s):\n            if c == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = []\n        if numerator < 0 == denominator < 0:\n            res.append('-')\n        numerator, denominator = abs(numerator), abs(denominator)\n        res.append(str(numerator // denominator))\n        numerator %= denominator\n        if numerator == 0:\n            return ''.join(res)\n        res.append('.')\n        seen = {}\n        while numerator:\n            if numerator in seen:\n                res.insert(seen[numerator], '(')\n                res.append(')')\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res.append(str(numerator // denominator))\n            numerator %= denominator\n        return ''.join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle node\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode(0)\n        cur = dummy\n        while left and right:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        # merge the remaining nodes\n        if left:\n            cur.next = left\n        else:\n            cur.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        nums = [x[1] for x in envelopes]\n        return self.longest_increasing_subsequence(nums)\n        \n    def longest_increasing_subsequence(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        if not nums:\n            return 0\n        \n        dp = [1] * len(nums)\n        for i in range(len(nums)):\n            for j in range(i):\n                if nums[j] < nums[i]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. check if the first row and column have zeroes\n        # 2. check if the first row and column have zeroes\n        # 3. check if the first row and column have zeroes\n        # 4. check if the first row and column have zeroes\n        # 5. check if the first row and column have zeroes\n        # 6. check if the first row and column have zeroes\n        # 7. check if the first row and column have zeroes\n        # 8. check if the first row and column have zeroes\n        # 9. check if the first row and column have zeroes\n        # 10. check if the first row and column have zeroes\n        # 11. check if the first row and column have zeroes\n        # 12. check if the first row and column have zeroes\n        # 13. check if the first row and column have zeroes\n        # 14. check if the first row and column have zeroes\n        # 15. check if the first row and column have zeroes\n        # 16. check if the first row and column have zeroes\n        # 17. check if the first row and column have zeroes\n        # 18. check if the first row and column have zeroes\n        # 19. check if the first row and column have zeroes\n        # 20. check if the first row and column have zeroes\n        # 21. check if the first row and column have zeroes\n        # 22. check if the first row and column have zeroes\n        # 23. check if the first row and column have zeroes\n        # 24. check if the first row and column have zeroes\n        # 25. check if the first row and column have zeroes\n        # 26. check if the first row and column have zeroes\n        # 27. check if the first row and column have zeroes\n        # 28. check if the first row and column have zeroes\n        # 29. check if the first row and column have zeroes\n        # 30. check if the first row and column have zeroes\n        # 31. check if the first row and column have zeroes\n        # 32. check if the first row and column have zeroes\n        # 33. check if the first row and column have zeroes\n        # 34. check if the first row and column have zeroes\n        # 35. check if the first row and column have zeroes\n        # 36. check if the first row and column have zeroes\n        # 37. check if the first row and column have zeroes\n        # 38. check if the first row and column have zeroes\n        # 39. check if the first row and column have zeroes\n        # 40. check if the first row and column have zeroes\n        # 41. check if the first row and column have zeroes\n        # 42. check if the first row and column have zeroes\n        # 43. check if the first row and column have zeroes\n        # 44. check if the first row and column have zeroes\n        # 45. check if the first row and column have zeroes\n        # 46. check if the first row and column have zeroes\n        # 47. check if the first row and column have zeroes\n        # 48. check if the first row and column have zeroes\n        # 49. check if the first row and column have zeroes\n        # 50. check if the first row and column have zeroes\n        # 51. check if the first row and column have zeroes\n        # 52. check if the first row and column have zeroes\n        # 53. check if the first row and column have zeroes\n        # 54. check if the first row and column have zeroes\n        # 55. check if the first row and column have zeroes\n        # 56. check if the first row and column have zeroes\n        # 57. check if the first row and column have zeroes\n        # 58. check if the first row and column have zeroes\n        # 59. check if the first row and column have zeroes\n        # 60. check if the first row and column have zeroes\n        # 61. check if the first row and column"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the list has two nodes\n        if not head.next.next:\n            head.next = None\n            return head\n        \n        # find the node before the node to be removed\n        prev = head\n        curr = head\n        for i in range(n):\n            curr = curr.next\n        \n        # if the node to be removed is the first node\n        if not curr:\n            return head.next\n        \n        # find the node after the node to be removed\n        while curr.next:\n            prev = prev.next\n            curr = curr.next\n        \n        # remove the node\n        prev.next = prev.next.next\n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 1:\n            return 0\n        if sum(machines) % n:\n            return -1\n        avg = sum(machines) // n\n        max_num = max(machines)\n        ans = max_num - avg\n        for i in range(1, n):\n            machines[i] += machines[i - 1]\n        for i in range(n):\n            ans = max(ans, machines[i] - avg)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            return x // m + (x % m > 0)\n        \n        low, high = 1, m * n\n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        res = 0\n        \n        for row in matrix:\n            for i in range(n):\n                if row[i] == '1':\n                    heights[i] += 1\n                else:\n                    heights[i] = 0\n            res = max(res, self.largestRectangleArea(heights))\n        \n        return res\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        heights.append(0)\n        stack = [-1]\n        res = 0\n        \n        for i in range(len(heights)):\n            while heights[i] < heights[stack[-1]]:\n                h = heights[stack.pop()]\n                res = max(res, (i - stack[-1] - 1) * h)\n            stack.append(i)\n        \n        return res"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. 2**n\n        # 2. 2**n - 1\n        # 3. 2**n - 2\n        # 4. 2**n - 3\n        # 5. 2**n - 4\n        # 6. 2**n - 5\n        # 7. 2**n - 6\n        # 8. 2**n - 7\n        # 9. 2**n - 8\n        # 10. 2**n - 9\n        # 11. 2**n - 10\n        # 12. 2**n - 11\n        # 13. 2**n - 12\n        # 14. 2**n - 13\n        # 15. 2**n - 14\n        # 16. 2**n - 15\n        # 17. 2**n - 16\n        # 18. 2**n - 17\n        # 19. 2**n - 18\n        # 20. 2**n - 19\n        # 21. 2**n - 20\n        # 22. 2**n - 21\n        # 23. 2**n - 22\n        # 24. 2**n - 23\n        # 25. 2**n - 24\n        # 26. 2**n - 25\n        # 27. 2**n - 26\n        # 28. 2**n - 27\n        # 29. 2**n - 28\n        # 30. 2**n - 29\n        # 31. 2**n - 30\n        # 32. 2**n - 31\n        # 33. 2**n - 32\n        # 34. 2**n - 33\n        # 35. 2**n - 34\n        # 36. 2**n - 35\n        # 37. 2**n - 36\n        # 38. 2**n - 37\n        # 39. 2**n - 38\n        # 40. 2**n - 39\n        # 41. 2**n - 40\n        # 42. 2**n - 41\n        # 43. 2**n - 42\n        # 44. 2**n - 43\n        # 45. 2**n - 44\n        # 46. 2**n - 45\n        # 47. 2**n - 46\n        # 48. 2**n - 47\n        # 49. 2**n - 48\n        # 50. 2**n - 49\n        # 51. 2**n - 50\n        # 52. 2**n - 51\n        # 53. 2**n - 52\n        # 54. 2**n - 53\n        # 55. 2**n - 54\n        # 56. 2**n - 55\n        # 57. 2**n - 56\n        # 58. 2**n - 57\n        # 59. 2**n - 58\n        # 60. 2**n - 59\n        # 61. 2**n - 60\n        # 62. 2**n - 61\n        # 63. 2**n - 62\n        # 64. 2**n - 63\n        # 65. 2**n - 64\n        # 66. 2**n - 65\n        # 67. 2**n - 66\n        # 68. 2**n - 67\n        # 69. 2**n - 68\n        # 70. 2**n -"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the index of the smallest element\n        # 2. if the smallest element is not at the beginning, return it\n        # 3. else, return the last element\n        if nums[0] < nums[-1]:\n            return nums[0]\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            if nums[mid] > nums[0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            s = s.strip()\n            if s == '':\n                return False\n            if s[0] in ['+', '-']:\n                s = s[1:]\n            if s[-1] in ['+', '-']:\n                s = s[:-1]\n            if 'e' in s:\n                num, exp = s.split('e')\n                if num.isdigit() and exp.isdigit():\n                    return True\n                else:\n                    return False\n            else:\n                return s.isdigit()\n        except:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, X, C, M\n        # 5, 4, 1\n        # 1000, 900, 500, 4"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ a = b\n        # a ^ b ^ b = 0\n        # a ^ b ^ c ^ b = a ^ c\n        # a ^ b ^ c ^ a = b ^ c\n        # a ^ b ^ c ^ d = c ^ d\n        # a ^ b ^ c ^ d ^ a = b ^ c ^ d\n        # a ^ b ^ c ^ d ^ b = c ^ d\n        # a ^ b ^ c ^ d ^ c = d\n        # a ^ b ^ c ^ d ^ d = c\n        # a ^ b ^ c ^ d ^ e = d\n        # a ^ b ^ c ^ d ^ e ^ a = b ^ c ^ d ^ e\n        # a ^ b ^ c ^ d ^ e ^ b = c ^ d ^ e\n        # a ^ b ^ c ^ d ^ e ^ c = d ^ e\n        # a ^ b ^ c ^ d ^ e ^ d = e\n        # a ^ b ^ c ^ d ^ e ^ e = d\n        # a ^ b ^ c ^ d ^ e ^ f = e ^ f\n        # a ^ b ^ c ^ d ^ e ^ f ^ a = b ^ c ^ d ^ e ^ f\n        # a ^ b ^ c ^ d ^ e ^ f ^ b = c ^ d ^ e ^ f\n        # a ^ b ^ c ^ d ^ e ^ f ^ c = d ^ e ^ f\n        # a ^ b ^ c ^ d ^ e ^ f ^ d = e ^ f\n        # a ^ b ^ c ^ d ^ e ^ f ^ e = d ^ e\n        # a ^ b ^ c ^ d ^ e ^ f ^ f = e ^ f\n        # a ^ b ^ c ^ d ^ e ^ f ^ g = e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ a = b ^ c ^ d ^ e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ b = c ^ d ^ e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ c = d ^ e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ d = e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ e = d ^ e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ f = e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ g = e ^ f ^ g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h = e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ a = b ^ c ^ d ^ e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ b = c ^ d ^ e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ c = d ^ e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ d = e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ e = d ^ e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ f = e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ g = e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ h = e ^ f ^ g ^ h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i = e ^ f ^ g ^ h ^ i\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ a = b ^ c ^ d ^ e ^ f ^ g ^ h ^ i\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ b = c ^ d ^ e ^ f ^ g ^ h ^ i\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ c = d ^ e ^ f ^ g ^ h ^ i\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i, j)\n            return None\n        \n        def valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num:\n                    return False\n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num:\n                    return False\n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            empty = find_empty(board)\n            if empty is None:\n                return True\n            else:\n                row, col = empty\n            \n            for num in range(1, 10):\n                if valid(board, num, (row, col)):\n                    board[row][col] = str(num)\n                    if solve(board):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in the correct position\n        # swap the values of the two nodes\n        \n        # find the first node that is not in the correct position\n        # find the second node that is not in"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # check if the first half and second half are equal\n        left, right = head, prev\n        while right:\n            if left.val != right.val:\n                return False\n            left, right = left.next, right.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        if num < 4:\n            return False\n        \n        left, right = 2, num // 2\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [1]\n        if n == 2:\n            return [1, 2]\n        if n == 3:\n            return [1, 2, 2]\n        if n == 4:\n            return [1, 2, 2, 2]\n        if n == 5:\n            return [1, 2, 2, 2, 2]\n        if n == 6:\n            return [1, 2, 2, 2, 2, 2]\n        if n == 7:\n            return [1, 2, 2, 2, 2, 2, 2]\n        if n == 8:\n            return [1, 2, 2, 2, 2, 2, 2, 2]\n        if n == 9:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 10:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 11:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 12:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 13:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 14:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 15:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 16:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 17:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 18:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 19:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 20:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 21:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 22:\n            return [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n        if n == 23:\n            return [1, 2, 2,"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        while curr:\n            if curr.next and curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        return self.isScramble(s1[:len(s1)//2], s2[:len(s1)//2]) and self.isScramble(s1[len(s1)//2:], s2[len(s1)//2:])\n        \n        return self.isScramble(s1[:len(s1)//2], s2[len(s1)//2:]) and self.isScramble(s1[len(s1)//2:], s2[:len(s1)//2])\n        \n        return True"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # remove empty strings from the list\n        dirs = [d for d in dirs if d]\n        \n        # remove '.' from the list\n        if '.' in dirs:\n            dirs.remove('.')\n        \n        # remove '..' from the list\n        if '..' in dirs:\n            dirs.remove('..')\n        \n        # join the list with a '/'\n        return '/' + '/'.join(dirs)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build trie\n        root = {}\n        for word in words:\n            node = root\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = word\n        \n        # search trie\n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, root, res)\n        return [res[i] for i in range(len(res)) if res[i][0] == '#']\n        \n    def dfs(self, board, i, j, node, res):\n        c = board[i][j]\n        if c not in node:\n            return\n        word = node.get(c)\n        if word:\n            res.append(word)\n        board[i][j] = '#'\n        if i > 0:\n            self.dfs(board, i - 1, j, node, res)\n        if i < len(board) - 1:\n            self.dfs(board, i + 1, j, node, res)\n        if j > 0:\n            self.dfs(board, i, j - 1, node, res)\n        if j < len(board[0]) - 1:\n            self.dfs(board, i, j + 1, node, res)\n        board[i][j] = c"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        return sorted(s) == sorted(t)"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 sub-boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                sub = [board[i+k][j+k] for k in range(3) if board[i+k][j+k] != '.']\n                if len(set(sub)) != len(sub):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        return [str(i) if i%3 and i%5 else 'FizzBuzz' if i%15 else 'Fizz' if i%3 else 'Buzz' for i in range(1, n+1)]"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        return ' '.join(s.split()[::-1])"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        return sum(26**(ord(c) - ord('A')) for c in columnTitle)"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n < 2:\n            return n\n        \n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 1, 0, -1):\n            if ratings[i] < ratings[i - 1]:\n                candies[i - 1] = max(candies[i - 1], candies[i] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle node\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        second = slow.next\n        prev = slow.next = None\n        while second:\n            tmp = second.next\n            second.next = prev\n            prev = second\n            second = tmp\n        \n        # merge the two halves\n        first, second = head, prev\n        while second.next:\n            first.next, first = second, first.next\n            second.next, second = first.next, second.next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        words = s.split()\n        if len(pattern) != len(words):\n            return False\n        \n        return len(set(pattern)) == len(set(words)) == len(set(zip(pattern, words)))"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums[:]]\n        \n        res = []\n        for i in range(len(nums)):\n            n = nums[i]\n            rem = nums[:i] + nums[i+1:]\n            for p in self.permute(rem):\n                res.append([n] + p)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        m, n = len(matrix), len(matrix[0])\n        lo, hi = 0, m * n - 1\n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if matrix[mid // n][mid % n] < target:\n                lo = mid + 1\n            elif matrix[mid // n][mid % n] > target:\n                hi = mid - 1\n            else:\n                return True\n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode()\n        # create a pointer to the dummy node\n        curr = dummy\n        # create a carry variable\n        carry = 0\n        # add the values of the two linked lists\n        while l1 or l2 or carry:\n            # if l1 is not None, add its value to the carry\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            # if l2 is not None, add its value to the carry\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            # create a new node with the sum of the two numbers\n            curr.next = ListNode(carry % 10)\n            # update the carry\n            carry //= 10\n            # move the pointer to the next node\n            curr = curr.next\n        # return the dummy node's next node\n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. num & (num - 1) will remove the lowest set bit\n        # 2. num - 1 will remove the lowest set bit\n        # 3. num & (num - 1) will remove the lowest set bit\n        # 4. num - 1 will remove the lowest set bit\n        # 5. num & (num - 1) will remove the lowest set bit\n        # 6. num - 1 will remove the lowest set bit\n        # 7. num & (num - 1) will remove the lowest set bit\n        # 8. num - 1 will remove the lowest set bit\n        # 9. num & (num - 1) will remove the lowest set bit\n        # 10. num - 1 will remove the lowest set bit\n        # 11. num & (num - 1) will remove the lowest set bit\n        # 12. num - 1 will remove the lowest set bit\n        # 13. num & (num - 1) will remove the lowest set bit\n        # 14. num - 1 will remove the lowest set bit\n        # 15. num & (num - 1) will remove the lowest set bit\n        # 16. num - 1 will remove the lowest set bit\n        # 17. num & (num - 1) will remove the lowest set bit\n        # 18. num - 1 will remove the lowest set bit\n        # 19. num & (num - 1) will remove the lowest set bit\n        # 20. num - 1 will remove the lowest set bit\n        # 21. num & (num - 1) will remove the lowest set bit\n        # 22. num - 1 will remove the lowest set bit\n        # 23. num & (num - 1) will remove the lowest set bit\n        # 24. num - 1 will remove the lowest set bit\n        # 25. num & (num - 1) will remove the lowest set bit\n        # 26. num - 1 will remove the lowest set bit\n        # 27. num & (num - 1) will remove the lowest set bit\n        # 28. num - 1 will remove the lowest set bit\n        # 29. num & (num - 1) will remove the lowest set bit\n        # 30. num - 1 will remove the lowest set bit\n        # 31. num & (num - 1) will remove the lowest set bit\n        # 32. num - 1 will remove the lowest set bit\n        # 33. num & (num - 1) will remove the lowest set bit\n        # 34. num - 1 will remove the lowest set bit\n        # 35. num & (num - 1) will remove the lowest set bit\n        # 36. num - 1 will remove the lowest set bit\n        # 37. num & (num - 1) will remove the lowest set bit\n        # 38. num - 1 will remove the lowest set bit\n        # 39. num & (num - 1) will remove the lowest set bit\n        # 40. num - 1 will remove the lowest set bit\n        # 41. num & (num - 1) will remove the lowest set bit\n        # 42. num - 1 will remove the lowest set bit\n        # 43. num & (num - 1) will remove the lowest set bit\n        # 44. num - 1 will remove the lowest set bit\n        # 45. num & (num - 1) will remove the lowest set bit\n        # 46. num - 1 will remove the lowest set bit\n        # 47. num & (num - 1) will remove the lowest set bit\n        # 48. num - 1 will remove the lowest set bit\n        # 49. num & (num - 1) will remove the lowest set bit\n        # 50. num - 1 will remove the lowest set bit\n        # 51. num & (num - 1) will remove the lowest set bit\n        # 52. num - 1 will remove the lowest set bit\n        # 53. num & (num - 1) will remove the lowest set bit\n        # 54. num - 1 will remove the lowest set bit\n        # 55. num"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        diff = nums[1] - nums[0]\n        count = 0\n        res = 0\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n                res += count\n            else:\n                diff = nums[i] - nums[i-1]\n                count = 0\n        \n        return res"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u957f\u5ea6\n        # 2. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u4e2a\u6570\n        # 3. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 4. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 5. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 6. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 7. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 8. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 9. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 10. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 11. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 12. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 13. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 14. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 15. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 16. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 17. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 18. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 19. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 20. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 21. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 22. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 23. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 24. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 25. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 26. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 27. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 28. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 29. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 30. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 31. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 32. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 33. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 34. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 35. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 36. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 37. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 38. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 39. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 40. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 41. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 42. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 43. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 44. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 45. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 46. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 47. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 48. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 49. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 50. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 51. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 52. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 53. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 54. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 55. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 56. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 57. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 58. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 59. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 60. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 61. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 62. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 63. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 64. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 65. \u8ba1\u7b97\u6bcf\u4e2a\u5355\u8bcd"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        while stack:\n            node = stack.pop()\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n            res.append(node.val)\n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, (right - left) * min(height[left], height[right]))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a set of words\n        word_set = set(words)\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word = max(word_set, key=len)\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len = len(longest_word)\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set = set()\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with other words\n        # in the set\n        longest_word_len_set[longest_word_len] = longest_word\n        \n        # build a dict to store the longest word that can be concatenated with"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        if num < 7:\n            return str(num)\n        return self.convertToBase7(num // 7) + str(num % 7)"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. n queens\n        # 3. n queens with n-1 bishops\n        # 4. n queens with n-2 bishops\n        # 5. n queens with n-3 bishops\n        # 6. n queens with n-4 bishops\n        # 7. n queens with n-5 bishops\n        # 8. n queens with n-6 bishops\n        # 9. n queens with n-7 bishops\n        # 10. n queens with n-8 bishops\n        # 11. n queens with n-9 bishops\n        # 12. n queens with n-10 bishops\n        # 13. n queens with n-11 bishops\n        # 14. n queens with n-12 bishops\n        # 15. n queens with n-13 bishops\n        # 16. n queens with n-14 bishops\n        # 17. n queens with n-15 bishops\n        # 18. n queens with n-16 bishops\n        # 19. n queens with n-17 bishops\n        # 20. n queens with n-18 bishops\n        # 21. n queens with n-19 bishops\n        # 22. n queens with n-20 bishops\n        # 23. n queens with n-21 bishops\n        # 24. n queens with n-22 bishops\n        # 25. n queens with n-23 bishops\n        # 26. n queens with n-24 bishops\n        # 27. n queens with n-25 bishops\n        # 28. n queens with n-26 bishops\n        # 29. n queens with n-27 bishops\n        # 30. n queens with n-28 bishops\n        # 31. n queens with n-29 bishops\n        # 32. n queens with n-30 bishops\n        # 33. n queens with n-31 bishops\n        # 34. n queens with n-32 bishops\n        # 35. n queens with n-33 bishops\n        # 36. n queens with n-34 bishops\n        # 37. n queens with n-35 bishops\n        # 38. n queens with n-36 bishops\n        # 39. n queens with n-37 bishops\n        # 40. n queens with n-38 bishops\n        # 41. n queens with n-39 bishops\n        # 42. n queens with n-40 bishops\n        # 43. n queens with n-41 bishops\n        # 44. n queens with n-42 bishops\n        # 45. n queens with n-43 bishops\n        # 46. n queens with n-44 bishops\n        # 47. n queens with n-45 bishops\n        # 48. n queens with n-46 bishops\n        # 49. n queens with n-47 bishops\n        # 50. n queens with n-48 bishops\n        # 51. n queens with n-49 bishops\n        # 52. n queens with n-50 bishops\n        # 53. n queens with n-51 bishops\n        # 54. n queens with n-52 bishops\n        # 55. n queens with n-53 bishops\n        # 56. n queens with n-54 bishops\n        # 57. n queens with n-55 bishops\n        # 58. n queens with n-56 bishops\n        # 59. n queens with n-57"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i] == col:\n                    return False\n                if board[i] == col - row + i:\n                    return False\n                if board[i] == col + row - i:\n                    return False\n            return True\n        \n        def solve(board, row):\n            if row == n:\n                return [['.' * col + 'Q' + '.' * (n - col - 1) for col in board]]\n            \n            res = []\n            for col in range(n):\n                if is_valid(board, row, col):\n                    res.extend(solve(board + [col], row + 1))\n            return res\n        \n        return [['.' * col + 'Q' + '.' * (n - col - 1) for col in solve(list(), 0)] for n in range(1, 5)]"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return False\n        \n        if not board:\n            return False\n        \n        if not board[0]:\n            return False\n        \n        if not word[0]:\n            return False\n        \n        if not board[0][0]:\n            return False\n        \n        if not board[-1][-1]:\n            return False\n        \n        if not word[-1]:\n            return True\n        \n        if word in board[0]:\n            return True\n        \n        if word in board[-1]:\n            return True\n        \n        if word in [row[-1] for row in board]:\n            return True\n        \n        if word in [row[0] for row in board]:\n            return True\n        \n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 1. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 2. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 3. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 4. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 5. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 6. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 7. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 8. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 9. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 10. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 11. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 12. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 13. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 14. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 15. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 16. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 17. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 18. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 19. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 20. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 21. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 22. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 23. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 24. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 25. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 26. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 27. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 28. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 29. \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # 30. \n        # nums1[m:] = num"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max\n        max1 = max2 = max3 = float('-inf')\n        for n in nums:\n            if n > max1:\n                max3 = max2\n                max2 = max1\n                max1 = n\n            elif n > max2:\n                max3 = max2\n                max2 = n\n            elif n > max3:\n                max3 = n\n        \n        # 2. find the second max\n        if max3 == float('-inf'):\n            return max1\n        elif max2 == float('-inf'):\n            return max1\n        else:\n            return max2"}]}