{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] if s[i] == t[j]\n        \n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers and all numbers larger than n as 0\n        # 2. iterate through the array and mark the numbers as negative\n        # 3. iterate through the array again and return the first number that is not negative\n        # 4. if all numbers are negative, return n + 1\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        res = \"\"\n        nums = [i for i in range(1, n + 1)]\n        for i in range(n - 1, -1, -1):\n            # 2.1 calculate the index of the current digit\n            idx = k // fact\n            # 2.2 calculate the digit\n            res += str(nums[idx])\n            # 2.3 remove the digit from the list\n            nums.remove(nums[idx])\n            # 2.4 update the k\n            k %= fact\n            # 2.5 update the factorial\n            fact //= i\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. use two pointers\n        # 2. if sum > target, move right pointer\n        # 3. if sum < target, move left pointer\n        # 4. if sum == target, return [left, right]\n        \n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] > target:\n                right -= 1\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                return [left + 1, right + 1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            for j in range(i, len(num)):\n                if j > i and num[i] == '0':\n                    break\n                curr = int(num[i:j+1])\n                if op == None:\n                    backtrack(j+1, curr, curr, res, num[i])\n                else:\n                    backtrack(j+1, curr, int(op + curr), res, op + '+' + num[i])\n                    backtrack(j+1, -curr, int(op + '-' + num[i]), res, op + '-' + num[i])\n                    backtrack(j+1, curr * prev, int(op + '*' + num[i]), res, op + '*' + num[i])\n        \n        res = []\n        backtrack(0, 0, 0, res, None)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()[::-1]\n        return '-'.join(s[i:i+k] for i in range(0, len(s), k))[::-1]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0, 1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '.')\n        \n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    (first_match and self.isMatch(s[1:], p)))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            drop = len(nums) - k\n            out = []\n            for num in nums:\n                while drop and out and out[-1] < num:\n                    out.pop()\n                    drop -= 1\n                out.append(num)\n            return out[:k]\n        \n        def merge(nums1, nums2, k):\n            out = []\n            while nums1 and nums2 and k:\n                if nums1 > nums2:\n                    out.append(nums1.pop(0))\n                else:\n                    out.append(nums2.pop(0))\n                k -= 1\n            out += nums1 + nums2\n            return out[:k]\n        \n        return max(merge(pick(nums1, i), pick(nums2, k - i), k) for i in range(k + 1) if i <= len(nums1) and k - i <= len(nums2))"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i != num:\n                    sum += i + num / i\n                else:\n                    sum += i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1 - dungeon[i][j], 1)\n                elif i == m - 1:\n                    dp[i][j] = max(dp[i][j + 1] - dungeon[i][j], 1)\n                elif j == n - 1:\n                    dp[i][j] = max(dp[i + 1][j] - dungeon[i][j], 1)\n                else:\n                    dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        lo, hi = 0, nums[-1] - nums[0]\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if sum(bisect_right(nums, mid) - bisect_left(nums, mid) for x in nums) >= k:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and s[left] not in vowels:\n                left += 1\n            while left < right and s[right] not in vowels:\n                right -= 1\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 1 = 0\n        ## 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        \n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z') + 1):\n                    new_word = word[:i] + chr(j) + word[i + 1:]\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = list(a)\n        b = list(b)\n        \n        carry = 0\n        for i in range(len(a)):\n            if i < len(b):\n                a[i] = str(int(a[i]) + int(b[i]) + carry)\n            else:\n                a[i] = str(int(a[i]) + carry)\n            carry = int(a[i] > '1')\n        \n        if carry:\n            a.append('1')\n        \n        return ''.join(a)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        if nums[left] != target:\n            return [-1, -1]\n        left = left + 1\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = 0\n        \n        for i in range(len(nums)-1):\n            if i > cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i+1] - prices[i] for i in range(0, len(prices) - 1)) - (max(prices[i+1] - prices[i] for i in range(0, len(prices) - 1)) // 2)\n        \n        dp = [[0] * 2 for _ in range(k + 1)]\n        \n        for i in range(len(prices)):\n            for j in range(1, k + 1):\n                dp[j][0] = max(dp[j][0], dp[j - 1][1] + prices[i])\n                dp[j][1] = max(dp[j][1], dp[j - 1][0] - prices[i])\n        \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_list = []\n        if num < 0:\n            num = 2 ** 32 + num\n        \n        while num > 0:\n            hex_list.append(num % 16)\n            num = num // 16\n        \n        hex_list.reverse()\n        hex_str = ''\n        for i in hex_list:\n            if i < 10:\n                hex_str += str(i)\n            else:\n                hex_str += hex_dict[i]\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, remove it from the list\n        # if the list is empty, return -1\n        # if the list is not empty, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first non-repeating character\n        # iterate through the string and update the"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) < 2:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) < 2:\n        #     return False\n        \n        # if len(nums) == 2:\n        #     return abs(nums[0] - nums[1]) <= valueDiff\n        \n        # if len(nums) == 3:\n        #     return abs(nums[0] - nums[2]) <= valueDiff and abs(nums[1] - nums[2]) <= valueDiff\n        \n        # if len(nums) == 4:\n        #     return abs(nums[0] - nums[3]) <= valueDiff and abs(nums[1] - nums[3]) <= valueDiff and abs(nums[2] - nums[3]) <= valueDiff\n        \n        # if len(nums) == 5:\n        #     return abs(nums[0] - nums[4]) <= valueDiff and abs(nums[1] - nums[4]) <= valueDiff and abs(nums[2] - nums[4]) <= valueDiff and abs(nums[3] - nums[4]) <= valueDiff\n        \n        # if len(nums) == 6:\n        #     return abs(nums[0] - nums[5]) <= valueDiff and abs(nums[1] - nums[5]) <= valueDiff and abs(nums[2] - nums[5]) <= valueDiff and abs(nums[3] - nums[5]) <= valueDiff and abs(nums[4] - nums[5]) <= valueDiff\n        \n        # if len(nums) == 7:\n        #     return abs(nums[0] - nums[6]) <= valueDiff and abs(nums[1] - nums[6]) <= valueDiff and abs(nums[2] - nums[6]) <= valueDiff and abs(nums[3] - nums[6]) <= valueDiff and abs(nums[4] - nums[6]) <= valueDiff and abs(nums[5] - nums[6]) <= valueDiff\n        \n        # if len(nums) == 8:\n        #     return abs(nums[0] - nums[7]) <= valueDiff and abs(nums[1] - nums[7]) <= valueDiff and abs(nums[2] - nums[7]) <= valueDiff and abs(nums[3] - nums[7]) <= valueDiff and abs(nums[4] - nums[7]) <= valueDiff and abs(nums[5] - nums[7]) <= valueDiff and abs(nums[6] - nums[7]) <= valueDiff\n        \n        # if len(nums) == 9:\n        #     return abs(nums[0] - nums[8]) <= valueDiff and abs(nums[1] - nums[8]) <= valueDiff and abs(nums[2] - nums[8]) <= valueDiff and abs(nums[3] - nums[8]) <= valueDiff and abs(nums[4] - nums[8]) <= valueDiff and abs(nums[5] - nums[8]) <= valueDiff and abs(nums[6] - nums[8]) <= valueDiff and abs(nums[7] - nums[8]) <= valueDiff\n        \n        # if len(nums) == 10:\n        #     return abs(nums[0] - nums[9]) <= valueDiff and abs(nums[1] - nums[9]) <= valueDiff and abs(nums[2] - nums[9]) <= valueDiff and abs(nums[3] - nums[9]) <= valueDiff and abs(nums[4] - nums[9]) <= valueDiff and abs(nums[5] - nums[9]) <= valueDiff and abs(nums[6] - nums[9]) <= valueDiff and abs(nums[7] - nums[9]) <="}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        curr_count = 0\n        \n        for num in nums:\n            if num == 1:\n                curr_count += 1\n            else:\n                max_count = max(max_count, curr_count)\n                curr_count = 0\n        \n        return max(max_count, curr_count)"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        return left + right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. convert to int\n        # 2. add\n        # 3. convert back to str\n        \n        # 1. convert to int\n        num1 = int(num1)\n        num2 = int(num2)\n        \n        # 2. add\n        sum = num1 + num2\n        \n        # 3. convert back to str\n        return str(sum)"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack.append(stack.pop() * num)\n                elif sign == '/':\n                    stack.append(int(stack.pop() / num))\n                sign = s[i]\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O("}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '{':\n                stack.append('}')\n            elif i == '[':\n                stack.append(']')\n            elif stack and stack[-1] == i:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if no such index exists, it means the array is sorted in descending order\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first index j such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the subarray nums[i+1:]\n        nums[i+1:] = nums[len(nums) - 1: i:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        \n        if len(nums) == 3:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[0] == nums[2]\n        \n        if len(nums) == 4:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[0] == nums[3]\n        \n        if len(nums) == 5:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[0] == nums[4]\n        \n        if len(nums) == 6:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[0] == nums[5]\n        \n        if len(nums) == 7:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[0] == nums[6]\n        \n        if len(nums) == 8:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[0] == nums[7]\n        \n        if len(nums) == 9:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[0] == nums[8]\n        \n        if len(nums) == 10:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[0] == nums[9]\n        \n        if len(nums) == 11:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[9] == nums[10] or nums[0] == nums[10]\n        \n        if len(nums) == 12:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 0:\n            return 0\n        \n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        \n        res = 0\n        for i in range(0, n, 2):\n            if couples[i][0] / 2 != couples[i][1] / 2:\n                res += 1\n                j = row.index(couples[i][0] + 1)\n                row[i], row[j] = row[j], row[i]\n        return res"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if not s1:\n            return s2 == s3\n        \n        if not s2:\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        firstRow = set(\"qwertyuiop\")\n        secondRow = set(\"asdfghjkl\")\n        thirdRow = set(\"zxcvbnm\")\n        \n        res = []\n        for word in words:\n            if word[0] in firstRow:\n                row = firstRow\n            elif word[0] in secondRow:\n                row = secondRow\n            else:\n                row = thirdRow\n            for c in word:\n                if c not in row:\n                    break\n            else:\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        for _ in range(left - 1):\n            prev = curr\n            curr = curr.next\n        \n        tail = curr\n        \n        for _ in range(right - left):\n            tmp = curr.next\n            curr.next = tmp.next\n            tmp.next = prev.next\n            prev.next = tmp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character, then the longest palindrome is itself\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is empty, then the longest palindrome is empty\n        # if the string has only one character,"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        # create a hashmap for the characters in t\n        # and their counts\n        count_t = collections.Counter(t)\n        \n        # create a hashmap for the characters in s\n        # and their counts\n        count_s = collections.Counter()\n        \n        # create a window of s\n        # that contains all the characters in t\n        # and their counts\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        # initialize the window to be empty\n        # and the number of characters in the window\n        # to be 0\n        #"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i] == distance[i - 3] and distance[i - 1] == distance[i - 4]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 6 and distance[i] + distance[i - 5] >= distance[i - 2] and distance[i - 2] == distance[i - 4] and distance[i - 1] == distance[i - 3]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            while curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the number of each letter\n        # 2. if the number is odd, add 1 to the result\n        # 3. if the number is even, add it to the result\n        # 4. return the result\n        \n        # 1.\n        letter_count = {}\n        for letter in s:\n            if letter not in letter_count:\n                letter_count[letter] = 1\n            else:\n                letter_count[letter] += 1\n        \n        # 2.\n        result = 0\n        for letter in letter_count:\n            if letter_count[letter] % 2 == 1:\n                result += 1\n        \n        # 3.\n        return result + (1 if result < len(s) else 0)"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder.pop())\n        idx = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[idx+1:], postorder)\n        root.left = self.buildTree(inorder[:idx], postorder)\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        \n        # sort the trees by height\n        trees.sort()\n        \n        # start from the top left corner\n        steps = 0\n        curr_pos = (0, 0)\n        for tree, i, j in trees:\n            steps += self.bfs(forest, curr_pos, (i, j))\n            if steps == -1:\n                return -1\n            curr_pos = (i, j)\n        \n        return steps\n    \n    def bfs(self, forest, start, end):\n        \"\"\"\n        :type forest: List[List[int]]\n        :type start: Tuple[int, int]\n        :type end: Tuple[int, int]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        q = collections.deque([start])\n        visited = set([start])\n        steps = 0\n        while q:\n            for _ in range(len(q)):\n                curr_pos = q.popleft()\n                if curr_pos == end:\n                    return steps\n                for nxt_pos in [(curr_pos[0] - 1, curr_pos[1]), (curr_pos[0] + 1, curr_pos[1]), (curr_pos[0], curr_pos[1] - 1), (curr_pos[0], curr_pos[1] + 1)]:\n                    if 0 <= nxt_pos[0] < len(forest) and 0 <= nxt_pos[1] < len(forest[0]) and forest[nxt_pos[0]][nxt_pos[1]] > 1 and nxt_pos not in visited:\n                        q.append(nxt_pos)\n                        visited.add(nxt_pos)\n            steps += 1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. use a hashmap to store the count of range sum\n        # 5. return the count\n        \n        # 1. calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. use two pointers to find the range sum\n        count = 0\n        for i in range(n):\n            # find the range sum\n            l = bisect_left(prefix_sum, lower + prefix_sum[i])\n            r = bisect_right(prefix_sum, upper + prefix_sum[i])\n            count += r - l\n        \n        return count"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # return int((-1 + sqrt(1 + 8 * n)) / 2)\n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        \n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2^n - 1 is the max number we can generate\n        # 2. 2^n - 1 is the max number we can generate\n        # 3. 2^n - 1 is the max number we can generate\n        # 4. 2^n - 1 is the max number we can generate\n        # 5. 2^n - 1 is the max number we can generate\n        # 6. 2^n - 1 is the max number we can generate\n        # 7. 2^n - 1 is the max number we can generate\n        # 8. 2^n - 1 is the max number we can generate\n        # 9. 2^n - 1 is the max number we can generate\n        # 10. 2^n - 1 is the max number we can generate\n        # 11. 2^n - 1 is the max number we can generate\n        # 12. 2^n - 1 is the max number we can generate\n        # 13. 2^n - 1 is the max number we can generate\n        # 14. 2^n - 1 is the max number we can generate\n        # 15. 2^n - 1 is the max number we can generate\n        # 16. 2^n - 1 is the max number we can generate\n        # 17. 2^n - 1 is the max number we can generate\n        # 18. 2^n - 1 is the max number we can generate\n        # 19. 2^n - 1 is the max number we can generate\n        # 20. 2^n - 1 is the max number we can generate\n        # 21. 2^n - 1 is the max number we can generate\n        # 22. 2^n - 1 is the max number we can generate\n        # 23. 2^n - 1 is the max number we can generate\n        # 24. 2^n - 1 is the max number we can generate\n        # 25. 2^n - 1 is the max number we can generate\n        # 26. 2^n - 1 is the max number we can generate\n        # 27. 2^n - 1 is the max number we can generate\n        # 28. 2^n - 1 is the max number we can generate\n        # 29. 2^n - 1 is the max number we can generate\n        # 30. 2^n - 1 is the max number we can generate\n        # 31. 2^n - 1 is the max number we can generate\n        # 32. 2^n - 1 is the max number we can generate\n        # 33. 2^n - 1 is the max number we can generate\n        # 34. 2^n - 1 is the max number we can generate\n        # 35. 2^n - 1 is the max number we can generate\n        # 36. 2^n - 1 is the max number we can generate\n        # 37. 2^n - 1 is the max number we can generate\n        # 38. 2^n - 1 is the max number we can generate\n        # 39. 2^n - 1 is the max number we can generate\n        # 40. 2^n - 1 is the max number we can generate\n        # 41. 2^n - 1 is the max number we can generate\n        # 42. 2^n - 1 is the max number we can generate\n        # 43. 2^n - 1 is the max number we can generate\n        # 44. 2^n - 1 is the max number we can generate\n        # 45. 2^n - 1 is the max number we can generate\n        # 46. 2^n - 1 is the max number we can generate\n        # 47. 2^n - 1 is the max number we can generate\n        # 48. 2^n - 1 is the max number we can generate\n        # 49. 2^n - 1 is the max number we can generate\n        # 5"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return helper(node.right, node.val, upper) and helper(node.left, lower, node.val)\n        \n        return helper(root)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is smaller than the first element, insert it at the beginning\n        if newInterval[0] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if the new interval is larger than the last element, insert it at the end\n        if newInterval[1] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        # if the new interval overlaps with the first element, merge it with the first element\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        \n        # if the new interval overlaps with the last element, merge it with the last element\n        if newInterval[0] >= intervals[-1][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals[:-1] + [newInterval]\n        \n        # if the new interval overlaps with the middle elements, merge it with the middle elements\n        for i in range(len(intervals) - 1):\n            if newInterval[0] <= intervals[i][1] and newInterval[1] >= intervals[i + 1][0]:\n                return intervals[:i + 1] + [(min(intervals[i][0], newInterval[0]), max(intervals[i + 1][1], newInterval[1]))] + intervals[i + 2:]\n        \n        # if the new interval does not overlap with any element, insert it at the end\n        return intervals + [newInterval]"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of each list\n        # 2. use min heap to store the max of each list\n        # 3. use max heap to store the min of each list\n        # 4. compare the max of the min heap with the min of the max heap\n        # 5. if the max of the min heap is greater than the min of the max heap, update the min range\n        # 6. if the max of the min heap is greater than the min of the max heap, update the max of the min heap\n        # 7. if the max of the min heap is equal to the min of the max heap, return the min range\n        \n        min_val = float('inf')\n        max_val = float('-inf')\n        min_heap = []\n        max_heap = []\n        for i in range(len(nums)):\n            heapq.heappush(min_heap, (nums[i][0], i, 0))\n            heapq.heappush(max_heap, (-nums[i][0], i, 0))\n            min_val = min(min_val, nums[i][0])\n            max_val = max(max_val, nums[i][0])\n        \n        min_range = [min_val, max_val]\n        while True:\n            min_val, i, j = heapq.heappop(min_heap)\n            if max_val - min_val < max_val - min_val:\n                min_range = [min_val, max_val]\n            if j + 1 == len(nums[i]):\n                break\n            heapq.heappush(min_heap, (nums[i][j + 1], i, j + 1))\n            heapq.heappush(max_heap, (-nums[i][j + 1], i, j + 1))\n            max_val = max(max_val, nums[i][j + 1])\n        \n        return min_range"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 pig can be fed 10^x times in 10^y minutes\n        # 2. 1 pig can be fed 10^x times in 10^(y+1) minutes\n        # 3. 1 pig can be fed 10^x times in 10^(y+2) minutes\n        # 4. 1 pig can be fed 10^x times in 10^(y+3) minutes\n        # 5. 1 pig can be fed 10^x times in 10^(y+4) minutes\n        # 6. 1 pig can be fed 10^x times in 10^(y+5) minutes\n        # 7. 1 pig can be fed 10^x times in 10^(y+6) minutes\n        # 8. 1 pig can be fed 10^x times in 10^(y+7) minutes\n        # 9. 1 pig can be fed 10^x times in 10^(y+8) minutes\n        # 10. 1 pig can be fed 10^x times in 10^(y+9) minutes\n        # 11. 1 pig can be fed 10^x times in 10^(y+10) minutes\n        # 12. 1 pig can be fed 10^x times in 10^(y+11) minutes\n        # 13. 1 pig can be fed 10^x times in 10^(y+12) minutes\n        # 14. 1 pig can be fed 10^x times in 10^(y+13) minutes\n        # 15. 1 pig can be fed 10^x times in 10^(y+14) minutes\n        # 16. 1 pig can be fed 10^x times in 10^(y+15) minutes\n        # 17. 1 pig can be fed 10^x times in 10^(y+16) minutes\n        # 18. 1 pig can be fed 10^x times in 10^(y+17) minutes\n        # 19. 1 pig can be fed 10^x times in 10^(y+18) minutes\n        # 20. 1 pig can be fed 10^x times in 10^(y+19) minutes\n        # 21. 1 pig can be fed 10^x times in 10^(y+20) minutes\n        # 22. 1 pig can be fed 10^x times in 10^(y+21) minutes\n        # 23. 1 pig can be fed 10^x times in 10^(y+22) minutes\n        # 24. 1 pig can be fed 10^x times in 10^(y+23) minutes\n        # 25. 1 pig can be fed 10^x times in 10^(y+24) minutes\n        # 26. 1 pig can be fed 10^x times in 10^(y+25) minutes\n        # 27. 1 pig can be fed 10^x times in 10^(y+26) minutes\n        # 28. 1 pig can be fed 10^x times in 10^(y+27) minutes\n        # 29. 1 pig can be fed 10^x times in 10^(y+28) minutes\n        # 30. 1 pig can be fed 10^x times in 10^(y+29) minutes\n        # 31. 1 pig can be fed 10^x times in 10^(y+30) minutes\n        # 32. 1 pig can be fed 10^x times in 10^(y+31) minutes\n        # 33. 1 pig can be fed 10^x times in 10^(y+32) minutes\n        # 34. 1 pig can be fed 10^x times in 10^("}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        seen = set([(0, 0)])\n        ans = 0\n        \n        while heap:\n            t, i, j = heapq.heappop(heap)\n            ans = max(ans, t)\n            if i == j == n - 1:\n                return ans\n            for ni, nj in ((i, j + 1), (i, j - 1), (i + 1, j), (i - 1, j)):\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in seen:\n                    heapq.heappush(heap, (grid[ni][nj], ni, nj))\n                    seen.add((ni, nj))"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the rest of the array\n        # 4. For each cell, add the values of the cells above and to the left\n        # 5. Return the value at the bottom right corner\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        \n        return dp[m - 1][n - 1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        num1_len = len(num1)\n        num2_len = len(num2)\n        \n        res = [0] * (num1_len + num2_len)\n        \n        for i in range(num1_len - 1, -1, -1):\n            for j in range(num2_len - 1, -1, -1):\n                mul = int(num1[i]) * int(num2[j])\n                p1 = i + j\n                p2 = i + j + 1\n                \n                mul += res[p2]\n                res[p1] += mul // 10\n                res[p2] += mul % 10\n                \n        i = 0\n        while i < len(res) - 1 and res[i] == 0:\n            i += 1\n            \n        return ''.join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max profit from left to right\n        # 2. find the max profit from right to left\n        # 3. return the max of the two\n        \n        if not prices:\n            return 0\n        \n        max_profit = 0\n        min_price = prices[0]\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, nums, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            self.dfs(nums, target - nums[i], i + 1, path + [nums[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res.append(root.val)\n                root = root.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            cnt = 0\n            for c in s:\n                if c == '(':\n                    cnt += 1\n                elif c == ')':\n                    if cnt > 0:\n                        cnt -= 1\n                    else:\n                        return False\n            return cnt == 0\n        \n        left, right = 0, len(s) - 1\n        while left < right and s[left] == '(':\n            left += 1\n        while right > left and s[right] == ')':\n            right -= 1\n        \n        q = collections.deque([s])\n        seen = {s}\n        while q:\n            s = q.popleft()\n            if isValid(s):\n                return [s]\n            for i in range(left, right + 1):\n                if s[i] == '(' or s[i] == ')':\n                    t = s[:i] + s[i + 1:]\n                    if t not in seen:\n                        q.append(t)\n                        seen.add(t)\n        return list(seen)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # if lists is empty, return None\n        if not lists:\n            return None\n        \n        # if there is only one list, return it\n        if len(lists) == 1:\n            return lists[0]\n        \n        # if there are more than one list, merge them\n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i+1] if i+1 < len(lists) else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        \n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode()\n        \n        # create a pointer to the dummy node\n        curr = dummy\n        \n        # while both lists have nodes, merge them\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        # if l1 is longer than l2, add the remaining nodes to the merged list\n        if l1:\n            curr.next = l1\n        else:\n            curr.next = l2\n        \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # build a reverse lookup table\n        reverse_lookup = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # build a result list\n        result = []\n        \n        # iterate over all words\n        for i, word in enumerate(words):\n            # check if the current word is a palindrome\n            if word in reverse_lookup:\n                # if it is, check if the reverse lookup table contains the empty string\n                if reverse_lookup[\"\"] != i:\n                    # if it does, add the pair to the result list\n                    result.append([i, reverse_lookup[\"\"]])\n            # check if the reverse of the current word is a palindrome\n            for j in range(len(word) + 1):\n                # if it is, check if the reverse lookup table contains the reversed word\n                if word[j:] in reverse_lookup:\n                    # if it does, add the pair to the result list\n                    result.append([i, reverse_lookup[word[j:]]])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        def spread(i, j):\n            if isInfected[i][j] == 1:\n                return 0\n            isInfected[i][j] = 1\n            return 1 + spread(i - 1, j) + spread(i + 1, j) + spread(i, j - 1) + spread(i, j + 1)\n        \n        def build(i, j):\n            if isInfected[i][j] == 1:\n                return 0\n            isInfected[i][j] = 2\n            return 1 + build(i - 1, j) + build(i + 1, j) + build(i, j - 1) + build(i, j + 1)\n        \n        ans = 0\n        while True:\n            infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.add((i, j))\n            if not infected:\n                break\n            infected = list(infected)\n            for i, j in infected:\n                isInfected[i][j] = 0\n            ans += spread(i, j)\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        ans += build(i, j)\n        return ans"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        max_len = 1\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += n // (i * 10) * i + max(0, min(i * 10 - 1, n % (i * 10)))\n            i *= 10\n        \n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1):\n                if dp[j] and s[j:i + 1] in wordDict:\n                    dp[i + 1] = True\n        \n        if dp[-1]:\n            return [s[:i + 1] for i in range(len(s)) if dp[i + 1]]\n        else:\n            return []"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def gen_hour(n):\n            if n == 0:\n                return [\"\"]\n            if n == 1:\n                return [\"1:00\", \"2:00\", \"4:00\", \"8:00\"]\n            if n == 2:\n                return [\"10:00\", \"12:00\", \"16:00\", \"32:00\"]\n            if n == 3:\n                return [\"11:00\", \"13:00\", \"15:00\", \"19:00\", \"33:00\"]\n            if n == 4:\n                return [\"111:00\", \"113:00\", \"115:00\", \"119:00\", \"133:00\", \"135:00\", \"139:00\", \"153:00\", \"155:00\", \"159:00\", \"193:00\", \"195:00\", \"199:00\"]\n            if n == 5:\n                return [\"1111:00\", \"1113:00\", \"1115:00\", \"1119:00\", \"1133:00\", \"1135:00\", \"1139:00\", \"1153:00\", \"1155:00\", \"1159:00\", \"1193:00\", \"1195:00\", \"1199:00\", \"1333:00\", \"1335:00\", \"1339:00\", \"1353:00\", \"1355:00\", \"1359:00\", \"1393:00\", \"1395:00\", \"1399:00\", \"1533:00\", \"1535:00\", \"1539:00\", \"1553:00\", \"1555:00\", \"1559:00\", \"1593:00\", \"1595:00\", \"1599:00\", \"1933:00\", \"1935:00\", \"1939:00\", \"1953:00\", \"1955:00\", \"1959:00\", \"1993:00\", \"1995:00\", \"1999:00\"]\n            if n == 6:\n                return [\"11111:00\", \"11113:00\", \"11115:00\", \"11119:00\", \"11133:00\", \"11135:00\", \"11139:00\", \"11153:00\", \"11155:00\", \"11159:00\", \"11193:00\", \"11195:00\", \"11199:00\", \"11333:00\", \"11335:00\", \"11339:00\", \"11353:00\", \"11355:00\", \"11359:00\", \"11393:00\", \"11395:00\", \"11399:00\", \"11533:00\", \"11535:00\", \"11539:00\", \"11553:00\", \"11555:00\", \"11559:00\", \"11593:00\", \"11595:00\", \"11599:00\", \"11933:00\", \"11935:00\", \"11939:00\", \"11953:00\", \"11955:00\", \"11959:00\", \"11993:00\", \"11995:00\", \"1"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1, 1]]\n        \n        res = [[1], [1, 1]]\n        \n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, len(res[-1])):\n                row.append(res[-1][j] + res[-1][j-1])\n            row.append(1)\n            res.append(row)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if (i, j) not in seen:\n                ans += h\n                seen.add((i, j))\n                for ni, nj in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n                    if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                        heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. find the median\n        # 3. return the median\n        \n        # 1. sort the array\n        nums.sort()\n        \n        # 2. find the median\n        if len(nums) % 2 == 1:\n            return float(nums[len(nums) // 2])\n        else:\n            return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2.0"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the new tail\n        new_tail = head\n        for i in range(length - k - 1):\n            new_tail = new_tail.next\n        \n        # find the new head\n        new_head = new_tail.next\n        \n        # break the list\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                sums.sort()\n                i, j = 0, m - 1\n                while i < m:\n                    while j >= 0 and sums[i] + sums[j] > k:\n                        j -= 1\n                    res = max(res, sums[i] + sums[j])\n                    i += 1\n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend > 0 and divisor > 0:\n            return min(2**31-1, max(-2**31, dividend//divisor))\n        \n        if dividend > 0 and divisor < 0:\n            return max(-2**31, -dividend//divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return max(-2**31, dividend//divisor)\n        \n        if dividend < 0 and divisor < 0:\n            return min(2**31-1, dividend//divisor)"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.00001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            new_a, new_b = a + b, a - b\n                        elif op == '-':\n                            new_a, new_b = a - b, b - a\n                        elif op == '*':\n                            new_a, new_b = a * b, a / b\n                        else:\n                            new_a, new_b = b / a, a / b\n                        if backtrack([new_a, new_b] + cards[0:i] + cards[i + 1:], target):\n                            return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return true if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if first character matches\n        first_match = bool(s) and p[0] in (s[0], '?')\n        \n        # if p is longer than s, return false\n        if len(p) > 1 and p[1] == '*':\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*':\n            return self.isMatch(s[1:], p)\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s[0]:\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s[0]:\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s[0]:\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s[0]:\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s[0]:\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s[0]:\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s[0]:\n            return self.isMatch(s, p[2:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is longer than s, return false\n        if len(s) > 1 and p[1] == '*' and p[0] != s"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100229/Python-O(n)-solution-with-explanation\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in sorted(tickets):\n            graph[from_city].append(to_city)\n            \n        # dfs\n        res = []\n        def dfs(from_city):\n            # if there is no more city to visit, add to the result\n            if len(graph[from_city]) == 0:\n                res.append(from_city)\n                return\n            # visit all the next city\n            for i in range(len(graph[from_city])):\n                next_city = graph[from_city][i]\n                # remove the next city from the graph\n                graph[from_city].pop(i)\n                dfs(next_city)\n                # add the next city back to the graph\n                graph[from_city].insert(i, next_city)\n                \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # iterate over buildings\n        for building in buildings:\n            # if building is ending, remove it from result\n            if building[1] > 0:\n                self.remove(result, building[1])\n            # add new building to result\n            self.add(result, building[2], building[1])\n        \n        # return result\n        return result[1:]\n    \n    def add(self, result, height, x):\n        # if height is greater than last building in result\n        if height > result[-1][1]:\n            # add new building to result\n            result.append([x, height])\n        # if height is equal to last building in result\n        elif height == result[-1][1]:\n            # if x is greater than last building in result\n            if x > result[-1][0]:\n                # remove last building from result\n                result.pop()\n                # add new building to result\n                result.append([x, height])\n    \n    def remove(self, result, x):\n        # iterate over result\n        for i in range(len(result) - 1, -1, -1):\n            # if x is greater than last building in result\n            if x > result[i][0]:\n                # remove last building from result\n                result.pop()\n            # if x is equal to last building in result\n            else:\n                # break loop\n                break"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        \n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        \n        def helper(num):\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + (\" \" + helper(num % 10))\n            if num < 1000:\n                return ones[num // 100] + \" Hundred\" + (\" \" + helper(num % 100))\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand\" + (\" \" + helper(num % 1000))\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million\" + (\" \" + helper(num % 1000000))\n            return helper(num // 1000000000) + \" Billion\" + (\" \" + helper(num % 1000000000))\n        \n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] -"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the node with two parents\n        # 2. find the edge that creates a cycle\n        # 3. find the edge that creates a cycle\n        # 4. return the edge that creates a cycle\n        \n        # 1. find the node with two parents\n        parent_map = {}\n        for edge in edges:\n            if edge[0] in parent_map:\n                return [parent_map[edge[0]], edge[1]]\n            else:\n                parent_map[edge[1]] = edge[0]\n        \n        # 2. find the edge that creates a cycle\n        # 3. find the edge that creates a cycle\n        # 4. return the edge that creates a cycle\n        for edge in edges:\n            if edge[0] in parent_map:\n                continue\n            if edge[1] in parent_map:\n                return [parent_map[edge[1]], edge[1]]\n            parent_map[edge[1]] = edge[0]\n        \n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                res.append(nums[:])\n            else:\n                for i in range(first, n):\n                    if nums[i] not in used:\n                        used.add(nums[i])\n                        nums[first], nums[i] = nums[i], nums[first]\n                        backtrack(first + 1)\n                        nums[first], nums[i] = nums[i], nums[first]\n        \n        n = len(nums)\n        res = []\n        nums.sort()\n        used = set()\n        backtrack()\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 = 0\n        ## 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 = 1\n        ## 1 ^ 1 ^ 0 = 0\n        ## 0 ^ 0 ^ 1 = 1\n        ## 1 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 ^ 0 = 1\n        ## 1 ^ 1 ^ 1 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 1 ^ 0 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 1 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        ## 1 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        ## 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        ## 1 ^ 1 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 1 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 1 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        ## 1 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 1 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        ## 1 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 1 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        ## 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        ## 1 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        ## 1 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        ## 1 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(i + 1):\n                for j2 in range(i + 1):\n                    if j1 == j2 and j1 == 0:\n                        continue\n                    if j1 == i:\n                        j1 -= 1\n                    if j2 == i:\n                        j2 -= 1\n                    if j1 < 0 or j1 >= n or j2 < 0 or j2 >= n:\n                        continue\n                    if grid[i][j1] == -1 or grid[i][j2] == -1:\n                        continue\n                    dp[i][j1][j2] = dp[i - 1][j1][j2]\n                    if j1 != j2:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1 - 1][j2 - 1] + grid[i][j1] + grid[i][j2])\n                    else:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1 - 1][j2 - 1] + grid[i][j1])\n        return max(dp[n - 1][j1][j2] for j1 in range(n) for j2 in range(n) if grid[n - 1][j1] * grid[n - 1][j2] > 0)"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        prev = '1'\n        for i in range(2, n+1):\n            curr = ''\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max sum of the subarray\n        # find the min sum of the subarray\n        # binary search the max sum\n        # binary search the min sum\n        \n        # find the max sum of the subarray\n        def getMaxSum(nums, k):\n            maxSum = 0\n            curSum = 0\n            for num in nums:\n                if curSum + num > maxSum:\n                    maxSum = curSum + num\n                    if k == 1:\n                        return maxSum\n                else:\n                    curSum = num\n            return maxSum\n        \n        # find the min sum of the subarray\n        def getMinSum(nums, k):\n            minSum = sum(nums)\n            curSum = 0\n            for num in nums:\n                if curSum + num < minSum:\n                    minSum = curSum + num\n                    if k == 1:\n                        return minSum\n                else:\n                    curSum = num\n            return minSum\n        \n        # binary search the max sum\n        maxSum = getMaxSum(nums, k)\n        minSum = getMinSum(nums, k)\n        while minSum < maxSum:\n            mid = (maxSum + minSum) // 2\n            if getMaxSum(nums, k) > mid:\n                maxSum = mid\n            else:\n                minSum = mid + 1\n        return minSum"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if the pivot is not found, the target is not in the array\n        if pivot == -1:\n            return -1\n        \n        # if the target is in the first half of the array, search in the first half\n        if nums[pivot] == target:\n            return pivot\n        \n        # if the target is in the second half of the array, search in the second half\n        if nums[0] <= target:\n            return self.binary_search(nums, 0, pivot - 1, target)\n        else:\n            return self.binary_search(nums, pivot + 1, len(nums) - 1, target)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left if nums[left] > nums[0] else -1\n    \n    def binary_search(self, nums, left, right, target):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        def backtrack(combination, next_digits):\n            # base case: no more digits to check\n            if not next_digits:\n                # completed combination\n                output.append(combination)\n                return\n            \n            # get the next digit\n            first, rest = next_digits[0], next_digits[1:]\n            \n            # recurse using a fresh copy of the digit_to_letters map\n            for letter in digit_to_letters[first]:\n                backtrack(combination + letter, rest)\n        \n        output = []\n        backtrack(\"\", digits)\n        return output"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of n\n        length = len(n)\n        \n        # 2. get the left and right part of n\n        left = n[:length//2]\n        right = n[length//2:]\n        \n        # 3. get the list of all possible palindromes\n        palindromes = [int(left + str(i) + right) for i in [int(left), int(right) - 1, int(right) + 1]]\n        \n        # 4. get the closest palindrome\n        closest = min(palindromes, key=lambda x: abs(x - int(n)))\n        \n        # 5. return the closest palindrome\n        return str(closest)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            for i in range(right, left - 1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            \n            for i in range(bottom, top - 1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the variables to keep track of the maximum and minimum product seen so far\n        max_product = nums[0]\n        min_product = nums[0]\n        result = max_product\n        \n        # Iterate through the array, updating the maximum and minimum product seen so far\n        for num in nums[1:]:\n            if num < 0:\n                max_product, min_product = min(num, min_product * num), max(num, max_product * num)\n            else:\n                max_product, min_product = max(num, max_product * num), min(num, min_product * num)\n            result = max(result, max_product)\n        \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        stone_set = set(stones)\n        \n        dp = {0: set()}\n        \n        for stone in stones:\n            for prev in dp.get(stone - 1, set()):\n                for jump in range(prev + 1, prev + 2 + stone - stone):\n                    if jump in stone_set:\n                        if jump == stones[-1]:\n                            return True\n                        dp.setdefault(jump, set()).add(jump - stone)\n        \n        return False"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score list\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a hashmap to store the score and its index\n        score_map = {}\n        for i, s in enumerate(score_sorted):\n            score_map[s] = i\n        \n        # create a list to store the result\n        result = [None] * len(score)\n        \n        # assign the rank to the score\n        for i, s in enumerate(score):\n            if i == 0:\n                result[score_map[s]] = \"Gold Medal\"\n            elif i == 1:\n                result[score_map[s]] = \"Silver Medal\"\n            elif i == 2:\n                result[score_map[s]] = \"Bronze Medal\"\n            else:\n                result[score_map[s]] = str(i + 1)\n        \n        return result"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        start = 0\n        end = 0\n        char_map = {}\n        \n        while end < len(s):\n            if s[end] in char_map:\n                start = max(start, char_map[s[end]] + 1)\n            max_len = max(max_len, end - start + 1)\n            char_map[s[end]] = end\n            end += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = collections.Counter(words)\n        res = []\n        \n        for i in range(word_len):\n            left = i\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s) - word_len + 1, word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                else:\n                    left = j + word_len\n                    word_dict_copy = word_dict.copy()\n                if not word_dict_copy:\n                    res.append(left)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        res = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                res += 1\n        \n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                curr.next, curr.next.next, prev.next = curr.next.next, curr.next, curr\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            l, r = i+1, len(nums)-1\n            \n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                \n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i, j = left, mid\n            cnt = 0\n            while i < mid and j < right:\n                if nums[i] > 2 * nums[j]:\n                    cnt += mid - i\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right] = sorted(nums[left:right])\n            return cnt\n        \n        def mergeSort(nums, left, right):\n            if left + 1 >= right:\n                return 0\n            mid = (left + right) // 2\n            return mergeSort(nums, left, mid) + mergeSort(nums, mid, right) + merge(nums, left, mid, right)\n        \n        return mergeSort(nums, 0, len(nums))"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                if v1[i] > v2[i]:\n                    return 1\n                elif v1[i] < v2[i]:\n                    return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # greedy\n        # max heap\n        heap = []\n        \n        # sum of durations\n        total = 0\n        \n        for duration, end in courses:\n            # add to heap\n            heapq.heappush(heap, -duration)\n            \n            # add duration to total\n            total += duration\n            \n            # if total exceeds end date, remove from heap\n            if total > end:\n                total += heapq.heappop(heap)\n                \n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while True:\n            tail = prev\n            for i in range(k):\n                if not tail:\n                    return dummy.next\n                tail = tail.next\n            head = prev.next\n            tail = head\n            for i in range(k):\n                temp = head.next\n                head.next = head\n                head = temp\n            prev.next = head\n            prev = tail\n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s) // 2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s) // i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR all the numbers again\n        # 3. The remaining number will be the answer\n        a = 0\n        for num in nums:\n            a ^= num\n        return a"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict for each sticker\n        # 2. build a dict for each letter in target\n        # 3. iterate through target, for each letter, find the sticker with the most letters\n        # 4. add the sticker to the target\n        # 5. repeat until target is empty\n        # 6. return the number of stickers used\n        \n        # build a dict for each sticker\n        sticker_dict = {}\n        for sticker in stickers:\n            sticker_dict[sticker] = {}\n            for letter in sticker:\n                sticker_dict[sticker][letter] = sticker_dict[sticker].get(letter, 0) + 1\n        \n        # build a dict for each letter in target\n        target_dict = {}\n        for letter in target:\n            target_dict[letter] = target_dict.get(letter, 0) + 1\n        \n        # iterate through target, for each letter, find the sticker with the most letters\n        # add the sticker to the target\n        # repeat until target is empty\n        # return the number of stickers used\n        target_len = len(target)\n        sticker_len = len(sticker_dict)\n        sticker_count = 0\n        while target_len > 0:\n            sticker_count += 1\n            new_target_dict = {}\n            for letter in target_dict:\n                new_target_dict[letter] = new_target_dict.get(letter, 0)\n                for sticker in sticker_dict:\n                    if target_dict[letter] >= sticker_dict[sticker][letter]:\n                        new_target_dict[letter] -= sticker_dict[sticker][letter]\n            target_len = sum(new_target_dict.values())\n            target_dict = new_target_dict\n        return sticker_count if target_len == 0 else -1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = min(dp[i][j - 1] + 1, dp[j][j])\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n        \n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a dictionary to map roman numerals to their integer values\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        \n        # Initialize the result variable with the value of the last roman numeral\n        result = roman_dict[s[-1]]\n        \n        # Iterate through the string in reverse order\n        for i in range(len(s) - 2, -1, -1):\n            # If the current roman numeral is less than the next one, subtract it from the result\n            if roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            # Otherwise, add it to the result\n            else:\n                result += roman_dict[s[i]]\n        \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = []\n        res = []\n        for i in range(len(nums)):\n            while q and q[0] <= i - k:\n                q.pop(0)\n            while q and nums[q[-1]] < nums[i]:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        total = m + n\n        half = (total + 1) // 2\n        \n        l, r = 0, m - 1\n        while True:\n            i = (l + r) // 2\n            j = half - i - 2\n            \n            if i >= 0 and nums1[i] < nums2[j]:\n                l = i + 1\n            elif j >= 0 and nums2[j] < nums1[i]:\n                r = i - 1\n            else:\n                if i == m - 1:\n                    max_left = nums2[j + 1]\n                elif j == n - 1:\n                    max_left = nums1[i + 1]\n                else:\n                    max_left = max(nums1[i], nums2[j + 1])\n                \n                if i == 0:\n                    min_right = nums2[j]\n                elif j == 0:\n                    min_right = nums1[i]\n                else:\n                    min_right = min(nums1[i - 1], nums2[j - 1])\n                \n                if total % 2 == 1:\n                    return max_left\n                else:\n                    return (max_left + min_right) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     if nums[mid] < nums[mid - 1]:\n        #         return nums[mid]\n        #     if nums[mid] > nums[0]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            if nums[mid] > nums[0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val, path + [root.val])\n            right = dfs(root.right, targetSum - root.val, path + [root.val])\n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L >= W\n        # 3. L - W < W\n        # 4. L * W = area\n        # 5. L = area / W\n        # 6. L = sqrt(area)\n        # 7. L = area ** 0.5\n        # 8. L = area ** 0.5\n        # 9. L = area ** 0.5\n        # 10. L = area ** 0.5\n        # 11. L = area ** 0.5\n        # 12. L = area ** 0.5\n        # 13. L = area ** 0.5\n        # 14. L = area ** 0.5\n        # 15. L = area ** 0.5\n        # 16. L = area ** 0.5\n        # 17. L = area ** 0.5\n        # 18. L = area ** 0.5\n        # 19. L = area ** 0.5\n        # 20. L = area ** 0.5\n        # 21. L = area ** 0.5\n        # 22. L = area ** 0.5\n        # 23. L = area ** 0.5\n        # 24. L = area ** 0.5\n        # 25. L = area ** 0.5\n        # 26. L = area ** 0.5\n        # 27. L = area ** 0.5\n        # 28. L = area ** 0.5\n        # 29. L = area ** 0.5\n        # 30. L = area ** 0.5\n        # 31. L = area ** 0.5\n        # 32. L = area ** 0.5\n        # 33. L = area ** 0.5\n        # 34. L = area ** 0.5\n        # 35. L = area ** 0.5\n        # 36. L = area ** 0.5\n        # 37. L = area ** 0.5\n        # 38. L = area ** 0.5\n        # 39. L = area ** 0.5\n        # 40. L = area ** 0.5\n        # 41. L = area ** 0.5\n        # 42. L = area ** 0.5\n        # 43. L = area ** 0.5\n        # 44. L = area ** 0.5\n        # 45. L = area ** 0.5\n        # 46. L = area ** 0.5\n        # 47. L = area ** 0.5\n        # 48. L = area ** 0.5\n        # 49. L = area ** 0.5\n        # 50. L = area ** 0.5\n        # 51. L = area ** 0.5\n        # 52. L = area ** 0.5\n        # 53. L = area ** 0.5\n        # 54. L = area ** 0.5\n        # 55. L = area ** 0.5\n        # 56. L = area ** 0.5\n        # 57. L = area ** 0.5\n        # 58. L = area ** 0.5\n        # 59. L = area ** 0.5\n        # 60. L = area ** 0.5\n        # 61. L = area ** 0.5\n        # 62. L = area ** 0.5\n        # 63. L = area ** 0.5\n        # 64. L = area ** 0.5\n        # 65. L = area ** 0.5\n        # 66. L = area ** 0.5\n        # 67. L = area ** 0.5\n        # 68. L = area ** 0.5\n        # 69. L = area ** 0.5\n        # 70. L = area ** 0.5"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # build queue and visited\n        queue = collections.deque([beginWord])\n        visited = {beginWord: None}\n        \n        # BFS\n        while queue:\n            curr = queue.popleft()\n            if curr == endWord:\n                break\n            for i in range(len(curr)):\n                for j in range(ord('a'), ord('z') + 1):\n                    neighbor = curr[:i] + chr(j) + curr[i+1:]\n                    for word in graph[neighbor]:\n                        if word not in visited:\n                            visited[word] = curr\n                            queue.append(word)\n        \n        # build path\n        path = []\n        while endWord:\n            path.append(endWord)\n            endWord = visited[endWord]\n        return path[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n /= 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]] + r for r in res]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc21c\ud68c\ud558\uba74\uc11c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 3. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 4. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 5. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 6. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 7. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 8. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 9. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 10. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 11. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 12. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 13. \uc624\ub978\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \ub05d\uae4c\uc9c0 \uc21c\ud68c\ud55c\ub2e4.\n        # 14. \uc624\ub978\ucabd \ub05d\uae4c"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_max, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_1d = [0] * 12\n        for i in range(2):\n            for j in range(3):\n                board_1d[i * 3 + j] = board[i][j]\n        \n        # convert board_1d to a string\n        board_str = ''.join(map(str, board_1d))\n        \n        # convert board_str to a tuple\n        board_tuple = tuple(board_str)\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a tuple\n        board_tuple = tuple(board_dict.items())\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a tuple\n        board_tuple = tuple(board_dict.items())\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a tuple\n        board_tuple = tuple(board_dict.items())\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a tuple\n        board_tuple = tuple(board_dict.items())\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a tuple\n        board_tuple = tuple(board_dict.items())\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a tuple\n        board_tuple = tuple(board_dict.items())\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a tuple\n        board_tuple = tuple(board_dict.items())\n        \n        # convert board_tuple to a set\n        board_set = set(board_tuple)\n        \n        # convert board_set to a list\n        board_list = list(board_set)\n        \n        # convert board_list to a dictionary\n        board_dict = {board_list[i]: i for i in range(len(board_list))}\n        \n        # convert board_dict to a"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_to_s:\n                    return False\n                s_to_t[s[i]] = t[i]\n                t_to_s[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r = m\n        pivot = l\n        \n        # find the target\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[(m + pivot) % len(nums)] == target:\n                return True\n            if nums[(m + pivot) % len(nums)] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(target - sum) < abs(target - closest):\n                    closest = sum\n                \n                if sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                yield from inorder(root.left)\n                yield root.val\n                yield from inorder(root.right)\n        \n        prev = None\n        min_diff = float('inf')\n        for n in inorder(root):\n            if prev:\n                min_diff = min(min_diff, n - prev)\n            prev = n\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return [0, float('-inf')]\n            left = dfs(root.left)\n            right = dfs(root.right)\n            if left[0] == right[0]:\n                return [left[0] + 1, root.val]\n            elif left[0] > right[0]:\n                return [left[0] + 1, left[1]]\n            else:\n                return [right[0] + 1, right[1]]\n        \n        return dfs(root)[1:]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        # 5. return the number of steps\n        \n        # 1. check if password is strong\n        # 2. if not, find the first three repeating characters\n        # 3. replace the first three repeating characters with a\n        # 4. add the remaining characters to the end of the password\n        #"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        return n // 5 + self.trailingZeroes(n // 5)"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        currRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[currRow] += c\n            if currRow == 0 or currRow == numRows - 1:\n                goingDown = not goingDown\n            currRow += 1 if goingDown else -1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 pass\n        # 3. 2 pass\n        # 4. 3 pass\n        # 5. 4 pass\n        # 6. 5 pass\n        # 7. 6 pass\n        # 8. 7 pass\n        # 9. 8 pass\n        # 10. 9 pass\n        # 11. 10 pass\n        # 12. 11 pass\n        # 13. 12 pass\n        # 14. 13 pass\n        # 15. 14 pass\n        # 16. 15 pass\n        # 17. 16 pass\n        # 18. 17 pass\n        # 19. 18 pass\n        # 20. 19 pass\n        # 21. 20 pass\n        # 22. 21 pass\n        # 23. 22 pass\n        # 24. 23 pass\n        # 25. 24 pass\n        # 26. 25 pass\n        # 27. 26 pass\n        # 28. 27 pass\n        # 29. 28 pass\n        # 30. 29 pass\n        # 31. 30 pass\n        # 32. 31 pass\n        # 33. 32 pass\n        # 34. 33 pass\n        # 35. 34 pass\n        # 36. 35 pass\n        # 37. 36 pass\n        # 38. 37 pass\n        # 39. 38 pass\n        # 40. 39 pass\n        # 41. 40 pass\n        # 42. 41 pass\n        # 43. 42 pass\n        # 44. 43 pass\n        # 45. 44 pass\n        # 46. 45 pass\n        # 47. 46 pass\n        # 48. 47 pass\n        # 49. 48 pass\n        # 50. 49 pass\n        # 51. 50 pass\n        # 52. 51 pass\n        # 53. 52 pass\n        # 54. 53 pass\n        # 55. 54 pass\n        # 56. 55 pass\n        # 57. 56 pass\n        # 58. 57 pass\n        # 59. 58 pass\n        # 60. 59 pass\n        # 61. 60 pass\n        # 62. 61 pass\n        # 63. 62 pass\n        # 64. 63 pass\n        # 65. 64 pass\n        # 66. 65 pass\n        # 67. 66 pass\n        # 68. 67 pass\n        # 69. 68 pass\n        # 70. 69 pass\n        # 71. 70 pass\n        # 72. 71 pass\n        # 73. 72 pass\n        # 74. 73 pass\n        # 75. 74 pass\n        # 76. 75 pass\n        # 77. 76 pass\n        # 78. 77 pass\n        # 79. 78 pass\n        # 80. 79 pass\n        # 81. 80 pass\n        # 82. 81 pass\n        # 83. 82 pass\n        # 84. 83 pass\n        # 85. 84 pass\n        # 86. 85 pass\n        # 87. 86 pass\n        # 88. 87 pass\n        # 89. 88 pass\n        # 90. 89 pass\n        # 91. 90 pass\n        # 92. 91 pass\n        # 93. 92 pass\n        # 94. 93 pass\n        # 95."}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. Mark the number as negative if it is present\n        ## 2. Iterate over the array and return the numbers that are not negative\n        ## 3. If the number is already negative, it is present twice\n        ## 4. If the number is positive, it is not present\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        return [i + 1 for i in range(len(nums)) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use binary search to find the index of the number in the sorted array\n        # 3. count the number of smaller numbers to the right\n        \n        # 1. sort the array\n        sorted_nums = sorted(nums)\n        \n        # 2. use binary search to find the index of the number in the sorted array\n        # 3. count the number of smaller numbers to the right\n        res = [0] * len(nums)\n        for i in range(len(nums) - 1, -1, -1):\n            num = nums[i]\n            left, right = 0, len(sorted_nums) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if sorted_nums[mid] >= num:\n                    right = mid - 1\n                else:\n                    res[i] += mid - left + 1\n                    left = mid + 1\n            sorted_nums[left] = num\n        return res"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = curr = 2\n        for s, e in intervals:\n            if s <= curr:\n                curr = e\n            else:\n                ans += 1\n                curr = e - 1\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                res.append(node.val)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n /= 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # initialize\n        patches = 0\n        i = 0\n        \n        # iterate\n        while i < len(nums):\n            if nums[i] <= n:\n                n += nums[i]\n                i += 1\n            else:\n                patches += 1\n                n += n\n        \n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        # 6. stack\n        # 7. dp\n        # 8. math\n        # 9. dp\n        # 10. dp\n        # 11. dp\n        # 12. dp\n        # 13. dp\n        # 14. dp\n        # 15. dp\n        # 16. dp\n        # 17. dp\n        # 18. dp\n        # 19. dp\n        # 20. dp\n        # 21. dp\n        # 22. dp\n        # 23. dp\n        # 24. dp\n        # 25. dp\n        # 26. dp\n        # 27. dp\n        # 28. dp\n        # 29. dp\n        # 30. dp\n        # 31. dp\n        # 32. dp\n        # 33. dp\n        # 34. dp\n        # 35. dp\n        # 36. dp\n        # 37. dp\n        # 38. dp\n        # 39. dp\n        # 40. dp\n        # 41. dp\n        # 42. dp\n        # 43. dp\n        # 44. dp\n        # 45. dp\n        # 46. dp\n        # 47. dp\n        # 48. dp\n        # 49. dp\n        # 50. dp\n        # 51. dp\n        # 52. dp\n        # 53. dp\n        # 54. dp\n        # 55. dp\n        # 56. dp\n        # 57. dp\n        # 58. dp\n        # 59. dp\n        # 60. dp\n        # 61. dp\n        # 62. dp\n        # 63. dp\n        # 64. dp\n        # 65. dp\n        # 66. dp\n        # 67. dp\n        # 68. dp\n        # 69. dp\n        # 70. dp\n        # 71. dp\n        # 72. dp\n        # 73. dp\n        # 74. dp\n        # 75. dp\n        # 76. dp\n        # 77. dp\n        # 78. dp\n        # 79. dp\n        # 80. dp\n        # 81. dp\n        # 82. dp\n        # 83. dp\n        # 84. dp\n        # 85. dp\n        # 86. dp\n        # 87. dp\n        # 88. dp\n        # 89. dp\n        # 90. dp\n        # 91. dp\n        # 92. dp\n        # 93. dp\n        # 94. dp\n        # 95. dp\n        # 96. dp\n        # 97. dp\n        # 98. dp\n        # 99. dp\n        # 100. dp\n        # 101. dp\n        # 102. dp\n        # 103. dp\n        # 104. dp\n        # 105. dp\n        # 106. dp\n        # 107. dp\n        # 108. dp\n        # 109. dp\n        # 110. dp\n        # 111. dp\n        # 112. dp\n        # 113. dp\n        #"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return '0'\n        \n        res = ''\n        if (numerator < 0) ^ (denominator < 0):\n            res += '-'\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        res += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return res\n        \n        res += '.'\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + '(' + res[seen[numerator]:] + ')'\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator %= denominator\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add any remaining nodes from the left half\n        curr.next = left if left else right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by width and height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        # Use a monotonic stack to keep track of the maximum height of envelopes that can be put inside the current envelope\n        stack = []\n        \n        for envelope in envelopes:\n            if not stack or envelope[1] > stack[-1]:\n                stack.append(envelope[1])\n            else:\n                left = 0\n                right = len(stack) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if stack[mid] < envelope[1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                stack[left] = envelope[1]\n        \n        return len(stack)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ## O(m*n) time\n        \n        ## O(1) space\n        ##"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # 2. Find the node to remove\n        if length == n:\n            return head.next\n        \n        # 3. Find the node to remove\n        curr = head\n        for i in range(length - n - 1):\n            curr = curr.next\n        \n        curr.next = curr.next.next\n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) / len(machines)\n        ans = 0\n        curr = 0\n        for i in machines:\n            curr += i - avg\n            ans = max(ans, abs(curr))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(n, x // i)\n            return cnt\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        \n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.next.val)\n        root.right = self.sortedListToBST(slow.next.next)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1, list2 = list1.next, list2\n        \n        head = list1\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                list1 = list1.next\n            else:\n                list1.next, list2 = list2, list1\n                list1 = list1.next\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * n\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[i] <= heights[stack[-1]]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [curr + [num] for curr in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] < nums[left]:\n                right = mid - 1\n            else:\n                left = mid + 1"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. remove all spaces\n        s = s.strip()\n        \n        # 2. check if it is a valid number\n        if not s or s[0] not in '+-' and (s[0] not in '0123456789'):\n            return False\n        \n        # 3. check if it is a valid integer\n        if s[0] in '+-' and len(s) > 1:\n            s = s[1:]\n        if not s or s[0] not in '0123456789':\n            return False\n        \n        # 4. check if it is a valid decimal\n        if 'e' in s or 'E' in s:\n            s, exp = s.split('e')\n            if not s or s[0] not in '0123456789':\n                return False\n            if exp[0] in '+-' and len(exp) > 1:\n                exp = exp[1:]\n            if not exp or exp[0] not in '0123456789':\n                return False\n        \n        return True"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, IV, V, IX, X, XL, L, XC, C, CD, D, CM, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        #"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 1. XOR all the characters in s\n        # 2. XOR all the characters in t\n        # 3. The difference between the two is the missing character\n        # 4. Time complexity: O(n)\n        # 5. Space complexity: O(1)\n        \n        # 1. XOR all the characters in s\n        s_xor = 0\n        for c in s:\n            s_xor ^= ord(c)\n        \n        # 2. XOR all the characters in t\n        t_xor = 0\n        for c in t:\n            t_xor ^= ord(c)\n        \n        # 3. The difference between the two is the missing character\n        return chr(t_xor ^ s_xor)"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_location(board, l):\n            for row in range(9):\n                for col in range(9):\n                    if board[row][col] == '.':\n                        l[0] = row\n                        l[1] = col\n                        return True\n            return False\n        \n        def used_in_row(board, row, num):\n            for col in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_col(board, col, num):\n            for row in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_box(board, box_start_row, box_start_col, num):\n            for row in range(3):\n                for col in range(3):\n                    if board[row+box_start_row][col+box_start_col] == num:\n                        return True\n            return False\n        \n        def is_valid(board, row, col, num):\n            return not used_in_row(board, row, num) and not used_in_col(board, col, num) and not used_in_box(board, row - row % 3, col - col % 3, num)\n        \n        def solve_sudoku(board):\n            l = [0, 0]\n            if not find_empty_location(board, l):\n                return True\n            \n            row = l[0]\n            col = l[1]\n            \n            for num in range(1, 10):\n                if is_valid(board, row, col, num):\n                    board[row][col] = str(num)\n                    \n                    if solve_sudoku(board):\n                        return True\n                    \n                    board[row][col] = '.'\n            \n            return False\n        \n        solve_sudoku(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half with the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left, right = 0, num\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        ans = [0]\n        for i in range(1, n + 1):\n            ans.append(ans[i >> 1] + (i & 1))\n        \n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                if letter not in node:\n                    node[letter] = {}\n                node = node[letter]\n            node['#'] = word\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, res)\n        return res\n    \n    def dfs(self, board, i, j, node, res):\n        letter = board[i][j]\n        if letter not in node:\n            return\n        \n        word = node.pop(letter)\n        if '#' in node:\n            res.append(node.pop('#'))\n        \n        if i > 0:\n            self.dfs(board, i - 1, j, node, res)\n        if i < len(board) - 1:\n            self.dfs(board, i + 1, j, node, res)\n        if j > 0:\n            self.dfs(board, i, j - 1, node, res)\n        if j < len(board[0]) - 1:\n            self.dfs(board, i, j + 1, node, res)\n        \n        node[letter] = word"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                box = [board[x][y] for x in (i, i + 1, i + 2) for y in (j, j + 1, j + 2)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            else:\n                res.append(str(i))\n        return res"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 25600\n        # 26^4 = 1440000\n        # 26^5 = 73720000\n        # 26^6 = 3689600000\n        # 26^7 = 195312000000\n        # 26^8 = 11258999999999\n        # 26^9 = 576460752303423\n        # 26^10 = 3155348326726935\n        # 26^11 = 17769761890328319\n        # 26^12 = 10995116277765566\n        # 26^13 = 65536000000000000\n        # 26^14 = 429496729500000000\n        # 26^15 = 2882303711134640000\n        # 26^16 = 2097152000000000000\n        # 26^17 = 1477232654334509520\n        # 26^18 = 1152921504606846976\n        # 26^19 = 858993459225722904\n        # 26^20 = 6710886400000000000\n        # 26^21 = 50371526400000000000\n        # 26^22 = 374877173440000000000\n        # 26^23 = 288230371113464000000\n        # 26^24 = 225179987367640000000\n        # 26^25 = 180143985094816000000\n        # 26^26 = 14772326543345095200\n        # 26^27 = 12582912291426141000\n        # 26^28 = 107374182400000000000\n        # 26^29 = 90071992547409920000\n        # 26^30 = 73786976294819360000\n        # 26^31 = 59644717691375200000\n        # 26^32 = 488281225513632000000\n        # 26^33 = 403536372726960000000\n        # 26^34 = 3342248193458160000000\n        # 26^35 = 27777870691115200000000\n        # 26^36 = 23592907267352000000000\n        # 26^37 = 202794755340640000000000\n        # 26^38 = 17769761890"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            tmp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = tmp\n        \n        # merge the two halves\n        first, second = head, prev\n        while second.next:\n            first.next, first = second, first.next\n            second.next, second = first.next, second.next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate over the pattern and words\n        for c, w in zip(pattern, words):\n            # if the word is not in the mapping, add it\n            if w not in mapping:\n                mapping[w] = c\n            # if the word is in the mapping, check if it matches the pattern\n            elif mapping[w] != c:\n                return False\n        \n        # if we reach here, all words are mapped correctly\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m * n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        head = ListNode(0)\n        curr = head\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert to binary\n        # 2. flip bits\n        # 3. convert back to decimal\n        \n        # 1. convert to binary\n        binary = bin(num)[2:]\n        \n        # 2. flip bits\n        flipped = \"\"\n        for bit in binary:\n            if bit == \"0\":\n                flipped += \"1\"\n            else:\n                flipped += \"0\"\n        \n        # 3. convert back to decimal\n        return int(flipped, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Two pointers\n        # Time: O(n)\n        # Space: O(1)\n        \n        left, right = 0, len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time: O(N^2)\n        # Space: O(N)\n        # 1. Build a set of words\n        # 2. Iterate through each word\n        # 3. If word is in set, then check if it can be formed by concatenating other words\n        # 4. If it can, then add it to the result\n        # 5. If it cannot, then add it to the set\n        \n        word_set = set(words)\n        result = []\n        \n        for word in words:\n            if self.dfs(word, word_set):\n                result.append(word)\n            word_set.add(word)\n        \n        return result\n    \n    def dfs(self, word, word_set):\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            if prefix in word_set and (suffix in word_set or self.dfs(suffix, word_set)):\n                return True\n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = -num\n            sign = -1\n        else:\n            sign = 1\n        \n        res = ''\n        \n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return res if sign == 1 else '-' + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not board:\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, word, i, j):\n                    return True\n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        tmp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = tmp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the list\n        # 2. if the list has less than 3 elements, return the max element\n        # 3. else return the third element\n        \n        nums = sorted(set(nums))\n        return nums[-1] if len(nums) < 3 else nums[-3]"}]}