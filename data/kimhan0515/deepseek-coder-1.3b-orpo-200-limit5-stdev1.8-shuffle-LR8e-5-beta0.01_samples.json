{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) - 1 and nums[j] + 1 == nums[j + 1]:\n                j += 1\n            if j == i:\n                res.append(str(nums[i]))\n            else:\n                res.append(str(nums[i]) + '->' + str(nums[j]))\n            i = j + 1\n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        n, m = len(s), len(t)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = dp[i - 1][j]\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] += dp[i - 1][j - 1]\n        return dp[n][m]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            while 0 < nums[i] <= n and nums[i] != nums[nums[i] - 1]:\n                nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]\n        \n        for i in range(n):\n            if i + 1 != nums[i]:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        nums = [i for i in range(1, n + 1)]\n        k -= 1\n        res = ''\n        while n:\n            n -= 1\n            index, k = divmod(k, math.factorial(n))\n            res += str(nums[index])\n            nums.remove(nums[index])\n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                if numbers[i] + numbers[j] == target:\n                    return [i+1, j+1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\""}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr * 10 + root.val\n            return dfs(root.left, curr * 10 + root.val) + dfs(root.right, curr * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(gas)\n        if n == 0:\n            return 0\n        \n        tank = 0\n        start = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start if tank >= 0 else -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        nums = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n        for i in range(n, -1, -1):\n            for j in range(i, n + 2):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n + 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        def isMatch(s, p):\n            if not p:\n                return not s\n            if len(p) == 1:\n                return len(s) == 1 and (s[0] == p[0] or p[0] == '.')\n            if p[1] != '*':\n                if len(s) > 0 and (s[0] == p[0] or p[0] == '.'):\n                    return isMatch(s[1:], p[1:])\n                else:\n                    return False\n            else:\n                while len(s) > 0 and (s[0] == p[0] or p[0] == '.'):\n                    if isMatch(s, p[2:]):\n                        return True\n                    s = s[1:]\n                return isMatch(s, p[2:])\n\n        return isMatch(s, p)"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\""}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if i ** 2 != num:\n                    sum += i + num // i\n                else:\n                    sum += i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n-1) + self.fib(n-2)"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0 for i in range(n)] for j in range(m)]\n        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(dp[i+1][n-1] - dungeon[i][n-1], 1)\n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(dp[m-1][j+1] - dungeon[m-1][j], 1)\n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j], 1)\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(n):\n                while j < n and nums[j] - nums[i] <= mid:\n                    j += 1\n                count += j - i - 1\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        i = 0\n        j = len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                longest = max(longest, curr_len)\n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        sum_nums = n * (n + 1) // 2\n        sum_nums_arr = sum(nums)\n        return sum_nums - sum_nums_arr"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        def ladderLength(beginWord, endWord, wordList):\n            \"\"\"\n            :type beginWord: str\n            :type endWord: str\n            :type wordList: List[str]\n            :rtype: int\n            \"\"\"\n            def ladderLength(beginWord, endWord, wordList):\n                \"\"\"\n                :type beginWord: str\n                :type endWord: str\n                :type wordList: List[str]\n                :rtype: int\n                \"\"\"\n                def ladderLength(beginWord, endWord, wordList):\n                    \"\"\"\n                    :type beginWord: str\n                    :type endWord: str\n                    :type wordList: List[str]\n                    :rtype: int\n                    \"\"\"\n                    def ladderLength(beginWord, endWord, wordList):\n                        \"\"\"\n                        :type beginWord: str\n                        :type endWord: str\n                        :type wordList: List[str]\n                        :rtype: int\n                        \"\"\"\n                        def ladderLength(beginWord, endWord, wordList):\n                            \"\"\"\n                            :type beginWord: str\n                            :type endWord: str\n                            :type wordList: List[str]\n                            :rtype: int\n                            \"\"\"\n                            def ladderLength(beginWord, endWord, wordList):\n                                \"\"\"\n                                :type beginWord: str\n                                :type endWord: str\n                                :type wordList: List[str]\n                                :rtype: int\n                                \"\"\"\n                                def ladderLength(beginWord, endWord, wordList):\n                                    \"\"\"\n                                    :type beginWord: str\n                                    :type endWord: str\n                                    :type wordList: List[str]\n                                    :rtype: int\n                                    \"\"\"\n                                    def ladderLength(beginWord, endWord, wordList):\n                                        \"\"\"\n                                        :type beginWord: str\n                                        :type endWord: str\n                                        :type wordList: List[str]\n                                        :rtype: int\n                                        \"\"\"\n                                        def ladderLength(beginWord, endWord, wordList):\n                                            \"\"\"\n                                            :type beginWord: str\n                                            :type endWord: str\n                                            :type wordList: List[str]\n                                            :rtype: int\n                                            \"\"\"\n                                            def ladderLength(beginWord, endWord, wordList):\n                                                \"\"\"\n                                                :type beginWord: str\n                                                :type endWord: str\n                                                :type wordList: List[str]\n                                                :rtype: int\n                                                \"\"\"\n                                                def ladderLength(beginWord, endWord, wordList):\n                                                    \"\"\"\n                                                    :type beginWord: str\n                                                    :type endWord: str\n                                                    :type wordList: List[str]\n                                                    :rtype: int\n                                                    \"\"\"\n                                                    def ladderLength(beginWord, endWord, wordList):\n                                                        \"\"\"\n                                                        :type beginWord: str\n                                                        :type endWord: str\n                                                        :type wordList: List[str]\n                                                        :rtype: int\n                                                        \"\"\"\n                                                        def ladderLength(beginWord, endWord, wordList):\n                                                            \"\"\"\n                                                            :type beginWord: str\n                                                            :type endWord: str\n                                                            :type wordList: List[str]\n                                                            :rtype: int\n                                                            \"\"\"\n                                                            def ladderLength(beginWord, endWord, wordList):\n                                                                \"\"\"\n                                                                :type beginWord: str\n                                                                :type endWord: str\n                                                                :type wordList: List[str]\n                                                                :rtype: int\n                                                                \"\"\"\n                                                                def ladderLength(beginWord, endWord, wordList):\n                                                                    \"\"\"\n                                                                    :type beginWord: str\n                                                                    :type endWord: str\n                                                                    :type wordList: List[str]\n                                                                    :rtype: int\n                                                                    \"\"\"\n                                                                    def ladderLength(beginWord, endWord, wordList):\n                                                                        \"\"\"\n                                                                        :type beginWord: str\n                                                                        :type endWord: str\n                                                                        :type wordList: List[str]\n                                                                        :rtype: int\n                                                                        \"\"\"\n                                                                        def ladderLength(beginWord, endWord, wordList):\n                                                                            \"\"\"\n                                                                            :type beginWord: str\n                                                                            :type endWord: str\n                                                                            :type wordList: List[str]\n                                                                            :rtype: int\n                                                                            \"\"\"\n                                                                            def ladderLength(beginWord, endWord, wordList):\n                                                                                \"\"\"\n                                                                                :type beginWord: str\n                                                                                :type endWord: str\n                                                                                :"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        a = int(a, 2)\n        b = int(b, 2)\n        return bin(a + b)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, left):\n            l, r = 0, len(nums) - 1\n            while l <= r:\n                mid = (l + r) // 2\n                if nums[mid] < target:\n                    l = mid + 1\n                elif nums[mid] > target:\n                    r = mid - 1\n                else:\n                    if left:\n                        r = mid - 1\n                    else:\n                        l = mid + 1\n            return l if left else r\n        \n        left = binary_search(nums, target, True)\n        right = binary_search(nums, target, False) - 1\n        if left <= right and right < len(nums) and nums[left] == target and nums[right] == target:\n            return [left, right]\n        return [-1, -1]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        k = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                nums[k] = nums[i]\n                k += 1\n        return k"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        if nums[0] == 0:\n            return -1\n        if nums[0] >= n - 1:\n            return 1\n        if nums[0] >= n - 2:\n            return 2\n        if nums[0] >= n - 3:\n            return 3\n        if nums[0] >= n - 4:\n            return 4\n        if nums[0] >= n - 5:\n            return 5\n        if nums[0] >= n - 6:\n            return 6\n        if nums[0] >= n - 7:\n            return 7\n        if nums[0] >= n - 8:\n            return 8\n        if nums[0] >= n - 9:\n            return 9\n        if nums[0] >= n - 10:\n            return 10\n        if nums[0] >= n - 11:\n            return 11\n        if nums[0] >= n - 12:\n            return 12\n        if nums[0] >= n - 13:\n            return 13\n        if nums[0] >= n - 14:\n            return 14\n        if nums[0] >= n - 15:\n            return 15\n        if nums[0] >= n - 16:\n            return 16\n        if nums[0] >= n - 17:\n            return 17\n        if nums[0] >= n - 18:\n            return 18\n        if nums[0] >= n - 19:\n            return 19\n        if nums[0] >= n - 20:\n            return 20\n        if nums[0] >= n - 21:\n            return 21\n        if nums[0] >= n - 22:\n            return 22\n        if nums[0] >= n - 23:\n            return 23\n        if nums[0] >= n - 24:\n            return 24\n        if nums[0] >= n - 25:\n            return 25\n        if nums[0] >= n - 26:\n            return 26\n        if nums[0] >= n - 27:\n            return 27\n        if nums[0] >= n - 28:\n            return 28\n        if nums[0] >= n - 29:\n            return 29\n        if nums[0] >= n - 30:\n            return 30\n        if nums[0] >= n - 31:\n            return 31\n        if nums[0] >= n - 32:\n            return 32\n        if nums[0] >= n - 33:\n            return 33\n        if nums[0] >= n - 34:\n            return 34\n        if nums[0] >= n - 35:\n            return 35\n        if nums[0] >= n - 36:\n            return 36\n        if nums[0] >= n - 37:\n            return 37\n        if nums[0] >= n - 38:\n            return 38\n        if nums[0] >= n - 39:\n            return 39\n        if nums[0] >= n - 40:\n            return 40\n        if nums[0] >= n - 41:\n            return 41\n        if nums[0] >= n - 42:\n            return 42\n        if nums[0] >= n - 43:\n            return 43\n        if nums[0] >= n - 44:\n            return 44\n        if nums[0] >= n - 45:\n            return 45\n        if nums[0] >= n - 46:\n            return 46\n        if nums[0] >= n - 47:\n            return 47\n        if nums[0] >= n - 48:\n            return"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices):\n            return sum(map(lambda x: max(0, x[1] - x[0]), zip(prices, prices[1:])))\n        \n        dp = [[0] * (2 * k + 1) for _ in range(len(prices))]\n        \n        for i in range(len(prices)):\n            for j in range(1, 2 * k, 2):\n                dp[i][j] = max(dp[i][j], dp[i - 1][j] + prices[i])\n                dp[i][j + 1] = max(dp[i][j + 1], dp[i - 1][j] - prices[i])\n        \n        return max(dp[-1])"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_dict_rev = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(s)):\n            if s.count(s[i]) == 1:\n                return i\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\""}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. 2 pointer approach\n        # 2. 3 pointer approach\n        # 3. sorting\n        # 4. counting sort\n        # 5. bucket sort\n        # 6. counting sort\n        # 7. counting sort\n        # 8. counting sort\n        # 9. counting sort\n        # 10. counting sort\n        # 11. counting sort\n        # 12. counting sort\n        # 13. counting sort\n        # 14. counting sort\n        # 15. counting sort\n        # 16. counting sort\n        # 17. counting sort\n        # 18. counting sort\n        # 19. counting sort\n        # 20. counting sort\n        # 21. counting sort\n        # 22. counting sort\n        # 23. counting sort\n        # 24. counting sort\n        # 25. counting sort\n        # 26. counting sort\n        # 27. counting sort\n        # 28. counting sort\n        # 29. counting sort\n        # 30. counting sort\n        # 31. counting sort\n        # 32. counting sort\n        # 33. counting sort\n        # 34. counting sort\n        # 35. counting sort\n        # 36. counting sort\n        # 37. counting sort\n        # 38. counting sort\n        # 39. counting sort\n        # 40. counting sort\n        # 41. counting sort\n        # 42. counting sort\n        # 43. counting sort\n        # 44. counting sort\n        # 45. counting sort\n        # 46. counting sort\n        # 47. counting sort\n        # 48. counting sort\n        # 49. counting sort\n        # 50. counting sort\n        # 51. counting sort\n        # 52. counting sort\n        # 53. counting sort\n        # 54. counting sort\n        # 55. counting sort\n        # 56. counting sort\n        # 57. counting sort\n        # 58. counting sort\n        # 59. counting sort\n        # 60. counting sort\n        # 61. counting sort\n        # 62. counting sort\n        # 63. counting sort\n        # 64. counting sort\n        # 65. counting sort\n        # 66. counting sort\n        # 67. counting sort\n        # 68. counting sort\n        # 69. counting sort\n        # 70. counting sort\n        # 71. counting sort\n        # 72. counting sort\n        # 73. counting sort\n        # 74. counting sort\n        # 75. counting sort\n        # 76. counting sort\n        # 77. counting sort\n        # 78. counting sort\n        # 79. counting sort\n        # 80. counting sort\n        # 81. counting sort\n        # 82. counting sort\n        # 83. counting sort\n        # 84. counting sort\n        # 85. counting sort\n        # 86. counting sort\n        # 87. counting sort\n        # 88. counting sort\n        # 89. counting sort\n        # 90. counting sort\n        # 91. counting sort\n        # 92. counting sort\n        # 93. counting sort\n        # 94. counting sort\n        # 95. counting sort\n        # 96. counting sort\n        # 97. counting sort\n        # 98. counting sort\n        # 99. counting sort\n        # 100. counting sort\n        # 101. counting sort\n        # 102. counting sort\n        # 103. counting sort\n        # 104. counting sort\n        # 105. counting sort\n        # 106. counting sort\n        # 107. counting sort\n        # 108. counting sort\n        # 109. counting sort\n        # 110. counting sort\n        # 111. counting sort\n        # 112. counting sort\n        # 113. counting"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        return left + right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = list(num1)\n        num2 = list(num2)\n        num1.reverse()\n        num2.reverse()\n        i = 0\n        while i < len(num1) and i < len(num2):\n            num1[i] = int(num1[i])\n            num2[i] = int(num2[i])\n            i += 1\n        i = 0\n        while i < len(num1):\n            num1[i] += num2[i]\n            i += 1\n        i = 0\n        while i < len(num1):\n            if num1[i] >= 10:\n                num1[i] -= 10\n                num1[i+1] += 1\n            i += 1\n        i = 0\n        while i < len(num1):\n            if num1[i] == 0:\n                num1.pop(i)\n            else:\n                i += 1\n        num1.reverse()\n        num1 = ''.join(map(str, num1))\n        return num1"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        def calculate(s):\n            stack = []\n            num = 0\n            sign = '+'\n            for i in range(len(s)):\n                if s[i].isdigit():\n                    num = num * 10 + int(s[i])\n                if s[i] in '+-' or i == len(s) - 1:\n                    if sign == '+':\n                        stack.append(num)\n                    elif sign == '-':\n                        stack.append(-num)\n                    num = 0\n                    sign = s[i]\n            return sum(stack)\n        \n        return calculate(s)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\""}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append('(')\n            elif i == ')':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            elif i == '{':\n                stack.append('{')\n            elif i == '}':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n            elif i == '[':\n                stack.append('[')\n            elif i == ']':\n                if len(stack) == 0:\n                    return False\n                else:\n                    stack.pop()\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n        j = len(nums) - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j] and abs(i-j) <= k:\n                    return True\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n <= 3:\n            return 0\n        if n % 2 == 1:\n            return -1\n        if n == 4:\n            return 1\n        if n == 6:\n            return 2\n        if n == 8:\n            return 3\n        if n == 10:\n            return 4\n        if n == 12:\n            return 5\n        if n == 14:\n            return 6\n        if n == 16:\n            return 7\n        if n == 18:\n            return 8\n        if n == 20:\n            return 9\n        if n == 22:\n            return 10\n        if n == 24:\n            return 11\n        if n == 26:\n            return 12\n        if n == 28:\n            return 13\n        if n == 30:\n            return 14\n        if n == 32:\n            return 15\n        if n == 34:\n            return 16\n        if n == 36:\n            return 17\n        if n == 38:\n            return 18\n        if n == 40:\n            return 19\n        if n == 42:\n            return 20\n        if n == 44:\n            return 21\n        if n == 46:\n            return 22\n        if n == 48:\n            return 23\n        if n == 50:\n            return 24\n        if n == 52:\n            return 25\n        if n == 54:\n            return 26\n        if n == 56:\n            return 27\n        if n == 58:\n            return 28\n        if n == 60:\n            return 29\n        if n == 62:\n            return 30\n        if n == 64:\n            return 31\n        if n == 66:\n            return 32\n        if n == 68:\n            return 33\n        if n == 70:\n            return 34\n        if n == 72:\n            return 35\n        if n == 74:\n            return 36\n        if n == 76:\n            return 37\n        if n == 78:\n            return 38\n        if n == 80:\n            return 39\n        if n == 82:\n            return 40\n        if n == 84:\n            return 41\n        if n == 86:\n            return 42\n        if n == 88:\n            return 43\n        if n == 90:\n            return 44\n        if n == 92:\n            return 45\n        if n == 94:\n            return 46\n        if n == 96:\n            return 47\n        if n == 98:\n            return 48\n        if n == 100:\n            return 49\n        if n == 102:\n            return 50\n        if n == 104:\n            return 51\n        if n == 106:\n            return 52\n        if n == 108:\n            return 53\n        if n == 110:\n            return 54\n        if n == 112:\n            return 55\n        if n == 114:\n            return 56\n        if n == 116:\n            return 57\n        if n == 118:\n            return 58\n        if n == 120:\n            return 59\n        if n == 122:\n            return 60\n        if n == 124:\n            return 61\n        if n == 126:\n            return 62\n        if n == 128:\n            return 63\n        if n == 130:\n            return 64\n        if n == 132:\n            return 65\n        if n == 134:\n            return 66\n        if n == 136:\n            return 67\n        if n == 138:\n            return 68\n        if n == 140:\n            return 69\n        if n == 142:\n            return 70"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for i in range(len(s2) + 1)] for j in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        ans = []\n        for word in words:\n            if word[0].lower() in row1 or word[0].lower() in row2 or word[0].lower() in row3:\n                ans.append(word)\n            else:\n                for i in range(1, len(word)):\n                    if word[i].lower() not in row1 and word[i].lower() not in row2 and word[i].lower() not in row3:\n                        break\n                    if i == len(word) - 1:\n                        ans.append(word)\n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        leftNode = dummy\n        rightNode = dummy\n        for i in range(left):\n            leftNode = leftNode.next\n        for i in range(right):\n            rightNode = rightNode.next\n        leftNode.next = self.reverse(leftNode.next, rightNode)\n        return dummy.next\n        \n    def reverse(self, head, rightNode):\n        prev = None\n        curr = head\n        while curr != rightNode:\n            nextNode = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nextNode\n        curr.next = prev\n        return curr"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1. Find the longest palindrome that can be formed from the beginning of the string\n        # 2. Add the longest palindrome to the end of the string\n        # 3. Return the string\n        \n        # 1"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) == 0 or len(t) == 0:\n            return \"\"\n        \n        t_map = {}\n        for c in t:\n            if c not in t_map:\n                t_map[c] = 0\n            t_map[c] += 1\n        \n        s_map = {}\n        for c in s:\n            if c not in s_map:\n                s_map[c] = 0\n            s_map[c] += 1\n        \n        if len(s_map) < len(t_map):\n            return \"\"\n        \n        min_window = \"\"\n        min_window_len = len(s) + 1\n        s_map_len = len(s_map)\n        t_map_len = len(t_map)\n        s_map_len_diff = s_map_len - t_map_len\n        s_map_len_diff_diff = s_map_len_diff - t_map_len\n        s_map_len_diff_diff_diff = s_map_len_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff = s_map_len_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff = s_map_len_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff_diff - t_map_len\n        s_map_len_diff_diff_diff_diff_diff_diff_diff_diff"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)):\n            if i >= 3 and distance[i] >= distance[i - 3] and distance[i - 1] <= distance[i - 4]:\n                return True\n            if i >= 4 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 2] + distance[i - 4] >= distance[i - 4] and distance[i - 3] + distance[i - 1] >= distance[i - 5]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            while curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        d = {}\n        for i in s:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        ans = 0\n        for i in d.values():\n            ans += i // 2 * 2\n            if ans % 2 == 0 and i % 2 == 1:\n                ans += 1\n        return ans"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index + 1:], postorder[root_index:-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\""}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        while queue:\n            temp = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(temp)\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x == 0:\n            return True\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x < 100:\n            return True\n        \n        if x < 1000:\n            return True\n        \n        if x < 10000:\n            return True\n        \n        if x < 100000:\n            return True\n        \n        if x < 1000000:\n            return True\n        \n        if x < 10000000:\n            return True\n        \n        if x < 100000000:\n            return True\n        \n        if x < 1000000000:\n            return True\n        \n        if x < 10000000000:\n            return True\n        \n        if x < 100000000000:\n            return True\n        \n        if x < 1000000000000:\n            return True\n        \n        if x < 10000000000000:\n            return True\n        \n        if x < 100000000000000:\n            return True\n        \n        if x < 1000000000000000:\n            return True\n        \n        if x < 10000000000000000:\n            return True\n        \n        if x < 100000000000000000:\n            return True\n        \n        if x < 1000000000000000000:\n            return True\n        \n        if x < 10000000000000000000:\n            return True\n        \n        if x < 100000000000000000000:\n            return True\n        \n        if x < 1000000000000000000000:\n            return True\n        \n        if x < 10000000000000000000000:\n            return True\n        \n        if x < 100000000000000000000000:\n            return True\n        \n        if x < 1000000000000000000000000:\n            return True\n        \n        if x < 10000000000000000000000000:\n            return True\n        \n        if x < 100000000000000000000000000:\n            return True\n        \n        if x < 1000000000000000000000000000:\n            return True\n        \n        if x < 10000000000000000000000000000:\n            return True\n        \n        if x < 100000000000000000000000000000:\n            return True\n        \n        if x < 1000000000000000000000000000000:\n            return True\n        \n        if x < 10000000000000000000000000000000:\n            return True\n        \n        if x < 100000000000000000000000000000000:\n            return True\n        \n        if x < 100000000000000000000000000000000"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\""}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return self.climbStairs(n-1) + self.climbStairs(n-2)"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if dp[i] and s[i:j] in wordDict:\n                    dp[j] = True\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBST(root, min_val, max_val):\n            if not root:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return isValidBST(root.left, min_val, root.val) and isValidBST(root.right, root.val, max_val)\n        \n        return isValidBST(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        intervals.append(newInterval)\n        intervals.sort()\n        i = 0\n        while i < len(intervals):\n            if intervals[i][1] < intervals[i+1][0]:\n                i += 1\n            else:\n                intervals[i][0] = min(intervals[i][0], intervals[i+1][0])\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                intervals.pop(i+1)\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\""}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                res[i + j + 1] += res[i + j] // 10\n                res[i + j] = res[i + j] % 10\n        \n        res = res[::-1]\n        while len(res) > 1 and res[-1] == 0:\n            res.pop()\n        return \"\".join(map(str, res))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(prices)\n        if n <= 1:\n            return 0\n        \n        left = [0] * n\n        right = [0] * n\n        \n        min_price = prices[0]\n        for i in range(1, n):\n            left[i] = max(left[i - 1], prices[i] - min_price)\n            min_price = min(min_price, prices[i])\n        \n        max_price = prices[-1]\n        for i in range(n - 2, -1, -1):\n            right[i] = max(right[i + 1], max_price - prices[i])\n            max_price = max(max_price, prices[i])\n        \n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, left[i] + right[i])\n        \n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(i, target):\n            if target == 0:\n                return [[]]\n            if i >= len(candidates) or target < 0:\n                return []\n            res = []\n            for j in range(i, len(candidates)):\n                if j > i and candidates[j] == candidates[j - 1]:\n                    continue\n                res += [c + [candidates[j]] for c in dfs(j + 1, target - candidates[j])]\n            return res\n        \n        candidates.sort()\n        return dfs(0, target)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper() and word[1:].islower():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        def merge(l1, l2):\n            if not l1:\n                return l2\n            if not l2:\n                return l1\n            if l1.val < l2.val:\n                l1.next = merge(l1.next, l2)\n                return l1\n            else:\n                l2.next = merge(l1, l2.next)\n                return l2\n        \n        if not lists:\n            return None\n        while len(lists) > 1:\n            merged = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\n                merged.append(merge(l1, l2))\n            lists = merged\n        return lists[0]"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [n] * n\n        dp[0] = -1\n        for i in range(1, n):\n            dp[i] = i\n            for j in range(i):\n                if s[j:i+1] == s[j:i+1][::-1]:\n                    dp[i] = min(dp[i], dp[j-1] + 1)\n        return dp[n-1]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def f(x):\n            return x / 5 + x / 25 + x / 125 + x / 625 + x / 3125 + x / 15625 + x / 78125 + x / 390625 + x / 1953125 + x / 9765625 + x / 48828125\n\n        l, r = 0, 10 ** 9\n        while l < r:\n            m = (l + r) / 2\n            if f(m) < k:\n                l = m + 1\n            else:\n                r = m\n        return l"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        ans = []\n        for i in range(len(words)):\n            for j in range(len(words)):\n                if i != j and isPalindrome(words[i] + words[j]):\n                    ans.append([i, j])\n        return ans"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\""}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i, j, matrix, dp):\n            if not dp[i][j]:\n                val = matrix[i][j]\n                dp[i][j] = 1 + max(\n                    dfs(i - 1, j, matrix, dp) if i and val > matrix[i - 1][j] else 0,\n                    dfs(i + 1, j, matrix, dp) if i < len(matrix) - 1 and val > matrix[i + 1][j] else 0,\n                    dfs(i, j - 1, matrix, dp) if j and val > matrix[i][j - 1] else 0,\n                    dfs(i, j + 1, matrix, dp) if j < len(matrix[0]) - 1 and val > matrix[i][j + 1] else 0\n                )\n            return dp[i][j]\n        \n        dp = [[0] * len(matrix[0]) for _ in range(len(matrix))]\n        return max(dfs(i, j, matrix, dp) for i in range(len(matrix)) for j in range(len(matrix[0])))"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += (n // i) * i + min(max(n % i - i + 1, 0), i)\n            i *= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if dp[i] and s[i:j] in wordDict:\n                    dp[j] = True\n        \n        if not dp[-1]:\n            return []\n        \n        ans = []\n        self.dfs(s, 0, [], ans, dp, wordDict)\n        return ans\n    \n    def dfs(self, s, i, path, ans, dp, wordDict):\n        if i == len(s):\n            ans.append(' '.join(path))\n            return\n        \n        for j in range(i + 1, len(s) + 1):\n            if dp[j] and s[i:j] in wordDict:\n                self.dfs(s, j, path + [s[i:j]], ans, dp, wordDict)"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if node:\n                    level.append(node.val)\n                    queue.append(node.left)\n                    queue.append(node.right)\n            if level:\n                if not leftToRight:\n                    level.reverse()\n                result.append(level)\n                leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n        def get_time(hour, minute):\n            if hour > 11 or minute > 59:\n                return None\n            return str(hour) + ':' + str(minute).zfill(2)\n\n        def get_hours(hour):\n            if hour > 11:\n                return []\n            return [hour]\n\n        def get_minutes(minute):\n            if minute > 59:\n                return []\n            return [minute]\n\n        def get_hours_minutes(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return [hour, minute]\n\n        def get_hours_minutes_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero_with_zero(hour, minute):\n            if hour > 11 or minute > 59:\n                return []\n            return"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        for i in range(numRows):\n            res.append([])\n            for j in range(i+1):\n                if j == 0 or j == i:\n                    res[i].append(1)\n                else:\n                    res[i].append(res[i-1][j-1] + res[i-1][j])\n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node):\n            if not node:\n                return 0\n            left = dfs(node.left)\n            right = dfs(node.right)\n            self.max_sum = max(self.max_sum, left + right + node.val)\n            return max(left, right) + node.val\n        \n        self.max_sum = float('-inf')\n        dfs(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\""}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = ''.join(c for c in s if c.isalnum())\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\""}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 2 == 0:\n                n = n // 2\n            elif n % 3 == 0:\n                n = n // 3\n            elif n % 5 == 0:\n                n = n // 5\n            else:\n                return False\n        \n        return True"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def sumOfLeftLeaves(root):\n            if not root:\n                return 0\n            if root.left and not root.left.left and not root.left.right:\n                return root.left.val + sumOfLeftLeaves(root.right)\n            return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        return sumOfLeftLeaves(root)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 214748"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i, j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board) - 1 or j == 0 or j == len(board[0]) - 1:\n                    dfs(i, j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, i, j, k, l):\n            if i == 4:\n                return abs(cards[j] - 24) < 1e-6\n            for m in range(4):\n                if m != i and m != j and m != k and m != l:\n                    for n in range(4):\n                        if n != m and n != j and n != k and n != l:\n                            for o in range(4):\n                                if o != m and o != j and o != k and o != l:\n                                    for p in range(4):\n                                        if p != m and p != j and p != k and p != l:\n                                            if dfs(cards, i, j, k, l) or dfs(cards, i, j, k, l) or dfs(cards, i, j, k, l) or dfs(cards, i, j, k, l):\n                                                return True\n            return False\n\n        return dfs(cards, 0, 1, 2, 3)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if not s:\n            return not p or (len(p) == 1 and p[0] == '*')\n        \n        if len(p) == 1:\n            return s == p or (len(s) == 1 and p[0] == '*')\n        \n        if p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    (s and (p[0] == s[0] or p[0] == '?')) and\n                    self.isMatch(s[1:], p))\n        else:\n            return (s and (p[0] == s[0] or p[0] == '?')) and self.isMatch(s[1:], p[1:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        return nums[len(nums)//2]"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\""}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 20:\n                return ones[num]\n            if num < 100:\n                return tens[num // 10] + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred\" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand\" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million\" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion\" + helper(num % 1000000000)\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 1000000007\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % mod\n                if j >= i:\n                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + mod) % mod\n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            a = cur.next\n            b = cur.next.next\n            c = cur.next.next.next\n            \n            cur.next = b\n            a.next = c\n            b.next = a\n            \n            cur = a\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy1 = ListNode()\n        dummy2 = ListNode()\n        cur1 = dummy1\n        cur2 = dummy2\n        \n        while head:\n            if head.val < x:\n                cur1.next = head\n                cur1 = cur1.next\n            else:\n                cur2.next = head\n                cur2 = cur2.next\n            head = head.next\n        \n        cur1.next = dummy2.next\n        cur2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(edges)\n        parent = [i for i in range(n + 1)]\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(x, y):\n            px = find(x)\n            py = find(y)\n            if px != py:\n                parent[py] = px\n        \n        for u, v in edges:\n            if find(u) == find(v):\n                return [u, v]\n            else:\n                union(u, v)\n        \n        for u, v in edges:\n            if find(u) == find(v):\n                return [u, v]\n            else:\n                union(u, v)\n        \n        return [u, v]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, res, path):\n            if len(nums) == 0:\n                res.append(path)\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i-1]:\n                    continue\n                backtrack(nums[:i] + nums[i+1:], res, path + [nums[i]])\n        \n        nums.sort()\n        res = []\n        backtrack(nums, res, [])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(map(int, str(num)))\n        return num"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(nums)):\n            if nums.count(nums[i]) == 1:\n                return nums[i]"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        s = s.strip()\n        return len(s.split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for i in range(1, n + 1):\n            dp[i] = (dp[i - 1] * 2 + dp[i - 2]) % mod\n            if i >= 3:\n                dp[i] = (dp[i] + dp[i - 3]) % mod\n        return dp[n]"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(nums)):\n            if nums[i] == target:\n                return i\n            elif nums[i] > target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return True\n        if nums[0] == 0:\n            return False\n        max_jump = nums[0]\n        for i in range(1, n):\n            if max_jump == 0:\n                return False\n            max_jump = max(max_jump - 1, nums[i])\n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j - 1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j]\n        return dp[m - 1][n - 1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        else:\n            s = self.countAndSay(n-1)\n            count = 1\n            res = \"\"\n            for i in range(len(s)-1):\n                if s[i] == s[i+1]:\n                    count += 1\n                else:\n                    res += str(count) + s[i]\n                    count = 1\n            res += str(count) + s[-1]\n            return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def isPossible(nums, k, m):\n            c = 1\n            curr = 0\n            for i in range(len(nums)):\n                if curr + nums[i] > m:\n                    c += 1\n                    curr = nums[i]\n                else:\n                    curr += nums[i]\n            return c <= k\n        \n        l = max(nums)\n        r = sum(nums)\n        while l < r:\n            m = (l + r) // 2\n            if isPossible(nums, k, m):\n                r = m\n            else:\n                l = m + 1\n        return l"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        def binary_search(nums, target):\n            left, right = 0, len(nums) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid] == target:\n                    return mid\n                elif nums[mid] < target:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return -1\n        \n        pivot = binary_search(nums, nums[0])\n        if pivot == -1:\n            return binary_search(nums, target)\n        else:\n            left_result = binary_search(nums[:pivot], target)\n            if left_result == -1:\n                return binary_search(nums[pivot:], target)\n            else:\n                return left_result + pivot"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        digit_map = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r', 's'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        \n        def backtrack(digits, index, path, res):\n            if len(digits) == index:\n                res.append(''.join(path))\n                return\n            \n            for i in range(index, len(digits)):\n                for letter in digit_map[digits[i]]:\n                    path.append(letter)\n                    backtrack(digits, i + 1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(digits, 0, [], res)\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(candidates, target, path, res):\n            if target == 0:\n                res.append(path[:])\n                return\n            for i in range(len(candidates)):\n                if candidates[i] > target:\n                    break\n                dfs(candidates[i:], target - candidates[i], path + [candidates[i]], res)\n        \n        res = []\n        dfs(sorted(candidates), target, [], res)\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\""}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        count = 1\n        for i in range(n):\n            for j in range(n):\n                matrix[i][j] = count\n                count += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        else:\n            return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        cur_prod = nums[0]\n        for i in range(1, len(nums)):\n            cur_prod = max(nums[i], cur_prod * nums[i], cur_prod * nums[i])\n            max_prod = max(max_prod, cur_prod)\n        return max_prod"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        stone_set = list(stone_set)\n        stone_set.sort()\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0] + stone_set\n        stone_set = [0]"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score_sorted = sorted(score)\n        score_sorted_reverse = sorted(score, reverse=True)\n        score_dict = {}\n        for i in range(len(score_sorted)):\n            score_dict[score_sorted[i]] = i + 1\n        score_dict_reverse = {}\n        for i in range(len(score_sorted_reverse)):\n            score_dict_reverse[score_sorted_reverse[i]] = i + 1\n        answer = []\n        for i in score:\n            if i in score_dict:\n                answer.append(str(score_dict[i]))\n            else:\n                answer.append(str(score_dict_reverse[i]))\n        return answer"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        cur_len = 0\n        seen = {}\n        for i, c in en enumerate(s):\n            if c in seen:\n                cur_len = i - seen[c]\n            else:\n                cur_len += 1\n            max_len = max(max_len, cur_len)\n            seen[c] = i\n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_map = {}\n        for word in words:\n            if word in word_map:\n                word_map[word] += 1\n            else:\n                word_map[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            seen = {}\n            for j in range(0, len(s), word_len):\n                word = s[j:j+word_len]\n                if word in word_map:\n                    if word in seen:\n                        seen[word] += 1\n                    else:\n                        seen[word] = 1\n                else:\n                    break\n            else:\n                if seen == word_map:\n                    res.append(i)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 0\n        for i in range(len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if i == max_val:\n                chunks += 1\n                max_val = 0\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < cur.next.val:\n                    prev = prev.next\n                cur.next, cur.next.next, prev.next = cur.next.next, cur.next.next, cur.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i + 1\n            r = len(nums) - 1\n            while l < r:\n                sum = nums[i] + nums[l] + nums[r]\n                if sum < 0:\n                    l += 1\n                elif sum > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                else:\n                    if word1[i - 1] == word2[j - 1]:\n                        dp[i][j] = dp[i - 1][j - 1]\n                    else:\n                        dp[i][j] = min(dp[i - 1][j - 1], dp[i - 1][j], dp[i][j - 1]) + 1\n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            path += str(root.val)\n            if not root.left and not root.right:\n                self.paths.append(path)\n                return\n            path += '->'\n            dfs(root.left, path)\n            dfs(root.right, path)\n        \n        self.paths = []\n        dfs(root, '')\n        return self.paths"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid\n            count = 0\n            while i < mid and j < right:\n                if nums[i] > 2 * nums[j]:\n                    count += mid - i\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right] = sorted(nums[left:right])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left < right - 1:\n                mid = (left + right) // 2\n                count = mergeSort(nums, left, mid)\n                count += mergeSort(nums, mid, right)\n                count += merge(nums, left, mid, right)\n                return count\n            else:\n                return 0\n        \n        return mergeSort(nums, 0, len(nums))"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx < tx and sy < ty:\n            if tx < ty:\n                ty -= ty % tx\n            else:\n                tx -= tx % ty\n        return sx == tx and sy <= ty"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                if i < len(v2):\n                    if v1[i] < v2[i]:\n                        return -1\n                    elif v1[i] > v2[i]:\n                        return 1\n                else:\n                    return -1\n            else:\n                if i < len(v2):\n                    return 1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        for i in range(len(prices)-1):\n            for j in range(i+1, len(prices)):\n                max_profit = max(max_profit, prices[j]-prices[i])\n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        heap = []\n        time = 0\n        for duration, lastDay in courses:\n            time += duration\n            heapq.heappush(heap, -duration)\n            if time > lastDay:\n                time += heapq.heappop(heap)\n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        count = 0\n        while curr:\n            count += 1\n            curr = curr.next\n        \n        if count < k:\n            return head\n        \n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        curr = head\n        while curr:\n            next = curr.next\n            for i in range(k - 1):\n                if not next:\n                    return head\n                next = next.next\n            next_next = next.next\n            next.next = None\n            curr.next = self.reverseKGroup(next, k)\n            curr = next\n        \n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s) // i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return sum(set(nums)) * 2 - sum(nums)"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n - 1):\n            dp[i][i + 1] = 2\n            dp[i][i + 2] = 3\n        for i in range(n - 2, -1, -1):\n            for j in range(i + 3, n):\n                dp[i][j] = dp[i][j - 1]\n                for k in range(i + 1, j):\n                    dp[i][j] = min(dp[i][j], dp[i][k - 1] + dp[k][j])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        if x == 1:\n            return 1\n        if x == 2:\n            return 1\n        if x == 3:\n            return 1\n        if x == 4:\n            return 2\n        if x == 5:\n            return 2\n        if x == 6:\n            return 2\n        if x == 7:\n            return 2\n        if x == 8:\n            return 2\n        if x == 9:\n            return 3\n        if x == 10:\n            return 3\n        if x == 11:\n            return 3\n        if x == 12:\n            return 3\n        if x == 13:\n            return 3\n        if x == 14:\n            return 3\n        if x == 15:\n            return 3\n        if x == 16:\n            return 4\n        if x == 17:\n            return 4\n        if x == 18:\n            return 4\n        if x == 19:\n            return 4\n        if x == 20:\n            return 4\n        if x == 21:\n            return 4\n        if x == 22:\n            return 4\n        if x == 23:\n            return 4\n        if x == 24:\n            return 4\n        if x == 25:\n            return 4\n        if x == 26:\n            return 4\n        if x == 27:\n            return 4\n        if x == 28:\n            return 4\n        if x == 29:\n            return 4\n        if x == 30:\n            return 4\n        if x == 31:\n            return 4\n        if x == 32:\n            return 4\n        if x == 33:\n            return 4\n        if x == 34:\n            return 4\n        if x == 35:\n            return 4\n        if x == 36:\n            return 4\n        if x == 37:\n            return 4\n        if x == 38:\n            return 4\n        if x == 39:\n            return 4\n        if x == 40:\n            return 4\n        if x == 41:\n            return 4\n        if x == 42:\n            return 4\n        if x == 43:\n            return 4\n        if x == 44:\n            return 4\n        if x == 45:\n            return 4\n        if x == 46:\n            return 4\n        if x == 47:\n            return 4\n        if x == 48:\n            return 4\n        if x == 49:\n            return 4\n        if x == 50:\n            return 4\n        if x == 51:\n            return 4\n        if x == 52:\n            return 4\n        if x == 53:\n            return 4\n        if x == 54:\n            return 4\n        if x == 55:\n            return 4\n        if x == 56:\n            return 4\n        if x == 57:\n            return 4\n        if x == 58:\n            return 4\n        if x == 59:\n            return 4\n        if x == 60:\n            return 4\n        if x == 61:\n            return 4\n        if x == 62:\n            return 4\n        if x == 63:\n            return 4\n        if x == 64:\n            return 4\n        if x == 65:\n            return 4\n        if x == 66:\n            return 4\n        if x == 67:\n            return 4\n        if x == 68:\n            return 4\n        if x == 69:\n            return 4\n        if x == 70:\n            return 4\n        if x == 71:\n            return 4\n        if x == 72:\n            return 4\n        if x == 73:\n            return 4\n        if x == 74:\n            return 4\n        if x == 75:\n            return 4\n        if x == 76:\n            return 4\n        if x == 77:\n            return 4\n        if x == 78:\n            return 4\n        if x == 79:"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        roman_dict_reverse = {'I':1, 'V':10, 'X':100, 'L':1000, 'C':10000, 'D':100000, 'M':1000000}\n        roman_dict_reverse_inv = {'1':'I', '10':'X', '100':'C', '1000':'M', '10000':'D', '100000':'L', '1000000':'V'}\n        roman_dict_inv = {'1':'I', '10':'X', '100':'C', '1000':'M', '10000':'D', '100000':'L', '1000000':'V'}\n        roman_dict_inv_reverse = {'I':1, 'X':10, 'C':100, 'M':1000, 'D':10000, 'L':100000, 'V':1000000}\n        roman_dict_inv_reverse_inv = {'1':'I', '10':'X', '100':'C', '1000':'M', '10000':'D', '100000':'L', '1000000':'V'}\n        roman_dict_inv_reverse_inv_inv = {'I':1, 'X':10, 'C':100, 'M':1000, 'D':10000, 'L':100000, 'V':1000000}\n        roman_dict_inv_reverse_inv_inv_inv = {'1':'I', '10':'X', '100':'C', '1000':'M', '10000':'D', '100000':'L', '1000000':'V'}\n        roman_dict_inv_reverse_inv_inv_inv_inv = {'I':1, 'X':10, 'C':100, 'M':1000, 'D':10000, 'L':100000, 'V':1000000}\n        roman_dict_inv_reverse_inv_inv_inv_inv_inv = {'1':'I', '10':'X', '100':'C', '1000':'M', '10000':'D', '100000':'L', '1000000':'V'}\n        roman_dict_inv_reverse_inv_inv_inv_inv_inv_inv = {'I':1, 'X':10, 'C':100, 'M':1000, 'D':10000, 'L':100000, 'V':1000000}\n        roman_dict_inv_reverse_inv_inv_inv_inv_inv_inv_inv = {'1':'I', '10':'X', '100':'C', '1000':'M', '10000':'D', '100000':'L', '1000000':'V'}\n        roman_dict_inv_reverse_inv_inv_inv_inv_inv_inv_inv = {'I':1, 'X':10, 'C':100, 'M':1000, 'D':10000, 'L':100000, 'V':1000000}\n        roman_dict_inv_reverse_inv_inv_inv_inv_inv_inv_inv_inv = {'1':'I', '10':'X', '100':'C', '1000':'M', '10000':"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [nums[0]]\n        \n        if len(nums) == 2:\n            return [max(nums[0], nums[1]), max(nums[0], nums[1])]\n        \n        max_list = []\n        max_list.append(max(nums[0:k]))\n        \n        for i in range(k, len(nums)):\n            max_list.append(max(max_list[-1], max(nums[i-k+1:i+1])))\n        \n        return max_list"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\""}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] < nums[r]:\n                r = mid\n            else:\n                l = mid + 1\n        return nums[l]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,55,165,320,435,435,320,165,55,11,1]\n        if rowIndex == 12:\n            return [1,12,66,220,495,792,924,924,792,495,220,66,12,1]\n        if rowIndex == 13:\n            return [1,13,77,286,715,1287,1716,1716,1287,715,286,77,13,1]\n        if rowIndex == 14:\n            return [1,14,88,364,1001,2002,3003,3432,3003,2002,1001,364,88,14,1]\n        if rowIndex == 15:\n            return [1,15,99,441,1331,3003,5679,8765,11540,13310,13310,8765,5679,3003,1331,364,88,14,1]\n        if rowIndex == 16:\n            return [1,16,100,495,1656,4164,8569,13974,20481,28088,36695,45302,54909,64516,74123,83730,93337,102944,112551,122158,131765,141372,150979,160586,170193,179800,189407,199014,208621,218228,227835,237442,247049,256656,266263,275870,285477,295084,304691,314298,323905,333512,343119,352726,362333,371940,381547,391154,400761,410368,419975,429582,439189,448796,458403,468010,4776"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            path.append(root.val)\n            if not root.left and not root.right and targetSum == root.val:\n                return [path]\n            return dfs(root.left, targetSum - root.val, path) + dfs(root.right, targetSum - root.val, path)\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(int(area**0.5), 0, -1):\n            if area % i == 0:\n                return [area//i, i]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            return 1 + max(height(root.left), height(root.right))\n        \n        if not root:\n            return True\n        return abs(height(root.left) - height(root.right)) <= 1 and self.isBalanced(root.left) and self.isBalanced(root.right)"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        def backtrack(start, path):\n            res.append(path[:])\n            for i in range(start, len(nums)):\n                if i > start and nums[i] == nums[i - 1]:\n                    continue\n                path.append(nums[i])\n                backtrack(i + 1, path)\n                path.pop()\n        backtrack(0, [])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(heights)\n        left = [0] * n\n        right = [0] * n\n        stack = []\n        for i in range(n):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                left[i] = 0\n            else:\n                left[i] = stack[-1] + 1\n            stack.append(i)\n        stack = []\n        for i in range(n-1,-1,-1):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                right[i] = n - 1\n            else:\n                right[i] = stack[-1] - 1\n            stack.append(i)\n        ans = 0\n        for i in range(n):\n            ans = max(ans, (right[i] - left[i] + 1) * heights[i])\n        return ans"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        xmin, ymin, xmax, ymax = float('inf'), float('inf'), float('-inf'), float('-inf')\n        for x, y, a, b in rectangles:\n            xmin, ymin, xmax, ymax = min(xmin, x), min(ymin, y), max(xmax, a), max(ymax, b)\n        area = (xmax - xmin) * (ymax - ymin)\n        for x, y, a, b in rectangles:\n            area -= (a - x) * (b - y)\n        return area == 0"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = ''\n        while columnNumber:\n            columnNumber, rem = divmod(columnNumber - 1, 26)\n            ans = chr(65 + rem) + ans\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        for i in range(len(nums)):\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += nums[i]\n            max_sum = max(max_sum, cur_sum)\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def swap(board, i, j):\n            board[i][j], board[i][j + 1] = board[i][j + 1], board[i][j]\n            return board\n        \n        def isSolved(board):\n            return board == [[1,2,3],[4,5,0]]\n        \n        def getNeighbors(board):\n            i, j = board.index(0)\n            neighbors = []\n            if i > 0:\n                neighbors.append(swap(board, i, j))\n            if i < 1:\n                neighbors.append(swap(board, i, j))\n            if j < 2:\n                neighbors.append(swap(board, i, j))\n            if j > 1:\n                neighbors.append(swap(board, i, j))\n            return neighbors\n        \n        def bfs(board):\n            queue = [(board, 0)]\n            visited = set()\n            while queue:\n                board, moves = queue.pop(0)\n                if isSolved(board):\n                    return moves\n                for neighbor in getNeighbors(board):\n                    if neighbor not in visited:\n                        visited.add(tuple(neighbor))\n                        queue.append((neighbor, moves + 1))\n            return -1\n        \n        return bfs(tuple(board))"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n                \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            if nums[m] < nums[r]:\n                if nums[m] < target and target <= nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n            else:\n                if nums[l] <= target and target < nums[m]:\n                    r = m - 1\n                else:\n                    l = m + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        return dp[m - 1][n - 1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = float('inf')\n        for i in range(len(nums)-2):\n            l = i + 1\n            r = len(nums) - 1\n            while l < r:\n                sum = nums[i] + nums[l] + nums[r]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    l += 1\n                else:\n                    r -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, arr):\n            if root:\n                inorder(root.left, arr)\n                arr.append(root.val)\n                inorder(root.right, arr)\n            return arr\n        \n        arr = inorder(root, [])\n        arr.sort()\n        min_diff = float('inf')\n        for i in range(1, len(arr)):\n            min_diff = min(min_diff, arr[i] - arr[i - 1])\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Your CodeOmpletion object will be instantiated and called as such:\n# obj = Solution(root)\n# param_1 = obj.findMode(root)"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        for i in range(len(haystack)):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(password)\n        if n < 6:\n            return 6 - n\n        if n <= 20:\n            return 0\n        if n > 20:\n            return 4\n\n        cnt = 0\n        for i in range(n):\n            if password[i].isdigit():\n                cnt += 1\n            if password[i].islower():\n                cnt += 1\n            if password[i].isupper():\n                cnt += 1\n        if cnt < 3:\n            return 3 - cnt\n        if cnt > 3:\n            return 4\n        return 0"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n > 0:\n            count += n // 5\n            n //= 5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for i in range(numRows)]\n        i = 0\n        j = 0\n        direction = 1\n        for c in s:\n            res[i] += c\n            if i == numRows - 1:\n                direction = -1\n            if i == 0:\n                direction = 1\n            i += direction\n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(height)\n        left, right = 0, n - 1\n        left_max, right_max = 0, 0\n        ans = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                left_max = max(left_max, height[left])\n                ans += left_max - height[left]\n                left += 1\n            else:\n                right_max = max(right_max, height[right])\n                ans += right_max - height[right]\n                right -= 1\n        \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            j = nums[i] - 1\n            if j < n and nums[j] != nums[i]:\n                nums[i], nums[j] = nums[j], nums[i]\n                i -= 1\n        ans = []\n        for i in range(n):\n            if nums[i] != i + 1:\n                ans.append(i + 1)\n        return ans"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\""}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(n, left, right, res, cur):\n            if left == right == n:\n                res.append(cur)\n                return\n            if left < n:\n                backtrack(n, left + 1, right, res, cur + '(')\n            if right < left:\n                backtrack(n, left, right + 1, res, cur + ')')\n        \n        res = []\n        backtrack(n, 0, 0, res, '')\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\""}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = (i >= 2) and dp[i - 2] + 2 or 2\n                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + (i - dp[i - 1] - 2 >= 0) * 2 + 2\n        return max(dp)"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = []\n        if (numerator < 0) ^ (denominator < 0):\n            res.append(\"-\")\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        res.append(str(numerator // denominator))\n        numerator = numerator % denominator\n        \n        if numerator == 0:\n            return \"\".join(res)\n        \n        res.append(\".\")\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res.insert(seen[numerator], \"(\")\n                res.append(\")\")\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res.append(str(numerator // denominator))\n            numerator = numerator % denominator\n        \n        return \"\".join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        dummy = ListNode()\n        cur = dummy\n        while left and right:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        if left:\n            cur.next = left\n        if right:\n            cur.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def binary_search(arr, target):\n            left, right = 0, len(arr) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if arr[mid] < target:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return left\n\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for envelope in envelopes:\n            if not dp or dp[-1] < envelope[1]:\n                dp.append(envelope[1])\n            else:\n                index = binary_search(dp, envelope[1])\n                dp[index] = envelope[1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        row_zero = False\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    matrix[0][j] = 0\n                    if i > 0:\n                        matrix[i][0] = 0\n                    else:\n                        row_zero = True\n        \n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[0][j] == 0 or matrix[i][0] == 0:\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            for i in range(rows):\n                matrix[i][0] = 0\n        \n        if row_zero:\n            for i in range(rows):\n                matrix[i][0] = 0\n\n# Complete python3 code to solve the following coding problem:\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\n\u00a0\nExample 1:\n\nInput: s = \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer."}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0, head)\n        left = dummy\n        right = head\n        \n        while n > 0 and right:\n            right = right.next\n            n -= 1\n        \n        while right:\n            left = left.next\n            right = right.next\n        \n        left.next = left.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1).intersection(set(nums2)))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\""}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\""}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        def listToBST(head, left, right):\n            if left > right:\n                return None\n            mid = (left + right) // 2\n            left = listToBST(head, left, mid - 1)\n            root = TreeNode(head.val)\n            root.left = left\n            head = head.next\n            root.right = listToBST(head, mid + 1, right)\n            return root\n        \n        if not head:\n            return None\n        left = head\n        right = head\n        while right.next and right.next.next:\n            left = left.next\n            right = right.next.next\n        root = listToBST(left, 0, right)\n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        heights = [0] * cols\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        i = 0\n        \n        while i < len(heights):\n            if not stack or heights[i] > heights[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                area = heights[top] * (i if not stack else i - stack[-1] - 1)\n                max_area = max(max_area, area)\n        \n        while stack:\n            top = stack.pop()\n            area = heights[top] * (i if not stack else i - stack[-1] - 1)\n            max_area = max(max_area, area)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(nums, i, path, res):\n            res.append(path)\n            for j in range(i, len(nums)):\n                dfs(nums, j + 1, path + [nums[j]], res)\n        \n        res = []\n        dfs(sorted(nums), 0, [], res)\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] < nums[r]:\n                r = m\n            elif nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r -= 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        if s[0] in ['+', '-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+', '-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if 'e' in s:\n            s = s.split('e')\n            if len(s) != 2:\n                return False\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s[0]:\n                return False\n            if not s[1]:\n                return False\n            if s[0][0] in ['+', '-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+', '-']:\n                s[1] = s[1][1:]\n            if not s["}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        \n        for i in roman.keys():\n            while num >= i:\n                result += roman[i]\n                num -= i\n                \n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        for i in t:\n            if i not in s:\n                return i\n            else:\n                s = s.replace(i, '', 1)"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def solve(board):\n            # Find an empty cell\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for k in range(1, 10):\n                            if self.valid(board, i, j, str(k)):\n                                board[i][j] = str(k)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n\n        def valid(board, i, j, k):\n            # Check row\n            for l in range(9):\n                if l != j and board[i][l] == k:\n                    return False\n\n            # Check column\n            for l in range(9):\n                if l != i and board[l][j] == k:\n                    return False\n\n            # Check 3x3 box\n            box_i = i // 3\n            box_j = j // 3\n            for l in range(3):\n                for m in range(3):\n                    if l != box_i and m != box_j and board[box_i * 3 + l][box_j * 3 + m] == k:\n                        return False\n\n            return True\n\n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = None\n        y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x:\n                    break\n                x = self.arr[i]\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = None\n        y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x:\n                    break\n                x = self.arr[i]\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = None\n        y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x:\n                    break\n                x = self.arr[i]\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.arr.append(root)\n                inorder(root.right)\n        \n        self.arr = []\n        inorder(root)\n        n = len(self.arr)\n        x = None\n        y = None\n        for i in range(n-1):\n            if self.arr[i].val > self.arr[i+1].val:\n                y = self.arr[i+1]\n                if x:\n                    break\n                x = self.arr[i]\n        x.val, y.val = y.val, x.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = self.reverseList(slow)\n        fast = head\n        \n        while slow:\n            if slow.val != fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        \n        return True\n    \n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        i = 1\n        while i * i < num:\n            i += 1\n        return i * i == num"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0]\n        for i in range(1, n + 1):\n            ans.append(ans[i & (i - 1)] + 1)\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if len(s1) == 1:\n            return s1 == s2\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        path = path.split('/')\n        stack = []\n        for i in path:\n            if i == '':\n                continue\n            elif i == '..':\n                if stack:\n                    stack.pop()\n            else:\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for i in s_dict:\n            if s_dict[i] != t_dict.get(i, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        def isValid(board):\n            for i in range(9):\n                if len(set(board[i])) != 9:\n                    return False\n            for i in range(9):\n                if len(set([board[j][i] for j in range(9)])) != 9:\n                    return False\n            for i in range(3):\n                for j in range(3):\n                    if len(set([board[i*3+k][j*3+l] for k in range(3) for l in range(3)])) != 9:\n                        return False\n            return True\n        \n        return isValid(board)"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                answer.append(\"Fizz\")\n            elif i % 5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        s = s.strip()\n        s = s.split()\n        s = s[::-1]\n        s = ' '.join(s)\n        return s"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        ans = 0\n        for i in range(len(columnTitle)):\n            ans = ans * 26 + (ord(columnTitle[i]) - ord('A') + 1)\n        return ans"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        second = self.reverse(second)\n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n    \n    def reverse(self, head):\n        prev = None\n        while head:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]] != s[i]:\n                    return False\n            else:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, res, path):\n            if len(nums) == 0:\n                res.append(path)\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], res, path + [nums[i]])\n        \n        res = []\n        backtrack(nums, res, [])\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        for i in range(m):\n            if matrix[i][0] > target:\n                return False\n            if matrix[i][n-1] < target:\n                continue\n            l = 0\n            r = n-1\n            while l <= r:\n                mid = (l+r)//2\n                if matrix[i][mid] == target:\n                    return True\n                elif matrix[i][mid] < target:\n                    l = mid+1\n                else:\n                    r = mid-1\n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        l1 = self.reverse(l1)\n        l2 = self.reverse(l2)\n        l3 = []\n        carry = 0\n        while l1 or l2:\n            if l1:\n                l3.append((l1.val + carry) % 10)\n                carry = (l1.val + carry) // 10\n                l1 = l1.next\n            if l2:\n                l3.append((l2.val + carry) % 10)\n                carry = (l2.val + carry) // 10\n                l2 = l2.next\n        if carry:\n            l3.append(carry)\n        l3 = self.reverse(l3)\n        return l3\n        \n    def reverse(self, l):\n        prev = None\n        while l:\n            next = l.next\n            l.next = prev\n            prev = l\n            l = next\n        return prev"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        binary = bin(num)[2:]\n        complement = ''\n        for i in binary:\n            if i == '1':\n                complement += '0'\n            else:\n                complement += '1'\n        return int(complement, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [0] * n\n        for i in range(n):\n            for j in range(i):\n                if nums[i] - nums[j] == nums[j] - nums[j - 1]:\n                    dp[i] += dp[j] + 1\n        return sum(dp)"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\""}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def is_concatenated(word, words):\n            if word in words:\n                return True\n            for i in range(1, len(word)):\n                left = word[:i]\n                right = word[i:]\n                if left in words and right in words:\n                    return True\n            return False\n\n        words.sort(key=lambda x: len(x))\n        return [word for word in words if is_concatenated(word, words)]"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            num = abs(num)\n        ans = \"\"\n        while num:\n            ans = str(num % 7) + ans\n            num //= 7\n        return ans"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n\n        def backtrack(board, row):\n            if row == n:\n                self.count += 1\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n\n        self.count = 0\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return self.count"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n\n        def dfs(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    dfs(board, row + 1)\n                    board[row][col] = '.'\n\n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i + 1, j, k + 1) or dfs(i - 1, j, k + 1) or dfs(i, j + 1, k + 1) or dfs(i, j - 1, k + 1)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        \n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            return sorted(nums)[-3]"}]}