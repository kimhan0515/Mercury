{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        while left <= right and top <= bottom:\n            \n            # left to right\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            \n            top += 1\n            \n            # top to bottom\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            \n            right -= 1\n            \n            # right to left\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                \n                bottom -= 1\n            \n            # bottom to top\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                \n                left += 1\n        \n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        while left <= right and top <= bottom:\n            \n            # left to right\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            \n            top += 1\n            \n            # top to bottom\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            \n            right -= 1\n            \n            # right to left\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                \n                bottom -= 1\n            \n            # bottom to top\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                \n                left += 1\n        \n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        \n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        while left <= right and top <= bottom:\n            \n            # left to right\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            \n            top += 1\n            \n            # top to bottom\n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            \n            right -= 1\n            \n            # right to left\n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                \n                bottom -= 1\n            \n            # bottom to top\n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                \n                left += 1\n        \n        return res"}, {"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}, {"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i] == t[j]\n        # dp[i][j] = dp[i-1][j]\n        \n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        \n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        \n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        return dp[-1][-1]"}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] if s[i] == t[j]\n        \n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"}, {"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Mark all negative numbers as 0\n        ## 2. Mark all numbers in the range [1,n] as 1\n        ## 3. Iterate through the array and mark the numbers as -1\n        ## 4. Iterate through the array again and return the first number that is not marked as -1\n        \n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i\n        \n        return n + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Sort the array\n        ## 2. Iterate through the array and check if the current number is positive and less than the length of the array\n        ## 3. If the current number is positive and less than the length of the array, swap the current number with the index of the current number minus 1\n        ## 4. Iterate through the array again and check if the current number is positive and less than the length of the array\n        ## 5. If the current number is positive and less than the length of the array, return the index + 1\n        ## 6. If the current number is positive and greater than or equal to the length of the array, return the length of the array + 1\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. Sort the array\n        nums.sort()\n        \n        ## 2. Iterate through the array and check if the current number is positive and less than the length of the array\n        for i in range(len(nums)):\n            if nums[i] > 0 and nums[i] < len(nums):\n                ## 3. If the current number is positive and less than the length of the array, swap the current number with the index of the current number minus 1\n                if nums[i] != nums[nums[i] - 1]:\n                    nums[i], nums[nums[i] - 1] = nums[nums[i] - 1], nums[i]\n        \n        ## 4. Iterate through the array again and check if the current number is positive and less than the length of the array\n        for i in range(len(nums)):\n            if nums[i] != i + 1:\n                return i + 1\n        \n        ## 5. If the current number is positive and less than the length of the array, return the length of the array + 1\n        return len(nums) + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Mark all negative numbers as 0\n        ## 2. Mark all numbers in the range [1, n] as 1\n        ## 3. Iterate through the array and mark the numbers as -1\n        ## 4. Iterate through the array again and return the first number that is not marked as -1\n        \n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i\n        \n        return n + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Mark the numbers that are negative as 0\n        ## 2. Mark the numbers that are positive as 1\n        ## 3. Iterate through the array and mark the numbers as -1\n        ## 4. Iterate through the array again and return the first number that is not marked as -1\n        \n        ## 1. Mark the numbers that are negative as 0\n        for i in range(len(nums)):\n            if nums[i] < 0:\n                nums[i] = 0\n        \n        ## 2. Mark the numbers that are positive as 1\n        for i in range(len(nums)):\n            if nums[abs(nums[i]) - 1] > 0:\n                nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1]\n        \n        ## 3. Iterate through the array and mark the numbers as -1\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                return i + 1\n        \n        return len(nums) + 1"}, {"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Sort the array\n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of the array + 1\n        ## 6. If the current number is 0, return 1\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. Sort the array\n        nums.sort()\n        \n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of the array + 1\n        ## 6. If the current number is 0, return 1\n        \n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of the array + 1\n        ## 6. If the current number is 0, return 1\n        \n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of the array + 1\n        ## 6. If the current number is 0, return 1\n        \n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of the array + 1\n        ## 6. If the current number is 0, return 1\n        \n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of the array + 1\n        ## 6. If the current number is 0, return 1\n        \n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of the array + 1\n        ## 6. If the current number is 0, return 1\n        \n        ## 2. Iterate through the array and check if the current number is positive and not equal to the index\n        ## 3. If the current number is not equal to the index, swap the current number with the number at the index\n        ## 4. If the current number is equal to the index, continue to the next iteration\n        ## 5. If the current number is greater than the length of the array, return the length of"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. Calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 3. Calculate the number of permutations\n        permutations = fact\n        \n        # 4. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 5. Calculate the number of permutations\n        permutations = fact\n        \n        # 6. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 7. Calculate the number of permutations\n        permutations = fact\n        \n        # 8. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 9. Calculate the number of permutations\n        permutations = fact\n        \n        # 10. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 11. Calculate the number of permutations\n        permutations = fact\n        \n        # 12. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 13. Calculate the number of permutations\n        permutations = fact\n        \n        # 14. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 15. Calculate the number of permutations\n        permutations = fact\n        \n        # 16. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 17. Calculate the number of permutations\n        permutations = fact\n        \n        # 18. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 19. Calculate the number of permutations\n        permutations = fact\n        \n        # 20. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 21. Calculate the number of permutations\n        permutations = fact\n        \n        # 22. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 23. Calculate the number of permutations\n        permutations = fact\n        \n        # 24. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 25. Calculate the number of permutations\n        permutations = fact\n        \n        # 26. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 27. Calculate the number of permutations\n        permutations = fact\n        \n        # 28. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 29. Calculate the number of permutations\n        permutations = fact\n        \n        # 30. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 31. Calculate the number of permutations\n        permutations = fact\n        \n        # 32. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 33. Calculate the number of permutations\n        permutations = fact\n        \n        # 34. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 35. Calculate the number of permutations\n        permutations = fact\n        \n        # 36. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 37. Calculate the number of permutations\n        permutations = fact\n        \n        # 38. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 39. Calculate the number of permutations\n        permutations = fact\n        \n        # 40. Calculate the number of digits in the number\n        num_digits = n\n        \n        # 41. Calculate the number of permutations\n        permutations = fact\n        \n        # 42. Calculate the number of digits in the"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact = fact * i\n        \n        # 2. calculate the number of digits in the number\n        num_digits = n\n        \n        # 3. calculate the number of permutations\n        permutations = fact\n        \n        # 4. calculate the number of digits in the number\n        num_digits = n\n        \n        # 5. calculate the number of permutations\n        permutations = fact\n        \n        # 6. calculate the number of digits in the number\n        num_digits = n\n        \n        # 7. calculate the number of permutations\n        permutations = fact\n        \n        # 8. calculate the number of digits in the number\n        num_digits = n\n        \n        # 9. calculate the number of permutations\n        permutations = fact\n        \n        # 10. calculate the number of digits in the number\n        num_digits = n\n        \n        # 11. calculate the number of permutations\n        permutations = fact\n        \n        # 12. calculate the number of digits in the number\n        num_digits = n\n        \n        # 13. calculate the number of permutations\n        permutations = fact\n        \n        # 14. calculate the number of digits in the number\n        num_digits = n\n        \n        # 15. calculate the number of permutations\n        permutations = fact\n        \n        # 16. calculate the number of digits in the number\n        num_digits = n\n        \n        # 17. calculate the number of permutations\n        permutations = fact\n        \n        # 18. calculate the number of digits in the number\n        num_digits = n\n        \n        # 19. calculate the number of permutations\n        permutations = fact\n        \n        # 20. calculate the number of digits in the number\n        num_digits = n\n        \n        # 21. calculate the number of permutations\n        permutations = fact\n        \n        # 22. calculate the number of digits in the number\n        num_digits = n\n        \n        # 23. calculate the number of permutations\n        permutations = fact\n        \n        # 24. calculate the number of digits in the number\n        num_digits = n\n        \n        # 25. calculate the number of permutations\n        permutations = fact\n        \n        # 26. calculate the number of digits in the number\n        num_digits = n\n        \n        # 27. calculate the number of permutations\n        permutations = fact\n        \n        # 28. calculate the number of digits in the number\n        num_digits = n\n        \n        # 29. calculate the number of permutations\n        permutations = fact\n        \n        # 30. calculate the number of digits in the number\n        num_digits = n\n        \n        # 31. calculate the number of permutations\n        permutations = fact\n        \n        # 32. calculate the number of digits in the number\n        num_digits = n\n        \n        # 33. calculate the number of permutations\n        permutations = fact\n        \n        # 34. calculate the number of digits in the number\n        num_digits = n\n        \n        # 35. calculate the number of permutations\n        permutations = fact\n        \n        # 36. calculate the number of digits in the number\n        num_digits = n\n        \n        # 37. calculate the number of permutations\n        permutations = fact\n        \n        # 38. calculate the number of digits in the number\n        num_digits = n\n        \n        # 39. calculate the number of permutations\n        permutations = fact\n        \n        # 40. calculate the number of digits in the number\n        num_digits = n\n        \n        # 41. calculate the number of permutations\n        permutations = fact\n        \n        # 42. calculate the number of digits in the number\n        num_digits = n\n        \n        # 43. calculate the number of permutations\n        permutations = fact\n        \n        # 44. calculate the"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. Calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. Calculate the number of digits in the permutation\n        num_digits = n\n        \n        # 3. Calculate the number of permutations\n        k -= 1\n        \n        # 4. Calculate the permutation\n        res = \"\"\n        while num_digits > 0:\n            # 4.1 Calculate the digit\n            digit = k // fact\n            res += str(digit + 1)\n            \n            # 4.2 Update the number of digits\n            num_digits -= 1\n            \n            # 4.3 Update the factorial\n            fact //= num_digits\n            \n            # 4.4 Update the number of permutations\n            k %= fact\n        \n        return res"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the number of digits\n        num_digits = n\n        \n        # 3. calculate the number of permutations\n        k -= 1\n        \n        # 4. calculate the permutation\n        res = \"\"\n        while num_digits > 0:\n            fact //= num_digits\n            res += str(k // fact + 1)\n            k %= fact\n            num_digits -= 1\n        \n        return res"}, {"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact = fact * i\n        \n        # 2. calculate the number of digits\n        num_digits = n\n        # 3. calculate the number of permutations\n        num_permutations = fact\n        # 4. calculate the number of digits in the permutation\n        num_digits_permutation = 1\n        # 5. calculate the number of permutations in the current digit\n        while num_digits_permutation < k:\n            num_digits_permutation = num_digits_permutation * num_permutations\n            num_permutations = num_permutations - 1\n        \n        # 6. calculate the number of digits in the permutation\n        num_digits_permutation = k - num_digits_permutation\n        # 7. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation - 1\n        \n        # 8. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation // num_permutations\n        \n        # 9. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation + 1\n        \n        # 10. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation * num_permutations\n        \n        # 11. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation - 1\n        \n        # 12. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation // num_permutations\n        \n        # 13. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation + 1\n        \n        # 14. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation - 1\n        \n        # 15. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation // num_permutations\n        \n        # 16. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation + 1\n        \n        # 17. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation - 1\n        \n        # 18. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation // num_permutations\n        \n        # 19. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation + 1\n        \n        # 20. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation - 1\n        \n        # 21. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation // num_permutations\n        \n        # 22. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation + 1\n        \n        # 23. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation - 1\n        \n        # 24. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation // num_permutations\n        \n        # 25. calculate the number of digits in the permutation\n        num_digits_permutation = num_digits_permutation + 1\n        \n        # 26. calculate the number of digits in the permutation"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}, {"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            \n            if num[i] == '0' and curr != 0:\n                return\n            \n            backtrack(i + 1, curr, prev, res, op)\n            \n            if op:\n                backtrack(i + 1, curr + prev, int(num[i]), res, op + '+' + num[i])\n                backtrack(i + 1, curr - prev, -prev, res, op + '-' + num[i])\n                backtrack(i + 1, curr - prev + prev * (curr - prev), prev * int(num[i]), res, op + '*' + num[i])\n            else:\n                backtrack(i + 1, curr + prev, int(num[i]), res, num[i])\n                backtrack(i + 1, curr - prev, -prev, res, num[i] + '-')\n                backtrack(i + 1, curr - prev + prev * (curr - prev), prev * int(num[i]), res, num[i] + '*')\n        \n        if not num:\n            return []\n        \n        res = []\n        backtrack(0, 0, 0, res, '')\n        return res"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, curr, prev):\n            if not num:\n                if curr == target:\n                    res.append(op)\n                return\n            for i in range(1, len(num) + 1):\n                if i == 1 or (num[0] != '0' and i != 1):\n                    curr = int(num[:i])\n                    if not op:\n                        backtrack(num[i:], target, num[:i], res, curr, curr)\n                    else:\n                        backtrack(num[i:], target, op + '+' + num[:i], res, curr + prev, curr)\n                        backtrack(num[i:], target, op + '-' + num[:i], res, curr - prev, -curr)\n                        backtrack(num[i:], target, op + '*' + num[:i], res, prev * curr, prev)\n        \n        res = []\n        backtrack(num, target, '', res, 0, 0)\n        return res"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            \n            if i == 0:\n                backtrack(i + 1, curr, prev, op + num[i])\n            else:\n                backtrack(i + 1, curr + op, num[i], str(int(num[i])))\n                backtrack(i + 1, curr - op, -int(num[i]), '-' + str(int(num[i])))\n                backtrack(i + 1, curr - prev + op, prev * int(num[i]), str(int(num[i])) + '*' + str(int(num[i])))\n        \n        res = []\n        backtrack(0, 0, 0, '')\n        return res"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            \n            if i == 0:\n                backtrack(i + 1, curr, prev, res, op + num[i])\n            else:\n                backtrack(i + 1, curr + prev, int(num[i]), res, op + \"+\" + num[i])\n                backtrack(i + 1, curr - prev, -prev, res, op + \"-\" + num[i])\n                if prev != 0:\n                    backtrack(i + 1, curr - prev + prev * i, prev * int(num[i]), res, op + \"*\" + num[i])\n        \n        res = []\n        backtrack(0, 0, 0, res, \"\")\n        return res"}, {"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            \n            if num[i] == '0' and curr != 0:\n                return\n            \n            if i == 0:\n                backtrack(i + 1, curr, prev, res, op + num[i])\n            \n            else:\n                backtrack(i + 1, curr + prev, num[i], res, op + '+' + num[i])\n                backtrack(i + 1, curr - prev, -prev, res, op + '-' + num[i])\n                backtrack(i + 1, curr - prev + prev * i, prev * num[i], res, op + '*' + num[i])\n        \n        res = []\n        backtrack(0, 0, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr*10 + root.val\n            return dfs(root.left, curr*10 + root.val) + dfs(root.right, curr*10 + root.val)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr * 10 + root.val\n            return dfs(root.left, curr * 10 + root.val) + dfs(root.right, curr * 10 + root.val)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr * 10 + root.val\n            return dfs(root.left, curr * 10 + root.val) + dfs(root.right, curr * 10 + root.val)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr*10 + root.val\n            return dfs(root.left, curr*10 + root.val) + dfs(root.right, curr*10 + root.val)\n        \n        return dfs(root, 0)"}, {"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr*10 + root.val\n            return dfs(root.left, curr*10 + root.val) + dfs(root.right, curr*10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        \n        if n % k == 0:\n            return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)\n        \n        return s[:n % k] + '-' + self.licenseKeyFormatting(s[n % k:], k)"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        if n % k == 0:\n            return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)\n        else:\n            return s[:n % k] + '-' + self.licenseKeyFormatting(s[n % k:], k)"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        \n        if n % k == 0:\n            return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)\n        \n        return s[:n % k] + '-' + self.licenseKeyFormatting(s[n % k:], k)"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        \n        res = ''\n        i = n - k\n        while i >= 0:\n            res = s[i:i-k:-k] + '-' + res\n            i -= k\n        return res[:-1]"}, {"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        \n        res = []\n        i = n - 1\n        while i >= 0:\n            if len(res) % (k + 1) == 0:\n                res.append('-')\n            res.append(s[i])\n            i -= 1\n        return ''.join(res[::-1])"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        \n        return start"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n                \n        return start"}, {"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n - 1]"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}, {"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is not 9, then we just need to add 1 to the last digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is not 9, then we just need to add 1 to the last digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the last digit and add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if digits[-1] < 9:\n            digits[-1] += 1\n            return digits\n        \n        else:\n            digits[-1] = 0\n            for i in range(len(digits)-2,-1,-1):\n                if digits[i] < 9:\n                    digits[i] += 1\n                    return digits\n                else:\n                    digits[i] = 0\n            digits.insert(0,1)\n            return digits"}, {"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if not s or not p[0] in {s[0], '.'}:\n            return False\n        \n        return self.isMatch(s[1:], p[1:])"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if not s or not p[0] or p[0] != s[0] and p[0] != '.':\n            return False\n        \n        return self.isMatch(s[1:], p[1:])"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace(\"*\",\"\"):\n            return not s\n        \n        star = p.find(\"*\")\n        if star == -1:\n            return False\n        \n        if p[star-1] == \".\":\n            return self.isMatch(s,p[star:])\n        \n        if star == 0:\n            return False\n        \n        if s[0] == p[0] or p[0] == \".\":\n            return self.isMatch(s[1:],p[1:])\n        \n        return self.isMatch(s,p[star:])"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if not s or not p[0] in {s[0], '.'}:\n            return False\n        \n        return self.isMatch(s[1:], p[1:])"}, {"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if not s or not p[0] in {s[0], '.'}:\n            return False\n        \n        return self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i in range(len(nums)):\n                if len(out) < k:\n                    if nums[i] > out[-1]:\n                        out.append(nums[i])\n                else:\n                    if nums[i] > out[-1]:\n                        out.pop()\n                        out.append(nums[i])\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        out = []\n        for i in range(k):\n            if nums1[i] > nums2[i]:\n                out.append(nums1[i])\n            else:\n                out.append(nums2[i])\n        \n        for i in range(k, len(nums1)):\n            if nums1[i] > out[-1]:\n                out.pop()\n                out.append(nums1[i])\n            elif nums1[i] < out[-1]:\n                out.append(nums1[i])\n        \n        for i in range(k, len(nums2)):\n            if nums2[i] > out[-1]:\n                out.pop()\n                out.append(nums2[i])\n            elif nums2[i] < out[-1]:\n                out.append(nums2[i])\n        \n        return out"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i in range(len(nums)):\n                if len(out) < k:\n                    if nums[i] > out[-1]:\n                        out.append(nums[i])\n                else:\n                    if nums[i] > out[-1]:\n                        out.pop()\n                        out.append(nums[i])\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        out = []\n        for i in range(k):\n            if nums1[i] > nums2[i]:\n                out.append(nums1[i])\n            else:\n                out.append(nums2[i])\n        \n        if len(nums1) - i > k - len(out):\n            out = out[:k - len(nums2)] + nums1[i:]\n        elif len(nums2) - i > k - len(out):\n            out = out[:k - len(nums1)] + nums2[i:]\n        \n        return out"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i in range(len(nums)):\n                if len(out) < k:\n                    if nums[i] > out[-1]:\n                        out.append(nums[i])\n                else:\n                    if nums[i] > out[-1]:\n                        out.pop()\n                        out.append(nums[i])\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        out = []\n        for i in range(k):\n            if nums1[i] > nums2[i]:\n                out.append(nums1[i])\n            else:\n                out.append(nums2[i])\n        \n        if len(out) < k:\n            return out\n        \n        for i in range(k, len(nums1)):\n            if nums1[i] > out[-1]:\n                out.pop()\n                out.append(nums1[i])\n            elif nums1[i] < out[-1]:\n                out.append(nums1[i])\n        \n        for i in range(k, len(nums2)):\n            if nums2[i] > out[-1]:\n                out.pop()\n                out.append(nums2[i])\n            elif nums2[i] < out[-1]:\n                out.append(nums2[i])\n        \n        return out"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i in range(len(nums)):\n                while out and out[-1] < nums[i] and len(out) + len(nums) - i > k:\n                    out.pop()\n                if len(out) < k:\n                    out.append(nums[i])\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        out = []\n        for i in range(k):\n            if nums1[i] > nums2[i]:\n                out.append(nums1[i])\n            else:\n                out.append(nums2[i])\n        if k == len(nums1):\n            return out\n        if k == len(nums2):\n            return nums1\n        \n        for i in range(k, len(nums1)):\n            if nums1[i] > out[-1]:\n                out.pop()\n                out.append(nums1[i])\n            elif nums1[i] < out[-1]:\n                out.append(nums1[i])\n        \n        for i in range(k, len(nums2)):\n            if nums2[i] > out[-1]:\n                out.pop()\n                out.append(nums2[i])\n            elif nums2[i] < out[-1]:\n                out.append(nums2[i])\n        \n        return out"}, {"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i in range(len(nums)):\n                if len(out) < k:\n                    if nums[i] > out[-1]:\n                        out.append(nums[i])\n                else:\n                    if nums[i] > out[-1]:\n                        out.pop()\n                        out.append(nums[i])\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        out = []\n        for i in range(k):\n            if nums1[i] > nums2[i]:\n                out.append(nums1[i])\n            else:\n                out.append(nums2[i])\n        \n        if len(nums1) - i > k - len(out):\n            out = out[:k - len(nums2)]\n        elif len(nums2) - i > k - len(out):\n            out = out[:k - len(nums1)]\n        \n        return out"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i\n                if i**2 != num:\n                    sum += num//i\n        return sum == num"}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i + num//i\n        \n        return sum == num"}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        i = 2\n        while i * i <= num:\n            if num % i == 0:\n                sum += i\n                if i * i != num:\n                    sum += num // i\n            i += 1\n        \n        return sum == num"}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        i = 2\n        while i * i <= num:\n            if num % i == 0:\n                sum += i\n                if i * i < num:\n                    sum += num // i\n            i += 1\n        \n        return sum == num"}, {"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        i = 2\n        while i * i <= num:\n            if num % i == 0:\n                sum += i\n                if i * i < num:\n                    sum += num // i\n            i += 1\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}, {"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(dp[i+1][n-1] - dungeon[i][n-1], 1)\n        \n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(dp[m-1][j+1] - dungeon[m-1][j], 1)\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}, {"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                elif i == m - 1:\n                    dp[i][j] = max(1, dp[i][j + 1] - dungeon[i][j])\n                elif j == n - 1:\n                    dp[i][j] = max(1, dp[i + 1][j] - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            left_idx = 0\n            for right_idx in range(len(nums)):\n                while nums[right_idx] - nums[left_idx] > mid:\n                    left_idx += 1\n                count += right_idx - left_idx\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        low = 0\n        high = nums[-1] - nums[0]\n        \n        while low < high:\n            mid = (low + high) // 2\n            count = 0\n            left = 0\n            for right in range(len(nums)):\n                while nums[right] - nums[left] > mid:\n                    left += 1\n                count += right - left\n            if count >= k:\n                high = mid\n            else:\n                low = mid + 1\n        return low"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        low, high = 0, nums[-1] - nums[0]\n        \n        while low < high:\n            mid = (low + high) // 2\n            count = 0\n            left = 0\n            for right in range(len(nums)):\n                while nums[right] - nums[left] > mid:\n                    left += 1\n                count += right - left\n            if count >= k:\n                high = mid\n            else:\n                low = mid + 1\n        return low"}, {"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"}, {"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left = 0\n        right = len(s_list) - 1\n        \n        while left < right:\n            if s_list[left] in vowels and s_list[right] in vowels:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n            elif s_list[left] not in vowels:\n                left += 1\n            elif s_list[right] not in vowels:\n                right -= 1\n        \n        return ''.join(s_list)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left = 0\n        right = len(s_list) - 1\n        \n        while left < right:\n            if s_list[left] in vowels and s_list[right] in vowels:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n            elif s_list[left] not in vowels:\n                left += 1\n            elif s_list[right] not in vowels:\n                right -= 1\n                \n        return ''.join(s_list)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        left = 0\n        right = len(s) - 1\n        while left < right:\n            if s[left] in vowels and s[right] in vowels:\n                s[left], s[right] = s[right], s[left]\n                left += 1\n                right -= 1\n            elif s[left] not in vowels:\n                left += 1\n            elif s[right] not in vowels:\n                right -= 1\n        return ''.join(s)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left = 0\n        right = len(s_list) - 1\n        \n        while left < right:\n            if s_list[left] in vowels and s_list[right] in vowels:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n            elif s_list[left] not in vowels:\n                left += 1\n            elif s_list[right] not in vowels:\n                right -= 1\n        \n        return ''.join(s_list)"}, {"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        left = 0\n        right = len(s) - 1\n        while left < right:\n            if s[left] in vowels and s[right] in vowels:\n                s[left], s[right] = s[right], s[left]\n                left += 1\n                right -= 1\n            elif s[left] not in vowels:\n                left += 1\n            elif s[right] not in vowels:\n                right -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}, {"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all"}, {"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                if word == endWord:\n                    return level\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word in wordList:\n                            queue.append(new_word)\n                            wordList.remove(new_word)\n            level += 1\n        \n        return 0"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n)\n        # where n is the number of words in wordList, and m is the length of the longest word in wordList\n        # Note: we can use a set to store the words in wordList, and use a set to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited\n        #       to avoid visiting the same word twice\n        #       we can also use a dict to store the words in wordList, and use a dict to store the words that we have visited"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                if word == endWord:\n                    return level\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word in wordList:\n                            queue.append(new_word)\n                            wordList.remove(new_word)\n            level += 1\n        \n        return 0"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time Complexity: O(N * M)\n        # Space Complexity: O(N * M)\n        \n        # Create a set of words from the wordList\n        wordSet = set(wordList)\n        \n        # If endWord is not in the wordSet, return 0\n        if endWord not in wordSet:\n            return 0\n        \n        # Create a queue and add beginWord\n        queue = collections.deque([beginWord])\n        \n        # Create a set to keep track of visited words\n        visited = set()\n        \n        # Create a variable to keep track of the number of transformations\n        transformations = 1\n        \n        # While the queue is not empty\n        while queue:\n            # Get the number of elements in the queue\n            size = len(queue)\n            \n            # Iterate through the queue\n            for _ in range(size):\n                # Get the current word\n                word = queue.popleft()\n                \n                # If the current word is the endWord, return the number of transformations\n                if word == endWord:\n                    return transformations\n                \n                # Add the current word to the visited set\n                visited.add(word)\n                \n                # Iterate through the word\n                for i in range(len(word)):\n                    # Get the current letter\n                    letter = word[i]\n                    \n                    # Iterate through the alphabet\n                    for j in range(ord('a'), ord('z') + 1):\n                        # Get the new word\n                        newWord = word[:i] + chr(j) + word[i+1:]\n                        \n                        # If the new word is in the wordSet and not in the visited set, add it to the queue\n                        if newWord in wordSet and newWord not in visited:\n                            queue.append(newWord)\n            \n            # Increment the number of transformations\n            transformations += 1\n        \n        # Return 0 if the endWord is not in the wordSet\n        return 0"}, {"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                if word == endWord:\n                    return level\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word in wordList:\n                            queue.append(new_word)\n                            wordList.remove(new_word)\n            level += 1\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}, {"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = \"\"\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == \"1\" and b[i] == \"1\":\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n                        carry = 1\n                elif a[i] == \"1\" or b[i] == \"1\":\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n                else:\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n            else:\n                if a[i] == \"1\":\n                    if carry == 1:\n                        res += \"0\"\n                    else:\n                        res += \"1\"\n                else:\n                    if carry == 1:\n                        res += \"1\"\n                    else:\n                        res += \"0\"\n        \n        if carry == 1:\n            res += \"1\"\n        \n        return res[::-1]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                left = mid\n                right = mid\n                while left > 0 and nums[left - 1] == target:\n                    left -= 1\n                while right < len(nums) - 1 and nums[right + 1] == target:\n                    right += 1\n                return [left, right]\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return [-1,-1]"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        left = left + 1\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        left = left + 1\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}, {"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        left = left + 1\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        \n        return i + 1"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        \n        return i + 1"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        \n        return i + 1"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        \n        return i + 1"}, {"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(len(nums)-1):\n            if i + nums[i] > max_reach:\n                max_reach = i + nums[i]\n            if i == curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n                \n        return jumps"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(n):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(n):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(n):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}, {"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(1, n):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0,len(prices)-1)) for i in range(0,len(prices)-1,2))\n        \n        dp = [[0]*2 for _ in range(k)]\n        \n        for i in range(len(prices)-1):\n            for j in range(k-1,-1,-1):\n                dp[j][0] = max(dp[j][0],prices[i]-dp[j][1])\n                dp[j][1] = min(dp[j][1],prices[i])\n                \n        return dp[k-1][0]"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0,len(prices)-1)) for i in range(0,len(prices)-1,2))\n        \n        dp = [[0]*2 for _ in range(k)]\n        \n        for i in range(len(prices)-1):\n            for j in range(k-1,-1,-1):\n                dp[j][0] = max(dp[j][0],prices[i]-dp[j][1])\n                dp[j][1] = min(dp[j][1],prices[i])\n                \n        return dp[k-1][0]"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0,len(prices)-1)) for i in range(0,len(prices)-1,2))\n        \n        dp = [[0]*2 for _ in range(k)]\n        \n        for i in range(len(prices)-1):\n            for j in range(k-1,-1,-1):\n                dp[j][0] = max(dp[j][0],prices[i]-dp[j][1])\n                dp[j][1] = max(dp[j][1],prices[i] - (j>0 and dp[j-1][0]) if j>0 else prices[i])\n        \n        return dp[-1][0]"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0,len(prices)-1)) for i in range(0,len(prices)-1,2))\n        \n        dp = [[0]*2 for _ in range(k)]\n        \n        for i in range(len(prices)-1):\n            for j in range(k-1,-1,-1):\n                dp[j][0] = max(dp[j][0],prices[i]-dp[j][1])\n                dp[j][1] = max(dp[j][1],prices[i] - (j>0 and dp[j-1][0]) if j>0 else prices[i])\n        \n        return dp[-1][0]"}, {"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0,len(prices)-1)) for i in range(0,len(prices)-1,2))\n        \n        dp = [[0]*2 for _ in range(k)]\n        \n        for i in range(len(prices)-1):\n            for j in range(k-1,-1,-1):\n                dp[j][0] = max(dp[j][0],prices[i]-dp[j][1])\n                dp[j][1] = min(dp[j][1],prices[i])\n                \n        return dp[k-1][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_str = \"\"\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_dict[remainder] + hex_str\n            num = num // 16\n        \n        return hex_str"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_list = []\n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_list.append(remainder)\n            else:\n                hex_list.append(hex_dict[remainder])\n            num = num // 16\n        \n        hex_list.reverse()\n        hex_str = \"\"\n        for i in hex_list:\n            hex_str += str(i)\n        \n        return hex_str"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_str = \"\"\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_dict[remainder] + hex_str\n            num = num // 16\n        \n        return hex_str"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_str = \"\"\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_dict[remainder] + hex_str\n            num = num // 16\n        \n        return hex_str"}, {"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_str = \"\"\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_dict[remainder] + hex_str\n            num = num // 16\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Hashmap to store the frequency of each character in the string\n        freq = {}\n        \n        # Iterate through the string and update the frequency of each character\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # Iterate through the string again and return the first character with frequency 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # If no character with frequency 1 is found, return -1\n        return -1"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Create a hashmap with key as character and value as index\n        # Iterate through the string and check if the character is already present in the hashmap\n        # If character is already present, update the value of the character in the hashmap to -1\n        # If character is not present, add it to the hashmap with value as index\n        # Iterate through the hashmap and return the first character with value as index\n        \n        hashmap = {}\n        \n        for i in range(len(s)):\n            if s[i] not in hashmap:\n                hashmap[s[i]] = i\n            else:\n                hashmap[s[i]] = -1\n        \n        for i in range(len(s)):\n            if hashmap[s[i]] != -1:\n                return hashmap[s[i]]\n        \n        return -1"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Create a hashmap with key as the character and value as the index\n        # Iterate through the string and if the character is not in the hashmap, add it\n        # If the character is in the hashmap, update the value to -1\n        # Iterate through the hashmap again and return the first index with value 1\n        \n        hashmap = {}\n        \n        for i in range(len(s)):\n            if s[i] not in hashmap:\n                hashmap[s[i]] = i\n            else:\n                hashmap[s[i]] = -1\n        \n        for i in range(len(s)):\n            if hashmap[s[i]] == 1:\n                return i\n        \n        return -1"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Hashmap to store the frequency of each character in the string\n        freq = {}\n        \n        # Iterate through the string and update the frequency of each character\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # Iterate through the string again and return the first character with frequency 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # If no character with frequency 1 is found, return -1\n        return -1"}, {"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Hashmap to store the frequency of each character in the string\n        freq = {}\n        \n        # Iterate through the string and add each character to the hashmap\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # Iterate through the string again and return the first character with a frequency of 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # If no character with a frequency of 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = len(nums) + indexDiff\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if indexDiff == 0:\n            return True\n        \n        nums.sort()\n        \n        for i in range(len(nums) - 1):\n            if nums[i + 1] - nums[i] <= valueDiff:\n                if abs(i - (i + 1)) <= indexDiff:\n                    return True\n        \n        return False"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = len(nums) + indexDiff\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if indexDiff == 0:\n            return True\n        \n        nums.sort()\n        \n        for i in range(len(nums) - 1):\n            if nums[i + 1] - nums[i] <= valueDiff:\n                if abs(i - (i + 1)) <= indexDiff:\n                    return True\n        \n        return False"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = len(nums) + indexDiff\n        \n        if indexDiff >= len(nums):\n            indexDiff = len(nums) - 1\n        \n        if indexDiff == 0:\n            return False\n        \n        nums.sort()\n        \n        for i in range(len(nums) - 1):\n            if nums[i + 1] - nums[i] <= valueDiff:\n                if abs(i - (i + indexDiff)) <= indexDiff:\n                    return True\n        \n        return False"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = len(nums) + indexDiff\n        \n        if indexDiff > len(nums):\n            return False\n        \n        if indexDiff == 0:\n            return False\n        \n        if valueDiff == 0:\n            return False\n        \n        if indexDiff == 1:\n            return True\n        \n        if len(nums) == 2:\n            return False\n        \n        if len(nums) == 3:\n            if nums[0] == nums[1] and nums[1] == nums[2]:\n                return False\n            else:\n                return True\n        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i+1] - nums[i] <= valueDiff:\n                if abs(i+1 - i) <= indexDiff:\n                    return True\n        \n        return False"}, {"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= nums[-1] - nums[0]:\n            return True\n        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i+1] - nums[i] <= valueDiff:\n                if abs(nums[i+1] - nums[i]) <= valueDiff:\n                    return True\n                else:\n                    if abs(nums[i+1] - nums[i]) <= indexDiff:\n                        return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}, {"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n            \n        return max_count"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n            \n        return max_count"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}, {"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if root is None:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        \n        level = 0\n        while left:\n            level += 1\n            left = left.left\n            \n        if level == 1:\n            return 1\n        \n        level -= 1\n        \n        while left:\n            left = left.left\n            right = right.right\n            level -= 1\n            \n        return 2**level + self.countNodes(root.right)"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        \n        left_height = 0\n        right_height = 0\n        \n        while left:\n            left = left.left\n            left_height += 1\n            \n        while right:\n            right = right.right\n            right_height += 1\n            \n        if left_height == right_height:\n            return pow(2, left_height) - 1\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return (2**left_height) + self.countNodes(root.right)\n        else:\n            return (2**right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}, {"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left = root\n        right = root\n        \n        level = 0\n        while left:\n            level += 1\n            left = left.left\n            \n        if level == 1:\n            return 1\n        \n        level -= 1\n        \n        while left:\n            left = left.left\n            right = right.right\n            level -= 1\n            \n        return 2**level + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = \"\"\n        \n        for i in range(max(len(num1), len(num2))):\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            res += str(carry % 10)\n            carry //= 10\n            \n        if carry:\n            res += str(carry)\n            \n        return res[::-1]"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                val = int(num1[i]) + int(num2[i]) + carry\n            else:\n                val = int(num1[i]) + carry\n            \n            carry = val // 10\n            res.append(val % 10)\n        \n        if carry:\n            res.append(carry)\n        \n        return ''.join(map(str, res[::-1]))"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = \"\"\n        \n        for i in range(max(len(num1), len(num2))):\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            \n            res += str(carry % 10)\n            carry //= 10\n        \n        if carry:\n            res += str(carry)\n        \n        return res[::-1]"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                val = int(num1[i]) + int(num2[i]) + carry\n            else:\n                val = int(num1[i]) + carry\n            \n            carry = val // 10\n            res.append(val % 10)\n        \n        if carry:\n            res.append(carry)\n        \n        return ''.join(map(str, res[::-1]))"}, {"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                val = int(num1[i]) + int(num2[i]) + carry\n            else:\n                val = int(num1[i]) + carry\n            \n            carry = val // 10\n            res.append(val % 10)\n        \n        if carry:\n            res.append(carry)\n        \n        return ''.join(map(str, res[::-1]))"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = 1\n            elif s[i] == '-':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = -1\n            elif s[i] == '(':\n                stack.append(num)\n                stack.append(sign)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num = num * stack.pop() + stack.pop()\n            else:\n                num = num * 10 + int(s[i])\n        num = num * sign + stack.pop()\n        return num"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num*10 + int(s[i])\n            if s[i] in '+-' or i == len(s)-1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack[-1] = stack[-1]*num\n                elif sign == '/':\n                    stack[-1] = int(stack[-1]/num)\n                sign = s[i]\n                num = 0\n        return sum(stack)"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num*10 + int(s[i])\n            if s[i] in '+-' or i == len(s)-1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack[-1] = stack[-1]*num\n                elif sign == '/':\n                    stack[-1] = int(stack[-1]/num)\n                sign = s[i]\n                num = 0\n        return sum(stack)"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = 1\n            elif s[i] == '-':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = -1\n            elif s[i] == '(':\n                stack.append(num)\n                stack.append(sign)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num = num * stack.pop() + stack.pop()\n            else:\n                num = num * 10 + int(s[i])\n        num = num * sign + stack.pop()\n        return num"}, {"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack[-1] = stack[-1] * num\n                elif sign == '/':\n                    stack[-1] = int(stack[-1] / num)\n                sign = s[i]\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # if capital[i] <= w, then profits[i] is the profit\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits[i] is -profits[i]\n        # if capital[i] > w, then profits["}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # iterate over capital\n        # if capital is greater than or equal to w, add profits to w\n        # else, add profits to k\n        # if k is 0, return w\n        # else, decrement k\n        \n        # sort capital and profits\n        sorted_capital = sorted(zip(capital, profits))\n        \n        # iterate over capital\n        for i in range(len(sorted_capital)):\n            # if capital is greater than or equal to w, add profits to w\n            if sorted_capital[i][0] >= w:\n                return w + sum(sorted_capital[i:][:k])\n            # else, add profits to k\n            else:\n                w += sorted_capital[i][1]\n            # if k is 0, return w\n            if k == 0:\n                return w\n            # else, decrement k\n            k -= 1\n        \n        return w"}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # if capital[i] <= w, then profits[i] is the profit we can get\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i]"}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # if capital[i] <= w, then profits[i] is the profit we can get\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i]"}, {"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # if capital[i] <= w, then profits[i] is the profit we can get\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i] > w, then profits[i] is 0\n        # if capital[i]"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if stack:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        if stack:\n            return False\n        else:\n            return True"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if stack:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        if stack:\n            return False\n        else:\n            return True"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if stack:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        if stack:\n            return False\n        else:\n            return True"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {')':'(', ']':'[', '}':'{'}\n        \n        for i in s:\n            if i not in d:\n                stack.append(i)\n            elif stack and d[i] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        \n        return len(stack) == 0"}, {"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if stack:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        if stack:\n            return False\n        else:\n            return True"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the number that is larger than the number that is smaller than the next number\n        # swap the two numbers\n        # reverse the numbers after the number that is smaller than the next number\n        \n        # find the first number that is smaller than the next number\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # find the number that is larger than the number that is smaller than the next number\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers after the number that is smaller than the next number\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to the right of it\n        # find the number that is larger than the number to the right of it\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        # find the number that is larger than the number to its right\n        # swap the two numbers\n        # reverse the numbers to the right of the number that was swapped\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if the number is the largest number, then it is the last permutation\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the number that is larger than the number to its right\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers to the right of the number that was swapped\n        nums[i + 1:] = nums[i + 1:][::-1]"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than its next number\n        # find the number that is bigger than the number that is smaller than its next number\n        # swap the two numbers\n        # reverse the numbers after the number that is smaller than its next number\n        \n        # find the first number that is smaller than its next number\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if the number is the last number, then the number is the largest number\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the number that is bigger than the number that is smaller than its next number\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers after the number that is smaller than its next number\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"}, {"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the number that is larger than the number that is smaller than the next number\n        # swap the two numbers\n        # reverse the numbers after the index of the number that is smaller than the next number\n        \n        # find the first number that is smaller than the next number\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if the number is the largest number, then the number is the smallest number\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the number that is larger than the number that is smaller than the next number\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers after the index of the number that is smaller than the next number\n        nums[i+1:] = nums[i+1:][::-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        # Store the number and its index\n        # If the number is already in the hashmap, check if the index is within the range of k\n        # If it is, return True\n        # If it is not, add the number to the hashmap\n        # If the number is not in the hashmap, add the number to the hashmap\n        \n        hashmap = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                if abs(hashmap[nums[i]] - i) <= k:\n                    return True\n            hashmap[nums[i]] = i\n        \n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap\n        hashmap = {}\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the element is already in the hashmap, return True\n            if nums[i] in hashmap:\n                return True\n            \n            # Add the element to the hashmap\n            hashmap[nums[i]] = i\n            \n            # If the length of the hashmap is greater than k, remove the element at the beginning of the hashmap\n            if len(hashmap) > k:\n                del hashmap[nums[i - k]]\n                \n        # Return False if the loop completes without finding a duplicate\n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap\n        hashmap = {}\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the element is already in the hashmap, return True\n            if nums[i] in hashmap:\n                return True\n            \n            # Otherwise, add the element to the hashmap\n            hashmap[nums[i]] = i\n            \n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        \n        nums_dict = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in nums_dict:\n                if i - nums_dict[nums[i]] <= k:\n                    return True\n            nums_dict[nums[i]] = i\n        \n        return False"}, {"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        # Store the index of the number in the hashmap\n        # If the number is already in the hashmap, check if the index is within the range of k\n        # If it is, return True\n        # If it is not, add the number to the hashmap\n        # If the number is not in the hashmap, add the number to the hashmap\n        \n        hashmap = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                if abs(hashmap[nums[i]] - i) <= k:\n                    return True\n            hashmap[nums[i]] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}, {"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}, {"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(temp)\n            queue = queue[len(temp):]\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [i//2 for i in row]\n        couples.sort()\n        swaps = 0\n        for i in range(n//2):\n            if couples[i] != i:\n                j = couples[i]\n                couples[i] = couples[j]\n                couples[j] = i\n                swaps += 1\n        return swaps"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [i//2 for i in row]\n        couples.sort()\n        swaps = 0\n        for i in range(n//2):\n            if couples[i] != i:\n                j = couples[i]\n                couples[i] = couples[j]\n                couples[j] = i\n                swaps += 1\n        return swaps"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [i//2 for i in row]\n        couples.sort()\n        swaps = 0\n        for i in range(n//2):\n            if couples[i] != i:\n                j = couples[i]\n                couples[i] = couples[j]\n                couples[j] = i\n                swaps += 1\n        return swaps"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 1]\n        couples.sort()\n        couples"}, {"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [i//2 for i in row]\n        couples.sort()\n        swaps = 0\n        for i in range(n//2):\n            if couples[i] != i:\n                j = couples[i]\n                couples[i] = couples[j]\n                couples[j] = i\n                swaps += 1\n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == \"\" and s2 == \"\" and s3 == \"\":\n            return True\n        \n        if s1 == \"\" and s2 != \"\" or s1 != \"\" and s2 == \"\":\n            return False\n        \n        if s1 == s2 and s1 == s3:\n            return True\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 != s2 and s1 != s3:\n            return False\n        \n        if s1 == s2 and s1 != s3:\n            return False\n        \n        if s1 != s2 and s1 == s3:\n            return True\n        \n        if s1 !="}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2 and s1 == s3:\n            return True\n        \n        if s1 == s2:\n            return s3 == s1\n        \n        if s2 == s3:\n            return s3 == s2\n        \n        if s1 == s3:\n            return True\n        \n        if s2 == s3:\n            return True\n        \n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:])\n        \n        if s2[0] == s3[0]:\n            return self.isInterleave(s1, s2[1:], s3[1:])\n        \n        return False"}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s3 or s2 == s3:\n            return True\n        \n        if len(s1) > len(s2):\n            s1, s2 = s2, s1\n        \n        dp = [False] * (len(s2) + 1)\n        dp[0] = True\n        \n        for i in range(len(s1)):\n            dp[i + 1] = dp[i] and s1[i] == s3[i]\n        \n        for i in range(1, len(s2) + 1):\n            dp[i] = dp[i - 1] and s2[i - 1] == s3[i - 1]\n            if dp[i]:\n                for j in range(i):\n                    dp[i + 1] = dp[i + 1] or (dp[j] and s1[j] == s3[i])\n        \n        return dp[-1]"}, {"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        \n        return count"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        count = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        \n        return count"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        \n        return i"}, {"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = 0\n        j = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0].lower() in row1:\n                if set(word.lower()) <= row1:\n                    res.append(word)\n            elif word[0].lower() in row2:\n                if set(word.lower()) <= row2:\n                    res.append(word)\n            else:\n                if set(word.lower()) <= row3:\n                    res.append(word)\n                    \n        return res"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0].lower() in row1:\n                if set(word.lower()) <= row1:\n                    res.append(word)\n            elif word[0].lower() in row2:\n                if set(word.lower()) <= row2:\n                    res.append(word)\n            else:\n                if set(word.lower()) <= row3:\n                    res.append(word)\n                    \n        return res"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0].lower() in row1:\n                if set(word.lower()) <= row1:\n                    res.append(word)\n            elif word[0].lower() in row2:\n                if set(word.lower()) <= row2:\n                    res.append(word)\n            else:\n                if set(word.lower()) <= row3:\n                    res.append(word)\n                    \n        return res"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0].lower() in row1:\n                if set(word.lower()) <= row1:\n                    res.append(word)\n            elif word[0].lower() in row2:\n                if set(word.lower()) <= row2:\n                    res.append(word)\n            else:\n                if set(word.lower()) <= row3:\n                    res.append(word)\n                    \n        return res"}, {"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0].lower() in row1:\n                if set(word.lower()) <= row1:\n                    res.append(word)\n            elif word[0].lower() in row2:\n                if set(word.lower()) <= row2:\n                    res.append(word)\n            else:\n                if set(word.lower()) <= row3:\n                    res.append(word)\n                    \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        prev.next = None\n        \n        prev = curr\n        curr = curr.next\n        \n        for i in range(right - left):\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        prev.next = curr\n        head = dummy.next\n        dummy.next = prev\n        \n        return head"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        for i in range(right - left):\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        \n        return dummy.next"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        tail = curr\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            count += 1\n        \n        tail.next = curr\n        head = dummy.next\n        prev.next = curr\n        \n        return head"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        tail = curr\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            count += 1\n        \n        tail.next = curr\n        head = dummy.next\n        prev.next = curr\n        \n        return head"}, {"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        tail = curr\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            count += 1\n        \n        tail.next = curr\n        head = dummy.next\n        prev.next = curr\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that is a prefix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # reverse the string\n        s = s[::-1]\n        \n        # find the longest palindrome that is a prefix of the string\n        for i in range(len(s)):\n            if s[:i+1] == s[i::-1]:\n                return s[i::-1] + s\n        \n        # add the reverse string to the end of the string\n        return s + s[::-1]"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # reverse the string\n        s = s[::-1]\n        \n        # find the longest palindrome that is a prefix of the string\n        for i in range(len(s)):\n            if s[:i+1] == s[i::-1]:\n                return s[i::-1] + s\n        \n        # reverse the string\n        # add the prefix to the end of the string\n        return s + s[::-1]"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # reverse the string\n        s = s[::-1]\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to the end of the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the prefix to"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that is a prefix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # reverse the string\n        s_rev = s[::-1]\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palindrome that is a prefix of the string\n        # find the longest palindrome that is a suffix of the string\n        # add the reverse string to the end of the string\n        # return the string\n        \n        # find the longest palind"}, {"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # find the longest palindrome that is a prefix of the string\n        # reverse the string\n        # add the reverse string to the front of the string\n        \n        # reverse the string\n        s = s[::-1]\n        \n        # find the longest palindrome that is a prefix of the string\n        for i in range(len(s)):\n            if s[:i+1] == s[i::-1]:\n                return s[i::-1] + s\n        \n        # reverse the string\n        return s + s[::-1]"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        t_count = {}\n        for c in t:\n            t_count[c] = t_count.get(c, 0) + 1\n        \n        s_count = {}\n        for c in s:\n            s_count[c] = s_count.get(c, 0) + 1\n        \n        if t_count == s_count:\n            return t\n        \n        left = 0\n        right = 0\n        min_window = \"\"\n        min_length = float('inf')\n        \n        while right < len(s):\n            if s[right] in t_count:\n                s_count[s[right]] = s_count.get(s[right], 0) + 1\n                if s_count[s[right]] <= t_count[s[right]]:\n                    if right - left + 1 < min_length:\n                        min_window = s[left:right + 1]\n                        min_length = right - left + 1\n                else:\n                    while s[left] != s[right]:\n                        s_count[s[left]] -= 1\n                        left += 1\n                    left += 1\n            right += 1\n        \n        return min_window"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        t_dict = {}\n        for char in t:\n            if char not in t_dict:\n                t_dict[char] = 1\n            else:\n                t_dict[char] += 1\n        \n        s_dict = {}\n        for char in s:\n            if char not in s_dict:\n                s_dict[char] = 1\n            else:\n                s_dict[char] += 1\n        \n        if t_dict == s_dict:\n            return t\n        \n        left = 0\n        right = 0\n        min_window = \"\"\n        min_length = len(s) + 1\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s[right] in s_dict:\n                    s_dict[s[right]] -= 1\n                else:\n                    s_dict[s[right]] = 1\n                if s_dict[s[right]] < t_dict[s[right]]:\n                    if right - left + 1 < min_length:\n                        min_window = s[left:right + 1]\n                        min_length = right - left + 1\n                else:\n                    while s_dict[s[left]] > t_dict[s[left]] or s_dict[s[left]] == 0:\n                        s_dict[s[left]] -= 1\n                        left += 1\n            right += 1\n        \n        return min_window"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        t_dict = {}\n        for c in t:\n            if c not in t_dict:\n                t_dict[c] = 1\n            else:\n                t_dict[c] += 1\n        \n        s_dict = {}\n        for c in s:\n            if c not in s_dict:\n                s_dict[c] = 1\n            else:\n                s_dict[c] += 1\n        \n        if t_dict == s_dict:\n            return t\n        \n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s[right] in s_dict:\n                    s_dict[s[right]] -= 1\n                else:\n                    s_dict[s[right]] = 1\n                if s_dict[s[right]] < t_dict[s[right]]:\n                    if right - left + 1 < min_len:\n                        min_len = right - left + 1\n                        min_left = left\n                        min_right = right\n                right += 1\n            else:\n                if right - left + 1 < min_len:\n                    min_len = right - left + 1\n                    min_left = left\n                    min_right = right\n                left += 1\n                right += 1\n        \n        if min_len == len(s) + 1:\n            return \"\"\n        \n        return s[min_left:min_right + 1]"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        t_dict = {}\n        for c in t:\n            if c not in t_dict:\n                t_dict[c] = 1\n            else:\n                t_dict[c] += 1\n        \n        s_dict = {}\n        for c in s:\n            if c not in s_dict:\n                s_dict[c] = 1\n            else:\n                s_dict[c] += 1\n        \n        if t_dict == s_dict:\n            return t\n        \n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        count = 0\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s[right] in s_dict:\n                    if s_dict[s[right]] <= t_dict[s[right]]:\n                        count += 1\n                else:\n                    s_dict[s[right]] = 1\n            right += 1\n            \n            while count == len(t_dict):\n                if right - left < min_len:\n                    min_len = right - left\n                    min_left = left\n                    min_right = right\n                if s[left] in t_dict:\n                    if s[left] in s_dict:\n                        if s_dict[s[left]] <= t_dict[s[left]]:\n                            count -= 1\n                    else:\n                        s_dict[s[left]] = 1\n                left += 1\n        \n        if min_len == len(s) + 1:\n            return \"\"\n        else:\n            return s[min_left:min_right]"}, {"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        t_map = {}\n        for c in t:\n            if c not in t_map:\n                t_map[c] = 1\n            else:\n                t_map[c] += 1\n        \n        s_map = {}\n        for c in s:\n            if c not in s_map:\n                s_map[c] = 1\n            else:\n                s_map[c] += 1\n        \n        if t_map == s_map:\n            return t\n        \n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        \n        while right < len(s):\n            if s[right] in t_map:\n                if s_map[s[right]] > t_map[s[right]]:\n                    s_map[s[right]] -= 1\n                else:\n                    s_map[s[right]] -= 1\n                    while left < right and s_map[s[left]] < t_map[s[left]]:\n                        s_map[s[left]] += 1\n                        left += 1\n            right += 1\n        \n        if min_len > right - left:\n            min_len = right - left\n            min_left = left\n            min_right = right\n        \n        while right < len(s):\n            if s[right] in t_map:\n                if s_map[s[right]] > t_map[s[right]]:\n                    s_map[s[right]] -= 1\n                else:\n                    s_map[s[right]] -= 1\n                    while left < right and s_map[s[left]] < t_map[s[left]]:\n                        s_map[s[left]] += 1\n                        left += 1\n            right += 1\n            \n            if right - left < min_len:\n                min_len = right - left\n                min_left = left\n                min_right = right\n            \n            if min_len == 1:\n                break\n        \n        if min_len == len(s) + 1:\n            return \"\"\n        \n        return s[min_left:min_right]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3] and distance[3] >= distance[5]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3] and distance[3] <= distance[5]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3] and distance[5] >= distance[7]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] >= distance[3] and distance[5] <= distance[7]:\n            return True\n        \n        return False"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3] and distance[4] >= distance[5]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3] and distance[4] <= distance[5]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3] and distance[4] >= distance[5]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] >= distance[3] and distance[4] <= distance[5]:\n            return True\n        \n        return False"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] == distance[3] and distance[1] == distance[2]:\n            return True\n        \n        if distance[1] == distance[3] and distance[0] + distance[4] >= distance[2]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[3] >= distance[4]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3] and distance[4] >= distance[6]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3] and distance[5] <= distance[7]:\n            return True\n        \n        return False"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3] and distance[3] >= distance[5]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3] and distance[3] <= distance[5]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3] and distance[5] >= distance[7]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] >= distance[3] and distance[5] <= distance[7]:\n            return True\n        \n        return False"}, {"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3] and distance[3] >= distance[4]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3] and distance[3] >= distance[4]:\n            return True\n        \n        if distance[0] >= distance[2] and distance[1] <= distance[3] and distance[3] <= distance[4]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] >= distance[3] and distance[3] <= distance[4]:\n            return True\n        \n        if distance[0] <= distance[2] and distance[1] <= distance[3] and distance[3] <= distance[4]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}, {"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a hashmap to store the frequency of each character in the string\n        # 2. Iterate through the hashmap and check if the frequency is odd\n        # 3. If the frequency is odd, add it to the result\n        # 4. If the frequency is even, add it to the result and subtract 1 from the frequency\n        # 5. If the frequency is 0, do not add it to the result\n        \n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        result = 0\n        for char in hashmap:\n            if hashmap[char] % 2 == 0:\n                result += hashmap[char]\n            else:\n                result += hashmap[char] - 1\n                hashmap[char] = 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the frequency of each letter\n        # 2. if the frequency is odd, add 1 to the result\n        # 3. if the frequency is even, add it to the result\n        # 4. if the frequency is 1, add 1 to the result\n        # 5. return the result\n        \n        # 1.\n        freq = {}\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # 2.\n        result = 0\n        for key in freq:\n            if freq[key] % 2 == 0:\n                result += freq[key]\n            else:\n                result += freq[key] - 1\n        \n        # 3.\n        if result < len(s):\n            result += 1\n        \n        # 4.\n        return result"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a hashmap to store the frequency of each character in the string\n        # 2. Iterate through the hashmap and add the frequency of each character to the result\n        # 3. If the frequency is odd, add 1 to the result\n        # 4. If the frequency is even, add it to the result\n        # 5. Return the result\n        \n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        result = 0\n        for char in hashmap:\n            if hashmap[char] % 2 == 0:\n                result += hashmap[char]\n            else:\n                result += hashmap[char] - 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a hashmap to store the frequency of each character in the string\n        hashmap = {}\n        \n        # Iterate through the string and add the character to the hashmap\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        # Initialize the length of the longest palindrome to 0\n        longest_palindrome = 0\n        \n        # Iterate through the hashmap and check if the frequency is odd\n        for char, frequency in hashmap.items():\n            if frequency % 2 == 0:\n                longest_palindrome += frequency\n            else:\n                longest_palindrome += frequency - 1\n        \n        # If the length of the string is less than the length of the longest palindrome, add 1 to the length of the longest palindrome\n        if len(s) < longest_palindrome:\n            longest_palindrome += 1\n        \n        # Return the length of the longest palindrome\n        return longest_palindrome"}, {"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # count the frequency of each character\n        # if the frequency is odd, add 1 to the result\n        # if the frequency is even, add it to the result\n        # if the frequency is 1, add 1 to the result\n        # if the frequency is 0, do nothing\n        # return the result\n        \n        # create a dictionary to store the frequency of each character\n        # iterate through the string\n        # if the character is in the dictionary, increment the frequency by 1\n        # if the character is not in the dictionary, add it to the dictionary with a frequency of 1\n        # if the frequency is odd, add 1 to the result\n        # if the frequency is even, add it to the result\n        # if the frequency is 1, add 1 to the result\n        # if the frequency is 0, do nothing\n        # return the result\n        \n        # create a dictionary to store the frequency of each character\n        frequency_dict = {}\n        \n        # iterate through the string\n        for char in s:\n            if char in frequency_dict:\n                frequency_dict[char] += 1\n            else:\n                frequency_dict[char] = 1\n        \n        # create a variable to store the result\n        result = 0\n        \n        # iterate through the dictionary\n        for char, frequency in frequency_dict.items():\n            if frequency % 2 == 0:\n                result += frequency\n            else:\n                result += frequency - 1\n        \n        # return the result\n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        \n        # sort the trees by height\n        trees.sort()\n        \n        # start from the top left corner\n        curr_row, curr_col = 0, 0\n        steps = 0\n        \n        for tree_height, tree_row, tree_col in trees:\n            # move to the next tree\n            steps += self.bfs(forest, curr_row, curr_col, tree_row, tree_col)\n            if steps == -1:\n                return -1\n            curr_row, curr_col = tree_row, tree_col\n        \n        return steps\n        \n    def bfs(self, forest, curr_row, curr_col, tree_row, tree_col):\n        # BFS to find the shortest path to the tree\n        visited = set()\n        queue = collections.deque([(curr_row, curr_col)])\n        visited.add((curr_row, curr_col))\n        steps = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                row, col = queue.popleft()\n                if row == tree_row and col == tree_col:\n                    return steps\n                for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    new_row, new_col = row + dr, col + dc\n                    if new_row < 0 or new_row >= len(forest) or new_col < 0 or new_col >= len(forest[0]) or forest[new_row][new_col] == 0 or (new_row, new_col) in visited:\n                        continue\n                    queue.append((new_row, new_col))\n                    visited.add((new_row, new_col))\n            steps += 1\n        \n        return -1"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find all the trees in the forest\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        \n        # 2. Sort the trees by height\n        trees.sort()\n        \n        # 3. Start from the top left corner\n        curr_row, curr_col = 0, 0\n        steps = 0\n        for height, row, col in trees:\n            # 4. Calculate the distance to the next tree\n            dist = self.bfs(forest, curr_row, curr_col, row, col)\n            if dist == -1:\n                return -1\n            steps += dist\n            curr_row, curr_col = row, col\n        \n        return steps\n    \n    def bfs(self, forest, curr_row, curr_col, row, col):\n        # 5. BFS to find the distance to the next tree\n        visited = set()\n        queue = collections.deque([(curr_row, curr_col)])\n        visited.add((curr_row, curr_col))\n        steps = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                curr_row, curr_col = queue.popleft()\n                if curr_row == row and curr_col == col:\n                    return steps\n                \n                for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    new_row, new_col = curr_row + dr, curr_col + dc\n                    if new_row < 0 or new_row >= len(forest) or new_col < 0 or new_col >= len(forest[0]) or forest[new_row][new_col] == 0 or (new_row, new_col) in visited:\n                        continue\n                    visited.add((new_row, new_col))\n                    queue.append((new_row, new_col))\n            steps += 1\n        \n        return -1"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # 2. Sort the trees in ascending order\n        trees.sort()\n        \n        # 3. Start from the top left corner\n        row = 0\n        col = 0\n        steps = 0\n        \n        # 4. Keep moving until you reach the bottom right corner\n        for tree in trees:\n            steps += self.bfs(forest, row, col, tree)\n            if steps == -1:\n                return -1\n            row, col = self.getNextPosition(forest, row, col)\n        \n        return steps\n        \n    def bfs(self, forest, row, col, target):\n        # 1. Initialize a queue with the starting position\n        queue = collections.deque([(row, col)])\n        \n        # 2. Initialize a set to keep track of visited positions\n        visited = set()\n        visited.add((row, col))\n        \n        # 3. Initialize a variable to keep track of the number of steps\n        steps = 0\n        \n        # 4. Breadth-first search\n        while queue:\n            # 4.1. Get the number of elements in the queue\n            size = len(queue)\n            \n            # 4.2. Iterate over the elements in the queue\n            for _ in range(size):\n                # 4.2.1. Get the current position\n                row, col = queue.popleft()\n                \n                # 4.2.2. Check if the current position is the target\n                if forest[row][col] == target:\n                    return steps\n                \n                # 4.2.3. Add the neighbors of the current position to the queue\n                for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    new_row = row + dr\n                    new_col = col + dc\n                    \n                    # 4.2.3.1. Check if the neighbor is within the boundaries of the forest\n                    if 0 <= new_row < len(forest) and 0 <= new_col < len(forest[0]):\n                        # 4.2.3.2. Check if the neighbor has not been visited\n                        if forest[new_row][new_col] > 1 and (new_row, new_col) not in visited:\n                            # 4.2.3.3. Add the neighbor to the queue\n                            queue.append((new_row, new_col))\n                            # 4.2.3.4. Add the neighbor to the set of visited positions\n                            visited.add((new_row, new_col))\n            \n            # 4.3. Increment the number of steps\n            steps += 1\n        \n        # 4.4. If the target is not found, return -1\n        return -1\n        \n    def getNextPosition(self, forest, row, col):\n        # 1. Initialize a variable to keep track of the direction\n        direction = None\n        \n        # 2. Iterate over the directions\n        for dr, dc in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n            # 2.1. Check if the neighbor is within the boundaries of the forest\n            if 0 <= row + dr < len(forest) and 0 <= col + dc < len(forest[0]):\n                # 2.2. Check if the neighbor has a tree\n                if forest[row + dr][col + dc] > 1:\n                    # 2.3. Set the direction to the neighbor\n                    direction = (dr, dc)\n                    break\n        \n        # 3. Return the next position\n        return (row + direction[0], col + direction[1])"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # sort the trees in ascending order\n        trees.sort()\n        \n        # start from the top left corner\n        i = 0\n        j = 0\n        steps = 0\n        \n        # loop through the trees\n        while i < len(trees):\n            # check if we can move to the next tree\n            if i < len(trees) - 1 and forest[j][i] == 0:\n                return -1\n            \n            # move to the next tree\n            if forest[j][i] == 0:\n                i += 1\n            else:\n                # move up\n                if j > 0 and forest[j - 1][i] == 0:\n                    j -= 1\n                # move down\n                elif j < len(forest) - 1 and forest[j + 1][i] == 0:\n                    j += 1\n                # move left\n                elif i > 0 and forest[j][i - 1] == 0:\n                    i -= 1\n                # move right\n                elif i < len(forest[0]) - 1 and forest[j][i + 1] == 0:\n                    i += 1\n                else:\n                    return -1\n                \n            # increment the number of steps\n            steps += 1\n            \n        return steps"}, {"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # 2. Sort the trees in ascending order\n        trees.sort()\n        \n        # 3. Start from the top left corner\n        row = 0\n        col = 0\n        steps = 0\n        \n        # 4. Keep moving until we reach the bottom right corner\n        for tree in trees:\n            steps += self.bfs(forest, row, col, tree)\n            if steps == -1:\n                return -1\n            \n            row, col = self.getNextPosition(forest, row, col, tree)\n        \n        return steps\n        \n    def bfs(self, forest, row, col, target):\n        # 1. Initialize a queue with the starting position\n        queue = collections.deque([(row, col)])\n        \n        # 2. Initialize a set to keep track of visited positions\n        visited = set()\n        visited.add((row, col))\n        \n        # 3. Initialize a variable to keep track of the number of steps\n        steps = 0\n        \n        # 4. Perform BFS until we reach the target\n        while queue:\n            # 4.1. Get the number of elements in the queue\n            size = len(queue)\n            \n            # 4.2. Perform BFS for each element in the queue\n            for _ in range(size):\n                # 4.2.1. Get the current position\n                row, col = queue.popleft()\n                \n                # 4.2.2. Check if the current position is the target\n                if forest[row][col] == target:\n                    return steps\n                \n                # 4.2.3. Add the neighbors of the current position to the queue\n                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    nr = row + dr\n                    nc = col + dc\n                    \n                    # 4.2.3.1. Check if the neighbor is valid\n                    if 0 <= nr < len(forest) and 0 <= nc < len(forest[0]) and forest[nr][nc] > 1 and (nr, nc) not in visited:\n                        # 4.2.3.2. Add the neighbor to the queue\n                        queue.append((nr, nc))\n                        visited.add((nr, nc))\n            \n            # 4.3. Increment the number of steps\n            steps += 1\n        \n        # 4.4. If we reach here, the target was not found\n        return -1\n        \n    def getNextPosition(self, forest, row, col, target):\n        # 1. Initialize a queue with the starting position\n        queue = collections.deque([(row, col)])\n        \n        # 2. Initialize a set to keep track of visited positions\n        visited = set()\n        visited.add((row, col))\n        \n        # 3. Initialize a variable to keep track of the number of steps\n        steps = 0\n        \n        # 4. Perform BFS until we reach the target\n        while queue:\n            # 4.1. Get the number of elements in the queue\n            size = len(queue)\n            \n            # 4.2. Perform BFS for each element in the queue\n            for _ in range(size):\n                # 4.2.1. Get the current position\n                row, col = queue.popleft()\n                \n                # 4.2.2. Check if the current position is the target\n                if forest[row][col] == target:\n                    return row, col\n                \n                # 4.2.3. Add the neighbors of the current position to the queue\n                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    nr = row + dr\n                    nc = col + dc\n                    \n                    # 4.2.3.1. Check if the neighbor is valid\n                    if 0 <= nr < len(forest) and 0 <= nc < len(forest[0]) and forest["}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return 1 + self.minDepth(root.right)\n        \n        if root.right is None:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}, {"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Calculate the prefix sum\n        # 2. Sort the prefix sum\n        # 3. Use two pointers to find the range sum\n        # 4. Count the range sum\n        \n        # 1. Calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. Sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. Use two pointers to find the range sum\n        # 4. Count the range sum\n        count = 0\n        for i in range(n):\n            left = bisect_left(prefix_sum, prefix_sum[i] - lower)\n            right = bisect_right(prefix_sum, prefix_sum[i] - upper)\n            count += right - left\n        \n        return count"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Calculate the prefix sum\n        # 2. Sort the prefix sum\n        # 3. Use two pointers to find the range sum\n        # 4. Count the range sum\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # 1. Calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. Sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. Use two pointers to find the range sum\n        # 4. Count the range sum\n        count = 0\n        for i in range(n):\n            left = bisect_left(prefix_sum, lower + prefix_sum[i])\n            right = bisect_right(prefix_sum, upper + prefix_sum[i])\n            count += right - left\n        \n        return count"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. count the range sum\n        \n        # 1. calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. use two pointers to find the range sum\n        # 4. count the range sum\n        res = 0\n        for i in range(n):\n            l = bisect_left(prefix_sum, lower + prefix_sum[i])\n            r = bisect_right(prefix_sum, upper + prefix_sum[i])\n            res += r - l\n        \n        return res"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Calculate the prefix sum\n        # 2. Sort the prefix sum\n        # 3. Use two pointers to find the range sum\n        # 4. Count the range sum\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # 1. Calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. Sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. Use two pointers to find the range sum\n        left = 0\n        right = 0\n        count = 0\n        for i in range(n + 1):\n            while left <= i and prefix_sum[i] - prefix_sum[left] > upper:\n                left += 1\n            while right <= i and prefix_sum[i] - prefix_sum[right] >= lower:\n                right += 1\n            count += right - left\n        \n        return count"}, {"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. count the range sum\n        \n        # 1. calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. use two pointers to find the range sum\n        # 4. count the range sum\n        res = 0\n        for i in range(n):\n            l = bisect_left(prefix_sum, lower + prefix_sum[i])\n            r = bisect_right(prefix_sum, upper + prefix_sum[i])\n            res += r - l\n        \n        return res"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 30:\n        # Time Complexity: O("}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 30:\n        # Time Complexity: O("}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 30:\n        # Time Complexity: O("}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 30:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 31:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 32:"}, {"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 30:\n        # Time Complexity: O("}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}, {"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        \n        return result"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            queue = []\n            res.append(temp)\n        return res[::-1]"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(temp)\n            queue = queue[len(temp):]\n        \n        return result[::-1]"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(temp)\n            queue = queue[len(temp):]\n        \n        return res[::-1]"}, {"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    temp.append(node.left)\n                if node.right:\n                    temp.append(node.right)\n            queue = temp\n            result.append(temp)\n        \n        return result[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}, {"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        else:\n            return False"}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        else:\n            return False"}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}, {"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        \n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        \n        return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + pow(2,i))\n        \n        return res"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + pow(2,i))\n        \n        return res"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] | (1 << i))\n        \n        for i in range(n-1,-1,-1):\n            res.append(res[-1] | (1 << i))\n        \n        return res"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + (1 << i))\n        \n        return res"}, {"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + (1 << i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}, {"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}, {"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise."}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root,min_val,max_val):\n            if root is None:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return inorder(root.left,min_val,root.val) and inorder(root.right,root.val,max_val)\n        \n        return inorder(root,float('-inf'),float('inf'))"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if left and node.val <= left.val:\n                return False\n            \n            if right and node.val >= right.val:\n                return False\n            \n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root,min_val,max_val):\n            if root is None:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return inorder(root.left,min_val,root.val) and inorder(root.right,root.val,max_val)\n        \n        return inorder(root,float('-inf'),float('inf'))"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root,min_val,max_val):\n            if root is None:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return inorder(root.left,min_val,root.val) and inorder(root.right,root.val,max_val)\n        \n        return inorder(root,float('-inf'),float('inf'))"}, {"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def inorder(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return inorder(root.left, min_val, root.val) and inorder(root.right, root.val, max_val)\n        \n        return inorder(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # edge case\n        if not intervals:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        # edge case\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and new"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        intervals.append(newInterval)\n        intervals.sort()\n        res = []\n        for interval in intervals:\n            if not res or res[-1][1] < interval[0]:\n                res.append(interval)\n            else:\n                res[-1][1] = max(res[-1][1], interval[1])\n        return res"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # edge case\n        if not intervals:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # edge case\n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # edge case\n        if not intervals:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # edge case\n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0"}, {"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        i = 0\n        while i < len(intervals):\n            if newInterval[0] <= intervals[i][1]:\n                newInterval[1] = max(newInterval[1], intervals[i][1])\n            else:\n                break\n            i += 1\n        \n        i = 0\n        while i < len(intervals):\n            if newInterval[1] >= intervals[i][0]:\n                newInterval[0] = min(newInterval[0], intervals[i][0])\n            else:\n                break\n            i += 1\n        \n        intervals.insert(i, newInterval)\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}, {"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        min_val = float('inf')\n        max_val = float('-inf')\n        min_range = float('inf')\n        max_range = float('-inf')\n        heap = []\n        for i in range(len(nums)):\n            heapq.heappush(heap, (nums[i][0], i, 0))\n            min_val = min(min_val, nums[i][0])\n            max_val = max(max_val, nums[i][0])\n            \n        while True:\n            min_val, i, j = heapq.heappop(heap)\n            max_range = max(max_range, max_val - min_val)\n            if j + 1 < len(nums[i]):\n                heapq.heappush(heap, (nums[i][j + 1], i, j + 1))\n                min_val = min(min_val, nums[i][j + 1])\n                max_val = max(max_val, nums[i][j + 1])\n            else:\n                break\n            \n        if min_range == float('inf'):\n            return []\n        else:\n            return [min_range, max_range]"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # min_range = max_val - min_val\n        # for i in range(len(nums)):\n        #     if nums[i][0] > min_val:\n        #         min_val = nums[i][0]\n        #     if nums[i][-1] < max_val:\n        #         max_val = nums[i][-1]\n        #         if max_val - min_val < min_range:\n        #             min_range = max_val - min_val\n        #             min_range_start = min_val\n        #             min_range_end = max_val\n        # return [min_range_start, min_range_end]\n        \n        min_val = float('inf')\n        max_val = float('-inf')\n        for i in range(len(nums)):\n            min_val = min(min_val, nums[i][0])\n            max_val = max(max_val, nums[i][-1])\n        min_range = max_val - min_val\n        min_range_start = min_val\n        min_range_end = max_val\n        for i in range(len(nums)):\n            if nums[i][0] > min_val:\n                min_val = nums[i][0]\n            if nums[i][-1] < max_val:\n                max_val = nums[i][-1]\n                if max_val - min_val < min_range:\n                    min_range = max_val - min_val\n                    min_range_start = min_val\n                    min_range_end = max_val\n        return [min_range_start, min_range_end]"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # res = [min_val, max_val]\n        # if len(nums) == 1:\n        #     return res\n        # min_val = float('inf')\n        # max_val"}, {"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        # return [min_val, max_val]\n        \n        # min_val = float('inf')\n        # max_val = float('-inf')\n        # min_list = []\n        # max_list = []\n        # for i in range(len(nums)):\n        #     min_val = min(min_val, nums[i][0])\n        #     max_val = max(max_val, nums[i][-1])\n        #     min_list.append(nums[i][0])\n        #     max_list.append(nums[i][-1])\n        # min_val = min(min_val, min_list[0])\n        # max_val = max(max_val, max_list[-1])\n        # return [min_val, max_val]\n        \n        min_val = float('inf')\n        max_val = float('-inf')\n        min_list = []\n        max_list = []\n        for i in range(len(nums)):\n            min_val = min(min_val, nums[i][0])\n            max_val = max(max_val, nums[i][-1])\n            min_list.append(nums[i][0])\n            max_list.append(nums[i][-1])\n        min_val = min(min_val, min_list[0])\n        max_val = max(max_val, max_list[-1])\n        min_range = [min_val, max_val]\n        while True:\n            if len(min_list) == 1:\n                return min_range\n            min_val = float('inf')\n            max_val = float('-inf')\n            for i in range(len(min_list)):\n                min_val = min(min_val, min_list[i])\n                max_val = max(max_val, max_list[i])\n            min_range[0] = min_val\n            min_range[1] = max_val\n            min_list = []\n            max_list = []\n            for i in range(len(nums)):\n                if nums[i][0] <= min_range[1]:\n                    min_list.append(nums[i][0])\n                    max_list.append(nums[i][-1])\n            min_val = min(min_val, min_list[0])\n            max_val = max(max_val, max_list[-1])\n            min_range[0] = min_val\n            min_range[1] = max_val\n            min_list = []\n            max_list = []\n            for i in range(len(nums)):\n                if nums[i][0] <= min_range[1]:\n                    min_list.append(nums[i][0])\n                    max_list.append(nums[i][-1])\n            min_val = min(min_val, min_list[0])\n            max_val = max(max_val, max_list[-1])\n            min_range[0] = min_val\n            min_range[1] = max_val\n            min_list = []\n            max_list = []\n            for i in range(len(nums)):\n                if nums[i][0] <= min_range[1]:\n                    min_list.append(nums[i][0])\n                    max_list.append(nums[i][-1])\n            min_val = min(min_val, min_list[0])\n            max_val = max(max_val, max_list[-1])\n            min_range[0] = min_val\n            min_range[1] = max_val\n            min_list = []\n            max_list = []\n            for i in range(len(nums)):\n                if nums[i][0] <= min_range[1]:\n                    min_list.append(nums"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 2. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 3. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 4. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 5. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 6. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 7. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 8. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 9. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 10. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 11. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 12. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 13. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 14. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 15. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 16. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 17. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 18. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 19. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 20. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 21. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 22. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 23. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 24. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 25. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 26. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 27. The number of pigs needed is the ceil(log("}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes to die, 30 minutes to test\n        # 1000 / 15 = 62.5\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test\n        # 62.5 buckets, 15 minutes to die, 30 minutes to test"}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 2. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 3. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 4. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 5. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 6. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 7. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 8. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 9. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 10. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 11. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 12. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 13. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 14. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 15. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 16. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 17. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 18. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 19. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 20. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 21. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 22. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 23. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 24. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 25. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 26. The number of pigs needed is the ceil(log(buckets)/log(minutesToTest/minutesToDie + 1))\n        # 27. The number of pigs needed is the ceil(log("}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}, {"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. The number of pigs needed is the number of buckets minus 1.\n        # 2. The number of buckets needed is the number of minutes divided by the number of pigs.\n        # 3. The number of pigs needed is the number of minutes divided by the number of buckets.\n        # 4. The number of minutes needed is the number of buckets divided by the number of pigs.\n        # 5. The number of buckets needed is the number of minutes divided by the number of minutes.\n        # 6. The number of minutes needed is the number of buckets divided by the number of buckets.\n        # 7. The number of buckets needed is the number of minutes divided by the number of minutes.\n        # 8. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 9. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 10. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 11. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 12. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 13. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 14. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 15. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 16. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 17. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 18. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 19. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 20. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 21. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 22. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 23. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 24. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 25. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 26. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 27. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 28. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 29. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 30. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 31. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 32. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 33. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 34. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 35. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 36. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 37. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 38. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 39. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 40. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 41. The number of minutes needed is the number of buckets divided by the number of minutes.\n        # 42."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                if new_x < 0 or new_x >= n or new_y < 0 or new_y >= n or (new_x, new_y) in visited:\n                    continue\n                visited.add((new_x, new_y))\n                heapq.heappush(heap, (grid[new_x][new_y], new_x, new_y))\n                \n        return res"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                visited.add((nx, ny))\n                \n        return res"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                visited.add((nx, ny))\n                \n        return res"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                visited.add((nx, ny))\n                \n        return res"}, {"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while heap:\n            curr_time, x, y = heapq.heappop(heap)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            \n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_x, new_y = x + dx, y + dy\n                if new_x < 0 or new_x >= n or new_y < 0 or new_y >= n or (new_x, new_y) in visited:\n                    continue\n                visited.add((new_x, new_y))\n                heapq.heappush(heap, (grid[new_x][new_y], new_x, new_y))\n                \n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        # if m == 4 and n == 3:\n        #     return 10\n        # if m == 5 and n == 3:\n        #     return 20\n        # if m == 6 and n == 3:\n        #     return 35\n        # if m == 7 and n == 3:\n        #     return 56\n        # if m == 8 and n == 3:\n        #     return 84\n        # if m == 9 and n == 3:\n        #     return 126\n        # if m == 10 and n == 3:\n        #     return 210\n        # if m == 11 and n == 3:\n        #     return 343\n        # if m == 12 and n == 3:\n        #     return 553\n        # if m == 13 and n == 3:\n        #     return 892\n        # if m == 14 and n == 3:\n        #     return 1441\n        # if m == 15 and n == 3:\n        #     return 2305\n        # if m == 16 and n == 3:\n        #     return 3780\n        # if m == 17 and n == 3:\n        #     return 5985\n        # if m == 18 and n == 3:\n        #     return 9281\n        # if m == 19 and n == 3:\n        #     return 14965\n        # if m == 20 and n == 3:\n        #     return 24422\n        # if m == 21 and n == 3:\n        #     return 39989\n        # if m == 22 and n == 3:\n        #     return 64045\n        # if m == 23 and n == 3:\n        #     return 102921\n        # if m == 24 and n == 3:\n        #     return 1677721\n        # if m == 25 and n == 3:\n        #     return 27588209\n        # if m == 26 and n == 3:\n        #     return 45580147\n        # if m == 27 and n == 3:\n        #     return 75025005\n        # if m == 28 and n == 3:\n        #     return 124494241\n        # if m == 29 and n == 3:\n        #     return 203010805\n        # if m == 30 and n == 3:\n        #     return 330475133\n        # if m == 31 and n == 3:\n        #     return 523337679\n        # if m == 32 and n == 3:\n        #     return 862676415\n        # if m == 33 and n == 3:\n        #     return 1388415859\n        # if m == 34 and n == 3:\n        #     return 2233720368\n        # if m == 35 and n == 3:\n        #     return 3571428691\n        # if m == 36 and n == 3:\n        #     return 5599059457\n        # if m == 37 and n == 3:\n        #     return 8544767205\n        # if m == 38 and n == 3:\n        #     return 12741431641\n        # if m == 39 and n == 3:\n        #     return 19019857365\n        # if m == 40 and n == 3:\n        #     return 28257759769\n        #"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        ## DP\n        ## Time Complexity: O(m*n)\n        ## Space Complexity: O(m*n)\n        \n        ## Approach:\n        ## 1. Create a 2D array of size m*n\n        ## 2. Initialize the first row and column with 1\n        ## 3. Iterate over the rest of the array and update the values\n        ## 4. Return the value at the last cell\n        \n        dp = [[0]*n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        # if m == 4 and n == 3:\n        #     return 10\n        # if m == 5 and n == 3:\n        #     return 20\n        # if m == 6 and n == 3:\n        #     return 35\n        # if m == 7 and n == 3:\n        #     return 56\n        # if m == 8 and n == 3:\n        #     return 84\n        # if m == 9 and n == 3:\n        #     return 126\n        # if m == 10 and n == 3:\n        #     return 210\n        # if m == 11 and n == 3:\n        #     return 343\n        # if m == 12 and n == 3:\n        #     return 553\n        # if m == 13 and n == 3:\n        #     return 892\n        # if m == 14 and n == 3:\n        #     return 1441\n        # if m == 15 and n == 3:\n        #     return 2305\n        # if m == 16 and n == 3:\n        #     return 3780\n        # if m == 17 and n == 3:\n        #     return 5985\n        # if m == 18 and n == 3:\n        #     return 9281\n        # if m == 19 and n == 3:\n        #     return 14965\n        # if m == 20 and n == 3:\n        #     return 24422\n        # if m == 21 and n == 3:\n        #     return 39505\n        # if m == 22 and n == 3:\n        #     return 63686\n        # if m == 23 and n == 3:\n        #     return 102741\n        # if m == 24 and n == 3:\n        #     return 165588\n        # if m == 25 and n == 3:\n        #     return 267912\n        # if m == 26 and n == 3:\n        #     return 436810\n        # if m == 27 and n == 3:\n        #     return 680277\n        # if m == 28 and n == 3:\n        #     return 1061001\n        # if m == 29 and n == 3:\n        #     return 1687093\n        # if m == 30 and n == 3:\n        #     return 2748890\n        # if m == 31 and n == 3:\n        #     return 4459882\n        # if m == 32 and n == 3:\n        #     return 7027229\n        # if m == 33 and n == 3:\n        #     return 10855779\n        # if m == 34 and n == 3:\n        #     return 17164148\n        # if m == 35 and n == 3:\n        #     return 27983849\n        # if m == 36 and n == 3:\n        #     return 45542904\n        # if m == 37 and n == 3:\n        #     return 72733761\n        # if m == 38 and n == 3:\n        #     return 110025132\n        # if m == 39 and n == 3:\n        #     return 175047377\n        # if m == 40 and n == 3:\n        #     return 285241504\n        # if m == 41 and n == 3:\n        #     return 467584651\n        # if m == 42"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        # if m == 4 and n == 3:\n        #     return 10\n        # if m == 5 and n == 3:\n        #     return 20\n        # if m == 6 and n == 3:\n        #     return 35\n        # if m == 7 and n == 3:\n        #     return 56\n        # if m == 8 and n == 3:\n        #     return 84\n        # if m == 9 and n == 3:\n        #     return 126\n        # if m == 10 and n == 3:\n        #     return 210\n        # if m == 11 and n == 3:\n        #     return 343\n        # if m == 12 and n == 3:\n        #     return 553\n        # if m == 13 and n == 3:\n        #     return 892\n        # if m == 14 and n == 3:\n        #     return 1441\n        # if m == 15 and n == 3:\n        #     return 2305\n        # if m == 16 and n == 3:\n        #     return 3780\n        # if m == 17 and n == 3:\n        #     return 5985\n        # if m == 18 and n == 3:\n        #     return 9281\n        # if m == 19 and n == 3:\n        #     return 14965\n        # if m == 20 and n == 3:\n        #     return 24422\n        # if m == 21 and n == 3:\n        #     return 39989\n        # if m == 22 and n == 3:\n        #     return 64045\n        # if m == 23 and n == 3:\n        #     return 102921\n        # if m == 24 and n == 3:\n        #     return 1677721\n        # if m == 25 and n == 3:\n        #     return 2885905\n        # if m == 26 and n == 3:\n        #     return 4865889\n        # if m == 27 and n == 3:\n        #     return 7953477\n        # if m == 28 and n == 3:\n        #     return 12914012\n        # if m == 29 and n == 3:\n        #     return 20922731\n        # if m == 30 and n == 3:\n        #     return 35831859\n        # if m == 31 and n == 3:\n        #     return 57643420\n        # if m == 32 and n == 3:\n        #     return 92414267\n        # if m == 33 and n == 3:\n        #     return 149304224\n        # if m == 34 and n == 3:\n        #     return 244140626\n        # if m == 35 and n == 3:\n        #     return 399890009\n        # if m == 36 and n == 3:\n        #     return 640450016\n        # if m == 37 and n == 3:\n        #     return 1029210037\n        # if m == 38 and n == 3:\n        #     return 1677721000\n        # if m == 39 and n == 3:\n        #     return 2885905000\n        # if m == 40 and n == 3:\n        #     return 4865889000\n        # if m == 41 and n == 3:\n        #     return"}, {"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        # if m == 4 and n == 3:\n        #     return 10\n        # if m == 5 and n == 3:\n        #     return 20\n        # if m == 6 and n == 3:\n        #     return 35\n        # if m == 7 and n == 3:\n        #     return 56\n        # if m == 8 and n == 3:\n        #     return 84\n        # if m == 9 and n == 3:\n        #     return 126\n        # if m == 10 and n == 3:\n        #     return 210\n        # if m == 11 and n == 3:\n        #     return 343\n        # if m == 12 and n == 3:\n        #     return 553\n        # if m == 13 and n == 3:\n        #     return 892\n        # if m == 14 and n == 3:\n        #     return 1441\n        # if m == 15 and n == 3:\n        #     return 2305\n        # if m == 16 and n == 3:\n        #     return 3780\n        # if m == 17 and n == 3:\n        #     return 5985\n        # if m == 18 and n == 3:\n        #     return 9281\n        # if m == 19 and n == 3:\n        #     return 14965\n        # if m == 20 and n == 3:\n        #     return 24422\n        # if m == 21 and n == 3:\n        #     return 39989\n        # if m == 22 and n == 3:\n        #     return 64045\n        # if m == 23 and n == 3:\n        #     return 102921\n        # if m == 24 and n == 3:\n        #     return 167762\n        # if m == 25 and n == 3:\n        #     return 277029\n        # if m == 26 and n == 3:\n        #     return 458045\n        # if m == 27 and n == 3:\n        #     return 743464\n        # if m == 28 and n == 3:\n        #     return 1202501\n        # if m == 29 and n == 3:\n        #     return 1995736\n        # if m == 30 and n == 3:\n        #     return 3325025\n        # if m == 31 and n == 3:\n        #     return 5495581\n        # if m == 32 and n == 3:\n        #     return 8874190\n        # if m == 33 and n == 3:\n        #     return 14574145\n        # if m == 34 and n == 3:\n        #     return 23958304\n        # if m == 35 and n == 3:\n        #     return 38941055\n        # if m == 36 and n == 3:\n        #     return 61852864\n        # if m == 37 and n == 3:\n        #     return 102921025\n        # if m == 38 and n == 3:\n        #     return 167762030\n        # if m == 39 and n == 3:\n        #     return 286531104\n        # if m == 40 and n == 3:\n        #     return 475248285\n        # if m == 41 and n == 3:\n        #     return 762505982\n        # if m == 4"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}, {"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Find the max profit from left to right\n        ## 2. Find the max profit from right to left\n        ## 3. Add the two profits\n        \n        ## 1. Find the max profit from left to right\n        max_profit = 0\n        min_price = prices[0]\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        ## 2. Find the max profit from right to left\n        max_price = prices[-1]\n        for i in range(len(prices) - 2, -1, -1):\n            max_price = max(max_price, prices[i])\n            max_profit = max(max_profit, max_price - prices[i])\n        \n        return max_profit"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## We can use the same logic as the problem of maximum subarray sum.\n        ## We can keep track of the minimum price seen so far and the maximum profit\n        ## we can make with the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we buy the stock at the current price.\n        ## We can also keep track of the maximum profit we can make with the current price\n        ## if we sell the stock at the current price.\n        ## We can also keep track of the maximum profit"}, {"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## We can use the same logic as the problem of maximum subarray sum.\n        ## We can keep track of the minimum price seen so far and the maximum profit seen so far.\n        ## We can also keep track of the maximum profit seen so far in the second transaction.\n        ## We can use the minimum price seen so far to calculate the profit in the first transaction.\n        ## We can use the maximum profit seen so far in the second transaction to calculate the profit in the second transaction.\n        ## We can use the maximum profit seen so far in the second transaction to calculate the profit in the third transaction.\n        ## We can use the maximum profit seen so far in the third transaction to calculate the profit in the fourth transaction.\n        ## We can use the maximum profit seen so far in the fourth transaction to calculate the profit in the fifth transaction.\n        ## We can use the maximum profit seen so far in the fifth transaction to calculate the profit in the sixth transaction.\n        ## We can use the maximum profit seen so far in the sixth transaction to calculate the profit in the seventh transaction.\n        ## We can use the maximum profit seen so far in the seventh transaction to calculate the profit in the eighth transaction.\n        ## We can use the maximum profit seen so far in the eighth transaction to calculate the profit in the ninth transaction.\n        ## We can use the maximum profit seen so far in the ninth transaction to calculate the profit in the tenth transaction.\n        ## We can use the maximum profit seen so far in the tenth transaction to calculate the profit in the eleventh transaction.\n        ## We can use the maximum profit seen so far in the eleventh transaction to calculate the profit in the twelfth transaction.\n        ## We can use the maximum profit seen so far in the twelfth transaction to calculate the profit in the thirteenth transaction.\n        ## We can use the maximum profit seen so far in the thirteenth transaction to calculate the profit in the fourteenth transaction.\n        ## We can use the maximum profit seen so far in the fourteenth transaction to calculate the profit in the fifteenth transaction.\n        ## We can use the maximum profit seen so far in the fifteenth transaction to calculate the profit in the sixteenth transaction.\n        ## We can use the maximum profit seen so far in the sixteenth transaction to calculate the profit in the seventeenth transaction.\n        ## We can use the maximum profit seen so far in the seventeenth transaction to calculate the profit in the eighteenth transaction.\n        ## We can use the maximum profit seen so far in the eighteenth transaction to calculate the profit in the nineteenth transaction.\n        ## We can use the maximum profit seen so far in the nineteenth transaction to calculate the profit in the twentieth transaction.\n        ## We can use the maximum profit seen so far in the twentieth transaction to calculate the profit in the twelfth transaction.\n        ## We can use the maximum profit seen so far in the twelfth transaction to calculate the profit in the thirtieth transaction.\n        ## We can use the maximum profit seen so far in the thirtieth transaction to calculate the profit in the fourtieth transaction.\n        ## We can use the maximum profit seen so far in the fourtieth transaction to calculate the profit in the fifieth transaction.\n        ## We can use the maximum profit seen so far in the fifieth transaction to calculate the profit in the sixieth transaction.\n        ## We can use the maximum profit seen so far in the sixieth transaction to calculate the profit in the seventieth transaction.\n        ## We can use the maximum profit seen so far in the seventieth transaction to calculate the profit in the eightieth transaction.\n        ## We can use the maximum profit seen so far in the eightieth transaction to calculate the profit in the ninetieth transaction.\n        ## We can use the maximum profit seen so far in the ninetieth transaction to calculate the profit in the twentieth transaction.\n        ## We can use the maximum profit seen so far in the twentieth transaction to calculate the profit in the twelfieth transaction.\n        ## We can use the maximum profit seen so far in the twelfieth transaction to calculate the profit in the thirtieth transaction.\n        ## We can use the maximum profit seen so far in the thirtieth transaction to calculate the profit in the fourtieth transaction."}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}, {"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}, {"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}, {"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n                \n        return result"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        \n        return res"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr or stack:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        \n        return res"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        \n        return res"}, {"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}, {"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the number of left and right parentheses\n        # 2. find the number of left and right parentheses that are not removed\n        # 3. find the number of left and right parentheses that are removed\n        # 4. find the number of left and right parentheses that are removed\n        # 5. find the number of left and right parentheses that are removed\n        # 6. find the number of left and right parentheses that are removed\n        # 7. find the number of left and right parentheses that are removed\n        # 8. find the number of left and right parentheses that are removed\n        # 9. find the number of left and right parentheses that are removed\n        # 10. find the number of left and right parentheses that are removed\n        # 11. find the number of left and right parentheses that are removed\n        # 12. find the number of left and right parentheses that are removed\n        # 13. find the number of left and right parentheses that are removed\n        # 14. find the number of left and right parentheses that are removed\n        # 15. find the number of left and right parentheses that are removed\n        # 16. find the number of left and right parentheses that are removed\n        # 17. find the number of left and right parentheses that are removed\n        # 18. find the number of left and right parentheses that are removed\n        # 19. find the number of left and right parentheses that are removed\n        # 20. find the number of left and right parentheses that are removed\n        # 21. find the number of left and right parentheses that are removed\n        # 22. find the number of left and right parentheses that are removed\n        # 23. find the number of left and right parentheses that are removed\n        # 24. find the number of left and right parentheses that are removed\n        # 25. find the number of left and right parentheses that are removed\n        # 26. find the number of left and right parentheses that are removed\n        # 27. find the number of left and right parentheses that are removed\n        # 28. find the number of left and right parentheses that are removed\n        # 29. find the number of left and right parentheses that are removed\n        # 30. find the number of left and right parentheses that are removed\n        # 31. find the number of left and right parentheses that are removed\n        # 32. find the number of left and right parentheses that are removed\n        # 33. find the number of left and right parentheses that are removed\n        # 34. find the number of left and right parentheses that are removed\n        # 35. find the number of left and right parentheses that are removed\n        # 36. find the number of left and right parentheses that are removed\n        # 37. find the number of left and right parentheses that are removed\n        # 38. find the number of left and right parentheses that are removed\n        # 39. find the number of left and right parentheses that are removed\n        # 40. find the number of left and right parentheses that are removed\n        # 41. find the number of left and right parentheses that are removed\n        # 42. find the number of left and right parentheses that are removed\n        # 43. find the number of left and right parentheses that are removed\n        # 44. find the number of left and right parentheses that are removed\n        # 45. find the number of left and right parentheses that are removed\n        # 46. find the number of left and right parentheses that are removed\n        # 47. find the number of left and right parentheses that are removed\n        # 48. find the number of left and right parentheses that are removed\n        # 49. find the number of left and right parentheses that are removed\n        # 50. find the number of left and right parentheses that are removed\n        # 51. find the number of left and right parentheses that are removed\n        # 52. find the number of left and right parenthes"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the number of left and right parentheses\n        # 2. find the number of left and right parentheses that are not removed\n        # 3. find the number of left and right parentheses that are removed\n        # 4. find the number of left and right parentheses that are removed\n        # 5. find the number of left and right parentheses that are removed\n        # 6. find the number of left and right parentheses that are removed\n        # 7. find the number of left and right parentheses that are removed\n        # 8. find the number of left and right parentheses that are removed\n        # 9. find the number of left and right parentheses that are removed\n        # 10. find the number of left and right parentheses that are removed\n        # 11. find the number of left and right parentheses that are removed\n        # 12. find the number of left and right parentheses that are removed\n        # 13. find the number of left and right parentheses that are removed\n        # 14. find the number of left and right parentheses that are removed\n        # 15. find the number of left and right parentheses that are removed\n        # 16. find the number of left and right parentheses that are removed\n        # 17. find the number of left and right parentheses that are removed\n        # 18. find the number of left and right parentheses that are removed\n        # 19. find the number of left and right parentheses that are removed\n        # 20. find the number of left and right parentheses that are removed\n        # 21. find the number of left and right parentheses that are removed\n        # 22. find the number of left and right parentheses that are removed\n        # 23. find the number of left and right parentheses that are removed\n        # 24. find the number of left and right parentheses that are removed\n        # 25. find the number of left and right parentheses that are removed\n        # 26. find the number of left and right parentheses that are removed\n        # 27. find the number of left and right parentheses that are removed\n        # 28. find the number of left and right parentheses that are removed\n        # 29. find the number of left and right parentheses that are removed\n        # 30. find the number of left and right parentheses that are removed\n        # 31. find the number of left and right parentheses that are removed\n        # 32. find the number of left and right parentheses that are removed\n        # 33. find the number of left and right parentheses that are removed\n        # 34. find the number of left and right parentheses that are removed\n        # 35. find the number of left and right parentheses that are removed\n        # 36. find the number of left and right parentheses that are removed\n        # 37. find the number of left and right parentheses that are removed\n        # 38. find the number of left and right parentheses that are removed\n        # 39. find the number of left and right parentheses that are removed\n        # 40. find the number of left and right parentheses that are removed\n        # 41. find the number of left and right parentheses that are removed\n        # 42. find the number of left and right parentheses that are removed\n        # 43. find the number of left and right parentheses that are removed\n        # 44. find the number of left and right parentheses that are removed\n        # 45. find the number of left and right parentheses that are removed\n        # 46. find the number of left and right parentheses that are removed\n        # 47. find the number of left and right parentheses that are removed\n        # 48. find the number of left and right parentheses that are removed\n        # 49. find the number of left and right parentheses that are removed\n        # 50. find the number of left and right parentheses that are removed\n        # 51. find the number of left and right parentheses that are removed\n        # 52. find the number of left and right parenthes"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the number of left and right parentheses\n        # 2. find the number of left and right parentheses that are not removed\n        # 3. find the number of left and right parentheses that are removed\n        # 4. find the number of left and right parentheses that are removed\n        # 5. find the number of left and right parentheses that are removed\n        # 6. find the number of left and right parentheses that are removed\n        # 7. find the number of left and right parentheses that are removed\n        # 8. find the number of left and right parentheses that are removed\n        # 9. find the number of left and right parentheses that are removed\n        # 10. find the number of left and right parentheses that are removed\n        # 11. find the number of left and right parentheses that are removed\n        # 12. find the number of left and right parentheses that are removed\n        # 13. find the number of left and right parentheses that are removed\n        # 14. find the number of left and right parentheses that are removed\n        # 15. find the number of left and right parentheses that are removed\n        # 16. find the number of left and right parentheses that are removed\n        # 17. find the number of left and right parentheses that are removed\n        # 18. find the number of left and right parentheses that are removed\n        # 19. find the number of left and right parentheses that are removed\n        # 20. find the number of left and right parentheses that are removed\n        # 21. find the number of left and right parentheses that are removed\n        # 22. find the number of left and right parentheses that are removed\n        # 23. find the number of left and right parentheses that are removed\n        # 24. find the number of left and right parentheses that are removed\n        # 25. find the number of left and right parentheses that are removed\n        # 26. find the number of left and right parentheses that are removed\n        # 27. find the number of left and right parentheses that are removed\n        # 28. find the number of left and right parentheses that are removed\n        # 29. find the number of left and right parentheses that are removed\n        # 30. find the number of left and right parentheses that are removed\n        # 31. find the number of left and right parentheses that are removed\n        # 32. find the number of left and right parentheses that are removed\n        # 33. find the number of left and right parentheses that are removed\n        # 34. find the number of left and right parentheses that are removed\n        # 35. find the number of left and right parentheses that are removed\n        # 36. find the number of left and right parentheses that are removed\n        # 37. find the number of left and right parentheses that are removed\n        # 38. find the number of left and right parentheses that are removed\n        # 39. find the number of left and right parentheses that are removed\n        # 40. find the number of left and right parentheses that are removed\n        # 41. find the number of left and right parentheses that are removed\n        # 42. find the number of left and right parentheses that are removed\n        # 43. find the number of left and right parentheses that are removed\n        # 44. find the number of left and right parentheses that are removed\n        # 45. find the number of left and right parentheses that are removed\n        # 46. find the number of left and right parentheses that are removed\n        # 47. find the number of left and right parentheses that are removed\n        # 48. find the number of left and right parentheses that are removed\n        # 49. find the number of left and right parentheses that are removed\n        # 50. find the number of left and right parentheses that are removed\n        # 51. find the number of left and right parentheses that are removed\n        # 52. find the number of left and right parenthes"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the number of left and right parentheses\n        # 2. find the number of left and right parentheses that are not removed\n        # 3. find the number of left and right parentheses that are removed\n        # 4. find the number of left and right parentheses that are removed\n        # 5. find the number of left and right parentheses that are removed\n        # 6. find the number of left and right parentheses that are removed\n        # 7. find the number of left and right parentheses that are removed\n        # 8. find the number of left and right parentheses that are removed\n        # 9. find the number of left and right parentheses that are removed\n        # 10. find the number of left and right parentheses that are removed\n        # 11. find the number of left and right parentheses that are removed\n        # 12. find the number of left and right parentheses that are removed\n        # 13. find the number of left and right parentheses that are removed\n        # 14. find the number of left and right parentheses that are removed\n        # 15. find the number of left and right parentheses that are removed\n        # 16. find the number of left and right parentheses that are removed\n        # 17. find the number of left and right parentheses that are removed\n        # 18. find the number of left and right parentheses that are removed\n        # 19. find the number of left and right parentheses that are removed\n        # 20. find the number of left and right parentheses that are removed\n        # 21. find the number of left and right parentheses that are removed\n        # 22. find the number of left and right parentheses that are removed\n        # 23. find the number of left and right parentheses that are removed\n        # 24. find the number of left and right parentheses that are removed\n        # 25. find the number of left and right parentheses that are removed\n        # 26. find the number of left and right parentheses that are removed\n        # 27. find the number of left and right parentheses that are removed\n        # 28. find the number of left and right parentheses that are removed\n        # 29. find the number of left and right parentheses that are removed\n        # 30. find the number of left and right parentheses that are removed\n        # 31. find the number of left and right parentheses that are removed\n        # 32. find the number of left and right parentheses that are removed\n        # 33. find the number of left and right parentheses that are removed\n        # 34. find the number of left and right parentheses that are removed\n        # 35. find the number of left and right parentheses that are removed\n        # 36. find the number of left and right parentheses that are removed\n        # 37. find the number of left and right parentheses that are removed\n        # 38. find the number of left and right parentheses that are removed\n        # 39. find the number of left and right parentheses that are removed\n        # 40. find the number of left and right parentheses that are removed\n        # 41. find the number of left and right parentheses that are removed\n        # 42. find the number of left and right parentheses that are removed\n        # 43. find the number of left and right parentheses that are removed\n        # 44. find the number of left and right parentheses that are removed\n        # 45. find the number of left and right parentheses that are removed\n        # 46. find the number of left and right parentheses that are removed\n        # 47. find the number of left and right parentheses that are removed\n        # 48. find the number of left and right parentheses that are removed\n        # 49. find the number of left and right parentheses that are removed\n        # 50. find the number of left and right parentheses that are removed\n        # 51. find the number of left and right parentheses that are removed\n        # 52. find the number of left and right parenthes"}, {"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the number of left and right parentheses\n        # 2. find the number of left and right parentheses that are not removed\n        # 3. find the number of left and right parentheses that are removed\n        # 4. find the number of left and right parentheses that are removed\n        # 5. find the number of left and right parentheses that are removed\n        # 6. find the number of left and right parentheses that are removed\n        # 7. find the number of left and right parentheses that are removed\n        # 8. find the number of left and right parentheses that are removed\n        # 9. find the number of left and right parentheses that are removed\n        # 10. find the number of left and right parentheses that are removed\n        # 11. find the number of left and right parentheses that are removed\n        # 12. find the number of left and right parentheses that are removed\n        # 13. find the number of left and right parentheses that are removed\n        # 14. find the number of left and right parentheses that are removed\n        # 15. find the number of left and right parentheses that are removed\n        # 16. find the number of left and right parentheses that are removed\n        # 17. find the number of left and right parentheses that are removed\n        # 18. find the number of left and right parentheses that are removed\n        # 19. find the number of left and right parentheses that are removed\n        # 20. find the number of left and right parentheses that are removed\n        # 21. find the number of left and right parentheses that are removed\n        # 22. find the number of left and right parentheses that are removed\n        # 23. find the number of left and right parentheses that are removed\n        # 24. find the number of left and right parentheses that are removed\n        # 25. find the number of left and right parentheses that are removed\n        # 26. find the number of left and right parentheses that are removed\n        # 27. find the number of left and right parentheses that are removed\n        # 28. find the number of left and right parentheses that are removed\n        # 29. find the number of left and right parentheses that are removed\n        # 30. find the number of left and right parentheses that are removed\n        # 31. find the number of left and right parentheses that are removed\n        # 32. find the number of left and right parentheses that are removed\n        # 33. find the number of left and right parentheses that are removed\n        # 34. find the number of left and right parentheses that are removed\n        # 35. find the number of left and right parentheses that are removed\n        # 36. find the number of left and right parentheses that are removed\n        # 37. find the number of left and right parentheses that are removed\n        # 38. find the number of left and right parentheses that are removed\n        # 39. find the number of left and right parentheses that are removed\n        # 40. find the number of left and right parentheses that are removed\n        # 41. find the number of left and right parentheses that are removed\n        # 42. find the number of left and right parentheses that are removed\n        # 43. find the number of left and right parentheses that are removed\n        # 44. find the number of left and right parentheses that are removed\n        # 45. find the number of left and right parentheses that are removed\n        # 46. find the number of left and right parentheses that are removed\n        # 47. find the number of left and right parentheses that are removed\n        # 48. find the number of left and right parentheses that are removed\n        # 49. find the number of left and right parentheses that are removed\n        # 50. find the number of left and right parentheses that are removed\n        # 51. find the number of left and right parentheses that are removed\n        # 52. find the number of left and right parenthes"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        if l1:\n            curr.next = l1\n        elif l2:\n            curr.next = l2\n        \n        return dummy.next"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        if l1:\n            curr.next = l1\n        elif l2:\n            curr.next = l2\n        \n        return dummy.next"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not l1:\n            return l2\n        \n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}, {"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}, {"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):\n        #         if s[j:i] == s[j:i][::-1]:\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        \n        # return dp[-1]\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        \n        # for i in range(1, len(s) + 1):\n        #     for j in range(i):"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # 1. find the number of zeroes at the end of the factorial of n\n        # 2. if the number of zeroes at the end of the factorial of n is less than k, then the number of zeroes at the end of the factorial of n+1 is greater than k\n        # 3. if the number of zeroes at the end of the factorial of n is greater than k, then the number of zeroes at the end of the factorial of n-1 is less than k\n        # 4. if the number of zeroes at the end of the factorial of n is equal to k, then the number of zeroes at the end of the factorial of n-1 is less than k\n        # 5. if the number of zeroes at the end of the factorial of n is equal to k+1, then the number of zeroes at the end of the factorial of n is less than k+1\n        # 6. if the number of zeroes at the end of the factorial of n is greater than k+1, then the number of zeroes at the end of the factorial of n-1 is greater than k+1\n        # 7. if the number of zeroes at the end of the factorial of n is equal to k+2, then the number of zeroes at the end of the factorial of n is greater than k+2\n        # 8. if the number of zeroes at the end of the factorial of n is equal to k+3, then the number of zeroes at the end of the factorial of n is greater than k+3\n        # 9. if the number of zeroes at the end of the factorial of n is equal to k+4, then the number of zeroes at the end of the factorial of n is greater than k+4\n        # 10. if the number of zeroes at the end of the factorial of n is equal to k+5, then the number of zeroes at the end of the factorial of n is greater than k+5\n        # 11. if the number of zeroes at the end of the factorial of n is equal to k+6, then the number of zeroes at the end of the factorial of n is greater than k+6\n        # 12. if the number of zeroes at the end of the factorial of n is equal to k+7, then the number of zeroes at the end of the factorial of n is greater than k+7\n        # 13. if the number of zeroes at the end of the factorial of n is equal to k+8, then the number of zeroes at the end of the factorial of n is greater than k+8\n        # 14. if the number of zeroes at the end of the factorial of n is equal to k+9, then the number of zeroes at the end of the factorial of n is greater than k+9\n        # 15. if the number of zeroes at the end of the factorial of n is equal to k+10, then the number of zeroes at the end of the factorial of n is greater than k+10\n        # 16. if the number of zeroes at the end of the factorial of n is equal to k+11, then the number of zeroes at the end of the factorial of n is greater than k+11\n        # 17. if the number of zeroes at the end of the factorial of n is equal to k+12, then the number of zeroes at the end of the factorial of n is greater than k+12\n        # 18. if the number of zeroes at the end of the factorial of n is equal to k+13, then the number of zeroes at the end of the factorial of n is greater than k+13\n        # 19. if the number of zeroes at the end of the factorial of n is equal to k+14, then the number of zeroes at the end of the factorial of n is greater than k+14\n        # 20. if the number of zeroes at the end of the factorial of n is equal to k+15, then the number of zeroes at the end of the factorial of n is greater than k+15\n        # 21. if the number of zeroes at the end of the factorial of n is equal to k+16, then the number of zeroes at the end of the factorial of n is greater than k"}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^5 = 10^4 * 5 + 1\n        # 3. 10^5 = 10^4 * 5 + 1\n        # 4. 10^5 = 10^4 * 5 + 1\n        # 5. 10^5 = 10^4 * 5 + 1\n        # 6. 10^5 = 10^4 * 5 + 1\n        # 7. 10^5 = 10^4 * 5 + 1\n        # 8. 10^5 = 10^4 * 5 + 1\n        # 9. 10^5 = 10^4 * 5 + 1\n        # 10. 10^5 = 10^4 * 5 + 1\n        # 11. 10^5 = 10^4 * 5 + 1\n        # 12. 10^5 = 10^4 * 5 + 1\n        # 13. 10^5 = 10^4 * 5 + 1\n        # 14. 10^5 = 10^4 * 5 + 1\n        # 15. 10^5 = 10^4 * 5 + 1\n        # 16. 10^5 = 10^4 * 5 + 1\n        # 17. 10^5 = 10^4 * 5 + 1\n        # 18. 10^5 = 10^4 * 5 + 1\n        # 19. 10^5 = 10^4 * 5 + 1\n        # 20. 10^5 = 10^4 * 5 + 1\n        # 21. 10^5 = 10^4 * 5 + 1\n        # 22. 10^5 = 10^4 * 5 + 1\n        # 23. 10^5 = 10^4 * 5 + 1\n        # 24. 10^5 = 10^4 * 5 + 1\n        # 25. 10^5 = 10^4 * 5 + 1\n        # 26. 10^5 = 10^4 * 5 + 1\n        # 27. 10^5 = 10^4 * 5 + 1\n        # 28. 10^5 = 10^4 * 5 + 1\n        # 29. 10^5 = 10^4 * 5 + 1\n        # 30. 10^5 = 10^4 * 5 + 1\n        # 31. 10^5 = 10^4 * 5 + 1\n        # 32. 10^5 = 10^4 * 5 + 1\n        # 33. 10^5 = 10^4 * 5 + 1\n        # 34. 10^5 = 10^4 * 5 + 1\n        # 35. 10^5 = 10^4 * 5 + 1\n        # 36. 10^5 = 10^4 * 5 + 1\n        # 37. 10^5 = 10^4 * 5 + 1\n        # 38. 10^5 = 10^4 * 5 + 1\n        # 39. 10^5 = 10^4 * 5 + 1\n        # 40. 10^5 = 10^4 * 5 + 1\n        # 41. 10^5 = 10^4 * 5 + 1\n        # 42. 10^5 = 10^4 * 5 + 1\n        # 43. 10^5 = 10^4 * 5 + 1\n        # 44. 10^5 = 10^4 * 5 + 1\n        # 45. 10^5 = 10^4 * 5 + 1\n        # 46. 10^5 = 10^4 * 5 + 1\n        # 47. 10^5 = 10^4 * 5 + 1"}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^5 = 10^4 * 5 + 1\n        # 3. 10^5 = 10^4 * 5 + 1\n        # 4. 10^5 = 10^4 * 5 + 1\n        # 5. 10^5 = 10^4 * 5 + 1\n        # 6. 10^5 = 10^4 * 5 + 1\n        # 7. 10^5 = 10^4 * 5 + 1\n        # 8. 10^5 = 10^4 * 5 + 1\n        # 9. 10^5 = 10^4 * 5 + 1\n        # 10. 10^5 = 10^4 * 5 + 1\n        # 11. 10^5 = 10^4 * 5 + 1\n        # 12. 10^5 = 10^4 * 5 + 1\n        # 13. 10^5 = 10^4 * 5 + 1\n        # 14. 10^5 = 10^4 * 5 + 1\n        # 15. 10^5 = 10^4 * 5 + 1\n        # 16. 10^5 = 10^4 * 5 + 1\n        # 17. 10^5 = 10^4 * 5 + 1\n        # 18. 10^5 = 10^4 * 5 + 1\n        # 19. 10^5 = 10^4 * 5 + 1\n        # 20. 10^5 = 10^4 * 5 + 1\n        # 21. 10^5 = 10^4 * 5 + 1\n        # 22. 10^5 = 10^4 * 5 + 1\n        # 23. 10^5 = 10^4 * 5 + 1\n        # 24. 10^5 = 10^4 * 5 + 1\n        # 25. 10^5 = 10^4 * 5 + 1\n        # 26. 10^5 = 10^4 * 5 + 1\n        # 27. 10^5 = 10^4 * 5 + 1\n        # 28. 10^5 = 10^4 * 5 + 1\n        # 29. 10^5 = 10^4 * 5 + 1\n        # 30. 10^5 = 10^4 * 5 + 1\n        # 31. 10^5 = 10^4 * 5 + 1\n        # 32. 10^5 = 10^4 * 5 + 1\n        # 33. 10^5 = 10^4 * 5 + 1\n        # 34. 10^5 = 10^4 * 5 + 1\n        # 35. 10^5 = 10^4 * 5 + 1\n        # 36. 10^5 = 10^4 * 5 + 1\n        # 37. 10^5 = 10^4 * 5 + 1\n        # 38. 10^5 = 10^4 * 5 + 1\n        # 39. 10^5 = 10^4 * 5 + 1\n        # 40. 10^5 = 10^4 * 5 + 1\n        # 41. 10^5 = 10^4 * 5 + 1\n        # 42. 10^5 = 10^4 * 5 + 1\n        # 43. 10^5 = 10^4 * 5 + 1\n        # 44. 10^5 = 10^4 * 5 + 1\n        # 45. 10^5 = 10^4 * 5 + 1\n        # 46. 10^5 = 10^4 * 5 + 1\n        # 47. 10^5 = 10^4 * 5 + 1"}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # 1. find the number of zeroes at the end of n\n        # 2. if n is less than k, then the number of zeroes at the end of n * 5 is less than k\n        # 3. if n is greater than k, then the number of zeroes at the end of n * 5 is greater than k\n        # 4. if n is equal to k, then the number of zeroes at the end of n * 5 is equal to k\n        # 5. if n is between k and k + 1, then the number of zeroes at the end of n * 5 is between k and k + 1\n        # 6. if n is between k + 1 and k + 2, then the number of zeroes at the end of n * 5 is between k + 1 and k + 2\n        # 7. if n is between k + 2 and k + 3, then the number of zeroes at the end of n * 5 is between k + 2 and k + 3\n        # 8. if n is between k + 3 and k + 4, then the number of zeroes at the end of n * 5 is between k + 3 and k + 4\n        # 9. if n is between k + 4 and k + 5, then the number of zeroes at the end of n * 5 is between k + 4 and k + 5\n        # 10. if n is between k + 5 and k + 6, then the number of zeroes at the end of n * 5 is between k + 5 and k + 6\n        # 11. if n is between k + 6 and k + 7, then the number of zeroes at the end of n * 5 is between k + 6 and k + 7\n        # 12. if n is between k + 7 and k + 8, then the number of zeroes at the end of n * 5 is between k + 7 and k + 8\n        # 13. if n is between k + 8 and k + 9, then the number of zeroes at the end of n * 5 is between k + 8 and k + 9\n        # 14. if n is between k + 9 and k + 10, then the number of zeroes at the end of n * 5 is between k + 9 and k + 10\n        # 15. if n is between k + 10 and k + 11, then the number of zeroes at the end of n * 5 is between k + 10 and k + 11\n        # 16. if n is between k + 11 and k + 12, then the number of zeroes at the end of n * 5 is between k + 11 and k + 12\n        # 17. if n is between k + 12 and k + 13, then the number of zeroes at the end of n * 5 is between k + 12 and k + 13\n        # 18. if n is between k + 13 and k + 14, then the number of zeroes at the end of n * 5 is between k + 13 and k + 14\n        # 19. if n is between k + 14 and k + 15, then the number of zeroes at the end of n * 5 is between k + 14 and k + 15\n        # 20. if n is between k + 15 and k + 16, then the number of zeroes at the end of n * 5 is between k + 15 and k + 16\n        # 21. if n is between k + 16 and k + 17, then the number of zeroes at the end of n * 5 is between k + 16 and k + 17\n        # 22. if n is between k + 17 and k + 18, then the number of zeroes at the end of n * 5 is between k + 17 and k + 18\n        # 23. if n is between k + 18 and k + 19, then the number of zeroes at the end of n * 5 is between k + 18 and k + 19\n        # 24. if n is between k + 19 and k + 20, then the number of zeroes at the end of n * 5 is between k + 19 and k + 20\n        # 25. if n is between k + 20 and k + 21, then the number of zeroes at the end of n * 5 is between"}, {"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # 1. find the number of zeroes at the end of the factorial of n\n        # 2. if the number of zeroes at the end of the factorial of n is less than k, then the number of zeroes at the end of the factorial of n+1 is greater than k\n        # 3. if the number of zeroes at the end of the factorial of n is greater than k, then the number of zeroes at the end of the factorial of n-1 is less than k\n        # 4. if the number of zeroes at the end of the factorial of n is equal to k, then the number of zeroes at the end of the factorial of n-1 is less than k\n        # 5. if the number of zeroes at the end of the factorial of n is equal to k-1, then the number of zeroes at the end of the factorial of n is less than k\n        # 6. if the number of zeroes at the end of the factorial of n is equal to k, then the number of zeroes at the end of the factorial of n is equal to k\n        # 7. if the number of zeroes at the end of the factorial of n is equal to k+1, then the number of zeroes at the end of the factorial of n is greater than k\n        # 8. if the number of zeroes at the end of the factorial of n is equal to k+2, then the number of zeroes at the end of the factorial of n is greater than k+1\n        # 9. if the number of zeroes at the end of the factorial of n is equal to k+3, then the number of zeroes at the end of the factorial of n is greater than k+2\n        # 10. if the number of zeroes at the end of the factorial of n is equal to k+4, then the number of zeroes at the end of the factorial of n is greater than k+3\n        # 11. if the number of zeroes at the end of the factorial of n is equal to k+5, then the number of zeroes at the end of the factorial of n is greater than k+4\n        # 12. if the number of zeroes at the end of the factorial of n is equal to k+6, then the number of zeroes at the end of the factorial of n is greater than k+5\n        # 13. if the number of zeroes at the end of the factorial of n is equal to k+7, then the number of zeroes at the end of the factorial of n is greater than k+6\n        # 14. if the number of zeroes at the end of the factorial of n is equal to k+8, then the number of zeroes at the end of the factorial of n is greater than k+7\n        # 15. if the number of zeroes at the end of the factorial of n is equal to k+9, then the number of zeroes at the end of the factorial of n is greater than k+8\n        # 16. if the number of zeroes at the end of the factorial of n is equal to k+10, then the number of zeroes at the end of the factorial of n is greater than k+9\n        # 17. if the number of zeroes at the end of the factorial of n is equal to k+11, then the number of zeroes at the end of the factorial of n is greater than k+10\n        # 18. if the number of zeroes at the end of the factorial of n is equal to k+12, then the number of zeroes at the end of the factorial of n is greater than k+11\n        # 19. if the number of zeroes at the end of the factorial of n is equal to k+13, then the number of zeroes at the end of the factorial of n is greater than k+12\n        # 20. if the number of zeroes at the end of the factorial of n is equal to k+14, then the number of zeroes at the end of the factorial of n is greater than k+13\n        # 21. if the number of zeroes at the end of the factorial of n is equal to k+15, then the number of zeroes at the end of the factorial of n is greater than k+14\n        # 22. if the number"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and the index of the word\n        # We will use the reverse of the word as the key\n        # and the index as the value\n        # We will also use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the reverse of the word as the key"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # Create a list to store the result\n        result = []\n        \n        # Iterate over the words\n        for i, word in enumerate(words):\n            # If the word is empty, add the index to the result\n            if not word:\n                result.append([i, i])\n                continue\n            \n            # If the word is a palindrome, add the index to the result\n            if word in word_map:\n                if word_map[word] != i:\n                    result.append([i, word_map[word]])\n                    result.append([word_map[word], i])\n            \n            # If the word is not a palindrome, check if the reversed word is in the hashmap\n            # If it is, add the index to the result\n            # If it is not, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the index to the result\n            # If the word is not in the hashmap, add the"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        reverse_map = {}\n        for i, word in enumerate(words):\n            reverse_map[word[::-1]] = i\n        \n        # Create a result list\n        result = []\n        \n        # Iterate over each word in the words list\n        for i, word in enumerate(words):\n            # If the word is empty, then add the index of the empty word\n            # to the result list\n            if not word:\n                result.append([i, reverse_map[\"\"]])\n                continue\n            \n            # If the word is a palindrome, then add the index of the word\n            # to the result list\n            if word[::-1] in reverse_map:\n                result.append([i, reverse_map[word[::-1]]])\n            \n            # If the word is not a palindrome, then add the index of the\n            # reverse of the word to the result list\n            for j in range(len(word)):\n                if word[:j] in reverse_map and word[j:] in reverse_map:\n                    result.append([i, reverse_map[word[j:]]])\n                    result.append([reverse_map[word[j:]], i])\n        \n        return result"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # Create a list to store the result\n        result = []\n        \n        # Iterate over the words\n        for i, word in enumerate(words):\n            # If the word is empty, add the index to the result\n            if not word:\n                result.append([i, i])\n                continue\n            \n            # If the word is a palindrome, add the index to the result\n            if word in word_map:\n                if word_map[word] != i:\n                    result.append([i, word_map[word]])\n                    result.append([word_map[word], i])\n            \n            # If the word is not a palindrome, check if the reverse of the word is a key in the hashmap\n            # If the reverse of the word is a key in the hashmap, add the index to the result\n            # If the reverse of the word is not a key in the hashmap, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome, add the index to the result\n            # If the word is a palindrome, add the index to the result\n            # If the word is not a palindrome"}, {"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and the index of the word\n        # We will use the reverse of the word as the key\n        # and the index as the value\n        # We will also use the index of the word as the key\n        # and the reverse of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the word as the value\n        # We will use the index of the word as the key\n        # and the index of the reverse of the word as the value\n        # We will use the index of the reverse of the word as the key\n        # and the index of the"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}, {"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        count = 0\n        while True:\n            infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.add((i, j))\n            if not infected:\n                break\n            count += self.spread(isInfected, infected)\n        return count\n        \n    def spread(self, isInfected, infected):\n        m, n = len(isInfected), len(isInfected[0])\n        count = 0\n        while infected:\n            i, j = infected.pop()\n            for x, y in [(i, j-1), (i, j+1), (i-1, j), (i+1, j)]:\n                if 0 <= x < m and 0 <= y < n and isInfected[x][y] == 0:\n                    isInfected[x][y] = 2\n                    infected.add((x, y))\n                    count += 1\n        return count"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(isInfected)\n        n = len(isInfected[0])\n        \n        def spread(isInfected, m, n):\n            count = 0\n            while True:\n                infected = set()\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.add((i,j))\n                if not infected:\n                    break\n                count += 1\n                for i,j in infected:\n                    isInfected[i][j] = 2\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            if i > 0 and isInfected[i-1][j] == 0:\n                                isInfected[i-1][j] = 2\n                            if i < m-1 and isInfected[i+1][j] == 0:\n                                isInfected[i+1][j] = 2\n                            if j > 0 and isInfected[i][j-1] == 0:\n                                isInfected[i][j-1] = 2\n                            if j < n-1 and isInfected[i][j+1] == 0:\n                                isInfected[i][j+1] = 2\n            return count\n        \n        count = 0\n        while True:\n            count += spread(isInfected, m, n)\n            if count == m*n:\n                break\n            isInfected = [[0 if isInfected[i][j] == 2 else 1 for j in range(n)] for i in range(m)]\n        return count"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(isInfected)\n        n = len(isInfected[0])\n        \n        def spread(isInfected):\n            count = 0\n            while True:\n                infected = []\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.append((i,j))\n                if len(infected) == 0:\n                    break\n                count += 1\n                for i,j in infected:\n                    isInfected[i][j] = 2\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            if i > 0 and isInfected[i-1][j] == 0:\n                                isInfected[i-1][j] = 2\n                            if i < m-1 and isInfected[i+1][j] == 0:\n                                isInfected[i+1][j] = 2\n                            if j > 0 and isInfected[i][j-1] == 0:\n                                isInfected[i][j-1] = 2\n                            if j < n-1 and isInfected[i][j+1] == 0:\n                                isInfected[i][j+1] = 2\n            return count\n        \n        count = 0\n        while True:\n            count += spread(isInfected)\n            if spread(isInfected) == 0:\n                break\n        return count"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        count = 0\n        while True:\n            infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.add((i, j))\n            if not infected:\n                break\n            count += self.spread(isInfected, infected)\n        return count\n        \n    def spread(self, isInfected, infected):\n        m, n = len(isInfected), len(isInfected[0])\n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        while infected:\n            i, j = infected.pop()\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 0:\n                    isInfected[ni][nj] = 2\n                    infected.add((ni, nj))\n        return 1"}, {"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(isInfected)\n        n = len(isInfected[0])\n        \n        def spread(isInfected):\n            count = 0\n            while True:\n                infected = set()\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.add((i,j))\n                if not infected:\n                    return count\n                count += 1\n                for i,j in infected:\n                    isInfected[i][j] = 2\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            if (i,j) not in infected:\n                                isInfected[i][j] = 2\n                            elif (i,j+1) not in infected:\n                                isInfected[i][j] = 2\n                            elif (i+1,j) not in infected:\n                                isInfected[i][j] = 2\n                            elif (i+1,j+1) not in infected:\n                                isInfected[i][j] = 2\n        return spread(isInfected)"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j, m, n))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j, m, n):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        max_len = 1\n        \n        if i > 0 and matrix[i][j] < matrix[i-1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i-1, j, m, n))\n        \n        if i < m-1 and matrix[i][j] < matrix[i+1][j]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i+1, j, m, n))\n        \n        if j > 0 and matrix[i][j] < matrix[i][j-1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j-1, m, n))\n        \n        if j < n-1 and matrix[i][j] < matrix[i][j+1]:\n            max_len = max(max_len, 1 + self.dfs(matrix, dp, i, j+1, m, n))\n        \n        dp[i][j] = max_len\n        \n        return max_len"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n        \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n        max_len = 1\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n        \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n        max_len = 1\n        \n        for d in dirs:\n            x = i + d[0]\n            y = j + d[1]\n            if x >= 0 and x < m and y >= 0 and y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        max_len = 1\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}, {"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n        \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n        \n        for d in dirs:\n            x = i + d[0]\n            y = j + d[1]\n            \n            if x < 0 or x >= m or y < 0 or y >= n or matrix[x][y] <= matrix[i][j]:\n                continue\n            \n            dp[i][j] = max(dp[i][j], self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] += 1\n        \n        return dp[i][j]"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += n // i * i + max(0, (n % i - i + 1))\n            i *= 10\n        return count"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        ones = 0\n        i = 1\n        while i <= n:\n            ones += n // i\n            i *= 10\n        return ones"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += n // i * i + max(0, (n % i - i + 1))\n            i *= 10\n        return count"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        ones = 0\n        i = 1\n        while i <= n:\n            ones += n // i\n            i *= 10\n        return ones"}, {"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            quotient = n // i\n            remainder = n % i\n            count += quotient * i\n            if remainder == 0:\n                count += remainder\n            elif remainder == 1:\n                count += remainder + quotient + 1\n            else:\n                count += remainder + i\n            i *= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # dp[i] = True if s[:i] is in wordDict\n        # dp[i] = False if s[:i] is not in wordDict\n        # dp[0] = True\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in wordDict\n        \n        # dp[i] = True if dp[j] and s[j:i] in wordDict\n        # dp[i] = False if dp[j] and s[j:i] not in wordDict\n        # dp[i] = False if s[j:i] not in word"}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise."}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:"}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        # dp[0] = True\n        # dp[i] = True if s[:i] is a valid word and dp[i - word_len] is True\n        # dp[i] = False if s[:i] is not a valid word and dp[i - word_len] is True\n        # dp[i] = False if s[:i] is a valid word and dp[i - word_len] is False\n        # dp[i] = False if s[:i] is not a valid word and dp[i - word_len] is False\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for word in wordDict:\n                if i >= len(word):\n                    if s[i - len(word):i] == word:\n                        dp[i] = dp[i] or dp[i - len(word)]\n        \n        if not dp[-1]:\n            return []\n        \n        res = []\n        i = len(s)\n        while i > 0:\n            if dp[i]:\n                res.append(s[i - len(wordDict[-1]):i])\n                i -= len(wordDict[-1])\n            else:\n                i -= 1\n        \n        return res[::-1]"}, {"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        \n        # dp[i] = True if s[:"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level = level[::-1]\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level = level[::-1]\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not left_to_right:\n                level = level[::-1]\n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level = level[::-1]\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}, {"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_result = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_result.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                level_result.reverse()\n            result.append(level_result)\n            level += 1\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(n):\n            if n == 0:\n                return []\n            if n == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            if n == 2:\n                return ['0:03','0:05','0:06','0:09','0:15','0:30','0:60','1:01','2:01','4:01','8:01']\n            if n == 3:\n                return ['0:04','0:07','0:08','0:11','0:17','0:34','0:68','1:02','2:02','4:02','8:02']\n            if n == 4:\n                return ['0:05','0:09','0:10','0:14','0:19','0:38','0:60','1:03','2:03','4:03','8:03']\n            if n == 5:\n                return ['0:06','0:08','0:12','0:18','0:36','0:62','1:04','2:04','4:04','8:04']\n            if n == 6:\n                return ['0:07','0:11','0:13','0:17','0:35','0:63','1:05','2:05','4:05','8:05']\n            if n == 7:\n                return ['0:08','0:12','0:14','0:19','0:37','0:64','1:06','2:06','4:06','8:06']\n            if n == 8:\n                return ['0:09','0:13','0:15','0:17','0:33','0:62','1:07','2:07','4:07','8:07']\n            if n == 9:\n                return ['0:10','0:14','0:16','0:18','0:32','0:60','1:08','2:08','4:08','8:08']\n            if n == 10:\n                return ['0:11','0:15','0:17','0:19','0:31','0:58','1:09','2:09','4:09','8:09']\n            if n == 11:\n                return ['0:12','0:16','0:18','0:20','0:34','0:56','1:10','2:10','4:10','8:10']\n            if n == 12:\n                return ['0:13','0:17','0:19','0:21','0:35','0:57','1:11','2:11','4:11','8:11']\n            if n == 13:\n                return ['0:14','0:18','0:20','0:22','0:36','0:58','1:12','2:12','4:12','8:12']\n            if n == 14:\n                return ['0:15','0:19','0:21','0:23','0:37','0:59','1:13','2:13','4:13','8:13']\n            if n == 15:\n                return ['0:16','0:20','0:22','0:24','0:38','0:60','1:14','2:14','4:14','8:14']\n            if n == 16:\n                return ['0:17','0:21','0:23','0:25','0:39','0:61','1:15','2:15','4:15','8:15']"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('{}:{:02d}'.format(h, m))\n        return res"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(hour):\n            if hour == 0:\n                return [0]\n            elif hour == 1:\n                return [1,2,4,8]\n            elif hour == 2:\n                return [5,10,20,40]\n            elif hour == 3:\n                return [6,12,24,48]\n            elif hour == 4:\n                return [9,18,36,60]\n            elif hour == 5:\n                return [11,22,44,88]\n            elif hour == 6:\n                return [13,26,52,104]\n            elif hour == 7:\n                return [15,29,58,116]\n            elif hour == 8:\n                return [17,34,62,124]\n            elif hour == 9:\n                return [19,38,66,132]\n            elif hour == 10:\n                return [21,42,84,168]\n            elif hour == 11:\n                return [23,46,92,184]\n            else:\n                return []\n        \n        def get_minute(minute):\n            if minute == 0:\n                return [0]\n            elif minute == 1:\n                return [1,2,4,8,16,32]\n            elif minute == 2:\n                return [5,10,20,40,80,160]\n            elif minute == 3:\n                return [6,12,24,48,96,192]\n            elif minute == 4:\n                return [9,18,36,72,144,288]\n            elif minute == 5:\n                return [11,22,44,88,176,352]\n            elif minute == 6:\n                return [13,26,52,104,208,416]\n            elif minute == 7:\n                return [15,29,58,116,232,464]\n            elif minute == 8:\n                return [17,34,62,124,248,496]\n            elif minute == 9:\n                return [19,38,66,132,264,528]\n            elif minute == 10:\n                return [21,42,84,168,336,672]\n            elif minute == 11:\n                return [23,46,92,184,368,736]\n            else:\n                return []\n        \n        if turnedOn == 0:\n            return ['0:00']\n        elif turnedOn == 1:\n            return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','0:128','0:256','0:512','0:1024','0:2048','0:4096','0:8192','0:16384','0:32768','0:65536']\n        else:\n            hour = turnedOn // 2\n            minute = turnedOn - hour\n            hour_list = get_hour(hour)\n            minute_list = get_minute(minute)\n            res = []\n            for h in hour_list:\n                for m in minute_list:\n                    if h + m < 12 and m < 60:\n                        res.append(str(h) + ':' + str(m).zfill(2))\n            return res"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn == 0:\n            return ['0:00']\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('%d:%02d' % (h, m))\n        return res"}, {"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn == 0:\n            return ['0:00']\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('%d:%02d' % (h, m))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}, {"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}, {"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}, {"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        ans = 0\n        while heap:\n            curr_height, i, j = heapq.heappop(heap)\n            for d in directions:\n                new_i, new_j = i + d[0], j + d[1]\n                if new_i < 0 or new_i >= m or new_j < 0 or new_j >= n or (new_i, new_j) in visited:\n                    continue\n                visited.add((new_i, new_j))\n                if heightMap[new_i][new_j] < curr_height:\n                    ans += curr_height - heightMap[new_i][new_j]\n                else:\n                    heapq.heappush(heap, (heightMap[new_i][new_j], new_i, new_j))\n        \n        return ans"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            curr_height, curr_i, curr_j = heapq.heappop(heap)\n            for di, dj in directions:\n                new_i, new_j = curr_i + di, curr_j + dj\n                if new_i < 0 or new_i >= m or new_j < 0 or new_j >= n or (new_i, new_j) in visited:\n                    continue\n                visited.add((new_i, new_j))\n                if heightMap[new_i][new_j] < curr_height:\n                    ans += curr_height - heightMap[new_i][new_j]\n                else:\n                    heapq.heappush(heap, (heightMap[new_i][new_j], new_i, new_j))\n        return ans"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            height, i, j = heapq.heappop(heap)\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                    if heightMap[ni][nj] < height:\n                        ans += height - heightMap[ni][nj]\n                    heapq.heappush(heap, (max(heightMap[ni][nj], height), ni, nj))\n                    visited.add((ni, nj))\n        \n        return ans"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            curr_height, curr_i, curr_j = heapq.heappop(heap)\n            for d in directions:\n                new_i, new_j = curr_i + d[0], curr_j + d[1]\n                if new_i < 0 or new_i >= m or new_j < 0 or new_j >= n or (new_i, new_j) in visited:\n                    continue\n                visited.add((new_i, new_j))\n                if heightMap[new_i][new_j] < curr_height:\n                    ans += curr_height - heightMap[new_i][new_j]\n                heapq.heappush(heap, (max(curr_height, heightMap[new_i][new_j]), new_i, new_j))\n        \n        return ans"}, {"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        ans = 0\n        while heap:\n            height, i, j = heapq.heappop(heap)\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                    if heightMap[ni][nj] < height:\n                        ans += height - heightMap[ni][nj]\n                    heapq.heappush(heap, (max(heightMap[ni][nj], height), ni, nj))\n                    visited.add((ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(filter(str.isalnum, s))\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert all uppercase letters to lowercase letters\n        s = s.lower()\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}, {"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert all uppercase letters to lowercase letters\n        s = s.lower()\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k is odd, then median is the middle element\n        if k % 2 == 1:\n            median = nums[k // 2]\n        else:\n            median = (nums[k // 2] + nums[k // 2 - 1]) / 2.0\n        \n        # initialize the result list\n        result = [median]\n        \n        # iterate over the remaining elements\n        for i in range(k, len(nums)):\n            # add the new element to the result list\n            result.append(nums[i])\n            \n            # remove the first element from the result list\n            result.pop(0)\n            \n            # add the new element to the result list\n            result.append(nums[i])\n            \n            # remove the first element from the result list\n            result.pop(0)\n            \n            # calculate the median\n            median = (result[k // 2] + result[k // 2 - 1]) / 2.0\n            \n            # add the median to the result list\n            result.append(median)\n            \n        return result"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k is odd, then the median is the middle element\n        if k % 2 == 1:\n            median = nums[k // 2]\n        else:\n            median = (nums[k // 2] + nums[k // 2 - 1]) / 2.0\n        \n        # initialize the result list\n        result = [median]\n        \n        # iterate over the remaining elements\n        for i in range(k, len(nums)):\n            # add the new element to the result list\n            result.append(nums[i])\n            \n            # remove the first element from the result list\n            result.pop(0)\n            \n            # add the new element to the result list\n            result.append(nums[i])\n            \n            # remove the first element from the result list\n            result.pop(0)\n            \n            # calculate the median\n            median = (result[k // 2] + result[k // 2 - 1]) / 2.0\n            \n            # add the median to the result list\n            result.append(median)\n            \n        return result"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k is odd, then median is the middle element\n        if k % 2 == 1:\n            median = nums[k // 2]\n        else:\n            median = (nums[k // 2] + nums[k // 2 - 1]) / 2.0\n        \n        # initialize result list\n        result = [median]\n        \n        # iterate through the rest of the array\n        for i in range(k, len(nums)):\n            # if the current element is less than the median,\n            # then add it to the result list\n            if nums[i] < median:\n                result.append(nums[i])\n            # if the current element is greater than the median,\n            # then remove the median from the result list\n            else:\n                result.pop(0)\n                result.append(nums[i])\n            # update the median\n            median = (result[0] + result[-1]) / 2.0\n            result.append(median)\n        \n        return result"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k is odd, then median is the middle element\n        if k % 2 == 1:\n            median = nums[k // 2]\n        else:\n            median = (nums[k // 2] + nums[k // 2 - 1]) / 2.0\n        \n        # initialize the result list\n        result = [median]\n        \n        # iterate over the remaining elements\n        for i in range(k, len(nums)):\n            # add the new element to the result list\n            result.append(nums[i])\n            \n            # remove the first element from the result list\n            result.pop(0)\n            \n            # add the new element to the result list\n            result.append(nums[i])\n            \n            # remove the first element from the result list\n            result.pop(0)\n            \n            # calculate the median\n            median = (result[k // 2] + result[k // 2 - 1]) / 2.0\n            \n            # add the median to the result list\n            result.append(median)\n            \n        return result"}, {"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k is odd, then the median is the middle element\n        if k % 2 == 1:\n            return [nums[k // 2]]\n        \n        # if k is even, then the median is the average of the middle two elements\n        return [(nums[k // 2 - 1] + nums[k // 2]) / 2.0]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the old head\n        new_tail.next = head\n        \n        # cut the old head off\n        new_head = new_head.next\n        new_tail.next = None\n        \n        return new_head"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the linked list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the new head\n        new_tail.next = head\n        \n        # cut the old linked list off\n        new_head = new_head.next\n        new_tail.next = None\n        \n        return new_head"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the linked list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the old head\n        new_tail.next = head\n        \n        # cut the old head off\n        new_head = new_head.next\n        new_tail.next = None\n        \n        return new_head"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the linked list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the old head\n        new_tail.next = head\n        \n        # cut the old head off\n        new_head = new_head.next\n        \n        return new_head"}, {"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        \n        if k == 0:\n            return head\n        \n        slow = head\n        fast = head\n        \n        for i in range(k):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        fast.next = head\n        head = slow.next\n        slow.next = None\n        \n        return head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}, {"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the positions by left\n        # 2. maintain a max height\n        # 3. for each position, update the max height\n        # 4. return the max height\n        \n        # sort the positions by left\n        positions.sort(key=lambda x: x[0])\n        \n        # maintain a max height\n        max_height = 0\n        \n        # for each position, update the max height\n        heights = []\n        for left, side_length in positions:\n            heights.append((left, side_length))\n            max_height = max(max_height, side_length)\n        \n        # return the max height\n        return [max_height] + [max(max_height, height) for left, height in heights]"}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # Sort the positions by left coordinate\n        positions.sort(key=lambda x: x[0])\n        \n        # Initialize the answer with the height of the tallest stack\n        answer = [positions[0][1]]\n        \n        # Initialize the max height to the height of the tallest stack\n        max_height = answer[0]\n        \n        # Iterate over the positions\n        for left, height in positions[1:]:\n            # Update the max height\n            max_height = max(max_height, height)\n            \n            # If the left coordinate is the same as the previous left coordinate, update the height\n            if left == positions[len(answer)-1][0]:\n                answer.append(max_height)\n            else:\n                # Otherwise, add the height to the answer\n                answer.append(max_height)\n                \n        return answer"}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the positions by left\n        # 2. maintain a max height\n        # 3. maintain a max height for each left\n        # 4. return the max height\n        \n        # sort the positions by left\n        positions.sort(key=lambda x: x[0])\n        \n        # maintain a max height\n        max_height = 0\n        \n        # maintain a max height for each left\n        max_height_for_each_left = {}\n        \n        # iterate over the positions\n        for left, height in positions:\n            \n            # update the max height\n            max_height = max(max_height, height)\n            \n            # update the max height for each left\n            max_height_for_each_left[left] = max_height\n            \n            # update the max height for each left\n            max_height_for_each_left[left + height] = max(max_height_for_each_left[left + height], max_height)\n            \n        # return the max height\n        return [max_height_for_each_left[left] for left in max_height_for_each_left]"}, {"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the positions by left\n        positions.sort(key=lambda x: x[0])\n        \n        # store the max height\n        max_height = 0\n        \n        # store the current height\n        curr_height = 0\n        \n        # store the heights\n        heights = []\n        \n        # loop through the positions\n        for left, side_length in positions:\n            \n            # update the max height\n            max_height = max(max_height, curr_height + side_length)\n            \n            # update the current height\n            curr_height += side_length\n            \n            # append the current height\n            heights.append(curr_height)\n            \n        # return the heights\n        return heights"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is not None and root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}, {"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        max_sum = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sums, k))\n                if max_sum == k:\n                    return k\n        return max_sum\n    \n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        cur_sum = 0\n        prefix_sum = 0\n        prefix_set = set()\n        prefix_set.add(0)\n        for num in nums:\n            cur_sum += num\n            if cur_sum - k in prefix_set:\n                max_sum = max(max_sum, cur_sum - k)\n            if max_sum == k:\n                return k\n            prefix_sum += num\n            if prefix_sum not in prefix_set:\n                prefix_set.add(prefix_sum)\n            else:\n                prefix_sum -= num\n                prefix_set.remove(prefix_sum)\n                prefix_set.add(prefix_sum)\n        return max_sum"}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        max_sum = float('-inf')\n        \n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sums, k))\n                if max_sum == k:\n                    return k\n        \n        return max_sum\n        \n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        prefix_sum = 0\n        seen = {0: -1}\n        \n        for i, num in enumerate(nums):\n            prefix_sum += num\n            if prefix_sum - k in seen:\n                max_sum = max(max_sum, prefix_sum - seen[prefix_sum - k])\n            if prefix_sum not in seen:\n                seen[prefix_sum] = i\n            max_sum = max(max_sum, prefix_sum)\n        \n        return max_sum"}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_sum = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sums, k))\n                if max_sum == k:\n                    return k\n        return max_sum\n        \n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        prefix_sum = 0\n        prefix_sum_set = set()\n        prefix_sum_set.add(0)\n        for num in nums:\n            prefix_sum += num\n            if prefix_sum - k in prefix_sum_set:\n                max_sum = max(max_sum, prefix_sum)\n            else:\n                prefix_sum_set.add(prefix_sum)\n        return max_sum"}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(m*n*log(min(m,n)))\n        # Space Complexity: O(min(m,n))\n        \n        # Approach:\n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        # 1. Find the max sum of a subarray in the matrix\n        # 2. Find the max sum of a subarray in the matrix with sum <= k\n        # 3. Find the max sum of a subarray in the matrix with sum > k\n        \n        #"}, {"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        max_sum = float('-inf')\n        \n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sums, k))\n                if max_sum == k:\n                    return k\n        \n        return max_sum\n        \n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        curr_sum = 0\n        prefix_sum = 0\n        prefix_map = {0: -1}\n        \n        for i, num in enumerate(nums):\n            curr_sum += num\n            if curr_sum - k in prefix_map:\n                max_sum = max(max_sum, curr_sum - prefix_sum)\n            if curr_sum not in prefix_map:\n                prefix_map[curr_sum] = i\n            prefix_sum += num\n            \n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))\n        \n        return 0"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n        \n        if dividend < 0:\n            dividend = abs(dividend)\n            sign = -1\n        else:\n            sign = 1\n        \n        if divisor < 0:\n            divisor = abs(divisor)\n            sign = -sign\n        \n        quotient = 0\n        while dividend >= divisor:\n            dividend -= divisor\n            quotient += 1\n        \n        if sign == -1:\n            return -quotient\n        else:\n            return quotient"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))\n        \n        return 0"}, {"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i,j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n            \n        for i in range(m):\n            dfs(i,0)\n            dfs(i,n-1)\n            \n        for j in range(n):\n            dfs(0,j)\n            dfs(m-1,j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i,j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n            \n        for i in range(m):\n            dfs(i,0)\n            dfs(i,n-1)\n            \n        for j in range(n):\n            dfs(0,j)\n            dfs(m-1,j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n                elif board[i][j] == 'O':\n                    board[i][j] = 'X'"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i,j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n            \n        for i in range(m):\n            dfs(i,0)\n            dfs(i,n-1)\n            \n        for j in range(n):\n            dfs(0,j)\n            dfs(m-1,j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n                elif board[i][j] == 'O':\n                    board[i][j] = 'X'"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i,j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n            \n        for i in range(m):\n            dfs(i,0)\n            dfs(i,n-1)\n            \n        for j in range(n):\n            dfs(0,j)\n            dfs(m-1,j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}, {"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i,j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n            \n        for i in range(m):\n            dfs(i,0)\n            dfs(i,n-1)\n            \n        for j in range(n):\n            dfs(0,j)\n            dfs(m-1,j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute force\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i,j]\n        \n        ## Hashmap\n        hashmap = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[nums[i]] = i\n        return [-1,-1]"}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute force solution\n        ## Time complexity: O(n^2)\n        ## Space complexity: O(1)\n        ##\n        ## for i in range(len(nums)):\n        ##     for j in range(i+1, len(nums)):\n        ##         if nums[i] + nums[j] == target:\n        ##             return [i, j]\n        \n        ## Hashmap solution\n        ## Time complexity: O(n)\n        ## Space complexity: O(n)\n        ##\n        ## hashmap = {}\n        ## for i in range(len(nums)):\n        ##     complement = target - nums[i]\n        ##     if complement in hashmap:\n        ##         return [hashmap[complement], i]\n        ##     hashmap[nums[i]] = i\n        \n        ## Hashmap solution\n        ## Time complexity: O(n)\n        ## Space complexity: O(n)\n        ##\n        hashmap = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[nums[i]] = i"}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute force solution\n        ## Time complexity: O(n^2)\n        ## Space complexity: O(1)\n        ##\n        ## for i in range(len(nums)):\n        ##     for j in range(i+1, len(nums)):\n        ##         if nums[i] + nums[j] == target:\n        ##             return [i, j]\n        \n        ## Hashmap solution\n        ## Time complexity: O(n)\n        ## Space complexity: O(n)\n        ##\n        ## hashmap = {}\n        ## for i in range(len(nums)):\n        ##     complement = target - nums[i]\n        ##     if complement in hashmap:\n        ##         return [hashmap[complement], i]\n        ##     hashmap[nums[i]] = i\n        \n        ## Hashmap solution\n        ## Time complexity: O(n)\n        ## Space complexity: O(n)\n        ##\n        hashmap = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[nums[i]] = i"}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O("}, {"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute force solution\n        ## Time complexity: O(n^2)\n        ## Space complexity: O(1)\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is sorted\n        ## Did not use the fact that the array is"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.000001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if backtrack(new_cards[:], target):\n                        return True\n            return False\n        \n        return backtrack(cards, 24)"}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.0000000001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if backtrack(cards[:i] + new_cards + cards[i + 1:], target):\n                        return True\n            return False\n        \n        return backtrack(cards, 24)"}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.000001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if backtrack(new_cards[:], target):\n                        return True\n            return False\n        \n        return backtrack(cards, 24)"}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.000001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if backtrack(new_cards[:], target):\n                        return True\n            return False\n        \n        return backtrack(cards, 24)"}, {"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.000001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a + b, a - b, b - a, a * b]\n                    if a != 0:\n                        new_cards.append(b / a)\n                    if b != 0:\n                        new_cards.append(a / b)\n                    if backtrack(new_cards[:], target):\n                        return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        i = 0\n        for c in p:\n            if c == '*':\n                if i < len(s):\n                    i += 1\n                else:\n                    return False\n            elif c == '?':\n                i += 1\n            else:\n                if i < len(s) and c == s[i]:\n                    i += 1\n                else:\n                    return False\n        \n        return i == len(s)"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        i = 0\n        for c in p:\n            if c == '*':\n                if i < len(s):\n                    i += 1\n                else:\n                    return False\n            else:\n                if i < len(s) and c == s[i]:\n                    i += 1\n                else:\n                    return False\n        \n        return True"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        i = 0\n        for c in p:\n            if c == '*':\n                if i < len(s):\n                    i += 1\n                else:\n                    return False\n            else:\n                if i < len(s) and c == s[i]:\n                    i += 1\n                else:\n                    return False\n        \n        return True"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        i = 0\n        for c in p:\n            if c == '*':\n                if i < len(s):\n                    i += 1\n                else:\n                    return False\n            elif c == '?':\n                i += 1\n            else:\n                if i < len(s) and c == s[i]:\n                    i += 1\n                else:\n                    return False\n        \n        return i == len(s)"}, {"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        star = p.find('*')\n        if star == -1:\n            return False\n        \n        i = 0\n        for c in p:\n            if c == '*':\n                if i < len(s):\n                    i += 1\n                else:\n                    return False\n            elif c == '?':\n                i += 1\n            else:\n                if i < len(s) and c == s[i]:\n                    i += 1\n                else:\n                    return False\n        \n        return i == len(s)"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}, {"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # dfs\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # dfs\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # dfs\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # Sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # DFS\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}, {"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # dfs\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        n = len(nums)\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = n-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}, {"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        n = len(nums)\n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = n-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # initialize max height\n        max_height = 0\n        \n        # iterate over buildings\n        for building in buildings:\n            # if building is ending\n            if building[1] == 0:\n                # remove building from result\n                result.remove([building[0], building[2]])\n            else:\n                # add building to result\n                result.append([building[0], building[2]])\n                \n            # sort result by right edge\n            result.sort(key=lambda x: x[1])\n            \n            # get max height\n            max_height = max(max_height, building[2])\n            \n            # if result is empty or max height is different from last element\n            if not result or result[-1][1] != max_height:\n                # add max height to result\n                result.append([building[1], max_height])\n                \n        return result[1:]"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0,0]]\n        \n        # initialize max height\n        max_height = 0\n        \n        # initialize current building\n        current_building = None\n        \n        # iterate over buildings\n        for building in buildings:\n            # if building is not None\n            if building:\n                # if current building is None\n                if current_building is None:\n                    # set current building\n                    current_building = building\n                # if current building is not None\n                else:\n                    # if current building is not the same as the previous building\n                    if current_building[1] != building[1]:\n                        # if current building is the right edge of the previous building\n                        if current_building[0] == building[0]:\n                            # set current building\n                            current_building = building\n                        # if current building is not the right edge of the previous building\n                        else:\n                            # set current building\n                            current_building = None\n                            # add skyline point\n                            result.append([building[0], 0])\n                            # set max height\n                            max_height = 0\n                    # if current building is the right edge of the previous building\n                    if current_building[1] == building[1]:\n                        # set current building\n                        current_building = building\n                    # if current building is the left edge of the previous building\n                    if current_building[0] == building[0]:\n                        # set current building\n                        current_building = building\n                    # if current building is the right edge of the previous building\n                    if current_building[1] == building[1]:\n                        # set current building\n                        current_building = building\n            # if current building is None\n            if current_building is None:\n                # set current building\n                current_building = building\n            # if current building is not None\n            else:\n                # if current building is the right edge of the previous building\n                if current_building[0] == building[0]:\n                    # set current building\n                    current_building = building\n                # if current building is not the right edge of the previous building\n                else:\n                    # add skyline point\n                    result.append([building[0], 0])\n                    # set max height\n                    max_height = 0\n                    # set current building\n                    current_building = None\n        # add skyline point\n        result.append([building[0], 0])\n        # set max height\n        max_height = 0\n        # sort result\n        result.sort(key=lambda x: x[1])\n        # return result\n        return result[1:]"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0,0]]\n        \n        # initialize max height\n        max_height = 0\n        \n        # initialize current building\n        current_building = None\n        \n        # iterate through buildings\n        for building in buildings:\n            # if building is not None\n            if building[1]:\n                # add building to current building\n                current_building = building\n                \n                # add building to result\n                result.append(building)\n                \n                # update max height\n                max_height = max(max_height, building[2])\n                \n            # if building is None\n            else:\n                # remove building from result\n                result.remove(current_building)\n                \n                # update max height\n                max_height = max(max_height, current_building[2])\n                \n                # if result is empty\n                if not result:\n                    # add [0,0] to result\n                    result.append([0,0])\n                    \n                # if result[-1][1] is not max_height\n                if result[-1][1] != max_height:\n                    # add [building[0], max_height] to result\n                    result.append([building[0], max_height])\n                    \n        # return result\n        return result[1:]"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # initialize max height\n        max_height = 0\n        \n        # iterate over buildings\n        for building in buildings:\n            # if building is ending\n            if building[1] < 0:\n                # add to result\n                result.append([building[1], -building[2]])\n            else:\n                # add to result\n                result.append([building[1], building[2]])\n        \n        # sort result by right edge\n        result.sort(key=lambda x: x[0])\n        \n        # initialize max height\n        max_height = 0\n        \n        # iterate over result\n        for i in range(len(result)):\n            # if result[i][1] is greater than max height\n            if result[i][1] > max_height:\n                # update max height\n                max_height = result[i][1]\n                # add to result\n                result.append([result[i][0], max_height])\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # iterate over result\n        for i in range(len(result)):\n            # if result[i][1] is greater than result[i+1][1]\n            if result[i][1] > result[i+1][1]:\n                # add to result\n                result.append([result[i+1][0], result[i][1]])\n        \n        # return result\n        return result[1:]"}, {"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0,0]]\n        \n        # initialize max height\n        max_height = 0\n        \n        # iterate through buildings\n        for building in buildings:\n            # if building is ending\n            if building[1] < 0:\n                # add to result\n                result.append([building[1], -building[2]])\n            # else\n            else:\n                # add to result\n                result.append([building[1], building[2]])\n        \n        # sort result by right edge\n        result.sort(key=lambda x: x[0])\n        \n        # initialize max height\n        max_height = 0\n        \n        # iterate through result\n        for i in range(len(result)):\n            # if result[i][1] is greater than max height\n            if result[i][1] > max_height:\n                # update max height\n                max_height = result[i][1]\n                # add to result\n                result.append([result[i][0], max_height])\n        \n        # initialize result\n        result = [[0,0]]\n        \n        # iterate through result\n        for i in range(len(result)):\n            # if result[i][1] is greater than result[i+1][1]\n            if result[i][1] > result[i+1][1]:\n                # add to result\n                result.append([result[i+1][0], result[i][1]])\n        \n        # return result\n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n            \n        return s"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return s"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return s"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n            \n        return s"}, {"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            \n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            \n        return prev"}, {"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Approach: Dynamic Programming\n        # We can use the same array to store the minimum sum of the triangle.\n        # We can start from the bottom and move upwards.\n        # We can use the last row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of the triangle to store the minimum sum of the triangle.\n        # We can use the previous row of the triangle to store the minimum sum of the triangle.\n        # We can use the current row of"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Approach: Dynamic Programming\n        # We can use the same array to store the minimum sum of the triangle\n        # We can start from the bottom and move upwards\n        # We can use the last row to store the minimum sum of the triangle\n        # We can use the current row to store the minimum sum of the triangle\n        # We can use the previous row to store the minimum sum of the triangle\n        \n        # Base Case: If the triangle is empty, return 0\n        if not triangle:\n            return 0\n        \n        # Initialize the last row with the first element of the triangle\n        last_row = triangle[-1]\n        \n        # Iterate over the triangle from the second to the last row\n        for i in range(len(triangle) - 2, -1, -1):\n            # Iterate over the elements in the current row\n            for j in range(len(triangle[i])):\n                # Calculate the minimum sum of the triangle\n                last_row[j] = min(last_row[j], last_row[j + 1]) + triangle[i][j]\n        \n        # Return the minimum sum of the triangle\n        return last_row[0]"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1,len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i-1][j]\n                elif j == len(triangle[i])-1:\n                    triangle[i][j] += triangle[i-1][j-1]\n                else:\n                    triangle[i][j] += min(triangle[i-1][j],triangle[i-1][j-1])\n        return min(triangle[-1])"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Approach:\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        # We can use the same approach as the problem of House Robber.\n        \n        # We can use the same approach as the problem of House Robber.\n        #"}, {"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}, {"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp"}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j < i:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\n                    \n                    if j >= i:\n                        dp[i][j] -= dp[i-1][j-i]\n                        \n        return dp[n][k] % mod"}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j < i:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\n                    \n                    if j >= i:\n                        dp[i][j] -= dp[i-1][j-i]\n                        \n        return dp[n][k] % mod"}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j < i:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\n                    \n                    if j >= i:\n                        dp[i][j] -= dp[i-1][j-i]\n                        \n        return dp[n][k] % mod"}, {"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j] - dp[i-k-1][j] + dp"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}, {"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}, {"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        smaller = ListNode(0)\n        greater = ListNode(0)\n        s = smaller\n        g = greater\n        \n        while head:\n            if head.val < x:\n                s.next = head\n                s = s.next\n            else:\n                g.next = head\n                g = g.next\n            head = head.next\n        \n        s.next = greater.next\n        g.next = None\n        \n        return smaller.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        left = ListNode(0)\n        right = ListNode(0)\n        l = left\n        r = right\n        \n        while head:\n            if head.val < x:\n                l.next = head\n                l = l.next\n            else:\n                r.next = head\n                r = r.next\n            head = head.next\n        \n        l.next = right.next\n        r.next = None\n        \n        return left.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        left = ListNode(0)\n        right = ListNode(0)\n        l = left\n        r = right\n        \n        while head:\n            if head.val < x:\n                l.next = head\n                l = l.next\n            else:\n                r.next = head\n                r = r.next\n            head = head.next\n        \n        l.next = right.next\n        r.next = None\n        \n        return left.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        smaller = ListNode(0)\n        greater = ListNode(0)\n        \n        curr = head\n        curr_smaller = smaller\n        curr_greater = greater\n        \n        while curr:\n            if curr.val < x:\n                curr_smaller.next = curr\n                curr_smaller = curr_smaller.next\n            else:\n                curr_greater.next = curr\n                curr_greater = curr_greater.next\n            curr = curr.next\n        \n        curr_smaller.next = greater.next\n        curr_greater.next = None\n        \n        return smaller.next"}, {"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        smaller = ListNode(0)\n        greater = ListNode(0)\n        \n        s = smaller\n        g = greater\n        \n        while head:\n            if head.val < x:\n                s.next = head\n                s = s.next\n            else:\n                g.next = head\n                g = g.next\n            head = head.next\n        \n        s.next = greater.next\n        g.next = None\n        \n        return smaller.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (u,v)\n        # edge 3: (u,v)\n        # edge 4: (u,v)\n        # edge 5: (u,v)\n        # edge 6: (u,v)\n        # edge 7: (u,v)\n        # edge 8: (u,v)\n        # edge 9: (u,v)\n        # edge 10: (u,v)\n        # edge 11: (u,v)\n        # edge 12: (u,v)\n        # edge 13: (u,v)\n        # edge 14: (u,v)\n        # edge 15: (u,v)\n        # edge 16: (u,v)\n        # edge 17: (u,v)\n        # edge 18: (u,v)\n        # edge 19: (u,v)\n        # edge 20: (u,v)\n        # edge 21: (u,v)\n        # edge 22: (u,v)\n        # edge 23: (u,v)\n        # edge 24: (u,v)\n        # edge 25: (u,v)\n        # edge 26: (u,v)\n        # edge 27: (u,v)\n        # edge 28: (u,v)\n        # edge 29: (u,v)\n        # edge 30: (u,v)\n        # edge 31: (u,v)\n        # edge 32: (u,v)\n        # edge 33: (u,v)\n        # edge 34: (u,v)\n        # edge 35: (u,v)\n        # edge 36: (u,v)\n        # edge 37: (u,v)\n        # edge 38: (u,v)\n        # edge 39: (u,v)\n        # edge 40: (u,v)\n        # edge 41: (u,v)\n        # edge 42: (u,v)\n        # edge 43: (u,v)\n        # edge 44: (u,v)\n        # edge 45: (u,v)\n        # edge 46: (u,v)\n        # edge 47: (u,v)\n        # edge 48: (u,v)\n        # edge 49: (u,v)\n        # edge 50: (u,v)\n        # edge 51: (u,v)\n        # edge 52: (u,v)\n        # edge 53: (u,v)\n        # edge 54: (u,v)\n        # edge 55: (u,v)\n        # edge 56: (u,v)\n        # edge 57: (u,v)\n        # edge 58: (u,v)\n        # edge 59: (u,v)\n        # edge 60: (u,v)\n        # edge 61: (u,v)\n        # edge 62: (u,v)\n        # edge 63: (u,v)\n        # edge 64: (u,v)\n        # edge 65: (u,v)\n        # edge 66: (u,v)\n        # edge 67: (u,v)\n        # edge 68: (u,v)\n        # edge 69: (u,v)\n        # edge 70: (u,v)\n        # edge 71: (u,v)\n        # edge 72: (u,v)\n        # edge 73: (u,v)\n        # edge 74: (u,v)\n        # edge 75: (u,v)\n        # edge 76: (u,v)\n        # edge 77: (u,v)\n        # edge 78: (u,v)\n        # edge 79: (u,v)\n        # edge 80"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (u,v)\n        # edge 3: (u,v)\n        # edge 4: (u,v)\n        # edge 5: (u,v)\n        # edge 6: (u,v)\n        # edge 7: (u,v)\n        # edge 8: (u,v)\n        # edge 9: (u,v)\n        # edge 10: (u,v)\n        # edge 11: (u,v)\n        # edge 12: (u,v)\n        # edge 13: (u,v)\n        # edge 14: (u,v)\n        # edge 15: (u,v)\n        # edge 16: (u,v)\n        # edge 17: (u,v)\n        # edge 18: (u,v)\n        # edge 19: (u,v)\n        # edge 20: (u,v)\n        # edge 21: (u,v)\n        # edge 22: (u,v)\n        # edge 23: (u,v)\n        # edge 24: (u,v)\n        # edge 25: (u,v)\n        # edge 26: (u,v)\n        # edge 27: (u,v)\n        # edge 28: (u,v)\n        # edge 29: (u,v)\n        # edge 30: (u,v)\n        # edge 31: (u,v)\n        # edge 32: (u,v)\n        # edge 33: (u,v)\n        # edge 34: (u,v)\n        # edge 35: (u,v)\n        # edge 36: (u,v)\n        # edge 37: (u,v)\n        # edge 38: (u,v)\n        # edge 39: (u,v)\n        # edge 40: (u,v)\n        # edge 41: (u,v)\n        # edge 42: (u,v)\n        # edge 43: (u,v)\n        # edge 44: (u,v)\n        # edge 45: (u,v)\n        # edge 46: (u,v)\n        # edge 47: (u,v)\n        # edge 48: (u,v)\n        # edge 49: (u,v)\n        # edge 50: (u,v)\n        # edge 51: (u,v)\n        # edge 52: (u,v)\n        # edge 53: (u,v)\n        # edge 54: (u,v)\n        # edge 55: (u,v)\n        # edge 56: (u,v)\n        # edge 57: (u,v)\n        # edge 58: (u,v)\n        # edge 59: (u,v)\n        # edge 60: (u,v)\n        # edge 61: (u,v)\n        # edge 62: (u,v)\n        # edge 63: (u,v)\n        # edge 64: (u,v)\n        # edge 65: (u,v)\n        # edge 66: (u,v)\n        # edge 67: (u,v)\n        # edge 68: (u,v)\n        # edge 69: (u,v)\n        # edge 70: (u,v)\n        # edge 71: (u,v)\n        # edge 72: (u,v)\n        # edge 73: (u,v)\n        # edge 74: (u,v)\n        # edge 75: (u,v)\n        # edge 76: (u,v)\n        # edge 77: (u,v)\n        # edge 78: (u,v)\n        # edge 79: (u,v)\n        # edge 80"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (v,u)\n        # edge 3: (u,v)\n        # edge 4: (v,u)\n        # edge 5: (u,v)\n        # edge 6: (v,u)\n        # edge 7: (u,v)\n        # edge 8: (v,u)\n        # edge 9: (u,v)\n        # edge 10: (v,u)\n        # edge 11: (u,v)\n        # edge 12: (v,u)\n        # edge 13: (u,v)\n        # edge 14: (v,u)\n        # edge 15: (u,v)\n        # edge 16: (v,u)\n        # edge 17: (u,v)\n        # edge 18: (v,u)\n        # edge 19: (u,v)\n        # edge 20: (v,u)\n        # edge 21: (u,v)\n        # edge 22: (v,u)\n        # edge 23: (u,v)\n        # edge 24: (v,u)\n        # edge 25: (u,v)\n        # edge 26: (v,u)\n        # edge 27: (u,v)\n        # edge 28: (v,u)\n        # edge 29: (u,v)\n        # edge 30: (v,u)\n        # edge 31: (u,v)\n        # edge 32: (v,u)\n        # edge 33: (u,v)\n        # edge 34: (v,u)\n        # edge 35: (u,v)\n        # edge 36: (v,u)\n        # edge 37: (u,v)\n        # edge 38: (v,u)\n        # edge 39: (u,v)\n        # edge 40: (v,u)\n        # edge 41: (u,v)\n        # edge 42: (v,u)\n        # edge 43: (u,v)\n        # edge 44: (v,u)\n        # edge 45: (u,v)\n        # edge 46: (v,u)\n        # edge 47: (u,v)\n        # edge 48: (v,u)\n        # edge 49: (u,v)\n        # edge 50: (v,u)\n        # edge 51: (u,v)\n        # edge 52: (v,u)\n        # edge 53: (u,v)\n        # edge 54: (v,u)\n        # edge 55: (u,v)\n        # edge 56: (v,u)\n        # edge 57: (u,v)\n        # edge 58: (v,u)\n        # edge 59: (u,v)\n        # edge 60: (v,u)\n        # edge 61: (u,v)\n        # edge 62: (v,u)\n        # edge 63: (u,v)\n        # edge 64: (v,u)\n        # edge 65: (u,v)\n        # edge 66: (v,u)\n        # edge 67: (u,v)\n        # edge 68: (v,u)\n        # edge 69: (u,v)\n        # edge 70: (v,u)\n        # edge 71: (u,v)\n        # edge 72: (v,u)\n        # edge 73: (u,v)\n        # edge 74: (v,u)\n        # edge 75: (u,v)\n        # edge 76: (v,u)\n        # edge 77: (u,v)\n        # edge 78: (v,u)\n        # edge 79: (u,v)\n        # edge 80"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (v,u)\n        # edge 3: (u,v)\n        # edge 4: (v,u)\n        # edge 5: (u,v)\n        # edge 6: (v,u)\n        # edge 7: (u,v)\n        # edge 8: (v,u)\n        # edge 9: (u,v)\n        # edge 10: (v,u)\n        # edge 11: (u,v)\n        # edge 12: (v,u)\n        # edge 13: (u,v)\n        # edge 14: (v,u)\n        # edge 15: (u,v)\n        # edge 16: (v,u)\n        # edge 17: (u,v)\n        # edge 18: (v,u)\n        # edge 19: (u,v)\n        # edge 20: (v,u)\n        # edge 21: (u,v)\n        # edge 22: (v,u)\n        # edge 23: (u,v)\n        # edge 24: (v,u)\n        # edge 25: (u,v)\n        # edge 26: (v,u)\n        # edge 27: (u,v)\n        # edge 28: (v,u)\n        # edge 29: (u,v)\n        # edge 30: (v,u)\n        # edge 31: (u,v)\n        # edge 32: (v,u)\n        # edge 33: (u,v)\n        # edge 34: (v,u)\n        # edge 35: (u,v)\n        # edge 36: (v,u)\n        # edge 37: (u,v)\n        # edge 38: (v,u)\n        # edge 39: (u,v)\n        # edge 40: (v,u)\n        # edge 41: (u,v)\n        # edge 42: (v,u)\n        # edge 43: (u,v)\n        # edge 44: (v,u)\n        # edge 45: (u,v)\n        # edge 46: (v,u)\n        # edge 47: (u,v)\n        # edge 48: (v,u)\n        # edge 49: (u,v)\n        # edge 50: (v,u)\n        # edge 51: (u,v)\n        # edge 52: (v,u)\n        # edge 53: (u,v)\n        # edge 54: (v,u)\n        # edge 55: (u,v)\n        # edge 56: (v,u)\n        # edge 57: (u,v)\n        # edge 58: (v,u)\n        # edge 59: (u,v)\n        # edge 60: (v,u)\n        # edge 61: (u,v)\n        # edge 62: (v,u)\n        # edge 63: (u,v)\n        # edge 64: (v,u)\n        # edge 65: (u,v)\n        # edge 66: (v,u)\n        # edge 67: (u,v)\n        # edge 68: (v,u)\n        # edge 69: (u,v)\n        # edge 70: (v,u)\n        # edge 71: (u,v)\n        # edge 72: (v,u)\n        # edge 73: (u,v)\n        # edge 74: (v,u)\n        # edge 75: (u,v)\n        # edge 76: (v,u)\n        # edge 77: (u,v)\n        # edge 78: (v,u)\n        # edge 79: (u,v)\n        # edge 80"}, {"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (u,v)\n        # edge 3: (u,v)\n        # edge 4: (u,v)\n        # edge 5: (u,v)\n        # edge 6: (u,v)\n        # edge 7: (u,v)\n        # edge 8: (u,v)\n        # edge 9: (u,v)\n        # edge 10: (u,v)\n        # edge 11: (u,v)\n        # edge 12: (u,v)\n        # edge 13: (u,v)\n        # edge 14: (u,v)\n        # edge 15: (u,v)\n        # edge 16: (u,v)\n        # edge 17: (u,v)\n        # edge 18: (u,v)\n        # edge 19: (u,v)\n        # edge 20: (u,v)\n        # edge 21: (u,v)\n        # edge 22: (u,v)\n        # edge 23: (u,v)\n        # edge 24: (u,v)\n        # edge 25: (u,v)\n        # edge 26: (u,v)\n        # edge 27: (u,v)\n        # edge 28: (u,v)\n        # edge 29: (u,v)\n        # edge 30: (u,v)\n        # edge 31: (u,v)\n        # edge 32: (u,v)\n        # edge 33: (u,v)\n        # edge 34: (u,v)\n        # edge 35: (u,v)\n        # edge 36: (u,v)\n        # edge 37: (u,v)\n        # edge 38: (u,v)\n        # edge 39: (u,v)\n        # edge 40: (u,v)\n        # edge 41: (u,v)\n        # edge 42: (u,v)\n        # edge 43: (u,v)\n        # edge 44: (u,v)\n        # edge 45: (u,v)\n        # edge 46: (u,v)\n        # edge 47: (u,v)\n        # edge 48: (u,v)\n        # edge 49: (u,v)\n        # edge 50: (u,v)\n        # edge 51: (u,v)\n        # edge 52: (u,v)\n        # edge 53: (u,v)\n        # edge 54: (u,v)\n        # edge 55: (u,v)\n        # edge 56: (u,v)\n        # edge 57: (u,v)\n        # edge 58: (u,v)\n        # edge 59: (u,v)\n        # edge 60: (u,v)\n        # edge 61: (u,v)\n        # edge 62: (u,v)\n        # edge 63: (u,v)\n        # edge 64: (u,v)\n        # edge 65: (u,v)\n        # edge 66: (u,v)\n        # edge 67: (u,v)\n        # edge 68: (u,v)\n        # edge 69: (u,v)\n        # edge 70: (u,v)\n        # edge 71: (u,v)\n        # edge 72: (u,v)\n        # edge 73: (u,v)\n        # edge 74: (u,v)\n        # edge 75: (u,v)\n        # edge 76: (u,v)\n        # edge 77: (u,v)\n        # edge 78: (u,v)\n        # edge 79: (u,v)\n        # edge 80"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}, {"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        \n        return num % 9"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}, {"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        # 0^2 = 2\n        # 2^2 = 0\n        # 2^0 = 2\n        #"}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1"}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^"}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        \n        # 0 ^ 1 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 1 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 0 ^ 0 ^ 1 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0"}, {"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        \n        # 0 ^ 1 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 1 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 0 ^ 1 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}, {"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(i + 1):\n                j2 = i - j1\n                if j1 > 0:\n                    dp[i][j1][j2] = dp[i - 1][j1 - 1][j2] + grid[i][j1]\n                if j2 > 0:\n                    dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1][j2 - 1] + grid[i][j2])\n                if j1 > 0 and j2 > 0:\n                    dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1 - 1][j2 - 1] + grid[i][j1] + grid[i][j2])\n        return max(dp[n - 1][n - 1])"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j in range(n):\n                for k in range(n):\n                    if grid[i][j] == -1 or grid[i][k] == -1:\n                        dp[i][j][k] = dp[i - 1][j][k]\n                    elif j == k:\n                        dp[i][j][k] = dp[i - 1][j][k] + grid[i][j]\n                    else:\n                        dp[i][j][k] = dp[i - 1][j][k] + grid[i][j] + grid[i][k]\n                    if j > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k])\n                    if k > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1])\n        return max(dp[n - 1][n - 1])"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j in range(n):\n                for k in range(n):\n                    if grid[i][j] == -1 or grid[i][k] == -1:\n                        dp[i][j][k] = dp[i - 1][j][k]\n                    elif j == k:\n                        dp[i][j][k] = dp[i - 1][j][k] + grid[i][j]\n                    else:\n                        dp[i][j][k] = dp[i - 1][j][k] + grid[i][j] + grid[i][k]\n                    if j > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k])\n                    if k > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1])\n        return max(dp[n - 1][n - 1])"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(i + 1):\n                j2 = i - j1\n                if j1 > 0:\n                    dp[i][j1][j2] = dp[i - 1][j1 - 1][j2] + grid[i][j1]\n                if j2 > 0:\n                    dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1][j2 - 1] + grid[i][j2])\n                if j1 > 0 and j2 > 0:\n                    dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1 - 1][j2 - 1] + grid[i][j1] + grid[i][j2])\n        return max(dp[n - 1][n - 1])"}, {"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(i + 1):\n                j2 = i - j1\n                if j1 > 0:\n                    dp[i][j1][j2] = dp[i - 1][j1 - 1][j2] + grid[i][j1]\n                if j2 > 0:\n                    dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1][j2 - 1] + grid[i][j2])\n                if j1 > 0 and j2 > 0:\n                    dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1 - 1][j2 - 1] + grid[i][j1] + grid[i][j2])\n        return max(dp[n - 1][n - 1])"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 2\n        \n        for i in range(2, n+1):\n            dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % mod\n        \n        return (dp[n] * 2 + dp[n-1]) % mod"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [1,2,4]\n        if n < 3:\n            return dp[n]\n        for i in range(3,n+1):\n            dp.append((dp[i-1]+dp[i-2]+dp[i-3])%mod)\n        return dp[n]"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [1, 2, 4]\n        if n < 3:\n            return dp[n]\n        \n        for i in range(3, n+1):\n            dp.append((dp[i-1] + dp[i-2] + dp[i-3]) % mod)\n        \n        return dp[n]"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 2\n        \n        for i in range(2, n+1):\n            dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % mod\n        \n        return (dp[n] + dp[n-1] + dp[n-2]) % mod"}, {"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 2\n        \n        for i in range(2, n+1):\n            dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % mod\n        \n        return (dp[n] + dp[n-1] + dp[n-2]) % mod"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum(int(i)**2 for i in str(n))\n        return n == 1"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum(int(i)**2 for i in str(n))\n        return n == 1"}, {"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}, {"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        return True"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        return True"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        \n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n            \n        return True"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        \n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        \n        return True"}, {"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        \n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n            \n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}, {"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j == 0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                else:\n                    grid[i][j] = min(grid[i][j-1], grid[i-1][j]) + grid[i][j]\n        \n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        prev = \"1\"\n        for i in range(2, n+1):\n            curr = \"\"\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        prev = \"11\"\n        for i in range(3, n+1):\n            curr = \"\"\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        prev = \"11\"\n        for i in range(3, n+1):\n            curr = \"\"\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        prev = \"11\"\n        for i in range(3, n+1):\n            curr = \"\"\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev"}, {"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        prev = \"1\"\n        for i in range(2, n+1):\n            curr = \"\"\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        max_element = max(nums)\n        \n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        if max_element > sum(nums) / k:\n            return max_element\n        \n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        if max_element < sum(nums) / k:\n            return max_element\n        \n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        return max_element"}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, return max element\n        # if the max element is less than the sum of all the elements in the array, return the max element\n        # if the max element is equal to the sum of all the elements in the array, return the max element + 1\n        \n        # binary search\n        # find the max element in the array\n        max_element = max(nums)\n        \n        # if the max element is greater than the sum of all the elements in the array, return max element\n        if max_element > sum(nums) // k:\n            return max_element\n        \n        # if the max element is less than the sum of all the elements in the array, return the max element\n        if max_element < sum(nums) // k:\n            return max_element\n        \n        # if the max element is equal to the sum of all the elements in the array, return the max element + 1\n        return max_element + 1"}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        max_element = max(nums)\n        \n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        if max_element < sum(nums):\n            return max_element\n        \n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        if max_element > sum(nums):\n            return max_element\n        \n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        return max_element"}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array\n        # then we can't split the array into k subarrays\n        # if the max element is less than the sum of all the elements in the array\n        # then we can split the array into k subarrays\n        # if the max element is equal to the sum of all the elements in the array\n        # then we can split the array into k subarrays and the max element will be the answer\n        \n        # find the max element in the array\n        max_element = max(nums)\n        \n        # if the max element is greater than the sum of all the elements in the array\n        # then we can't split the array into k subarrays\n        if max_element > sum(nums) // k:\n            return max_element\n        \n        # if the max element is less than the sum of all the elements in the array\n        # then we can split the array into k subarrays\n        # if the max element is equal to the sum of all the elements in the array\n        # then we can split the array into k subarrays and the max element will be the answer\n        left = max_element\n        right = sum(nums)\n        \n        while left < right:\n            mid = (left + right) // 2\n            if self.canSplit(nums, mid, k):\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left\n        \n    def canSplit(self, nums, target, k):\n        count = 1\n        curr_sum = 0\n        \n        for num in nums:\n            curr_sum += num\n            if curr_sum > target:\n                count += 1\n                curr_sum = num\n            if count > k:\n                return False\n        \n        return True"}, {"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        max_element = max(nums)\n        \n        # if the max element is greater than the sum of all the elements in the array, then the max element is the answer\n        if max_element > sum(nums) / k:\n            return max_element\n        \n        # if the max element is less than the sum of all the elements in the array, then the max element is the answer\n        if max_element < sum(nums) / k:\n            return max_element\n        \n        # if the max element is equal to the sum of all the elements in the array, then the max element is the answer\n        return max_element"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        low = 0\n        high = len(nums)-1\n        \n        while low <= high:\n            mid = (low+high)//2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[low] <= nums[mid]:\n                if nums[low] <= target <= nums[mid]:\n                    high = mid-1\n                else:\n                    low = mid+1\n            else:\n                if nums[mid] <= target <= nums[high]:\n                    low = mid+1\n                else:\n                    high = mid-1\n        \n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        low = 0\n        high = len(nums)-1\n        \n        while low <= high:\n            mid = (low + high)//2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[low] <= nums[mid]:\n                if nums[low] <= target <= nums[mid]:\n                    high = mid - 1\n                else:\n                    low = mid + 1\n            else:\n                if nums[mid] <= target <= nums[high]:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        \n        return -1"}, {"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums)-1\n        \n        while l<=r:\n            mid = (l+r)//2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] >= nums[l]:\n                if nums[mid] > target and nums[l] <= target:\n                    r = mid-1\n                else:\n                    l = mid+1\n            else:\n                if nums[mid] < target and nums[r] >= target:\n                    l = mid+1\n                else:\n                    r = mid-1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {\n            '2': ['a', 'b', 'c'],\n            '3': ['d', 'e', 'f'],\n            '4': ['g', 'h', 'i'],\n            '5': ['j', 'k', 'l'],\n            '6': ['m', 'n', 'o'],\n            '7': ['p', 'q', 'r', 's'],\n            '8': ['t', 'u', 'v'],\n            '9': ['w', 'x', 'y', 'z']\n        }\n        \n        res = []\n        curr = []\n        self.backtrack(digits, phone, 0, curr, res)\n        return res\n        \n    def backtrack(self, digits, phone, index, curr, res):\n        if index == len(digits):\n            res.append(''.join(curr))\n            return\n        \n        for letter in phone[digits[index]]:\n            curr.append(letter)\n            self.backtrack(digits, phone, index + 1, curr, res)\n            curr.pop()"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {'2':['a','b','c'],\n                 '3':['d','e','f'],\n                 '4':['g','h','i'],\n                 '5':['j','k','l'],\n                 '6':['m','n','o'],\n                 '7':['p','q','r','s'],\n                 '8':['t','u','v'],\n                 '9':['w','x','y','z']}\n        \n        res = []\n        curr = []\n        for i in range(len(digits)):\n            if i == 0:\n                for j in phone[digits[i]]:\n                    curr.append(j)\n            else:\n                temp = []\n                for j in phone[digits[i]]:\n                    for k in curr:\n                        temp.append(k+j)\n                curr = temp\n        return curr"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {'2':['a','b','c'],\n                 '3':['d','e','f'],\n                 '4':['g','h','i'],\n                 '5':['j','k','l'],\n                 '6':['m','n','o'],\n                 '7':['p','q','r','s'],\n                 '8':['t','u','v'],\n                 '9':['w','x','y','z']}\n        \n        res = []\n        curr = []\n        for i in range(len(digits)):\n            if i == 0:\n                for j in phone[digits[i]]:\n                    curr.append(j)\n            else:\n                temp = []\n                for j in phone[digits[i]]:\n                    for k in curr:\n                        temp.append(k+j)\n                curr = temp\n        return curr"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {'2':['a','b','c'],\n                 '3':['d','e','f'],\n                 '4':['g','h','i'],\n                 '5':['j','k','l'],\n                 '6':['m','n','o'],\n                 '7':['p','q','r','s'],\n                 '8':['t','u','v'],\n                 '9':['w','x','y','z']}\n        \n        res = []\n        curr = []\n        for i in range(len(digits)):\n            if i == 0:\n                for j in phone[digits[i]]:\n                    curr.append(j)\n            else:\n                temp = []\n                for j in phone[digits[i]]:\n                    for k in curr:\n                        temp.append(k+j)\n                curr = temp\n        return curr"}, {"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2':'abc','3':'def','4':'ghi','5':'jkl','6':'mno','7':'pqrs','8':'tuv','9':'wxyz'}\n        \n        res = []\n        def backtrack(i,curr):\n            if i == len(digits):\n                res.append(curr)\n                return\n            \n            for c in phone[digits[i]]:\n                backtrack(i+1,curr+c)\n        \n        backtrack(0,'')\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}, {"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '11'\n            elif len(n) == 2:\n                return '9'\n            else:\n                return '9' + '0' * (len(n) - 1)\n        \n        if n[0] == '0':\n            return '0'\n        \n        if len(n) == 1:\n            return str(int(n) - 1)\n        \n        if len(n) == 2:\n            return str(int(n) - 2)\n        \n        if int(n) % 10 == 9:\n            return str(int(n) - 1)\n        \n        if int(n) % 10 == 1:\n            return str(int(n) + 1)\n        \n        if int(n) % 10 == 0:\n            return str(int(n) - 1)\n        \n        if int(n) % 10 == 5:\n            return str(int(n) + 1)\n        \n        if int(n) % 10 == 6:\n            return str(int(n) + 2)\n        \n        if int(n) % 10 == 7:\n            return str(int(n) + 3)\n        \n        if int(n) % 10 == 8:\n            return str(int(n) + 4)\n        \n        if int(n) % 10 == 9:\n            return str(int(n) + 4)\n        \n        return str(int(n) + 1)"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '11'\n            elif len(n) == 2:\n                return '9'\n            else:\n                return '9'\n        else:\n            if len(n) == 1:\n                return str(int(n) - 1)\n            elif len(n) == 2:\n                return str(int(n) - 2)\n            else:\n                return str(int(n) + 1)"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '11'\n            elif len(n) == 2:\n                return '9'\n            else:\n                return '9' + '0' * (len(n) - 1)\n        \n        if n[0] == '0':\n            return '0'\n        \n        if len(n) == 1:\n            return str(int(n) - 1)\n        \n        if len(n) == 2:\n            return str(int(n) - 2)\n        \n        if int(n) % 10 == 9:\n            return str(int(n) - 1)\n        \n        if int(n) % 10 == 0:\n            return str(int(n) + 1)\n        \n        if int(n) % 10 == 5:\n            return str(int(n) + 2)\n        \n        if int(n) % 10 == 6:\n            return str(int(n) + 1)\n        \n        if int(n) % 10 == 1:\n            return str(int(n) - 1)\n        \n        if int(n) % 10 == 2:\n            return str(int(n) - 1)\n        \n        if int(n) % 10 == 3:\n            return str(int(n) - 1)\n        \n        if int(n) % 10 == 4:\n            return str(int(n) - 1)\n        \n        if int(n) % 10 == 7:\n            return str(int(n) + 1)\n        \n        if int(n) % 10 == 8:\n            return str(int(n) + 1)\n        \n        if int(n) % 10 == 9:\n            return str(int(n) + 1)\n        \n        return str(int(n) + 1)"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '11'\n            elif len(n) == 2:\n                return '9'\n            else:\n                return '9'\n        else:\n            if len(n) == 1:\n                return str(int(n) - 1)\n            elif len(n) == 2:\n                return str(int(n) - 2)\n            else:\n                return str(int(n) + 1)"}, {"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '1':\n            if len(n) == 1:\n                return '11'\n            elif len(n) == 2:\n                return '9'\n            else:\n                return '9'\n        else:\n            if len(n) == 1:\n                return str(int(n) - 1)\n            elif len(n) == 2:\n                return str(int(n) - 2)\n            else:\n                return str(int(n) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}, {"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        \n        return rev * sign"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        \n        return rev * sign"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}, {"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}, {"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n//2):\n                matrix[i][j], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            min_prod = min(nums[i], nums[i] * curr_max, nums[i] * min_prod)\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            min_prod = min(nums[i], nums[i] * curr_max, nums[i] * min_prod)\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            min_prod = min(nums[i], nums[i] * curr_max, nums[i] * min_prod)\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            min_prod = min(nums[i], nums[i] * curr_max, nums[i] * min_prod)\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}, {"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            min_prod = min(nums[i], nums[i] * curr_max, nums[i] * min_prod)\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = True\n        \n        queue = deque([(0,0)])\n        while queue:\n            stone, jump = queue.popleft()\n            if stone in stone_set:\n                if stone == stones[-1]:\n                    return True\n                for next_stone in [stone + jump - 1, stone + jump, stone + jump + 1]:\n                    if next_stone in stone_set and next_stone - stone <= 2:\n                        if next_stone == stones[-1]:\n                            return True\n                        queue.append((next_stone, jump + 1))\n        return False"}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = True\n        \n        queue = deque([(0,0)])\n        \n        while queue:\n            stone, jump = queue.popleft()\n            \n            if stone in stone_set:\n                if stone == stones[-1]:\n                    return True\n                \n                for next_jump in [jump-1, jump, jump+1]:\n                    if next_jump > 0 and stone + next_jump in stone_set:\n                        queue.append((stone + next_jump, next_jump))\n                        stone_map[stone + next_jump] = True\n        \n        return False"}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = True\n        \n        queue = deque([(0,0)])\n        while queue:\n            stone, jump = queue.popleft()\n            if stone in stone_set:\n                if stone == stones[-1]:\n                    return True\n                for next_jump in range(jump-1, jump+2):\n                    if next_jump > 0 and stone + next_jump in stone_set:\n                        queue.append((stone + next_jump, next_jump))\n                        stone_map[stone + next_jump] = True\n        return False"}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = stone_set\n        \n        stone_map[stones[-1]] = stone_set\n        \n        q = deque([(0,0)])\n        \n        while q:\n            stone, jump = q.popleft()\n            \n            if stone in stone_map:\n                for next_stone in stone_map[stone]:\n                    if next_stone == stones[-1]:\n                        return True\n                    q.append((next_stone, jump + 1))\n                    if jump > 0:\n                        q.append((next_stone, jump - 1))\n                    q.append((next_stone, jump))\n        \n        return False"}, {"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = True\n        \n        q = deque([(0,0)])\n        while q:\n            stone, jump = q.popleft()\n            if stone in stone_set:\n                if stone == stones[-1]:\n                    return True\n                for next_jump in range(jump-1, jump+2):\n                    if next_jump > 0 and stone + next_jump in stone_set:\n                        q.append((stone + next_jump, next_jump))\n                        stone_map[stone + next_jump] = True\n        return False"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score.sort(reverse=True)\n        \n        # create a hashmap to store the score and its corresponding rank\n        score_rank = {}\n        for i, s in enumerate(score):\n            score_rank[s] = i + 1\n        \n        # create a list of the corresponding ranks\n        ranks = [None] * len(score)\n        for s in score:\n            ranks[score_rank[s] - 1] = s\n        \n        # replace the ranks with the corresponding medals\n        for i, r in enumerate(ranks):\n            if r == score[0]:\n                ranks[i] = \"Gold Medal\"\n            elif r == score[1]:\n                ranks[i] = \"Silver Medal\"\n            elif r == score[2]:\n                ranks[i] = \"Bronze Medal\"\n            else:\n                ranks[i] = str(r)\n        \n        return ranks"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the array\n        score.sort()\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # fill the hashmap\n        for i in range(len(score)):\n            hashmap[score[i]] = i\n        \n        # create a list of the keys\n        keys = list(hashmap.keys())\n        \n        # create a list of the values\n        values = list(hashmap.values())\n        \n        # create a list of the values\n        values.reverse()\n        \n        # create a list of the values\n        res = []\n        \n        # loop through the values\n        for i in range(len(values)):\n            # if the value is 1\n            if values[i] == 1:\n                # add \"Gold Medal\" to the list\n                res.append(\"Gold Medal\")\n            # if the value is 2\n            elif values[i] == 2:\n                # add \"Silver Medal\" to the list\n                res.append(\"Silver Medal\")\n            # if the value is 3\n            elif values[i] == 3:\n                # add \"Bronze Medal\" to the list\n                res.append(\"Bronze Medal\")\n            # if the value is greater than 3\n            else:\n                # add the value to the list\n                res.append(str(values[i] + 1))\n        \n        # return the list\n        return res"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score array in descending order\n        score.sort(reverse=True)\n        \n        # create a hashmap to store the score and rank\n        score_rank = {}\n        \n        # loop through the score array\n        for i, s in enumerate(score):\n            # if the score is not in the hashmap, add it\n            if s not in score_rank:\n                score_rank[s] = i + 1\n        \n        # loop through the score array in reverse order\n        for i, s in enumerate(score):\n            # if the score is in the hashmap, add the rank to the result array\n            if s in score_rank:\n                score[i] = score_rank[s]\n        \n        # loop through the score array\n        for i, s in enumerate(score):\n            # if the rank is 1, add \"Gold Medal\" to the result array\n            if s == 1:\n                score[i] = \"Gold Medal\"\n            # if the rank is 2, add \"Silver Medal\" to the result array\n            elif s == 2:\n                score[i] = \"Silver Medal\"\n            # if the rank is 3, add \"Bronze Medal\" to the result array\n            elif s == 3:\n                score[i] = \"Bronze Medal\"\n        \n        return score"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the array in descending order\n        score.sort(reverse=True)\n        \n        # create a hashmap to store the index of each score\n        score_map = {}\n        for i, s in enumerate(score):\n            score_map[s] = i\n        \n        # assign the rank to each score\n        for i, s in enumerate(score):\n            if i == 0:\n                score[i] = \"Gold Medal\"\n            elif i == 1:\n                score[i] = \"Silver Medal\"\n            elif i == 2:\n                score[i] = \"Bronze Medal\"\n            else:\n                score[i] = str(i+1)\n        \n        # assign the rank to each score\n        for i, s in enumerate(score):\n            score[i] = score_map[s]\n        \n        return score"}, {"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the array in descending order\n        score.sort(reverse=True)\n        \n        # create a hashmap to store the index of each score\n        score_map = {}\n        for i, s in enumerate(score):\n            score_map[s] = i\n        \n        # assign the rank to each score\n        for i, s in enumerate(score):\n            if i == 0:\n                score[i] = \"Gold Medal\"\n            elif i == 1:\n                score[i] = \"Silver Medal\"\n            elif i == 2:\n                score[i] = \"Bronze Medal\"\n            else:\n                score[i] = str(i+1)\n        \n        # assign the rank to each score\n        for i, s in enumerate(score):\n            score[i] = score_map[s]\n        \n        return score"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        start = 0\n        char_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in char_map:\n                start = max(start, char_map[s[i]] + 1)\n            char_map[s[i]] = i\n            max_len = max(max_len, i - start + 1)\n        \n        return max_len"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        start = 0\n        char_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in char_map:\n                start = max(start, char_map[s[i]] + 1)\n            char_map[s[i]] = i\n            max_len = max(max_len, i - start + 1)\n            \n        return max_len"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        start = 0\n        char_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in char_map:\n                start = max(start, char_map[s[i]] + 1)\n            char_map[s[i]] = i\n            max_len = max(max_len, i - start + 1)\n            \n        return max_len"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        start = 0\n        seen = {}\n        \n        for i in range(len(s)):\n            if s[i] in seen:\n                start = max(start, seen[s[i]] + 1)\n            seen[s[i]] = i\n            max_len = max(max_len, i - start + 1)\n        \n        return max_len"}, {"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # use a set to keep track of the characters\n        # if the character is already in the set, remove the leftmost character\n        # update the max length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track of the current length\n        # keep track of the max length\n        # keep track of the leftmost character\n        # keep track of the rightmost character\n        # keep track"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = word_dict.copy()\n            j = i\n            while j < i + word_len * word_count:\n                word = s[j:j+word_len]\n                if word in temp_dict:\n                    temp_dict[word] -= 1\n                    if temp_dict[word] == 0:\n                        del temp_dict[word]\n                j += word_len\n            if len(temp_dict) == 0:\n                res.append(i)\n        return res"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = word_dict.copy()\n            j = i\n            while j < i + word_len * word_count:\n                word = s[j:j+word_len]\n                if word in temp_dict:\n                    temp_dict[word] -= 1\n                    if temp_dict[word] == 0:\n                        del temp_dict[word]\n                j += word_len\n            if len(temp_dict) == 0:\n                res.append(i)\n        \n        return res"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 0\n            word_dict[word] += 1\n        \n        s_len = len(s)\n        if s_len < word_len * word_count:\n            return []\n        \n        res = []\n        for i in range(word_len):\n            left = i\n            right = i\n            word_dict_copy = word_dict.copy()\n            while right + word_len <= s_len:\n                word = s[right:right + word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        word_dict_copy.pop(word)\n                right += word_len\n                if len(word_dict_copy) == 0:\n                    res.append(left)\n                    word_dict_copy[s[left:left + word_len]] += 1\n                    left += word_len\n        return res"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 0\n            word_dict[word] += 1\n        \n        s_len = len(s)\n        res = []\n        for i in range(word_len):\n            left = i\n            right = i\n            word_dict_copy = word_dict.copy()\n            while right + word_len <= s_len:\n                word = s[right:right+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        word_dict_copy.pop(word)\n                right += word_len\n                if len(word_dict_copy) == 0:\n                    res.append(left)\n                    word_dict_copy[s[left:left+word_len]] += 1\n                    left += word_len\n        return res"}, {"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = word_dict.copy()\n            j = i\n            while j < i + word_len * word_count:\n                word = s[j:j+word_len]\n                if word in temp_dict:\n                    temp_dict[word] -= 1\n                    if temp_dict[word] == 0:\n                        del temp_dict[word]\n                j += word_len\n            if len(temp_dict) == 0:\n                res.append(i)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                max_val = arr[i]\n        \n        return chunks"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                max_val = arr[i]\n        \n        return chunks"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                max_val = arr[i]\n        \n        return chunks"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                max_val = arr[i]\n        \n        return chunks"}, {"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                max_val = arr[i]\n        \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.val < dummy.next.val:\n                dummy.next = curr\n                curr = curr.next\n                dummy.next.next = None\n            else:\n                prev = dummy\n                while prev.next and prev.next.val < curr.val:\n                    prev = prev.next\n                curr.next = prev.next\n                prev.next = curr\n                curr = curr.next\n        return dummy.next"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        \n        return dummy.next"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}, {"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n            \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n            \n        return dummy.next"}, {"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}, {"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        \n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        \n        return dp[m][n]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        \n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[m][n]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        \n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        \n        return dp[m][n]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        \n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        \n        return dp[m][n]"}, {"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        \n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}, {"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        if len(left) == 0:\n            return [str(root.val) + \"->\" + str(root.right.val)]\n        \n        if len(right) == 0:\n            return [str(root.val) + \"->\" + str(root.right.val)]\n        \n        paths = []\n        for l in left:\n            paths.append(str(root.val) + \"->\" + l)\n        \n        for r in right:\n            paths.append(str(root.val) + \"->\" + r)\n        \n        return paths"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + i for i in left + right]"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}, {"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right + 1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid)\n            count += mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right + 1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid)\n            count += mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            count = 0\n            while i <= mid and j <= right:\n                if nums[i] > nums[j] * 2:\n                    count += mid - i + 1\n                i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right + 1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid)\n            count += mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}, {"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right + 1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid)\n            count += mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (sx == tx and sy <= ty) or (sy == ty and sx <= tx)"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (sx == tx and sy <= ty) or (sy == ty and sx <= tx)"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}, {"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend(['0'] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend(['0'] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend(['0'] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend(['0'] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = int(v1[i])\n            else:\n                v1.append(0)\n                \n            if i < len(v2):\n                v2[i] = int(v2[i])\n            else:\n                v2.append(0)\n                \n        for i in range(len(v1)):\n            if v1[i] < v2[i]:\n                return -1\n            elif v1[i] > v2[i]:\n                return 1\n            \n        return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(len(v1)):\n            if i < len(v2):\n                if int(v1[i]) > int(v2[i]):\n                    return 1\n                elif int(v1[i]) < int(v2[i]):\n                    return -1\n            else:\n                if int(v1[i]) > 0:\n                    return 1\n        return 0"}, {"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = int(v1[i])\n            else:\n                v1.append(0)\n                \n            if i < len(v2):\n                v2[i] = int(v2[i])\n            else:\n                v2.append(0)\n                \n        for i in range(len(v1)):\n            if v1[i] < v2[i]:\n                return -1\n            elif v1[i] > v2[i]:\n                return 1\n                \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 2. Optimized Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 3. DP Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 4. Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 5. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 6. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 7. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 8. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 9. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 10. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 11. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 12. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 13. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 14. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem you faced while coding this : No\n        \n        ## 15. Optimized Greedy Solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Did this code successfully run on Leetcode : Yes\n        ## Any problem"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}, {"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## We can buy the stock only if the price is increasing.\n        ## So, we can keep track of the minimum price and keep updating the max profit.\n        \n        ## Initialize the max profit as 0.\n        ## Initialize the minimum price as the first price.\n        ## Iterate over the prices.\n        ## If the price is greater than the minimum price, update the max profit.\n        ## Update the minimum price.\n        ## Return the max profit.\n        \n        max_profit = 0\n        min_price = prices[0]\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            else:\n                max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        for duration, lastDay in courses:\n            # add course to queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # if total time + duration > last day, remove course with longest duration\n            if total + duration > lastDay:\n                total += heapq.heappop(pq)[0]\n                \n            # update total time\n            total += duration\n            \n        return len(pq)"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # iterate over courses\n        for duration, lastDay in courses:\n            \n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # add course to total time\n            total += duration\n            \n            # if total time exceeds last day\n            if total > lastDay:\n                \n                # remove course from priority queue\n                total += heapq.heappop(pq)[0]\n                \n        return len(pq)"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # iterate over courses\n        for duration, lastDay in courses:\n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # if total time + duration > last day\n            if total + duration > lastDay:\n                # pop from priority queue\n                total -= heapq.heappop(pq)[0]\n            \n            # update total time\n            total += duration\n            \n        # return length of priority queue\n        return len(pq)"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # iterate over courses\n        for duration, lastDay in courses:\n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # update total time\n            total += duration\n            \n            # if total time exceeds last day\n            if total > lastDay:\n                # remove course from priority queue\n                total += heapq.heappop(pq)[0]\n                \n        # return length of priority queue\n        return len(pq)"}, {"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # iterate over courses\n        for duration, lastDay in courses:\n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # update total time\n            total += duration\n            \n            # if total time exceeds last day\n            if total > lastDay:\n                # remove course from priority queue\n                total += heapq.heappop(pq)[0]\n                \n        # return length of priority queue\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, end):\n        curr = prev.next\n        prev.next = None\n        while curr != end:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}, {"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] == s[1]:\n            return True\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[2]:\n            return True\n        \n        if s[0] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] == s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] == s[2]:\n            return False\n        \n        if s[0] != s[1] and s[1] != s[2]:\n            return False\n        \n        if s[0] == s[1] and s[1] == s[2]:\n            return True\n        \n        if s[0] != s[1] and s[1] == s[2]:"}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] != s[len(s)-1]:\n            return False\n        \n        if len(s) % len(s[1:]) == 0:\n            return True\n        \n        return False"}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] == s[len(s)-1]:\n            return self.repeatedSubstringPattern(s[1:len(s)-1])\n        \n        return False"}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] != s[len(s)-1]:\n            return False\n        \n        if len(s) % len(s[1:]) == 0:\n            return True\n        \n        return False"}, {"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if len(s) % len(set(s)) != 0:\n            return False\n        \n        return s in s * 2 - s"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n                \n        return dp[n]"}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n                \n        return dp[n]"}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1]*2 + dp[i-2]\n        # dp[0] = 1\n        # dp[1] = 1\n        # dp[2] = 2\n        # dp[3] = 5\n        # dp[4] = 14\n        # dp[5] = 42\n        # dp[6] = 132\n        # dp[7] = 429\n        # dp[8] = 1430\n        # dp[9] = 4862\n        # dp[10] = 16796\n        # dp[11] = 58786\n        # dp[12] = 208012\n        # dp[13] = 742900\n        # dp[14] = 2674440\n        # dp[15] = 9694845\n        # dp[16] = 35357670\n        # dp[17] = 129644790\n        # dp[18] = 477638700\n        # dp[19] = 1767263190\n        # dp[20] = 6564120420\n        # dp[21] = 24466265020\n        # dp[22] = 86244388280\n        # dp[23] = 343021157640\n        # dp[24] = 1246538300400\n        # dp[25] = 4368109152400\n        # dp[26] = 15511757649600\n        # dp[27] = 55095155117600\n        # dp[28] = 20054752329600\n        # dp[29] = 74290059673600\n        # dp[30] = 288581516883200\n        # dp[31] = 1033314790528000\n        # dp[32] = 38742049150950400\n        # dp[33] = 1477251859956569600\n        # dp[34] = 51422909561135040000\n        # dp[35] = 203978820463456000000\n        # dp[36] = 748610103287384000000\n        # dp[37] = 2851521721552360000000\n        # dp[38] = 10333147905280000000000\n        # dp[39] = 387420491509504000000000\n        # dp[40] = 14772518599565696000000000\n        # dp[41] = 514229095611350400000000000\n        # dp[42] = 2039788204634560000000000000\n        # dp[43] = 7486101032873840000000000000\n        # dp[44] = 28515217215523600000000000000\n        #"}, {"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1]*2 + dp[i-2]*2\n        # dp[i] = dp[i-1]*dp[i-1] + dp[i-2]*dp[i-2]\n        # dp[i] = dp[i-1]*dp[i-2]*2\n        # dp[i] = dp[i-1]*dp[i-1]*2 + dp[i-1]*dp[i-2]*2\n        # dp[i] = dp[i-1]*dp[i-1]*dp[i-1] + dp[i-1]*dp[i-1]*dp[i-2]*2 + dp[i-1]*dp[i-2]*dp[i-2]*2\n        # dp[i] = dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1] + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*2 + dp[i-1]*dp[i-2]*dp[i-2]*dp[i-2]*2\n        # dp[i] = dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1] + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*dp[i-2]*2 + dp[i-1]*dp[i-2]*dp[i-2]*dp[i-2]*dp[i-2]*2\n        # dp[i] = dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1] + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*dp[i-2]*dp[i-2]*2 + dp[i-1]*dp[i-2]*dp[i-2]*dp[i-2]*dp[i-2]*dp[i-2]*2\n        # dp[i] = dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1] + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*2 + dp[i-1]*dp[i-1]*dp[i-1]*dp[i-1]*dp[i-2]*dp[i-2]*dp[i-2]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # a^a = 0\n        # a^0 = a\n        # a^b^a = a^b\n        # a^b^c = a^b^a^c\n        # a^b^c^d = a^b^(c^d)\n        # a^b^c^d^e = a^b^(c^d^e)\n        # a^b^c^d^e^f = a^b^(c^d^e^f)\n        # a^b^c^d^e^f^g = a^b^(c^d^e^f^g)\n        # a^b^c^d^e^f^g^h = a^b^(c^d^e^f^g^h)\n        # a^b^c^d^e^f^g^h^i = a^b^(c^d^e^f^g^h^i)\n        # a^b^c^d^e^f^g^h^i^j = a^b^(c^d^e^f^g^h^i^j)\n        # a^b^c^d^e^f^g^h^i^j^k = a^b^(c^d^e^f^g^h^i^j^k)\n        # a^b^c^d^e^f^g^h^i^j^k^l = a^b^(c^d^e^f^g^h^i^j^k^l)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m = a^b^(c^d^e^f^g^h^i^j^k^l^m)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n = a^b^(c^d^e^f^g^h^i^j^k^l^m^n)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n^o = a^b^(c^d^e^f^g^h^i^j^k^l^m^n^o)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n^o^p = a^b^(c^d^e^f^g^h^i^j^k^l^m^n^o^p)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n^o^p^q = a^b^(c^d^e^f^g^h^i^j^k^l^m^n^o^p^q)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r = a^b^(c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s = a^b^(c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s^t = a^b^(c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s^t)\n        # a^b^c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s^t^u = a^b^(c^d^e^f^g^h^i^j^k^l^m^n^o^p^q^r^s^t^u)\n        # a"}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^2^"}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR the number with itself\n        # 3. XOR the number with the number with itself\n        # 4. XOR the number with the number with itself\n        # 5. XOR the number with the number with itself\n        # 6. XOR the number with the number with itself\n        # 7. XOR the number with the number with itself\n        # 8. XOR the number with the number with itself\n        # 9. XOR the number with the number with itself\n        # 10. XOR the number with the number with itself\n        # 11. XOR the number with the number with itself\n        # 12. XOR the number with the number with itself\n        # 13. XOR the number with the number with itself\n        # 14. XOR the number with the number with itself\n        # 15. XOR the number with the number with itself\n        # 16. XOR the number with the number with itself\n        # 17. XOR the number with the number with itself\n        # 18. XOR the number with the number with itself\n        # 19. XOR the number with the number with itself\n        # 20. XOR the number with the number with itself\n        # 21. XOR the number with the number with itself\n        # 22. XOR the number with the number with itself\n        # 23. XOR the number with the number with itself\n        # 24. XOR the number with the number with itself\n        # 25. XOR the number with the number with itself\n        # 26. XOR the number with the number with itself\n        # 27. XOR the number with the number with itself\n        # 28. XOR the number with the number with itself\n        # 29. XOR the number with the number with itself\n        # 30. XOR the number with the number with itself\n        # 31. XOR the number with the number with itself\n        # 32. XOR the number with the number with itself\n        # 33. XOR the number with the number with itself\n        # 34. XOR the number with the number with itself\n        # 35. XOR the number with the number with itself\n        # 36. XOR the number with the number with itself\n        # 37. XOR the number with the number with itself\n        # 38. XOR the number with the number with itself\n        # 39. XOR the number with the number with itself\n        # 40. XOR the number with the number with itself\n        # 41. XOR the number with the number with itself\n        # 42. XOR the number with the number with itself\n        # 43. XOR the number with the number with itself\n        # 44. XOR the number with the number with itself\n        # 45. XOR the number with the number with itself\n        # 46. XOR the number with the number with itself\n        # 47. XOR the number with the number with itself\n        # 48. XOR the number with the number with itself\n        # 49. XOR the number with the number with itself\n        # 50. XOR the number with the number with itself\n        # 51. XOR the number with the number with itself\n        # 52. XOR the number with the number with itself\n        # 53. XOR the number with the number with itself\n        # 54. XOR the number with the number with itself\n        # 55. XOR the number with the number with itself\n        # 56. XOR the number with the number with itself\n        # 57. XOR the number with the number with itself\n        # 58. XOR the number with the number with itself\n        # 59. XOR the number with the number with itself\n        # 60. XOR the number with the number with itself\n        # 61. XOR the number with the number with itself\n        # 62. XOR the number with the number with itself\n        # 63. XOR the number with the number with itself\n        # 64. XOR the number with the number with itself\n        # 65. XOR the number with the number with itself"}, {"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        ## 0 ^ 0 ^ 0 ^ 0 ^ 0 ^"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        stickers = [sorted(set(s) - set(target)) for s in stickers]\n        stickers.sort(key=len)\n        target = set(target)\n        dp = {0: 0}\n        for s in stickers:\n            dp_new = {}\n            for t in dp:\n                for c in s:\n                    if c not in dp_new:\n                        dp_new[c] = dp[t] + 1\n                    elif dp_new[c] > dp[t] + 1:\n                        dp_new[c] = dp[t] + 1\n            dp = dp_new\n        if target.issubset(dp):\n            return dp[target]\n        return -1"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        stickers = [sorted(s) for s in stickers]\n        stickers.sort(key=len)\n        \n        target = sorted(target)\n        \n        stickers = [sorted(s) for s in stickers]\n        \n        stickers = [s for s in stickers if s != target]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        stickers = [sorted(s) for s in stickers]\n        stickers.sort(key=len)\n        \n        target = sorted(target)\n        \n        dp = {0:0}\n        \n        for s in stickers:\n            dp_new = {}\n            for t in dp:\n                for i in range(len(s)):\n                    if s[i] != target[i] and s[i] not in dp_new:\n                        dp_new[s[i]] = dp[t] + 1\n            dp = dp_new\n        \n        if target not in dp:\n            return -1\n        \n        return dp[target]"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        stickers = [sorted(s) for s in stickers]\n        stickers.sort(key=len)\n        \n        dp = {0:0}\n        \n        for s in stickers:\n            dp_new = {}\n            for t in dp:\n                for i in range(len(s)):\n                    if s[i] == t:\n                        continue\n                    if s[i] not in dp_new:\n                        dp_new[s[i]] = 0\n                    dp_new[s[i]] = min(dp_new[s[i]], dp[t] + 1)\n            dp = dp_new\n        \n        if target not in dp:\n            return -1\n        return dp[target]"}, {"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        stickers = [sorted(s) for s in stickers]\n        stickers.sort(key=len)\n        \n        target = sorted(target)\n        \n        stickers = [sorted(s) for s in stickers]\n        \n        stickers = [s for s in stickers if s != target]\n        \n        stickers = [s for s in stickers if s[0] == target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0]]\n        \n        stickers = [s for s in stickers if s[0] != target[0"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i,j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        return dp[0][n-1]"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i,j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        return dp[0][n-1]"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = dp[i][j - 1] + 1\n                    for k in range(i, j):\n                        if s[k] == s[j]:\n                            dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j - 1])\n        \n        return dp[0][n - 1]"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i,j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        return dp[0][n-1]"}, {"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i,j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            \n            if mid * mid == x:\n                return mid\n            \n            elif mid * mid < x:\n                low = mid + 1\n            \n            else:\n                high = mid - 1\n        \n        return high"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}, {"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        sum = 0\n        i = 0\n        while i < len(s):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                sum -= roman_dict[s[i]]\n            else:\n                sum += roman_dict[s[i]]\n            i += 1\n        return sum"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        prev = 0\n        res = 0\n        for i in range(len(s)-1,-1,-1):\n            curr = roman_dict[s[i]]\n            if curr < prev:\n                res -= curr\n            else:\n                res += curr\n            prev = curr\n        return res"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        prev = 0\n        sum = 0\n        for i in range(len(s)-1,-1,-1):\n            if roman_dict[s[i]] < prev:\n                sum -= roman_dict[s[i]]\n            else:\n                sum += roman_dict[s[i]]\n            prev = roman_dict[s[i]]\n        return sum"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        i = 0\n        while i < len(s):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n            i += 1\n        return result"}, {"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        prev = 0\n        sum = 0\n        for i in range(len(s)-1,-1,-1):\n            if roman_dict[s[i]] < prev:\n                sum -= roman_dict[s[i]]\n            else:\n                sum += roman_dict[s[i]]\n            prev = roman_dict[s[i]]\n        return sum"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashset\n        # return len(nums) != len(set(nums))\n        \n        # Sorting\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                return True\n        return False"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashset\n        # return len(nums) != len(set(nums))\n        \n        # Sorting\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                return True\n        return False"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashset\n        # return len(nums) != len(set(nums))\n        \n        # Sorting\n        nums.sort()\n        for i in range(1, len(nums)):\n            if nums[i] == nums[i - 1]:\n                return True\n        return False"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i] == nums[i+1]:\n                return True\n        return False"}, {"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hash Table\n        # Create a hash table\n        # Iterate through the array\n        # If the element is already in the hash table, return True\n        # Otherwise, add the element to the hash table\n        # Return False if the loop completes without finding a duplicate\n        \n        hash_table = {}\n        \n        for num in nums:\n            if num in hash_table:\n                return True\n            hash_table[num] = 1\n        \n        return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     elif nums[i-k] == max_num:\n        #         max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # using deque\n        # Time Complexity: O(n)\n        # Space Complexity: O(k)\n        from collections import deque\n        dq = deque()\n        res = []\n        for i in range(len(nums)):\n            while dq and dq[-1] < i - k + 1:\n                dq.pop()\n            while dq and nums[dq[-1]] < nums[i]:\n                dq.pop()\n            dq.append(i)\n            if i >= k - 1:\n                res.append(nums[dq[0]])\n        return res"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if i >= k:\n        #         if nums[i-k] == max_num:\n        #             max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if i >= k:\n        #         if nums[i-k] == max_num:\n        #             max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if i >= k:\n        #         if nums[i-k] == max_num:\n        #             max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if i >= k:\n        #         if nums[i-k] == max_num:\n        #             max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if i >= k:\n        #         if nums[i-k] == max_num:\n        #             max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if i >= k:\n        #         if nums[i-k] == max_num:\n        #             max_num = max(nums[i-k+1:i+1])\n        #     res.append(max_num)\n        # return res\n        \n        # if k == 1:\n        #     return nums\n        \n        # max_num = max(nums[0:k])\n        # res = [max_num]\n        # for i in range(k, len(nums)):\n        #     if nums[i] > max_num:\n        #         max_num = nums[i]\n        #     if i >= k"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums\n        \n        max_nums = []\n        max_nums.append(max(nums[0:k]))\n        \n        for i in range(k, len(nums)):\n            if nums[i] > max_nums[i-k]:\n                max_nums.append(nums[i])\n            else:\n                max_nums.append(max_nums[i-k])\n        \n        return max_nums"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [nums[0]]\n        \n        max_nums = []\n        max_nums.append(max(nums[0:k]))\n        \n        for i in range(k, len(nums)):\n            if nums[i] > max_nums[0]:\n                max_nums[0] = nums[i]\n            if nums[i] == max_nums[0]:\n                max_nums.append(nums[i])\n            else:\n                max_nums.append(max_nums[0])\n            max_nums.pop(0)\n        \n        return max_nums"}, {"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # sliding window\n        # use deque\n        # maintain a decreasing queue\n        # if the next element is larger than the last element in the queue, pop the last element\n        # if the next element is smaller than the last element in the queue, pop all elements smaller than the next element\n        # add the next element to the queue\n        # add the next element to the result\n        # return the result\n        \n        # edge case\n        if not nums:\n            return []\n        \n        # initialize the result\n        result = []\n        \n        # initialize the queue\n        queue = collections.deque()\n        \n        # iterate over the nums array\n        for i in range(len(nums)):\n            \n            # if the queue is not empty and the next element is larger than the last element in the queue, pop the last element\n            if queue and nums[i] > queue[-1]:\n                queue.pop()\n            \n            # if the queue is not empty and the next element is smaller than the last element in the queue, pop all elements smaller than the next element\n            while queue and nums[i] < queue[-1]:\n                queue.pop()\n            \n            # add the next element to the queue\n            queue.append(nums[i])\n            \n            # if the queue is not empty and the index is equal to k - 1, add the last element to the result\n            if i >= k - 1:\n                result.append(queue[0])\n        \n        # return the result\n        return result"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}, {"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m = len(nums1)\n        n = len(nums2)\n        \n        if m == 0:\n            if n % 2 == 0:\n                return (nums2[n//2] + nums2[n//2 - 1]) / 2\n            else:\n                return nums2[n//2]\n        \n        if n == 0:\n            if m % 2 == 0:\n                return (nums1[m//2] + nums1[m//2 - 1]) / 2\n            else:\n                return nums1[m//2]\n        \n        low = 0\n        high = m\n        while low <= high:\n            mid1 = (low + high) // 2\n            mid2 = m + n - mid1\n            \n            if nums1[mid1] < nums2[mid2 - 1]:\n                low = mid1 + 1\n            elif nums1[mid1 - 1] > nums2[mid2]:\n                high = mid1 - 1\n            else:\n                if mid1 == 0:\n                    max_left = nums2[mid2 - 1]\n                elif mid2 == 0:\n                    max_left = nums1[mid1 - 1]\n                else:\n                    max_left = max(nums1[mid1 - 1], nums2[mid2 - 1])\n                \n                if (m + n) % 2 == 1:\n                    return max_left\n                \n                if mid1 == m:\n                    min_right = nums2[mid2]\n                elif mid2 == n:\n                    min_right = nums1[mid1]\n                else:\n                    min_right = min(nums1[mid1], nums2[mid2])\n                \n                return (max_left + min_right) / 2.0\n        \n        return 0.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     if nums[mid - 1] > nums[mid]:\n        #         return nums[mid]\n        #     if nums[mid] < nums[left]:\n        #         right = mid - 1\n        #     else:\n        #         left = mid + 1\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            if nums[mid] < nums[left]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n            \n        return row"}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row.append(row[i-1] * (rowIndex - i + 1) // i)\n        \n        return row"}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n            \n        return row"}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row.append(row[i-1] * (rowIndex - i + 1) // i)\n        \n        return row"}, {"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row.append(row[i-1] * (rowIndex - i + 1) // i)\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum):\n            if not root:\n                return []\n            \n            if not root.left and not root.right and root.val == targetSum:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val)\n            right = dfs(root.right, targetSum - root.val)\n            \n            for l in left:\n                l.insert(0, root.val)\n                \n            for r in right:\n                r.insert(0, root.val)\n                \n            return left + right\n        \n        return dfs(root, targetSum)"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum):\n            if not root:\n                return []\n            if not root.left and not root.right and root.val == targetSum:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val)\n            right = dfs(root.right, targetSum - root.val)\n            return [[root.val] + path for path in left + right]\n        \n        return dfs(root, targetSum)"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if root.left is None and root.right is None and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if root.left is None and root.right is None and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}, {"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum):\n            if not root:\n                return []\n            if not root.left and not root.right and root.val == targetSum:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val)\n            right = dfs(root.right, targetSum - root.val)\n            return [[root.val] + i for i in left + right]\n        \n        return dfs(root, targetSum)"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area // 2) = area\n        # 2. 2 * (area // 2) + 1 = area\n        # 3. 2 * (area // 2) + 1 - area = area\n        # 4. 2 * (area // 2) + 1 - area = area\n        # 5. 2 * (area // 2) + 1 - area = area\n        # 6. 2 * (area // 2) + 1 - area = area\n        # 7. 2 * (area // 2) + 1 - area = area\n        # 8. 2 * (area // 2) + 1 - area = area\n        # 9. 2 * (area // 2) + 1 - area = area\n        # 10. 2 * (area // 2) + 1 - area = area\n        # 11. 2 * (area // 2) + 1 - area = area\n        # 12. 2 * (area // 2) + 1 - area = area\n        # 13. 2 * (area // 2) + 1 - area = area\n        # 14. 2 * (area // 2) + 1 - area = area\n        # 15. 2 * (area // 2) + 1 - area = area\n        # 16. 2 * (area // 2) + 1 - area = area\n        # 17. 2 * (area // 2) + 1 - area = area\n        # 18. 2 * (area // 2) + 1 - area = area\n        # 19. 2 * (area // 2) + 1 - area = area\n        # 20. 2 * (area // 2) + 1 - area = area\n        # 21. 2 * (area // 2) + 1 - area = area\n        # 22. 2 * (area // 2) + 1 - area = area\n        # 23. 2 * (area // 2) + 1 - area = area\n        # 24. 2 * (area // 2) + 1 - area = area\n        # 25. 2 * (area // 2) + 1 - area = area\n        # 26. 2 * (area // 2) + 1 - area = area\n        # 27. 2 * (area // 2) + 1 - area = area\n        # 28. 2 * (area // 2) + 1 - area = area\n        # 29. 2 * (area // 2) + 1 - area = area\n        # 30. 2 * (area // 2) + 1 - area = area\n        # 31. 2 * (area // 2) + 1 - area = area\n        # 32. 2 * (area // 2) + 1 - area = area\n        # 33. 2 * (area // 2) + 1 - area = area\n        # 34. 2 * (area // 2) + 1 - area = area\n        # 35. 2 * (area // 2) + 1 - area = area\n        # 36. 2 * (area // 2) + 1 - area = area\n        # 37. 2 * (area // 2) + 1 - area = area\n        # 38. 2 * (area // 2) + 1 - area = area\n        # 39. 2 * (area // 2) + 1 - area = area\n        # 40. 2 * (area // 2) + 1 - area = area\n        # 41. 2 * (area // 2) + 1 - area = area\n        # 42. 2 * (area // 2) + 1 - area = area\n        # 43. 2 * (area // 2) + 1 - area = area\n        # 44. 2 * (area // 2) + 1 - area = area\n        # 45. 2 * (area // 2) + 1 - area = area\n        # 46. 2 * (area // 2) + 1 - area = area\n        # 47. 2 * (area // 2) + 1 - area = area\n        # 48"}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area // 2) = area\n        # 2. 2 * (area // 2) + 1 = area\n        # 3. 2 * (area // 2) + 1 - area = area\n        # 4. 2 * (area // 2) + 1 - area = area\n        # 5. 2 * (area // 2) + 1 - area = area\n        # 6. 2 * (area // 2) + 1 - area = area\n        # 7. 2 * (area // 2) + 1 - area = area\n        # 8. 2 * (area // 2) + 1 - area = area\n        # 9. 2 * (area // 2) + 1 - area = area\n        # 10. 2 * (area // 2) + 1 - area = area\n        # 11. 2 * (area // 2) + 1 - area = area\n        # 12. 2 * (area // 2) + 1 - area = area\n        # 13. 2 * (area // 2) + 1 - area = area\n        # 14. 2 * (area // 2) + 1 - area = area\n        # 15. 2 * (area // 2) + 1 - area = area\n        # 16. 2 * (area // 2) + 1 - area = area\n        # 17. 2 * (area // 2) + 1 - area = area\n        # 18. 2 * (area // 2) + 1 - area = area\n        # 19. 2 * (area // 2) + 1 - area = area\n        # 20. 2 * (area // 2) + 1 - area = area\n        # 21. 2 * (area // 2) + 1 - area = area\n        # 22. 2 * (area // 2) + 1 - area = area\n        # 23. 2 * (area // 2) + 1 - area = area\n        # 24. 2 * (area // 2) + 1 - area = area\n        # 25. 2 * (area // 2) + 1 - area = area\n        # 26. 2 * (area // 2) + 1 - area = area\n        # 27. 2 * (area // 2) + 1 - area = area\n        # 28. 2 * (area // 2) + 1 - area = area\n        # 29. 2 * (area // 2) + 1 - area = area\n        # 30. 2 * (area // 2) + 1 - area = area\n        # 31. 2 * (area // 2) + 1 - area = area\n        # 32. 2 * (area // 2) + 1 - area = area\n        # 33. 2 * (area // 2) + 1 - area = area\n        # 34. 2 * (area // 2) + 1 - area = area\n        # 35. 2 * (area // 2) + 1 - area = area\n        # 36. 2 * (area // 2) + 1 - area = area\n        # 37. 2 * (area // 2) + 1 - area = area\n        # 38. 2 * (area // 2) + 1 - area = area\n        # 39. 2 * (area // 2) + 1 - area = area\n        # 40. 2 * (area // 2) + 1 - area = area\n        # 41. 2 * (area // 2) + 1 - area = area\n        # 42. 2 * (area // 2) + 1 - area = area\n        # 43. 2 * (area // 2) + 1 - area = area\n        # 44. 2 * (area // 2) + 1 - area = area\n        # 45. 2 * (area // 2) + 1 - area = area\n        # 46. 2 * (area // 2) + 1 - area = area\n        # 47. 2 * (area // 2) + 1 - area = area\n        # 48"}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area // 2) = area\n        # 2. 2 * (area // 2) + 1 = area\n        # 3. 2 * (area // 2) + 1 - area = area\n        # 4. 2 * (area // 2) + 1 - area = area\n        # 5. 2 * (area // 2) + 1 - area = area\n        # 6. 2 * (area // 2) + 1 - area = area\n        # 7. 2 * (area // 2) + 1 - area = area\n        # 8. 2 * (area // 2) + 1 - area = area\n        # 9. 2 * (area // 2) + 1 - area = area\n        # 10. 2 * (area // 2) + 1 - area = area\n        # 11. 2 * (area // 2) + 1 - area = area\n        # 12. 2 * (area // 2) + 1 - area = area\n        # 13. 2 * (area // 2) + 1 - area = area\n        # 14. 2 * (area // 2) + 1 - area = area\n        # 15. 2 * (area // 2) + 1 - area = area\n        # 16. 2 * (area // 2) + 1 - area = area\n        # 17. 2 * (area // 2) + 1 - area = area\n        # 18. 2 * (area // 2) + 1 - area = area\n        # 19. 2 * (area // 2) + 1 - area = area\n        # 20. 2 * (area // 2) + 1 - area = area\n        # 21. 2 * (area // 2) + 1 - area = area\n        # 22. 2 * (area // 2) + 1 - area = area\n        # 23. 2 * (area // 2) + 1 - area = area\n        # 24. 2 * (area // 2) + 1 - area = area\n        # 25. 2 * (area // 2) + 1 - area = area\n        # 26. 2 * (area // 2) + 1 - area = area\n        # 27. 2 * (area // 2) + 1 - area = area\n        # 28. 2 * (area // 2) + 1 - area = area\n        # 29. 2 * (area // 2) + 1 - area = area\n        # 30. 2 * (area // 2) + 1 - area = area\n        # 31. 2 * (area // 2) + 1 - area = area\n        # 32. 2 * (area // 2) + 1 - area = area\n        # 33. 2 * (area // 2) + 1 - area = area\n        # 34. 2 * (area // 2) + 1 - area = area\n        # 35. 2 * (area // 2) + 1 - area = area\n        # 36. 2 * (area // 2) + 1 - area = area\n        # 37. 2 * (area // 2) + 1 - area = area\n        # 38. 2 * (area // 2) + 1 - area = area\n        # 39. 2 * (area // 2) + 1 - area = area\n        # 40. 2 * (area // 2) + 1 - area = area\n        # 41. 2 * (area // 2) + 1 - area = area\n        # 42. 2 * (area // 2) + 1 - area = area\n        # 43. 2 * (area // 2) + 1 - area = area\n        # 44. 2 * (area // 2) + 1 - area = area\n        # 45. 2 * (area // 2) + 1 - area = area\n        # 46. 2 * (area // 2) + 1 - area = area\n        # 47. 2 * (area // 2) + 1 - area = area\n        # 48"}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area // 2) = area\n        # 2. 2 * (area // 2) + 1 = area\n        # 3. 2 * (area // 2) + 1 - area = area\n        # 4. 2 * (area // 2) + 1 - area = area\n        # 5. 2 * (area // 2) + 1 - area = area\n        # 6. 2 * (area // 2) + 1 - area = area\n        # 7. 2 * (area // 2) + 1 - area = area\n        # 8. 2 * (area // 2) + 1 - area = area\n        # 9. 2 * (area // 2) + 1 - area = area\n        # 10. 2 * (area // 2) + 1 - area = area\n        # 11. 2 * (area // 2) + 1 - area = area\n        # 12. 2 * (area // 2) + 1 - area = area\n        # 13. 2 * (area // 2) + 1 - area = area\n        # 14. 2 * (area // 2) + 1 - area = area\n        # 15. 2 * (area // 2) + 1 - area = area\n        # 16. 2 * (area // 2) + 1 - area = area\n        # 17. 2 * (area // 2) + 1 - area = area\n        # 18. 2 * (area // 2) + 1 - area = area\n        # 19. 2 * (area // 2) + 1 - area = area\n        # 20. 2 * (area // 2) + 1 - area = area\n        # 21. 2 * (area // 2) + 1 - area = area\n        # 22. 2 * (area // 2) + 1 - area = area\n        # 23. 2 * (area // 2) + 1 - area = area\n        # 24. 2 * (area // 2) + 1 - area = area\n        # 25. 2 * (area // 2) + 1 - area = area\n        # 26. 2 * (area // 2) + 1 - area = area\n        # 27. 2 * (area // 2) + 1 - area = area\n        # 28. 2 * (area // 2) + 1 - area = area\n        # 29. 2 * (area // 2) + 1 - area = area\n        # 30. 2 * (area // 2) + 1 - area = area\n        # 31. 2 * (area // 2) + 1 - area = area\n        # 32. 2 * (area // 2) + 1 - area = area\n        # 33. 2 * (area // 2) + 1 - area = area\n        # 34. 2 * (area // 2) + 1 - area = area\n        # 35. 2 * (area // 2) + 1 - area = area\n        # 36. 2 * (area // 2) + 1 - area = area\n        # 37. 2 * (area // 2) + 1 - area = area\n        # 38. 2 * (area // 2) + 1 - area = area\n        # 39. 2 * (area // 2) + 1 - area = area\n        # 40. 2 * (area // 2) + 1 - area = area\n        # 41. 2 * (area // 2) + 1 - area = area\n        # 42. 2 * (area // 2) + 1 - area = area\n        # 43. 2 * (area // 2) + 1 - area = area\n        # 44. 2 * (area // 2) + 1 - area = area\n        # 45. 2 * (area // 2) + 1 - area = area\n        # 46. 2 * (area // 2) + 1 - area = area\n        # 47. 2 * (area // 2) + 1 - area = area\n        # 48"}, {"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L >= W\n        # 3. L - W < W\n        # 4. L - W = area - W * W\n        # 5. L = area / W + W\n        # 6. L >= W\n        # 7. L - W = area - W * W\n        # 8. L = area / W + W\n        # 9. L >= W\n        # 10. L - W = area - W * W\n        # 11. L = area / W + W\n        # 12. L >= W\n        # 13. L - W = area - W * W\n        # 14. L = area / W + W\n        # 15. L >= W\n        # 16. L - W = area - W * W\n        # 17. L = area / W + W\n        # 18. L >= W\n        # 19. L - W = area - W * W\n        # 20. L = area / W + W\n        # 21. L >= W\n        # 22. L - W = area - W * W\n        # 23. L = area / W + W\n        # 24. L >= W\n        # 25. L - W = area - W * W\n        # 26. L = area / W + W\n        # 27. L >= W\n        # 28. L - W = area - W * W\n        # 29. L = area / W + W\n        # 30. L >= W\n        # 31. L - W = area - W * W\n        # 32. L = area / W + W\n        # 33. L >= W\n        # 34. L - W = area - W * W\n        # 35. L = area / W + W\n        # 36. L >= W\n        # 37. L - W = area - W * W\n        # 38. L = area / W + W\n        # 39. L >= W\n        # 40. L - W = area - W * W\n        # 41. L = area / W + W\n        # 42. L >= W\n        # 43. L - W = area - W * W\n        # 44. L = area / W + W\n        # 45. L >= W\n        # 46. L - W = area - W * W\n        # 47. L = area / W + W\n        # 48. L >= W\n        # 49. L - W = area - W * W\n        # 50. L = area / W + W\n        # 51. L >= W\n        # 52. L - W = area - W * W\n        # 53. L = area / W + W\n        # 54. L >= W\n        # 55. L - W = area - W * W\n        # 56. L = area / W + W\n        # 57. L >= W\n        # 58. L - W = area - W * W\n        # 59. L = area / W + W\n        # 60. L >= W\n        # 61. L - W = area - W * W\n        # 62. L = area / W + W\n        # 63. L >= W\n        # 64. L - W = area - W * W\n        # 65. L = area / W + W\n        # 66. L >= W\n        # 67. L - W = area - W * W\n        # 68. L = area / W + W\n        # 69. L >= W\n        # 70. L - W = area - W * W\n        # 71. L = area / W + W\n        # 72. L >= W\n        # 73. L - W = area - W * W\n        # 74. L = area / W + W\n        # 75. L >= W\n        # 76. L - W = area - W * W\n        # 77. L = area / W + W\n        # 78. L >="}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        \n        # BFS\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append([])\n                    while queue:\n                        res[-1].append(queue.popleft())\n                    return res\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord('a') + j) + curr[i+1:]\n                        if neighbor in graph:\n                            for neighbor2 in graph[neighbor]:\n                                if neighbor2 not in visited:\n                                    visited.add(neighbor2)\n                                    queue.append(neighbor2)\n        \n        return res"}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                for i in range(len(curr)):\n                    neighbor = curr[:i] + \"*\" + curr[i+1:]\n                    for neighbor_word in graph[neighbor]:\n                        if neighbor_word == endWord:\n                            res.append([beginWord, neighbor_word] + [neighbor_word]*(level-1))\n                        if neighbor_word not in visited:\n                            visited.add(neighbor_word)\n                            queue.append(neighbor_word)\n        return res"}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                for i in range(len(curr)):\n                    neighbor = curr[:i] + \"*\" + curr[i+1:]\n                    for neighbor_word in graph[neighbor]:\n                        if neighbor_word == endWord:\n                            res.append([beginWord, neighbor_word] + [neighbor_word]*(level-1))\n                        if neighbor_word not in visited:\n                            visited.add(neighbor_word)\n                            queue.append(neighbor_word)\n        return res"}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        \n        # BFS\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append([])\n                    break\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord(\"a\") + j) + curr[i+1:]\n                        if neighbor in graph and neighbor not in visited:\n                            visited.add(neighbor)\n                            queue.append(neighbor)\n                            graph[curr].append(neighbor)\n        \n        # build the result\n        if len(res) == 0:\n            return []\n        res[-1].append(endWord)\n        return res"}, {"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        \n        # BFS\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append([])\n                    while queue:\n                        res[-1].append(queue.popleft())\n                    return res\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord('a') + j) + curr[i+1:]\n                        if neighbor in graph:\n                            for neighbor2 in graph[neighbor]:\n                                if neighbor2 not in visited:\n                                    visited.add(neighbor2)\n                                    queue.append(neighbor2)\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}, {"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        \n        return True"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        \n        return True"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        \n        return True"}, {"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        \n        return True"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            k = len(res)\n            while k < j:\n                res.append(res[k - len(nums)] + [nums[i]])\n                k += 1\n            i = j\n        return res"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            k = len(res)\n            while k < j:\n                res.append(res[k - len(res)] + [nums[i]])\n                k += 1\n            i = j\n        return res"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            k = len(res)\n            while k < j:\n                res.append(res[k - len(nums)] + [nums[i]])\n                k += 1\n            i = j\n        return res"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            k = len(res)\n            while k < j:\n                res.append(res[k - len(nums)] + [nums[i]])\n                k += 1\n            i = j\n        return res"}, {"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            k = len(res)\n            while k < j:\n                res.append(res[k - len(res)] + [nums[i]])\n                k += 1\n            i = j\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h*(i-stack[-1]-1))\n                else:\n                    max_area = max(max_area, h*i)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h*(len(heights)-stack[-1]-1))\n            else:\n                max_area = max(max_area, h*len(heights))\n        \n        return max_area"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h*(i-stack[-1]-1))\n                else:\n                    max_area = max(max_area, h*i)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h*(len(heights)-stack[-1]-1))\n            else:\n                max_area = max(max_area, h*len(heights))\n        \n        return max_area"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h*(i-stack[-1]-1))\n                else:\n                    max_area = max(max_area, h*i)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h*(len(heights)-stack[-1]-1))\n            else:\n                max_area = max(max_area, h*len(heights))\n        return max_area"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h*(i-stack[-1]-1))\n                else:\n                    max_area = max(max_area, h*i)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h*(len(heights)-stack[-1]-1))\n            else:\n                max_area = max(max_area, h*len(heights))\n        return max_area"}, {"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h * (i - stack[-1] - 1))\n                else:\n                    max_area = max(max_area, h * i)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h * (len(heights) - stack[-1] - 1))\n            else:\n                max_area = max(max_area, h * len(heights))\n        \n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(first / second))\n        return stack[0]"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}, {"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1)\n            x_max = max(x_max, x2)\n            y_min = min(y_min, y1)\n            y_max = max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if x_min == x_max or y_min == y_max:\n            return False\n        \n        if (x_min, y_min) not in rectangles:\n            return False\n        \n        if (x_min, y_max) not in rectangles:\n            return False\n        \n        if (x_max, y_min) not in rectangles:\n            return False\n        \n        if (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        seen = set()\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1)\n            x_max = max(x_max, x2)\n            y_min = min(y_min, y1)\n            y_max = max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n            seen.add((x1, y1))\n            seen.add((x1, y2))\n            seen.add((x2, y1))\n            seen.add((x2, y2))\n            \n        if (x_min, y_min) not in seen or (x_min, y_max) not in seen or (x_max, y_min) not in seen or (x_max, y_max) not in seen:\n            return False\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        return True"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        xmin, ymin, xmax, ymax = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        for x1, y1, x2, y2 in rectangles:\n            xmin, ymin, xmax, ymax = min(xmin, x1), min(ymin, y1), max(xmax, x2), max(ymax, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (xmax - xmin) * (ymax - ymin):\n            return False\n        \n        if xmin == xmax and ymin == ymax:\n            return True\n        \n        if (xmin, ymin) in set(rectangles) and (xmin, ymax) in set(rectangles) and (xmax, ymin) in set(rectangles) and (xmax, ymax) in set(rectangles):\n            return True\n        \n        return False"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min = float('inf'), float('inf')\n        x_max, y_max = float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1)\n            y_min = min(y_min, y1)\n            x_max = max(x_max, x2)\n            y_max = max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles:\n            return False\n        \n        if (x_max, y_min) not in rectangles:\n            return False\n        \n        if (x_min, y_max) not in rectangles:\n            return False\n        \n        if (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}, {"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        xmin = float('inf')\n        xmax = float('-inf')\n        ymin = float('inf')\n        ymax = float('-inf')\n        area = 0\n        for x1,y1,x2,y2 in rectangles:\n            xmin = min(xmin,x1)\n            xmax = max(xmax,x2)\n            ymin = min(ymin,y1)\n            ymax = max(ymax,y2)\n            area += (x2-x1)*(y2-y1)\n        if area != (xmax-xmin)*(ymax-ymin):\n            return False\n        if xmin == xmax and ymin == ymax:\n            return True\n        if xmin == xmax or ymin == ymax:\n            return False\n        if xmin < xmax and ymin < ymax:\n            return True\n        return False"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}, {"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            \n        return max_sum"}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}, {"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                num = num * 10 + board[i][j]\n        \n        # convert board to a number\n        if num == 123450:\n            return 0\n        \n        # convert board to a number\n        if num == 123405:\n            return 1\n        \n        # convert board to a number\n        if num == 123504:\n            return 2\n        \n        # convert board to a number\n        if num == 124350:\n            return 3\n        \n        # convert board to a number\n        if num == 124305:\n            return 4\n        \n        # convert board to a number\n        if num == 124503:\n            return 5\n        \n        # convert board to a number\n        if num == 124500:\n            return 6\n        \n        # convert board to a number\n        if num == 124503:\n            return 7\n        \n        # convert board to a number\n        if num == 124500:\n            return 8\n        \n        # convert board to a number\n        if num == 124503:\n            return 9\n        \n        # convert board to a number\n        if num == 124500:\n            return 10\n        \n        # convert board to a number\n        if num == 124503:\n            return 11\n        \n        # convert board to a number\n        if num == 124500:\n            return 12\n        \n        # convert board to a number\n        if num == 124503:\n            return 13\n        \n        # convert board to a number\n        if num == 124500:\n            return 14\n        \n        # convert board to a number\n        if num == 124503:\n            return 15\n        \n        # convert board to a number\n        if num == 124500:\n            return 16\n        \n        # convert board to a number\n        if num == 124503:\n            return 17\n        \n        # convert board to a number\n        if num == 124500:\n            return 18\n        \n        # convert board to a number\n        if num == 124503:\n            return 19\n        \n        # convert board to a number\n        if num == 124500:\n            return 20\n        \n        # convert board to a number\n        if num == 124503:\n            return 21\n        \n        # convert board to a number\n        if num == 124500:\n            return 22\n        \n        # convert board to a number\n        if num == 124503:\n            return 23\n        \n        # convert board to a number\n        if num == 124500:\n            return 24\n        \n        # convert board to a number\n        if num == 124503:\n            return 25\n        \n        # convert board to a number\n        if num == 124500:\n            return 26\n        \n        # convert board to a number\n        if num == 124503:\n            return 27\n        \n        # convert board to a number\n        if num == 124500:\n            return 28\n        \n        # convert board to a number\n        if num == 124503:\n            return 29\n        \n        # convert board to a number\n        if num == 124500:\n            return 30\n        \n        # convert board to a number\n        if num == 124503:\n            return 31\n        \n        # convert board to a number\n        if num == 124500:\n            return 32\n        \n        # convert board to a number\n        if num == 124503:\n            return 33\n        \n        # convert board to a number\n        if num == 124500:\n            return 34"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                num = num * 10 + board[i][j]\n        \n        # convert board to a number\n        if num == 123450:\n            return 0\n        \n        # convert board to a number\n        if num == 123405:\n            return 1\n        \n        # convert board to a number\n        if num == 123504:\n            return 2\n        \n        # convert board to a number\n        if num == 124350:\n            return 3\n        \n        # convert board to a number\n        if num == 124305:\n            return 4\n        \n        # convert board to a number\n        if num == 124503:\n            return 5\n        \n        # convert board to a number\n        if num == 124500:\n            return 6\n        \n        # convert board to a number\n        if num == 124503:\n            return 7\n        \n        # convert board to a number\n        if num == 124500:\n            return 8\n        \n        # convert board to a number\n        if num == 124503:\n            return 9\n        \n        # convert board to a number\n        if num == 124500:\n            return 10\n        \n        # convert board to a number\n        if num == 124503:\n            return 11\n        \n        # convert board to a number\n        if num == 124500:\n            return 12\n        \n        # convert board to a number\n        if num == 124503:\n            return 13\n        \n        # convert board to a number\n        if num == 124500:\n            return 14\n        \n        # convert board to a number\n        if num == 124503:\n            return 15\n        \n        # convert board to a number\n        if num == 124500:\n            return 16\n        \n        # convert board to a number\n        if num == 124503:\n            return 17\n        \n        # convert board to a number\n        if num == 124500:\n            return 18\n        \n        # convert board to a number\n        if num == 124503:\n            return 19\n        \n        # convert board to a number\n        if num == 124500:\n            return 20\n        \n        # convert board to a number\n        if num == 124503:\n            return 21\n        \n        # convert board to a number\n        if num == 124500:\n            return 22\n        \n        # convert board to a number\n        if num == 124503:\n            return 23\n        \n        # convert board to a number\n        if num == 124500:\n            return 24\n        \n        # convert board to a number\n        if num == 124503:\n            return 25\n        \n        # convert board to a number\n        if num == 124500:\n            return 26\n        \n        # convert board to a number\n        if num == 124503:\n            return 27\n        \n        # convert board to a number\n        if num == 124500:\n            return 28\n        \n        # convert board to a number\n        if num == 124503:\n            return 29\n        \n        # convert board to a number\n        if num == 124500:\n            return 30\n        \n        # convert board to a number\n        if num == 124503:\n            return 31\n        \n        # convert board to a number\n        if num == 124500:\n            return 32\n        \n        # convert board to a number\n        if num == 124503:\n            return 33\n        \n        # convert board to a number\n        if num == 124500:\n            return 34"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a string\n        board_str = \"\"\n        for row in board:\n            for num in row:\n                board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_str))]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(board_str[i]) for i in range(len(board_"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                num = num * 10 + board[i][j]\n        \n        # convert board to a number\n        if num == 123450:\n            return 0\n        \n        # convert board to a number\n        if num == 123405:\n            return 1\n        \n        # convert board to a number\n        if num == 123504:\n            return 2\n        \n        # convert board to a number\n        if num == 124350:\n            return 3\n        \n        # convert board to a number\n        if num == 124305:\n            return 4\n        \n        # convert board to a number\n        if num == 124503:\n            return 5\n        \n        # convert board to a number\n        if num == 124500:\n            return 6\n        \n        # convert board to a number\n        if num == 124503:\n            return 7\n        \n        # convert board to a number\n        if num == 124500:\n            return 8\n        \n        # convert board to a number\n        if num == 124503:\n            return 9\n        \n        # convert board to a number\n        if num == 124500:\n            return 10\n        \n        # convert board to a number\n        if num == 124503:\n            return 11\n        \n        # convert board to a number\n        if num == 124500:\n            return 12\n        \n        # convert board to a number\n        if num == 124503:\n            return 13\n        \n        # convert board to a number\n        if num == 124500:\n            return 14\n        \n        # convert board to a number\n        if num == 124503:\n            return 15\n        \n        # convert board to a number\n        if num == 124500:\n            return 16\n        \n        # convert board to a number\n        if num == 124503:\n            return 17\n        \n        # convert board to a number\n        if num == 124500:\n            return 18\n        \n        # convert board to a number\n        if num == 124503:\n            return 19\n        \n        # convert board to a number\n        if num == 124500:\n            return 20\n        \n        # convert board to a number\n        if num == 124503:\n            return 21\n        \n        # convert board to a number\n        if num == 124500:\n            return 22\n        \n        # convert board to a number\n        if num == 124503:\n            return 23\n        \n        # convert board to a number\n        if num == 124500:\n            return 24\n        \n        # convert board to a number\n        if num == 124503:\n            return 25\n        \n        # convert board to a number\n        if num == 124500:\n            return 26\n        \n        # convert board to a number\n        if num == 124503:\n            return 27\n        \n        # convert board to a number\n        if num == 124500:\n            return 28\n        \n        # convert board to a number\n        if num == 124503:\n            return 29\n        \n        # convert board to a number\n        if num == 124500:\n            return 30\n        \n        # convert board to a number\n        if num == 124503:\n            return 31\n        \n        # convert board to a number\n        if num == 124500:\n            return 32\n        \n        # convert board to a number\n        if num == 124503:\n            return 33\n        \n        # convert board to a number\n        if num == 124500:\n            return 34"}, {"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                num = num * 10 + board[i][j]\n        \n        # convert board to a number\n        if num == 123450:\n            return 0\n        \n        # convert board to a number\n        if num == 123054:\n            return 1\n        \n        # convert board to a number\n        if num == 125034:\n            return 2\n        \n        # convert board to a number\n        if num == 125430:\n            return 3\n        \n        # convert board to a number\n        if num == 132450:\n            return 4\n        \n        # convert board to a number\n        if num == 132540:\n            return 5\n        \n        # convert board to a number\n        if num == 135240:\n            return 6\n        \n        # convert board to a number\n        if num == 135420:\n            return 7\n        \n        # convert board to a number\n        if num == 142350:\n            return 8\n        \n        # convert board to a number\n        if num == 142530:\n            return 9\n        \n        # convert board to a number\n        if num == 145230:\n            return 10\n        \n        # convert board to a number\n        if num == 145320:\n            return 11\n        \n        # convert board to a number\n        if num == 152340:\n            return 12\n        \n        # convert board to a number\n        if num == 152430:\n            return 13\n        \n        # convert board to a number\n        if num == 153240:\n            return 14\n        \n        # convert board to a number\n        if num == 153420:\n            return 15\n        \n        # convert board to a number\n        if num == 154230:\n            return 16\n        \n        # convert board to a number\n        if num == 154320:\n            return 17\n        \n        # convert board to a number\n        if num == 213450:\n            return 18\n        \n        # convert board to a number\n        if num == 213540:\n            return 19\n        \n        # convert board to a number\n        if num == 214350:\n            return 20\n        \n        # convert board to a number\n        if num == 214530:\n            return 21\n        \n        # convert board to a number\n        if num == 215340:\n            return 22\n        \n        # convert board to a number\n        if num == 215430:\n            return 23\n        \n        # convert board to a number\n        if num == 231450:\n            return 24\n        \n        # convert board to a number\n        if num == 231540:\n            return 25\n        \n        # convert board to a number\n        if num == 234150:\n            return 26\n        \n        # convert board to a number\n        if num == 234510:\n            return 27\n        \n        # convert board to a number\n        if num == 235140:\n            return 28\n        \n        # convert board to a number\n        if num == 235410:\n            return 29\n        \n        # convert board to a number\n        if num == 241350:\n            return 30\n        \n        # convert board to a number\n        if num == 241530:\n            return 31\n        \n        # convert board to a number\n        if num == 243150:\n            return 32\n        \n        # convert board to a number\n        if num == 243510:\n            return 33\n        \n        # convert board to a number\n        if num == 245130:\n            return 34"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_map:\n                    return False\n                s_map[s[i]] = t[i]\n                t_map[t[i]] = s[i]\n                \n        return True"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n            \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n        \n        return True"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_map:\n                    return False\n                s_map[s[i]] = t[i]\n                t_map[t[i]] = s[i]\n                \n        return True"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_map:\n                    return False\n                s_map[s[i]] = t[i]\n                t_map[t[i]] = s[i]\n        \n        return True"}, {"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_map:\n                    return False\n                s_map[s[i]] = t[i]\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in num"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # edge case\n        if len(nums) == 0:\n            return False\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return True\n            \n            if nums[mid] < nums[right]:\n                if nums[mid] < target and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        \n        return False"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if target is in nums, return True\n        # if target is not in num"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return False"}, {"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # edge case\n        if not nums:\n            return False\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        obstacleGrid[m-1][n-1] = 1\n        \n        for i in range(m-2,-1,-1):\n            if obstacleGrid[i][n-1] == 1:\n                obstacleGrid[i][n-1] = 0\n            else:\n                obstacleGrid[i][n-1] = obstacleGrid[i+1][n-1]\n        \n        for i in range(n-2,-1,-1):\n            if obstacleGrid[m-1][i] == 1:\n                obstacleGrid[m-1][i] = 0\n            else:\n                obstacleGrid[m-1][i] = obstacleGrid[m-1][i+1]\n        \n        for i in range(m-2,-1,-1):\n            for j in range(n-2,-1,-1):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i+1][j] + obstacleGrid[i][j+1]\n        \n        return obstacleGrid[0][0]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        if obstacleGrid[0][0] == 1:\n            obstacleGrid[0][0] = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                elif i == 0 and j == 0:\n                    obstacleGrid[i][j] = 1\n                elif i == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i][j-1]\n                elif j == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j]\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i][j-1] + obstacleGrid[i-1][j]\n        \n        return obstacleGrid[m-1][n-1]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        if obstacleGrid[0][0] == 1:\n            obstacleGrid[0][0] = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                elif i == 0 and j == 0:\n                    obstacleGrid[i][j] = 1\n                elif i == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i][j-1]\n                elif j == 0:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j]\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i][j-1] + obstacleGrid[i-1][j]\n        \n        return obstacleGrid[m-1][n-1]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0]*n for _ in range(m)]\n        \n        for i in range(m):\n            if obstacleGrid[i][n-1] == 1:\n                break\n            dp[i][n-1] = 1\n        \n        for i in range(n):\n            if obstacleGrid[m-1][i] == 1:\n                break\n            dp[m-1][i] = 1\n        \n        for i in range(m-2,-1,-1):\n            for j in range(n-2,-1,-1):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i+1][j] + dp[i][j+1]\n        \n        return dp[0][0]"}, {"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        obstacleGrid[0][0] = 1\n        \n        for i in range(1,m):\n            if obstacleGrid[i][0] == 1:\n                obstacleGrid[i][0] = 0\n            else:\n                obstacleGrid[i][0] = obstacleGrid[i-1][0]\n        \n        for i in range(1,n):\n            if obstacleGrid[0][i] == 1:\n                obstacleGrid[0][i] = 0\n            else:\n                obstacleGrid[0][i] = obstacleGrid[0][i-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n        \n        return obstacleGrid[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}, {"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                \n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n                \n        return closest"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                \n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n                \n        return closest"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                \n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n                \n        return closest"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}, {"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                \n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n                \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        \n        return max(left_depth, right_depth) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left = self.maxDepth(root.left)\n        right = self.maxDepth(root.right)\n        \n        return max(left, right) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root == None:\n            return 0\n        \n        left = self.maxDepth(root.left)\n        right = self.maxDepth(root.right)\n        \n        return max(left,right) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        \n        return max(left_depth, right_depth) + 1"}, {"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        \n        return max(left_depth, right_depth) + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}, {"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            \n            inorder(root.left, min_diff, prev)\n            \n            if prev is not None:\n                min_diff = min(min_diff, root.val - prev)\n            \n            prev = root.val\n            \n            inorder(root.right, min_diff, prev)\n            \n            return min_diff\n        \n        return inorder(root, float('inf'), None)"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.min_diff = min(self.min_diff, root.val - self.prev)\n                self.prev = root.val\n                inorder(root.right)\n        \n        self.min_diff = float('inf')\n        self.prev = -float('inf')\n        inorder(root)\n        return self.min_diff"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            \n            inorder(root.left, min_diff, prev)\n            \n            if prev is not None:\n                min_diff = min(min_diff, root.val - prev)\n            \n            prev = root.val\n            \n            inorder(root.right, min_diff, prev)\n            \n            return min_diff\n        \n        return inorder(root, float('inf'), None)"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            \n            inorder(root.left, min_diff, prev)\n            \n            if prev is not None:\n                min_diff = min(min_diff, root.val - prev)\n            \n            prev = root.val\n            \n            inorder(root.right, min_diff, prev)\n            \n            return min_diff\n        \n        return inorder(root, float('inf'), None)"}, {"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            \n            inorder(root.left, min_diff, prev)\n            \n            if prev is not None:\n                min_diff = min(min_diff, root.val - prev)\n            \n            prev = root.val\n            \n            inorder(root.right, min_diff, prev)\n            \n            return min_diff\n        \n        return inorder(root, float('inf'), None)"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.curr_count = 0\n        self.max_val = None\n        self.res = []\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n        \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.max_val = root.val\n            self.res = [root.val]\n        elif self.curr_count == self.max_count:\n            self.res.append(root.val)\n        \n        self.prev_val = root.val\n        \n        self.inorder(root.right)"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.curr_count = 0\n        self.res = []\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n            \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.res = [root.val]\n        elif self.curr_count == self.max_count:\n            self.res.append(root.val)\n            \n        self.prev_val = root.val\n        \n        self.inorder(root.right)"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.curr_count = 0\n        self.max_val = None\n        self.res = []\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n        \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.max_val = root.val\n            self.res = [root.val]\n        elif self.curr_count == self.max_count:\n            self.res.append(root.val)\n        \n        self.prev_val = root.val\n        \n        self.inorder(root.right)"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.curr_count = 0\n        self.res = []\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n            \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.res = [root.val]\n        elif self.curr_count == self.max_count:\n            self.res.append(root.val)\n            \n        self.prev_val = root.val\n        \n        self.inorder(root.right)"}, {"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.curr_count = 0\n        self.max_val = None\n        self.res = []\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n            \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.max_val = root.val\n            self.res = [root.val]\n        elif self.curr_count == self.max_count:\n            self.res.append(root.val)\n            \n        self.prev_val = root.val\n        \n        self.inorder(root.right)"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        else:\n            return -1"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}, {"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lowercase, uppercase, and digit\n        # 2. If the number of lowercase, uppercase, and digit is less than 6, then we need to add at least 6 - (number of lowercase, uppercase, and digit)\n        # 3. If the number of lowercase, uppercase, and digit is more than 20, then we need to remove at least 20 - (number of lowercase, uppercase, and digit)\n        # 4. If the number of lowercase, uppercase, and digit is between 6 and 20, then we need to remove at least 20 - (number of lowercase, uppercase, and digit)\n        # 5. If the number of lowercase, uppercase, and digit is more than 20, then we need to add at least 20 - (number of lowercase, uppercase, and digit)\n        # 6. If the number of lowercase, uppercase, and digit is less than 6, then we need to add at least 6 - (number of lowercase, uppercase, and digit)\n        \n        # 1. Count the number of lowercase, uppercase, and digit\n        lowercase = 0\n        uppercase = 0\n        digit = 0\n        for c in password:\n            if c.islower():\n                lowercase += 1\n            elif c.isupper():\n                uppercase += 1\n            else:\n                digit += 1\n        \n        # 2. If the number of lowercase, uppercase, and digit is less than 6, then we need to add at least 6 - (number of lowercase, uppercase, and digit)\n        if lowercase < 6:\n            add_lowercase = 6 - lowercase\n        else:\n            add_lowercase = 0\n        \n        # 3. If the number of lowercase, uppercase, and digit is more than 20, then we need to remove at least 20 - (number of lowercase, uppercase, and digit)\n        if uppercase + digit > 20:\n            remove_uppercase_digit = 20 - (uppercase + digit)\n        else:\n            remove_uppercase_digit = 0\n        \n        # 4. If the number of lowercase, uppercase, and digit is between 6 and 20, then we need to remove at least 20 - (number of lowercase, uppercase, and digit)\n        if uppercase + digit >= 6 and uppercase + digit <= 20:\n            remove_uppercase_digit = remove_uppercase_digit - (uppercase + digit - 20)\n        \n        # 5. If the number of lowercase, uppercase, and digit is more than 20, then we need to add at least 20 - (number of lowercase, uppercase, and digit)\n        if uppercase + digit > 20:\n            add_uppercase_digit = 20 - (uppercase + digit)\n        else:\n            add_uppercase_digit = 0\n        \n        # 6. If the number of lowercase, uppercase, and digit is less than 6, then we need to add at least 6 - (number of lowercase, uppercase, and digit)\n        if uppercase + digit < 6:\n            add_lowercase_digit = 6 - (uppercase + digit)\n        else:\n            add_lowercase_digit = 0\n        \n        # 7. Return the sum of add_lowercase, add_uppercase_digit, and add_lowercase_digit\n        return add_lowercase + add_uppercase_digit + add_lowercase_digit"}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lowercase, uppercase, and digit\n        lower, upper, digit = 0, 0, 0\n        for c in password:\n            if c.islower():\n                lower += 1\n            elif c.isupper():\n                upper += 1\n            else:\n                digit += 1\n        \n        # 2. Count the number of repeating characters\n        repeat = 0\n        for i in range(2, len(password)):\n            if password[i] == password[i - 1]:\n                repeat += 1\n            else:\n                repeat = 0\n            if repeat >= 2:\n                break\n        \n        # 3. Calculate the number of steps\n        steps = len(password) - lower - upper - digit\n        if len(password) < 6:\n            steps = max(3, steps)\n        elif len(password) <= 20:\n            steps = max(steps, 0)\n        else:\n            steps = max(steps, len(password) - 20 + repeat)\n        \n        return steps"}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is at least 6 characters long\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        \n        # 2. Check if password is at most 20 characters long\n        if len(password) > 20:\n            return max(20 - len(password), 0)\n        \n        # 3. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        lowercase_count = uppercase_count = digit_count = 0\n        for char in password:\n            if char.islower():\n                lowercase_count += 1\n            elif char.isupper():\n                uppercase_count += 1\n            elif char.isdigit():\n                digit_count += 1\n        \n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 4. Check if password contains three repeating characters in a row\n        repeating_characters = 0\n        prev_char = password[0]\n        for i in range(1, len(password)):\n            if password[i] == prev_char:\n                repeating_characters += 1\n                if repeating_characters == 3:\n                    return max(3, 3 - lowercase_count - uppercase_count - digit_count)\n            else:\n                repeating_characters = 1\n            prev_char = password[i]\n        \n        return max(3 - lowercase_count - uppercase_count - digit_count, 0)"}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is at least 6 characters long\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        \n        # 2. Check if password is at most 20 characters long\n        if len(password) > 20:\n            return max(20 - len(password), 0)\n        \n        # 3. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        lowercase_count = uppercase_count = digit_count = 0\n        for char in password:\n            if char.islower():\n                lowercase_count += 1\n            elif char.isupper():\n                uppercase_count += 1\n            elif char.isdigit():\n                digit_count += 1\n        \n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - len(password), 0)\n        \n        # 4. Check if password contains three repeating characters in a row\n        repeating_characters = 0\n        prev_char = None\n        for char in password:\n            if char == prev_char:\n                repeating_characters += 1\n            else:\n                prev_char = char\n        \n        if repeating_characters >= 3:\n            return max(repeating_characters - 2, 0)\n        \n        # 5. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count < len(password):\n            return max(len(password) - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 6. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count == len(password):\n            return 0\n        \n        # 7. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(lowercase_count + uppercase_count + digit_count - len(password), 0)\n        \n        # 8. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(lowercase_count + uppercase_count + digit_count - len(password), 0)\n        \n        # 9. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(lowercase_count + uppercase_count + digit_count - len(password), 0)\n        \n        # 10. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(lowercase_count + uppercase_count + digit_count - len(password), 0)\n        \n        # 11. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(lowercase_count + uppercase_count + digit_count - len(password), 0)\n        \n        # 12. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(lowercase_count + uppercase_count + digit_count - len(password), 0)\n        \n        # 13. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(lowercase_count + uppercase_count + digit_count - len(password), 0)\n        \n        # 1"}, {"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Check if password is at least 6 characters long\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        \n        # 2. Check if password is at most 20 characters long\n        if len(password) > 20:\n            return max(20 - len(password), 0)\n        \n        # 3. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        lowercase_count = uppercase_count = digit_count = 0\n        for char in password:\n            if char.islower():\n                lowercase_count += 1\n            elif char.isupper():\n                uppercase_count += 1\n            elif char.isdigit():\n                digit_count += 1\n        \n        if lowercase_count == 0 or uppercase_count == 0 or digit_count == 0:\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 4. Check if password contains three repeating characters in a row\n        repeating_characters = 0\n        prev_char = password[0]\n        for char in password[1:]:\n            if char == prev_char:\n                repeating_characters += 1\n                if repeating_characters == 2:\n                    break\n            else:\n                repeating_characters = 0\n            prev_char = char\n        \n        if repeating_characters == 2:\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 5. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count < len(password):\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 6. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count == len(password):\n            return 0\n        \n        # 7. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 8. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 9. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 10. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 11. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 12. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(3 - lowercase_count - uppercase_count - digit_count, 0)\n        \n        # 13. Check if password contains at least one lowercase letter, at least one uppercase letter, and at least one digit\n        if lowercase_count + uppercase_count + digit_count > len(password):\n            return max(3 - lowercase_count -"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        \n        return count"}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        \n        return count"}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        \n        return count"}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        \n        count = 0\n        while n > 0:\n            n = n // 5\n            count += n\n        \n        return count"}, {"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        \n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        i = 0\n        flag = -1\n        \n        for c in s:\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            res[i] += c\n            i += flag\n            \n        return \"\".join(res)"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        i = 0\n        down = True\n        \n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        \n        return \"\".join(res)"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        down = True\n        \n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        \n        return \"\".join(res)"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        row = 0\n        direction = 1\n        \n        for c in s:\n            res[row] += c\n            if row == 0:\n                direction = 1\n            elif row == numRows - 1:\n                direction = -1\n            row += direction\n        \n        return \"\".join(res)"}, {"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        down = True\n        \n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height)-1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        return res"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        \n        return res"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height)-1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        return res"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        return res"}, {"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    res += left_max - height[left]\n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    res += right_max - height[right]\n                right -= 1\n        \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate over the array and for each number, we can subtract 1 from the index of that number.\n        ## 3. We can then iterate over the array again and for each number, if the number is greater than 0, we can add it to the result array.\n        ## 4. We can then return the result array.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate over the array and for each number, we can subtract 1 from the index of that number.\n        ## 3. We can then iterate over the array again and for each number, if the number is greater than 0, we can add it to the result array.\n        ## 4. We can then return the result array.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate over the array and for each number, we can subtract 1 from the index of that number.\n        ## 3. We can then iterate over the array again and for each number, if the number is greater than 0, we can add it to the result array.\n        ## 4. We can then return the result array.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate over the array and for each number, we can subtract 1 from the index of that number.\n        ## 3. We can then iterate over the array again and for each number, if the number is greater than 0, we can add it to the result array.\n        ## 4. We can then return the result array.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate over the array and for each number, we can subtract 1 from the index of that number.\n        ## 3. We can then iterate over the array again and for each number, if the number is greater than 0, we can add it to the result array.\n        ## 4. We can then return the result array.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate over the array and for each number, we can subtract 1 from the index of that number.\n        ## 3. We can then iterate over the array again and for each number, if the number is greater than 0, we can add it to the result array.\n        ## 4. We can then return the result array.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate over the array and for each number, we can subtract 1 from the index of that number.\n        ## 3. We can then iterate over the array again and for each number, if the number is greater than 0, we can add it to the result array.\n        ## 4. We can then return the result array.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. We can use the array itself as a hashmap\n        ## 2. We can use the array itself as a set\n        ## 3. We can use the array itself as a set\n        ## 4. We can use the array itself as a set\n        ## 5. We can use the array itself as a set\n        ## 6. We can use the array itself as a set\n        ## 7. We can use the array itself as a set\n        ## 8. We can use the array itself as a set\n        ## 9. We can use the array itself as a set\n        ## 10. We can use the array itself as a set\n        ## 11. We can use the array itself as a set\n        ## 12. We can use the array itself as a set\n        ## 13. We can use the array itself as a set\n        ## 14. We can use the array itself as a set\n        ## 15. We can use the array itself as a set\n        ## 16. We can use the array itself as a set\n        ## 17. We can use the array itself as a set\n        ## 18. We can use the array itself as a set\n        ## 19. We can use the array itself as a set\n        ## 20. We can use the array itself as a set\n        ## 21. We can use the array itself as a set\n        ## 22. We can use the array itself as a set\n        ## 23. We can use the array itself as a set\n        ## 24. We can use the array itself as a set\n        ## 25. We can use the array itself as a set\n        ## 26. We can use the array itself as a set\n        ## 27. We can use the array itself as a set\n        ## 28. We can use the array itself as a set\n        ## 29. We can use the array itself as a set\n        ## 30. We can use the array itself as a set\n        ## 31. We can use the array itself as a set\n        ## 32. We can use the array itself as a set\n        ## 33. We can use the array itself as a set\n        ## 34. We can use the array itself as a set\n        ## 35. We can use the array itself as a set\n        ## 36. We can use the array itself as a set\n        ## 37. We can use the array itself as a set\n        ## 38. We can use the array itself as a set\n        ## 39. We can use the array itself as a set\n        ## 40. We can use the array itself as a set\n        ## 41. We can use the array itself as a set\n        ## 42. We can use the array itself as a set\n        ## 43. We can use the array itself as a set\n        ## 44. We can use the array itself as a set\n        ## 45. We can use the array itself as a set\n        ## 46. We can use the array itself as a set\n        ## 47. We can use the array itself as a set\n        ## 48. We can use the array itself as a set\n        ## 49. We can use the array itself as a set\n        ## 50. We can use the array itself as a set\n        ## 51. We can use the array itself as a set\n        ## 52. We can use the array itself as a set\n        ## 53. We can use the array itself as a set\n        ## 54. We can use the array itself as a set\n        ## 55. We can use the array itself as a set\n        ## 56. We can use the array itself as a set\n        ## 57. We can use the array itself as a set\n        ## 58. We can use the array itself as a set\n        ## 59. We can use the array itself as a set\n        ## 60. We can use the array itself as"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. loop through the array and mark the index as negative\n        ## 2. loop through the array again and add the index to the result\n        ## 3. loop through the array again and add the index to the result\n        ## 4. loop through the array again and add the index to the result\n        ## 5. loop through the array again and add the index to the result\n        ## 6. loop through the array again and add the index to the result\n        ## 7. loop through the array again and add the index to the result\n        ## 8. loop through the array again and add the index to the result\n        ## 9. loop through the array again and add the index to the result\n        ## 10. loop through the array again and add the index to the result\n        ## 11. loop through the array again and add the index to the result\n        ## 12. loop through the array again and add the index to the result\n        ## 13. loop through the array again and add the index to the result\n        ## 14. loop through the array again and add the index to the result\n        ## 15. loop through the array again and add the index to the result\n        ## 16. loop through the array again and add the index to the result\n        ## 17. loop through the array again and add the index to the result\n        ## 18. loop through the array again and add the index to the result\n        ## 19. loop through the array again and add the index to the result\n        ## 20. loop through the array again and add the index to the result\n        ## 21. loop through the array again and add the index to the result\n        ## 22. loop through the array again and add the index to the result\n        ## 23. loop through the array again and add the index to the result\n        ## 24. loop through the array again and add the index to the result\n        ## 25. loop through the array again and add the index to the result\n        ## 26. loop through the array again and add the index to the result\n        ## 27. loop through the array again and add the index to the result\n        ## 28. loop through the array again and add the index to the result\n        ## 29. loop through the array again and add the index to the result\n        ## 30. loop through the array again and add the index to the result\n        ## 31. loop through the array again and add the index to the result\n        ## 32. loop through the array again and add the index to the result\n        ## 33. loop through the array again and add the index to the result\n        ## 34. loop through the array again and add the index to the result\n        ## 35. loop through the array again and add the index to the result\n        ## 36. loop through the array again and add the index to the result\n        ## 37. loop through the array again and add the index to the result\n        ## 38. loop through the array again and add the index to the result\n        ## 39. loop through the array again and add the index to the result\n        ## 40. loop through the array again and add the index to the result\n        ## 41. loop through the array again and add the index to the result\n        ## 42. loop through the array again and add the index to the result\n        ## 43. loop through the array again and add the index to the result\n        ## 44. loop through the array again and add the index to the result\n        ## 45. loop through the array again and add the index to the result\n        ## 46. loop through the array again and add the index to the result\n        ## 47. loop through the array again and add the index to the result\n        ## 48. loop through the array again and add the index to the result\n        ## 49. loop through the array again and add the index to the result\n        ## 50. loop through the array again and add the index to the result\n        ## 51. loop through the array again and add the index to the result"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add it to the result array.\n        ## 4. If the number is present, we can ignore it.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add it to the result array.\n        ## 4. If the number is present, we can ignore it.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add it to the result array.\n        ## 4. If the number is present, we can ignore it.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add it to the result array.\n        ## 4. If the number is present, we can ignore it.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add it to the result array.\n        ## 4. If the number is present, we can ignore it.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add it to the result array.\n        ## 4. If the number is present, we can ignore it.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add it to the result array.\n        ## 4. If the number is present, we can ignore it.\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. We can use the array itself as a hashmap to store the frequency of each number in the array.\n        ## 2. Then, we can iterate over the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present, we can add"}, {"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. loop through the array and mark the index of the number as negative\n        ## 2. loop through the array again and add the index to the result\n        ## 3. loop through the array again and if the number is positive, add it to the result\n        \n        ## Time: O(n)\n        ## Space: O(1)\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        result = []\n        for i in range(len(nums)):\n            if nums[i] > 0:\n                result.append(i + 1)\n        \n        return result"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        sorted_nums = sorted(nums)\n        \n        # create a dictionary to store the index of each element\n        num_to_index = {num: i for i, num in enumerate(sorted_nums)}\n        \n        # create a list to store the count of smaller elements\n        count = [0] * len(nums)\n        \n        # iterate through the sorted array in reverse order\n        for i in range(len(nums) - 1, -1, -1):\n            # find the index of the current element in the sorted array\n            curr_index = num_to_index[nums[i]]\n            \n            # update the count of smaller elements\n            count[i] = curr_index\n            \n            # update the index of the current element in the sorted array\n            num_to_index[nums[i]] = curr_index\n            \n        return count"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        sorted_nums = sorted(nums)\n        \n        # create a dictionary to store the index of each element\n        num_to_index = {num: i for i, num in enumerate(sorted_nums)}\n        \n        # create a list to store the count of smaller elements\n        count = [0] * len(nums)\n        \n        # iterate through the sorted array in reverse order\n        for i in range(len(nums) - 1, -1, -1):\n            # get the index of the current element\n            curr_index = num_to_index[nums[i]]\n            \n            # update the count of smaller elements\n            count[i] = curr_index\n            \n            # update the index of the current element\n            num_to_index[nums[i]] = curr_index\n            \n        return count"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        sorted_nums = sorted(nums)\n        \n        # create a dictionary to store the index of each element\n        num_to_index = {num: i for i, num in enumerate(sorted_nums)}\n        \n        # create a list to store the count of smaller elements to the right of each element\n        count = [0] * len(nums)\n        \n        # iterate through the sorted array in reverse order\n        for i in range(len(nums) - 1, -1, -1):\n            # get the index of the current element\n            curr_index = num_to_index[nums[i]]\n            \n            # update the count of smaller elements to the right of the current element\n            count[i] = curr_index\n            \n            # update the index of the current element\n            num_to_index[nums[i]] = curr_index\n            \n        return count"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        sorted_nums = sorted(nums)\n        \n        # create a dictionary to store the index of each element\n        num_to_index = {num: i for i, num in enumerate(sorted_nums)}\n        \n        # create a list to store the count of smaller elements\n        count = [0] * len(nums)\n        \n        # iterate through the sorted array in reverse order\n        for i in range(len(nums) - 1, -1, -1):\n            # get the index of the current element\n            curr_index = num_to_index[nums[i]]\n            \n            # update the count of smaller elements\n            count[i] = curr_index\n            \n            # update the index of the current element\n            num_to_index[nums[i]] = curr_index\n            \n        return count"}, {"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the array\n        sorted_nums = sorted(nums)\n        \n        # create a dictionary to store the index of each element\n        num_to_index = {num: i for i, num in enumerate(sorted_nums)}\n        \n        # create a list to store the count of smaller elements to the right of each element\n        count = [0] * len(nums)\n        \n        # iterate through the sorted array in reverse order\n        for i in range(len(nums) - 1, -1, -1):\n            # find the index of the current element in the sorted array\n            curr_index = num_to_index[nums[i]]\n            \n            # find the index of the next smaller element in the sorted array\n            next_smaller_index = curr_index\n            while next_smaller_index < len(sorted_nums):\n                if sorted_nums[next_smaller_index] > nums[i]:\n                    count[i] += 1\n                next_smaller_index += 1\n        \n        return count"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            elif interval[0] > prev:\n                res += 1\n                prev = interval[1]\n        return res"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            elif interval[0] > prev:\n                res += 1\n                prev = interval[1]\n        return res"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            elif interval[1] > prev:\n                res += 1\n                prev = interval[1]\n        return res"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            elif interval[0] > prev:\n                res += 1\n                prev = interval[1]\n        return res"}, {"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            elif interval[0] > prev:\n                res += 1\n                prev = interval[1]\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}, {"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(i)\n            elif formula[i] == ')':\n                i += 1\n                while stack and stack[-1] != '(':\n                    i = stack.pop()\n                if stack:\n                    stack.pop()\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                count = int(formula[i:j]) if i else 1\n                i = j\n                if stack:\n                    stack[-1] += count\n                else:\n                    stack.append(count)\n        count = {}\n        for i in range(len(stack) - 1, -1, -1):\n            count[stack[i]] = count.get(stack[i], 0) + stack[i]\n        return ''.join([key + (str(value) if value > 1 else '') for key, value in sorted(count.items())])"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(i)\n            elif formula[i] == ')':\n                i += 1\n                while stack and stack[-1] != '(':\n                    i = stack.pop()\n                if stack:\n                    stack.pop()\n            else:\n                j = i\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                count = int(formula[i:j]) if i else 1\n                i = j\n                while stack and stack[-1] != '(':\n                    count *= stack.pop()\n                stack.append(count)\n        count = {}\n        for i in range(len(stack)-1, -1, -1):\n            count[stack[i]] = count.get(stack[i], 0) + 1\n        return ''.join([key + (str(value) if value > 1 else '') for key, value in sorted(count.items())])"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(0)\n            elif formula[i] == ')':\n                count = 0\n                while stack and stack[-1] != '(':\n                    count += stack.pop()\n                if stack:\n                    stack.pop()\n                if stack:\n                    stack[-1] += count\n                else:\n                    stack.append(count)\n            else:\n                j = i\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                count = int(formula[i:j])\n                if stack:\n                    stack[-1] += count\n                else:\n                    stack.append(count)\n                i = j\n        count = {}\n        for c in stack:\n            if c == 0:\n                continue\n            if c in count:\n                count[c] += 1\n            else:\n                count[c] = 1\n        res = []\n        for k, v in sorted(count.items()):\n            if v == 1:\n                res.append(k)\n            else:\n                res.append(k + str(v))\n        return ''.join(res)"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(i)\n            elif formula[i] == ')':\n                i += 1\n                while stack and stack[-1] != '(':\n                    i = stack.pop()\n                if stack:\n                    stack.pop()\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                count = int(formula[i:j]) if i > 0 else 1\n                if stack:\n                    stack[-1] += count\n                else:\n                    stack.append(count)\n                i = j\n        count = {}\n        for i in range(len(stack) - 1, -1, -1):\n            if stack[i] == 1:\n                count[stack[i - 1]] = 1\n            else:\n                count[stack[i - 1]] = count.get(stack[i - 1], 0) + stack[i]\n        return ''.join([key + (str(value) if value > 1 else '') for key, value in sorted(count.items())])"}, {"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(0)\n            elif formula[i] == ')':\n                count = 0\n                while stack and stack[-1] != '(':\n                    count += stack.pop()\n                if stack:\n                    stack.pop()\n                if stack:\n                    stack[-1] += count\n                else:\n                    stack.append(count)\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                count = int(formula[i:j])\n                if stack:\n                    stack[-1] += count\n                else:\n                    stack.append(count)\n                i = j\n        count = {}\n        for c in stack:\n            if c == 0:\n                continue\n            if c in count:\n                count[c] += 1\n            else:\n                count[c] = 1\n        res = []\n        for k, v in sorted(count.items()):\n            if v == 1:\n                res.append(k)\n            else:\n                res.append(k + str(v))\n        return ''.join(res)"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}, {"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}, {"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root == None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root == None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}, {"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root == None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        \n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}, {"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        \n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1]"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # edge case\n        if nums[-1] >= n:\n            return 0\n        \n        # edge case\n        if nums[0] > 1:\n            return 1\n        \n        # edge case\n        if nums[0] == 1:\n            nums.append(1)\n        \n        # edge case\n        if nums[0] == 2:\n            nums.append(2)\n        \n        # edge case\n        if nums[0] == 3:\n            nums.append(3)\n        \n        # edge case\n        if nums[0] == 4:\n            nums.append(4)\n        \n        # edge case\n        if nums[0] == 5:\n            nums.append(5)\n        \n        # edge case\n        if nums[0] == 6:\n            nums.append(6)\n        \n        # edge case\n        if nums[0] == 7:\n            nums.append(7)\n        \n        # edge case\n        if nums[0] == 8:\n            nums.append(8)\n        \n        # edge case\n        if nums[0] == 9:\n            nums.append(9)\n        \n        # edge case\n        if nums[0] == 10:\n            nums.append(10)\n        \n        # edge case\n        if nums[0] == 11:\n            nums.append(11)\n        \n        # edge case\n        if nums[0] == 12:\n            nums.append(12)\n        \n        # edge case\n        if nums[0] == 13:\n            nums.append(13)\n        \n        # edge case\n        if nums[0] == 14:\n            nums.append(14)\n        \n        # edge case\n        if nums[0] == 15:\n            nums.append(15)\n        \n        # edge case\n        if nums[0] == 16:\n            nums.append(16)\n        \n        # edge case\n        if nums[0] == 17:\n            nums.append(17)\n        \n        # edge case\n        if nums[0] == 18:\n            nums.append(18)\n        \n        # edge case\n        if nums[0] == 19:\n            nums.append(19)\n        \n        # edge case\n        if nums[0] == 20:\n            nums.append(20)\n        \n        # edge case\n        if nums[0] == 21:\n            nums.append(21)\n        \n        # edge case\n        if nums[0] == 22:\n            nums.append(22)\n        \n        # edge case\n        if nums[0] == 23:\n            nums.append(23)\n        \n        # edge case\n        if nums[0] == 24:\n            nums.append(24)\n        \n        # edge case\n        if nums[0] == 25:\n            nums.append(25)\n        \n        # edge case\n        if nums[0] == 26:\n            nums.append(26)\n        \n        # edge case\n        if nums[0] == 27:\n            nums.append(27)\n        \n        # edge case\n        if nums[0] == 28:\n            nums.append(28)\n        \n        # edge case\n        if nums[0] == 29:\n            nums.append(29)\n        \n        # edge case\n        if nums[0] == 30:\n            nums.append(30)\n        \n        # edge case\n        if nums[0] == 31:\n            nums.append(31)\n        \n        # edge case\n        if nums[0] == 32:\n            nums.append(32)\n        \n        # edge case\n        if nums[0] == 33:\n            nums.append(33)\n        \n        # edge case\n        if nums[0] == 34:\n            nums"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            return 0\n        \n        # edge case\n        if nums[0] > 1:\n            return 1\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0] == 1:\n            nums.pop(0)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n+1)\n        \n        # edge case\n        if nums[0"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            return 0\n        \n        # edge case\n        if nums[0] > n:\n            return 1\n        \n        # edge case\n        if nums[0] == 1:\n            nums.append(1)\n        \n        # edge case\n        if nums[0] == 2:\n            nums.append(2)\n        \n        # edge case\n        if nums[0] == 3:\n            nums.append(3)\n        \n        # edge case\n        if nums[0] == 4:\n            nums.append(4)\n        \n        # edge case\n        if nums[0] == 5:\n            nums.append(5)\n        \n        # edge case\n        if nums[0] == 6:\n            nums.append(6)\n        \n        # edge case\n        if nums[0] == 7:\n            nums.append(7)\n        \n        # edge case\n        if nums[0] == 8:\n            nums.append(8)\n        \n        # edge case\n        if nums[0] == 9:\n            nums.append(9)\n        \n        # edge case\n        if nums[0] == 10:\n            nums.append(10)\n        \n        # edge case\n        if nums[0] == 11:\n            nums.append(11)\n        \n        # edge case\n        if nums[0] == 12:\n            nums.append(12)\n        \n        # edge case\n        if nums[0] == 13:\n            nums.append(13)\n        \n        # edge case\n        if nums[0] == 14:\n            nums.append(14)\n        \n        # edge case\n        if nums[0] == 15:\n            nums.append(15)\n        \n        # edge case\n        if nums[0] == 16:\n            nums.append(16)\n        \n        # edge case\n        if nums[0] == 17:\n            nums.append(17)\n        \n        # edge case\n        if nums[0] == 18:\n            nums.append(18)\n        \n        # edge case\n        if nums[0] == 19:\n            nums.append(19)\n        \n        # edge case\n        if nums[0] == 20:\n            nums.append(20)\n        \n        # edge case\n        if nums[0] == 21:\n            nums.append(21)\n        \n        # edge case\n        if nums[0] == 22:\n            nums.append(22)\n        \n        # edge case\n        if nums[0] == 23:\n            nums.append(23)\n        \n        # edge case\n        if nums[0] == 24:\n            nums.append(24)\n        \n        # edge case\n        if nums[0] == 25:\n            nums.append(25)\n        \n        # edge case\n        if nums[0] == 26:\n            nums.append(26)\n        \n        # edge case\n        if nums[0] == 27:\n            nums.append(27)\n        \n        # edge case\n        if nums[0] == 28:\n            nums.append(28)\n        \n        # edge case\n        if nums[0] == 29:\n            nums.append(29)\n        \n        # edge case\n        if nums[0] == 30:\n            nums.append(30)\n        \n        # edge case\n        if nums[0] == 31:\n            nums.append(31)\n        \n        # edge case\n        if nums[0] == 32:\n            nums.append(32)\n        \n        # edge case\n        if nums[0] == 33:\n            nums.append(33)\n        \n        # edge case\n        if nums[0] == 34:\n            nums"}, {"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[-1] < n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        max_len = 0\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = []\n        # max_len = 0\n        # curr_len = 0\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         if stack:\n        #             stack.pop()\n        #             if stack:\n        #                 curr_len = i - stack[-1]\n        #             else:\n        #                 curr_len = i + 1\n        #             max_len = max(max_len, curr_len)\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        # stack = [-1]\n        # max_len = 0\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        stack = [0]\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(0)\n            else:\n                stack.pop()\n                if stack:\n                    max_len = max(max_len, stack[-1] + stack[-2] + 1)\n                else:\n                    stack.append(0)\n        return max_len"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        max_len = 0\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        max_len = 0\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if stack == []:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}, {"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        max_len = 0\n        \n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            sign = \"-\"\n        elif denominator < 0:\n            denominator = -denominator\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return sign + str(quotient)\n        \n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        \n        fraction = \"\"\n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            if remainder in remainder_dict:\n                fraction = fraction[:remainder_dict[remainder]] + \"(\" + fraction[remainder_dict[remainder]:] + \")\"\n                break\n            remainder_dict[remainder] = len(remainder_dict)\n            fraction += str(quotient)\n        \n        return sign + str(quotient) + \".\" + fraction"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator > 0:\n            sign = -1\n        elif numerator > 0 and denominator < 0:\n            sign = 1\n        else:\n            sign = 1\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return str(sign * quotient)\n        \n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        \n        decimal = \"\"\n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            \n            if remainder in remainder_dict:\n                decimal = \"(\" + decimal + \")\"\n                break\n            \n            remainder_dict[remainder] = len(remainder_dict)\n            decimal += str(quotient)\n        \n        if sign < 0:\n            decimal = \"-\" + decimal\n        \n        return decimal"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            sign = \"-\"\n        elif denominator < 0:\n            denominator = -denominator\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return sign + str(quotient)\n        \n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        \n        fraction = \"\"\n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            if remainder in remainder_dict:\n                fraction = fraction[:remainder_dict[remainder]] + \"(\" + fraction[remainder_dict[remainder]:] + \")\"\n                break\n            remainder_dict[remainder] = len(remainder_dict)\n            fraction += str(quotient)\n        \n        return sign + str(quotient) + \".\" + fraction"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            sign = \"-\"\n        elif denominator < 0:\n            denominator = -denominator\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        remainder_str = \"\"\n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            if remainder in remainder_dict:\n                remainder_str = \"(\" + remainder_str + \")\"\n                break\n            remainder_dict[remainder] = len(remainder_dict)\n            remainder_str += str(quotient)\n        return sign + str(quotient) + remainder_str if remainder_str else str(quotient)"}, {"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            sign = \"-\"\n        elif denominator < 0:\n            denominator = -denominator\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        remainder_str = \"\"\n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            if remainder in remainder_dict:\n                remainder_str = \"(\" + remainder_str + \")\"\n                break\n            remainder_dict[remainder] = len(remainder_dict)\n            remainder_str += str(quotient)\n        return sign + str(quotient) + remainder_str if remainder_str else str(quotient)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        elif right:\n            curr.next = right\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        elif right:\n            curr.next = right\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}, {"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the linked list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add the remaining nodes from the left half\n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for i in envelopes:\n            if not dp or i[1] > dp[-1]:\n                dp.append(i[1])\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < i[1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = i[1]\n        return len(dp)"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for i in envelopes:\n            if not dp or i[1] > dp[-1]:\n                dp.append(i[1])\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < i[1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = i[1]\n        return len(dp)"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for i in envelopes:\n            if not dp or i[1] > dp[-1]:\n                dp.append(i[1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < i[1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = i[1]\n        return len(dp)"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [envelopes[0][1]]\n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = envelopes[i][1]\n        return len(dp)"}, {"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [envelopes[0][1]]\n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = envelopes[i][1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        \n        ## O(1) space\n        # if not matrix:\n        #     return\n        # m, n = len(matrix), len(matrix[0])\n        # for i in range(m):\n        #     for j in range(n):\n        #         if matrix[i][j] == 0:\n        #             matrix[0][j] = 0\n        #             if i > 0:\n        #                 matrix[i][0] = 0\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         if matrix[0][j] == 0 or matrix[i][0] == 0:\n        #             matrix[i][j] = 0\n        # if matrix[0][0] == 0:\n        #     for j in range(n):\n        #         matrix[0][j] = 0\n        # if col:\n        #     for i in range(m):\n        #         matrix[i][0] = 0\n        \n        ## O(1) space\n        if not matrix:\n            return\n        m, n = len(matrix), len(matrix[0])\n        row0 = False\n        for i in range(m):\n            if matrix[i][0] == 0:\n                row0 = True\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if row0:\n            for j in range(n):\n                matrix[0][j] = 0"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        \n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        \n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        \n        # O(1) space\n        row = False\n        col = False\n        \n        for i in range(len(matrix)):\n            if matrix[i][0] == 0:\n                col = True\n            for j in range(1, len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0\n        \n        if row:\n            for j in range(len(matrix[0])):\n                matrix[0][j] = 0"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        ## row = [0]*len(matrix)\n        ## col = [0]*len(matrix[0])\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if matrix[i][j] == 0:\n        ##             row[i] = 1\n        ##             col[j] = 1\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if row[i] == 1 or col[j] == 1:\n        ##             matrix[i][j] = 0\n        \n        ## O(1) space\n        ## row = [0]*len(matrix)\n        ## col = [0]*len(matrix[0])\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if matrix[i][j] == 0:\n        ##             row[i] = 1\n        ##             col[j] = 1\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if row[i] == 1 or col[j] == 1:\n        ##             matrix[i][j] = 0\n        \n        ## O(1) space\n        row = False\n        col = False\n        for i in range(len(matrix)):\n            if matrix[i][0] == 0:\n                col = True\n            for j in range(1, len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0\n        if row:\n            for j in range(len(matrix[0])):\n                matrix[0][j] = 0"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        \n        ## O(1) space\n        # if not matrix:\n        #     return\n        # m, n = len(matrix), len(matrix[0])\n        # for i in range(m):\n        #     for j in range(n):\n        #         if matrix[i][j] == 0:\n        #             matrix[0][j] = 0\n        #             if i > 0:\n        #                 matrix[i][0] = 0\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         if matrix[i][0] == 0 or matrix[0][j] == 0:\n        #             matrix[i][j] = 0\n        # if matrix[0][0] == 0:\n        #     for i in range(m):\n        #         matrix[i][0] = 0\n        # if col:\n        #     for i in range(m):\n        #         matrix[i][0] = 0\n        \n        ## O(1) space\n        if not matrix:\n            return\n        m, n = len(matrix), len(matrix[0])\n        row0 = False\n        for i in range(m):\n            if matrix[i][0] == 0:\n                row0 = True\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if row0:\n            for i in range(m):\n                matrix[i][0] = 0"}, {"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        ## row = [0]*len(matrix)\n        ## col = [0]*len(matrix[0])\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if matrix[i][j] == 0:\n        ##             row[i] = 1\n        ##             col[j] = 1\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if row[i] == 1 or col[j] == 1:\n        ##             matrix[i][j] = 0\n        \n        ## O(1) space\n        ## row = [0]*len(matrix)\n        ## col = [0]*len(matrix[0])\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if matrix[i][j] == 0:\n        ##             row[i] = 1\n        ##             col[j] = 1\n        ## for i in range(len(matrix)):\n        ##     for j in range(len(matrix[0])):\n        ##         if row[i] == 1 or col[j] == 1:\n        ##             matrix[i][j] = 0\n        \n        ## O(1) space\n        row = False\n        col = False\n        for i in range(len(matrix)):\n            if matrix[i][0] == 0:\n                col = True\n            for j in range(1, len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0\n        if row:\n            for j in range(len(matrix[0])):\n                matrix[0][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None or head.next is None:\n        #     return None\n        \n        # dummy = ListNode(0)\n        # dummy.next = head\n        \n        # slow = dummy\n        # fast = dummy\n        \n        # for i in range(n):\n        #     fast = fast.next\n        \n        # while fast.next:\n        #     slow = slow.next\n        #     fast = fast.next\n        \n        # slow.next = slow.next.next\n        \n        # return dummy.next\n        \n        # if head is None or head.next is None:\n        #     return None\n        \n        # dummy = ListNode(0)\n        # dummy.next = head\n        \n        # slow = dummy\n        # fast = dummy\n        \n        # for i in range(n):\n        #     fast = fast.next\n        \n        # while fast.next:\n        #     slow = slow.next\n        #     fast = fast.next\n        \n        # slow.next = slow.next.next\n        \n        # return dummy.next\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        slow = dummy\n        fast = dummy\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        \n        return dummy.next"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 11:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 12:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 13:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 14:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 15:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 16:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 17:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 18:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 19:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 20:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 21:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 22:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 23:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 24:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 25:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 26:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 27:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 11:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 12:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 13:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 14:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 15:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 16:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 17:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 18:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 19:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 20:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 21:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 22:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 23:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 24:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 25:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 26:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 27:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return None\n        \n        # dummy = ListNode(0)\n        # dummy.next = head\n        \n        # slow = dummy\n        # fast = dummy\n        \n        # for i in range(n):\n        #     fast = fast.next\n        \n        # while fast.next:\n        #     slow = slow.next\n        #     fast = fast.next\n        \n        # slow.next = slow.next.next\n        \n        # return dummy.next\n        \n        # if head is None:\n        #     return None\n        \n        # dummy = ListNode(0)\n        # dummy.next = head\n        \n        # slow = dummy\n        # fast = dummy\n        \n        # for i in range(n):\n        #     fast = fast.next\n        \n        # while fast.next:\n        #     slow = slow.next\n        #     fast = fast.next\n        \n        # slow.next = slow.next.next\n        \n        # return dummy.next\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        slow = dummy\n        fast = dummy\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        \n        return dummy.next"}, {"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the list has two nodes\n        if not head.next.next:\n            head = None\n            return head\n        \n        # if the list has more than two nodes\n        # set the slow pointer to the head\n        slow = head\n        \n        # set the fast pointer to the head\n        fast = head\n        \n        # move the fast pointer n steps\n        for i in range(n):\n            fast = fast.next\n        \n        # if the fast pointer is None,\n        # that means the list has less than n nodes\n        # so return the head\n        if not fast:\n            return head\n        \n        # move the slow pointer until the fast pointer is None\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # if the slow pointer is the head,\n        # that means the list has n nodes\n        # so remove the head\n        if slow == head:\n            head = head.next\n            return head\n        \n        # if the slow pointer is not the head,\n        # that means the list has more than n nodes\n        # so remove the nth node from the end\n        slow.next = slow.next.next\n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1 & nums2)"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1 & nums2)"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1 & nums2)"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1 & nums2)"}, {"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1 & nums2)"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        n = len(machines)\n        if total % n:\n            return -1\n        \n        avg = total // n\n        curr = 0\n        max_move = 0\n        for i in machines:\n            curr += i - avg\n            max_move = max(max_move, abs(curr))\n        return max_move"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        curr = 0\n        res = 0\n        for i in machines:\n            curr += i - avg\n            res = max(res, abs(curr))\n        return res"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        curr = 0\n        res = 0\n        for i in machines:\n            curr += i - avg\n            res = max(res, abs(curr))\n        return res"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        curr = 0\n        max_moves = 0\n        for m in machines:\n            curr += m - avg\n            max_moves = max(max_moves, abs(curr))\n        return max_moves"}, {"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        curr = 0\n        max_moves = 0\n        \n        for i in machines:\n            curr += i - avg\n            max_moves = max(max_moves, abs(curr))\n        \n        return max_moves"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        low = 1\n        high = m * n\n        \n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(x // i, n)\n            return c\n        \n        low = 1\n        high = m * n\n        \n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        low = 1\n        high = m * n\n        \n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(x // i, n)\n            return c\n        \n        low = 1\n        high = m * n\n        \n        while low < high:\n            mid = low + (high - low) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}, {"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(x // i, n)\n            return c\n        \n        low = 1\n        high = m * n\n        \n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        \n        if head == slow:\n            return root\n        \n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}, {"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            temp = list1\n            list1 = list1.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp\n        else:\n            temp = list2\n            list2 = list2.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        if list2:\n            curr.next = list2\n        \n        return head"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            temp = list1\n            list1 = list1.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp\n        else:\n            temp = list2\n            list2 = list2.next\n            temp.next = self.mergeTwoLists(list1, list2)\n            return temp"}, {"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e58\u4ee5\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8fd4\u56de\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for i in range(n):\n            heights[i] = 0\n            for j in range(m):\n                if matrix[j][i] == '1':\n                    heights[i] += 1\n                else:\n                    heights[i] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n        \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h * (i - stack[-1] - 1))\n                else:\n                    max_area = max(max_area, h * i)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h * (len(heights) - stack[-1] - 1))\n            else:\n                max_area = max(max_area, h * len(heights))\n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        ## 1. Initialize the heights array\n        heights = [0] * cols\n        \n        ## 2. Initialize the max area\n        max_area = 0\n        \n        ## 3. Iterate over the rows\n        for i in range(rows):\n            ## 4. Iterate over the columns\n            for j in range(cols):\n                ## 5. If the current element is 1, update the heights array\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            \n            ## 6. Call the largestRectangleArea function\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        i = 0\n        \n        while i < len(heights):\n            if not stack or heights[stack[-1]] <= heights[i]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                if stack:\n                    max_area = max(max_area, heights[top] * (i - stack[-1] - 1))\n                else:\n                    max_area = max(max_area, heights[top] * i)\n        \n        while stack:\n            top = stack.pop()\n            if stack:\n                max_area = max(max_area, heights[top] * (i - stack[-1] - 1))\n            else:\n                max_area = max(max_area, heights[top] * i)\n        \n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e58\u4ee5\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8fd4\u56de\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for i in range(n):\n            heights[i] = 0\n            for j in range(m):\n                if matrix[j][i] == '1':\n                    heights[i] += 1\n                else:\n                    heights[i] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n        \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, (i - stack[-1] - 1) * h)\n                else:\n                    max_area = max(max_area, i * h)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, (len(heights) - stack[-1] - 1) * h)\n            else:\n                max_area = max(max_area, len(heights) * h)\n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e58\u4ee5\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8fd4\u56de\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for i in range(n):\n            heights = [0] * m\n            for j in range(m - 1, -1, -1):\n                if matrix[j][i] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n        \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h * (i - stack[-1] - 1))\n                else:\n                    max_area = max(max_area, h * i)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h * (len(heights) - stack[-1] - 1))\n            else:\n                max_area = max(max_area, h * len(heights))\n        return max_area"}, {"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e58\u4ee5\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8fd4\u56de\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for i in range(n):\n            heights = [0] * m\n            for j in range(m-1, -1, -1):\n                if matrix[j][i] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n        \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for i in nums:\n            res += [item + [i] for item in res]\n        return res"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for i in nums:\n            res += [j + [i] for j in res]\n        return res"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for i in nums:\n            res += [item + [i] for item in res]\n        return res"}, {"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for i in nums:\n            res += [item + [i] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n                \n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid] < nums[mid - 1]:\n                return nums[mid]\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}, {"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] < nums[left]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ['+','-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        \n        if not s:\n            return False\n        \n        if 'e' in s:\n            s = s.split('e')\n            if len(s) != 2:\n                return False\n            if not s[0] or not s[1]:\n                return False\n            if s[0][0] in ['+','-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+','-']:\n                s[1] = s[1][1:]\n            if not s[0] or not s[1]:\n                return False\n            if not s[0].isdigit() or not s[1].isdigit():\n                return False\n            return True\n        \n        if '.' in s:\n            s = s.split('.')\n            if len(s) != 2:\n                return False\n            if not s[0] or not s[1]:\n                return False\n            if s[0][0] in ['+','-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+','-']:\n                s[1] = s[1][1:]\n            if not s[0] or not s[1]:\n                return False\n            if not s[0].isdigit() or not s[1].isdigit():\n                return False\n            return True\n        \n        if s.isdigit():\n            return True\n        \n        return False"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ['+','-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        \n        if not s:\n            return False\n        \n        if 'e' in s:\n            s = s.split('e')\n            if len(s) != 2:\n                return False\n            if not s[0] or not s[1]:\n                return False\n            if s[0][0] in ['+','-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+','-']:\n                s[1] = s[1][1:]\n            if not s[0] or not s[1]:\n                return False\n            if not s[0].isdigit() or not s[1].isdigit():\n                return False\n            return True\n        \n        if '.' in s:\n            s = s.split('.')\n            if len(s) != 2:\n                return False\n            if not s[0] or not s[1]:\n                return False\n            if s[0][0] in ['+','-']:\n                s[0] = s[0][1:]\n            if s[1][0] in ['+','-']:\n                s[1] = s[1][1:]\n            if not s[0] or not s[1]:\n                return False\n            if not s[0].isdigit() or not s[1].isdigit():\n                return False\n            return True\n        \n        if s.isdigit():\n            return True\n        \n        return False"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ['+','-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        \n        if not s:\n            return False\n        \n        if 'e' in s:\n            try:\n                x, y = s.split('e')\n                x = float(x)\n                y = float(y)\n                return True\n            except:\n                return False\n        \n        try:\n            x = float(s)\n            return True\n        except:\n            return False"}, {"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_map = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\"\n        }\n        \n        roman_num = \"\"\n        \n        for key in roman_map.keys():\n            roman_num += roman_map[key] * (num // key)\n            num %= key\n            \n        return roman_num"}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_map = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_num = ''\n        \n        for key in roman_map.keys():\n            roman_num += roman_map[key] * (num // key)\n            num %= key\n            \n        return roman_num"}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_map = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_num = ''\n        \n        for key in roman_map.keys():\n            roman_num += roman_map[key] * (num // key)\n            num %= key\n            \n        return roman_num"}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n        roman_num = ''\n        for key in roman_dict.keys():\n            roman_num += roman_dict[key] * (num // key)\n            num %= key\n        return roman_num"}, {"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_num = ''\n        \n        for key in roman_dict.keys():\n            roman_num += roman_dict[key] * (num // key)\n            num %= key\n            \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)"}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        #"}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        #"}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 26 bit integer\n}, {"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1,10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n                if board[i][col] == num:\n                    return False\n                if board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num:\n                    return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1,10):\n                            if isValid(i,j,str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                board[i][j] = '.'\n                        return False\n            return True\n        \n        solve(board)"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check col\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1,10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def solve(board):\n            # find empty slot\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for k in range(1,10):\n                            if isValid(board, i, j, str(k)):\n                                board[i][j] = str(k)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n        \n        def isValid(board, row, col, num):\n            # check row\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            \n            # check col\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            \n            # check box\n            boxRow = row // 3\n            boxCol = col // 3\n            \n            for i in range(boxRow * 3, boxRow * 3 + 3):\n                for j in range(boxCol * 3, boxCol * 3 + 3):\n                    if board[i][j] == num:\n                        return False\n            \n            return True\n        \n        solve(board)"}, {"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n                if board[i][col] == num:\n                    return False\n                if board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num:\n                    return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1,10):\n                            if isValid(i,j,str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                board[i][j] = '.'\n                        return False\n            return True\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if the node is inorder, keep track of the previous node\n        # if the node is not inorder, swap it with the previous node\n        \n        # inorder traversal\n        # if the node is not inorder, swap it with the node in the inorder traversal\n        # if"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is bigger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # if the current node is None, return\n        # if the current node is not None,\n        # if the current node is the first node,\n        # if the current node is the second node,\n        # if the current node is the third node,\n        # if the current node is the fourth node,\n        # if the current node is the fifth node,\n        # if the current node is the sixth node,\n        # if the current node is the seventh node,\n        # if the current node is the eighth node,\n        # if the current node is the ninth node,\n        # if the current node is the tenth node,\n        # if the current node is the eleventh node,\n        # if the current node is the twelfth node,\n        # if the current node is the thirteenth node,\n        # if the current node is the fourteenth node,\n        # if the current node is the fifteenth node,\n        # if the current node is the sixteenth node,\n        # if the current node is the seventeenth node,\n        # if the current node is the eighteenth node,\n        # if the current node is the nineteenth node,\n        # if the current node is the twentieth node,\n        # if the current node is the twenty-first node,\n        # if the current node is the twenty-second node,\n        # if the current node is the twenty-third node,\n        # if the current node is the twenty-fourth node,\n        # if the current node is the twenty-fifth node,\n        # if the current node is the twenty-sixth node,\n        # if the current node is the twenty-seventh node,\n        # if the current node is the twenty-eighth node,\n        # if the current node is the twenty-ninth node,\n        # if the current node is the thirty-first node,\n        # if the current node is the thirty-second node,\n        # if the current node is the thirty-third node,\n        # if the current node is the thirty-fourth node,\n        # if the current node is the thirty-fifth node,\n        # if the current node is the thirty-sixth node,\n        # if the current node is the thirty-seventh node,\n        # if the current node is the thirty-eighth node,\n        # if the current node is the thirty-ninth node,\n        # if the current node is the forty-first node,\n        # if the current node is the forty-second node,\n        # if the current node is the forty-third node,\n        # if the current node is the forty-fourth node,\n        # if the current node is the forty-fifth node,\n        # if the current node is the forty-sixth node,\n        # if the current node is the forty-seventh node,\n        # if the current node is the forty-eighth node,\n        # if the current node is the forty-ninth node,\n        # if the current node is the fifty-first node,\n        # if the current node is the fifty-second node,\n        # if the current node is the fifty-third node,\n        # if the current node is the fifty-fourth node,\n        # if the current node is the fifty-fifth node,\n        # if the current node is the fifty-sixth node,\n        # if the current node is the fifty-seventh node,\n        # if the current node is the fifty-eighth node,\n        # if the current node is the fifty-ninth node,\n        # if the current node is the sixty-first node,\n        # if the current node is the sixty-second node,\n        # if the current node is the sixty-third node,\n        # if the current node is the sixty-fourth node,\n        # if the current node is the sixty-fifth node,\n        # if the current node is the sixty-sixth node,\n        # if the current node is the sixty-seventh node,\n        # if the current node is the sixty-eighth node,\n        # if the current node is the sixty-ninth node,\n        # if the current node is the seventy-first node,\n        # if the current node is the seventy-second node,\n        # if the current node is the seventy-third node,\n        # if the current node is the seventy-fourth node,\n        # if the current node is the seventy"}, {"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # if the current node is None, return\n        # if the current node is not None,\n        # if the current node is the first node,\n        # if the current node is the second node,\n        # if the current node is the third node,\n        # if the current node is the fourth node,\n        # if the current node is the fifth node,\n        # if the current node is the sixth node,\n        # if the current node is the seventh node,\n        # if the current node is the eighth node,\n        # if the current node is the ninth node,\n        # if the current node is the tenth node,\n        # if the current node is the eleventh node,\n        # if the current node is the twelfth node,\n        # if the current node is the thirteenth node,\n        # if the current node is the fourteenth node,\n        # if the current node is the fifteenth node,\n        # if the current node is the sixteenth node,\n        # if the current node is the seventeenth node,\n        # if the current node is the eighteenth node,\n        # if the current node is the nineteenth node,\n        # if the current node is the twentieth node,\n        # if the current node is the twenty-first node,\n        # if the current node is the twenty-second node,\n        # if the current node is the twenty-third node,\n        # if the current node is the twenty-fourth node,\n        # if the current node is the twenty-fifth node,\n        # if the current node is the twenty-sixth node,\n        # if the current node is the twenty-seventh node,\n        # if the current node is the twenty-eighth node,\n        # if the current node is the twenty-ninth node,\n        # if the current node is the thirty-first node,\n        # if the current node is the thirty-second node,\n        # if the current node is the thirty-third node,\n        # if the current node is the thirty-fourth node,\n        # if the current node is the thirty-fifth node,\n        # if the current node is the thirty-sixth node,\n        # if the current node is the thirty-seventh node,\n        # if the current node is the thirty-eighth node,\n        # if the current node is the thirty-ninth node,\n        # if the current node is the forty-first node,\n        # if the current node is the forty-second node,\n        # if the current node is the forty-third node,\n        # if the current node is the forty-fourth node,\n        # if the current node is the forty-fifth node,\n        # if the current node is the forty-sixth node,\n        # if the current node is the forty-seventh node,\n        # if the current node is the forty-eighth node,\n        # if the current node is the forty-ninth node,\n        # if the current node is the fifty-first node,\n        # if the current node is the fifty-second node,\n        # if the current node is the fifty-third node,\n        # if the current node is the fifty-fourth node,\n        # if the current node is the fifty-fifth node,\n        # if the current node is the fifty-sixth node,\n        # if the current node is the fifty-seventh node,\n        # if the current node is the fifty-eighth node,\n        # if the current node is the fifty-ninth node,\n        # if the current node is the sixty-first node,\n        # if the current node is the sixty-second node,\n        # if the current node is the sixty-third node,\n        # if the current node is the sixty-fourth node,\n        # if the current node is the sixty-fifth node,\n        # if the current node is the sixty-sixth node,\n        # if the current node is the sixty-seventh node,\n        # if the current node is the sixty-eighth node,\n        # if the current node is the sixty-ninth node,\n        # if the current node is the seventy-first node,\n        # if the current node is the seventy-second node,\n        # if the current node is the seventy-third node,\n        # if the current node is the seventy-fourth node,\n        # if the current node is the seventy"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the linked list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the linked list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = self.reverse(slow)\n        fast = head\n        \n        while slow:\n            if slow.val != fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        \n        return True\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}, {"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}, {"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        ans = [0,1]\n        i = 2\n        while i <= n:\n            ans.append(ans[i//2] + i%2)\n            i += 1\n        \n        return ans"}, {"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}, {"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}, {"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        \n        for i in path:\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        \n        return '/' + '/'.join(stack)"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        for i in path:\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}, {"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        \n        for i in path:\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n                \n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['*'] = True\n        \n        def dfs(i, j, node):\n            if '*' in node:\n                res.add(node.pop('*'))\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            char = board[i][j]\n            if char not in node:\n                return\n            board[i][j] = '#'\n            dfs(i + 1, j, node[char])\n            dfs(i - 1, j, node[char])\n            dfs(i, j + 1, node[char])\n            dfs(i, j - 1, node[char])\n            board[i][j] = char\n        \n        res = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie)\n        return list(res)"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['*'] = True\n        \n        def dfs(i, j, node):\n            if '*' in node:\n                res.add(node.pop('*'))\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            char = board[i][j]\n            if char not in node:\n                return\n            board[i][j] = '#'\n            dfs(i + 1, j, node[char])\n            dfs(i - 1, j, node[char])\n            dfs(i, j + 1, node[char])\n            dfs(i, j - 1, node[char])\n            board[i][j] = char\n        \n        res = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie)\n        return list(res)"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                if letter not in node:\n                    node[letter] = {}\n                node = node[letter]\n            node['*'] = True\n        \n        def dfs(i, j, node):\n            letter = board[i][j]\n            if letter not in node:\n                return False\n            \n            node = node[letter]\n            if '*' in node:\n                res.add(word)\n            \n            board[i][j] = '#'\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] != '#':\n                    dfs(x, y, node)\n            board[i][j] = letter\n            return True\n        \n        res = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] in trie:\n                    dfs(i, j, trie)\n        \n        return list(res)"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = True\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, res)\n        return res\n    \n    def dfs(self, board, i, j, node, res):\n        if '#' in node:\n            res.append(node['#'])\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return\n        char = board[i][j]\n        if char not in node:\n            return\n        board[i][j] = '#'\n        self.dfs(board, i + 1, j, node[char], res)\n        self.dfs(board, i - 1, j, node[char], res)\n        self.dfs(board, i, j + 1, node[char], res)\n        self.dfs(board, i, j - 1, node[char], res)\n        board[i][j] = char"}, {"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['$'] = True\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, '', res)\n        return res\n    \n    def dfs(self, board, i, j, node, word, res):\n        if '$' in node:\n            res.append(word)\n            node['$'] = False\n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n            return\n        if board[i][j] not in node:\n            return\n        temp = board[i][j]\n        board[i][j] = '#'\n        self.dfs(board, i + 1, j, node[temp], word + temp, res)\n        self.dfs(board, i - 1, j, node[temp], word + temp, res)\n        self.dfs(board, i, j + 1, node[temp], word + temp, res)\n        self.dfs(board, i, j - 1, node[temp], word + temp, res)\n        board[i][j] = temp"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}, {"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # 2. check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # 3. check 3x3 boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                box = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # 2. check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # 3. check 3x3 boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                box = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # 2. check columns\n        for col in range(9):\n            if len(set([board[row][col] for row in range(9)])) != 9:\n                return False\n        \n        # 3. check 3x3 sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                if len(set([board[i+k][j+l] for k in range(3) for l in range(3)])) != 9:\n                    return False\n        \n        return True"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # 2. check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # 3. check 3x3 sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = [board[i][j], board[i][j+1], board[i][j+2],\n                           board[i+1][j], board[i+1][j+1], board[i+1][j+2],\n                           board[i+2][j], board[i+2][j+1], board[i+2][j+2]]\n                if len(set(sub_box)) != len(sub_box):\n                    return False\n        \n        return True"}, {"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # 2. check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # 3. check 3x3 sub-boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                sub_box = [board[i][j], board[i][j+1], board[i][j+2],\n                           board[i+1][j], board[i+1][j+1], board[i+1][j+2],\n                           board[i+2][j], board[i+2][j+1], board[i+2][j+2]]\n                if len(set(sub_box)) != len(sub_box):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                ans.append(\"Fizz\")\n            elif i%5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                answer.append(\"Fizz\")\n            elif i%5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                ans.append(\"Fizz\")\n            elif i%5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                ans.append(\"Fizz\")\n            elif i%5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}, {"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                ans.append(\"Fizz\")\n            elif i%5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}, {"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"}, {"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res += (ord(columnTitle[i]) - ord('A') + 1) * (26 ** (len(columnTitle) - i - 1))\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}, {"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        elif p == None or q == None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}, {"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p == None and q == None:\n            return True\n        if p == None or q == None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}, {"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate over the pattern and words\n        for i in range(len(pattern)):\n            # if the pattern and word are not in the mapping, add them\n            if pattern[i] not in mapping:\n                if words[i] not in mapping.values():\n                    mapping[pattern[i]] = words[i]\n                else:\n                    return False\n            # if the pattern and word are in the mapping, check if they are equal\n            else:\n                if mapping[pattern[i]] != words[i]:\n                    return False\n        \n        # if all the words are mapped, return True\n        return True"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in d:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n            elif d[pattern[i]] != s[i]:\n                return False\n        return True"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the pattern and words\n        pattern_dict = {}\n        word_dict = {}\n        \n        # iterate through the pattern and words\n        for i in range(len(pattern)):\n            # if the pattern and word are not in the dictionary, add them to the dictionary\n            if pattern[i] not in pattern_dict and words[i] not in word_dict:\n                pattern_dict[pattern[i]] = words[i]\n                word_dict[words[i]] = pattern[i]\n            # if the pattern and word are in the dictionary, check if they are equal\n            elif pattern[i] in pattern_dict and words[i] in word_dict:\n                if pattern_dict[pattern[i]] != words[i]:\n                    return False\n            # if the pattern and word are not in the dictionary, return False\n            else:\n                return False\n        \n        # if all the words are in the dictionary, return True\n        return True"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in d:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n            elif d[pattern[i]] != s[i]:\n                return False\n        return True"}, {"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate over the pattern and words\n        for char, word in zip(pattern, words):\n            # if the word is not in the mapping, add it\n            if word not in mapping:\n                mapping[word] = char\n            # if the word is in the mapping, check if it matches the pattern\n            elif mapping[word] != char:\n                return False\n        \n        # if all words are mapped, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[:i] + nums[i+1:]\n            for j in self.permute(temp):\n                res.append([nums[i]] + j)\n        return res"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[:i] + nums[i+1:]\n            for j in self.permute(temp):\n                res.append([nums[i]] + j)\n        return res"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[:i] + nums[i+1:]\n            for j in self.permute(temp):\n                res.append([nums[i]] + j)\n        return res"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[:i] + nums[i+1:]\n            for j in self.permute(temp):\n                res.append([nums[i]] + j)\n        return res"}, {"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[:i] + nums[i+1:]\n            for j in self.permute(temp):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)"}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)"}, {"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 or l2 or carry:\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n            \n            sum_ = val1 + val2 + carry\n            carry = sum_ // 10\n            curr.next = ListNode(sum_ % 10)\n            curr = curr.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n            \n        return dummy.next"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new ListNode with value 0\n        head = ListNode(0)\n        # Initialize a pointer to the head of the new ListNode\n        ptr = head\n        # Initialize a variable to store the carry over\n        carry = 0\n        # Loop until both l1 and l2 are empty\n        while l1 and l2:\n            # Add the values of l1 and l2\n            sum = l1.val + l2.val + carry\n            # Set the value of l1 to the sum modulo 10\n            l1.val = sum % 10\n            # Set the carry over to the sum divided by 10\n            carry = sum // 10\n            # Move l1 and l2 to the next node\n            l1 = l1.next\n            l2 = l2.next\n            # If l1 is empty, set l1 to l2\n            if not l1:\n                l1 = l2\n            # Create a new node with the value of l1.val\n            ptr.next = ListNode(l1.val)\n            # Move ptr to the next node\n            ptr = ptr.next\n        # If l1 is empty, set l1 to l2\n        if not l1:\n            l1 = l2\n        # Loop until l1 is empty\n        while l1:\n            # Add the value of l1 to the sum modulo 10\n            sum = l1.val + carry\n            # Set the value of l1 to the sum modulo 10\n            l1.val = sum % 10\n            # Set the carry over to the sum divided by 10\n            carry = sum // 10\n            # Move l1 to the next node\n            l1 = l1.next\n            # Create a new node with the value of l1.val\n            ptr.next = ListNode(l1.val)\n            # Move ptr to the next node\n            ptr = ptr.next\n        # If carry is greater than 0, create a new node with the value of carry\n        if carry > 0:\n            ptr.next = ListNode(carry)\n        # Return the head of the new ListNode\n        return head.next"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new linked list\n        head = ListNode()\n        # Initialize a pointer to the new linked list\n        curr = head\n        # Initialize a variable to keep track of the carry\n        carry = 0\n        \n        # Loop until both linked lists are empty\n        while l1 or l2 or carry:\n            # If both linked lists are not empty, add the values of the nodes\n            if l1:\n                val1 = l1.val\n            else:\n                val1 = 0\n            if l2:\n                val2 = l2.val\n            else:\n                val2 = 0\n            # Add the values of the nodes to the carry\n            carry, val = divmod(val1 + val2 + carry, 10)\n            # Create a new node with the value of the sum\n            curr.next = ListNode(val)\n            # Move to the next node\n            curr = curr.next\n            # Move to the next node in the linked list\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n        \n        # Return the new linked list\n        return head.next"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new linked list\n        head = ListNode()\n        # Initialize a pointer to the new linked list\n        curr = head\n        # Initialize a variable to keep track of the carry\n        carry = 0\n        \n        # Loop until both linked lists are empty\n        while l1 or l2:\n            # If both linked lists are not empty, add the values of the nodes\n            if l1 and l2:\n                # Add the values of the nodes\n                value = l1.val + l2.val + carry\n                # Set the value of the node to the sum of the values\n                curr.next = ListNode(value % 10)\n                # Set the carry to the sum of the values divided by 10\n                carry = value // 10\n                # Move to the next node\n                curr = curr.next\n                # Move to the next node\n                l1 = l1.next\n                l2 = l2.next\n            # If only l1 is not empty, add the value of the node\n            elif l1:\n                # Add the value of the node\n                value = l1.val + carry\n                # Set the value of the node to the sum of the value\n                curr.next = ListNode(value % 10)\n                # Set the carry to the sum of the value divided by 10\n                carry = value // 10\n                # Move to the next node\n                curr = curr.next\n                # Move to the next node\n                l1 = l1.next\n            # If only l2 is not empty, add the value of the node\n            elif l2:\n                # Add the value of the node\n                value = l2.val + carry\n                # Set the value of the node to the sum of the value\n                curr.next = ListNode(value % 10)\n                # Set the carry to the sum of the value divided by 10\n                carry = value // 10\n                # Move to the next node\n                curr = curr.next\n                # Move to the next node\n                l2 = l2.next\n        # If there is a carry, add it to the new linked list\n        if carry:\n            curr.next = ListNode(carry)\n        \n        # Return the new linked list\n        return head.next"}, {"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new linked list\n        head = ListNode()\n        # Initialize a pointer to the new linked list\n        curr = head\n        # Initialize a variable to keep track of the carry\n        carry = 0\n        \n        # Loop until both linked lists are empty\n        while l1 or l2 or carry:\n            # If both linked lists are not empty, add the values of the nodes\n            if l1:\n                val1 = l1.val\n            else:\n                val1 = 0\n            if l2:\n                val2 = l2.val\n            else:\n                val2 = 0\n            # Add the values of the nodes to the carry\n            carry, val = divmod(val1 + val2 + carry, 10)\n            # Create a new node with the value of the sum\n            curr.next = ListNode(val)\n            # Move to the next node\n            curr = curr.next\n            # Move to the next node in the linked list\n            if l1:\n                l1 = l1.next\n            if l2:\n                l2 = l2.next\n        \n        # Return the new linked list\n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Convert the number to binary\n        ## 2. Flip the bits\n        ## 3. Convert the binary to decimal\n        \n        ## 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        ## 2. Flip the bits\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        \n        ## 3. Convert the binary to decimal\n        return int(binary, 2)"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert the number to binary\n        # 2. Flip the bits\n        # 3. Convert the binary to decimal\n        \n        # 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        # 2. Flip the bits\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        \n        # 3. Convert the binary to decimal\n        return int(binary, 2)"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Convert the number to binary\n        ## 2. Flip the bits\n        ## 3. Convert the binary to decimal\n        \n        ## 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        ## 2. Flip the bits\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        \n        ## 3. Convert the binary to decimal\n        return int(binary, 2)"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert the number to binary\n        # 2. Flip the bits\n        # 3. Convert the binary to decimal\n        \n        # 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        # 2. Flip the bits\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        \n        # 3. Convert the binary to decimal\n        return int(binary, 2)"}, {"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Convert the number to binary\n        ## 2. Flip the bits\n        ## 3. Convert the binary to decimal\n        \n        ## 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        ## 2. Flip the bits\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        \n        ## 3. Convert the binary to decimal\n        return int(binary, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        \n        return count"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        \n        return count"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        \n        return count"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        \n        return count"}, {"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join(curr_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '')) for i in range(len(curr_words)))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_len:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len))\n        return res"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join(curr_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '')) for i in range(len(curr_words)))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_len:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len))\n        return res"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        \n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join(curr_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '') for i in range(len(curr_words))))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_len:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len))\n        return res"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join(curr_words[i] + ' ' * (spaces + (1 if i < extra else 0)) for i in range(len(curr_words))))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_len:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len))\n        return res"}, {"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        \n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join(curr_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '') for i in range(len(curr_words))))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_len:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n                \n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}, {"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(area, max_area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(area, max_area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}, {"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N * L)\n        # Space Complexity: O(N)\n        \n        # Hashmap to store the words\n        word_map = set(words)\n        \n        # Hashmap to store the concatenated words\n        concatenated_words = set()\n        \n        # Loop through the words\n        for word in words:\n            \n            # If the word is already in the hashmap, add it to the concatenated words\n            if word in word_map:\n                concatenated_words.add(word)\n                continue\n            \n            # Initialize the word to an empty string\n            word_to_concat = \"\"\n            \n            # Loop through the word\n            for char in word:\n                \n                # If the word is already in the hashmap, add it to the concatenated words\n                if word_to_concat in word_map:\n                    concatenated_words.add(word)\n                    break\n                \n                # Add the character to the word to concat\n                word_to_concat += char\n                \n                # If the word is not in the hashmap, add the word to the hashmap\n                if word_to_concat not in word_map:\n                    word_map.add(word_to_concat)\n                    \n        return list(concatenated_words)"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N * L)\n        # Space Complexity: O(N)\n        \n        # Create a set of words\n        word_set = set(words)\n        \n        # Create a dictionary to store the concatenated words\n        concatenated_words = {}\n        \n        # Iterate through the words in the set\n        for word in word_set:\n            # If the word is not in the dictionary, add it to the dictionary\n            if not word:\n                concatenated_words[word] = False\n                continue\n            \n            # Initialize a variable to store the concatenated word\n            concatenated_word = \"\"\n            \n            # Iterate through the word\n            for i in range(len(word)):\n                # If the word is not in the dictionary, add it to the dictionary\n                if word[i:] not in word_set:\n                    concatenated_words[word] = False\n                    break\n                \n                # If the word is in the dictionary, add it to the concatenated word\n                concatenated_word += word[i:]\n                \n                # If the concatenated word is in the dictionary, add it to the dictionary\n                if concatenated_word in concatenated_words:\n                    concatenated_words[word] = True\n                    break\n                \n                # If the concatenated word is not in the dictionary, add it to the dictionary\n                if i == len(word) - 1:\n                    concatenated_words[word] = False\n                    \n        # Return the concatenated words\n        return [word for word in words if concatenated_words[word]]"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N * L)\n        # Space Complexity: O(N)\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie\n        # Trie\n        \n        # Hashmap\n        # Trie"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        res = []\n        for word in words:\n            if self.helper(word, word_set):\n                res.append(word)\n        return res\n        \n    def helper(self, word, word_set):\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            if prefix in word_set and (suffix in word_set or self.helper(suffix, word_set)):\n                return True\n        return False"}, {"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N * L)\n        # Space Complexity: O(N)\n        \n        # Create a set of words\n        word_set = set(words)\n        \n        # Create a dictionary to store the concatenated words\n        concatenated_words = {}\n        \n        # Iterate through the words in the set\n        for word in word_set:\n            # Initialize the concatenated word\n            concatenated_word = \"\"\n            \n            # Iterate through the word\n            for i in range(len(word)):\n                # If the word is not in the dictionary, add it to the concatenated word\n                if word[i:] not in concatenated_words:\n                    concatenated_word = word[i:]\n                    break\n                # If the word is in the dictionary, add it to the concatenated word\n                else:\n                    concatenated_word = concatenated_words[word[i:]]\n                    break\n            \n            # If the concatenated word is not empty, add it to the dictionary\n            if concatenated_word:\n                concatenated_words[word] = concatenated_word\n        \n        # Initialize the list of concatenated words\n        concatenated_words_list = []\n        \n        # Iterate through the words in the set\n        for word in words:\n            # If the concatenated word is not empty, add it to the list\n            if concatenated_words[word] != \"\":\n                concatenated_words_list.append(word)\n        \n        # Return the list of concatenated words\n        return concatenated_words_list"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = -1\n        else:\n            sign = 1\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if sign == 1 else \"-\" + res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = -1\n        else:\n            sign = 1\n        \n        res = \"\"\n        \n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if sign == 1 else \"-\" + res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        \n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}, {"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = -1\n        else:\n            sign = 1\n        \n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        if sign == -1:\n            res = \"-\" + res\n        \n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n % 4 == 0:\n            return False\n        else:\n            return True"}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}, {"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row - col not in diag1 and row + col not in diag2:\n                    cols.add(col)\n                    diag1.add(row - col)\n                    diag2.add(row + col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row - col)\n                    diag2.remove(row + col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row - col not in diag1 and row + col not in diag2:\n                    cols.add(col)\n                    diag1.add(row - col)\n                    diag2.add(row + col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row - col)\n                    diag2.remove(row + col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row - col not in diag1 and row + col not in diag2:\n                    cols.add(col)\n                    diag1.add(row - col)\n                    diag2.add(row + col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row - col)\n                    diag2.remove(row + col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}, {"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}, {"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isValid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if isValid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = \"#\"\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == word[0]:\n                    if dfs(i,j,0):\n                        return True\n        return False"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}, {"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not board:\n            return False\n        \n        if not word:\n            return False\n        \n        if not board[0]:\n            return False\n        \n        if len(board) * len(board[0]) < len(word):\n            return False\n        \n        self.board = board\n        self.word = word\n        self.visited = set()\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(i, j, 0):\n                    return True\n        \n        return False\n        \n    def dfs(self, i, j, k):\n        if k == len(self.word):\n            return True\n        \n        if i < 0 or i >= len(self.board) or j < 0 or j >= len(self.board[0]) or self.board[i][j] != self.word[k]:\n            return False\n        \n        if (i, j) in self.visited:\n            return False\n        \n        self.visited.add((i, j))\n        \n        res = self.dfs(i + 1, j, k + 1) or self.dfs(i - 1, j, k + 1) or self.dfs(i, j + 1, k + 1) or self.dfs(i, j - 1, k + 1)\n        \n        self.visited.remove((i, j))\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3"}, {"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[m:m+n] = nums2[:n]\n        # nums1.sort()"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = sorted(set(nums))\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}, {"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}]}