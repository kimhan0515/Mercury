{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        n, m = len(s), len(t)\n        dp = [0] * (m + 1)\n        dp[0] = 1\n        for i in range(n):\n            for j in range(m, 0, -1):\n                dp[j] += dp[j - 1] * (s[i] == t[j - 1])\n        return dp[m]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            if abs(nums[i]) <= n and nums[abs(nums[i]) - 1] > 0:\n                nums[abs(nums[i]) - 1] = -nums[abs(nums[i]) - 1]\n        \n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        nums = [i for i in range(1, n + 1)]\n        k -= 1\n        res = ''\n        while n > 0:\n            n -= 1\n            num, k = divmod(k, math.factorial(n))\n            res += str(nums[num])\n            nums.remove(nums[num])\n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(numbers)):\n            complement = target - numbers[i]\n            if complement in numbers[i+1:]:\n                return [i+1, numbers[i+1:].index(complement) + i + 2]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\""}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, prev):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return prev * 10 + root.val\n            return dfs(root.left, prev * 10 + root.val) + dfs(root.right, prev * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return '-'.join(s[i:i+k] for i in range(0, n, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(gas)\n        if sum(gas) < sum(cost):\n            return -1\n        \n        start = 0\n        tank = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for l in range(2, n):\n            for i in range(n - l):\n                j = i + l\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0, 1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if not s:\n            return not p or (len(p) == 1 and p[0] == '*')\n        \n        if len(p) == 1:\n            return s and (s[0] == p[0] or p[0] == '.')\n        \n        if p[1] == '*':\n            return self.isMatch(s, p[2:]) or (s and (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p))\n        \n        return self.isMatch(s[1:], p[1:]) and (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\""}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                sum += i + num // i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(n - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(n):\n                while j < n and nums[j] - nums[i] <= mid:\n                    j += 1\n                count += j - i - 1\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        i, j = 0, len(s) - 1\n        while i < j:\n            while i < j and s[i] not in vowels:\n                i += 1\n            while i < j and s[j] not in vowels:\n                j -= 1\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                longest = max(longest, curr_len)\n                \n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        sum_n = n * (n + 1) // 2\n        return sum_n - sum(nums)"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        while queue:\n            word, count = queue.popleft()\n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z') + 1):\n                    newWord = word[:i] + chr(j) + word[i + 1:]\n                    if newWord == endWord:\n                        return count + 1\n                    if newWord in wordList:\n                        queue.append((newWord, count + 1))\n                        wordList.remove(newWord)\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        a = int(a, 2)\n        b = int(b, 2)\n        return bin(a + b)[2:]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left = left + 1\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        k = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[k]:\n                k += 1\n                nums[k] = nums[i]\n        return k + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        end = 0\n        \n        for i in range(1, n):\n            if i > max_reach:\n                jumps += 1\n                max_reach = end\n            end = max(end, i + nums[i])\n            \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) / 2:\n            return sum(max(prices[i] - prices[i - 1], 0) for i in range(1, len(prices)))\n        \n        dp = [[0] * (k + 1) for _ in range(len(prices))]\n        \n        for i in range(len(prices)):\n            for j in range(1, k + 1):\n                if i == 0:\n                    dp[i][j] = prices[i]\n                else:\n                    dp[i][j] = max(dp[i - 1][j] - prices[i], dp[i - 1][j - 1])\n                    dp[i][j] = max(dp[i][j], prices[i] + dp[i - 1][j - 1])\n        \n        return dp[-1][-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        hex_dict = {10: \"a\", 11: \"b\", 12: \"c\", 13: \"d\", 14: \"e\", 15: \"f\"}\n        hex_list = []\n        if num < 0:\n            num = num + 2**32\n        \n        while num > 0:\n            hex_list.append(num % 16)\n            num = num // 16\n        \n        hex_list.reverse()\n        hex_str = \"\"\n        for i in hex_list:\n            if i < 10:\n                hex_str += str(i)\n            else:\n                hex_str += hex_dict[i]\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(s)):\n            if s.count(s[i]) == 1:\n                return i\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\""}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 1. Use 2 pointers, one for 0, one for 2, and one for 1.\n        # 2. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 3. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 4. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 5. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 6. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 7. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 8. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 9. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 10. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 11. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 12. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 13. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 14. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 15. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 16. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 17. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 18. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 19. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 20. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 21. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 22. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 23. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 24. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 25. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 26. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 27. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 28. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 29. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 30. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 31. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 32. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 33. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 34. Use 3 pointers, one for 0, one for 1, and one for 2.\n        # 35. Use 3 pointers,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_consecutive_ones = 0\n        consecutive_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                consecutive_ones += 1\n            else:\n                consecutive_ones = 0\n            max_consecutive_ones = max(max_consecutive_ones, consecutive_ones)\n        \n        return max_consecutive_ones"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        return left + right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = []\n        i = 0\n        carry = 0\n        while i < len(num1) or i < len(num2) or carry:\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            res.append(str(carry % 10))\n            carry //= 10\n            i += 1\n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        s = s.replace(' ', '')\n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                num = 0\n                sign = s[i]\n            if s[i] == '(':\n                stack.append(sign)\n            if s[i] == ')':\n                sign = stack.pop()\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\""}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '{':\n                stack.append('}')\n            elif i == '[':\n                stack.append(']')\n            elif len(stack) == 0 or i != stack.pop():\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        if i >= 0:\n            j = len(nums) - 1\n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            nums[i], nums[j] = nums[j], nums[i]\n        i += 1\n        j = len(nums) - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        d = {}\n        for i, n in enumerate(nums):\n            if n in d and i - d[n] <= k:\n                return True\n            d[n] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            queue = queue[len(level):]\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n % 2 == 1:\n            return -1\n        \n        couples = [(row[i], row[i + 1]) for i in range(0, n, 2)]\n        couples.sort()\n        \n        swaps = 0\n        for i in range(0, len(couples), 2):\n            if couples[i][1] != couples[i + 1][0]:\n                swaps += 1\n                couples[i + 1] = couples[i]\n        \n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        ans = []\n        for word in words:\n            if word[0].lower() in row1:\n                row = row1\n            elif word[0].lower() in row2:\n                row = row2\n            else:\n                row = row3\n            for letter in word:\n                if letter.lower() not in row:\n                    break\n            else:\n                ans.append(word)\n        \n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        for _ in range(left - 1):\n            prev = prev.next\n        cur = prev.next\n        for _ in range(right - left):\n            temp = cur.next\n            cur.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front of the string\n        # then add the reverse string to the back of the string\n        # then add the reverse string to the front"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        t_count = collections.Counter(t)\n        s_count = collections.Counter()\n        left = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        \n        for right in range(len(s)):\n            s_count[s[right]] += 1\n            \n            if s_count[s[right]] <= t_count[s[right]]:\n                if len(s_count) == len(t_count):\n                    while s_count[s[left]] > t_count[s[left]]:\n                        s_count[s[left]] -= 1\n                        left += 1\n                    if right - left + 1 < min_len:\n                        min_len = right - left + 1\n                        min_left = left\n                        min_right = right\n        \n        if min_len == len(s) + 1:\n            return \"\"\n        else:\n            return s[min_left:min_right + 1]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)):\n            if i >= 3 and distance[i] >= distance[i - 3] and distance[i - 1] <= distance[i - 4]:\n                return True\n            if i >= 4 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] + distance[i - 5] >= distance[i - 3] and distance[i - 2] + distance[i - 4] >= distance[i - 6]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            while curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the frequency of each character in the string\n        # 2. If the frequency is odd, add 1 to the result\n        # 3. If the frequency is even, add it to the result\n        # 4. Return the result\n        \n        freq = {}\n        for c in s:\n            if c in freq:\n                freq[c] += 1\n            else:\n                freq[c] = 1\n        \n        result = 0\n        for c in freq:\n            if freq[c] % 2 == 0:\n                result += freq[c]\n            else:\n                result += freq[c] - 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        i = inorder.index(root.val)\n        root.right = self.buildTree(inorder[i+1:], postorder[i: -1])\n        root.left = self.buildTree(inorder[:i], postorder[:i])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\""}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            res.insert(0, [node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        \n        return res"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        a = b = 1\n        for i in range(1, len(s)):\n            c = a\n            if s[i] == '0':\n                if s[i - 1] == '1' or s[i - 1] == '2':\n                    c = b\n                else:\n                    return 0\n            if s[i - 1] == '1' or (s[i - 1] == '2' and s[i] in '12'):\n                c += a\n            a = b\n            b = c\n        return c"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        return [i ^ i >> 1 for i in range(2 ** n)]"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n + 1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if dp[i] and s[i:j] in wordDict:\n                    dp[j] = True\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBST(root, min_val = -float('inf'), max_val = float('inf')):\n            if not root:\n                return True\n            if root.val <= min_val or root.val >= max_val:\n                return False\n            return isValidBST(root.left, min_val, root.val) and isValidBST(root.right, root.val, max_val)\n        \n        return isValidBST(root)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals if necessary).\n        # Return intervals after the insertion.\n        \n        # Insert newInterval into intervals such that intervals is still sorted in ascending order by starti and intervals still does not have any overlapping intervals (merge overlapping intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # Since the number of pigs is the number of buckets minus 1, we can use this to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs.\n        # We can use the formula n = (minutesToTest / minutesToDie) + 1 to determine the number of pigs."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # DP solution\n        # Time complexity: O(m*n)\n        # Space complexity: O(m*n)\n        if m == 0 or n == 0:\n            return 0\n        \n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                if i > 0:\n                    dp[i][j] += dp[i - 1][j]\n                if j > 0:\n                    dp[i][j] += dp[i][j - 1]\n        \n        return dp[m - 1][n - 1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                res[i + j + 1] += res[i + j] // 10\n                res[i + j] = res[i + j] % 10\n        \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n        \n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time\n        \n        # 1. 2 transactions\n        # 2. 1 transaction\n        # 3. no transaction\n        # 4. buy and sell at the same time"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def backtrack(start, target, comb):\n            if target == 0:\n                res.append(comb[:])\n                return\n            for i in range(start, len(candidates)):\n                if i > start and candidates[i] == candidates[i-1]:\n                    continue\n                if candidates[i] > target:\n                    break\n                comb.append(candidates[i])\n                backtrack(i + 1, target - candidates[i], comb)\n                comb.pop()\n        backtrack(0, target, [])\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper() and word[1:].islower():\n            return True\n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr or stack:\n            while curr:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            result.append(curr.val)\n            curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if len(lists) > 1 else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        if l1:\n            curr.next = l1\n        if l2:\n            curr.next = l2\n        \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [n] * (n + 1)\n        dp[0] = -1\n        for i in range(n):\n            for j in range(i + 1):\n                if s[j:i + 1] == s[j:i + 1][::-1]:\n                    dp[i + 1] = min(dp[i + 1], dp[j] + 1)\n        return dp[n]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def f(x):\n            return x / 5 + x / 25 + x / 125 + x / 625 + x / 3125\n        \n        l, r = 0, 10 ** 9\n        while l < r:\n            m = (l + r) / 2\n            if f(m) < k:\n                l = m + 1\n            else:\n                r = m\n        return l"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        ans = []\n        for i in range(len(words)):\n            for j in range(len(words)):\n                if i != j and isPalindrome(words[i] + words[j]):\n                    ans.append([i, j])\n        return ans"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\""}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        ans = 0\n        \n        def dfs(i, j):\n            if not dp[i][j]:\n                val = matrix[i][j]\n                for x, y in ((i, j - 1), (i, j + 1), (i - 1, j), (i + 1, j)):\n                    if 0 <= x < m and 0 <= y < n and matrix[x][y] > val:\n                        dp[i][j] = max(dp[i][j], dfs(x, y))\n                dp[i][j] += 1\n            return dp[i][j]\n        \n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, dfs(i, j))\n        \n        return ans"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 0:\n            return 0\n        if n < 10:\n            return 1\n        if n < 100:\n            return 10\n        if n < 1000:\n            return 100\n        if n < 10000:\n            return 1000\n        if n < 100000:\n            return 10000\n        if n < 1000000:\n            return 100000\n        if n < 10000000:\n            return 1000000\n        if n < 100000000:\n            return 10000000\n        if n < 1000000000:\n            return 100000000\n        if n < 10000000000:\n            return 1000000000\n        if n < 100000000000:\n            return 10000000000\n        if n < 1000000000000:\n            return 100000000000\n        if n < 10000000000000:\n            return 1000000000000\n        if n < 100000000000000:\n            return 10000000000000\n        if n < 1000000000000000:\n            return 100000000000000\n        if n < 10000000000000000:\n            return 1000000000000000\n        if n < 100000000000000000:\n            return 10000000000000000\n        if n < 1000000000000000000:\n            return 100000000000000000\n        if n < 10000000000000000000:\n            return 1000000000000000000\n        if n < 100000000000000000000:\n            return 10000000000000000000\n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        if n < 100000000000000000000000000:\n            return 10000000000000000000000000\n        if n < 10000000000000000000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1, len(s) + 1):\n                if dp[i] and s[i:j] in wordDict:\n                    dp[j] = True\n        \n        if not dp[-1]:\n            return []\n        \n        ans = []\n        self.dfs(s, 0, [], ans, wordDict, dp)\n        return ans\n    \n    def dfs(self, s, start, path, ans, wordDict, dp):\n        if start == len(s):\n            ans.append(' '.join(path))\n            return\n        \n        for i in range(start + 1, len(s) + 1):\n            if dp[i] and s[start:i] in wordDict:\n                self.dfs(s, i, path + [s[start:i]], ans, wordDict, dp)"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level = level[::-1]\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def bin_to_time(bin_str):\n            hour = int(bin_str[:4], 2)\n            minute = int(bin_str[4:], 2)\n            return str(hour) + ':' + str(minute) if hour < 12 and minute < 60 else ''\n        \n        def bin_to_bits(n):\n            return bin(n)[2:].zfill(4)\n        \n        def get_bits(n):\n            return [bin_to_bits(n), bin_to_bits(n & (n - 1))]\n        \n        def get_times(bits):\n            times = []\n            for i in range(2 ** len(bits)):\n                time = bin_to_time(bits[0] + bits[1][:len(bits[0]) - bin(i).count('1')])\n                if time:\n                    times.append(time)\n            return times\n        \n        return [time for bits in get_times(get_bits(turnedOn)) for time in get_times(bits)]"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1, 1]]\n        \n        res = [[1], [1, 1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i - 1][j - 1] + res[i - 1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and 1162261467 % n == 0"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def dfs(node):\n            if not node:\n                return 0\n            \n            left = dfs(node.left)\n            right = dfs(node.right)\n            \n            self.max_sum = max(self.max_sum, left + node.val + right)\n            \n            return max(node.val + max(left, right), 0)\n        \n        dfs(root)\n        \n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\""}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = ''.join(c for c in s if c.isalnum())\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        n = len(nums)\n        if k == 1:\n            return [float(x) for x in nums]\n        \n        ans = []\n        window = sorted(nums[:k])\n        ans.append(float(window[len(window) // 2]))\n        for i in range(k, n):\n            window.remove(nums[i - k])\n            window.append(nums[i])\n            ans.append(float(window[len(window) // 2]))\n        return ans"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next or k == 0:\n            return head\n        \n        length = 0\n        cur = head\n        while cur:\n            length += 1\n            cur = cur.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        cur = head\n        for _ in range(length - k - 1):\n            cur = cur.next\n        \n        new_head = cur.next\n        cur.next = None\n        \n        cur = new_head\n        while cur.next:\n            cur = cur.next\n        \n        cur.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend == 2147483647 and divisor == -1:\n            return -2147483647\n        \n        if dividend == 2147483647 and divisor == -2147483648:\n            return 1\n        \n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        \n        if dividend == 2147483647 and divisor == -2147483647:\n            return 1\n        \n        if dividend == 2147483647 and divisor == 2147483648:\n            return 2147483647\n        \n        if dividend == 2147483648 and divisor == 2147483647:\n            return 1\n        \n        if dividend == 2147483648 and divisor == -2147483647:\n            return -2147483647\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return 1\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 1\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return -2147483648\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 1\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return -2147483648\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 1\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return -2147483648\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 1\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return -2147483648\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 1\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return -2147483648\n        \n        if dividend == 2147483648 and divisor == 2147483648:\n            return 1\n        \n        if dividend == 2147483648 and divisor == -2147483648:\n            return -2147483648\n        \n        if dividend == 2147"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i, j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board) - 1 or j == 0 or j == len(board[0]) - 1:\n                    dfs(i, j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            new_cards = cards[:i] + [a + b] + cards[i + 1:j] + cards[j + 1:]\n                        elif op == '-':\n                            new_cards = cards[:i] + [a - b] + cards[i + 1:j] + cards[j + 1:]\n                        elif op == '*':\n                            new_cards = cards[:i] + [a * b] + cards[i + 1:j] + cards[j + 1:]\n                        else:\n                            new_cards = cards[:i] + [float(a) / b] + cards[i + 1:j] + cards[j + 1:]\n                        if dfs(new_cards, 24):\n                            return True\n            return False\n        \n        return dfs(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        s_len = len(s)\n        p_len = len(p)\n        \n        dp = [[False for _ in range(p_len + 1)] for _ in range(s_len + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, p_len + 1):\n            if p[i - 1] == '*':\n                dp[0][i] = dp[0][i - 1]\n        \n        for i in range(1, s_len + 1):\n            for j in range(1, p_len + 1):\n                if p[j - 1] == '*':\n                    dp[i][j] = dp[i][j - 1] or dp[i - 1][j]\n                else:\n                    dp[i][j] = (s[i - 1] == p[j - 1] or p[j - 1] == '?') and dp[i - 1][j - 1]\n        \n        return dp[s_len][p_len]"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return max(set(nums), key = nums.count)"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = collections.defaultdict(list)\n        for fromi, toi in tickets:\n            graph[fromi].append(toi)\n        \n        # Sort the graph by the key\n        for fromi in graph:\n            graph[fromi].sort(reverse=True)\n        \n        # DFS\n        res = []\n        def dfs(fromi):\n            # If there is no more edges, add the current node to the result\n            if len(graph[fromi]) == 0:\n                res.append(fromi)\n                return\n            # Otherwise, visit all the edges\n            for i in range(len(graph[fromi]) - 1, -1, -1):\n                toi = graph[fromi][i]\n                graph[fromi].pop(i)\n                dfs(toi)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i - 1]:\n                continue\n            for j in range(i + 1, n):\n                if j > i + 1 and nums[j] == nums[j - 1]:\n                    continue\n                l = j + 1\n                r = n - 1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l - 1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r + 1]:\n                            r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        \n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_words = {\n            1: \"One\",\n            2: \"Two\",\n            3: \"Three\",\n            4: \"Four\",\n            5: \"Five\",\n            6: \"Six\",\n            7: \"Seven\",\n            8: \"Eight\",\n            9: \"Nine\",\n            10: \"Ten\",\n            11: \"Eleven\",\n            12: \"Twelve\",\n            13: \"Thirteen\",\n            14: \"Fourteen\",\n            15: \"Fifteen\",\n            16: \"Sixteen\",\n            17: \"Seventeen\",\n            18: \"Eighteen\",\n            19: \"Nineteen\",\n            20: \"Twenty\",\n            30: \"Thirty\",\n            40: \"Forty\",\n            50: \"Fifty\",\n            60: \"Sixty\",\n            70: \"Seventy\",\n            80: \"Eighty\",\n            90: \"Ninety\",\n        }\n        \n        def convert_to_words(num):\n            if num < 20:\n                return num_words[num]\n            else:\n                return num_words[num // 10 * 10] + \" \" + num_words[num % 10]\n        \n        def convert_to_words_hundreds(num):\n            if num < 100:\n                return convert_to_words(num)\n            else:\n                return num_words[num // 100] + \" Hundred \" + convert_to_words(num % 100)\n        \n        def convert_to_words_thousands(num):\n            if num < 1000:\n                return convert_to_words_hundreds(num)\n            else:\n                return convert_to_words(num // 1000) + \" Thousand \" + convert_to_words_hundreds(num % 1000)\n        \n        return convert_to_words_thousands(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10 ** 9 + 7\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % mod\n                if j >= i:\n                    dp[i][j] = (dp[i][j] - dp[i - 1][j - i] + mod) % mod\n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            a = cur.next\n            b = a.next\n            c = b.next\n            \n            cur.next = b\n            b.next = a\n            a.next = c\n            \n            cur = a\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        left = ListNode(0)\n        right = ListNode(0)\n        l = left\n        r = right\n        while head:\n            if head.val < x:\n                l.next = head\n                l = l.next\n            else:\n                r.next = head\n                r = r.next\n            head = head.next\n        r.next = None\n        l.next = right.next\n        return left.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(edges)\n        parent = [i for i in range(n + 1)]\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(x, y):\n            px, py = find(x), find(y)\n            if px != py:\n                parent[px] = py\n        \n        for u, v in edges:\n            if find(u) == find(v):\n                return [u, v]\n            else:\n                union(u, v)\n        \n        for u, v in edges:\n            if find(u) == find(v):\n                continue\n            else:\n                return [u, v]\n        \n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, res, path):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i - 1]:\n                    continue\n                backtrack(nums[:i] + nums[i + 1:], res, path + [nums[i]])\n        \n        nums.sort()\n        res = []\n        backtrack(nums, res, [])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(map(int, str(num)))\n        return num"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return 2 * sum(set(nums)) - sum(nums)"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.strip().split(' ')[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        a = 0\n        l = 0\n        p = 0\n        for i in range(n):\n            a, l, p = (a + l + p) % mod, a, l\n            a = (a + p) % mod\n            l = (l + p) % mod\n            p = (p + p) % mod\n        return (a + l + p) % mod"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(nums)\n        last_pos = n - 1\n        \n        for i in range(n - 2, -1, -1):\n            if i + nums[i] >= last_pos:\n                last_pos = i\n        \n        return last_pos == 0"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] = grid[i][j - 1] + grid[i][j]\n                elif j == 0:\n                    grid[i][j] = grid[i - 1][j] + grid[i][j]\n                else:\n                    grid[i][j] = min(grid[i - 1][j], grid[i][j - 1]) + grid[i][j]\n        \n        return grid[m - 1][n - 1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        res = \"1\"\n        for i in range(1, n):\n            res = self.countAndSay(res)\n        \n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the largest sum of the subarray\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest sum is equal to the target, return the largest sum\n        # if the largest sum is less than the target, increase the largest sum\n        # if the largest sum is greater than the target, decrease the largest sum\n        # if the largest"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return m\n            if nums[m] < nums[r]:\n                if nums[m] < target and target <= nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n            else:\n                if nums[l] <= target and target < nums[m]:\n                    r = m - 1\n                else:\n                    l = m + 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        def backtrack(digits, index, path, result):\n            if len(path) == len(digits):\n                result.append(''.join(path))\n                return\n            \n            for i in range(index, len(digits)):\n                letter = digit_to_letters[digits[i]]\n                for j in range(len(letter)):\n                    path.append(letter[j])\n                    backtrack(digits, i + 1, path, result)\n                    path.pop()\n        \n        result = []\n        backtrack(digits, 0, [], result)\n        return result"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def dfs(target, start, path):\n            if target == 0:\n                res.append(path)\n                return\n            for i in range(start, len(candidates)):\n                if target < candidates[i]:\n                    break\n                dfs(target - candidates[i], i, path + [candidates[i]])\n        dfs(target, 0, [])\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\""}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        i = 0\n        j = 0\n        k = 1\n        while k <= n * n:\n            matrix[i][j] = k\n            k += 1\n            if i + 1 < n and matrix[i + 1][j] == 0:\n                i += 1\n            else:\n                j += 1\n                if j + 1 < n and matrix[i][j + 1] == 0:\n                    j += 1\n                else:\n                    i += 1\n                    if i + 1 < n and matrix[i + 1][j] == 0:\n                        i += 1\n                    else:\n                        j += 1\n                        if j + 1 < n and matrix[i][j + 1] == 0:\n                            j += 1\n                        else:\n                            i += 1\n                            if i + 1 < n and matrix[i + 1][j] == 0:\n                                i += 1\n                            else:\n                                j += 1\n                                if j + 1 < n and matrix[i][j + 1] == 0:\n                                    j += 1\n                                else:\n                                    i += 1\n                                    if i + 1 < n and matrix[i + 1][j] == 0:\n                                        i += 1\n                                    else:\n                                        j += 1\n                                        if j + 1 < n and matrix[i][j + 1] == 0:\n                                            j += 1\n                                        else:\n                                            i += 1\n                                            if i + 1 < n and matrix[i + 1][j] == 0:\n                                                i += 1\n                                            else:\n                                                j += 1\n                                                if j + 1 < n and matrix[i][j + 1] == 0:\n                                                    j += 1\n                                                else:\n                                                    i += 1\n                                                    if i + 1 < n and matrix[i + 1][j] == 0:\n                                                        i += 1\n                                                    else:\n                                                        j += 1\n                                                        if j + 1 < n and matrix[i][j + 1] == 0:\n                                                            j += 1\n                                                        else:\n                                                            i += 1\n                                                            if i + 1 < n and matrix[i + 1][j] == 0:\n                                                                i += 1\n                                                            else:\n                                                                j += 1\n                                                                if j + 1 < n and matrix[i][j + 1] == 0:\n                                                                    j += 1\n                                                                else:\n                                                                    i += 1\n                                                                    if i + 1 < n and matrix[i + 1][j] == 0:\n                                                                        i += 1\n                                                                    else:\n                                                                        j += 1\n                                                                        if j + 1 < n and matrix[i][j + 1] == 0:\n                                                                            j += 1\n                                                                        else:\n                                                                            i += 1\n                                                                            if i + 1 < n and matrix[i + 1][j] == 0:\n                                                                                i += 1\n                                                                            else:\n                                                                                j += 1\n                                                                                if j + 1 < n and matrix[i][j + 1] == 0:\n                                                                                    j += 1\n                                                                                else:\n                                                                                    i += 1\n                                                                                    if i + 1 < n and matrix[i + 1][j] == 0:\n                                                                                        i += 1\n                                                                                    else:\n                                                                                        j += 1\n                                                                                        if j + 1 < n and matrix[i][j + 1] == 0:\n                                                                                            j += 1\n                                                                                        else:\n                                                                                            i += 1\n                                                                                            if i + 1 < n and matrix[i + 1][j] == 0:\n                                                                                                i += 1\n                                                                                            else:\n                                                                                                j += 1\n                                                                                                if j + 1 < n and matrix[i][j + 1] == 0:\n                                                                                                    j += 1\n                                                                                                else:\n                                                                                                    i += 1\n                                                                                                    if i + 1 < n and matrix[i + 1][j] == 0:\n                                                                                                        i += 1\n                                                                                                    else:\n                                                                                                        j += 1\n                                                                                                        if j + 1 < n and matrix[i][j + 1] == 0:\n                                                                                                            j += 1\n                                                                                                        else:\n                                                                                                            i += 1\n                                                                                                            if i + 1 < n and matrix[i + 1][j] == 0:\n                                                                                                                i += 1\n                                                                                                            else:\n                                                                                                                j += 1\n                                                                                                                if j + 1 < n and matrix[i][j + 1] == 0:\n                                                                                                                    j += 1\n                                                                                                                else:\n                                                                                                                    i += 1\n                                                                                                                    if i + 1 < n and matrix[i"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        else:\n            return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], curr_max * nums[i], min_prod * nums[i])\n            min_prod = min(nums[i], curr_max * nums[i], min_prod * nums[i])\n            result = max(result, max_prod)\n            \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(stones)\n        if n == 1:\n            return True\n        if stones[1] != 1:\n            return False\n        d = {stones[0]: set([1])}\n        for i in range(1, n):\n            if stones[i] in d:\n                d[stones[i]] = d[stones[i]] | set([stones[i] + x for x in d[stones[i]]])\n                d[stones[i] + x] = d[stones[i] + x] | set([stones[i] + x for x in d[stones[i]]])\n                if stones[i] + x in d:\n                    d[stones[i] + x] = d[stones[i] + x] | set([stones[i] + x for x in d[stones[i]]])\n                if stones[i] + x + 1 in d:\n                    d[stones[i] + x + 1] = d[stones[i] + x + 1] | set([stones[i] + x + 1 for x in d[stones[i]]])\n                if stones[i] + x - 1 in d:\n                    d[stones[i] + x - 1] = d[stones[i] + x - 1] | set([stones[i] + x - 1 for x in d[stones[i]]])\n            else:\n                d[stones[i]] = set([stones[i] + x for x in d[stones[i]]])\n                if stones[i] + x in d:\n                    d[stones[i] + x] = d[stones[i] + x] | set([stones[i] + x for x in d[stones[i]]])\n                if stones[i] + x + 1 in d:\n                    d[stones[i] + x + 1] = d[stones[i] + x + 1] | set([stones[i] + x + 1 for x in d[stones[i]]])\n                if stones[i] + x - 1 in d:\n                    d[stones[i] + x - 1] = d[stones[i] + x - 1] | set([stones[i] + x - 1 for x in d[stones[i]]])\n        return len(d[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the scores in descending order\n        scores = sorted(score, reverse=True)\n        \n        # map the scores to their ranks\n        ranks = {score: i + 1 for i, score in en enumerate(scores)}\n        \n        # map the ranks to their corresponding ranks\n        return [ranks[score] if rank == 1 else str(rank) for rank, score in enumerate(score, 1)]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        cur_len = 0\n        char_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in char_map:\n                cur_len = i - char_map[s[i]]\n            else:\n                cur_len += 1\n            max_len = max(max_len, cur_len)\n            char_map[s[i]] = i\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        n, m = len(s), len(words)\n        if m * len(words[0]) > n:\n            return []\n        \n        w = len(words[0])\n        ws = {}\n        for w in words:\n            ws[w] = ws.get(w, 0) + 1\n        \n        ans = []\n        for i in range(w):\n            l, r = i, i\n            cnt = ws.copy()\n            while r + w <= n:\n                w = s[r:r + w]\n                if w in cnt:\n                    cnt[w] -= 1\n                    if cnt[w] == 0:\n                        del cnt[w]\n                    if not cnt:\n                        ans.append(l)\n                r += w\n        return ans"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_chunks = 0\n        for i, v in enumerate(arr):\n            max_chunks = max(max_chunks, v)\n            if i == max_chunks:\n                max_chunks += 1\n        return max_chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                prev = dummy\n                while prev.next.val < cur.next.val:\n                    prev = prev.next\n                temp = cur.next\n                cur.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return []\n            if not root.left and not root.right:\n                return [path + str(root.val)]\n            return dfs(root.left, path + str(root.val) + '->') + dfs(root.right, path + str(root.val) + '->')\n        \n        return dfs(root, '')"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid\n            count = 0\n            while i < mid and j < right:\n                if nums[i] > 2 * nums[j]:\n                    count += mid - i\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right] = sorted(nums[left:right])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right - 1:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums))"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(i) for i in version1.split('.')]\n        v2 = [int(i) for i in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = v1[i] * 10 ** (len(v1) - i - 1)\n            if i < len(v2):\n                v2[i] = v2[i] * 10 ** (len(v2) - i - 1)\n        \n        if v1 < v2:\n            return -1\n        elif v1 > v2:\n            return 1\n        else:\n            return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        q = []\n        t = 0\n        for d, e in courses:\n            t += d\n            heapq.heappush(q, -d)\n            if t > e:\n                t += heapq.heappop(q)\n        return len(q)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k < 2:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, cur.next)\n                cur = prev.next\n            else:\n                cur = cur.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, cur):\n        cur_prev = cur\n        while cur:\n            next_node = cur.next\n            cur.next = prev.next\n            prev.next = cur\n            cur = next_node\n        return cur_prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in (s + s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        return 2 * sum(set(nums)) - sum(nums)"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                dp[i][j] = dp[i][j - 1]\n                for k in range(i, j):\n                    if s[k] == s[j]:\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j - 1])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid ** 2 <= x < (mid + 1) ** 2:\n                return mid\n            elif mid ** 2 > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_map = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman_map[s[i]] < roman_map[s[i + 1]]:\n                result += roman_map[s[i + 1]] - roman_map[s[i]]\n                i += 2\n            else:\n                result += roman_map[s[i]]\n                i += 1\n        \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) < len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        queue = []\n        res = []\n        for i in range(len(nums)):\n            while queue and queue[-1] < i - k + 1:\n                queue.pop()\n            while queue and nums[queue[-1]] < nums[i]:\n                queue.pop()\n            queue.append(i)\n            if i >= k - 1:\n                res.append(nums[queue[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2\n        else:\n            return nums1[len(nums1) // 2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] < nums[right]:\n                right = mid\n            else:\n                left = mid + 1\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex + 1):\n            row = [1] + [row[j] + row[j + 1] for j in range(len(row) - 1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, target, path):\n            if not root:\n                return []\n            path.append(root.val)\n            if root.left is None and root.right is None and target == root.val:\n                return [path]\n            return dfs(root.left, target - root.val, path) + dfs(root.right, target - root.val, path)\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(int(area**0.5), 0, -1):\n            if area % i == 0:\n                return [area // i, i]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            left = isBalanced(root.left)\n            right = isBalanced(root.right)\n            if not left or not right:\n                return False\n            if abs(left - right) > 1:\n                return False\n            return max(left, right) + 1\n        \n        return isBalanced(root)"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and not (n & (n - 1))"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [r + [nums[i]] for r in res]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(heights)\n        left = [0] * n\n        right = [0] * n\n        stack = []\n        for i in range(n):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                left[i] = 0\n            else:\n                left[i] = stack[-1] + 1\n            stack.append(i)\n        stack = []\n        for i in range(n - 1, -1, -1):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                right[i] = n - 1\n            else:\n                right[i] = stack[-1] - 1\n            stack.append(i)\n        ans = 0\n        for i in range(n):\n            ans = max(ans, (right[i] - left[i] + 1) * heights[i])\n        return ans"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(i))\n            else:\n                a = stack.pop()\n                b = stack.pop()\n                if i == \"+\":\n                    stack.append(a + b)\n                elif i == \"-\":\n                    stack.append(b - a)\n                elif i == \"*\":\n                    stack.append(a * b)\n                else:\n                    stack.append(int(float(b) / a))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min = float('inf'), float('inf')\n        x_max, y_max = float('-inf'), float('-inf')\n        area = 0\n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min = min(x_min, x1), min(y_min, y1)\n            x_max, y_max = max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_max, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = ''\n        while columnNumber:\n            columnNumber, rem = divmod(columnNumber - 1, 26)\n            ans = chr(65 + rem) + ans\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\""}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            s_char = s[i]\n            t_char = t[i]\n            \n            if s_char in s_to_t and s_to_t[s_char] != t_char:\n                return False\n            \n            if t_char in t_to_s and t_to_s[t_char] != s_char:\n                return False\n            \n            s_to_t[s_char] = t_char\n            t_to_s[t_char] = s_char\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            if nums[m] < nums[r]:\n                if nums[m] < target <= nums[r]:\n                    l = m + 1\n                else:\n                    r = m - 1\n            else:\n                if nums[l] <= target < nums[m]:\n                    r = m - 1\n                else:\n                    l = m + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m - 1][n - 1] == 1:\n            return 0\n        \n        if m == 1 and n == 1:\n            return 1\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i == 0 and j == 0:\n                        dp[i][j] = 1\n                    elif i == 0:\n                        dp[i][j] = dp[i][j - 1]\n                    elif j == 0:\n                        dp[i][j] = dp[i - 1][j]\n                    else:\n                        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        \n        return dp[m - 1][n - 1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        a = b = 1\n        for i in range(1, len(s)):\n            c = a\n            if s[i] == '0':\n                if s[i - 1] == '1' or s[i - 1] == '2':\n                    a = b\n                else:\n                    return 0\n            elif s[i - 1] == '1' or (s[i - 1] == '2' and s[i] in '0123'):\n                a += b\n            b = c\n        \n        return a"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums) - 2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i, j = 0, 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            inorder(root.left, min_diff, prev)\n            min_diff = min(min_diff, root.val - prev)\n            prev = root.val\n            inorder(root.right, min_diff, prev)\n            \n        min_diff = float('inf')\n        prev = -float('inf')\n        inorder(root, min_diff, prev)\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Completion\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        count = {}\n        max_count = 0\n        res = []\n        def dfs(node):\n            if not node:\n                return\n            count[node.val] = count.get(node.val, 0) + 1\n            max_count = max(max_count, count[node.val])\n            dfs(node.left)\n            dfs(node.right)\n        dfs(root)\n        for k, v in count.items():\n            if v == max_count:\n                res.append(k)\n        return res"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u957f\u5ea6\n        n = len(password)\n        if n < 6:\n            return max(0, 6 - n)\n        if n > 20:\n            return max(0, 20 - n)\n        \n        # 2. \u5305\u542b\n        lower = upper = digit = 0\n        for c in password:\n            if c.islower():\n                lower = 1\n            elif c.isupper():\n                upper = 1\n            elif c.isdigit():\n                digit = 1\n        if lower and upper and digit:\n            return 0\n        \n        # 3. \u91cd\u590d\n        repeat = 0\n        for i in range(2, n):\n            if password[i] == password[i - 1] == password[i - 2]:\n                repeat = 1\n                break\n        return max(0, 3 - repeat)"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n > 0:\n            count += n // 5\n            n //= 5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        i = 0\n        down = True\n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        ans = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                left_max = max(left_max, height[left])\n                ans += left_max - height[left]\n                left += 1\n            else:\n                right_max = max(right_max, height[right])\n                ans += right_max - height[right]\n                right -= 1\n        \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] = -nums[index]\n        \n        return [i + 1 for i in range(n) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\""}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\""}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0 and n & 0x55555555 != 0"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(n, left, right, res):\n            if left == n and right == n:\n                res.append(''.join(s))\n                return\n            if left < n:\n                s.append('(')\n                generate(n, left + 1, right, res)\n                s.pop()\n            if right < left:\n                s.append(')')\n                generate(n, left, right + 1, res)\n                s.pop()\n        \n        res = []\n        s = []\n        generate(n, 0, 0, res)\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Approach: Dynamic Programming\n        # We can use a stack to keep track of the indices of the valid parentheses.\n        # If we see a '(', we push the index to the stack.\n        # If we see a ')', we pop the stack and update the longest valid parentheses if the stack is empty or the current index is the top of the stack.\n        # We can also keep track of the longest valid parentheses so far.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track of the number of unmatched '(' and ')' in the string.\n        # We can also keep track"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if denominator == 0:\n            return \"NaN\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        \n        if numerator < 0:\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        if numerator % denominator == 0:\n            return sign + str(numerator // denominator)\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        remainder = numerator % denominator\n        numerator //= denominator\n        \n        ans = sign + str(numerator) + \".\"\n        \n        seen = {}\n        \n        while remainder != 0:\n            if remainder in seen:\n                ans = ans[:seen[remainder]] + \"(\" + ans[seen[remainder]:] + \")\"\n                break\n            seen[remainder] = len(ans)\n            remainder *= 10\n            numerator = remainder\n            ans += str(numerator // denominator)\n            remainder = numerator % denominator\n        \n        return ans"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        cur = dummy\n        while left and right:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        if left:\n            cur.next = left\n        if right:\n            cur.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for i in envelopes:\n            if not dp or i[1] > dp[-1]:\n                dp.append(i[1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < i[1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = i[1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        row_zero = False\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    matrix[0][j] = 0\n                    if i > 0:\n                        matrix[i][0] = 0\n                    else:\n                        row_zero = True\n        \n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[0][j] == 0 or matrix[i][0] == 0:\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            for i in range(rows):\n                matrix[i][0] = 0\n        \n        if row_zero:\n            for i in range(rows):\n                matrix[i][0] = 0\n\n# Complete python3 code to solve the following coding problem:\nGiven a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.\n\nExample 1:\n\nInput: \"babad\"\nOutput: \"bab\"\nNote: \"aba\" is also a valid answer."}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0, head)\n        left = dummy\n        right = head\n        \n        while n > 0 and right:\n            right = right.next\n            n -= 1\n        \n        while right:\n            left = left.next\n            right = right.next\n        \n        left.next = left.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 0:\n            return 0\n        total = sum(machines)\n        if total % n != 0:\n            return -1\n        avg = total // n\n        ans = 0\n        cur = 0\n        for i in machines:\n            cur += i - avg\n            ans = max(ans, abs(cur))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\""}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        max_area = 0\n        heights = [0] * cols\n        \n        for row in range(rows):\n            for col in range(cols):\n                if matrix[row][col] == '1':\n                    heights[col] += 1\n                else:\n                    heights[col] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        i = 0\n        \n        while i < len(heights):\n            if not stack or heights[i] > heights[stack[-1]]:\n                stack.append(i)\n                i += 1\n            else:\n                top = stack.pop()\n                max_area = max(max_area, heights[top] * (i if not stack else i - stack[-1] - 1))\n        \n        while stack:\n            top = stack.pop()\n            max_area = max(max_area, heights[top] * (i if not stack else i - stack[-1] - 1))\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] < nums[r]:\n                r = m\n            elif nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r -= 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n        result = ''\n        for i in roman.keys():\n            while num >= i:\n                result += roman[i]\n                num -= i\n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        return chr(sum(map(ord, s)) - sum(map(ord, t)))"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def solve(board):\n            # Find an empty cell\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for k in range(1, 10):\n                            if is_valid(board, i, j, str(k)):\n                                board[i][j] = str(k)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n\n        def is_valid(board, i, j, k):\n            # Check row\n            for l in range(9):\n                if l != j and board[i][l] == k:\n                    return False\n\n            # Check column\n            for l in range(9):\n                if l != i and board[l][j] == k:\n                    return False\n\n            # Check 3x3 box\n            box_i = i // 3\n            box_j = j // 3\n            for l in range(3):\n                for m in range(3):\n                    if (l + box_i) != i and (m + box_j) != j and board[l + box_i * 3][m + box_j * 3] == k:\n                        return False\n\n            return True\n\n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are swapped\n        # Swap the values of the two nodes\n        # Recursively traverse the left subtree\n        # Recursively traverse the right subtree\n        \n        # Inorder traversal\n        # Find the two nodes that are"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = self.reverseList(slow)\n        fast = head\n        \n        while slow:\n            if slow.val != fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        \n        return True\n        \n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        i = 1\n        while i * i < num:\n            i += 1\n        return i * i == num"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0]\n        for i in range(1, n + 1):\n            ans.append(ans[i & (i - 1)] + 1)\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        cur = head\n        while cur.next:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        return self.isScramble(s1[:len(s1)//2], s2[:len(s1)//2]) and self.isScramble(s1[len(s1)//2:], s2[len(s1)//2:]) or self.isScramble(s1[:len(s1)//2], s2[len(s1)//2:]) and self.isScramble(s1[len(s1)//2:], s2[:len(s1)//2])"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        return sorted(s) == sorted(t)"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    box_idx = (i // 3) * 3 + j // 3\n                    if num in rows[i] or num in cols[j] or num in boxes[box_idx]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    boxes[box_idx].add(num)\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        return \" \".join(s.split()[::-1])"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res = res * 26 + (ord(columnTitle[i]) - ord('A') + 1)\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        second = self.reverse(second)\n        \n        first = head\n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n    \n    def reverse(self, head):\n        prev = None\n        while head:\n            temp = head.next\n            head.next = prev\n            prev = head\n            head = temp\n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i, j in zip(pattern, s):\n            if i in d:\n                if d[i] != j:\n                    return False\n            else:\n                if j in d.values():\n                    return False\n                d[i] = j\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, res, path):\n            if len(nums) == 0:\n                res.append(path)\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], res, path + [nums[i]])\n        \n        res = []\n        backtrack(nums, res, [])\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        l = 0\n        r = m * n - 1\n        \n        while l <= r:\n            mid = (l + r) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 or l2 or carry:\n            val1 = l1.val if l1 else 0\n            val2 = l2.val if l2 else 0\n            \n            sum_ = val1 + val2 + carry\n            carry = sum_ // 10\n            curr.next = ListNode(sum_ % 10)\n            curr = curr.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n            \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        # 2. Reverse the binary\n        binary = binary[::-1]\n        \n        # 3. Convert the binary to decimal\n        decimal = int(binary, 2)\n        \n        # 4. Return the complement\n        return decimal"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\""}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        maxArea = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            maxArea = max(area, maxArea)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return maxArea"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row, col\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row, col\n            while i < n and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i += 1\n                j -= 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    count += backtrack(board, row + 1)\n                    board[row][col] = '.'\n            return count\n        \n        board = [['.' for _ in range(n)] for _ in range(n)]\n        return backtrack(board, 0)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row, col\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row, col\n            while i < len(board) and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i += 1\n                j -= 1\n            return True\n        \n        def dfs(board, row):\n            if row == len(board):\n                return True\n            for col in range(len(board)):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    if dfs(board, row + 1):\n                        return True\n                    board[row][col] = '.'\n            return False\n        \n        board = [['.' for _ in range(n)] for _ in range(n)]\n        dfs(board, 0)\n        return [[''.join(row) for row in board] for board in board]"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, k, board):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i + 1, j, k + 1, board) or dfs(i - 1, j, k + 1, board) or dfs(i, j + 1, k + 1, board) or dfs(i, j - 1, k + 1, board)\n            board[i][j] = word[k]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0, board):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        \n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            return sorted(nums)[-3]"}]}