{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n                    \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Mark all negative numbers, 0s, and numbers larger than the length of the array as invalid\n        # 2. Iterate through the array and mark the numbers as visited\n        # 3. Iterate through the array again and return the first number that is not visited\n        \n        n = len(nums)\n        \n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(n):\n            if nums[i] > 0:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        res = \"\"\n        nums = [i for i in range(1, n+1)]\n        for i in range(n-1, -1, -1):\n            fact //= i\n            idx = k // fact\n            res += str(nums[idx])\n            nums.pop(idx)\n            k %= fact\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Two pointers\n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n            elif numbers[left] + numbers[right] > target:\n                right -= 1\n            else:\n                left += 1"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            \n            for j in range(i, len(num)):\n                if j > i and num[i] == '0':\n                    break\n                curr_num = int(num[i:j+1])\n                if op == None:\n                    backtrack(j+1, curr_num, curr_num, res, num[i])\n                else:\n                    backtrack(j+1, curr + curr_num, curr_num, res, op + '+' + num[i])\n                    backtrack(j+1, curr - curr_num, -curr_num, res, op + '-' + num[i])\n                    backtrack(j+1, curr - prev + prev * curr_num, prev * curr_num, res, op + '*' + num[i])\n        \n        res = []\n        backtrack(0, 0, 0, res, None)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            left_sum = dfs(root.left, curr_sum * 10 + root.val)\n            right_sum = dfs(root.right, curr_sum * 10 + root.val)\n            \n            return left_sum + right_sum\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        else:\n            return '-'.join(s[i:i+k] for i in range(0, n, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n                \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '.')\n        \n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i, n in en.umerate(nums):\n                while out and out[-1] < n and len(out) + len(nums) - i > k:\n                    out.pop()\n                if len(out) < k:\n                    out.append(n)\n            return out\n        \n        m, n = len(nums1), len(nums2)\n        if m + n < k:\n            return []\n        if m < k:\n            return nums2[:k]\n        if n < k:\n            return nums1[:k]\n        \n        return max(pick(nums1, k) + pick(nums2, k - len(nums1)), pick(nums2, k) + pick(nums1, k - len(nums2)))"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if i * i != num:\n                    sum += i + num / i\n                else:\n                    sum += i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left, right = 0, nums[-1] - nums[0]\n        \n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(n):\n                while j < n and nums[j] - nums[i] <= mid:\n                    j += 1\n                count += j - i - 1\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n                \n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left, right = 0, len(s_list) - 1\n        \n        while left < right:\n            while left < right and s_list[left] not in vowels:\n                left += 1\n            while left < right and s_list[right] not in vowels:\n                right -= 1\n            s_list[left], s_list[right] = s_list[right], s_list[left]\n            left += 1\n            right -= 1\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_length = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                current_num = num\n                current_length = 1\n                \n                while current_num + 1 in nums_set:\n                    current_num += 1\n                    current_length += 1\n                    \n                max_length = max(max_length, current_length)\n                \n        return max_length"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 11:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 12:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 13:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 14:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 15:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 16:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 17:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 18:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 19:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 20:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 21:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 22:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 23:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 24:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 25:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 26:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 27:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        \n        while queue:\n            word, length = queue.popleft()\n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z') + 1):\n                    new_word = word[:i] + chr(j) + word[i+1:]\n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        res = \"\"\n        for i in range(len(a)-1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if i < len(b):\n                if b[i] == '1':\n                    carry += 1\n            if carry == 2:\n                res = '1' + res\n                carry = 1\n            else:\n                res = str(carry % 2) + res\n                carry = 0\n        if carry == 1:\n            res = '1' + res\n        return res"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1, -1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left = left + 1\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = 0\n        \n        for i in range(n):\n            if i > cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i+1] - prices[i], 0) for i in range(len(prices) - 1))\n        \n        buy = [float('inf')] * (k + 1)\n        sell = [0] * (k + 1)\n        \n        for price in prices:\n            for i in range(1, k + 1):\n                buy[i] = min(buy[i], price - sell[i - 1])\n                sell[i] = max(sell[i], price - buy[i])\n        \n        return sell[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 2 ** 32 + num\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_list = []\n        \n        while num > 0:\n            hex_list.append(num % 16)\n            num = num // 16\n        \n        hex_list.reverse()\n        \n        for i in range(len(hex_list)):\n            if hex_list[i] >= 10:\n                hex_list[i] = hex_dict[hex_list[i]]\n        \n        return ''.join(map(str, hex_list))"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and update the hashmap\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hashmap, add it to the list\n        # if the character is in the hashmap, update its frequency to -1\n        # if the character is not in the hash"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff == 0:\n            return False\n        \n        if valueDiff == 0:\n            return False\n        \n        if indexDiff == 1:\n            return True\n        \n        if valueDiff == 1:\n            return False\n        \n        if indexDiff == 2:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        return True\n            return False\n        \n        if indexDiff == 3:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 4:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 5:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 6:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 7:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 8:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 9:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 10:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 11:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff:\n                        if abs(i - j) <= indexDiff:\n                            return True\n            return False\n        \n        if indexDiff == 12:\n            for i in range(len(nums) - 1):\n                for j in range(i + 1, len(nums)):\n                    if abs(nums[i] - nums[j]) <= valueDiff"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                curr = int(num1[i]) + int(num2[i]) + carry\n            else:\n                curr = int(num1[i]) + carry\n            \n            carry = curr // 10\n            res.append(str(curr % 10))\n        \n        if carry:\n            res.append(str(carry))\n        \n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = 1\n            elif s[i] == '-':\n                num = num * sign\n                stack.append(num)\n                num = 0\n                sign = -1\n            elif s[i] == '(':\n                stack.append(num)\n                stack.append(sign)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num = num * stack.pop() + stack.pop()\n            else:\n                num = num * 10 + int(s[i])\n        return num + num * sign"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        sorted_capital = sorted(zip(capital, profits))\n        \n        # heap for profits\n        heap = []\n        \n        # iterate over sorted capital\n        for c, p in sorted_capital:\n            # add profits to heap\n            if c <= w:\n                heapq.heappush(heap, -p)\n            # if we have enough capital, pop the top of the heap\n            else:\n                break\n            \n            # if we have enough projects, pop the top of the heap\n            if len(heap) == k:\n                w += -heapq.heappop(heap)\n        \n        # return the final capital\n        return w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            elif i == ')' and stack and stack[-1] == '(':\n                stack.pop()\n            elif i == '}' and stack and stack[-1] == '{':\n                stack.pop()\n            elif i == ']' and stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return False\n        return True if not stack else False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        # find the first number that is bigger than the number to its right\n        # swap the two numbers\n        # reverse the numbers to the right of the number\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # find the first number that is bigger than the number to its right\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers to the right of the number\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) == 2:\n            return nums[0] == nums[1]\n        \n        if len(nums) == 3:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[0] == nums[2]\n        \n        if len(nums) == 4:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[0] == nums[3]\n        \n        if len(nums) == 5:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[0] == nums[4]\n        \n        if len(nums) == 6:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[0] == nums[5]\n        \n        if len(nums) == 7:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[0] == nums[6]\n        \n        if len(nums) == 8:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[0] == nums[7]\n        \n        if len(nums) == 9:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[0] == nums[8]\n        \n        if len(nums) == 10:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[0] == nums[9]\n        \n        if len(nums) == 11:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5] or nums[5] == nums[6] or nums[6] == nums[7] or nums[7] == nums[8] or nums[8] == nums[9] or nums[9] == nums[10] or nums[0] == nums[10]\n        \n        if len(nums) == 12:\n            return nums[0] == nums[1] or nums[1] == nums[2] or nums[2] == nums[3] or nums[3] == nums[4] or nums[4] == nums[5"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 0:\n            return 0\n        \n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        \n        res = 0\n        for i in range(0, n, 2):\n            if couples[i][0] / 2 != couples[i][1] / 2:\n                res += 1\n                couples[i], couples[i+1] = couples[i+1], couples[i]\n        \n        return res"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        firstRow = set(\"qwertyuiop\")\n        secondRow = set(\"asdfghjkl\")\n        thirdRow = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0] in firstRow:\n                row = firstRow\n            elif word[0] in secondRow:\n                row = secondRow\n            else:\n                row = thirdRow\n            \n            for letter in word:\n                if letter not in row:\n                    break\n            else:\n                res.append(word)\n                \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        for i in range(left - 1):\n            prev = curr\n            curr = curr.next\n        \n        prev.next = None\n        \n        tail = curr\n        \n        for i in range(right - left):\n            next = curr.next\n            curr.next = next.next\n            next.next = prev.next\n            prev.next = next\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome will be the same as the string\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is not a palindrome, then the longest palindrome will be the reverse of the string\n        # with the first character removed\n        # if the string is a pal"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        t_dict = {}\n        for c in t:\n            if c not in t_dict:\n                t_dict[c] = 1\n            else:\n                t_dict[c] += 1\n        \n        s_dict = {}\n        for c in s:\n            if c not in s_dict:\n                s_dict[c] = 1\n            else:\n                s_dict[c] += 1\n        \n        if t_dict == s_dict:\n            return s\n        \n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s_dict[s[right]] > t_dict[s[right]]:\n                    s_dict[s[right]] -= 1\n                else:\n                    s_dict[s[right]] -= 1\n                    left += 1\n            right += 1\n        \n        while left < len(s):\n            if right - left < min_len:\n                min_len = right - left\n                min_left = left\n                min_right = right\n            if s[left] in t_dict:\n                if s_dict[s[left]] < t_dict[s[left]]:\n                    s_dict[s[left]] += 1\n                else:\n                    left += 1\n            else:\n                left += 1\n        \n        return s[min_left:min_right]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i] == distance[i - 3] and distance[i - 1] == distance[i - 4]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 6 and distance[i] + distance[i - 5] >= distance[i - 2] and distance[i - 2] == distance[i - 4] and distance[i - 1] == distance[i - 3]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        \n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # iterate through the hashmap and add the max of the odd values to the result\n        # if the hashmap has an odd value, add 1 to the result\n        # return the result\n        \n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        result = 0\n        for key in hashmap:\n            if hashmap[key] % 2 == 0:\n                result += hashmap[key]\n            else:\n                result += hashmap[key] - 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        index = inorder.index(root.val)\n        \n        root.left = self.buildTree(inorder[:index], postorder[:index])\n        root.right = self.buildTree(inorder[index+1:], postorder[index:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        \n        # sort the trees by height\n        trees.sort()\n        \n        # start from the top left corner\n        steps = 0\n        curr_pos = (0, 0)\n        for tree, i, j in trees:\n            steps += self.bfs(forest, curr_pos, (i, j))\n            if steps == -1:\n                return -1\n            curr_pos = (i, j)\n        \n        return steps\n    \n    def bfs(self, forest, start, end):\n        # BFS to find the shortest path from start to end\n        visited = set()\n        queue = collections.deque([(start, 0)])\n        while queue:\n            curr_pos, steps = queue.popleft()\n            if curr_pos == end:\n                return steps\n            for dir in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                new_pos = (curr_pos[0] + dir[0], curr_pos[1] + dir[1])\n                if new_pos in visited or new_pos[0] < 0 or new_pos[0] >= len(forest) or new_pos[1] < 0 or new_pos[1] >= len(forest[0]) or forest[new_pos[0]][new_pos[1]] == 0:\n                    continue\n                visited.add(new_pos)\n                queue.append((new_pos, steps + 1))"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. use hashmap to store the count of range sum\n        # 5. return the count\n        \n        # 1. calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. use two pointers to find the range sum\n        count = 0\n        for i in range(n):\n            left = bisect_left(prefix_sum, lower + prefix_sum[i])\n            right = bisect_right(prefix_sum, upper + prefix_sum[i])\n            count += right - left\n        \n        return count"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2*n + 0.25)**0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        \n        return result"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        \n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0,1]\n        for i in range(1,n):\n            res.append(res[i] + (1 << i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of s\n        # and check if any of them is in wordDict\n        # if yes, return True\n        # if no, return False\n        \n        # create a list of all the possible substrings of"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if (left and node.val <= left.val) or (right and node.val >= right.val):\n                return False\n            \n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [newInterval] + intervals[1:]\n        \n        if newInterval[0] >= intervals[0][0] and newInterval[1]"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    backtrack(s, i+1, path + [s[start:i+1]], res)\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of all the numbers in the list\n        # 2. create a min heap with the min number in each list\n        # 3. create a max heap with the max number in each list\n        # 4. while the max heap has more than 1 element, compare the max number in the max heap with the min number in the min heap\n        # 5. if the max number is greater than the min number, update the min number in the min heap\n        # 6. if the max number is less than the min number, update the max number in the max heap\n        # 7. return the range\n        \n        min_num = float('inf')\n        max_num = float('-inf')\n        min_heap = []\n        max_heap = []\n        for i in range(len(nums)):\n            heapq.heappush(min_heap, (nums[i][0], i, 0))\n            heapq.heappush(max_heap, (-nums[i][0], i, 0))\n            min_num = min(min_num, nums[i][0])\n            max_num = max(max_num, nums[i][0])\n        \n        while max_heap[0][1] < len(nums):\n            curr_min = min_heap[0][0]\n            curr_max = -max_heap[0][0]\n            if curr_max - curr_min < max_num - min_num:\n                min_num = curr_min\n                max_num = curr_max\n            if len(nums[max_heap[0][1]]) > max_heap[0][2] + 1:\n                heapq.heappush(max_heap, (-nums[max_heap[0][1]][max_heap[0][2] + 1], max_heap[0][1], max_heap[0][2] + 1))\n                max_num = -max_heap[0][0]\n            else:\n                heapq.heappop(max_heap)\n        \n        return [min_num, max_num]"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 pig can test 1 bucket\n        # 2. 1 pig can test 2 buckets\n        # 3. 1 pig can test 4 buckets\n        # 4. 1 pig can test 8 buckets\n        # 5. 1 pig can test 16 buckets\n        # 6. 1 pig can test 32 buckets\n        # 7. 1 pig can test 64 buckets\n        # 8. 1 pig can test 128 buckets\n        # 9. 1 pig can test 256 buckets\n        # 10. 1 pig can test 512 buckets\n        # 11. 1 pig can test 1024 buckets\n        # 12. 1 pig can test 2048 buckets\n        # 13. 1 pig can test 4096 buckets\n        # 14. 1 pig can test 8192 buckets\n        # 15. 1 pig can test 16384 buckets\n        # 16. 1 pig can test 32768 buckets\n        # 17. 1 pig can test 65536 buckets\n        # 18. 1 pig can test 131072 buckets\n        # 19. 1 pig can test 262144 buckets\n        # 20. 1 pig can test 524288 buckets\n        # 21. 1 pig can test 1048576 buckets\n        # 22. 1 pig can test 2097152 buckets\n        # 23. 1 pig can test 4194304 buckets\n        # 24. 1 pig can test 8388608 buckets\n        # 25. 1 pig can test 16777216 buckets\n        # 26. 1 pig can test 33554432 buckets\n        # 27. 1 pig can test 67108864 buckets\n        # 28. 1 pig can test 134217728 buckets\n        # 29. 1 pig can test 268435456 buckets\n        # 30. 1 pig can test 536870912 buckets\n        # 31. 1 pig can test 1073741824 buckets\n        # 32. 1 pig can test 2147483648 buckets\n        # 33. 1 pig can test 4294967296 buckets\n        # 34. 1 pig can test 8589934592 buckets\n        # 35. 1 pig can test 17179869184 buckets\n        # 36. 1 pig can test 34359738368 buckets\n        # 37. 1 pig can test 68719476736 buckets\n        # 38. 1 pig can test 137438953472 buckets\n        # 39. 1 pig can test 274877906944 buckets\n        # 40. 1 pig can test 549755813888 buckets\n        # 41. 1 pig can test 1099511627776 buckets\n        # 42. 1 pig can test 2199023255552 buckets\n        # 43. 1 pig can test 4398046511104 buckets\n        # 44. 1 pig can test 8796093022208 buckets\n        # 45. 1 pig can test 17592186044416 buckets\n        # 46. 1 pig can test 35184372088832 buckets\n        # 47. 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        ans = 0\n        \n        while heap:\n            time, i, j = heapq.heappop(heap)\n            ans = max(ans, time)\n            if i == j == n - 1:\n                return ans\n            for ni, nj in [(i, j + 1), (i + 1, j), (i, j - 1), (i - 1, j)]:\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                    heapq.heappush(heap, (grid[ni][nj], ni, nj))\n                    visited.add((ni, nj))"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        \n        # dp = [[0] * n for _ in range(m)]\n        # dp[0][0] = 1\n        # for i in range(m):\n        #     for j in range(n):\n        #         if i == 0 and j == 0:\n        #             continue\n        #         if i == 0:\n        #             dp[i][j] = dp[i][j - 1]\n        #         elif j == 0:\n        #             dp[i][j] = dp[i - 1][j]\n        #         else:\n        #             dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        \n        # dp = [[0] * n for _ in range(m)]\n        # dp[0][0] = 1\n        # for i in range(m):\n        #     for j in range(n):\n        #         if i == 0 and j == 0:\n        #             continue\n        #         if i == 0:\n        #             dp[i][j] = dp[i][j - 1]\n        #         elif j == 0:\n        #             dp[i][j] = dp[i - 1][j]\n        #         else:\n        #             dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        \n        # dp = [[0] * n for _ in range(m)]\n        # dp[0][0] = 1\n        # for i in range(m):\n        #     for j in range(n):\n        #         if i == 0 and j == 0:\n        #             continue\n        #         if i == 0:\n        #             dp[i][j] = dp[i][j - 1]\n        #         elif j == 0:\n        #             dp[i][j] = dp[i - 1][j]\n        #         else:\n        #             dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        \n        # dp = [[0] * n for _ in range(m)]\n        # dp[0][0] = 1\n        # for i in range(m):\n        #     for j in range(n):\n        #         if i == 0 and j == 0:\n        #             continue\n        #         if i == 0:\n        #             dp["}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] %= 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return ''.join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Find the max profit from left to right\n        ## 2. Find the max profit from right to left\n        ## 3. Return the max of the two\n        \n        ## 1. Find the max profit from left to right\n        max_profit = 0\n        min_price = prices[0]\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper() and word[1:].islower():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n                \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        \n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the first and last index of the invalid parentheses\n        # if the first index is -1, then the string is valid\n        # if the last index is -1, then the string is invalid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater than the last index, then the string is invalid\n        # if the first index is equal to the last index, then the string is valid\n        # if the first index is less than the last index, then the string is valid\n        # if the first index is greater"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode()\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        if l1:\n            tail.next = l1\n        if l2:\n            tail.next = l2\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1."}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a hashmap to store the reverse of each word\n        # and the index of the word\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # create a list to store the result\n        result = []\n        \n        # iterate over each word\n        for i, word in enumerate(words):\n            # if the word is a palindrome\n            if word in word_map:\n                # if the word is the same as the reverse of itself\n                if i == word_map[word]:\n                    # skip the case where the word is the same as the reverse of itself\n                    continue\n                # add the pair to the result\n                result.append([i, word_map[word]])\n            # if the word is not a palindrome\n            else:\n                # iterate over each character of the word\n                for j in range(len(word) + 1):\n                    # if the left part of the word is a palindrome\n                    if word[:j] in word_map:\n                        # if the right part of the word is a palindrome\n                        if word[j:] in word_map:\n                            # add the pair to the result\n                            result.append([word_map[word[:j]], i])\n                            result.append([i, word_map[word[:j]]])\n        # return the result\n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(nums) == 0:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def spread(isInfected, row, col):\n            if isInfected[row][col] == 1:\n                return 0\n            isInfected[row][col] = 1\n            return 1 + spread(isInfected, row + 1, col) + spread(isInfected, row - 1, col) + spread(isInfected, row, col + 1) + spread(isInfected, row, col - 1)\n        \n        m, n = len(isInfected), len(isInfected[0])\n        total_walls = 0\n        while True:\n            infected_cells = 0\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected_cells = max(infected_cells, spread(isInfected, i, j))\n            if infected_cells == 0:\n                break\n            total_walls += infected_cells\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        isInfected[i][j] = 0\n            for i in range(m - 1, -1, -1):\n                for j in range(n - 1, -1, -1):\n                    if isInfected[i][j] == 1:\n                        isInfected[i][j] = 0\n                        if i < m - 1 and isInfected[i + 1][j] == 0:\n                            isInfected[i + 1][j] = 1\n                        if j < n - 1 and isInfected[i][j + 1] == 0:\n                            isInfected[i][j + 1] = 1\n                        if i > 0 and isInfected[i - 1][j] == 0:\n                            isInfected[i - 1][j] = 1\n                        if j > 0 and isInfected[i][j - 1] == 0:\n                            isInfected[i][j - 1] = 1\n        return total_walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        max_len = 1\n        \n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        \n        if n < 10:\n            return 1\n        \n        if n < 100:\n            return 10\n        \n        if n < 1000:\n            return 100\n        \n        if n < 10000:\n            return 1000\n        \n        if n < 100000:\n            return 10000\n        \n        if n < 1000000:\n            return 100000\n        \n        if n < 10000000:\n            return 1000000\n        \n        if n < 100000000:\n            return 10000000\n        \n        if n < 1000000000:\n            return 100000000\n        \n        if n < 10000000000:\n            return 1000000000\n        \n        if n < 100000000000:\n            return 10000000000\n        \n        if n < 1000000000000:\n            return 100000000000\n        \n        if n < 10000000000000:\n            return 1000000000000\n        \n        if n < 100000000000000:\n            return 10000000000000\n        \n        if n < 1000000000000000:\n            return 100000000000000\n        \n        if n < 10000000000000000:\n            return 1000000000000000\n        \n        if n < 100000000000000000:\n            return 10000000000000000\n        \n        if n < 1000000000000000000:\n            return 100000000000000000\n        \n        if n < 10000000000000000000:\n            return 1000000000000000000\n        \n        if n < 100000000000000000000:\n            return 10000000000000000000\n        \n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        \n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        \n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        \n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        \n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        \n        if n < 100000000000000000000000000:\n            return"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a list of all the words in the dictionary\n        word_set = set(wordDict)\n        \n        # create a list of all the words in the string\n        word_list = s.split(' ')\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_dict = [word for word in word_list if word in word_set]\n        \n        # create a list of all the words in the string that are in the dictionary\n        word_list_in_"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_length = len(queue)\n            level_result = []\n            \n            for i in range(level_length):\n                node = queue.pop(0)\n                level_result.append(node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                    \n            if level % 2 == 1:\n                level_result.reverse()\n                \n            result.append(level_result)\n            level += 1\n            \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(n):\n            if n == 0:\n                return []\n            if n == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            if n == 2:\n                return ['0:03','0:05','0:06','0:09','0:15','0:30','0:60','1:01','2:01','4:01','8:01']\n            if n == 3:\n                return ['0:04','0:07','0:08','0:11','0:17','0:34','0:68','1:02','2:02','4:02','8:02']\n            if n == 4:\n                return ['0:05','0:09','0:17','0:33','0:65','0:12','0:18','0:35','0:69','1:03','2:03','4:03','8:03']\n            if n == 5:\n                return ['0:06','0:10','0:18','0:34','0:66','0:13','0:19','0:36','0:70','1:04','2:04','4:04','8:04']\n            if n == 6:\n                return ['0:07','0:11','0:19','0:35','0:67','0:13','0:20','0:37','0:71','1:05','2:05','4:05','8:05']\n            if n == 7:\n                return ['0:08','0:12','0:20','0:36','0:68','0:14','0:21','0:38','0:72','1:06','2:06','4:06','8:06']\n            if n == 8:\n                return ['0:09','0:13','0:21','0:37','0:69','0:15','0:22','0:39','0:73','1:07','2:07','4:07','8:07']\n            if n == 9:\n                return ['0:10','0:14','0:22','0:38','0:70','0:16','0:23','0:40','0:74','1:08','2:08','4:08','8:08']\n            if n == 10:\n                return ['0:11','0:15','0:23','0:41','0:75','0:17','0:24','0:42','0:76','1:09','2:09','4:09','8:09']\n            if n == 11:\n                return ['0:12','0:16','0:24','0:43','0:77','0:18','0:25','0:44','0:78','1:10','2:10','4:10','8:10']\n            if n == 12:\n                return ['0:13','0:17','0:25','0:45','0:79','0:19','0:26','0:46','0:80','1:11','2:11','4:11','8:11']\n            if n == 13:\n                return ['0:14','0:18','0:26','0:47','0:81','0:20','0:27','0:48','0:82','1:12','2:12','4:12','8:12']\n            if n == 14:\n                return ['0:15','0:19','0:27','0:49','0:83','0:21','0"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if (i, j) not in seen:\n                seen.add((i, j))\n                if j > 0 and (i, j-1) not in seen:\n                    heapq.heappush(heap, (max(h, heightMap[i][j-1]), i, j-1))\n                if j < n-1 and (i, j+1) not in seen:\n                    heapq.heappush(heap, (max(h, heightMap[i][j+1]), i, j+1))\n                if i > 0 and (i-1, j) not in seen:\n                    heapq.heappush(heap, (max(h, heightMap[i-1][j]), i-1, j))\n                if i < m-1 and (i+1, j) not in seen:\n                    heapq.heappush(heap, (max(h, heightMap[i+1][j]), i+1, j))\n                ans += max(0, h-heightMap[i][j])\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # O(n) time, O(n) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top of the heap\n        # If the size of the heap is even, the median is the mean of the top two elements\n        # If the size of the heap is 1, the median is the only element\n        # If the size of the heap is 0, the median is None\n        \n        # O(nlogk) time, O(k) space\n        # Use a min heap to keep track of the median\n        # If the size of the heap is odd, the median is the top"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                res = max(res, self.maxSubarray(sums, k))\n                if res == k:\n                    return k\n        return res\n    \n    def maxSubarray(self, sums, k):\n        s = set()\n        s.add(0)\n        res = float('-inf')\n        curr = 0\n        for i in sums:\n            curr += i\n            res = max(res, curr - k)\n            if res in s:\n                return res\n            s.add(curr)\n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        nums_dict = {}\n        \n        # iterate through the list\n        for i in range(len(nums)):\n            # check if the complement is in the dictionary\n            complement = target - nums[i]\n            if complement in nums_dict:\n                # if it is, return the index of the complement and the index of the current number\n                return [nums_dict[complement], i]\n            # if it is not, add the current number to the dictionary\n            nums_dict[nums[i]] = i\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        return None"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.000001\n            \n            for i in range(len(cards)):\n                for j in range(len(cards)):\n                    if i != j:\n                        a, b = cards[i], cards[j]\n                        for op in ['+', '-', '*', '/']:\n                            if op == '+':\n                                new_a, new_b = a + b, a - b\n                            elif op == '-':\n                                new_a, new_b = a - b, b - a\n                            elif op == '*':\n                                new_a, new_b = a * b, a / b\n                            else:\n                                new_a, new_b = b / a, a / b\n                            if backtrack([new_a, new_b] + cards[0:i] + cards[i+1:], target):\n                                return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if not s:\n            return not p or (p[0] == '*' and self.isMatch(s, p[1:]))\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:]) or self.isMatch(s[1:], p)\n        \n        return (s[0] == p[0] or p[0] == '?') and self.isMatch(s[1:], p[1:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://www.geeksforgeeks.org/majority-element/\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in sorted(tickets):\n            graph[from_city].append(to_city)\n            \n        # dfs\n        res = []\n        def dfs(from_city):\n            # if there is no more city to visit, add to the result\n            if len(graph[from_city]) == 0:\n                res.append(from_city)\n                return\n            # if there is a city to visit, visit it\n            for i in range(len(graph[from_city])):\n                next_city = graph[from_city][i]\n                graph[from_city].pop(i)\n                dfs(next_city)\n                graph[from_city].insert(i, next_city)\n                \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # initialize the current height\n        curr_height = 0\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the building is ending\n            if building[1] < 0:\n                # add the building to the result\n                result.append([building[0], -building[1]])\n            else:\n                # add the building to the result\n                result.append([building[1], building[2]])\n        \n        # sort the result by right edge\n        result.sort(key=lambda x: x[0])\n        \n        # initialize the max height\n        max_height = 0\n        \n        # iterate over the result\n        for i in range(len(result)):\n            # if the current height is greater than the max height\n            if result[i][1] > max_height:\n                # update the max height\n                max_height = result[i][1]\n                # add the current height to the result\n                result.append([result[i][0], max_height])\n        \n        # remove the last element\n        result.pop()\n        \n        # return the result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        \n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-2][j-1]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i] + dp[i-1][j-i-1]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-2] + ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i-1] + dp[i-1][j-i-2] - ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i-1] - dp[i-1][j-i-1] + dp[i-1][j-i-2] - ... + dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] - dp[i-1][j-i] + dp[i-1][j-i] -"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        curr1 = dummy1\n        curr2 = dummy2\n        \n        while head:\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            head = head.next\n        \n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = {}\n        child = {}\n        for edge in edges:\n            if edge[0] in parent:\n                child[edge[0]] = edge[1]\n            else:\n                parent[edge[0]] = edge[1]\n        \n        # find the node with only one parent\n        for edge in edges:\n            if edge[1] not in parent:\n                return edge\n        \n        # find the node with only one child\n        for edge in edges:\n            if edge[0] not in child:\n                return edge\n        \n        # find the node with two children\n        for edge in edges:\n            if edge[1] in child and edge[0] in child:\n                return edge\n        \n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        \n        def backtrack(path):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            \n            for i in range(len(nums)):\n                if visited[i]:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                    continue\n                visited[i] = True\n                path.append(nums[i])\n                backtrack(path)\n                path.pop()\n                visited[i] = False\n                \n        backtrack([])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        ## 2 ^ 2 = 0\n        ## 2 ^ 1 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 = 0\n        ## 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 ^ 1 ^ 2 = 1\n        ## 2 ^ 1 ^"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(n):\n                for j2 in range(n):\n                    p1 = max(j1 - 1, 0)\n                    p2 = min(j1 + 1, n - 1)\n                    p3 = max(j2 - 1, 0)\n                    p4 = min(j2 + 1, n - 1)\n                    if grid[i][j1] == -1 or grid[i][j2] == -1:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2]\n                    elif j1 == j2:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1]\n                    else:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1] + grid[i][j2]\n                    if p1 <= p2 and p3 <= p4:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][p1][p3])\n        return dp[n - 1][n - 1][n - 1]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^9 + 7\n        # 2. 10^9 + 7\n        # 3. 10^9 + 7\n        # 4. 10^9 + 7\n        # 5. 10^9 + 7\n        # 6. 10^9 + 7\n        # 7. 10^9 + 7\n        # 8. 10^9 + 7\n        # 9. 10^9 + 7\n        # 10. 10^9 + 7\n        # 11. 10^9 + 7\n        # 12. 10^9 + 7\n        # 13. 10^9 + 7\n        # 14. 10^9 + 7\n        # 15. 10^9 + 7\n        # 16. 10^9 + 7\n        # 17. 10^9 + 7\n        # 18. 10^9 + 7\n        # 19. 10^9 + 7\n        # 20. 10^9 + 7\n        # 21. 10^9 + 7\n        # 22. 10^9 + 7\n        # 23. 10^9 + 7\n        # 24. 10^9 + 7\n        # 25. 10^9 + 7\n        # 26. 10^9 + 7\n        # 27. 10^9 + 7\n        # 28. 10^9 + 7\n        # 29. 10^9 + 7\n        # 30. 10^9 + 7\n        # 31. 10^9 + 7\n        # 32. 10^9 + 7\n        # 33. 10^9 + 7\n        # 34. 10^9 + 7\n        # 35. 10^9 + 7\n        # 36. 10^9 + 7\n        # 37. 10^9 + 7\n        # 38. 10^9 + 7\n        # 39. 10^9 + 7\n        # 40. 10^9 + 7\n        # 41. 10^9 + 7\n        # 42. 10^9 + 7\n        # 43. 10^9 + 7\n        # 44. 10^9 + 7\n        # 45. 10^9 + 7\n        # 46. 10^9 + 7\n        # 47. 10^9 + 7\n        # 48. 10^9 + 7\n        # 49. 10^9 + 7\n        # 50. 10^9 + 7\n        # 51. 10^9 + 7\n        # 52. 10^9 + 7\n        # 53. 10^9 + 7\n        # 54. 10^9 + 7\n        # 55. 10^9 + 7\n        # 56. 10^9 + 7\n        # 57. 10^9 + 7\n        # 58. 10^9 + 7\n        # 59. 10^9 + 7\n        # 60. 10^9 + 7\n        # 61. 10^9 + 7\n        # 62. 10^9 + 7\n        # 63. 10^9 + 7\n        # 64. 10^9 + 7\n        # 65. 10^9 + 7\n        # 66. 10^9 + 7\n        # 67. 10^9 + 7\n        # 68. 10^9 + 7\n        # 69. 10^9 + 7\n        # 70. 10^9 + 7\n        # 71. 10^9 + 7\n        # 72. 10^9 + 7\n        # 73. 10^9 + 7\n        # 74. 10^9"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum(int(i)**2 for i in str(n))\n        return n == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reach = 0\n        \n        for i, num in enumerate(nums):\n            if i > max_reach:\n                return False\n            max_reach = max(max_reach, i + num)\n            \n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j == 0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                else:\n                    grid[i][j] = min(grid[i][j-1], grid[i-1][j]) + grid[i][j]\n                    \n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        if n == 2:\n            return '11'\n        \n        prev = '11'\n        for i in range(3, n+1):\n            curr = ''\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return curr"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # find the min element in the array\n        # binary search on the range of the max and min element\n        # find the mid element\n        # find the sum of the mid element\n        # find the number of subarrays that have a sum less than or equal to the sum\n        # if the number of subarrays is less than or equal to k, then the sum is too small\n        # if the number of subarrays is greater than k, then the sum is too large\n        # if the number of subarrays is equal to k, then the sum is the answer\n        \n        # find the max element in the array\n        max_element = max(nums)\n        \n        # find the min element in the array\n        min_element = sum(nums)\n        \n        # binary search on the range of the max and min element\n        while min_element < max_element:\n            mid_element = (min_element + max_element) // 2\n            num_subarrays = self.find_num_subarrays(nums, mid_element)\n            \n            if num_subarrays > k:\n                min_element = mid_element + 1\n            else:\n                max_element = mid_element\n        \n        return min_element\n    \n    def find_num_subarrays(self, nums, target):\n        num_subarrays = 1\n        current_sum = 0\n        \n        for num in nums:\n            current_sum += num\n            \n            if current_sum > target:\n                num_subarrays += 1\n                current_sum = num\n        \n        return num_subarrays"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if the target is in the first half of the array, search in the first half\n        if nums[pivot] <= target <= nums[-1]:\n            return self.binary_search(nums, target, 0, pivot)\n        \n        # if the target is in the second half of the array, search in the second half\n        else:\n            return self.binary_search(nums, target, pivot, len(nums) - 1)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\n        \n        def backtrack(combination, next_digits, phone):\n            if len(next_digits) == 0:\n                output.append(combination)\n            else:\n                for letter in phone[next_digits[0]]:\n                    backtrack(combination + letter, next_digits[1:], phone)\n        \n        output = []\n        backtrack(\"\", digits, phone)\n        return output"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '0':\n            return '0'\n        \n        if len(n) == 1:\n            return str(int(n) - 1)\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) - 1)\n        \n        if n[-1] == '0':\n            return str(int(n[:-1]) - 1)\n        \n        if n[-1] == '1':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '2':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '3':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '4':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '5':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '6':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '7':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '8':\n            return str(int(n[:-1]) + 1)\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) + 1)\n        \n        return str(int(n[:-1]) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1 or rev < -2**31:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod * nums[i]\n            curr_min = min_prod * nums[i]\n            \n            max_prod = max(curr_max, curr_min, nums[i])\n            min_prod = min(curr_max, curr_min, nums[i])\n            \n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        stone_set = set(stones)\n        \n        dp = {0: set()}\n        \n        for stone in stones:\n            if stone not in dp:\n                return False\n            \n            for prev_jump in dp[stone]:\n                for jump in [prev_jump - 1, prev_jump, prev_jump + 1]:\n                    if jump > 0 and stone + jump in stone_set:\n                        if jump not in dp:\n                            dp[stone + jump] = set()\n                        dp[stone + jump].add(jump)\n        \n        return len(dp[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the array\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a dictionary\n        score_dict = {}\n        \n        # create a dictionary\n        for i in range(len(score_sorted)):\n            score_dict[score_sorted[i]] = i + 1\n        \n        # create a list\n        result = []\n        \n        # iterate over the array\n        for i in score:\n            # if the value is in the dictionary\n            if i in score_dict:\n                # add the value to the list\n                result.append(str(score_dict[i]))\n            # if the value is not in the dictionary\n            else:\n                # add the value to the list\n                result.append(str(i))\n        \n        # return the list\n        return result"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        curr_len = 0\n        char_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in char_map:\n                curr_len = i - char_map[s[i]]\n            else:\n                curr_len += 1\n            max_len = max(max_len, curr_len)\n            char_map[s[i]] = i\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_dict_len = len(word_dict)\n        word_dict_len_count = len(word_dict)\n        word_dict_len_count_dict = {}\n        for word in word_dict:\n            word_dict_len_count_dict[word] = 0\n        \n        word_dict_len_count_dict[words[0]] += 1\n        \n        start = 0\n        end = word_len\n        result = []\n        while end <= len(s):\n            if word_dict_len_count_dict[words[0]] == word_count:\n                result.append(start)\n            if end == len(s):\n                break\n            if word_dict_len_count_dict[s[start:end]] < word_count:\n                word_dict_len_count_dict[s[start:end]] += 1\n            else:\n                word_dict_len_count_dict[s[start:end]] -= 1\n            start += 1\n            end += 1\n        \n        return result"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = max(arr)\n        max_idx = arr.index(max_val)\n        max_count = 1\n        \n        for i in range(max_idx):\n            if arr[i] > max_val:\n                max_val = arr[i]\n                max_count += 1\n        \n        return max_count"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                curr.next, curr.next.next, prev.next = curr.next.next, curr, prev.next\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n            \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s > 0:\n                    r -= 1\n                elif s < 0:\n                    l += 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    while nums[l] == nums[l-1] and l < r:\n                        l += 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        \n        dp = [[0] * (n+1) for _ in range(m+1)]\n        \n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        \n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = int(v1[i])\n            else:\n                v1.append(0)\n                \n            if i < len(v2):\n                v2[i] = int(v2[i])\n            else:\n                v2.append(0)\n                \n        for i in range(len(v1)):\n            if v1[i] < v2[i]:\n                return -1\n            elif v1[i] > v2[i]:\n                return 1\n                \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Brute force\n        ## Time: O(n^2)\n        ## Space: O(1)\n        ## TLE\n        ## if len(prices) <= 1:\n        ##     return 0\n        ## max_profit = 0\n        ## for i in range(len(prices)):\n        ##     for j in range(i+1, len(prices)):\n        ##         if prices[j] > prices[i]:\n        ##             max_profit = max(max_profit, prices[j] - prices[i])\n        ## return max_profit\n        \n        ## 2. DP\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. Initialize the variables\n        ## 2. Iterate over the array\n        ## 3. If the current price is greater than the previous price, update the max_profit\n        ## 4. If the current price is less than the previous price, update the min_price\n        ## 5. Return the max_profit\n        if len(prices) <= 1:\n            return 0\n        max_profit = 0\n        min_price = prices[0]\n        for i in range(1, len(prices)):\n            if prices[i] > min_price:\n                max_profit = max(max_profit, prices[i] - min_price)\n            else:\n                min_price = prices[i]\n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        for duration, end in courses:\n            # add course to queue\n            heapq.heappush(pq, (-duration, end))\n            \n            # if total time + duration > end date, remove course with longest duration\n            if total + duration > end:\n                total -= heapq.heappop(pq)[0]\n                \n            # update total time\n            total += duration\n            \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        while curr:\n            count = 0\n            while curr and count < k:\n                curr = curr.next\n                count += 1\n            if count == k:\n                prev.next = self.reverse(head, curr)\n                prev = head\n                head = curr\n            else:\n                prev.next = head\n                break\n        return dummy.next\n    \n    def reverse(self, head, tail):\n        prev = None\n        curr = head\n        while curr != tail:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        return curr"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s)//i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4) + dp[i-6] * 2 * (2*i - 11) / (i-5)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4) + dp[i-6] * 2 * (2*i - 11) / (i-5) + dp[i-7] * 2 * (2*i - 13) / (i-6)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) / (i-1) + dp[i-3] * 2 * (2*i - 5) / (i-2) + dp[i-4] * 2 * (2*i - 7) / (i-3) + dp[i-5] * 2 * (2*i - 9) / (i-4) + dp[i-6] * 2 * (2*i - 11) / (i-5) + dp[i-7] * 2 * (2*i - 13) / (i-6) + dp[i-8] * 2 * (2*i - 15) / (i-7)\n        # dp[i] = dp[i-1] * 2 * (2*i - 1) / i + dp[i-2] * 2 * (2*i - 3) /"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR all the numbers again\n        # 3. XOR all the numbers again\n        # 4. XOR all the numbers again\n        # 5. XOR all the numbers again\n        # 6. XOR all the numbers again\n        # 7. XOR all the numbers again\n        # 8. XOR all the numbers again\n        # 9. XOR all the numbers again\n        # 10. XOR all the numbers again\n        # 11. XOR all the numbers again\n        # 12. XOR all the numbers again\n        # 13. XOR all the numbers again\n        # 14. XOR all the numbers again\n        # 15. XOR all the numbers again\n        # 16. XOR all the numbers again\n        # 17. XOR all the numbers again\n        # 18. XOR all the numbers again\n        # 19. XOR all the numbers again\n        # 20. XOR all the numbers again\n        # 21. XOR all the numbers again\n        # 22. XOR all the numbers again\n        # 23. XOR all the numbers again\n        # 24. XOR all the numbers again\n        # 25. XOR all the numbers again\n        # 26. XOR all the numbers again\n        # 27. XOR all the numbers again\n        # 28. XOR all the numbers again\n        # 29. XOR all the numbers again\n        # 30. XOR all the numbers again\n        # 31. XOR all the numbers again\n        # 32. XOR all the numbers again\n        # 33. XOR all the numbers again\n        # 34. XOR all the numbers again\n        # 35. XOR all the numbers again\n        # 36. XOR all the numbers again\n        # 37. XOR all the numbers again\n        # 38. XOR all the numbers again\n        # 39. XOR all the numbers again\n        # 40. XOR all the numbers again\n        # 41. XOR all the numbers again\n        # 42. XOR all the numbers again\n        # 43. XOR all the numbers again\n        # 44. XOR all the numbers again\n        # 45. XOR all the numbers again\n        # 46. XOR all the numbers again\n        # 47. XOR all the numbers again\n        # 48. XOR all the numbers again\n        # 49. XOR all the numbers again\n        # 50. XOR all the numbers again\n        # 51. XOR all the numbers again\n        # 52. XOR all the numbers again\n        # 53. XOR all the numbers again\n        # 54. XOR all the numbers again\n        # 55. XOR all the numbers again\n        # 56. XOR all the numbers again\n        # 57. XOR all the numbers again\n        # 58. XOR all the numbers again\n        # 59. XOR all the numbers again\n        # 60. XOR all the numbers again\n        # 61. XOR all the numbers again\n        # 62. XOR all the numbers again\n        # 63. XOR all the numbers again\n        # 64. XOR all the numbers again\n        # 65. XOR all the numbers again\n        # 66. XOR all the numbers again\n        # 67. XOR all the numbers again\n        # 68. XOR all the numbers again\n        # 69. XOR all the numbers again\n        # 70. XOR all the numbers again\n        # 71. XOR all the numbers again\n        # 72. XOR all the numbers again\n        # 73. XOR all the numbers again\n        # 74. XOR all the numbers again\n        # 75. XOR all the numbers again\n        # 76. XOR all the numbers again\n        # 77. XOR all the numbers again\n        # 78. XOR all the numbers again\n        # 79. XOR all the numbers again\n        # 80. X"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Initialize the dp array with max value of 26\n        dp = [float('inf')] * 26\n        \n        # 2. Initialize the dp array with 0\n        dp[0] = 0\n        \n        # 3. Iterate over the stickers\n        for sticker in stickers:\n            \n            # 4. Initialize the current sticker array\n            curr = [0] * 26\n            \n            # 5. Iterate over the sticker\n            for s in sticker:\n                \n                # 6. Increment the current sticker array\n                curr[ord(s) - ord('a')] += 1\n                \n            # 7. Iterate over the target\n            for i in range(len(target)):\n                \n                # 8. Initialize the current target array\n                curr2 = [0] * 26\n                \n                # 9. Iterate over the target\n                for t in target[i:]:\n                    \n                    # 10. Increment the current target array\n                    curr2[ord(t) - ord('a')] += 1\n                    \n                # 11. Iterate over the current sticker array\n                for j in range(26):\n                    \n                    # 12. If the current sticker array is greater than the current target array\n                    if curr[j] > curr2[j]:\n                        \n                        # 13. Increment the current sticker array\n                        curr[j] -= curr2[j]\n                        \n                        # 14. Increment the current sticker array\n                        curr[j] += curr2[j]\n                        \n                # 15. Update the dp array\n                dp[i] = min(dp[i], curr[ord(target[i]) - ord('a')])\n                \n            # 16. If the current sticker array is greater than the current target array\n            if curr[ord(target[i]) - ord('a')] > 0:\n                \n                # 17. Increment the current sticker array\n                curr[ord(target[i]) - ord('a')] -= 1\n                \n                # 18. Increment the current sticker array\n                curr[ord(target[i]) - ord('a')] += 1\n                \n                # 19. Update the dp array\n                dp[i] = min(dp[i], curr[ord(target[i]) - ord('a')])\n                \n        # 20. If the dp array is infinity\n        if dp[len(target) - 1] == float('inf'):\n            \n            # 21. Return -1\n            return -1\n        \n        # 22. Return the dp array\n        return dp[len(target) - 1]"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1\n                    \n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        \n        for i in range(len(s)):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [nums[0]]\n        \n        if k == 1:\n            return nums\n        \n        max_list = []\n        max_num = max(nums[0:k])\n        max_list.append(max_num)\n        \n        for i in range(k, len(nums)):\n            if nums[i] > max_num:\n                max_num = nums[i]\n            if i >= k:\n                if nums[i-k] == max_num:\n                    max_num = max(nums[i-k+1:i+1])\n                else:\n                    max_num = max(max_num, nums[i-k+1])\n            max_list.append(max_num)\n        \n        return max_list"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # if len(nums1) > len(nums2):\n        #     nums1, nums2 = nums2, nums1\n        \n        # if len(nums1) == 0:\n        #     return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 0:\n        #     return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 1 and len(nums2) == 1:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 1:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 1:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1)//2] + nums2[0]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 2 and len(nums2) == 2:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 2:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 2:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1)//2] + nums2[0]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 3 and len(nums2) == 3:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 3:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 3:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1)//2] + nums2[0]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 4 and len(nums2) == 4:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 4:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 4:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1)//2] + nums2[0]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 5 and len(nums2) == 5:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) =="}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area / 2)\n        # 2. 2 * (area // 2)\n        # 3. 2 * math.sqrt(area)\n        # 4. 2 * math.sqrt(area)\n        # 5. 2 * math.sqrt(area) + 1\n        # 6. 2 * math.sqrt(area) + 1\n        # 7. 2 * math.sqrt(area) + 1\n        # 8. 2 * math.sqrt(area) + 1\n        # 9. 2 * math.sqrt(area) + 1\n        # 10. 2 * math.sqrt(area) + 1\n        # 11. 2 * math.sqrt(area) + 1\n        # 12. 2 * math.sqrt(area) + 1\n        # 13. 2 * math.sqrt(area) + 1\n        # 14. 2 * math.sqrt(area) + 1\n        # 15. 2 * math.sqrt(area) + 1\n        # 16. 2 * math.sqrt(area) + 1\n        # 17. 2 * math.sqrt(area) + 1\n        # 18. 2 * math.sqrt(area) + 1\n        # 19. 2 * math.sqrt(area) + 1\n        # 20. 2 * math.sqrt(area) + 1\n        # 21. 2 * math.sqrt(area) + 1\n        # 22. 2 * math.sqrt(area) + 1\n        # 23. 2 * math.sqrt(area) + 1\n        # 24. 2 * math.sqrt(area) + 1\n        # 25. 2 * math.sqrt(area) + 1\n        # 26. 2 * math.sqrt(area) + 1\n        # 27. 2 * math.sqrt(area) + 1\n        # 28. 2 * math.sqrt(area) + 1\n        # 29. 2 * math.sqrt(area) + 1\n        # 30. 2 * math.sqrt(area) + 1\n        # 31. 2 * math.sqrt(area) + 1\n        # 32. 2 * math.sqrt(area) + 1\n        # 33. 2 * math.sqrt(area) + 1\n        # 34. 2 * math.sqrt(area) + 1\n        # 35. 2 * math.sqrt(area) + 1\n        # 36. 2 * math.sqrt(area) + 1\n        # 37. 2 * math.sqrt(area) + 1\n        # 38. 2 * math.sqrt(area) + 1\n        # 39. 2 * math.sqrt(area) + 1\n        # 40. 2 * math.sqrt(area) + 1\n        # 41. 2 * math.sqrt(area) + 1\n        # 42. 2 * math.sqrt(area) + 1\n        # 43. 2 * math.sqrt(area) + 1\n        # 44. 2 * math.sqrt(area) + 1\n        # 45. 2 * math.sqrt(area) + 1\n        # 46. 2 * math.sqrt(area) + 1\n        # 47. 2 * math.sqrt(area) + 1\n        # 48. 2 * math.sqrt(area) + 1\n        # 49. 2 * math.sqrt(area) + 1\n        # 50. 2 * math.sqrt(area) + 1\n        # 51. 2 * math.sqrt(area) + 1\n        # 52. 2 * math.sqrt(area) + 1\n        # 53. 2 * math.sqrt(area) + 1\n        # 54. 2 * math.sqrt(area) + 1\n        # 55. 2 * math.sqrt(area) + 1\n        # 56. 2 * math.sqrt(area) + 1\n        # 57. 2 * math.sqrt(area) + 1\n        # 58. 2 * math.sqrt(area)"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + '*' + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        while queue:\n            word = queue.popleft()\n            for i in range(len(word)):\n                for j in range(26):\n                    neighbor = word[:i] + chr(ord('a') + j) + word[i+1:]\n                    if neighbor in graph:\n                        if neighbor in visited:\n                            continue\n                        if neighbor == endWord:\n                            return self.build_path(visited, neighbor, beginWord)\n                        visited[neighbor] = visited[word] + 1\n                        queue.append(neighbor)\n        return []\n    \n    def build_path(self, visited, endWord, beginWord):\n        path = [endWord]\n        while endWord in visited:\n            endWord = visited[endWord]\n            path.append(endWord)\n        return path[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]]\n            else:\n                res += [nums[i]]\n                for j in range(len(res)-1, -1, -1):\n                    if j == len(res)-1 or nums[i] != nums[i+1] or nums[i] != res[j][-1]:\n                        res.append(res[j] + [nums[i]])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc5d0 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud558\uba74\uc11c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc624\ub978\ucabd \ubcf4\ub2e4 \ud070 \uac12\uc774 \ub098\uc624\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd \uc778\ub371\uc2a4\uc640 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c \uc778\ub371\uc2a4 \uc0ac\uc774\uc758 \uac12\uc744 \uacf1\ud574\uc900\ub2e4.\n        # 2. \uc624\ub978\ucabd \uc778\ub371\uc2a4\uac00 \ub05d\uae4c\uc9c0 \ub3c4\ub2ec\ud558\uba74 \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c\ub2e4.\n        # 3. \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c \ud6c4 \uc624\ub978\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 4. \uc624\ub978\ucabd \uc778\ub371\uc2a4\uac00 \ub05d\uae4c\uc9c0 \ub3c4\ub2ec\ud558\uba74 \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c \ud6c4 \uc624\ub978\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 6. \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c \ud6c4 \uc624\ub978\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 7. \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c \ud6c4 \uc624\ub978\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c \ud6c4 \uc624\ub978\ucabd \uc778\ub371\uc2a4\ub97c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 9. \uc2a4\ud0dd\uc5d0 \uc81c\uac70\ub41c \uc778\ub371\uc2a4\ub4e4\uc744 \ubaa8"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        \n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n                \n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_min) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n            \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                num = num * 10 + board[i][j]\n        \n        # convert board to a number\n        if num == 123450:\n            return 0\n        \n        # convert board to a number\n        if num == 012345:\n            return 1\n        \n        # convert board to a number\n        if num == 501234:\n            return 2\n        \n        # convert board to a number\n        if num == 540123:\n            return 3\n        \n        # convert board to a number\n        if num == 543012:\n            return 4\n        \n        # convert board to a number\n        if num == 543210:\n            return 5\n        \n        # convert board to a number\n        if num == 543201:\n            return 6\n        \n        # convert board to a number\n        if num == 543021:\n            return 7\n        \n        # convert board to a number\n        if num == 543102:\n            return 8\n        \n        # convert board to a number\n        if num == 543120:\n            return 9\n        \n        # convert board to a number\n        if num == 543210:\n            return 10\n        \n        # convert board to a number\n        if num == 543201:\n            return 11\n        \n        # convert board to a number\n        if num == 543021:\n            return 12\n        \n        # convert board to a number\n        if num == 543102:\n            return 13\n        \n        # convert board to a number\n        if num == 543120:\n            return 14\n        \n        # convert board to a number\n        if num == 543210:\n            return 15\n        \n        # convert board to a number\n        if num == 543201:\n            return 16\n        \n        # convert board to a number\n        if num == 543021:\n            return 17\n        \n        # convert board to a number\n        if num == 543102:\n            return 18\n        \n        # convert board to a number\n        if num == 543120:\n            return 19\n        \n        # convert board to a number\n        if num == 543210:\n            return 20\n        \n        # convert board to a number\n        if num == 543201:\n            return 21\n        \n        # convert board to a number\n        if num == 543021:\n            return 22\n        \n        # convert board to a number\n        if num == 543102:\n            return 23\n        \n        # convert board to a number\n        if num == 543120:\n            return 24\n        \n        # convert board to a number\n        if num == 543210:\n            return 25\n        \n        # convert board to a number\n        if num == 543201:\n            return 26\n        \n        # convert board to a number\n        if num == 543021:\n            return 27\n        \n        # convert board to a number\n        if num == 543102:\n            return 28\n        \n        # convert board to a number\n        if num == 543120:\n            return 29\n        \n        # convert board to a number\n        if num == 543210:\n            return 30\n        \n        # convert board to a number\n        if num == 543201:\n            return 31\n        \n        # convert board to a number\n        if num == 543021:\n            return 32\n        \n        # convert board to a number\n        if num == 543102:\n            return 33\n        \n        # convert board to a number\n        if num == 543120:\n            return 34"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                if t[i] in t_to_s:\n                    return False\n                s_to_t[s[i]] = t[i]\n                t_to_s[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        \n        # if nums is empty, return False\n        if not nums:\n            return False\n        \n        # if nums has only one element, return True if target is equal to that element\n        if len(nums) == 1:\n            return nums[0] == target\n        \n        # find the pivot index\n        pivot = self.find_pivot(nums)\n        \n        # if target is in the first half of the array, search in the first half\n        if nums[pivot] <= target <= nums[-1]:\n            return self.binary_search(nums, target, 0, pivot)\n        \n        # if target is in the second half of the array, search in the second half\n        else:\n            return self.binary_search(nums, target, pivot, len(nums) - 1)\n        \n    def find_pivot(self, nums):\n        # find the pivot index\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(target - sum) < abs(target - closest):\n                    closest = sum\n                    \n                if sum > target:\n                    right -= 1\n                else:\n                    left += 1\n                    \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                inorder(root.left)\n                self.min_diff = min(self.min_diff, root.val - self.prev)\n                self.prev = root.val\n                inorder(root.right)\n                \n        self.min_diff = float('inf')\n        self.prev = -float('inf')\n        inorder(root)\n        return self.min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.max_val = None\n        self.curr_count = 0\n        \n        self.dfs(root)\n        \n        return [self.max_val] if self.max_count == 1 else [self.max_val, self.prev_val]\n        \n    def dfs(self, root):\n        if not root:\n            return\n        \n        if root.val == self.prev_val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n            \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.max_val = root.val\n        elif self.curr_count == self.max_count:\n            self.max_val = min(self.max_val, root.val)\n            \n        self.prev_val = root.val\n        \n        self.dfs(root.left)\n        self.dfs(root.right)"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check length\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        if len(password) > 20:\n            return max(20 - len(password), 3)\n        \n        # 2. check for repeating characters\n        # 2.1 check for 3 repeating characters in a row\n        # 2.2 check for 2 repeating characters in a row\n        # 2.3 check for 1 repeating character in a row\n        # 2.4 check for 0 repeating characters in a row\n        # 2.5 check for 0 repeating characters in a row\n        # 2.6 check for 0 repeating characters in a row\n        # 2.7 check for 0 repeating characters in a row\n        # 2.8 check for 0 repeating characters in a row\n        # 2.9 check for 0 repeating characters in a row\n        # 2.10 check for 0 repeating characters in a row\n        # 2.11 check for 0 repeating characters in a row\n        # 2.12 check for 0 repeating characters in a row\n        # 2.13 check for 0 repeating characters in a row\n        # 2.14 check for 0 repeating characters in a row\n        # 2.15 check for 0 repeating characters in a row\n        # 2.16 check for 0 repeating characters in a row\n        # 2.17 check for 0 repeating characters in a row\n        # 2.18 check for 0 repeating characters in a row\n        # 2.19 check for 0 repeating characters in a row\n        # 2.20 check for 0 repeating characters in a row\n        # 2.21 check for 0 repeating characters in a row\n        # 2.22 check for 0 repeating characters in a row\n        # 2.23 check for 0 repeating characters in a row\n        # 2.24 check for 0 repeating characters in a row\n        # 2.25 check for 0 repeating characters in a row\n        # 2.26 check for 0 repeating characters in a row\n        # 2.27 check for 0 repeating characters in a row\n        # 2.28 check for 0 repeating characters in a row\n        # 2.29 check for 0 repeating characters in a row\n        # 2.30 check for 0 repeating characters in a row\n        # 2.31 check for 0 repeating characters in a row\n        # 2.32 check for 0 repeating characters in a row\n        # 2.33 check for 0 repeating characters in a row\n        # 2.34 check for 0 repeating characters in a row\n        # 2.35 check for 0 repeating characters in a row\n        # 2.36 check for 0 repeating characters in a row\n        # 2.37 check for 0 repeating characters in a row\n        # 2.38 check for 0 repeating characters in a row\n        # 2.39 check for 0 repeating characters in a row\n        # 2.40 check for 0 repeating characters in a row\n        # 2.41 check for 0 repeating characters in a row\n        # 2.42 check for 0 repeating characters in a row\n        # 2.43 check for 0 repeating characters in a row\n        # 2.44 check for 0 repeating characters in a row\n        # 2.45 check for 0 repeating characters in a row\n        # 2.46 check for 0 repeating characters in a row\n        # 2.47 check for 0 repeating characters in a row\n        # 2.48 check for 0 repeating characters in a row\n        # 2.49 check for 0 repeating characters in a row\n        # 2.50 check for 0 repeating characters in a row\n        # 2.51 check for 0 repeating characters in a row\n        # 2.52 check for 0 repeating characters in a row\n        # 2.53 check for 0 repeating characters in a row\n        # 2.54 check for 0 repeating characters in a row\n        # 2.55 check for 0 repeating characters in a row\n        # 2.56 check for 0 repeating characters in a row\n        # 2.57 check for 0"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 25 = 5 * 5\n        # 125 = 5 * 5 * 5\n        # 625 = 5 * 5 * 5 * 5\n        # 3125 = 5 * 5 * 5 * 5 * 5\n        # 15625 = 5 * 5 * 5 * 5 * 5 * 5\n        # 78125 = 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 390625 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 1953125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 9765625 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 48828125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 244140625 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 1220703125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 6103017578125 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 30517578125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 152587890625000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 762939453125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 3814697265625000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 19073486328125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 95367431640625000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 476837158203125000 = 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5\n        # 2384185791015625000 = 5 * 5 * 5 *"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for i in range(numRows)]\n        currRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[currRow] += c\n            if currRow == 0 or currRow == numRows - 1:\n                goingDown = not goingDown\n            currRow += 1 if goingDown else -1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max height\n        max_height = max(height)\n        \n        # 2. find the index of max height\n        max_height_index = height.index(max_height)\n        \n        # 3. find the left and right max height\n        left_max_height = max_height\n        right_max_height = max_height\n        \n        # 4. find the left and right max height index\n        for i in range(max_height_index):\n            if height[i] > left_max_height:\n                left_max_height = height[i]\n            if height[len(height) - i - 1] > right_max_height:\n                right_max_height = height[len(height) - i - 1]\n        \n        # 5. find the water\n        water = 0\n        for i in range(max_height_index):\n            water += min(left_max_height, right_max_height) - height[i]\n        \n        return water"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] = -nums[index]\n        \n        return [i + 1 for i in range(len(nums)) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use binary search to find the index of the number in the sorted array\n        # 3. count the number of numbers smaller than the current number\n        # 4. return the count\n        \n        # 1. sort the array\n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        \n        # 2. use binary search to find the index of the number in the sorted array\n        # 3. count the number of numbers smaller than the current number\n        # 4. return the count\n        count = [0] * len(nums)\n        for i in range(len(nums) - 1, -1, -1):\n            num, idx = nums[i]\n            left, right = 0, i\n            while left < right:\n                mid = (left + right) // 2\n                if nums[mid][0] >= num:\n                    right = mid\n                else:\n                    left = mid + 1\n            count[i] = left\n        \n        return count"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        ans = curr = 2\n        for i in intervals:\n            if i[0] > curr:\n                curr += 2\n            else:\n                curr += 1\n            ans += i[1] - i[0]\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if left is None and right is None:\n                return True\n            if left is None or right is None:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. split the formula into tokens\n        # 2. build a stack of tokens\n        # 3. iterate over the tokens\n        # 4. if token is a number, push it to the stack\n        # 5. if token is an atom, pop the stack and add it to the count\n        # 6. return the count\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i].isdigit():\n                num = 0\n                while i < len(formula) and formula[i].isdigit():\n                    num = num * 10 + int(formula[i])\n                    i += 1\n                stack.append(num)\n            elif formula[i] == '(':\n                stack.append(self.countOfAtoms(formula[i+1:-1]))\n                i += 1\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                if j == i + 1:\n                    stack.append(1)\n                else:\n                    stack.append(int(formula[i+1:j]))\n                i = j\n        count = {}\n        for token in stack:\n            if isinstance(token, int):\n                for k, v in count.items():\n                    count[k] = count[k] + token\n            else:\n                if token not in count:\n                    count[token] = 0\n                count[token] += 1\n        return ''.join([k + (str(v) if v > 1 else '') for k, v in sorted(count.items())])"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # initialize\n        patches = 0\n        i = 0\n        \n        # iterate through nums\n        while i < len(nums):\n            # if nums[i] is greater than n, then we need to add a patch\n            if nums[i] > n:\n                patches += 1\n                n += nums[i]\n            else:\n                # if nums[i] is less than n, then we can add it to n\n                n += nums[i]\n                i += 1\n        \n        # if n is still greater than 0, then we need to add a patch\n        if n > 0:\n            patches += 1\n        \n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        \n        # 2. stack\n        stack = [-1]\n        max_len = 0\n        for i in range(len(s)):\n            if s[i] == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = \"\"\n        if numerator < 0:\n            res += \"-\"\n            numerator = -numerator\n        if denominator < 0:\n            res += \"-\"\n            denominator = -denominator\n        \n        res += str(numerator // denominator) + \".\"\n        numerator %= denominator\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + \"(\" + res[seen[numerator]:] + \")\"\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator %= denominator\n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add any remaining nodes from the left half\n        if left:\n            curr.next = left\n        \n        # add any remaining nodes from the right half\n        if right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        dp = [envelopes[0][1]]\n        \n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = envelopes[i][1]\n        \n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        row_zero = False\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    if i == 0:\n                        row_zero = True\n                    else:\n                        matrix[i][j] = 0\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if row_zero:\n            for j in range(n):\n                matrix[0][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode(0, head)\n        \n        # create a slow and fast pointer\n        slow = dummy\n        fast = head\n        \n        # move fast pointer n steps\n        for i in range(n):\n            fast = fast.next\n        \n        # move both pointers until fast pointer reaches the end\n        while fast:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node\n        slow.next = slow.next.next\n        \n        # return the modified list\n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(1) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums1) & set(nums2))\n        \n        ## O(n) time and O(n) space\n        ## return list(set(nums"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) // len(machines)\n        ans = 0\n        curr = 0\n        \n        for i in machines:\n            curr += i - avg\n            ans = max(ans, abs(curr))\n        \n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(n, x // i)\n            return cnt\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        \n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.next.val)\n        root.right = self.sortedListToBST(slow.next.next)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        heights = [0] * n\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        result = ''\n        \n        for key in roman_dict.keys():\n            while num >= key:\n                result += roman_dict[key]\n                num -= key\n                \n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 1 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 0 = 0\n        # 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i, j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i, j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            \n            if empty is None:\n                return True\n            \n            for i in range(1, 10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        # traverse the tree in inorder fashion\n        # and find the first and second node\n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values of the first and second node\n        first.val, second.val = second.val, first.val\n        \n        return root"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0, 1]\n        \n        if n == 2:\n            return [0, 1, 1]\n        \n        if n == 3:\n            return [0, 1, 1, 2]\n        \n        if n == 4:\n            return [0, 1, 1, 2, 2]\n        \n        if n == 5:\n            return [0, 1, 1, 2, 2, 3]\n        \n        if n == 6:\n            return [0, 1, 1, 2, 2, 3, 3]\n        \n        if n == 7:\n            return [0, 1, 1, 2, 2, 3, 3, 4]\n        \n        if n == 8:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4]\n        \n        if n == 9:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5]\n        \n        if n == 10:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]\n        \n        if n == 11:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]\n        \n        if n == 12:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n        \n        if n == 13:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]\n        \n        if n == 14:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7]\n        \n        if n == 15:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8]\n        \n        if n == 16:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8]\n        \n        if n == 17:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]\n        \n        if n == 18:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9]\n        \n        if n == 19:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]\n        \n        if n == 20:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]\n        \n        if n == 21:\n            return [0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9,"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if head is None:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                if letter not in node:\n                    node[letter] = {}\n                node = node[letter]\n            node['*'] = True\n        \n        def dfs(i, j, node):\n            letter = board[i][j]\n            if letter not in node:\n                return\n            word.append(letter)\n            node = node[letter]\n            if '*' in node:\n                res.append(''.join(word))\n                node.pop('*')\n            board[i][j] = '#'\n            if i > 0:\n                dfs(i - 1, j, node)\n            if i < len(board) - 1:\n                dfs(i + 1, j, node)\n            if j > 0:\n                dfs(i, j - 1, node)\n            if j < len(board[0]) - 1:\n                dfs(i, j + 1, node)\n            word.pop()\n            board[i][j] = letter\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie)\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                box = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 17576\n        # 26^4 = 488384\n        # 26^5 = 14594364\n        # 26^6 = 45296176\n        # 26^7 = 137846528\n        \n        # 26^(n-1) = n\n        # 26^(n-1) * 26^(n-1) = n^2\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) = n^3\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^4\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^5\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^6\n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        \n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        \n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        \n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        \n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        \n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) = n^7\n        \n        # 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^(n-1) * 26^"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverseList(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n    \n    def reverseList(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of the pattern and the length of the words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping between the pattern and the words\n        mapping = {}\n        \n        # iterate over the pattern and the words\n        for i in range(len(pattern)):\n            # if the pattern and the word are not in the mapping, add them to the mapping\n            if pattern[i] not in mapping:\n                if words[i] not in mapping.values():\n                    mapping[pattern[i]] = words[i]\n                else:\n                    return False\n            # if the pattern and the word are in the mapping, check if they are equal\n            else:\n                if mapping[pattern[i]] != words[i]:\n                    return False\n        \n        # if all the words are mapped, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        head = ListNode(0)\n        curr = head\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert to binary\n        # 2. flip bits\n        # 3. convert back to decimal\n        \n        # 1. convert to binary\n        binary = bin(num)[2:]\n        \n        # 2. flip bits\n        flip_binary = \"\"\n        for bit in binary:\n            if bit == \"0\":\n                flip_binary += \"1\"\n            else:\n                flip_binary += \"0\"\n        \n        # 3. convert back to decimal\n        return int(flip_binary, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        cur_len = 0\n        cur_words = []\n        \n        for word in words:\n            if cur_len + len(word) + len(cur_words) > maxWidth:\n                if len(cur_words) == 1:\n                    res.append(cur_words[0] + ' ' * (maxWidth - cur_len))\n                else:\n                    spaces = (maxWidth - cur_len) // (len(cur_words) - 1)\n                    extra = (maxWidth - cur_len) % (len(cur_words) - 1)\n                    res.append(''.join([cur_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '') for i in range(len(cur_words))]))\n                cur_len = 0\n                cur_words = []\n            cur_len += len(word)\n            cur_words.append(word)\n        if cur_len > 0:\n            res.append(' '.join(cur_words) + ' ' * (maxWidth - cur_len - len(cur_words) + 1))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(area, max_area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        res = []\n        \n        for word in words:\n            if self.dfs(word, word_set):\n                res.append(word)\n                \n        return res\n    \n    def dfs(self, word, word_set):\n        for i in range(1, len(word)):\n            prefix = word[:i]\n            suffix = word[i:]\n            \n            if prefix in word_set and (suffix in word_set or self.dfs(suffix, word_set)):\n                return True\n            \n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = abs(num)\n            sign = -1\n        else:\n            sign = 1\n        \n        res = ''\n        \n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res if sign == 1 else '-' + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def backtrack(queens, row, cols, diag1, diag2):\n            if row == n:\n                return [queens]\n            \n            res = []\n            for col in range(n):\n                if col not in cols and row - col not in diag1 and row + col not in diag2:\n                    new_queens = queens[:]\n                    new_queens.append(col)\n                    new_cols = cols[:]\n                    new_cols.add(col)\n                    new_diag1 = diag1[:]\n                    new_diag1.add(row - col)\n                    new_diag2 = diag2[:]\n                    new_diag2.add(row + col)\n                    res.extend(backtrack(new_queens, row + 1, new_cols, new_diag1, new_diag2))\n            return res\n        \n        return backtrack([], 0, set(), set(), set())"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, word, i, j):\n                    return True\n        \n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        temp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = temp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            nums1[:] = nums2[:]\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return nums1\n        if n == 0:\n            return\n        \n        # if nums1 is empty, just return nums2\n        if m == 0:\n            return\n        \n        # if nums2 is empty, just return num"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2:\n                max3 = max2\n                max2 = num\n            elif num > max3:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}]}