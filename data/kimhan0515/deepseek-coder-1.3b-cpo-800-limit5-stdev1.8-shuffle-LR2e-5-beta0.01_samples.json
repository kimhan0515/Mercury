{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            if top > bottom:\n                break\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if right < left:\n                break\n            \n            for i in range(right, left-1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            \n            if bottom < top:\n                break\n            \n            for i in range(bottom, top-1, -1):\n                res.append(matrix[i][left])\n            left += 1\n            \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for num in nums[1:]:\n            if num == end + 1:\n                end = num\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = num\n                end = num\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = number of distinct subsequences of s[:i] that equals t[:i]\n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for c in s:\n            for i in range(len(t), c, -1):\n                dp[i] += dp[i - c]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Mark all negative numbers as 0\n        # 2. Mark all numbers that are in the range [1, n] as 1\n        # 3. Iterate through the array and find the first number that is not 1\n        #    If all numbers are 1, then n + 1 is the first missing positive\n        #    If any number is 0, then 1 is the first missing positive\n        #    If a number is k, then nums[k - 1] is negative, so we can ignore it\n        #    If nums[k - 1] is k, then we need to swap it with nums[k - 1] - 1\n        #    Otherwise, nums[k - 1] is already at the right place\n        # 4. If nums[n - 1] is n, then 1 is the first missing positive\n        #    Otherwise, n + 1 is the first missing positive\n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        for i in range(n):\n            if abs(nums[i]) <= n and nums[abs(nums[i]) - 1] > 0:\n                nums[abs(nums[i]) - 1] *= -1\n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        ans = \"\"\n        nums = [i for i in range(1, n + 1)]\n        for i in range(n - 1, -1, -1):\n            # calculate the number of digits in the current permutation\n            digit = k // fact\n            ans += str(nums[digit])\n            nums.remove(nums[digit])\n            # calculate the next permutation\n            k %= fact\n            fact //= i\n        \n        return ans"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left, right = 0, len(numbers) - 1\n        \n        while left < right:\n            curr_sum = numbers[left] + numbers[right]\n            if curr_sum > target:\n                right -= 1\n            elif curr_sum < target:\n                left += 1\n            else:\n                return [left + 1, right + 1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, last, curr, res, op):\n            if not num:\n                if curr == target:\n                    res.append(op)\n                return\n            for i in range(1, len(num) + 1):\n                if i == 1 or (num[0] != '0' and int(num[:i]) < 0):\n                    break\n                curr = int(num[:i])\n                if op:\n                    backtrack(num[i:], target - curr, curr + last, curr * last, res, op + '+' + str(curr))\n                else:\n                    backtrack(num[i:], target - curr, curr, curr, res, str(curr))\n        \n        if not num or num[0] == '0':\n            return []\n        res, last, curr = [], int(num), int(num[0]) if num else 0\n        backtrack(num, target, curr, curr, res, str(curr))\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(node, curr_sum):\n            if not node:\n                return 0\n            curr_sum = curr_sum * 10 + node.val\n            if not node.left and not node.right:\n                return curr_sum\n            return dfs(node.left, curr_sum) + dfs(node.right, curr_sum)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.upper().replace('-', '')\n        n = len(s)\n        res = n % k\n        res += s[:res] if res else ''\n        res += '-' + s[res:res+k][::-1] if res < n else s[res-k:][::-1]\n        return res"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total_gas = sum(gas) - sum(cost)\n        if total_gas < 0:\n            return -1\n        \n        curr_gas = 0\n        start = 0\n        for i, g in enumerate(gas):\n            curr_gas += g - cost[i]\n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [0] * n\n        for i in range(n-2, -1, -1):\n            dp[i] = max(nums[i] + nums[i+1] * dp[i+1], nums[i] * nums[i+2] + dp[i+2])\n            for j in range(i+1, n-1):\n                dp[j] = max(dp[j], nums[i] * nums[j] + dp[j-1])\n        return dp[0]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1, -1, -1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0, 1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] if s[i-1] == p[j-1] or p[j-1] == '.'\n        #         = dp[i][j-2] if p[j-1] == '*' and (s[i-1] == p[j-2] or p[j-2] == '.')\n        #         = False otherwise\n        # dp[0][0] = True\n        # dp[0][j] = p[j-1] == '*' and dp[0][j-2]\n        #         = True if p[j-1] == '*' and p[j-2] != '*'\n        #         = False otherwise\n        #         = True if p[j-1] == '*' and p[j-2] == '*'\n        #         = True if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = True if p[j-1] == '.'\n        #         = True if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False if p[j-1] != '*'\n        #         = False otherwise\n        #         = False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        m, n = len(nums1), len(nums2)\n        if m > n:\n            return self.maxNumber(nums2, nums1, k)\n        \n        if k == 0:\n            return []\n        \n        if k == m:\n            return nums1 if nums1 > nums2 else nums2\n        \n        # find the number of digits to keep in nums1\n        # such that nums1[:k] <= nums2[:k-m]\n        # if nums1[k:] > nums2[k-m:], we can discard nums1\n        # otherwise, keep nums1\n        keep = m\n        for i, num2 in en.umerate(nums2):\n            while keep and nums1[keep - 1] < num2 and (m - keep + i) > k - (n - i):\n                keep -= 1\n            if nums1[keep] < num2:\n                keep += 1\n        \n        return nums1[:keep]"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum_divisors = 1\n        sqrt_num = int(math.sqrt(num))\n        \n        for i in range(2, sqrt_num + 1):\n            if num % i == 0:\n                sum_divisors += i + num // i\n        \n        return sum_divisors == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 2:\n            return n\n        \n        a, b = 0, 1\n        for i in range(n - 1):\n            a, b = b, a + b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        \n        for i in range(m - 1, -1, -1):\n            dp[i][n] = max(dp[i + 1][n] - dungeon[i][n], 1)\n        \n        for j in range(n - 1, -1, -1):\n            dp[m][j] = max(dp[m][j + 1] - dungeon[m][j], 1)\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        lo, hi = nums[1] - nums[0], nums[-1] - nums[0]\n        for x in nums[1:]:\n            hi = min(hi, x - nums[k - 1] + lo)\n            lo = min(lo, x - hi)\n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        l, r = 0, len(s) - 1\n        s = list(s)\n        while l < r:\n            if s[l] in vowels and s[r] in vowels:\n                s[l], s[r] = s[r], s[l]\n                l, r = l + 1, r - 1\n            elif s[l] not in vowels:\n                l += 1\n            elif s[r] not in vowels:\n                r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        \n        for num in nums_set:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_streak = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_streak += 1\n                    \n                longest = max(longest, curr_streak)\n                \n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR all the numbers from 0 to n, and the numbers in nums.\n        # Then XOR all the numbers from 0 to n+1.\n        # The missing number will be the XOR of the two numbers.\n        # 0 ^ 0 = 0, 1 ^ 0 = 1, 2 ^ 0 = 2, 3 ^ 0 = 3, etc.\n        # 0 ^ 1 ^ 1 ^ 2 ^ 2 ^ 3 ^ 3 ^ 4 = 0 ^ 4 = 4\n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 1 ^ 2 ^ 3 = 0 ^ 0 = 4\n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 ^ 29 ^ 30 ^ 31 ^ 32 ^ 33 ^ 34 ^ 35 ^ 36 ^ 37 ^ 38 ^ 39 ^ 40 ^ 41 ^ 42 ^ 43 ^ 44 ^ 45 ^ 46 ^ 47 ^ 48 ^ 49 ^ 50 ^ 51 ^ 52 ^ 53 ^ 54 ^ 55 ^ 56 ^ 57 ^ 58 ^ 59 ^ 60 ^ 61 ^ 62 ^ 63 ^ 64 ^ 65 ^ 66 ^ 67 ^ 68 ^ 69 ^ 70 ^ 71 ^ 72 ^ 73 ^ 74 ^ 75 ^ 76 ^ 77 ^ 78 ^ 79 ^ 80 ^ 81 ^ 82 ^ 83 ^ 84 ^ 85 ^ 86 ^ 87 ^ 88 ^ 89 ^ 90 ^ 91 ^ 92 ^ 93 ^ 94 ^ 95 ^ 96 ^ 97 ^ 98 ^ 99\n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 ^ 29 ^ 30 ^ 31 ^ 32 ^ 33 ^ 34 ^ 35 ^ 36 ^ 37 ^ 38 ^ 39 ^ 40 ^ 41 ^ 42 ^ 43 ^ 44 ^ 45 ^ 46 ^ 47 ^ 48 ^ 49 ^ 50 ^ 51 ^ 52 ^ 53 ^ 54 ^ 55 ^ 56 ^ 57 ^ 58 ^ 59 ^ 60 ^ 61 ^ 62 ^ 63 ^ 64 ^ 65 ^ 66 ^ 67 ^ 68 ^ 69 ^ 70 ^ 71 ^ 72 ^ 73 ^ 74 ^ 75 ^ 76 ^ 77 ^ 78 ^ 79 ^ 80 ^ 81 ^ 82 ^ 83 ^ 84 ^ 85 ^ 86 ^ 87 ^ 88 ^ 89 ^ 90 ^ 91 ^ 92 ^ 93 ^ 94 ^ 95 ^ 96 ^ 97 ^ 98 ^ 99 ^ 100\n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 2"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        wordSet = set(wordList)\n        if endWord not in wordSet:\n            return 0\n        \n        queue = collections.deque([(beginWord, 1)])\n        wordSet.add(beginWord)\n        \n        while queue:\n            word, steps = queue.popleft()\n            if word == endWord:\n                return steps\n            \n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    nextWord = word[:i] + c + word[i+1:]\n                    if nextWord in wordSet:\n                        queue.append((nextWord, steps + 1))\n                        wordSet.remove(nextWord)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)-1, -1, -1):\n            if a[i] == '1':\n                carry += 1\n            if i < len(b) and b[len(a)-1-i] == '1':\n                carry += 1\n            if carry % 2 == 1:\n                res.append('1')\n            else:\n                res.append('0')\n            carry /= 2\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = -1, -1\n        lo, hi = 0, len(nums) - 1\n        \n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if nums[mid] < target:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        \n        left = lo if nums[lo] == target else -1\n        \n        lo, hi = 0, len(nums) - 1\n        \n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if nums[mid] <= target:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        \n        right = hi if nums[hi] == target else -1\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return len(nums)\n        \n        k = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[k - 1]:\n                nums[k] = nums[i]\n                k += 1\n        \n        return k"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = nums[0]\n        \n        for i in range(1, n):\n            if i > max_reach:\n                jumps += 1\n                max_reach = cur_reach\n            cur_reach = max(cur_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(0, p - prices[i - 1]) for i, p in en"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        if num < 0:\n            num = 0xffffffff + num + 1\n        \n        res = ''\n        while num > 0:\n            res = hex_dict[num & 15] + res if num & 15 else '0' + res\n            num >>= 4\n        \n        return res if res else '0'"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # use a hashmap to store the frequency of each character\n        # use a queue to store the index of the first non-repeating character\n        # iterate through the string and update the frequency of each character\n        # if the character is not in the queue, add it to the end of the queue\n        # if the character is in the queue, remove it from the queue\n        # return the first element of the queue if it exists, otherwise return -1\n        \n        freq = collections.Counter(s)\n        q = collections.deque()\n        \n        for i, c in en.umerate(s):\n            if freq[c] == 1:\n                q.append(i)\n            else:\n                q.remove(c)\n        \n        return q.popleft() if q else -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if valueDiff < 0:\n            return False\n        \n        bucket = {}\n        w = valueDiff + 1\n        \n        for i, num in encompressed(nums):\n            if i - indexDiff in bucket:\n                return True\n            if i * w in bucket:\n                return True\n            bucket[i * w] = num\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0: left, 1: right, 2: current\n        left, right = 0, len(nums) - 1\n        curr = 0\n        \n        while curr <= right:\n            if nums[curr] == 0:\n                nums[left], nums[curr] = nums[curr], nums[left]\n                left += 1\n                curr += 1\n            elif nums[curr] == 2:\n                nums[right], nums[curr] = nums[curr], nums[right]\n                right -= 1\n            else:\n                curr += 1"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        curr_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                curr_ones += 1\n            else:\n                curr_ones = 0\n            max_ones = max(max_ones, curr_ones)\n        \n        return max_ones"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return 2 ** left_height + self.countNodes(root.right)\n        else:\n            return 2 ** right_height + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        height = 0\n        while root:\n            height += 1\n            root = root.left\n        return height"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # if num1 is longer than num2, swap them\n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        # add the digits from the end of num1 to the end of num2\n        # and carry over the extra digit to the next digit in num2\n        # if num1 is longer than num2, add the extra digit to the end of num1\n        carry, result = 0, ''\n        for i in range(len(num1) - 1, -1, -1):\n            digit1, digit2 = int(num1[i]), int(num2[i - len(num1) + len(num2)])\n            result = str((digit1 + digit2 + carry) % 10) + result\n            carry = (digit1 + digit2 + carry) // 10\n        \n        # if the last digit in num1 is a carry over, add it to the result\n        if carry:\n            result = str(carry) + result\n        \n        return result"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = [1]\n        sign = 1\n        num = 0\n        \n        for c in s:\n            if c.isdigit():\n                num = num * 10 + int(c)\n            elif c == '+':\n                num *= sign\n            elif c == '-':\n                num *= sign\n            elif c == '(':\n                stack.append(num)\n                num = 0\n                sign *= 1 if c == '+' else -1\n            elif c == ')':\n                num *= sign\n                num += stack.pop()\n                sign //= num\n            else:\n                assert c == ' '\n        \n        return num + sign * num"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort by capital\n        projects = sorted(zip(capital, profits))\n        \n        # greedy: pick projects with higher capital first\n        pq = []\n        i = 0\n        for _ in range(k):\n            while i < len(projects) and projects[i][0] <= w:\n                heapq.heappush(pq, -projects[i][1])\n                i += 1\n            if not pq:\n                break\n            w -= heapq.heappop(pq)\n        \n        return w if pq else w + sum(projects[i][1] for i in range(i, len(projects)) if projects[i][0] > w)"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        lookup = {')': '(', ']': '['}\n        \n        for char in s:\n            if char not in lookup:\n                stack.append(char)\n            elif stack and lookup[char] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        \n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if we are at the end, then we need to reverse the entire array\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first number that is larger than nums[i]\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the right part\n        nums[i + 1:] = nums[len(nums) - 1: i:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time: O(n)\n        # Space: O(n)\n        \n        seen = set()\n        \n        for i, num in enumerate(nums):\n            if num in seen and i - seen[num] <= k:\n                return True\n            seen[num] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n            queue = queue[len(level):]\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row) // 2\n        couples = {row[i]: i // 2 for i in range(0, n * 2, 2)}\n        ans = n\n        for i in row:\n            if couples[i // 2] == i % 2: continue\n            ans -= 1\n            couples[couples[i // 2 ^ 1]] = couples[i]\n        return ans"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1\n        \n        dp = [False] * (len(s2) + 1)\n        dp[0] = True\n        \n        for i in s1:\n            dp[0] = dp[0] and i == s3[0]\n            for j in range(1, len(s2) + 1):\n                dp[j] = (dp[j - 1] and s2[j - 1] == s3[j - 1]) or (dp[j] and s2[j - 1] == s3[j - 1])\n        \n        return dp[-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        firstRow = set('qwertyuiop')\n        secondRow = set('asdfghjkl')\n        thirdRow = set('zxcvbnm')\n        \n        res = []\n        for word in words:\n            if word[0] in firstRow:\n                row = firstRow\n            elif word[0] in secondRow:\n                row = secondRow\n            else:\n                row = thirdRow\n            if all(word.lower() in row for word in word[1:]):\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        for _ in range(left - 1):\n            prev = curr\n            curr = curr.next\n            \n        tail = curr\n        \n        for _ in range(right - left):\n            tmp = curr.next\n            curr.next = tmp.next\n            tmp.next = prev.next\n            prev.next = tmp\n            \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be center of the string\n        # reverse the string and add it to the end of the string\n        # if the string is palindrome, then the shortest palindrome is the reverse of the string\n        # if the string is not palindrome, then the shortest palindrome is the reverse of the suffix of the string\n        # add the suffix to the end of the string\n        # if the suffix is palindrome, then the shortest palindrome is the suffix + reverse of the suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix\n        # if the suffix is not palindrome, then the shortest palindrome is the suffix + reverse of the suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix + suffix"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        count = collections.Counter(t)\n        left = right = 0\n        required = len(count)\n        formed = 0\n        window_counts = {}\n        window_min_length = float('inf')\n        min_left = 0\n        \n        for right in range(len(s)):\n            char = s[right]\n            if char in count:\n                window_counts[char] = window_counts.get(char, 0) + 1\n                if window_counts[char] == count[char]:\n                    formed += 1\n            \n            if formed == required:\n                while s[left] not in count or window_counts[s[left]] > count[s[left]]:\n                    window_counts[s[left]] -= 1\n                    left += 1\n                \n                window_min_length = min(window_min_length, right - left + 1)\n                window_counts[s[left]] -= 1\n                left += 1\n        \n        return \"\" if window_min_length == float('inf') else s[min_left:min_left + window_min_length]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) <= 3:\n            return False\n        \n        if distance[3] >= distance[1] and distance[2] >= distance[0]:\n            return True\n        \n        if distance[4] + distance[1] >= distance[2] and distance[5] >= distance[3] - distance[1]:\n            return True\n        \n        if distance[1] >= distance[3] and distance[2] >= distance[4] and distance[5] >= distance[1] - distance[3]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        curr = head\n        \n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # count the frequency of each character\n        # if there is an odd number, add 1 to the result\n        # otherwise, add 2\n        count = collections.Counter(s)\n        result = 0\n        for v in count.values():\n            result += v // 2 * 2\n            if result % 2 == 0 and v % 2 == 1:\n                result += 1\n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root_val = postorder[-1]\n        root_idx = inorder.index(root_val)\n        \n        left_inorder = inorder[:root_idx]\n        right_inorder = inorder[root_idx + 1:]\n        \n        left_postorder = postorder[:len(left_inorder)]\n        right_postorder = postorder[len(left_inorder):-1]\n        \n        root = TreeNode(root_val)\n        root.left = self.buildTree(left_inorder, left_postorder)\n        root.right = self.buildTree(right_inorder, right_postorder)\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the heights of trees in the forest\n        heights = [height for row in forest if height := forest[row][0]]\n        heights.sort()\n        \n        # start from the top-left corner\n        row, col = 0, 0\n        steps = 0\n        for height in heights:\n            # if we can't reach the tree, return -1\n            if height > forest[row][col]:\n                return -1\n            # walk to the tree\n            steps += self.bfs(forest, height, row, col)\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # prefix sum + binary search\n        # O(nlogn) time, O(n) space\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/Python-O(nlogn)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/count-of-range-sum/discuss/100882/"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q][::-1])\n            q = [child for node in q if node.left for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0 or (x % 10 == 0 and x != 0):\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x /= 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        one, two = 1, 1\n        \n        for i in range(1, len(s)):\n            curr = int(s[i])\n            if curr == 0:\n                one = 0\n            if (curr * 10 + int(s[i - 1])) <= 26:\n                one, two = two, one + two\n            else:\n                one = two\n        \n        return one"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        for c in t:\n            if i < len(s) and c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 2^n - 1 is the n-bit gray code sequence\n        return [i ^ (i >> 1) for i in range(1 << n)]"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 2:\n            return n\n        \n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for word in wordDict:\n                if s[i - len(word) + 1:i + 1] == word and dp[i - len(word) + 1]:\n                    dp[i + 1] = True\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if (node.val <= left[0] or node.val >= right[0]):\n                return False\n            \n            return valid(node.left, left, (node.val, right[1])) and valid(node.right, (left[0], node.val), right)\n        \n        return valid(root, (float('-inf'), float('inf')), )"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval starts before the first interval,\n        # insert the new interval at the beginning\n        if newInterval[0] > intervals[0][1]:\n            return [newInterval] + intervals\n        \n        # if the new interval ends after the last interval,\n        # insert the new interval at the end\n        if newInterval[1] > intervals[-1][1]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # otherwise, merge the new interval with the last interval\n        intervals[-1][1] = max(intervals[-1][1], newInterval[1])\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s, start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n        \n        res = []\n        dp = [[] for _ in s]\n        \n        for i in range(len(s)):\n            if s[i] and is_palindrome(s, 0, i):\n                dp[i].append([s[:i+1]])\n            for j in range(i):\n                if is_palindrome(s, j, i):\n                    dp[i].append(dp[j] + [s[j:i+1]])\n        \n        return dp[-1]"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # min_val = float('inf')\n        # max_val = -float('inf')\n        # min_heap = [(nums[i][0], i, 0) for i in range(len(nums))]\n        # heapq.heapify(min_heap)\n        # max_val = max(nums[i][-1] for i in range(len(nums)))\n        # while min_heap:\n        #     curr_val, i, j = heapq.heappop(min_heap)\n        #     if max_val - curr_val < max_val - min_val:\n        #         min_val = curr_val\n        #         max_val = max_val\n        #     if j + 1 < len(nums[i]):\n        #         heapq.heappush(min_heap, (nums[i][j + 1], i, j + 1))\n        #         max_val = max(max_val, nums[i][j + 1])\n        # return [min_val, max_val]\n        \n        min_val = float('inf')\n        max_val = -float('inf')\n        min_heap = [(nums[i][0], i, 0) for i in range(len(nums))]\n        heapq.heapify(min_heap)\n        max_val = max(nums[i][-1] for i in range(len(nums)))\n        while min_heap[0][0] <= max_val:\n            curr_val, i, j = heapq.heappop(min_heap)\n            if max_val - curr_val < max_val - min_val:\n                min_val = curr_val\n                max_val = max_val\n            if j + 1 < len(nums[i]):\n                heapq.heappush(min_heap, (nums[i][j + 1], i, j + 1))\n                max_val = max(max_val, nums[i][j + 1])\n        return [min_val, max_val]"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 10^x >= minutesToTest / minutesToDie + 1\n        # x = log(minutesToTest / minutesToDie + 1) / log(10)\n        return ceil(log(minutesToTest / minutesToDie + 1, 10))"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        seen = {(0, 0)}\n        ans = 0\n        while heap[0][0] < n * n:\n            val, r, c = heapq.heappop(heap)\n            ans = max(ans, val)\n            for nr, nc in (r, c - 1), (r, c + 1), (r - 1, c), (r + 1, c):\n                if 0 <= nr < n and 0 <= nc < n and (nr, nc) not in seen:\n                    heapq.heappush(heap, (grid[nr][nc], nr, nc))\n                    seen.add((nr, nc))\n        return ans"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        res = 0\n        m, n = len(num1), len(num2)\n        num1, num2 = num1[::-1], num2[::-1]\n        \n        for i in range(n):\n            carry = 0\n            for j in range(m):\n                digit = int(num1[j]) * int(num2[i]) + carry\n                carry = digit % 10\n                res += int(num2[i]) * digit // 10\n                num2[i] = str(carry)\n            num2 += '0'\n        \n        return str(res) if res else '0'"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the min price\n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, nums, target, start, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n            return\n        for i in xrange(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums, target - nums[i], i + 1, path + [nums[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        \n        if word[1:].isupper():\n            return False\n        \n        return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [], []\n        \n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res.append(root.val)\n                root = root.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root_val = preorder[0]\n        root_idx = inorder.index(root_val)\n        \n        left_inorder = inorder[:root_idx]\n        right_inorder = inorder[root_idx + 1:]\n        \n        left_preorder = preorder[1:root_idx + 1]\n        right_preorder = preorder[root_idx + 1:]\n        \n        root = TreeNode(root_val)\n        root.left = self.buildTree(left_preorder, left_inorder)\n        root.right = self.buildTree(right_preorder, right_inorder)\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the number of left and right parentheses\n        left, right = 0, 0\n        for c in s:\n            if c == '(':\n                left += 1\n            elif c == ')':\n                if left > 0:\n                    left -= 1\n                else:\n                    right += 1\n        # remove the remaining left parentheses\n        res = {s}\n        for c in s:\n            if c == '(':\n                if left > 0:\n                    left -= 1\n                else:\n                    res |= {s[:i] + s[i+1:] for i in reversed(range(len(s)) if s[i] == ')'}\n            elif left > 0:\n                left -= 1\n            else:\n                res |= {s[:i] + s[i+1:] for i in reversed(range(len(s)) if s[i] == '('}\n        return list(res)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        # create a min heap\n        heap = []\n        for node in lists:\n            if node:\n                heapq.heappush(heap, (node.val, node))\n        \n        # create a dummy node\n        dummy = ListNode()\n        curr = dummy\n        \n        # iterate over the heap\n        while heap:\n            val, node = heapq.heappop(heap)\n            if node.next:\n                heapq.heappush(heap, (node.next.val, node.next))\n            curr.next = node\n            curr = curr.next\n        \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n < 2:\n            return 0\n        \n        dp = [n-i-1] * n\n        for i in range(n-2, -1, -1):\n            if s[i] == s[n-1-i]:\n                dp[i] = dp[n-1-i] - 1 if i < n-1-i else 0\n            else:\n                dp[i] = min(dp[i], dp[n-1-i] + 1)\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[j] = min(dp[j], dp[i] + (j-i > 1 ? dp[j-1] : 0))\n        return dp[0]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1, 5, 12, 25, 50, 90, 145, 230, 350, 500, 700, 975, 1250, 1600, 2000, 2400, 2800, 3200, 3600, 4000, 4400, 4800, 5200, 5600, 6000, 6400, 6800, 7200, 7600, 8000, 8400, 8800, 9200, 9600, 10000, 10400, 10800, 11200, 11600, 12000, 12400, 12800, 13200, 13600, 14000, 14400, 14800, 15200, 15600, 16000, 16400, 16800, 17200, 17600, 18000, 18400, 18800, 19200, 19600, 20000, 20400, 20800, 21200, 21600, 22000, 22400, 22800, 23200, 23600, 24000, 24400, 24800, 25200, 25600, 26000, 26400, 26800, 27200, 27600, 28000, 28400, 28800, 29200, 29600, 30000, 30400, 30800, 31200, 31600, 32000, 32400, 32800, 33200, 33600, 34000, 34400, 34800, 35200, 35600, 36000, 36400, 36800, 37200, 37600, 38000, 38400, 38800, 39200, 39600, 40000, 40400, 40800, 41200, 41600, 42000, 42400, 42800, 43200, 43600, 44000, 44400, 44800, 45200, 45600, 46000, 46400, 46800, 47200, 47600, 48000, 48400, 48800, 49200, 49600, 50000, 50400, 50800, 51200, 51600, 52000, 52400, 52800, 53200, 53600, 54000, 54400, 54800, 55200, 55600, 56000, 56400, 56800, 57200, 5760"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # build a hashmap with word as key and index as value\n        # iterate over the words, if word is a palindrome, add it to the end of the list\n        # if not, check if reversed word is in the hashmap, if so, add it to the list\n        # if not, add the word to the end of the list\n        # if word is empty, add all pairs to the list\n        # if reversed word is empty, add all pairs to the list\n        # if word is empty and reversed word is not empty, add empty word to the list\n        # if word is not empty and reversed word is empty, add empty word to the list\n        # if word and reversed word are both empty, add empty word to the list\n        \n        # build a hashmap with word as key and index as value\n        # iterate over the words, if word is a palindrome, add it to the end of the list\n        # if not, check if reversed word is in the hashmap, if so, add it to the list\n        # if not, add the word to the end of the list\n        # if word is empty, add all pairs to the list\n        # if reversed word is empty, add all pairs to the list\n        # if word is empty and reversed word is not empty, add empty word to the list\n        # if word is not empty and reversed word is empty, add empty word to the list\n        # if word is empty and reversed word is not empty, add empty word to the list\n        \n        # build a hashmap with word as key and index as value\n        # iterate over the words, if word is a palindrome, add it to the end of the list\n        # if not, check if reversed word is in the hashmap, if so, add it to the list\n        # if not, add the word to the end of the list\n        # if word is empty, add all pairs to the list\n        # if reversed word is empty, add all pairs to the list\n        # if word is empty and reversed word is not empty, add empty word to the list\n        # if word is not empty and reversed word is empty, add empty word to the list\n        \n        # build a hashmap with word as key and index as value\n        # iterate over the words, if word is a palindrome, add it to the end of the list\n        # if not, check if reversed word is in the hashmap, if so, add it to the list\n        # if not, add the word to the end of the list\n        # if word is empty, add all pairs to the list\n        # if reversed word is empty, add all pairs to the list\n        # if word is empty and reversed word is not empty, add empty word to the list\n        # if word is not empty and reversed word is empty, add empty word to the list\n        \n        # build a hashmap with word as key and index as value\n        # iterate over the words, if word is a palindrome, add it to the end of the list\n        # if not, check if reversed word is in the hashmap, if so, add it to the list\n        # if not, add the word to the end of the list\n        # if word is empty, add all pairs to the list\n        # if reversed word is empty, add all pairs to the list\n        # if word is empty and reversed word is not empty, add empty word to the list\n        # if word is not empty and reversed word is empty, add empty word to the list\n        \n        # build a hashmap with word as key and index as value\n        # iterate over the words, if word is a palindrome, add it to the end of the list\n        # if not, check if reversed word is in the hashmap, if so, add it to the list\n        # if not, add the word to the end of the list\n        # if word is empty, add all pairs to the list\n        # if reversed word is empty, add all pairs to the list\n        # if word is empty and reversed word is not empty, add empty word to the list\n        # if word is not empty and reversed word is empty, add empty word to the list\n        \n        # build a hashmap with word as key and index as value\n        # iterate over the words, if word is a palindrome, add it to the end of the list\n        # if not, check if reversed word is in the hashmap, if so, add"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        infected, walls = 0, 0\n        \n        for i in range(m):\n            if isInfected[i][0] == 1:\n                infected += self.spread(isInfected, i, 0)\n                walls += 1\n            if isInfected[i][n-1] == 1:\n                infected += self.spread(isInfected, m-1, i, True)\n                walls += 1\n        \n        for j in range(n):\n            if isInfected[0][j] == 1:\n                infected += self.spread(isInfected, 0, j, True)\n                walls += 1\n            if isInfected[m-1][j] == 1:\n                infected += self.spread(isInfected, m-1, j, True)\n                walls += 1\n        \n        return infected - walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        cache = {}\n        longest = 1\n        \n        def dfs(i, j):\n            if not cache.get((i, j), -1):\n                val = matrix[i][j]\n                neighbors = [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]\n                cache[(i, j)] = 1 + max(dfs(ni, nj) for ni, nj in neighbors if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > val)\n                longest = max(longest, cache[(i, j)])\n            return cache[(i, j)]\n        \n        for i in range(m):\n            for j in range(n):\n                dfs(i, j)\n        \n        return longest"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        \n        ones = 0\n        curr = n\n        base = 1\n        \n        while curr > 0:\n            ones += curr / 10 * base + (curr % 10 == 1)\n            curr /= 10\n            base *= 10\n        \n        return ones"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for word in wordDict:\n                if s[i - len(word) + 1:i + 1] == word and dp[i - len(word) + 1]:\n                    dp[i + 1] = True\n        \n        return s if dp[-1] else s[:-1] + \" \" + self.wordBreak(s[dp[-1]:], wordDict)"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n                    \n            left_to_right = not left_to_right\n            result.append(level)\n            \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            m = turnedOn - h\n            if m < 0 or m > 5:\n                continue\n            res.append('%d:%02d' % (h, m))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        res = [[1] * (i + 1) for i in range(numRows)]\n        \n        for i in range(2, numRows):\n            for j in range(1, i):\n                res[i][j] = res[i - 1][j - 1] + res[i - 1][j]\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 3^19 = 1162261467\n        # 3^20 = 1164510095\n        # 3^21 = 1169261426\n        # 3^22 = 1170653530\n        # 3^23 = 1175442535\n        # 3^24 = 1180505118\n        # 3^25 = 1186820986\n        # 3^26 = 1193435658\n        # 3^27 = 1200000000\n        # 3^28 = 1224229019\n        # 3^29 = 1250000000\n        # 3^30 = 1677721600\n        # 3^31 = 2147483648\n        # 3^32 = 4294967296\n        # 3^33 = 8589934592\n        # 3^34 = 17179869184\n        # 3^35 = 34359738368\n        # 3^36 = 68719476736\n        # 3^37 = 137438953472\n        # 3^38 = 274877906944\n        # 3^39 = 549755813888\n        # 3^40 = 1099511627776\n        # 3^41 = 2199023255552\n        # 3^42 = 4398046511104\n        # 3^43 = 8796093022208\n        # 3^44 = 17592186044416\n        # 3^45 = 35184372088832\n        # 3^46 = 70368744177664\n        # 3^47 = 140737488355328\n        # 3^48 = 281474976710656\n        # 3^49 = 562949953421312\n        # 3^50 = 1125899906842624\n        # 3^51 = 2251799813685248\n        # 3^52 = 4503599627370496\n        # 3^53 = 9007199254740992\n        # 3^54 = 18014398509481984\n        # 3^55 = 36028797018963968\n        # 3^56 = 72057594037927936\n        # 3^57 = 144115188075855872\n        # 3^58 = 288230376151711744\n        # 3^59 = 576460752303423488\n        # 3^60 = 1152921504606846976\n        # 3^61 = 2305843009213693952\n        # 3^62 = 4611686018427387904\n        # 3^63 = 9223372036854775808\n        # 3^64 = 18446744"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + node.val + right_gain)\n            \n            return node.val + max(left_gain, right_gain)"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        n, m = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(n)] + [(heightMap[i][m-1], i, m-1) for i in range(n)]\n        heapq.heapify(heap)\n        seen = {(n-1, 0), (n-1, m-1)}\n        res = 0\n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        \n        for r, c, h in heap:\n            for dr, dc in dirs:\n                nr, nc = r + dr, c + dc\n                if 0 <= nr < n and 0 <= nc < m and (nr, nc) not in seen:\n                    res += max(h, heightMap[nr][nc]) - heightMap[nr][nc]\n                    heapq.heappush(heap, (heightMap[nr][nc], nr, nc))\n                    seen.add((nr, nc))\n        \n        return res"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase and remove non-alphanumeric characters\n        s = s.lower()\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # O(n) time, O(n) space\n        if not nums:\n            return []\n        \n        # O(n) time, O(n) space\n        window = sorted(nums[:k])\n        res = [(window[k / 2] + window[(k - 1) / 2]) / 2.0]\n        \n        for i in xrange(k, len(nums)):\n            # O(log(n)) time, O(n) space\n            if nums[i] > window[k / 2]:\n                window[k / 2] = nums[i]\n            elif nums[i - k] > window[k / 2]:\n                window[k / 2] = nums[i - k]\n            res.append((window[k / 2] + window[(k - 1) / 2]) / 2.0)\n        \n        return res"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head and tail\n        k %= length\n        if k == 0:\n            return head\n        \n        # find the new tail\n        new_tail = head\n        for _ in range(length - k - 1):\n            new_tail = new_tail.next\n        \n        # connect the new tail to the new head\n        new_head = new_tail.next\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n /= 2\n        while n % 3 == 0:\n            n /= 3\n        while n % 5 == 0:\n            n /= 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(nlogn) time, O(n) space\n        heights = [0]\n        ans = 0\n        for left, side in positions:\n            height = heights[-1] + side\n            ans = max(ans, height)\n            idx = bisect.bisect_left(heights, height)\n            heights[idx] = height\n        return ans"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        prefix_sum = [0] * n\n        for row in matrix:\n            for i in range(n - 1):\n                row[i] += row[i + 1]\n            prefix_sum = [prefix_sum[i] + (row[i] if i < m else 0) for i in range(n)]\n            prefix_sum = [max(prefix_sum[i] - k, 0) if k else prefix_sum[i] for i in prefix_sum]\n            res = max(res, max(prefix_sum) if k else prefix_sum[0])\n            if not k:\n                res = max(res, max(prefix_sum))\n            else:\n                d = {0: -k}\n                for prefix_sum in prefix_sum:\n                    res = max(res, prefix_sum + d.get(prefix_sum - k, 0))\n                    d[prefix_sum] = max(d.get(prefix_sum, 0) - prefix_sum, res)\n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        sign = 1 if dividend > 0 == divisor > 0 else -1\n        \n        dividend, divisor = abs(dividend), abs(divisor)\n        \n        quotient = 0\n        \n        while dividend >= divisor:\n            curr_divisor = divisor\n            curr_quotient = 1\n            \n            while dividend >= curr_divisor + curr_divisor:\n                dividend -= curr_divisor\n                curr_quotient += curr_quotient\n                curr_divisor += curr_divisor\n                \n            quotient += curr_quotient\n            \n        return sign * quotient if -2**31 <= quotient <= 2**31 - 1 else 2**31 - 1"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board or not board[0]:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        # mark all the border 'O's with 'T's\n        for i in range(m):\n            for j in (0, n-1):\n                if board[i][j] == 'O':\n                    board[i][j] = 'T'\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'T'\n        \n        # mark all the 'O's in the remaining part with 'F's\n        for i in range(m-1, -1, -1):\n            for j in (0, n-1):\n                if board[i][j] == 'O':\n                    if i < m-1 and board[i+1][j] != 'T':\n                        board[i][j] = 'T'\n                    else:\n                        board[i][j] = 'F'\n            for j in range(n):\n                if board[i][j] == 'O':\n                    if j < n-1 and board[i][j+1] != 'T':\n                        board[i][j] = 'T'\n                    else:\n                        board[i][j] = 'F'\n        \n        # change all 'T's to 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'F':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap to store the number and its index\n        hashmap = {}\n        \n        # iterate through the nums array\n        for i, num in enumerate(nums):\n            \n            # if the difference between the target and the current number is in the hashmap, return the index of the difference and the current index\n            if target - num in hashmap:\n                return [hashmap[target - num], i]\n            \n            # otherwise, add the current number to the hashmap with its index as the value\n            hashmap[num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 1e-6\n        \n        seen = set([cards[0] * 1.0, cards[1] * 1.0, cards[2] * 1.0, cards[3] * 1.0])\n        \n        for a in cards[3:]:\n            new_seen = set()\n            for x in seen:\n                new_seen.add(x + a)\n                new_seen.add(x - a)\n                new_seen.add(x * a)\n                if a != 0:\n                    new_seen.add(x / a)\n            if 24 in new_seen:\n                return True\n            seen = new_seen\n        \n        return False"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, only '*' can match empty string\n        if not p.replace('*', ''):\n            return not s\n        \n        # if '*' is not in p, it can only match empty string\n        star = p.find('*')\n        if star == -1:\n            return not s\n        \n        # if '?' is in p, it can match any char\n        if p[star] != '*':\n            match = s.find(p[star])\n            return star < len(s) and match != -1 and s[match] == p[star]\n        \n        # if '*' is in p, it can match any substring\n        # if '?' is in p, it can match any char\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not in p, it can only match empty string\n        # if '?' is not in p, it can only match empty string\n        # if '*' is not"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100998/Python-O(n)-Boyer-Moore-Voting-Algorithm\n        # Time: O(n), Space: O(1)\n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += 1 if num == candidate else -1\n            \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for start, end in sorted(tickets)[::-1]:\n            graph[start] += [end]\n        \n        # dfs\n        res = ['JFK']\n        def dfs(node):\n            while graph[node]:\n                dfs(graph[node].pop())\n            res.append(node)\n        \n        dfs('JFK')\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        n = len(nums)\n        \n        for i in range(n-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            if nums[i] + nums[i+1] + nums[i+2] + nums[i+3] > target:\n                break\n            \n            if nums[i] + nums[n-3] + nums[n-2] + nums[n-1] < target:\n                continue\n            \n            if nums[i] + nums[-1] + nums[-2] + nums[-3] < target:\n                continue\n            \n            if nums[i] == nums[-1] * 3 and nums[-1] == nums[-2]:\n                continue\n            \n            left = i + 1\n            right = n - 1\n            \n            while left < right:\n                if nums[i] + nums[left] + nums[right] + nums[right-1] < target:\n                    left += 1\n                elif nums[i] + nums[left] + nums[right] + nums[right-1] > target:\n                    right -= 1\n                else:\n                    if nums[left] == nums[right-1]:\n                        right -= 1\n                    else:\n                        res.append([nums[i], nums[left], nums[right-1], nums[right]])\n                        left += 1\n                        right -= 1\n        \n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort by left, then height\n        # if height is same, add right\n        # if height is different, add right and height\n        # if height is same, pop left\n        # if height is different, pop left and add height\n        # if height is same, pop left and add right\n        # if height is different, pop left and add right and height\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right\n        # if height is same, pop left\n        # if height is different, pop left and add right"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left, right = 0, len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # bottom up approach\n        # O(n) space\n        # O(n^2) time\n        if not triangle:\n            return 0\n        \n        dp = triangle[-1]\n        for row in triangle[::-1][1:]:\n            for i, num in enumerate(row):\n                dp[i] = num + min(dp[i], dp[i+1])\n        \n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        ones = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n        tens = ['', 'Ten', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety']\n        thousands = ['', 'Thousand', 'Million', 'Billion']\n        \n        res = ''\n        i = 0\n        while num > 0:\n            if num % 1000 != 0:\n                res = self.helper(num % 1000) + thousands[i] + ' ' + res\n            num //= 1000\n            i += 1\n            \n        return res.strip()\n        \n    def helper(self, num):\n        if num == 0:\n            return ''\n        if num < 10:\n            return ones[num]\n        if num < 20:\n            return tens[num - 10]\n        return ones[num // 10] + ' ' + ones[num % 10]"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [0] * (k+1)\n        dp[0] = 1\n        \n        for i in range(1, n+1):\n            new_dp = (dp * (i*(i-1) // 2)) % MOD\n            dp = (new_dp - (dp if i > k else 0) + MOD) % MOD\n        \n        return dp"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = prev.next.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            # otherwise, add it to the second list\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = {}\n        child = set()\n        candidate1, candidate2 = None, None\n        for u, v in edges:\n            if v in parent:\n                candidate1, candidate2 = parent[v], u\n            else:\n                parent[u] = v\n            if u in child:\n                return [v, candidate1]\n            child.add(u)\n        return [candidate1, candidate2]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [nums]\n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                nums.pop(i)\n            else:\n                i += 1\n        for i in range(len(nums) - 1, 0, -1):\n            if nums[i] > nums[i - 1]:\n                j = i\n                while j < len(nums) and nums[j] > nums[i - 1]:\n                    j += 1\n                nums[i - 1], nums[j - 1] = nums[j - 1], nums[i - 1]\n                break\n        j = len(nums) - 1\n        while i < j:\n            nums[i], nums[j] = nums[j], nums[i]\n            i += 1\n            j -= 1\n        res.append(nums)\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR operation\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ a = b\n        # a ^ b ^ a ^ b = a\n        # a ^ b ^ b ^ a = a\n        # a ^ b ^ 0 = a ^ b\n        # a ^ 0 ^ b = a ^ b\n        # a ^ b = 0 ^ b\n        # a ^ 0 = b\n        # a ^ b = 0\n        # a ^ b = 0 ^ b\n        # a ^ b = 0 ^ b ^ b\n        # a ^ b = 0 ^ b ^ 0\n        # a ^ b = 0 ^ b\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b = 0\n        # a ^ b"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Solution 1:\n        # return len(s.rstrip().split(' ')[-1])\n        \n        # Solution 2:\n        # return len(s.rstrip().split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][n - 1] = grid[0][0] + grid[n - 1][n - 1]\n        if dp[0][n - 1] < 0:\n            return 0\n        for i in range(n - 2, -1, -1):\n            dp[n - 1][i] = max(dp[n - 1][i + 1] - 1, grid[n - 1][i])\n        for i in range(n - 2, -1, -1):\n            dp[n - 1][i] += dp[n - 1][i + 1]\n            dp[i][n - 1] = max(dp[i + 1][n - 1] - 1, grid[i][n - 1])\n            if dp[i][n - 1] < 0:\n                return 0\n            dp[i][n - 1] += dp[i + 1][n - 1]\n        return dp[0][0]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 * 2 = 4\n        # 2. 3 * 3 = 9\n        # 3. 4 * 4 = 16\n        # 4. 5 * 5 = 25\n        # 5. 6 * 6 = 36\n        # 6. 7 * 7 = 49\n        # 7. 8 * 8 = 64\n        # 8. 9 * 9 = 81\n        # 9. 10 * 10 = 100\n        # 10. 11 * 11 = 121\n        # 11. 12 * 12 = 144\n        # 12. 13 * 13 = 169\n        # 13. 14 * 14 = 196\n        # 14. 15 * 15 = 225\n        # 15. 16 * 16 = 256\n        # 16. 17 * 17 = 289\n        # 17. 18 * 18 = 324\n        # 18. 19 * 19 = 361\n        # 19. 20 * 20 = 400\n        # 20. 21 * 21 = 441\n        # 21. 22 * 22 = 484\n        # 22. 23 * 23 = 529\n        # 23. 24 * 24 = 576\n        # 24. 25 * 25 = 625\n        # 25. 26 * 26 = 676\n        # 26. 27 * 27 = 729\n        # 27. 28 * 28 = 784\n        # 28. 29 * 29 = 841\n        # 29. 30 * 30 = 900\n        # 30. 31 * 31 = 961\n        # 31. 32 * 32 = 1024\n        # 32. 33 * 33 = 1089\n        # 33. 34 * 34 = 1156\n        # 34. 35 * 35 = 1225\n        # 35. 36 * 36 = 1296\n        # 36. 37 * 37 = 1369\n        # 37. 38 * 38 = 1444\n        # 38. 39 * 39 = 1521\n        # 39. 40 * 40 = 1600\n        # 40. 41 * 41 = 1681\n        # 41. 42 * 42 = 1764\n        # 42. 43 * 43 = 1849\n        # 43. 44 * 44 = 1936\n        # 44. 45 * 45 = 2025\n        # 45. 46 * 46 = 2116\n        # 46. 47 * 47 = 2209\n        # 47. 48 * 48 = 2304\n        # 48. 49 * 49 = 2401\n        # 49. 50 * 50 = 2500\n        # 50. 51 * 51 = 2601\n        # 51. 52 * 52 = 2704\n        # 52. 53 * 53 = 2809\n        # 53. 54 * 54 = 2916\n        # 54. 55 * 55 = 3025\n        # 55. 56 * 56 = 3136\n        # 56. 57 * 57 = 3249\n        # 57. 58 * 58 = 3364\n        # 58."}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        while True:\n            slow = sum(int(d)**2 for d in str(slow))\n            fast = sum(int(d)**2 for d in str(fast) if fast != 1)\n            if slow == 1:\n                return True\n            if slow == fast:\n                return False"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        \n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n            \n        #     max_reach = max(max_reach, i + nums[i])\n            \n        # return True\n        \n        # O(n) time and O(1) space\n        last_good_idx = len(nums) - 1\n        \n        for i in range(len(nums) - 2, -1, -1):\n            if nums[i] + i >= last_good_idx:\n                last_good_idx = i\n                \n        return last_good_idx == 0"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(grid), len(grid[0])\n        \n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        prev = '1'\n        curr = ''\n        count = 1\n        \n        for i in range(2, n+1):\n            for j in range(len(prev)):\n                if prev[j] == curr or j == len(prev) - 1:\n                    curr += str(count) + prev[j]\n                    count = 1\n                else:\n                    count += 1\n            prev = curr\n            curr = ''\n        \n        return prev"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search on the max value in nums\n        lo, hi = max(nums), sum(nums)\n        while lo < hi:\n            mid = lo + (hi - lo) // 2\n            if self.possible(nums, mid, k):\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl', '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'}\n        \n        res = ['']\n        \n        for digit in digits:\n            res = [s + c for s in res for c in phone[digit]]\n        \n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, nums, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in xrange(start, len(nums)):\n            if nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            path.append(nums[i])\n            self.dfs(nums, target - nums[i], i, path, res)\n            path.pop()"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) - 1) if int(n) > 1 else '11'\n        \n        num = int(n)\n        candidates = [int(str(num - 1) + str(num - 1)[::-1]),\n                     int(str(num) + str(num)[::-1]),\n                     int(str(num + 1) + str(num)[::-1])]\n        \n        if num % 10 == 9:\n            candidates.append(int(str(num - 1) + str(num - 1)[::-1]))\n        else:\n            candidates.append(num + 2)\n            candidates.append(num - 1 if num > 10 else 9)\n        \n        return str(min(candidates, key=lambda x: (abs(x - num), x)))"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        top, bottom, left, right = 0, n-1, 0, n-1\n        num = 1\n        \n        while top <= bottom and left <= right:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x //= 10\n            \n        if rev > 2**31 - 1:\n            return 0\n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for row in matrix:\n            row.reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the max and min product to the first element\n        max_product = nums[0]\n        min_product = nums[0]\n        result = max_product\n        \n        for num in nums[1:]:\n            # If the current number is positive, update max_product\n            if num > 0:\n                max_product, min_product = max(num, max_product * num), min(num, min_product * num)\n            # If the current number is negative, update max_product\n            else:\n                max_product, min_product = min(num, max_product * num), max(num, min_product * num)\n            # Update the global max product\n            result = max(result, max_product)\n        \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] means if we can jump to i\n        dp = {stones[0]: {1}}\n        \n        for s in stones[1:]:\n            if s in dp:\n                dp[s] = dp[s - 1] | dp[s - 2] | {s + 1}\n            if s not in dp:\n                dp[s] = {s + 1}\n            elif s - 1 > 0:\n                dp[s] |= dp[s - 1] | {s - 1}\n        \n        return dp[stones[-1]] != set()"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score = sorted(score, reverse=True)\n        \n        # rank the score\n        rank = {s: i + 1 for i, s in enpx enumerate(score)}\n        \n        # assign the rank to the score\n        return [rank.get(s, str(n + 1)) for n, s in enumerate(score)]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # use a set to keep track of the characters seen so far\n        # if the character is seen again, move the left pointer to the index of the character\n        # update the max length\n        # keep track of the max length seen so far\n        # if the character is not in the set, add it to the set\n        # update the max length\n        # return the max length\n        \n        seen = set()\n        l = 0\n        max_len = 0\n        \n        for r in range(len(s)):\n            if s[r] in seen:\n                max_len = max(max_len, r - l)\n                l = seen[s[r]] + 1\n            seen[s[r]] = r\n            \n        return max(max_len, len(s) - l)"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = collections.Counter(words)\n        total_len = len(words) * word_len\n        \n        res = []\n        for i in range(word_len):\n            left = word_count.copy()\n            curr_len = 0\n            start = i\n            for end in range(i, len(s) - total_len + 1, word_len):\n                curr_word = s[end:end + word_len]\n                if curr_word not in word_count:\n                    left = word_count.copy()\n                    curr_len = 0\n                    start = end + word_len\n                else:\n                    left[curr_word] -= 1\n                    curr_len += word_len\n                    if left[curr_word] >= 0:\n                        curr_len -= 1\n                    if curr_len == 0:\n                        res.append(start)\n                        left[curr_word] += 1\n                        curr_len += word_len\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        res = 1\n        \n        for i in arr[1:]:\n            if i > max_val:\n                max_val = i\n                res += 1\n        \n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        curr = head\n        \n        while curr:\n            next_node = curr.next\n            curr.next = None\n            prev = dummy\n            while prev.next and prev.next.val < curr.val:\n                prev = prev.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            l, r = i+1, len(nums)-1\n            \n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    \n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    \n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        \n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(1, m + 1):\n            dp[i][0] = i\n        for j in range(1, n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1]) + 1\n        \n        return dp[-1][-1]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        distance = 0\n        \n        while xor:\n            distance += 1\n            xor &= xor - 1\n        \n        return distance"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return ['->'.join([str(root.val), path]) for path in left + right] or [str(root.val)]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, lo, mid, hi):\n            count = 0\n            j = mid + 1\n            for i in range(lo, mid + 1):\n                while j <= hi and nums[i] / 2.0 > nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n            i, j = lo, mid + 1\n            tmp = []\n            while i <= mid and j <= hi:\n                if nums[i] <= nums[j]:\n                    tmp.append(nums[i])\n                    i += 1\n                else:\n                    tmp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                tmp.append(nums[i])\n                i += 1\n            while j <= hi:\n                tmp.append(nums[j])\n                j += 1\n            nums[lo:hi + 1] = tmp\n            return count\n        \n        return merge(nums, 0, len(nums) - 1, 2 ** 31 - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (sx == tx and sy <= ty) or (sy == ty and sx <= tx)"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(v) for v in version1.split('.')]\n        v2 = [int(v) for v in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            v1_i = v1[i] if i < len(v1) else 0\n            v2_i = v2[i] if i < len(v2) else 0\n            if v1_i > v2_i:\n                return 1\n            if v1_i < v2_i:\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # buy at the lowest price, sell at the highest price\n        # if we have a negative profit, reset to 0\n        profit = 0\n        buy = prices[0]\n        \n        for price in prices:\n            if price < buy:\n                buy = price\n            else:\n                profit = max(profit, price - buy)\n        \n        return profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        \n        # greedy: max heap\n        # max heap: courses that end first\n        # if the course that ends first is longer than the duration of the course that ends later,\n        # we can replace the longer course with the shorter course\n        # otherwise, we can take the longer course\n        # the max heap will always have the course that ends first\n        # so the max heap will always have the longest course\n        # if the sum of durations of all courses in the heap is greater than the total duration of the courses,\n        # we can't take any more courses\n        # so we can return the length of the heap\n        # if the course that ends first is shorter than the duration of the course that ends later,\n        # we can take the longer course\n        # so we add the duration of the course that ends later to the sum of durations of all courses in the heap\n        # and remove the shorter course from the heap\n        # the max heap will always have the course that ends first\n        # so the max heap will always have the longest course\n        # if the sum of durations of all courses in the heap is greater than the total duration of the courses,\n        # we can't take any more courses\n        # so we can return the length of the heap\n        # Time: O(nlogn)\n        # Space: O(n)\n        heap = []\n        total = 0\n        for duration, end in courses:\n            heapq.heappush(heap, -duration)\n            total += duration\n            if total > end:\n                total += heapq.heappop(heap)\n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev, curr = dummy, head\n        \n        while curr:\n            tail = prev\n            for _ in range(k):\n                if not curr:\n                    return dummy.next\n                curr = curr.next\n            tail.next, curr, prev.next = curr, prev.next, curr\n            prev = tail\n        \n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(s) % len(s[::-1]) != 0:\n        #     return False\n        # return s[len(s)//len(s[::-1])] * (len(s)//len(s[::-1])) == s"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR of a number with itself is 0\n        # XOR of a number with 0 is the number itself\n        # so we can use XOR to find the single number\n        single = 0\n        for num in nums:\n            single ^= num\n        \n        return single"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the frequency of each letter in target\n        # 2. Use a set to store the frequency of letters in target\n        # 3. Use a dict to store the minimum number of stickers needed to make each letter in target\n        # 4. Iterate over stickers and update the dict with the frequency of letters in sticker + target\n        # 5. Return the value in the dict if it exists, otherwise return -1\n        \n        target_freq = {c: target.count(c) for c in set(target)}\n        sticker_freq = {c: sum(sticker.count(c) for sticker in stickers) for c in set(target)}\n        \n        dp = {0: 0}\n        \n        for freq in sorted(sticker_freq.values()):\n            dp_next = collections.defaultdict(int)\n            for freq_needed, count in dp.items():\n                for freq_available in sticker_freq.values() + [freq_needed] - freq:\n                    dp_next[freq_needed + freq_available] = min(dp_next[freq_needed + freq_available], count + freq_available)\n            dp = dp_next\n            \n        return dp.get(target_freq.get(0), -1)"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [1] * n\n        \n        for i in range(1, n):\n            dp[i] = dp[i - 1] + 1\n            for j in range(i - 1, -1, -1):\n                if s[i] == s[j]:\n                    dp[i] = dp[j] - 1\n                else:\n                    break\n        \n        return dp[-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_map = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        prev = 0\n        \n        for c in s[::-1]:\n            curr = roman_map[c]\n            total, prev = (total, curr) if curr > prev else (total - curr, curr)\n        \n        return total"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        res = []\n        \n        for i, n in en.umerate(nums):\n            if q and q[0] == i - k:\n                q.popleft()\n            while q and nums[q[-1]] <= n:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        \n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        lo, hi = 0, m\n        half_len = (m + n + 1) // 2\n        \n        while lo <= hi:\n            mid2 = (lo + hi) // 2\n            mid1 = half_len - mid2\n            \n            if nums1[mid1 - 1] > nums2[mid2]:\n                hi = mid1 - 1\n            elif nums2[mid2 - 1] > nums1[mid1]:\n                lo = mid1 + 1\n            else:\n                return (max(nums1[mid1 - 1], nums2[mid2 - 1]) + min(nums1[mid1], nums2[mid2])) / 2.0 if (m + n) % 2 else (max(nums1[mid1 - 1], nums2[mid2 - 1]) + min(nums1[mid1 - 1], nums2[mid2 - 1])) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        # return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        row = [1, 1]\n        \n        for i in range(1, rowIndex):\n            row = [1] + [row[i] + row[i+1] for i in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum):\n            if not root:\n                return []\n            \n            if not root.left and not root.right and root.val == targetSum:\n                return [[targetSum]]\n            \n            left = dfs(root.left, targetSum - root.val)\n            right = dfs(root.right, targetSum - root.val)\n            \n            return [[root.val] + path for path in left + right]\n        \n        return dfs(root, targetSum)"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the sqrt of area\n        # 2. find the largest number that can divide area\n        # 3. return [area/largest, largest]\n        # 4. if area is perfect square, return [area, 1]\n        # 5. else return [area, area/largest]\n        \n        if area == 1:\n            return [1, 1]\n        \n        sqrt = int(math.sqrt(area))\n        if sqrt * sqrt == area:\n            return [area, 1]\n        \n        return [area, area // sqrt]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # BFS\n        if endWord not in wordList:\n            return []\n        \n        wordList = set(wordList)\n        queue = collections.deque([beginWord])\n        visited = {beginWord: 1}\n        found = False\n        res = []\n        \n        while queue:\n            curr_len = len(queue)\n            for _ in range(curr_len):\n                curr = queue.popleft()\n                if curr == endWord:\n                    found = True\n                for i in range(len(curr)):\n                    for c in string.ascii_lowercase:\n                        next_word = curr[:i] + c + curr[i+1:]\n                        if next_word in wordList and (next_word not in visited or visited[next_word] == visited[curr] + 1):\n                            queue.append(next_word)\n                            visited[next_word] = visited[curr] + 1\n            if found:\n                res.append([endWord] + [prev for prev, dist in visited.items() if dist*2 - 1 == len(queue)])\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            \n            left = height(root.left)\n            if left == -1:\n                return -1\n            \n            right = height(root.right)\n            if right == -1:\n                return -1\n            \n            if abs(left - right) > 1:\n                return -1\n            \n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and not (n & (n - 1))"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = len(res) - 1\n            if nums[i] != nums[i - 1]:\n                res += res[j] + [nums[i]]\n            else:\n                while j >= 0 and nums[i] == nums[j]:\n                    res.append(res[j] + [nums[i]])\n                    j -= 1\n            i += 1\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # stack to store the index of the heights\n        stack = []\n        # max area\n        max_area = 0\n        # iterate over the heights\n        for i, h in en\n            # if the height is 0, pop the stack and update max area\n            if not stack or h >= heights[stack[-1]]:\n                stack.append(i)\n            else:\n                # pop the stack until the height is smaller than the current height\n                while stack and h < heights[stack[-1]]:\n                    max_area = max(max_area, heights[stack.pop()] * (i - stack[-1] - 1))\n                # push the current index to the stack\n                stack.append(i)\n        # pop the remaining elements from the stack\n        while stack:\n            max_area = max(max_area, heights[stack.pop()] * (len(heights) - stack[-1] - 1))\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    sign = 1 if first > 0 else -1\n                    stack.append(sign * second // first)"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), -float('inf'), -float('inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        return area == (x_max - x_min) * (y_max - y_min)"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = ''\n        while columnNumber > 0:\n            columnNumber, remainder = divmod(columnNumber - 1, 26)\n            ans = chr(65 + remainder) + ans\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        nums = [board[i][j] for i in range(2) for j in (board[i] if board[i][0] != 0 else [0, 1, 2])]\n        \n        # convert to a 1D array of 0s and 1s\n        zero = nums.index(0)\n        nums[zero] = nums[zero ^ 1] = nums[zero ^ 3] = 1\n        \n        # convert to a 1D array of 0s and 1s\n        nums = [nums[i * 3 + j] for i in range((nums[2] - 1) // 2) for j in (0, 1)] + [nums[2]]\n        \n        # convert to a 1D array of 0s and 1s\n        nums = [nums[i * 3 + j] for i in range((nums[1] - 1) // 3) for j in (0, 1, 2)] + [nums[1]]\n        \n        # convert to a 1D array of 0s and 1s\n        nums = [nums[i * 3 + j] for i in range((nums[0] - 1) // 4) for j in (0, 1, 2, 3)] + [nums[0]]\n        \n        # convert to a 1D array of 0s and 1s\n        nums = [nums[i * 4 + j] for i in range((nums[3] - 1) // 8) for j in (0, 1, 2, 3, 4)] + [nums[3]]\n        \n        # convert to a 1D array of 0s and 1s\n        nums = [nums[i * 8 + j] for i in range((nums[4] - 1) // 16) for j in (0, 1, 2, 3, 4, 5, 6, 7)] + [nums[4]]\n        \n        # convert to a 1D array of 0s and 1s\n        nums = [nums[i * 16 + j] for i in range((nums[5] - 1) // 32) for j in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)] + [nums[5]]\n        \n        # convert to a 1D array of 0s and 1s\n        nums = [nums[i * 32 + j] for i in range((nums[6] - 1) // 64) for j in (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87,"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for c1, c2 in zip(s, t):\n            if c1 in s_to_t and s_to_t[c1] != c2:\n                return False\n            if c2 in t_to_s and t_to_s[c2] != c1:\n                return False\n            s_to_t[c1] = c2\n            t_to_s[c2] = c1\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot point\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        # find the target\n        left, right = 0, len(nums) - 1\n        if nums[left] == target or nums[right] == target:\n            return True\n        if nums[left] > target:\n            left = right\n        else:\n            right = left\n        while left <= right:\n            mid = left + (right - left) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [0] * n\n        dp[0] = 1 if obstacleGrid[m-1][n-1] == 0 else 0\n        \n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                elif j + 1 < n:\n                    dp[j] += dp[j+1]\n                    \n        return dp[0]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        one, two = 1, 1\n        \n        for i in range(1, len(s)):\n            curr = int(s[i])\n            if curr == 0:\n                one = 0\n            if s[i - 1] == '1' or (s[i - 1] == '2' and curr <= 6):\n                one, two = two, one + two\n            else:\n                one = two\n        \n        return one"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left, right = i+1, len(nums)-1\n            \n            while left < right:\n                curr_sum = nums[i] + nums[left] + nums[right]\n                \n                if curr_sum == target:\n                    return target\n                \n                if abs(curr_sum - target) < abs(closest - target):\n                    closest = curr_sum\n                \n                if curr_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1_dict = collections.Counter(nums1)\n        res = []\n        \n        for num in nums2:\n            if num in nums1_dict and nums1_dict[num] > 0:\n                res.append(num)\n                nums1_dict[num] -= 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the min difference\n        \n        # inorder traversal"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        count = {}\n        max_count = 0\n        res = []\n        \n        def dfs(node):\n            if not node:\n                return\n            \n            if node.val in count:\n                count[node.val] += 1\n            else:\n                count[node.val] = 1\n            \n            nonlocal max_count\n            max_count = max(max_count, count[node.val])\n            \n            dfs(node.left)\n            dfs(node.right)\n        \n        dfs(root)\n        \n        for val, cnt in count.items():\n            if cnt == max_count:\n                res.append(val)\n        \n        return res"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle not in haystack:\n            return -1\n        \n        return haystack.find(needle)"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lower, upper, and digit\n        lower, digit, special = 0, 0, 0\n        for c in password:\n            if c.islower():\n                lower += 1\n            elif c.isdigit():\n                digit += 1\n            else:\n                special += 1\n        \n        # 2. If the length is less than 6, add 6 - length\n        if len(password) < 6:\n            return max(3, 1 + lower + (digit - 2 * (digit > 1)))\n        \n        # 3. If the length is more than 20, remove the excess\n        special, extra = divmod(len(password) - lower, 3)\n        lower, digit = lower - special, digit - extra\n        return max(lower, 6 - len(password)) + max(extra, 1)"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 2 * 5 = 10\n        # 2 * 2 * 5 = 25\n        # 2 * 2 * 2 * 5 = 125\n        # 2 * 2 * 2 * 2 * 5 = 625\n        # 2 * 2 * 2 * 2 * 2 * 5 = 3125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 5 = 15625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 78125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 390625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 1953125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 9765625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 48828125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 244140625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 1220703125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 6103015625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 30517578125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 152587890625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 762939453125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 3814697265625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 19073486328125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 95367431640625\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 476837158203125\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 *"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        idx = 0\n        down = True\n        \n        for c in s:\n            res[idx] += c\n            if idx == 0:\n                down = True\n            elif idx == numRows - 1:\n                down = False\n            if down:\n                idx += 1\n            else:\n                idx -= 1\n                \n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                left_max = max(left_max, height[left])\n                res += left_max - height[left]\n                left += 1\n            else:\n                right_max = max(right_max, height[right])\n                res += right_max - height[right]\n                right -= 1\n                \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## use the nums array as a hashmap\n        ## iterate over the nums array and mark the index of each number as negative\n        ## iterate over the nums array again and add all the positive numbers to the result\n        ## the numbers that are positive are the missing numbers\n        n = len(nums)\n        for i in nums:\n            idx = abs(i) - 1\n            if nums[idx] > 0:\n                nums[idx] *= -1\n        \n        return [i + 1 for i in range(n) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # O(nlogn) time, O(n) space\n        # use a sorted list to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element\n        # use a dict to keep track of the number of smaller elements to the right of each element"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = cur = 2\n        for s, e in intervals:\n            if s <= cur:\n                cur = e\n            else:\n                cur = e - 1\n                ans += 1\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right or left.val != right.val:\n                return False\n            \n            return isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. use a dict to store the count of each element\n        # 2. use a stack to store the count of the previous element\n        # 3. use a regex to parse the formula\n        # 4. use a defaultdict to store the count of the current element\n        # 5. use a defaultdict to store the count of the previous element\n        # 6. use a defaultdict to store the count of the current element\n        # 7. use a defaultdict to store the count of the previous element\n        # 8. use a defaultdict to store the count of the current element\n        # 9. use a defaultdict to store the count of the previous element\n        # 10. use a defaultdict to store the count of the current element\n        # 11. use a defaultdict to store the count of the previous element\n        # 12. use a defaultdict to store the count of the current element\n        # 13. use a defaultdict to store the count of the previous element\n        # 14. use a defaultdict to store the count of the current element\n        # 15. use a defaultdict to store the count of the previous element\n        # 16. use a defaultdict to store the count of the current element\n        # 17. use a defaultdict to store the count of the previous element\n        # 18. use a defaultdict to store the count of the current element\n        # 19. use a defaultdict to store the count of the previous element\n        # 20. use a defaultdict to store the count of the current element\n        # 21. use a defaultdict to store the count of the previous element\n        # 22. use a defaultdict to store the count of the current element\n        # 23. use a defaultdict to store the count of the previous element\n        # 24. use a defaultdict to store the count of the current element\n        # 25. use a defaultdict to store the count of the previous element\n        # 26. use a defaultdict to store the count of the current element\n        # 27. use a defaultdict to store the count of the previous element\n        # 28. use a defaultdict to store the count of the current element\n        # 29. use a defaultdict to store the count of the previous element\n        # 30. use a defaultdict to store the count of the current element\n        # 31. use a defaultdict to store the count of the previous element\n        # 32. use a defaultdict to store the count of the current element\n        # 33. use a defaultdict to store the count of the previous element\n        # 34. use a defaultdict to store the count of the current element\n        # 35. use a defaultdict to store the count of the previous element\n        # 36. use a defaultdict to store the count of the current element\n        # 37. use a defaultdict to store the count of the previous element\n        # 38. use a defaultdict to store the count of the current element\n        # 39. use a defaultdict to store the count of the previous element\n        # 40. use a defaultdict to store the count of the current element\n        # 41. use a defaultdict to store the count of the previous element\n        # 42. use a defaultdict to store the count of the current element\n        # 43. use a defaultdict to store the count of the previous element\n        # 44. use a defaultdict to store the count of the current element\n        # 45. use a defaultdict to store the count of the previous element\n        # 46. use a defaultdict to store the count of the current element\n        # 47. use a defaultdict to store the count of the previous element\n        # 48. use a defaultdict to store the count of the current element\n        # 49. use a defaultdict to store the count of the previous element\n        # 50. use a defaultdict to store the count of the current element\n        # 51. use a defaultdict to store the count of the previous element\n        # 52. use a defaultdict to store the count of the current element\n        # 53. use a defaultdict to store the count of the previous element\n        # 54. use a defaultdict to store the count of the current element\n        # 55. use a defaultdict to store the count of"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 4^0 = 1\n        # 4^1 = 4\n        # 4^2 = 16\n        # 4^3 = 64\n        # 4^4 = 256\n        # 4^5 = 1024\n        # 4^6 = 4096\n        # 4^7 = 16384\n        # 4^8 = 65536\n        # 4^9 = 262144\n        # 4^10 = 1048576\n        # 4^11 = 4194304\n        # 4^12 = 16777216\n        # 4^13 = 67108864\n        # 4^14 = 268435456\n        # 4^15 = 1073741824\n        # 4^16 = 4294967296\n        # 4^17 = 16777216000\n        # 4^18 = 68719476736\n        # 4^19 = 274877906944\n        # 4^20 = 1099511627776\n        # 4^21 = 4398046511104\n        # 4^22 = 17592186044416\n        # 4^23 = 70368744177664\n        # 4^24 = 288230376151552\n        # 4^25 = 1152921504606848\n        # 4^26 = 4611686018428352\n        # 4^27 = 18446744073709552\n        # 4^28 = 73786976291432328\n        # 4^29 = 295147905170947840\n        # 4^30 = 1180548935565835200\n        # 4^31 = 4723341548783371520\n        # 4^32 = 18950542117525639040\n        # 4^33 = 75497615895091752960\n        # 4^34 = 303488835576540311040\n        # 4^35 = 1258999051152721644160\n        # 4^36 = 4875556256769363276800\n        # 4^37 = 19511115030355888940800\n        # 4^38 = 77777777777777777777777\n        # 4^39 = 31557423355742335574233\n        # 4^40 = 1283729897903921511529600\n        # 4^41 = 4729395554872460248724600\n        # 4^42 = 18950542117525639040\n        # 4^43 = 75497615895091752960\n        # 4^44 = 303488835576540311040\n        # 4^45 = 1258999051152721644"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        res = []\n        self.helper(res, 0, 0, n, \"\")\n        return res\n        \n    def helper(self, res, left, right, n, curr):\n        if left == n and right == n:\n            res.append(curr)\n            return\n        \n        if left < n:\n            self.helper(res, left + 1, right, n, curr + \"(\")\n        if right < left:\n            self.helper(res, left, right + 1, n, curr + \")\")"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > n:\n            return n\n        \n        # initialize the result and the current sum\n        res, curr_sum = 0, 1\n        \n        # iterate over the nums array\n        for num in nums:\n            # if the current sum is greater than the current number,\n            # we need to add a new patch\n            if curr_sum <= num:\n                curr_sum += num\n            else:\n                # otherwise, we need to add the current sum - 1 to the current sum\n                curr_sum += curr_sum\n                res += 1\n                \n            # if the current sum exceeds the target, we need to add a new patch\n            if curr_sum > n:\n                break\n            \n        # if the current sum is still less than the target, we need to add the remaining number to the current sum\n        return res + (n >= curr_sum)"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # stack to store the index of the last seen '('\n        stack = [-1]\n        max_len = 0\n        \n        for i, c in enumerate(s):\n            if c == '(':\n                stack.append(i)\n            else:\n                stack.pop()\n                if not stack:\n                    stack.append(i)\n                else:\n                    max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = []\n        if numerator < 0 == denominator < 0:\n            res.append('-')\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        res.append(str(numerator // denominator))\n        numerator %= denominator\n        if numerator == 0:\n            return ''.join(res)\n        \n        res.append('.')\n        seen = {numerator: len(res)}\n        numerator *= 10\n        while numerator % denominator:\n            res.append(str(numerator // denominator))\n            numerator %= denominator\n            if numerator in seen:\n                res.insert(seen[numerator], '(')\n                res.append(')')\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n        \n        return ''.join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        \n        # split the list into two halves\n        slow.next, slow = None, head\n        return self.merge(self.sortList(slow), self.sortList(slow))"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by width and height.\n        # Then, we can use the longest increasing subsequence (LIS) algorithm.\n        # O(n log n) time and O(n) space.\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        nums = [x[1] for x in envelopes]\n        return self.lengthOfLIS(nums)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        row0 = any(matrix[i][0] == 0 for i in range(m))\n        col0 = any(matrix[0][j] == 0 for j in range(n))\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty or the n is larger than the length of the list, return None\n        if not head or n <= 0:\n            return None\n        \n        # initialize the dummy node\n        dummy = ListNode(0, head)\n        \n        # initialize the slow and fast pointers\n        slow = dummy\n        fast = head\n        \n        # move the fast pointer n steps ahead\n        for _ in range(n):\n            fast = fast.next\n        \n        # move the slow pointer until the fast pointer reaches the end of the list\n        while fast:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node at the nth position from the end\n        slow.next = slow.next.next\n        \n        # return the updated head\n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        curr = 0\n        ans = 0\n        for m in machines:\n            curr += m - avg\n            ans = max(ans, curr)\n            curr = max(curr, -m - curr)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # if k == 1:\n        #     return min(m, n)\n        \n        # count = 0\n        # curr = 1\n        # while curr <= m * n:\n        #     count += min(n, k // curr)\n        #     if curr >= m * n:\n        #         break\n        #     curr *= n\n        #     k -= count\n        # return curr\n        \n        # binary search\n        low, high = 1, m * n\n        while low < high:\n            mid = low + (high - low) // 2\n            count = mid // n * n + min(mid // n, m)\n            if count >= k:\n                high = mid\n            else:\n                low = mid + 1\n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1, list2 = list1.next, list2\n        \n        head = list1\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                list1 = list1.next\n            else:\n                list1.next, list2 = list2, list1\n                list1 = list1.next\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                heights[j] = heights[j] + 1 if matrix[i][j] == '1' else 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = [-1]\n        max_area = 0\n        \n        for i, height in enumerate(heights):\n            while heights[stack[-1]] > height:\n                max_area = max(max_area, heights[stack.pop()] * (i - stack[-1] - 1))\n            stack.append(i)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in sorted(nums):\n            res += [curr + [num] for curr in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if nums[left] < nums[right]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] < nums[right]:\n        #         right = mid\n        #     elif nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right -= 1\n        # return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s or s[0] not in {'+', '-'} and s[0] not in {'e', 'E'} and s[0] not in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'}:\n            return False\n        \n        if s[0] in {'+', '-'}:\n            s = s[1:]\n        if not s or s[0] not in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s[0] != '.':\n            return False\n        \n        if s[0] == '.':\n            s = s[1:]\n            if not s or s[0] not in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s[-1] != 'e' and s[-1] != 'E':\n                return False\n            if s[-1] == 'e' or s[-1] == 'E':\n                s = s[:-1]\n                if s and s[0] in {'+', '-'}:\n                    s = s[1:]\n                if not s or s[0] not in {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'} and s[-1] != '.':\n                    return False\n        \n        if s and s[-1] in {'+', '-'}:\n            s = s[:-1]\n        \n        return s.isdigit()"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_map = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I',\n        }\n        \n        result = ''\n        \n        for key in sorted(roman_map.keys(), reverse=True):\n            result += roman_map[key] * (num // key)\n            num %= key\n            \n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # \n        # Time: O(n)\n        # Space: O(1)\n        \n        # XOR of two empty strings is 0\n        # XOR of two non-empty strings is the character itself\n        # So we can use XOR to find the difference\n        # \n        # 0 ^ a = a\n        # a ^ a = 0\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n = a ^ a ^ b ^ b ^ ... ^ n\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ a ^ b ^ b ^ ... ^ n = n\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n = a\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m = m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m = n\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n = m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m = m ^ n\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m = m ^ n ^ m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m ^ m = m ^ n ^ m ^ m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m ^ m ^ m = m ^ n ^ m ^ m ^ m ^ m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m ^ m ^ m ^ m ^ m = m ^ n ^ m ^ m ^ m ^ m ^ m ^ m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m = m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m = m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m = m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m\n        # \n        # So we can use XOR to find the difference\n        # \n        # a ^ b ^ c ^ ... ^ n ^ n ^ m ^ m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m = m ^ n ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m ^ m\n        # \n        # So"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i, j)\n            return None\n        \n        def is_valid(board, num, pos):\n            row, col = pos\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            for j in range(9):\n                if board[row][j] == num:\n                    return False\n            box_row, box_col = row // 3 * 3, col // 3 * 3\n            for i in range(box_row, box_row + 3):\n                for j in range(box_col, box_col + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        empty_space = find_empty_space(board)\n        if empty_space is None:\n            return True\n        row, col = empty_space\n        \n        for num in '123456789':\n            if is_valid(board, num, (row, col)):\n                board[row][col] = num\n                if solve_sudoku(board):\n                    return True\n                board[row][col] = '.'\n        \n        return False"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node that is out of order\n        first_out_of_order = second_out_of_order = prev = None\n        \n        # traverse the tree in-order\n        while root:\n            if root.left:\n                # find the predecessor\n                pred = root.left\n                while pred.right and pred.right != root:\n                    pred = pred.right\n                \n                if pred.right:\n                    # we've found the first out of order node\n                    if first_out_of_order is None:\n                        first_out_of_order = pred\n                    \n                    # we've found the second out of order node\n                    second_out_of_order = root\n                \n                # restore the in-order predecessor\n                pred.right = root\n                root = root.left\n            \n            else:\n                # we've found the first out of order node\n                if first_out_of_order is None:\n                    first_out_of_order = root\n                \n                # we've found the second out of order node\n                if first_out_of_order.val > root.val:\n                    second_out_of_order = root\n                \n                # restore the in-order predecessor\n                root = root.right\n            \n            # swap the values of the nodes\n            first_out_of_order.val, second_out_of_order.val = second_out_of_order.val, first_out_of_order.val\n            \n            # no need to keep track of the predecessor, since we've swapped the values\n            first_out_of_order = second_out_of_order = root"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head or not head.next:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            tmp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = tmp\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 0, num\n        while l <= r:\n            m = (l + r) // 2\n            if m * m == num:\n                return True\n            elif m * m > num:\n                r = m - 1\n            else:\n                l = m + 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0]\n        for i in range(1, n + 1):\n            ans.append(ans[i & (i - 1)] + 1)\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0, head)\n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n                \n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        n = len(s1)\n        dp = {}\n        \n        for i in range(1, n):\n            if s1[:i] in dp and s2[n-i:] in dp[s1[:i]]:\n                return True\n            if s1[n-i:] in dp and s2[:i] in dp[s1[n-i:]]:\n                return True\n            \n            dp[s1[:i]] = s2[n-i:]\n            dp[s1[n-i:]] = s2[:i]\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..' and stack:\n                stack.pop()\n            elif p and p != '..':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = word\n        \n        res = set()\n        m, n = len(board), len(board[0])\n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        \n        def dfs(i, j, node):\n            c = board[i][j]\n            if c not in node:\n                return\n            \n            word = node.pop(c, '#')\n            if word:\n                res.add(word)\n            for di, dj in directions:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n:\n                    dfs(ni, nj, node[c])\n            node[c] = word\n        \n        for i in xrange(m):\n            for j in xrange(n):\n                dfs(i, j, trie)\n        \n        return list(res)"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        count_s, count_t = {}, {}\n        \n        for c in s:\n            count_s[c] = 1 + count_s.get(c, 0)\n        \n        for c in t:\n            count_t[c] = 1 + count_t.get(c, 0)\n        \n        for c in count_s:\n            if count_s[c] != count_t.get(c, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        seen = set()\n        for row in board:\n            if any(c not in seen and c != '.' for c in row):\n                seen.add(c)\n            else:\n                return False\n        \n        # 2. check columns\n        seen = set()\n        for col in zip(*board):\n            if any(c not in seen and c != '.' for c in col):\n                seen.add(c)\n            else:\n                return False\n        \n        # 3. check 3x3 squares\n        seen = set()\n        for i in (1, 4, 7):\n            for j in (1, 4, 7):\n                square = {board[i][j], board[i+1][j], board[i+2][j]}\n                if any(c not in seen and c != '.' for c in square):\n                    seen.add(c)\n                else:\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n                \n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the whole string\n        s = s.strip()[::-1]\n        \n        # reverse each word\n        words = s.split(' ')\n        return ' '.join(word[::-1] for word in words if word)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for c in columnTitle:\n            res = res * 26 + (ord(c) - ord('A') + 1)\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        total = candies[-1]\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n            total += candies[i]\n        \n        return total"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second = slow.next\n        slow.next = None\n        second = self.reverseList(second)\n        \n        # merge the first and second halves\n        first = head\n        while second:\n            temp = first.next\n            first.next = second\n            first = temp\n            second = second.next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        p2s = {}\n        s2p = {}\n        \n        for p, s in zip(pattern, s):\n            if p in p2s and p2s[p] != s:\n                return False\n            if s in s2p and s2p[s] != p:\n                return False\n            p2s[p] = s\n            s2p[s] = p\n        \n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += self.permute(nums[:i] + nums[i+1:])\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        lo, hi = 0, m * n - 1\n        \n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if matrix[mid // n][mid % n] < target:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n                \n        return lo % n != 0"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode(0)\n        curr = dummy\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2's complement\n        # 2. 2's complement ^ num - 1\n        #   2's complement is the number with all bits set to 1\n        #   2's complement ^ num - 1 is the number with all bits set to 0\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num - 1 is the number with all bits flipped\n        #   2's complement ^ num -"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        diff = nums[1] - nums[0]\n        count = 0\n        res = 0\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i - 1] == diff:\n                count += 1\n                res += count\n            else:\n                diff = nums[i] - nums[i - 1]\n                count = 0\n        \n        return res"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res, cur, curLen = [], [], 0\n        for word in words:\n            if curLen + len(word) + len(cur) > maxWidth:\n                if len(cur) == 1:\n                    res.append(cur[0] + ' ' * (maxWidth - curLen))\n                else:\n                    numSpaces, extraSpaces = (maxWidth - curLen) // (len(cur) - 1), (maxWidth - curLen) % (len(cur) - 1)\n                    res.append(''.join(cur[i] + ' ' * numSpaces + (' ' if i < len(cur) - 1 else '') for i in range(len(cur))) + ' ' * extraSpaces)\n                cur, curLen = [], 0\n            cur += [word]\n            curLen += len(word)\n        return res + [' '.join(cur) + ' ' * (maxWidth - curLen - len(cur) + 1)] if cur else [' ' * maxWidth]"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.left:\n                    stack.append(node.left)\n                if node.right:\n                    stack.append(node.right)\n                res.append(node.val)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        word_set = set(words)\n        ans = []\n        \n        for word in words:\n            word_len = len(word)\n            if word_len == 0:\n                continue\n            cur_len = 0\n            while cur_len < word_len:\n                if word_len - cur_len in word_set:\n                    if (cur_len > 0 and word_len - cur_len in word_set):\n                        ans.append(word)\n                        break\n                cur_len += len(word)"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        sign = '-' if num < 0 else ''\n        num = abs(num)\n        \n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return sign + res if res else '0'"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen per row\n        # 2. 1 queen per col\n        # 3. 1 queen per diagonal\n        # 4. 1 queen per anti-diagonal\n        # 5. 1 queen per row + col + diagonal + anti-diagonal\n        # 6. 1 queen per row + col - diagonal + anti-diagonal\n        # 7. 1 queen per row - col + diagonal + anti-diagonal\n        # 8. 1 queen per row - col - diagonal + anti-diagonal\n        # 9. 1 queen per row + col - diagonal - anti-diagonal\n        # 10. 1 queen per row - col - diagonal - anti-diagonal\n        # 11. 1 queen per row + col + diagonal - anti-diagonal\n        # 12. 1 queen per row + col - diagonal - anti-diagonal\n        # 13. 1 queen per row - col + diagonal - anti-diagonal\n        # 14. 1 queen per row - col - diagonal - anti-diagonal\n        # 15. 1 queen per row + col + diagonal + anti-diagonal\n        # 16. 1 queen per row + col - diagonal - anti-diagonal\n        # 17. 1 queen per row - col + diagonal - anti-diagonal\n        # 18. 1 queen per row - col - diagonal - anti-diagonal\n        # 19. 1 queen per row + col + diagonal + anti-diagonal\n        # 20. 1 queen per row + col - diagonal - anti-diagonal\n        # 21. 1 queen per row - col + diagonal + anti-diagonal\n        # 22. 1 queen per row - col - diagonal + anti-diagonal\n        # 23. 1 queen per row + col + diagonal - anti-diagonal\n        # 24. 1 queen per row + col - diagonal + anti-diagonal\n        # 25. 1 queen per row - col + diagonal - anti-diagonal\n        # 26. 1 queen per row - col - diagonal - anti-diagonal\n        # 27. 1 queen per row + col + diagonal + anti-diagonal\n        # 28. 1 queen per row + col - diagonal - anti-diagonal\n        # 29. 1 queen per row - col + diagonal - anti-diagonal\n        # 30. 1 queen per row - col - diagonal + anti-diagonal\n        # 31. 1 queen per row + col + diagonal - anti-diagonal\n        # 32. 1 queen per row + col - diagonal + anti-diagonal\n        # 33. 1 queen per row - col + diagonal + anti-diagonal\n        # 34. 1 queen per row - col - diagonal + anti-diagonal\n        # 35. 1 queen per row + col + diagonal - anti-diagonal\n        # 36. 1 queen per row + col - diagonal + anti-diagonal\n        # 37. 1 queen per row - col + diagonal + anti-diagonal\n        # 38. 1 queen per row - col - diagonal + anti-diagonal\n        # 39. 1 queen per row + col + diagonal - anti-diagonal\n        # 40. 1 queen per row + col - diagonal - anti-diagonal\n        # 41. 1 queen per row - col + diagonal - anti-diagonal\n        # 42. 1 queen per row - col - diagonal - anti-diagonal\n        # 43. 1 queen per row + col + diagonal + anti-diagonal\n        # 44. 1 queen per row + col - diagonal - anti-diagonal\n        # 45. 1 queen per row - col + diagonal - anti-diagonal\n        # 46. 1 queen per row - col - diagonal - anti-diagonal\n        # 47. 1 queen per row + col + diagonal + anti-diagonal\n        # 48. 1 queen per row + col - diagonal - anti-diagonal\n        # 49. 1 queen per row - col + diagonal - anti-diagonal\n        # 50. 1 queen per row - col - diagonal + anti-diagonal\n        # 51. 1 queen per row + col + diagonal -"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        board = [['.' for _ in range(n)] for _ in range(n)]\n        res = []\n        def backtrack(row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(row + 1)\n                    board[row][col] = '.'\n        backtrack(0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return False\n        \n        if not board:\n            return False\n        \n        m, n = len(board), len(board[0])\n        visited = set()\n        \n        for i in range(m):\n            for j in range(n):\n                if self.dfs(board, word, i, j, visited):\n                    return True\n        \n        return False\n    \n    def dfs(self, board, word, i, j, visited):\n        if word[0] != board[i][j]:\n            return False\n        \n        if len(word) == 1:\n            return True\n        \n        visited.add((i, j))\n        \n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        for di, dj in directions:\n            new_i, new_j = i + di, j + dj\n            if 0 <= new_i < len(board) and 0 <= new_j < len(board[0]) and (new_i, new_j) not in visited:\n                if self.dfs(board, word[1:], new_i, new_j, visited):\n                    return True\n        \n        visited.remove((i, j))\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # two pointers\n        p1 = m - 1\n        p2 = n - 1\n        p = m + n - 1\n        \n        while p1 >= 0 and p2 >= 0:\n            if nums1[p1] > nums2[p2]:\n                nums1[p] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[p] = nums2[p2]\n                p2 -= 1\n            p -= 1\n        \n        # if nums1 is empty, just copy nums2\n        nums1[:p2 + 1] = nums2[:p2 + 1]"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # O(n) time, O(1) space\n        first, second, third = float('-inf'), float('-inf'), float('-inf')\n        \n        for num in nums:\n            if num > first:\n                first, second, third = num, first, second\n            elif num > second and num < first:\n                second, third = num, second\n            elif num > third and num < second:\n                third = num\n        \n        return third if third != float('-inf') else first"}]}