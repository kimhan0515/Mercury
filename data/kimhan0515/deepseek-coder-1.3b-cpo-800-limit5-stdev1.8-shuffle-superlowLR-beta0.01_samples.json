{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        \n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        \n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        \n        return dp[-1][-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        nums.sort()\n        \n        # 2. \uccab\ubc88\uc9f8 \uc218\uac00 1\uc774\uba74 1\uc744 \ubc18\ud658\n        if nums[0] == 1:\n            return 1\n        \n        # 3. \uccab\ubc88\uc9f8 \uc218\uac00 0\uc774\uba74 1\uc744 \ubc18\ud658\n        if nums[0] == 0:\n            return 1\n        \n        # 4. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] > 1:\n            return 1\n        \n        # 5. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \uc791\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] < 1:\n            return 1\n        \n        # 6. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 7. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \uc791\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] < 1:\n            return 1\n        \n        # 8. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 9. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 10. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 11. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 12. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 13. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 14. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4 \ud06c\uac70\ub098 \uac19\uc73c\uba74 1\uc744 \ubc18\ud658\n        if nums[0] >= 1:\n            return 1\n        \n        # 15. \uccab\ubc88\uc9f8 \uc218\uac00 1\ubcf4\ub2e4"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 1, 2, 3, ..., n\n        # 2. 1, 2, 3, ..., n-1\n        # 3. 1, 2, 3, ..., n-2\n        # 4. 1, 2, 3, ..., n-3\n        # 5. 1, 2, 3, ..., n-4\n        # 6. 1, 2, 3, ..., n-5\n        # 7. 1, 2, 3, ..., n-6\n        # 8. 1, 2, 3, ..., n-7\n        # 9. 1, 2, 3, ..., n-8\n        # 10. 1, 2, 3, ..., n-9\n        # 11. 1, 2, 3, ..., n-10\n        # 12. 1, 2, 3, ..., n-11\n        # 13. 1, 2, 3, ..., n-12\n        # 14. 1, 2, 3, ..., n-13\n        # 15. 1, 2, 3, ..., n-14\n        # 16. 1, 2, 3, ..., n-15\n        # 17. 1, 2, 3, ..., n-16\n        # 18. 1, 2, 3, ..., n-17\n        # 19. 1, 2, 3, ..., n-18\n        # 20. 1, 2, 3, ..., n-19\n        # 21. 1, 2, 3, ..., n-20\n        # 22. 1, 2, 3, ..., n-21\n        # 23. 1, 2, 3, ..., n-22\n        # 24. 1, 2, 3, ..., n-23\n        # 25. 1, 2, 3, ..., n-24\n        # 26. 1, 2, 3, ..., n-25\n        # 27. 1, 2, 3, ..., n-26\n        # 28. 1, 2, 3, ..., n-27\n        # 29. 1, 2, 3, ..., n-28\n        # 30. 1, 2, 3, ..., n-29\n        # 31. 1, 2, 3, ..., n-30\n        # 32. 1, 2, 3, ..., n-31\n        # 33. 1, 2, 3, ..., n-32\n        # 34. 1, 2, 3, ..., n-33\n        # 35. 1, 2, 3, ..., n-34\n        # 36. 1, 2, 3, ..., n-35\n        # 37. 1, 2, 3, ..., n-36\n        # 38. 1, 2, 3, ..., n-37\n        # 39. 1, 2, 3, ..., n-38\n        # 40. 1, 2, 3, ..., n-39\n        # 41. 1, 2, 3, ..., n-40\n        # 42. 1, 2, 3, ..., n-41\n        # 43. 1, 2, 3, ..., n-42\n        # 44. 1, 2, 3, ..., n-43\n        # 45. 1, 2, 3, ..., n-44\n        # 46. 1, 2, 3, ..., n-45\n        # 47. 1, 2, 3, ..., n-46\n        # 48. 1, 2"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, prod, res):\n            if i == len(num):\n                if curr == target:\n                    res.append(prod)\n                return\n            \n            # if the current number is 0, we can't use it\n            if num[i] == '0':\n                backtrack(i + 1, curr, prev, prod, res)\n                return\n            \n            # if the current number is not 0, we can use it\n            curr = curr * 10 + int(num[i])\n            backtrack(i + 1, curr, curr, prod, res)\n            \n            # if the current number is not 0, we can use it\n            curr = curr - int(num[i]) + prev\n            backtrack(i + 1, curr, prev, prod + '+' + num[i], res)\n            \n            # if the current number is not 0, we can use it\n            curr = curr - int(num[i]) + prev\n            backtrack(i + 1, curr, -int(num[i]), prod + '-' + num[i], res)\n            \n            # if the current number is not 0, we can use it\n            curr = curr - int(num[i]) + prev\n            backtrack(i + 1, curr, prod, prod + '*' + num[i], res)\n            \n        res = []\n        backtrack(0, 0, 0, '', res)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            left = dfs(root.left, curr_sum * 10 + root.val)\n            right = dfs(root.right, curr_sum * 10 + root.val)\n            \n            return left + right\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        if n % k == 0:\n            return s[:k] + '-' + self.licenseKeyFormatting(s[k:], k)\n        else:\n            return s[:n % k] + '-' + self.licenseKeyFormatting(s[n % k:], k)"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Find the total gas and cost\n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        ## 2. If total gas is less than total cost, return -1\n        if total_gas < total_cost:\n            return -1\n        \n        ## 3. Find the starting point\n        start = 0\n        curr_gas = 0\n        \n        for i in range(len(gas)):\n            curr_gas += gas[i] - cost[i]\n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i]*nums[k]*nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if len(p) == 1:\n            return s and (s[0] == p[0] or p[0] == '.')\n        \n        if p[1] != '*':\n            if s and (s[0] == p[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p[1:])\n            else:\n                return False\n        else:\n            while s and (s[0] == p[0] or p[0] == '.'):\n                if self.isMatch(s, p[2:]):\n                    return True\n                s = s[1:]\n            return self.isMatch(s, p[2:])\n        \n        return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            removed = len(nums) - k\n            out = []\n            for num in nums:\n                while removed and out and out[-1] < num:\n                    out.pop()\n                    removed -= 1\n                if out and out[-1] == num:\n                    continue\n                out.append(num)\n            return out\n        \n        def merge(nums1, nums2):\n            out = []\n            i, j = 0, 0\n            while i < len(nums1) and j < len(nums2):\n                if nums1[i] > nums2[j]:\n                    out.append(nums1[i])\n                    i += 1\n                else:\n                    out.append(nums2[j])\n                    j += 1\n            out += nums1[i:]\n            out += nums2[j:]\n            return out\n        \n        def get_max_subarray(nums, k):\n            out = []\n            for i in range(k):\n                if nums:\n                    out.append(nums.pop(0))\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        out = []\n        for i in range(k+1):\n            if i <= len(nums1) and k - i <= len(nums2):\n                out = merge(pick(nums1, i), pick(nums2, k-i))\n                break\n        \n        return out"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i\n                if i**2 != num:\n                    sum += num//i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[-1][-1] = max(1, 1 - dungeon[-1][-1])\n        for i in range(m - 2, -1, -1):\n            dp[i][-1] = max(1, dp[i + 1][-1] - dungeon[i][-1])\n        for j in range(n - 2, -1, -1):\n            dp[-1][j] = max(1, dp[-1][j + 1] - dungeon[-1][j])\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j] = max(1, min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j])\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        vowel_indices = []\n        for i in range(len(s_list)):\n            if s_list[i] in vowels:\n                vowel_indices.append(i)\n        \n        vowel_indices.reverse()\n        for i in range(len(vowel_indices)):\n            s_list[vowel_indices[i]] = s[i]\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. We can use the property of XOR to solve this problem.\n        ## 2. XOR of a number with itself is 0.\n        ## 3. XOR of a number with 0 is the number itself.\n        ## 4. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 5. We can also XOR all the numbers from 0 to n and the missing number will be the XOR of all the numbers.\n        ## 6. We can also XOR all the numbers from 0 to n+1 and the missing number will be the XOR of all the numbers.\n        ## 7. We can also XOR all the numbers from 0 to n+2 and the missing number will be the XOR of all the numbers.\n        ## 8. We can also XOR all the numbers from 0 to n+3 and the missing number will be the XOR of all the numbers.\n        ## 9. We can also XOR all the numbers from 0 to n+4 and the missing number will be the XOR of all the numbers.\n        ## 10. We can also XOR all the numbers from 0 to n+5 and the missing number will be the XOR of all the numbers.\n        ## 11. We can also XOR all the numbers from 0 to n+6 and the missing number will be the XOR of all the numbers.\n        ## 12. We can also XOR all the numbers from 0 to n+7 and the missing number will be the XOR of all the numbers.\n        ## 13. We can also XOR all the numbers from 0 to n+8 and the missing number will be the XOR of all the numbers.\n        ## 14. We can also XOR all the numbers from 0 to n+9 and the missing number will be the XOR of all the numbers.\n        ## 15. We can also XOR all the numbers from 0 to n+10 and the missing number will be the XOR of all the numbers.\n        ## 16. We can also XOR all the numbers from 0 to n+11 and the missing number will be the XOR of all the numbers.\n        ## 17. We can also XOR all the numbers from 0 to n+12 and the missing number will be the XOR of all the numbers.\n        ## 18. We can also XOR all the numbers from 0 to n+13 and the missing number will be the XOR of all the numbers.\n        ## 19. We can also XOR all the numbers from 0 to n+14 and the missing number will be the XOR of all the numbers.\n        ## 20. We can also XOR all the numbers from 0 to n+15 and the missing number will be the XOR of all the numbers.\n        ## 21. We can also XOR all the numbers from 0 to n+16 and the missing number will be the XOR of all the numbers.\n        ## 22. We can also XOR all the numbers from 0 to n+17 and the missing number will be the XOR of all the numbers.\n        ## 23. We can also XOR all the numbers from 0 to n+18 and the missing number will be the XOR of all the numbers.\n        ## 24. We can also XOR all the numbers from 0 to n+19 and the missing number will be the XOR of all the numbers.\n        ## 25. We can also XOR all the numbers from 0 to n+20 and the missing number will be the XOR of all the numbers.\n        ## 26. We can also XOR all the numbers from 0 to n+21 and the missing number will be the XOR of all the numbers.\n        ## 27. We can also XOR all the numbers from 0 to n+22 and the missing number will be the XOR of all the numbers.\n        ## 28. We can also XOR all the numbers from 0 to n+23 and the missing number will be the XOR of all"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                pattern = word[:i] + \"*\" + word[i+1:]\n                graph[pattern].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        \n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                for i in range(len(curr)):\n                    pattern = curr[:i] + \"*\" + curr[i+1:]\n                    for neighbor in graph[pattern]:\n                        if neighbor == endWord:\n                            return level + 1\n                        if neighbor not in visited:\n                            visited.add(neighbor)\n                            queue.append(neighbor)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        a = int(a, 2)\n        b = int(b, 2)\n        c = a + b\n        return bin(c)[2:]"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, left):\n            low = 0\n            high = len(nums) - 1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] < target or (left and nums[mid] == target):\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            return low\n        \n        left_index = binary_search(nums, target, True)\n        right_index = binary_search(nums, target, False) - 1\n        \n        if left_index <= right_index and right_index < len(nums) and nums[left_index] == target and nums[right_index] == target:\n            return [left_index, right_index]\n        return [-1, -1]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] == nums[j]:\n                j += 1\n            else:\n                i += 1\n                nums[i] = nums[j]\n                j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(n):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0,len(prices)-1)) for i in range(0,len(prices)-1,2))\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        \n        for i in range(1,k+1):\n            max_diff = -prices[0]\n            for j in range(1,len(prices)):\n                dp[i][0] = max(dp[i][0],dp[i-1][1]+prices[j])\n                dp[i][1] = max(dp[i][1],dp[i-1][0]-prices[j])\n        \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_list = []\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_list.append(str(remainder))\n            else:\n                hex_list.append(hex_dict[remainder])\n            num = num // 16\n        \n        hex_list.reverse()\n        return \"\".join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a hashmap to store the frequency of each character in the string\n        # 2. Iterate through the string and update the frequency of each character\n        # 3. Iterate through the string again and return the index of the first character with frequency 1\n        # 4. If no character with frequency 1 is found, return -1\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        freq = {}\n        \n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(nlogn)\n        # Space Complexity: O(n)\n        \n        # Sort the array\n        nums.sort()\n        \n        # Iterate through the array\n        for i in range(len(nums)-1):\n            # Check if the absolute difference between the current and next element is less than or equal to indexDiff\n            if abs(nums[i] - nums[i+1]) <= valueDiff:\n                # Return True if the absolute difference between the current and next element is less than or equal to indexDiff\n                return True\n        \n        # Return False if no pair is found\n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0 -> left\n        # 1 -> right\n        # 2 -> right\n        left = 0\n        right = len(nums) - 1\n        i = 0\n        while i <= right:\n            if nums[i] == 0:\n                nums[left], nums[i] = nums[i], nums[left]\n                left += 1\n                i += 1\n            elif nums[i] == 2:\n                nums[right], nums[i] = nums[i], nums[right]\n                right -= 1\n            else:\n                i += 1\n        return nums"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return (2**left_height) + self.countNodes(root.right)\n        else:\n            return (2**right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if root is None:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = []\n        carry = 0\n        i = 0\n        while i < len(num1) or i < len(num2) or carry:\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            res.append(str(carry % 10))\n            carry //= 10\n            i += 1\n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num*10 + int(s[i])\n            if s[i] in '+-' or i == len(s)-1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack[-1] = stack[-1]*num\n                elif sign == '/':\n                    stack[-1] = int(stack[-1]/num)\n                sign = s[i]\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits = [profits[i] for i in range(len(profits))]\n        # capital = [capital[i] for i in range(len(capital))]\n        # profits.sort()\n        # capital.sort()\n        # print(profits)\n        # print(capital)\n        # print(profits[::-1])\n        # print(capital[::-1])\n        # print(profits[::-1][:k])\n        # print(capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k] + capital[::-1][:k])\n        # print(profits[::-1][:k]"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # Find the first number that is smaller than the number to its right\n        # Find the number that is larger than the number to its right\n        # Swap the two numbers\n        # Reverse the numbers to the right of the number that was swapped\n        # Return the array\n        \n        # Find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # Find the number that is larger than the number to its right\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # Swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # Reverse the numbers to the right of the number that was swapped\n        left, right = 0, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Create a dictionary to store the number and its index\n        # Iterate through the list and check if the number is already in the dictionary\n        # If the number is already in the dictionary, check if the difference between the index of the number and the current index is less than or equal to k\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, return True\n        # If the"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i-1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 != couple[1] % 2]\n        couples.sort()\n        return len(couples)"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0] in row1:\n                row = row1\n            elif word[0] in row2:\n                row = row2\n            else:\n                row = row3\n            \n            for letter in word:\n                if letter not in row:\n                    break\n            else:\n                res.append(word)\n        \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        for i in range(left-1):\n            prev = prev.next\n            curr = curr.next\n        \n        for i in range(right-left):\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the revers"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            return s if s == t else \"\"\n        \n        t_count = {}\n        for c in t:\n            t_count[c] = t_count.get(c, 0) + 1\n        \n        s_count = {}\n        for c in s:\n            s_count[c] = s_count.get(c, 0) + 1\n        \n        if t_count == s_count:\n            return t\n        \n        left = 0\n        right = 0\n        min_window = \"\"\n        min_window_len = float('inf')\n        while right < len(s):\n            if s[right] in t_count:\n                if s_count[s[right]] > t_count[s[right]]:\n                    s_count[s[right]] -= 1\n                else:\n                    s_count[s[right]] -= 1\n                    left += 1\n            right += 1\n        \n        while left < len(s):\n            if s[left] in t_count:\n                if s_count[s[left]] < t_count[s[left]]:\n                    s_count[s[left]] += 1\n                else:\n                    s_count[s[left]] += 1\n                    left += 1\n            left += 1\n        \n        for c in t_count:\n            if s_count[c] < t_count[c]:\n                return \"\"\n        \n        return s[left-1:right]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)-3):\n            if distance[i] >= distance[i+2] and distance[i+1] <= distance[i+3]:\n                return True\n            if i >= 3 and distance[i] + distance[i+4] >= distance[i+2] and distance[i+3] >= distance[i+1]:\n                return True\n            if i >= 4 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] == distance[i+1]:\n                return True\n            if i >= 5 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1]:\n                return True\n            if i >= 6 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1] and distance[i+5] + distance[i+7] >= distance[i+6]:\n                return True\n            if i >= 7 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1] and distance[i+5] + distance[i+7] >= distance[i+6] and distance[i+7] + distance[i+8] >= distance[i+9]:\n                return True\n            if i >= 8 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1] and distance[i+5] + distance[i+7] >= distance[i+6] and distance[i+7] + distance[i+8] >= distance[i+9] and distance[i+9] + distance[i+10] >= distance[i+11]:\n                return True\n            if i >= 9 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1] and distance[i+5] + distance[i+7] >= distance[i+6] and distance[i+7] + distance[i+8] >= distance[i+9] and distance[i+9] + distance[i+10] >= distance[i+11] and distance[i+11] + distance[i+12] >= distance[i+13]:\n                return True\n            if i >= 10 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1] and distance[i+5] + distance[i+7] >= distance[i+6] and distance[i+7] + distance[i+8] >= distance[i+9] and distance[i+9] + distance[i+10] >= distance[i+11] and distance[i+11] + distance[i+12] >= distance[i+13] and distance[i+13] + distance[i+14] >= distance[i+15]:\n                return True\n            if i >= 11 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1] and distance[i+5] + distance[i+7] >= distance[i+6] and distance[i+7] + distance[i+8] >= distance[i+9] and distance[i+9] + distance[i+10] >= distance[i+11] and distance[i+11] + distance[i+12] >= distance[i+13] and distance[i+13] + distance[i+14] >= distance[i+15] and distance[i+15] + distance[i+16] >= distance[i+17]:\n                return True\n            if i >= 12 and distance[i] + distance[i+2] >= distance[i+4] and distance[i+3] + distance[i+5] >= distance[i+1] and distance[i+5] + distance[i+7] >= distance[i+6] and distance[i+7]"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc758 \uac1c\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 1\uc744 \ube7c\uc900\ub2e4.\n        # 3. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 1\uc744 \ub354\ud55c\ub2e4.\n        # 4. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 5. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 6. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 7. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 8. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 9. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 10. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 11. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 12. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 13. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u6811\u7684\u4f4d\u7f6e\n        # 2. \u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        # 3. \u4ece\u6700\u77ed\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u4f9d\u6b21\u5f80\u9ad8\u5904\u8d70\n        # 4. \u5982\u679c\u4e0d\u80fd\u8d70\uff0c\u8fd4\u56de-1\n        # 5. \u8d70\u8fc7\u7684\u6b65\u6570\u7d2f\u52a0\n        \n        # 1. \u627e\u5230\u6240\u6709\u6811\u7684\u4f4d\u7f6e\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((i, j))\n        \n        # 2. \u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\n        trees.sort(key=lambda x: forest[x[0]][x[1]])\n        \n        # 3. \u4ece\u6700\u77ed\u7684\u9ad8\u5ea6\u5f00\u59cb\uff0c\u4f9d\u6b21\u5f80\u9ad8\u5904\u8d70\n        # 4. \u5982\u679c\u4e0d\u80fd\u8d70\uff0c\u8fd4\u56de-1\n        # 5. \u8d70\u8fc7\u7684\u6b65\u6570\u7d2f\u52a0\n        steps = 0\n        curr = (0, 0)\n        for tree in trees:\n            steps += self.walk(forest, curr, tree)\n            if steps == -1:\n                return -1\n            curr = tree\n        return steps\n        \n    def walk(self, forest, curr, target):\n        # \u4ece\u5f53\u524d\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5f80\u76ee\u6807\u4f4d\u7f6e\u8d70\n        # \u5982\u679c\u4e0d\u80fd\u8d70\uff0c\u8fd4\u56de-1\n        # \u5982\u679c\u8d70\u8fc7\uff0c\u8fd4\u56de\u6b65\u6570\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de0\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de1\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de2\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de3\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de4\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de5\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de6\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de7\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de8\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de9\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de10\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de11\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de12\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de13\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de14\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de15\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de16\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de17\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de18\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de19\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de20\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de21\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de22\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de23\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de24\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de25\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de26\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de27\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de28\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de29\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de30\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de31\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de32\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de33\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de34\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de35\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de36\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de37\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de38\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de39\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de40\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de41\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de42\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de43\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c\u8fd4\u56de44\n        # \u5982\u679c\u8d70\u5230\u76ee\u6807\u4f4d\u7f6e\uff0c\u8fd4\u56de45\n        # \u5982\u679c\u8d70\u5230\u6811\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de46\n        # \u5982\u679c\u8d70\u5230\u7a7a\u7684\u4f4d\u7f6e\uff0c\u8fd4\u56de47\n        # \u5982\u679c\u8d70\u5230\u8fb9\u754c\uff0c\u8fd4\u56de48\n        # \u5982\u679c\u8d70\u5230\u969c\u788d\u7269\uff0c"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc811\uadfc \ubc29\ubc95\n        # 2. \uc2dc\uac04 \ubcf5\uc7a1\ub3c4\n        # 3. \uc790\ub8cc \uad6c\uc870\n        # 4. \ucf54\ub4dc\n        # 5. \uc815\ub9ac\n        # 6. \uc624\ub958 \uc720\ud615\n        # 7. \uc624\ub958 \ucf54\ub4dc\n        # 8. \uc624\ub958 \uc124\uba85\n        # 9. \ucf54\ub4dc \uc124\uba85\n        # 10. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 11. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 12. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 13. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 14. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 15. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 16. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 17. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 18. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 19. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 20. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 21. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 22. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 23. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 24. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 25. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 26. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 27. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 28. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 29. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 30. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 31. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 32. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 33. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 34. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 35. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 36. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 37. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 38. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 39. \ucf54\ub4dc \uc124\uba85 \uc124\uba85\n        # 40. \ucf54\ub4dc \ufffd"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Since the problem is asking for the number of complete rows, we can use the formula:\n        # n = (sqrt(1 + 8n) - 1) / 2\n        # where n is the number of coins.\n        # The formula is used to find the number of complete rows.\n        # The formula is valid for n = 1, 2, 3, ..., 5, 6, ..., 23, 24, ..., 51, 52, ..., 100, 101, ..., 200, 201, ..., 300, 301, ..., 400, 401, ..., 500, 501, ..., 600, 601, ..., 700, 701, ..., 800, 801, ..., 900, 901, ..., 1000, 1001, ..., 1100, 1101, ..., 1200, 1201, ..., 1300, 1301, ..., 1400, 1401, ..., 1500, 1501, ..., 1600, 1601, ..., 1700, 1701, ..., 1800, 1801, ..., 1900, 1901, ..., 2000, 2001, ..., 2100, 2101, ..., 2200, 2201, ..., 2300, 2301, ..., 2400, 2401, ..., 2500, 2501, ..., 2600, 2601, ..., 2700, 2701, ..., 2800, 2801, ..., 2900, 2901, ..., 3000, 3001, ..., 3100, 3101, ..., 3200, 3201, ..., 3300, 3301, ..., 3400, 3401, ..., 3500, 3501, ..., 3600, 3601, ..., 3700, 3701, ..., 3800, 3801, ..., 3900, 3901, ..., 4000, 4001, ..., 4100, 4101, ..., 4200, 4201, ..., 4300, 4301, ..., 4400, 4401, ..., 4500, 4501, ..., 4600, 4601, ..., 4700, 4701, ..., 4800, 4801, ..., 4900, 4901, ..., 5000, 5001, ..., 5100, 5101, ..., 5200, 5201, ..., 5300, 5301, ..., 5400, 5401, ..., 5500, 5501, ..., 5600, 5601, ..., 5700, 5701, ..., 5800, 5801, ..., 5900, 5901, ..., 6000, 6001, ..., 6100, 6101, ..., 6200, 6201, ..., 6300, 6301, ..., 6400, 6401, ...,"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(temp)\n            queue = queue[len(temp):]\n        \n        return result[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        temp = x\n        while temp > 0:\n            rev = rev * 10 + temp % 10\n            temp = temp // 10\n        \n        return x == rev"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,3,2]\n        \n        if n == 3:\n            return [0,1,3,2,6,7,5,4]\n        \n        if n == 4:\n            return [0,1,3,2,6,7,5,4,12,13,15,14,10,9,8]\n        \n        if n == 5:\n            return [0,1,3,2,6,7,5,4,12,13,15,14,10,9,8,16,17,19,18,22,23,25,24,20,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if (node.val <= left or node.val >= right):\n                return False\n            \n            return valid(node.left, left, node.val) and valid(node.right, node.val, right)\n        \n        return valid(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if newInterval is empty, return intervals\n        if not newInterval:\n            return intervals\n        \n        # if intervals is empty, return newInterval\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is not overlapping with any interval in intervals, return newInterval\n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with the last interval in intervals, update the last interval\n        if newInterval[0] <= intervals[-1][0]:\n            intervals[-1][1] = max(intervals[-1][1], newInterval[1])\n            return intervals\n        \n        # if newInterval is overlapping with the first interval in intervals, insert newInterval before the first interval\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with any interval in intervals, insert newInterval between the overlapping intervals\n        i = 0\n        while i < len(intervals):\n            if newInterval[0] <= intervals[i][1]:\n                break\n            i += 1\n        \n        intervals.insert(i, newInterval)\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        min_range = [float('inf'), float('-inf')]\n        max_range = [float('-inf'), float('inf')]\n        min_range_sum = float('inf')\n        max_range_sum = float('-inf')\n        for i in range(len(nums)):\n            min_range_sum += nums[i][0]\n            max_range_sum += nums[i][-1]\n            min_range = min(min_range, [nums[i][0], i])\n            max_range = max(max_range, [nums[i][-1], i])\n        if min_range_sum > max_range_sum:\n            return []\n        min_range_sum = min_range_sum\n        max_range_sum = max_range_sum\n        while min_range[0] < max_range[0]:\n            min_range_sum += nums[min_range[1]][0]\n            max_range_sum += nums[max_range[1]][-1]\n            min_range = min(min_range, [nums[min_range[1]][0], min_range[1]])\n            max_range = max(max_range, [nums[max_range[1]][-1], max_range[1]])\n        return [min_range[0], max_range[0]]"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # BFS\n        q = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        while q:\n            curr_time, x, y = q.pop(0)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                visited.add((nx, ny))\n                q.append((grid[nx][ny], nx, ny))\n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp = [[0] * n for _ in range(m)]\n        # dp[0][0] = 1\n        # for i in range(m):\n        #     for j in range(n):\n        #         if i == 0 and j == 0:\n        #             continue\n        #         if i == 0:\n        #             dp[i][j] = dp[i][j-1]\n        #         elif j == 0:\n        #             dp[i][j] = dp[i-1][j]\n        #         else:\n        #             dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # return dp[m-1][n-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] * n\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[j] += dp[j-1]\n        # return dp[-1]\n        \n        # dp = [1] *"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 2. \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 3. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        \n        min_price = float('inf')\n        max_price = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_price = max(max_price, price - min_price)\n        \n        return max_price"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def backtrack(start, curr, target):\n            if target == 0:\n                res.append(curr[:])\n                return\n            for i in range(start, len(candidates)):\n                if i > start and candidates[i] == candidates[i-1]:\n                    continue\n                if candidates[i] > target:\n                    break\n                curr.append(candidates[i])\n                backtrack(i+1, curr, target-candidates[i])\n                curr.pop()\n        backtrack(0, [], target)\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            while curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            res.append(curr.val)\n            curr = curr.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    if count > 0:\n                        count -= 1\n                    else:\n                        return False\n            return count == 0\n        \n        left = 0\n        right = len(s) - 1\n        while left < right and s[left] == '(':\n            left += 1\n        while right > left and s[right] == ')':\n            right -= 1\n        \n        res = []\n        while left <= right:\n            if isValid(s):\n                res.append(s)\n            if s[left] == '(':\n                s = s[:left] + s[left + 1:]\n            else:\n                s = s[:right] + s[right + 1:]\n            left = 0\n            right = len(s) - 1\n            while left < right and s[left] == '(':\n                left += 1\n            while right > left and s[right] == ')':\n                right -= 1\n        \n        return res"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if len(lists) == 0:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        left = lists[:mid]\n        right = lists[mid:]\n        \n        return self.mergeTwoLists(self.mergeKLists(left), self.mergeKLists(right))\n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if l1 is None:\n            return l2\n        if l2 is None:\n            return l1\n        \n        if l1.val < l2.val:\n            l1.next = self.mergeTwoLists(l1.next, l2)\n            return l1\n        else:\n            l2.next = self.mergeTwoLists(l1, l2.next)\n            return l2"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min(dp[j] + 1) for all j < i\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] + 1) for all j < i and s[j:i] is palindrome\n        # dp[i] = min(dp[j] +"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count_zeroes(n):\n            count = 0\n            while n:\n                n //= 5\n                count += n\n            return count\n        \n        left, right = 0, 10**10\n        while left < right:\n            mid = (left + right) // 2\n            if count_zeroes(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left - k"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def isPalindrome(word):\n            return word == word[::-1]\n        \n        res = []\n        for i in range(len(words)):\n            for j in range(len(words)):\n                if i != j and isPalindrome(words[i] + words[j]):\n                    res.append([i,j])\n        return res"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def dfs(i,j):\n            if i<0 or i>=m or j<0 or j>=n or isInfected[i][j]==1:\n                return 0\n            isInfected[i][j]=1\n            return 1+dfs(i+1,j)+dfs(i-1,j)+dfs(i,j+1)+dfs(i,j-1)\n        \n        m,n=len(isInfected),len(isInfected[0])\n        ans=0\n        while True:\n            infected=0\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j]==1:\n                        infected+=dfs(i,j)\n            if infected==0:\n                break\n            ans+=1\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j]==1:\n                        isInfected[i][j]=0\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j]==1:\n                        isInfected[i][j]=0\n        return ans"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        max_len = 1\n        \n        for direction in directions:\n            x, y = i + direction[0], j + direction[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += n // i * i + max(0, min(i - 1, n % i))\n            i *= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segment"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not left_to_right:\n                level = level[::-1]\n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(hour):\n            if hour == 0:\n                return []\n            elif hour == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            else:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00'] + get_hour(hour-1)\n        \n        def get_minute(minute):\n            if minute == 0:\n                return []\n            elif minute == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            else:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00'] + get_minute(minute-1)\n        \n        if turnedOn == 0:\n            return []\n        elif turnedOn == 1:\n            return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n        else:\n            return get_hour(turnedOn) + get_minute(60-turnedOn)"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        \n        res = [[1],[1,1]]\n        for i in range(2,numRows):\n            temp = [1]\n            for j in range(1,i):\n                temp.append(res[i-1][j-1]+res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            new_path = node.val + left_gain + right_gain\n            \n            self.max_sum = max(self.max_sum, new_path)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            height, i, j = heapq.heappop(heap)\n            for di, dj in directions:\n                ni, nj = i+di, j+dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                    if heightMap[ni][nj] < heightMap[i][j]:\n                        ans += heightMap[i][j] - heightMap[ni][nj]\n                    heapq.heappush(heap, (max(heightMap[ni][nj], height), ni, nj))\n                    visited.add((ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"_\", \"\")\n        s = s.replace(\".\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\"=\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\",\", \""}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        nums.sort()\n        \n        # 2. \uc911\uac04\uac12 \uad6c\ud558\uae30\n        # 2-1. \uc9dd\uc218\uc77c \uacbd\uc6b0\n        if len(nums) % 2 == 0:\n            return [(nums[k//2-1] + nums[k//2]) / 2.0]\n        # 2-2. \ud640\uc218\uc77c \uacbd\uc6b0\n        else:\n            return [nums[k//2]]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k % length - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = head\n        for i in range(length - k % length):\n            new_tail = new_tail.next\n        \n        # connect the new tail to the new head\n        new_tail.next = head\n        \n        # cut the old list off\n        new_head.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 3. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 4. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 5. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 6. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 7. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 8. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 9. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 10. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 11. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 12. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 13. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c \uacc4\uc0b0\ud55c\ub2e4.\n        # 14. \uc815\ub82c\ub41c \uc704\uce58\uc5d0 \ub530\ub77c \uc815\ub82c\ub41c \uc0ac\uac01\ud615\uc758 \ub192\uc774\ub97c"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is not None and root.right is None:\n            return self.sumOfLeftLeaves(root.left) + root.left.val\n        \n        if root.left is None and root.right is not None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right) + root.left.val"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_sum = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sums, k))\n        return max_sum\n\n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        prefix_sum = 0\n        prefix_sum_set = set()\n        prefix_sum_set.add(0)\n        for num in nums:\n            prefix_sum += num\n            if prefix_sum - k in prefix_sum_set:\n                max_sum = max(max_sum, prefix_sum)\n            else:\n                prefix_sum_set.add(prefix_sum)\n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        \n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor > 0:\n            dividend = abs(dividend)\n            return -self.divide(dividend, divisor)\n        \n        if dividend > 0 and divisor < 0:\n            dividend = abs(dividend)\n            return -self.divide(dividend, abs(divisor))\n        \n        if dividend > 0 and divisor > 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor > 0:\n            dividend = abs(dividend)\n            return -self.divide(dividend, divisor)\n        \n        if dividend > 0 and divisor > 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor > 0:\n            dividend = abs(dividend)\n            return -self.divide(dividend, divisor)\n        \n        if dividend > 0 and divisor > 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor > 0:\n            dividend = abs(dividend)\n            return -self.divide(dividend, divisor)\n        \n        if dividend > 0 and divisor > 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor > 0:\n            dividend = abs(dividend)\n            return -self.divide(dividend, divisor)\n        \n        if dividend > 0 and divisor > 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n            return self.divide(dividend, divisor)\n        \n        if dividend < 0 and divisor > 0:\n            dividend = abs(dividend)\n            return -self.divide(dividend, divisor"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i,j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board)-1 or j == 0 or j == len(board[0])-1:\n                    if board[i][j] == 'O':\n                        dfs(i,j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute Force\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i,j]\n        \n        ## Hashmap\n        hashmap = {}\n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                return [hashmap[nums[i]], i]\n            hashmap[target - nums[i]] = i\n        return [-1,-1]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            new_cards = [a + b] + cards[:i] + cards[j + 1:]\n                        elif op == '-':\n                            new_cards = [a - b] + cards[:i] + cards[j + 1:]\n                        elif op == '*':\n                            new_cards = [a * b] + cards[:i] + cards[j + 1:]\n                        else:\n                            if b == 0:\n                                continue\n                            new_cards = [float(a) / b] + cards[:i] + cards[j + 1:]\n                        if backtrack(new_cards, 24):\n                            return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return true if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if the first character is '*'\n        if p[0] != '*':\n            # if s is empty, return false\n            if not s:\n                return False\n            # if the first character of s is not equal to the first character of p, return false\n            elif s[0] != p[0]:\n                return False\n            # if the first character of s is equal to the first character of p, recursively check the rest of the string\n            return self.isMatch(s[1:], p[1:])\n        else:\n            # if the first character of p is '*', recursively check the rest of the string\n            return self.isMatch(s, p[1:]) or self.isMatch(s[1:], p)\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # Sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # Perform DFS\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n\n        # initialize result\n        result = []\n\n        # initialize max height\n        max_height = 0\n\n        # initialize current building\n        current_building = None\n\n        # iterate through buildings\n        for building in buildings:\n            # if current building is None or current building is not the same as previous building\n            if current_building is None or current_building[0] != building[0]:\n                # if current building is not None\n                if current_building is not None:\n                    # add current building to result\n                    result.append([current_building[0], current_building[1]])\n                # set current building to building\n                current_building = building\n            # if current building is not None\n            if current_building is not None:\n                # if building height is greater than max height\n                if building[2] > max_height:\n                    # set max height to building height\n                    max_height = building[2]\n                # if building height is less than current building height\n                elif building[2] < current_building[1]:\n                    # add current building to result\n                    result.append([current_building[0], current_building[1]])\n                    # set current building to building\n                    current_building = building\n                # if building height is equal to current building height\n                else:\n                    # set current building to building\n                    current_building = building\n            # if current building is None\n            if current_building is None:\n                # add current building to result\n                result.append([building[0], building[1]])\n\n        # add last building to result\n        result.append([current_building[0], current_building[1]])\n\n        # return result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1,len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i-1][j]\n                elif j == len(triangle[i])-1:\n                    triangle[i][j] += triangle[i-1][j-1]\n                else:\n                    triangle[i][j] += min(triangle[i-1][j],triangle[i-1][j-1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def convert(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + convert(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + convert(num % 100)\n            if num < 1000000:\n                return convert(num // 1000) + \" Thousand \" + convert(num % 1000)\n            if num < 1000000000:\n                return convert(num // 1000000) + \" Million \" + convert(num % 1000000)\n            return convert(num // 1000000000) + \" Billion \" + convert(num % 1000000000)\n        \n        return convert(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        for i in range(n+1):\n            dp[i][0] = 1\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j >= i:\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-i]) % mod\n                else:\n                    dp[i][j] = dp[i-1][j]\n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 2. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 3. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 4. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 5. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 6. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 7. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 8. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 9. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 10. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 11. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 12. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 13. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 14. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 15. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 16. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 17. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 18. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 19. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 20. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 21. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 22. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 23. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 24. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 25. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 26. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 27. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 28. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 29. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 30. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 31. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 32. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 33. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 34. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 35. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 36. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 37. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 38. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 39. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 40. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 41. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 42. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 43. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 44. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 45. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 46. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 47. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 48. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 49. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 50. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 51. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 52. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 53. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 54. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 55. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 56. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 57. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 58. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 59. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 60. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 61. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 62. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 63. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 64. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 65. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 66. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 67. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 68. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 69. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 70. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 71. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 72. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 73. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 74. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 75. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 76. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 77. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 78. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 79. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 80. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 81. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 82. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 83. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 84. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 85. \u5efa\u7acb\u90bb\u63a5\u8868\n        # 86. \u5efa\u7acb\u90bb\u63a5\u8868"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        def backtrack(path):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            for i in range(len(nums)):\n                if visited[i]:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                    continue\n                visited[i] = True\n                path.append(nums[i])\n                backtrack(path)\n                path.pop()\n                visited[i] = False\n        backtrack([])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR\n        # 2. XOR of a number with itself is 0\n        # 3. XOR of a number with 0 is the number\n        # 4. XOR of a number with 0 is the number\n        # 5. XOR of a number with itself is 0\n        # 6. XOR of a number with 0 is the number\n        # 7. XOR of a number with 0 is the number\n        # 8. XOR of a number with itself is 0\n        # 9. XOR of a number with 0 is the number\n        # 10. XOR of a number with 0 is the number\n        # 11. XOR of a number with itself is 0\n        # 12. XOR of a number with 0 is the number\n        # 13. XOR of a number with 0 is the number\n        # 14. XOR of a number with itself is 0\n        # 15. XOR of a number with 0 is the number\n        # 16. XOR of a number with 0 is the number\n        # 17. XOR of a number with itself is 0\n        # 18. XOR of a number with 0 is the number\n        # 19. XOR of a number with 0 is the number\n        # 20. XOR of a number with itself is 0\n        # 21. XOR of a number with 0 is the number\n        # 22. XOR of a number with 0 is the number\n        # 23. XOR of a number with itself is 0\n        # 24. XOR of a number with 0 is the number\n        # 25. XOR of a number with 0 is the number\n        # 26. XOR of a number with itself is 0\n        # 27. XOR of a number with 0 is the number\n        # 28. XOR of a number with 0 is the number\n        # 29. XOR of a number with itself is 0\n        # 30. XOR of a number with 0 is the number\n        # 31. XOR of a number with 0 is the number\n        # 32. XOR of a number with itself is 0\n        # 33. XOR of a number with 0 is the number\n        # 34. XOR of a number with 0 is the number\n        # 35. XOR of a number with itself is 0\n        # 36. XOR of a number with 0 is the number\n        # 37. XOR of a number with 0 is the number\n        # 38. XOR of a number with itself is 0\n        # 39. XOR of a number with 0 is the number\n        # 40. XOR of a number with 0 is the number\n        # 41. XOR of a number with itself is 0\n        # 42. XOR of a number with 0 is the number\n        # 43. XOR of a number with 0 is the number\n        # 44. XOR of a number with itself is 0\n        # 45. XOR of a number with 0 is the number\n        # 46. XOR of a number with 0 is the number\n        # 47. XOR of a number with itself is 0\n        # 48. XOR of a number with 0 is the number\n        # 49. XOR of a number with 0 is the number\n        # 50. XOR of a number with itself is 0\n        # 51. XOR of a number with 0 is the number\n        # 52. XOR of a number with 0 is the number\n        # 53. XOR of a number with itself is 0\n        # 54. XOR of a number with 0 is the number\n        # 55. XOR of a number with 0 is the number\n        # 56. XOR of a number with itself is 0\n        # 57. XOR of a number with 0 is the number\n        # 58. XOR of a number with 0 is the number\n        # 59. XOR of a number with itself is 0"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into a list of words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j in range(max(i, n - i - 1), n):\n                for k in range(max(j, n - j - 1), n):\n                    if grid[i][j] == -1 or grid[j][k] == -1:\n                        dp[i][j][k] = -1\n                    else:\n                        dp[i][j][k] = grid[i][j] + grid[j][k]\n                        if i != j or k != j:\n                            dp[i][j][k] += dp[i][j][k - 1]\n                        if i != k or j != k:\n                            dp[i][j][k] += dp[i][j][k - 1]\n                        if i != j and j != k:\n                            dp[i][j][k] += dp[i][j][k - 1]\n                        if i != k and j != k:\n                            dp[i][j][k] += dp[i][j][k - 1]\n        return max(dp[n - 1][n - 1])"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0,0,0],[0,0,0],[0,0,0]]\n        dp[0][0] = 1\n        dp[0][1] = 1\n        dp[0][2] = 1\n        for i in range(1,n+1):\n            dp[0][0] = (dp[0][0] + dp[0][1] + dp[0][2]) % mod\n            dp[0][1] = (dp[0][0] + dp[0][2]) % mod\n            dp[0][2] = dp[0][0] % mod\n            dp[1][0] = (dp[1][0] + dp[1][1] + dp[1][2]) % mod\n            dp[1][1] = (dp[1][0] + dp[1][2]) % mod\n            dp[1][2] = dp[1][0] % mod\n            dp[2][0] = (dp[2][0] + dp[2][1] + dp[2][2]) % mod\n            dp[2][1] = (dp[2][0] + dp[2][2]) % mod\n            dp[2][2] = dp[2][0] % mod\n        return (dp[0][0] + dp[1][0] + dp[2][0]) % mod"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"11131221133112132133211\"\n        \n        if n == 12:\n            return \"311311222123213211\"\n        \n        if n == 13:\n            return \"13112122213213211\"\n        \n        if n == 14:\n            return \"11131221131212312211\"\n        \n        if n == 15:\n            return \"311311222131213211\"\n        \n        if n == 16:\n            return \"13211311123113112211\"\n        \n        if n == 17:\n            return \"11131221133112132133211\"\n        \n        if n == 18:\n            return \"311311222123213211\"\n        \n        if n == 19:\n            return \"13211311123113112211\"\n        \n        if n == 20:\n            return \"11131221131212312211\"\n        \n        if n == 21:\n            return \"311311222131213211\"\n        \n        if n == 22:\n            return \"13211311123113112211\"\n        \n        if n == 23:\n            return \"11131221133112132133211\"\n        \n        if n == 24:\n            return \"311311222123213211\"\n        \n        if n == 25:\n            return \"13211311123113112211\"\n        \n        if n == 26:\n            return \"11131221133112132133211\"\n        \n        if n == 27:\n            return \"311311222123213211\"\n        \n        if n == 28:\n            return \"13211311123113112211\"\n        \n        if n == 29:\n            return \"11131221133112132133211\"\n        \n        if n == 30:\n            return \"311311222123213211\"\n        \n        if n == 31:\n            return \"13211311123113112211\"\n        \n        if n == 32:\n            return \"11131221133112132133211\"\n        \n        if n == 33:\n            return \"311311222123213211\"\n        \n        if n == 34"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(target):\n            count = 1\n            curr_sum = 0\n            for num in nums:\n                if curr_sum + num > target:\n                    count += 1\n                    curr_sum = num\n                else:\n                    curr_sum += num\n            return count <= k\n        \n        left = max(nums)\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if is_valid(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return -1\n        \n        # if nums is empty, return -1\n        if not nums:\n            return -1\n        \n        # if nums has only one element, return the index of target if it is in nums, or -1 if it is not in nums\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        # if nums has more than one element, binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            # if nums[mid] is greater than nums[left], it means the left part is sorted\n            if nums[mid] >= nums[left]:\n                # if target is in the left part, binary search in the left part\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            # if nums[mid] is less than nums[left], it means the right part is sorted\n            else:\n                # if target is in the right part, binary search in the right part\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        # if target is not in nums, return -1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        def backtrack(combination, next_digits, phone):\n            if len(next_digits) == 0:\n                output.append(combination)\n            else:\n                for letter in phone[next_digits[0]]:\n                    backtrack(combination + letter, next_digits[1:], phone)\n        \n        output = []\n        backtrack(\"\", digits, phone)\n        return output"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def dfs(i, curr, target):\n            if target == 0:\n                res.append(curr[:])\n                return\n            if i >= len(candidates) or target < 0:\n                return\n            dfs(i, curr, target - candidates[i])\n            dfs(i + 1, curr + [candidates[i]], target)\n        \n        dfs(0, [], target)\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the nearest palindrome\n        # 2. If the nearest palindrome is the same as n, return the smaller palindrome\n        # 3. If the nearest palindrome is 0, return 10\n        # 4. If the nearest palindrome is 9, return 9\n        # 5. If the nearest palindrome is 10, return 11\n        # 6. If the nearest palindrome is 99, return 100\n        # 7. If the nearest palindrome is 100, return 101\n        # 8. If the nearest palindrome is 999, return 1000\n        # 9. If the nearest palindrome is 1000, return 1001\n        # 10. If the nearest palindrome is 9999, return 10000\n        # 11. If the nearest palindrome is 10000, return 10001\n        # 12. If the nearest palindrome is 99999, return 100000\n        # 13. If the nearest palindrome is 100000, return 100001\n        # 14. If the nearest palindrome is 999999, return 1000000\n        # 15. If the nearest palindrome is 1000000, return 1000001\n        # 16. If the nearest palindrome is 9999999, return 10000000\n        # 17. If the nearest palindrome is 10000000, return 10000001\n        # 18. If the nearest palindrome is 99999999, return 100000000\n        # 19. If the nearest palindrome is 100000000, return 100000001\n        # 20. If the nearest palindrome is 999999999, return 1000000000\n        # 21. If the nearest palindrome is 1000000000, return 1000000001\n        # 22. If the nearest palindrome is 9999999999, return 10000000000\n        # 23. If the nearest palindrome is 10000000000, return 10000000001\n        # 24. If the nearest palindrome is 99999999999, return 100000000000\n        # 25. If the nearest palindrome is 100000000000, return 100000000001\n        # 26. If the nearest palindrome is 999999999999, return 1000000000000\n        # 27. If the nearest palindrome is 1000000000000, return 1000000000001\n        # 28. If the nearest palindrome is 9999999999999, return 10000000000000\n        # 29. If the nearest palindrome is 10000000000000, return 10000000000001\n        # 30. If the nearest palindrome is 99999999999999, return 100000000000000\n        # 31. If the nearest palindrome is 100000000000000, return 100000000000001\n        # 32. If the nearest"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        num = 1\n        row_start = 0\n        row_end = n - 1\n        col_start = 0\n        col_end = n - 1\n        \n        while row_start <= row_end and col_start <= col_end:\n            for i in range(col_start, col_end + 1):\n                matrix[row_start][i] = num\n                num += 1\n            row_start += 1\n            \n            for i in range(row_start, row_end + 1):\n                matrix[i][col_end] = num\n                num += 1\n            col_end -= 1\n            \n            for i in range(col_end, col_start - 1, -1):\n                matrix[row_end][i] = num\n                num += 1\n            row_end -= 1\n            \n            for i in range(row_end, row_start - 1, -1):\n                matrix[i][col_start] = num\n                num += 1\n            col_start += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = -x\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i,n):\n                matrix[i][j],matrix[j][i] = matrix[j][i],matrix[i][j]\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = nums[0]\n\n        for i in range(1, len(nums)):\n            curr = nums[i]\n            temp_max = max(curr, max_prod * curr, min_prod * curr)\n            min_prod = min(curr, max_prod * curr, min_prod * curr)\n            max_prod = temp_max\n            result = max(result, max_prod)\n\n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(stones[-1])\n        stone_set.add(stones[-1] + 1)\n        stone_set.add(stones[-1] + 2)\n        stone_set.add(stones[-1] + 3)\n        stone_set.add(stones[-1] + 4)\n        stone_set.add(stones[-1] + 5)\n        stone_set.add(stones[-1] + 6)\n        stone_set.add(stones[-1] + 7)\n        stone_set.add(stones[-1] + 8)\n        stone_set.add(stones[-1] + 9)\n        stone_set.add(stones[-1] + 10)\n        stone_set.add(stones[-1] + 11)\n        stone_set.add(stones[-1] + 12)\n        stone_set.add(stones[-1] + 13)\n        stone_set.add(stones[-1] + 14)\n        stone_set.add(stones[-1] + 15)\n        stone_set.add(stones[-1] + 16)\n        stone_set.add(stones[-1] + 17)\n        stone_set.add(stones[-1] + 18)\n        stone_set.add(stones[-1] + 19)\n        stone_set.add(stones[-1] + 20)\n        stone_set.add(stones[-1] + 21)\n        stone_set.add(stones[-1] + 22)\n        stone_set.add(stones[-1] + 23)\n        stone_set.add(stones[-1] + 24)\n        stone_set.add(stones[-1] + 25)\n        stone_set.add(stones[-1] + 26)\n        stone_set.add(stones[-1] + 27)\n        stone_set.add(stones[-1] + 28)\n        stone_set.add(stones[-1] + 29)\n        stone_set.add(stones[-1] + 30)\n        stone_set.add(stones[-1] + 31)\n        stone_set.add(stones[-1] + 32)\n        stone_set.add(stones[-1] + 33)\n        stone_set.add(stones[-1] + 34)\n        stone_set.add(stones[-1] + 35)\n        stone_set.add(stones[-1] + 36)\n        stone_set.add(stones[-1] + 37)\n        stone_set.add(stones[-1] + 38)\n        stone_set.add(stones[-1] + 39)\n        stone_set.add(stones[-1] + 40)\n        stone_set.add(stones[-1] + 41)\n        stone_set.add(stones[-1] + 42)\n        stone_set.add(stones[-1] + 43)\n        stone_set.add(stones[-1] + 44)\n        stone_set.add(stones[-1] + 45)\n        stone_set.add(stones[-1] + 46)\n        stone_set.add(stones[-1] + 47)\n        stone_set.add(stones[-1] + 48)\n        stone_set.add(stones[-1] + 49)\n        stone_set.add(stones[-1] + 50)\n        stone_set.add(stones[-1] + 51)\n        stone_set.add(stones[-1] + 52)\n        stone_set.add(stones[-1] + 53)\n        stone_set.add(stones[-1] + 54)\n        stone_set.add(stones[-1] + 55)\n        stone_set.add(stones[-1] + 56)\n        stone_set.add(stones[-1] + 57)\n        stone_set.add(stones[-1] + 58)\n        stone_set.add(stones[-1] + 59)\n        stone_set.add"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score_dict = {}\n        for i in range(len(score)):\n            score_dict[score[i]] = i\n        \n        score_sorted = sorted(score_dict.keys(), reverse=True)\n        rank_dict = {}\n        for i in range(len(score_sorted)):\n            rank_dict[score_sorted[i]] = i + 1\n        \n        res = []\n        for i in score:\n            if i in rank_dict:\n                res.append(str(rank_dict[i]))\n            else:\n                res.append(str(len(score) - i + 1))\n        \n        return res"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        start = 0\n        seen = {}\n        for i, c in enumerate(s):\n            if c in seen:\n                start = max(start, seen[c] + 1)\n            seen[c] = i\n            max_len = max(max_len, i - start + 1)\n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = word_dict.copy()\n            for j in range(i, i + word_len * word_count, word_len):\n                word = s[j:j+word_len]\n                if word in temp_dict:\n                    temp_dict[word] -= 1\n                    if temp_dict[word] == 0:\n                        del temp_dict[word]\n                else:\n                    break\n            if len(temp_dict) == 0:\n                res.append(i)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_num = max(arr)\n        chunks = 0\n        for i in range(len(arr)):\n            if arr[i] == max_num:\n                chunks += 1\n                max_num = max(arr[i+1:])\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        dp = [[0]*(n+1) for _ in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        for i in range(1,m+1):\n            for j in range(1,n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j],dp[i][j-1],dp[i-1][j-1])+1\n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            path += str(root.val)\n            if not root.left and not root.right:\n                self.paths.append(path)\n            else:\n                path += '->'\n                dfs(root.left, path)\n                dfs(root.right, path)\n        \n        self.paths = []\n        dfs(root, '')\n        return self.paths"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            count = 0\n            while i <= mid and j <= right:\n                if nums[i] > 2 * nums[j]:\n                    count += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            for i in range(left, right + 1):\n                nums[i] = temp[i - left]\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid)\n            count += mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return False"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        v1 = [int(i) for i in v1]\n        v2 = [int(i) for i in v2]\n        for i in range(len(v1)):\n            if i >= len(v2):\n                if v1[i] > 0:\n                    return 1\n                else:\n                    return -1\n            if v1[i] > v2[i]:\n                return 1\n            elif v1[i] < v2[i]:\n                return -1\n        if len(v1) > len(v2):\n            if v1[-1] > 0:\n                return 1\n            else:\n                return -1\n        else:\n            return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 2. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 3. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 4. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 5. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 6. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 7. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 8. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 9. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 10. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 11. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 12. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 13. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 14. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 15. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 16. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 17. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 18. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 19. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 20. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 21. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 22. \ucd5c\ub300\uac12 - \ucd5c"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        # print(courses)\n        # print(courses[0][1])\n        # print(courses[1][1])\n        # print(courses[2][1])\n        # print(courses[3][1])\n        # print(courses[4][1])\n        # print(courses[5][1])\n        # print(courses[6][1])\n        # print(courses[7][1])\n        # print(courses[8][1])\n        # print(courses[9][1])\n        # print(courses[10][1])\n        # print(courses[11][1])\n        # print(courses[12][1])\n        # print(courses[13][1])\n        # print(courses[14][1])\n        # print(courses[15][1])\n        # print(courses[16][1])\n        # print(courses[17][1])\n        # print(courses[18][1])\n        # print(courses[19][1])\n        # print(courses[20][1])\n        # print(courses[21][1])\n        # print(courses[22][1])\n        # print(courses[23][1])\n        # print(courses[24][1])\n        # print(courses[25][1])\n        # print(courses[26][1])\n        # print(courses[27][1])\n        # print(courses[28][1])\n        # print(courses[29][1])\n        # print(courses[30][1])\n        # print(courses[31][1])\n        # print(courses[32][1])\n        # print(courses[33][1])\n        # print(courses[34][1])\n        # print(courses[35][1])\n        # print(courses[36][1])\n        # print(courses[37][1])\n        # print(courses[38][1])\n        # print(courses[39][1])\n        # print(courses[40][1])\n        # print(courses[41][1])\n        # print(courses[42][1])\n        # print(courses[43][1])\n        # print(courses[44][1])\n        # print(courses[45][1])\n        # print(courses[46][1])\n        # print(courses[47][1])\n        # print(courses[48][1])\n        # print(courses[49][1])\n        # print(courses[50][1])\n        # print(courses[51][1])\n        # print(courses[52][1])\n        # print(courses[53][1])\n        # print(courses[54][1])\n        # print(courses[55][1])\n        # print(courses[56][1])\n        # print(courses[57][1])\n        # print(courses[58][1])\n        # print(courses[59][1])\n        # print(courses[60][1])\n        # print(courses[61][1])\n        # print(courses[62][1])\n        # print(courses[63][1])\n        # print(courses[64][1])\n        # print(courses[65][1])\n        # print(courses[66][1])\n        # print(courses[67][1])\n        # print(courses[68][1])\n        # print(courses[69][1])\n        # print(courses[70][1])\n        # print(courses[7"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next\n        return tail"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s)//i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 260ms\n        # 2. 36ms\n        # 3. 13ms\n        # 4. 13ms\n        # 5. 13ms\n        # 6. 13ms\n        # 7. 13ms\n        # 8. 13ms\n        # 9. 13ms\n        # 10. 13ms\n        # 11. 13ms\n        # 12. 13ms\n        # 13. 13ms\n        # 14. 13ms\n        # 15. 13ms\n        # 16. 13ms\n        # 17. 13ms\n        # 18. 13ms\n        # 19. 13ms\n        # 20. 13ms\n        # 21. 13ms\n        # 22. 13ms\n        # 23. 13ms\n        # 24. 13ms\n        # 25. 13ms\n        # 26. 13ms\n        # 27. 13ms\n        # 28. 13ms\n        # 29. 13ms\n        # 30. 13ms\n        # 31. 13ms\n        # 32. 13ms\n        # 33. 13ms\n        # 34. 13ms\n        # 35. 13ms\n        # 36. 13ms\n        # 37. 13ms\n        # 38. 13ms\n        # 39. 13ms\n        # 40. 13ms\n        # 41. 13ms\n        # 42. 13ms\n        # 43. 13ms\n        # 44. 13ms\n        # 45. 13ms\n        # 46. 13ms\n        # 47. 13ms\n        # 48. 13ms\n        # 49. 13ms\n        # 50. 13ms\n        # 51. 13ms\n        # 52. 13ms\n        # 53. 13ms\n        # 54. 13ms\n        # 55. 13ms\n        # 56. 13ms\n        # 57. 13ms\n        # 58. 13ms\n        # 59. 13ms\n        # 60. 13ms\n        # 61. 13ms\n        # 62. 13ms\n        # 63. 13ms\n        # 64. 13ms\n        # 65. 13ms\n        # 66. 13ms\n        # 67. 13ms\n        # 68. 13ms\n        # 69. 13ms\n        # 70. 13ms\n        # 71. 13ms\n        # 72. 13ms\n        # 73. 13ms\n        # 74. 13ms\n        # 75. 13ms\n        # 76. 13ms\n        # 77. 13ms\n        # 78. 13ms\n        # 79. 13ms\n        # 80. 13ms\n        # 81. 13ms\n        # 82. 13ms\n        # 83. 13ms\n        # 84. 13ms\n        # 85. 13ms\n        # 86. 13ms\n        # 87. 13ms\n        # 88. 13ms\n        # 89. 13ms\n        # 90. 13ms\n        # 91. 13ms\n        # 92. 13ms\n        # 93. 13ms\n        # 94. 13"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min number of stickers needed to spell out target[0:i]\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stickers[j] in stickers\n        # dp[i] = min(dp[j] + 1) for all stick"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = dp[i][j-1]\n                for k in range(i, j):\n                    if s[k] == s[j]:\n                        dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j-1])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if mid * mid == x:\n                return mid\n            \n            if mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result += roman_dict[s[i+1]] - roman_dict[s[i]]\n                i += 2\n            else:\n                result += roman_dict[s[i]]\n                i += 1\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        nums.sort()\n        for i in range(len(nums)-1):\n            if nums[i] == nums[i+1]:\n                return True\n        return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\n        # 2. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 3. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 4. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 5. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 6. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 7. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 8. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 9. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 10. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 11. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 12. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 13. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 14. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \ufffd"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L >= W\n        # 3. L - W < W\n        # 4. L - W = area - W * W\n        # 5. L - W = area - W * W\n        # 6. L - W = area - W * W\n        # 7. L - W = area - W * W\n        # 8. L - W = area - W * W\n        # 9. L - W = area - W * W\n        # 10. L - W = area - W * W\n        # 11. L - W = area - W * W\n        # 12. L - W = area - W * W\n        # 13. L - W = area - W * W\n        # 14. L - W = area - W * W\n        # 15. L - W = area - W * W\n        # 16. L - W = area - W * W\n        # 17. L - W = area - W * W\n        # 18. L - W = area - W * W\n        # 19. L - W = area - W * W\n        # 20. L - W = area - W * W\n        # 21. L - W = area - W * W\n        # 22. L - W = area - W * W\n        # 23. L - W = area - W * W\n        # 24. L - W = area - W * W\n        # 25. L - W = area - W * W\n        # 26. L - W = area - W * W\n        # 27. L - W = area - W * W\n        # 28. L - W = area - W * W\n        # 29. L - W = area - W * W\n        # 30. L - W = area - W * W\n        # 31. L - W = area - W * W\n        # 32. L - W = area - W * W\n        # 33. L - W = area - W * W\n        # 34. L - W = area - W * W\n        # 35. L - W = area - W * W\n        # 36. L - W = area - W * W\n        # 37. L - W = area - W * W\n        # 38. L - W = area - W * W\n        # 39. L - W = area - W * W\n        # 40. L - W = area - W * W\n        # 41. L - W = area - W * W\n        # 42. L - W = area - W * W\n        # 43. L - W = area - W * W\n        # 44. L - W = area - W * W\n        # 45. L - W = area - W * W\n        # 46. L - W = area - W * W\n        # 47. L - W = area - W * W\n        # 48. L - W = area - W * W\n        # 49. L - W = area - W * W\n        # 50. L - W = area - W * W\n        # 51. L - W = area - W * W\n        # 52. L - W = area - W * W\n        # 53. L - W = area - W * W\n        # 54. L - W = area - W * W\n        # 55. L - W = area - W * W\n        # 56. L - W = area - W * W\n        # 57. L - W = area - W * W\n        # 58. L - W = area - W * W\n        # 59. L - W = area - W * W\n        # 60. L - W = area - W * W\n        # 61. L - W = area - W * W\n        # 62. L - W = area - W * W\n        # 63. L - W = area - W * W\n        # 64. L - W = area - W * W\n        # 65. L - W = area - W * W\n        # 66."}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def build_graph(wordList):\n            graph = {}\n            for word in wordList:\n                for i in range(len(word)):\n                    key = word[:i] + '_' + word[i+1:]\n                    if key not in graph:\n                        graph[key] = []\n                    graph[key].append(word)\n            return graph\n        \n        def build_path(graph, beginWord, endWord, path):\n            if beginWord == endWord:\n                return [path]\n            if beginWord not in graph:\n                return []\n            paths = []\n            for neighbor in graph[beginWord]:\n                new_path = path + [neighbor]\n                new_paths = build_path(graph, neighbor, endWord, new_path)\n                paths.extend(new_paths)\n            return paths\n        \n        graph = build_graph(wordList)\n        paths = build_path(graph, beginWord, endWord, [beginWord])\n        return paths"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        if n == 1:\n            return True\n        else:\n            return False"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        res.append([])\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res.append([nums[i]])\n            else:\n                temp = []\n                for j in range(len(res)):\n                    temp.append(res[j] + [nums[i]])\n                res += temp\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc21c\ud68c\ud558\uba74\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 3. \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 4. \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 5. \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 6. \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 7. \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 8. \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 9. \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud558\uba74\uc11c \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uaebc\ub0b4\uc11c \uc624\ub978\ucabd\uc73c\ub85c \uc9c4\ud589\ud55c\ub2e4.\n        # 10. \uc624\ub978\ucabd\uc73c\ub85c \ufffd"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        for rect in rectangles:\n            x_min = min(x_min, rect[0])\n            x_max = max(x_max, rect[2])\n            y_min = min(y_min, rect[1])\n            y_max = max(y_max, rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        if x_min == x_max or y_min == y_max:\n            return False\n        if (x_min, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_min) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 2,3,4,0,5,1\n        # 2,3,4,0,1,5\n        # 3,4,5,0,1,2\n        # 3,4,5,0,2,1\n        # 3,4,5,1,0,2\n        # 4,5,0,1,2,3\n        # 4,5,0,2,1,3\n        # 4,5,1,0,3,2\n        # 5,0,1,2,3,4\n        # 5,0,2,1,3,4\n        # 5,1,0,3,4,2\n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 2,3,4,0,5,1\n        # 2,3,4,0,1,5\n        # 3,4,5,0,1,2\n        # 3,4,5,0,2,1\n        # 3,4,5,1,0,2\n        # 4,5,0,1,2,3\n        # 4,5,0,2,1,3\n        # 4,5,1,0,3,2\n        # 5,0,1,2,3,4\n        # 5,0,2,1,3,4\n        # 5,1,0,3,4,2\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 2,3,4,0,5,1\n        # 2,3,4,0,1,5\n        # 3,4,5,0,1,2\n        # 3,4,5,0,2,1\n        # 3,4,5,1,0,2\n        # 4,5,0,1,2,3\n        # 4,5,0,2,1,3\n        # 4,5,1,0,3,2\n        # 5,0,1,2,3,4\n        # 5,0,2,1,3,4\n        # 5,1,0,3,4,2\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 2,3,4,0,5,1\n        # 2,3,4,0,1,5\n        # 3,4,5,0,1,2\n        # 3,4,5,0,2,1\n        # 3,4,5,1,0,2\n        # 4,5,0,1,2,3\n        # 4,5,0,2,1,3\n        # 4,5,1,0,3,2\n        # 5,0,1,2,3,4\n        # 5,0,2,1,3,4\n        # 5,1,0,3,4,2\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 2,3,4,0,5,1\n        # 2,3,4,0,1,5\n        # 3,4,5,0,1,2\n        # 3,4,5,0,2,"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n            \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l = 0\n        r = len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] == nums[l]:\n                l += 1\n            elif nums[mid] > nums[l]:\n                if nums[l] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == '1' or (s[0] == '2' and s[1] in '0123456'):\n                return 2\n            else:\n                return 1\n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        return dp[-1] % (10**9 + 7)"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            \n            inorder(root.left, min_diff, prev)\n            \n            if prev is not None:\n                min_diff = min(min_diff, root.val - prev)\n            \n            prev = root.val\n            \n            inorder(root.right, min_diff, prev)\n            \n            return min_diff\n        \n        return inorder(root, float('inf'), None)"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return []\n            left = dfs(root.left)\n            right = dfs(root.right)\n            return [root.val] + left + right\n        \n        res = dfs(root)\n        count = {}\n        for i in res:\n            count[i] = count.get(i, 0) + 1\n        max_count = max(count.values())\n        return [k for k, v in count.items() if v == max_count]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \uc601\ubb38\uc790, 1\uac1c \uc22b\uc790, 1\uac1c \ud2b9\uc218\ubb38\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\n        \n        # \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        if len(password) < 6:\n            return max(0, 6 - len(password))\n        elif len(password) > 20:\n            return max(0, len(password) - 20)\n        \n        # \ucd5c\uc18c 1\uac1c \uc601\ubb38\uc790, 1\uac1c \uc22b\uc790, 1\uac1c \ud2b9\uc218\ubb38\uc790\n        # \uc601\ubb38\uc790, \uc22b\uc790, \ud2b9\uc218\ubb38\uc790 \uac1c\uc218\n        alpha_cnt = 0\n        num_cnt = 0\n        special_cnt = 0\n        for c in password:\n            if c.isalpha():\n                alpha_cnt += 1\n            elif c.isdigit():\n                num_cnt += 1\n            else:\n                special_cnt += 1\n        \n        # \uc601\ubb38\uc790, \uc22b\uc790, \ud2b9\uc218\ubb38\uc790 \uac1c\uc218\uac00 \ucd5c\uc18c 1\uac1c \uc774\uc0c1\uc774\uba74 \uc548\ub428\n        if alpha_cnt < 1 or num_cnt < 1 or special_cnt < 1:\n            return max(0, 3 - alpha_cnt - num_cnt - special_cnt)\n        \n        # \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\n        # \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\ud558\uba74 \ucd5c\uc18c 1\uac1c \ud2b9\uc218\ubb38\uc790 \ucd94\uac00\n        # \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\ud558\uba74 \ucd5c\uc18c 1\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\n        # \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\ud558\uba74 \ucd5c\uc18c 1\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\n        # \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\ud558\uba74 \ucd5c\uc18c 1\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\n        # \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\ud558\uba74 \ucd5c\uc18c 1\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\n        # \uc5f0\uc18d\ub41c 3\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\uac70\ud558\uba74 \ucd5c\uc18c 1\uac1c \ud2b9\uc218\ubb38\uc790 \uc81c\ufffd"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        flag = -1\n        \n        for c in s:\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            res[i] += c\n            i += flag\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc67c\ucabd\ubd80\ud130 \uc624\ub978\ucabd\uc73c\ub85c \uc811\uadfc\ud558\uba74\uc11c \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 3. \ucd5c\ub300\uac12\uacfc \ud604\uc7ac \ub192\uc774\ub97c \ube44\uad50\ud558\uc5ec \ucd5c\ub300\uac12\ubcf4\ub2e4 \ud06c\uba74 \ucd5c\ub300\uac12 - \ud604\uc7ac \ub192\uc774\ub97c \ub354\ud55c\ub2e4.\n        # 4. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \uc791\uc73c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 5. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \ud06c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 6. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \uc791\uc73c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 7. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \ud06c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 8. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \uc791\uc73c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 9. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \ud06c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 10. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \uc791\uc73c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 11. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \ud06c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 12. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ub2e4 \uc791\uc73c\uba74 \ucd5c\ub300\uac12\uc744 \ud604\uc7ac \ub192\uc774\ub85c \ubcc0\uacbd\ud55c\ub2e4.\n        # 13. \ucd5c\ub300\uac12\uc774 \ud604\uc7ac \ub192\uc774\ubcf4\ufffd"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a list of size n with all zeros\n        ## 2. Iterate through the nums array and mark the index of the nums[i] as negative\n        ## 3. Iterate through the list and add the index of the nums[i] to the result list\n        ## 4. Return the result list\n        \n        n = len(nums)\n        result = [0] * n\n        \n        for i in range(n):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        for i in range(n):\n            if nums[i] > 0:\n                result.append(i+1)\n        \n        return result"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        def mergeSort(nums):\n            if len(nums) <= 1:\n                return nums\n            mid = len(nums) // 2\n            left = mergeSort(nums[:mid])\n            right = mergeSort(nums[mid:])\n            return merge(left, right)\n        \n        def merge(left, right):\n            i = j = 0\n            res = []\n            while i < len(left) and j < len(right):\n                if left[i][0] <= right[j][0]:\n                    res.append(left[i])\n                    i += 1\n                else:\n                    res.append(right[j])\n                    j += 1\n            res += left[i:]\n            res += right[j:]\n            return res\n        \n        nums = [(nums[i], i) for i in range(len(nums))]\n        nums = mergeSort(nums)\n        res = [0] * len(nums)\n        for i in range(len(nums)-1, -1, -1):\n            res[nums[i][1]] = i\n        return res"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                ans += 2\n                prev = interval[1] - 1\n            else:\n                ans += 1\n                prev -= 1\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            if root1.val != root2.val:\n                return False\n            return isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u539f\u59cb\u5b57\u7b26\u4e32\u62c6\u5206\u6210\u5b50\u4e32\n        # 2. \u628a\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u4e32\n        # 3. \u628a\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u4e32\n        # 4. \u628a\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 5. \u628a\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 6. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 7. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 8. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 9. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 10. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 11. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 12. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 13. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 14. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 15. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\n        # 16. \u628a\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u4e32\u62c6\u5206\u6210\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50\u5b50"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 1:\n            return True\n        if n < 4:\n            return False\n        if n % 4 != 0:\n            return False\n        return self.isPowerOfFour(n/4)"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, s, ans):\n            if left == 0 and right == 0:\n                ans.append(s)\n                return\n            if left > 0:\n                generate(left - 1, right, s + '(', ans)\n            if right > left:\n                generate(left, right - 1, s + ')', ans)\n        \n        ans = []\n        generate(n, n, '', ans)\n        return ans"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\ub294\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc558\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 3. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc9c0 \ubabb\ud588\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # 4. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc558\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc9c0 \ubabb\ud588\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # 6. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc558\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 7. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc9c0 \ubabb\ud588\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc558\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 9. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc9c0 \ubabb\ud588\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # 10. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc558\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 11. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc9c0 \ubabb\ud588\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud55c\ub2e4.\n        # 12. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \uc9dd\uc774 \ub9de\ub294 \uad04\ud638\ub97c \ucc3e\uc558\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ufffd"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            denominator = -denominator\n        elif denominator < 0:\n            numerator = -numerator\n            denominator = -denominator\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = \"\"\n        if numerator < denominator:\n            res += \"-\"\n            numerator = -numerator\n        else:\n            res += \"\"\n        \n        res += str(numerator // denominator)\n        numerator = numerator % denominator\n        if numerator == 0:\n            return res\n        \n        res += \".\"\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + \"(\" + res[seen[numerator]:] + \")\"\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator = numerator % denominator\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [envelopes[0][1]]\n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = envelopes[i][1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        row_zero = False\n        col_zero = False\n\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    if i == 0:\n                        row_zero = True\n                    if j == 0:\n                        col_zero = True\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n\n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n\n        if row_zero:\n            for j in range(cols):\n                matrix[0][j] = 0\n\n        if col_zero:\n            for i in range(rows):\n                matrix[i][0] = 0\n\n        return matrix"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # 2. Find the nth node from the end\n        if length == n:\n            return head.next\n        \n        # 3. Find the nth node from the beginning\n        curr = head\n        for i in range(length - n - 1):\n            curr = curr.next\n        \n        # 4. Remove the nth node from the end\n        curr.next = curr.next.next\n        \n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1 & nums2)"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 1:\n            return 0\n        if sum(machines) % n != 0:\n            return -1\n        avg = sum(machines) // n\n        res = 0\n        cur = 0\n        for i in range(n):\n            cur += machines[i] - avg\n            res = max(res, abs(cur))\n        return res"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    dp[i][j] = (1 if i == 0 else dp[i-1][j]) + 1\n        \n        max_area = 0\n        for i in range(m):\n            max_area = max(max_area, self.largestRectangleArea(dp[i]))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        for i in range(2**len(nums)):\n            temp = []\n            for j in range(len(nums)):\n                if i & (1<<j):\n                    temp.append(nums[j])\n            res.append(temp)\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc911\uc559\uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 2. \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \ud6c4 \uc911\uc559\uac12 \ucc3e\uae30\n        # 3. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\uacfc \uac19\uc73c\uba74 \uc911\uc559\uac12 \ub9ac\ud134\n        # 4. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 5. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\ubcf4\ub2e4 \ud06c\uba74 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 6. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\uacfc \uac19\uc73c\uba74 \uc911\uc559\uac12 \ub9ac\ud134\n        # 7. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 8. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\ubcf4\ub2e4 \ud06c\uba74 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 9. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\uacfc \uac19\uc73c\uba74 \uc911\uc559\uac12 \ub9ac\ud134\n        # 10. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 11. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\ubcf4\ub2e4 \ud06c\uba74 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 12. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\uacfc \uac19\uc73c\uba74 \uc911\uc559\uac12 \ub9ac\ud134\n        # 13. \uc911\uc559\uac12\uc774 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50 \uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 14. \uc911\uc559\uac12\ufffd"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc22b\uc790\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 2. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc18c\uc218\uc810\uc774 \uc788\ub294\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 3. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 4. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 5. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 6. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 7. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 8. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 9. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 10. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 11. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 12. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 13. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 14. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 15. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 16. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 17. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\uc218\uc778\uc9c0 \ud310\ub2e8\ud55c\ub2e4.\n        # 18. \uc815\uaddc\uc2dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc815\ufffd"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\"\n        }\n        \n        roman_num = \"\"\n        \n        for key in roman_dict.keys():\n            while num >= key:\n                roman_num += roman_dict[key]\n                num -= key\n                \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## 1st solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 2nd solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 3rd solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 4th solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 5th solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 6th solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 7th solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 8th solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 9th solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with a frequency of 1\n        \n        ## 10th solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check 3x3 box\n            box_x = pos[1] // 3\n            box_y = pos[0] // 3\n            \n            for i in range(box_y*3, box_y*3 + 3):\n                for j in range(box_x*3, box_x*3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1,10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half with the second half\n        \n        # 1. Find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the linked list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # 3. Compare the first half with the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        left = 0\n        right = num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,2]\n        if n == 4:\n            return [0,1,1,2,2]\n        if n == 5:\n            return [0,1,1,2,2,3]\n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]\n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10]\n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]\n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11]\n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11]\n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12]\n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12]\n        if n == 25:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i,j,word,visited):\n            if len(word) == 0:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return False\n            visited[i][j] = True\n            res = dfs(i+1,j,word[1:],visited) or dfs(i-1,j,word[1:],visited) or dfs(i,j+1,word[1:],visited) or dfs(i,j-1,word[1:],visited)\n            visited[i][j] = False\n            return res\n        \n        res = []\n        visited = [[False for i in range(len(board[0]))] for j in range(len(board))]\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(i,j,word,visited):\n                        res.append(word)\n                        break\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \uac01 \ud589\uc758 \uc22b\uc790\uac00 \uc911\ubcf5\ub418\ub294\uc9c0 \ud655\uc778\n        for i in range(9):\n            row = set()\n            for j in range(9):\n                if board[i][j] != '.':\n                    if board[i][j] in row:\n                        return False\n                    row.add(board[i][j])\n        \n        # 2. \uac01 \uc5f4\uc758 \uc22b\uc790\uac00 \uc911\ubcf5\ub418\ub294\uc9c0 \ud655\uc778\n        for i in range(9):\n            col = set()\n            for j in range(9):\n                if board[j][i] != '.':\n                    if board[j][i] in col:\n                        return False\n                    col.add(board[j][i])\n        \n        # 3. \uac01 3x3 \uc601\uc5ed\uc758 \uc22b\uc790\uac00 \uc911\ubcf5\ub418\ub294\uc9c0 \ud655\uc778\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                square = set()\n                for k in range(i, i+3):\n                    for l in range(j, j+3):\n                        if board[k][l] != '.':\n                            if board[k][l] in square:\n                                return False\n                            square.add(board[k][l])\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                answer.append(\"Fizz\")\n            elif i%5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a single string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 25600\n        # 26^4 = 1440000\n        # 26^5 = 73720000\n        # 26^6 = 3689600000\n        # 26^7 = 195312500000\n        # 26^8 = 10737418240000\n        # 26^9 = 536870912000000\n        # 26^10 = 26843545600000000\n        # 26^11 = 1342177280000000000\n        # 26^12 = 67108864000000000000\n        # 26^13 = 3355443200000000000000\n        # 26^14 = 167772160000000000000000\n        # 26^15 = 8388608000000000000000000\n        # 26^16 = 414745600000000000000000000\n        # 26^17 = 20971520000000000000000000000\n        # 26^18 = 1048576000000000000000000000000\n        # 26^19 = 52428800000000000000000000000000\n        # 26^20 = 2621440000000000000000000000000000\n        # 26^21 = 131072000000000000000000000000000000\n        # 26^22 = 6553600000000000000000000000000000000\n        # 26^23 = 327680000000000000000000000000000000000\n        # 26^24 = 16384000000000000000000000000000000000000\n        # 26^25 = 819200000000000000000000000000000000000000\n        # 26^26 = 40960000000000000000000000000000000000000000\n        # 26^27 = 2048000000000000000000000000000000000000000000\n        # 26^28 = 10240000000000000000000000000000000000000000000\n        # 26^29 = 5120000000000000000000000000000000000000000000"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # merge the first and second halves\n        first = head\n        second = prev\n        while second.next:\n            temp = first.next\n            first.next = second\n            first = temp\n            \n            temp = second.next\n            second.next = first\n            second = temp\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] not in d:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n            elif d[pattern[i]] != s[i]:\n                return False\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, res):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]], res)\n        \n        res = []\n        backtrack(nums, [], res)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create a new list node\n        # 2. Create a new list node\n        # 3. Create a new list node\n        # 4. Create a new list node\n        # 5. Create a new list node\n        # 6. Create a new list node\n        # 7. Create a new list node\n        # 8. Create a new list node\n        # 9. Create a new list node\n        # 10. Create a new list node\n        # 11. Create a new list node\n        # 12. Create a new list node\n        # 13. Create a new list node\n        # 14. Create a new list node\n        # 15. Create a new list node\n        # 16. Create a new list node\n        # 17. Create a new list node\n        # 18. Create a new list node\n        # 19. Create a new list node\n        # 20. Create a new list node\n        # 21. Create a new list node\n        # 22. Create a new list node\n        # 23. Create a new list node\n        # 24. Create a new list node\n        # 25. Create a new list node\n        # 26. Create a new list node\n        # 27. Create a new list node\n        # 28. Create a new list node\n        # 29. Create a new list node\n        # 30. Create a new list node\n        # 31. Create a new list node\n        # 32. Create a new list node\n        # 33. Create a new list node\n        # 34. Create a new list node\n        # 35. Create a new list node\n        # 36. Create a new list node\n        # 37. Create a new list node\n        # 38. Create a new list node\n        # 39. Create a new list node\n        # 40. Create a new list node\n        # 41. Create a new list node\n        # 42. Create a new list node\n        # 43. Create a new list node\n        # 44. Create a new list node\n        # 45. Create a new list node\n        # 46. Create a new list node\n        # 47. Create a new list node\n        # 48. Create a new list node\n        # 49. Create a new list node\n        # 50. Create a new list node\n        # 51. Create a new list node\n        # 52. Create a new list node\n        # 53. Create a new list node\n        # 54. Create a new list node\n        # 55. Create a new list node\n        # 56. Create a new list node\n        # 57. Create a new list node\n        # 58. Create a new list node\n        # 59. Create a new list node\n        # 60. Create a new list node\n        # 61. Create a new list node\n        # 62. Create a new list node\n        # 63. Create a new list node\n        # 64. Create a new list node\n        # 65. Create a new list node\n        # 66. Create a new list node\n        # 67. Create a new list node\n        # 68. Create a new list node\n        # 69. Create a new list node\n        # 70. Create a new list node\n        # 71. Create a new list node\n        # 72. Create a new list node\n        # 73. Create a new list node\n        # 74. Create a new list node\n        # 75. Create a new list node\n        # 76. Create a new list node\n        # 77. Create a new list node\n        # 78. Create a new list node\n        # 79. Create a new list node\n        # 80. Create a new list node\n        # 81. Create a new list node\n        # 82. Create a new list node\n        # 83. Create a new list node\n        # 84. Create a new list node\n        # 85. Create a new list node\n        # 86. Create a new list node"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        # 2. Reverse the binary string\n        reversed_binary = binary[::-1]\n        \n        # 3. Convert the reversed binary string to decimal\n        decimal = int(reversed_binary, 2)\n        \n        # 4. Return the complement of the decimal number\n        return decimal"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        i = 0\n        while i < len(nums) - 2:\n            if nums[i+1] - nums[i] == nums[i+2] - nums[i+1]:\n                count += 1\n                i += 1\n            else:\n                i += 1\n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        cur_len = 0\n        cur_words = []\n        for word in words:\n            if cur_len + len(word) + len(cur_words) > maxWidth:\n                if len(cur_words) == 1:\n                    res.append(cur_words[0] + ' ' * (maxWidth - cur_len))\n                else:\n                    space_num = (maxWidth - cur_len) // (len(cur_words) - 1)\n                    extra_space = (maxWidth - cur_len) % (len(cur_words) - 1)\n                    res.append(' '.join(cur_words[:extra_space] + [' ' * space_num] + cur_words[extra_space:]))\n                cur_len = 0\n                cur_words = []\n            cur_len += len(word)\n            cur_words.append(word)\n        if cur_len:\n            res.append(' '.join(cur_words) + ' ' * (maxWidth - cur_len))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def is_concatenated(word, word_dict):\n            if word in word_dict:\n                return True\n            for i in range(1, len(word)):\n                left = word[:i]\n                right = word[i:]\n                if left in word_dict and right in word_dict:\n                    return True\n            return False\n        \n        word_dict = set(words)\n        res = []\n        for word in words:\n            if is_concatenated(word, word_dict):\n                res.append(word)\n        return res"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                self.count += 1\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        self.count = 0\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return self.count"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n\n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n\n        # nums1 = [1,2,3,0,0,0]"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = list(set(nums))\n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}