{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end += 1\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        for i in range(1, len(t) + 1):\n            dp[i] = dp[i - 1]\n            for j in range(1, len(s) + 1):\n                if t[i - 1] == s[j - 1]:\n                    dp[i] += dp[i - 1]\n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5c06\u6570\u7ec4\u4e2d\u7684\u8d1f\u6570\u548c\u5927\u4e8e\u6570\u7ec4\u957f\u5ea6\u7684\u6570\u53d8\u4e3a\u6570\u7ec4\u957f\u5ea6+1\n        # 2. \u5c06\u6570\u7ec4\u4e2d\u7684\u6570\u53d8\u4e3a\u6570\u7ec4\u4e0b\u6807\n        # 3. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 4. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 5. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 6. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 7. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 8. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 9. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 10. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 11. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 12. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 13. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 14. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 15. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 16. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 17. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 18. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 19. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 20. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 21. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 22. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 23. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 24. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 25. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u7684\u6570\u548c\u5f53\u524d\u4e0b\u6807\u7684\u6570\u5bf9\u5e94\u7684\u6570\u4ea4\u6362\n        # 26. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u7684\u6570"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u9636\u4e58\n        fac = 1\n        for i in range(1, n):\n            fac *= i\n        # 2. \u8ba1\u7b97k\u7684\u9636\u4e58\n        k -= 1\n        # 3. \u8ba1\u7b97k/fac\n        res = []\n        for i in range(n - 1, -1, -1):\n            fac //= i\n            # 4. \u8ba1\u7b97k/fac\u7684\u4f59\u6570\n            res.append(str(k // fac + 1))\n            k %= fac\n        # 5. \u8ba1\u7b97res\n        return ''.join(res[::-1])"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, path, idx):\n            if not num:\n                if target == 0 and op == '+':\n                    res.append(path)\n                return\n            for i in range(1, len(num)+1):\n                if i == 1 or (num[0] != '0' and op != '+'):\n                    cur = int(num[:i])\n                    if op == '+':\n                        backtrack(num[i:], target-cur, '+', res, path+'+'+str(cur), i)\n                    elif op == '-':\n                        backtrack(num[i:], target+cur, '-', res, path+'-'+str(cur), i)\n                    elif op == '*':\n                        backtrack(num[i:], target-cur*int(path[-1]), '*', res, path+'*'+str(cur), i)\n        \n        res = []\n        backtrack(num, target, '+', res, '', 0)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, cur_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return cur_sum * 10 + root.val\n            return dfs(root.left, cur_sum * 10 + root.val) + dfs(root.right, cur_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()[::-1]\n        return '-'.join(s[i:i+k] for i in range(0, len(s), k))[::-1]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        start = 0\n        tank = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            else:\n                digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '.')\n        \n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    (first_match and self.isMatch(s[1:], p)))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick_max(nums, k):\n            stack = []\n            drop = len(nums) - k\n            for num in nums:\n                while drop and stack and num > stack[-1] and stack[-1] < num:\n                    stack.pop()\n                    drop -= 1\n                stack.append(num)\n            return stack[:-drop]\n        \n        return max(pick_max(nums1, k) + pick_max(nums2, k), pick_max(nums1[:k-len(nums2)], k) + pick_max(nums2[:k-len(nums1)], k))"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                sum += i + num // i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        dp[m - 1][n] = dp[m][n - 1] = 1\n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        l, r = 0, nums[-1] - nums[0]\n        while l < r:\n            mid = (l + r) // 2\n            cnt, left = 0, 0\n            for num in nums:\n                cnt += left\n                left += (num - nums[left] <= mid)\n            if cnt < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            while l < r and s[l] not in vowels:\n                l += 1\n            while l < r and s[r] not in vowels:\n                r -= 1\n            s[l], s[r] = s[r], s[l]\n            l += 1\n            r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                cur_len = 1\n                while num + 1 in nums_set:\n                    cur_len += 1\n                    num += 1\n                max_len = max(max_len, cur_len)\n        \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums)\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(set(nums))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O(1) space\n        ## sum(range(n+1)) - sum(nums) - sum(set(nums)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1)) - sum(range(n+1))\n        ## O(n) time and O"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([beginWord])\n        distance = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                if word == endWord:\n                    return distance\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word in wordList:\n                            queue.append(new_word)\n                            wordList.remove(new_word)\n            distance += 1\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) > len(b):\n            a, b = b, a\n        a, b = list(a), list(b)\n        carry = 0\n        i = len(a) - 1\n        j = len(b) - 1\n        while i >= 0:\n            if j >= 0:\n                carry += int(a[i]) + int(b[j])\n                a[i] = str(carry % 2)\n                carry //= 2\n                i -= 1\n                j -= 1\n            else:\n                carry += int(a[i])\n                a[i] = str(carry % 2)\n                carry //= 2\n                i -= 1\n        if carry:\n            a.insert(0, str(carry))\n        return ''.join(a)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        if nums[left] != target:\n            return [-1, -1]\n        left = left + 1\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return 0\n        max_pos, end, step = nums[0], 0, 0\n        for i in range(n-1):\n            if i > end:\n                end = max_pos\n                step += 1\n            max_pos = max(max_pos, i + nums[i])\n        return step"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0, len(prices)-1)) - (prices[i+1]-prices[i] for i in range(0, len(prices)-1)) for i in range(0, len(prices)-1))\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        for i in range(1, len(prices)):\n            for j in range(1, k+1):\n                dp[j][0] = max(dp[j][0], dp[j-1][1]+prices[i])\n                dp[j][1] = max(dp[j][1], dp[j][0]-prices[i])\n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 0xffffffff + num + 1\n        \n        ans = ''\n        while num:\n            ans = str(num % 16) + ans\n            num //= 16\n        \n        return ans"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u7684\u6570\u7ec4\n        # 2. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u5bf9\u5e94\u7684\u6570\u7ec4\u503c\u52a01\n        # 3. \u904d\u5386\u5b57\u7b26\u4e32\uff0c\u5982\u679c\u6570\u7ec4\u503c\u4e3a1\uff0c\u5219\u8fd4\u56de\u5f53\u524d\u5b57\u7b26\u7684\u7d22\u5f15\n        # 4. \u5982\u679c\u904d\u5386\u5b8c\u5b57\u7b26\u4e32\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\uff0c\u5219\u8fd4\u56de-1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2 or indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123."}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        return left + right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = num1[::-1], num2[::-1]\n        carry = 0\n        res = []\n        for i in range(len(num1)):\n            sum = int(num1[i]) + int(num2[i]) + carry\n            carry = sum // 10\n            res.append(str(sum % 10))\n        for i in range(len(num1), len(num2)):\n            sum = int(num2[i]) + carry\n            carry = sum // 10\n            res.append(str(sum % 10))\n        if carry:\n            res.append(str(carry))\n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        res = 0\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            if s[i] == '+':\n                res += sign * num\n                sign = 1\n                num = 0\n            elif s[i] == '-':\n                res += sign * num\n                sign = -1\n                num = 0\n            elif s[i] == '(':\n                stack.append(res)\n                stack.append(sign)\n                res = 0\n                sign = 1\n            elif s[i] == ')':\n                res += sign * num\n                res *= stack.pop()\n                res += stack.pop()\n                num = 0\n            else:\n                num = num * 10 + int(s[i])\n        return res + sign * num"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max profit\n        # 5. else, greedily choose the max capital\n        # 6. return the max capital\n        # 7. if k == 0, return w\n        # 8. else, return w\n        \n        # sort capital and profits\n        # O(nlogn)\n        # O(1)\n        # 1. sort capital and profits\n        # 2. greedy\n        # 3. iterate over capital\n        # 4. if k > 0, greedily choose the max"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {')':'(', ']':'[', '}':'{'}\n        for i in s:\n            if i not in d:\n                stack.append(i)\n            elif stack and d[i] == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        # find the first number that is bigger than the number to its right\n        # swap the two numbers\n        # reverse the numbers to the right of the first number\n        # return the result\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # find the first number that is bigger than the number to its right\n        j = len(nums) - 1\n        while j >= 0 and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers to the right of the first number\n        left, right = i+1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        dic = {}\n        for i, num in en\n            if num in dic and i - dic[num] <= k:\n                return True\n            dic[num] = i\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n <= 1:\n            return 0\n        \n        couples = [(row[i], row[i+1]) for i in range(0, n-1, 2)]\n        couples.sort()\n        \n        ans = 0\n        for i in range(1, len(couples)):\n            if couples[i][0] != couples[i-1][1]:\n                ans += 1\n        return ans"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if not s1:\n            return s2 == s3\n        \n        if not s2:\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        firstRow = set(\"qwertyuiop\")\n        secondRow = set(\"asdfghjkl\")\n        thirdRow = set(\"zxcvbnm\")\n        \n        res = []\n        for word in words:\n            if word[0] in firstRow:\n                row = firstRow\n            elif word[0] in secondRow:\n                row = secondRow\n            else:\n                row = thirdRow\n            for c in word:\n                if c not in row:\n                    break\n            else:\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        tail = curr\n        for i in range(right - left):\n            tmp = curr.next\n            curr.next = curr.next.next\n            tmp.next = prev.next\n            prev.next = tmp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be center of the string\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba, the longest palindrome is abba\n        # if the string is abba, the longest palindrome is abba\n        # if the string is abcba"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            return s if s == t else \"\"\n        \n        if len(s) == 1:\n            return s if s == t else \"\"\n        \n        if len(t) == 1:\n            return s if s == t else \"\"\n        \n        t_dict = {}\n        for c in t:\n            if c not in t_dict:\n                t_dict[c] = 1\n            else:\n                t_dict[c] += 1\n        \n        s_dict = {}\n        for c in s[:len(t)]:\n            if c not in s_dict:\n                s_dict[c] = 1\n            else:\n                s_dict[c] += 1\n        \n        if s_dict == t_dict:\n            return t\n        \n        left = 0\n        right = len(t)\n        min_left = 0\n        min_right = len(s)\n        min_len = len(s)\n        \n        for i in range(len(t), len(s)):\n            if s[i] not in s_dict:\n                continue\n            \n            s_dict[s[i]] -= 1\n            if s_dict[s[i]] == 0:\n                del s_dict[s[i]]\n            \n            if s[i] in t_dict:\n                t_dict[s[i]] -= 1\n                if t_dict[s[i]] == 0:\n                    del t_dict[s[i]]\n            \n            if len(t_dict) == 0:\n                if i - left < min_len:\n                    min_left = left\n                    min_right = i\n                    min_len = i - left\n                left += 1\n        \n        return s[min_left:min_right+1] if min_len != len(s) else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i - 1] == distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2]:\n                return True\n            if i >= 5 and distance[i - 2] >= distance[i - 4] and distance[i - 1] <= distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 2] + distance[i - 4] >= distance[i - 4]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u7edf\u8ba1\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u5982\u679c\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u4e3a\u5947\u6570\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 3. \u5982\u679c\u5b57\u7b26\u51fa\u73b0\u7684\u6b21\u6570\u4e3a\u5076\u6570\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 4. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u5927\u4e8e2\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 5. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a1\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 6. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a0\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 7. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a2\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 8. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a3\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 9. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a4\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 10. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a5\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 11. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a6\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 12. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a7\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 13. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a8\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 14. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a9\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 15. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a10\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 16. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a11\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 17. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a12\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 18. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a13\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 19. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a14\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 20. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a15\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 21. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a16\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 22. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a17\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 23. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a18\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 24. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a19\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 25. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a20\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 26. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a21\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 27. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a22\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 28. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a23\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 29. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a24\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 30. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a25\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 31. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a26\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 32. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a27\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 33. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a28\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 34. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a29\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 35. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a30\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 36. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a31\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 37. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a32\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 38. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a33\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 39. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a34\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 40. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a35\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 41. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a36\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 42. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a37\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e00\u4e2a\u4e2d\u5fc3\u70b9\n        # 43. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a38\uff0c\u5219\u53ef\u4ee5\u653e\u7f6e\u4e24\u4e2a\u4e2d\u5fc3\u70b9\n        # 44. \u5982\u679c\u51fa\u73b0\u7684\u6b21\u6570\u4e3a39\uff0c"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(forest), len(forest[0])\n        trees = []\n        for i in range(m):\n            for j in range(n):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        trees.sort()\n        ans = 0\n        cur = (0, 0)\n        for h, i, j in trees:\n            d = self.bfs(forest, cur, (i, j))\n            if d == -1:\n                return -1\n            ans += d\n            cur = (i, j)\n        return ans\n        \n    def bfs(self, forest, start, end):\n        m, n = len(forest), len(forest[0])\n        q = collections.deque([start])\n        visited = set([start])\n        step = 0\n        while q:\n            for _ in range(len(q)):\n                i, j = q.popleft()\n                if (i, j) == end:\n                    return step\n                for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                    if 0 <= x < m and 0 <= y < n and forest[x][y] > 1 and (x, y) not in visited:\n                        q.append((x, y))\n                        visited.add((x, y))\n            step += 1\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use two pointers to find the range sum\n        # 3. use a hashmap to store the range sum and its count\n        # 4. use a variable to store the count\n        # 5. return the count\n        \n        nums = sorted(nums)\n        count = 0\n        n = len(nums)\n        d = {0:1}\n        s = 0\n        for i in range(n):\n            s += nums[i]\n            count += d.get(s - lower, 0)\n            count += d.get(s - upper - 1, 0)\n            d[s] = d.get(s, 0) + 1\n        return count"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2*n+0.25)**0.5-0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        \n        res = [0,1]\n        for i in range(1,n):\n            res += [res[-1] + (1<<i)]\n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, lower, upper):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return helper(node.left, lower, node.val) and helper(node.right, node.val, upper)\n        \n        return helper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        res = []\n        for i in range(len(intervals)):\n            if newInterval[1] < intervals[i][0]:\n                res.append(newInterval)\n                return res + intervals[i:]\n            elif newInterval[0] > intervals[i][1]:\n                res.append(intervals[i])\n            else:\n                newInterval = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]\n        res.append(newInterval)\n        return res"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s, start, end):\n            while start < end:\n                if s[start] != s[end]:\n                    return False\n                start += 1\n                end -= 1\n            return True\n        \n        res = []\n        if not s:\n            return res\n        \n        self.res = []\n        self.dfs(s, 0, [])\n        return self.res\n        \n    def dfs(self, s, start, path):\n        if start == len(s):\n            self.res.append(path[:])\n            return\n        \n        for i in range(start, len(s)):\n            if isPalindrome(s, start, i):\n                path.append(s[start:i+1])\n                self.dfs(s, i+1, path)\n                path.pop()"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n        # 2. \u627e\u5230\u6700\u5c0f\u5dee\u503c\n        # 3. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\n        # 4. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 5. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 6. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\n        # 7. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 8. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 9. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 10. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 11. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 12. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 13. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 14. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 15. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 16. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 17. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # 18. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\n        # 19. \u627e\u5230\u6700\u5c0f\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u503c\u7684\u4e24\u4e2a\u6570\u7684\u6700\u5927\u503c\u548c"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        seen = set([(0, 0)])\n        res = 0\n        while heap:\n            t, i, j = heapq.heappop(heap)\n            res = max(res, t)\n            if i == j == n - 1:\n                return res\n            for x, y in [(i - 1, j), (i, j - 1), (i + 1, j), (i, j + 1)]:\n                if 0 <= x < n and 0 <= y < n and (x, y) not in seen:\n                    heapq.heappush(heap, (grid[x][y], x, y))\n                    seen.add((x, y))\n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                if i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        m, n = len(num1), len(num2)\n        res = [0] * (m + n)\n        \n        for i in range(m-1, -1, -1):\n            for j in range(n-1, -1, -1):\n                mul = int(num1[i]) * int(num2[j])\n                p1, p2 = i + j, i + j + 1\n                sum = mul + res[p2]\n                res[p1] += sum // 10\n                res[p2] = sum % 10\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n        \n        return ''.join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 pointer for buy, 1 pointer for sell\n        # 3. buy = min(buy, price)\n        # 4. sell = max(sell, price - buy)\n        # 5. return sell\n        \n        buy = float('inf')\n        sell = 0\n        for price in prices:\n            buy = min(buy, price)\n            sell = max(sell, price - buy)\n        return sell"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper() and word[1:].islower():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [], []\n        while stack or root:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                res.append(root.val)\n                root = root.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            cnt = 0\n            for c in s:\n                if c == '(':\n                    cnt += 1\n                elif c == ')':\n                    if cnt > 0:\n                        cnt -= 1\n                    else:\n                        return False\n            return cnt == 0\n        \n        left, right = 0, len(s)\n        while left < right:\n            mid = (left + right) // 2\n            if isValid(s[:mid]):\n                right = mid\n            else:\n                left = mid + 1\n        return s[left:]"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists or len(lists) == 0:\n            return None\n        \n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i+1] if i+1 < len(lists) else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode()\n        curr = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        if l1:\n            curr.next = l1\n        if l2:\n            curr.next = l2\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u52a8\u6001\u89c4\u5212\n        # 2. \u56de\u6587\u5b50\u4e32\n        # 3. \u52a8\u6001\u89c4\u5212\n        # 4. \u52a8\u6001\u89c4\u5212\n        # 5. \u52a8\u6001\u89c4\u5212\n        # 6. \u52a8\u6001\u89c4\u5212\n        # 7. \u52a8\u6001\u89c4\u5212\n        # 8. \u52a8\u6001\u89c4\u5212\n        # 9. \u52a8\u6001\u89c4\u5212\n        # 10. \u52a8\u6001\u89c4\u5212\n        # 11. \u52a8\u6001\u89c4\u5212\n        # 12. \u52a8\u6001\u89c4\u5212\n        # 13. \u52a8\u6001\u89c4\u5212\n        # 14. \u52a8\u6001\u89c4\u5212\n        # 15. \u52a8\u6001\u89c4\u5212\n        # 16. \u52a8\u6001\u89c4\u5212\n        # 17. \u52a8\u6001\u89c4\u5212\n        # 18. \u52a8\u6001\u89c4\u5212\n        # 19. \u52a8\u6001\u89c4\u5212\n        # 20. \u52a8\u6001\u89c4\u5212\n        # 21. \u52a8\u6001\u89c4\u5212\n        # 22. \u52a8\u6001\u89c4\u5212\n        # 23. \u52a8\u6001\u89c4\u5212\n        # 24. \u52a8\u6001\u89c4\u5212\n        # 25. \u52a8\u6001\u89c4\u5212\n        # 26. \u52a8\u6001\u89c4\u5212\n        # 27. \u52a8\u6001\u89c4\u5212\n        # 28. \u52a8\u6001\u89c4\u5212\n        # 29. \u52a8\u6001\u89c4\u5212\n        # 30. \u52a8\u6001\u89c4\u5212\n        # 31. \u52a8\u6001\u89c4\u5212\n        # 32. \u52a8\u6001\u89c4\u5212\n        # 33. \u52a8\u6001\u89c4\u5212\n        # 34. \u52a8\u6001\u89c4\u5212\n        # 35. \u52a8\u6001\u89c4\u5212\n        # 36. \u52a8\u6001\u89c4\u5212\n        # 37. \u52a8\u6001\u89c4\u5212\n        # 38. \u52a8\u6001\u89c4\u5212\n        # 39. \u52a8\u6001\u89c4\u5212\n        # 40. \u52a8\u6001\u89c4\u5212\n        # 41. \u52a8\u6001\u89c4\u5212\n        # 42. \u52a8\u6001\u89c4\u5212\n        # 43. \u52a8\u6001\u89c4\u5212\n        # 44. \u52a8\u6001\u89c4\u5212\n        # 45. \u52a8\u6001\u89c4\u5212\n        # 46. \u52a8\u6001\u89c4\u5212\n        # 47. \u52a8\u6001\u89c4\u5212\n        # 48. \u52a8\u6001\u89c4\u5212\n        # 49. \u52a8\u6001\u89c4\u5212\n        # 50. \u52a8\u6001\u89c4\u5212\n        # 51. \u52a8\u6001\u89c4\u5212\n        # 52. \u52a8\u6001\u89c4\u5212\n        # 53. \u52a8\u6001\u89c4\u5212\n        # 54. \u52a8\u6001\u89c4\u5212\n        # 55. \u52a8\u6001\u89c4\u5212\n        # 56. \u52a8\u6001\u89c4\u5212\n        # 57. \u52a8\u6001\u89c4\u5212\n        # 58. \u52a8\u6001\u89c4\u5212\n        # 59. \u52a8\u6001\u89c4\u5212\n        # 60. \u52a8\u6001\u89c4\u5212\n        # 61. \u52a8\u6001\u89c4\u5212\n        # 62. \u52a8\u6001\u89c4\u5212\n        # 63. \u52a8\u6001\u89c4\u5212\n        # 64. \u52a8\u6001\u89c4\u5212\n        # 65. \u52a8\u6001\u89c4\u5212\n        # 66. \u52a8\u6001\u89c4\u5212\n        # 67. \u52a8\u6001\u89c4\u5212\n        # 68. \u52a8\u6001\u89c4\u5212\n        # 69. \u52a8\u6001\u89c4\u5212\n        # 70. \u52a8\u6001\u89c4\u5212\n        # 71. \u52a8\u6001\u89c4\u5212\n        # 72. \u52a8\u6001\u89c4\u5212\n        # 73. \u52a8\u6001\u89c4\u5212\n        # 74. \u52a8\u6001\u89c4\u5212\n        # 75. \u52a8\u6001\u89c4\u5212\n        # 76. \u52a8\u6001\u89c4\u5212\n        # 77. \u52a8\u6001\u89c4\u5212\n        # 78. \u52a8\u6001\u89c4\u5212\n        # 79. \u52a8\u6001\u89c4\u5212\n        # 80. \u52a8\u6001\u89c4\u5212\n        # 81. \u52a8\u6001\u89c4\u5212\n        # 82. \u52a8\u6001\u89c4\u5212\n        # 83. \u52a8\u6001\u89c4\u5212\n        # 84. \u52a8\u6001\u89c4\u5212\n        # 85. \u52a8\u6001\u89c4\u5212\n        # 86. \u52a8\u6001\u89c4\u5212\n        # 87. \u52a8\u6001\u89c4\u5212\n        # 88. \u52a8\u6001\u89c4\u5212\n        # 89. \u52a8\u6001\u89c4\u5212\n        # 90. \u52a8\u6001\u89c4\u5212\n        # 91. \u52a8\u6001\u89c4\u5212\n        # 92. \u52a8\u6001\u89c4\u5212\n        # 93. \u52a8\u6001\u89c4\u5212\n        # 94. \u52a8\u6001\u89c4\u5212\n        # 95. \u52a8\u6001\u89c4\u5212\n        # 96. \u52a8\u6001\u89c4\u5212\n        # 97. \u52a8\u6001\u89c4\u5212\n        # 98. \u52a8\u6001\u89c4\u5212\n        # 99. \u52a8\u6001\u89c4\u5212\n        # 100. \u52a8\u6001\u89c4\u5212\n        # 101. \u52a8\u6001\u89c4\u5212\n        # 102. \u52a8\u6001\u89c4\u5212\n        # 103."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^5 = 10^4 * 4\n        # 2. 10^5 = 10^4 * 9\n        # 3. 10^5 = 10^4 * 10\n        # 4. 10^5 = 10^4 * 10^2\n        # 5. 10^5 = 10^4 * 10^3\n        # 6. 10^5 = 10^4 * 10^4\n        # 7. 10^5 = 10^4 * 10^5\n        # 8. 10^5 = 10^4 * 10^6\n        # 9. 10^5 = 10^4 * 10^7\n        # 10. 10^5 = 10^4 * 10^8\n        # 11. 10^5 = 10^4 * 10^9\n        # 12. 10^5 = 10^4 * 10^10\n        # 13. 10^5 = 10^4 * 10^11\n        # 14. 10^5 = 10^4 * 10^12\n        # 15. 10^5 = 10^4 * 10^13\n        # 16. 10^5 = 10^4 * 10^14\n        # 17. 10^5 = 10^4 * 10^15\n        # 18. 10^5 = 10^4 * 10^16\n        # 19. 10^5 = 10^4 * 10^17\n        # 20. 10^5 = 10^4 * 10^18\n        # 21. 10^5 = 10^4 * 10^19\n        # 22. 10^5 = 10^4 * 10^20\n        # 23. 10^5 = 10^4 * 10^21\n        # 24. 10^5 = 10^4 * 10^22\n        # 25. 10^5 = 10^4 * 10^23\n        # 26. 10^5 = 10^4 * 10^24\n        # 27. 10^5 = 10^4 * 10^25\n        # 28. 10^5 = 10^4 * 10^26\n        # 29. 10^5 = 10^4 * 10^27\n        # 30. 10^5 = 10^4 * 10^28\n        # 31. 10^5 = 10^4 * 10^29\n        # 32. 10^5 = 10^4 * 10^30\n        # 33. 10^5 = 10^4 * 10^31\n        # 34. 10^5 = 10^4 * 10^32\n        # 35. 10^5 = 10^4 * 10^33\n        # 36. 10^5 = 10^4 * 10^34\n        # 37. 10^5 = 10^4 * 10^35\n        # 38. 10^5 = 10^4 * 10^36\n        # 39. 10^5 = 10^4 * 10^37\n        # 40. 10^5 = 10^4 * 10^38\n        # 41. 10^5 = 10^4 * 10^39\n        # 42. 10^5 = 10^4 * 10^40\n        # 43. 10^5 = 10^4 * 10^41\n        # 44. 10^5 = 10^4 * 10"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 pointers\n        # 3. 2 pointers\n        # 4. 2 pointers\n        # 5. 2 pointers\n        # 6. 2 pointers\n        # 7. 2 pointers\n        # 8. 2 pointers\n        # 9. 2 pointers\n        # 10. 2 pointers\n        # 11. 2 pointers\n        # 12. 2 pointers\n        # 13. 2 pointers\n        # 14. 2 pointers\n        # 15. 2 pointers\n        # 16. 2 pointers\n        # 17. 2 pointers\n        # 18. 2 pointers\n        # 19. 2 pointers\n        # 20. 2 pointers\n        # 21. 2 pointers\n        # 22. 2 pointers\n        # 23. 2 pointers\n        # 24. 2 pointers\n        # 25. 2 pointers\n        # 26. 2 pointers\n        # 27. 2 pointers\n        # 28. 2 pointers\n        # 29. 2 pointers\n        # 30. 2 pointers\n        # 31. 2 pointers\n        # 32. 2 pointers\n        # 33. 2 pointers\n        # 34. 2 pointers\n        # 35. 2 pointers\n        # 36. 2 pointers\n        # 37. 2 pointers\n        # 38. 2 pointers\n        # 39. 2 pointers\n        # 40. 2 pointers\n        # 41. 2 pointers\n        # 42. 2 pointers\n        # 43. 2 pointers\n        # 44. 2 pointers\n        # 45. 2 pointers\n        # 46. 2 pointers\n        # 47. 2 pointers\n        # 48. 2 pointers\n        # 49. 2 pointers\n        # 50. 2 pointers\n        # 51. 2 pointers\n        # 52. 2 pointers\n        # 53. 2 pointers\n        # 54. 2 pointers\n        # 55. 2 pointers\n        # 56. 2 pointers\n        # 57. 2 pointers\n        # 58. 2 pointers\n        # 59. 2 pointers\n        # 60. 2 pointers\n        # 61. 2 pointers\n        # 62. 2 pointers\n        # 63. 2 pointers\n        # 64. 2 pointers\n        # 65. 2 pointers\n        # 66. 2 pointers\n        # 67. 2 pointers\n        # 68. 2 pointers\n        # 69. 2 pointers\n        # 70. 2 pointers\n        # 71. 2 pointers\n        # 72. 2 pointers\n        # 73. 2 pointers\n        # 74. 2 pointers\n        # 75. 2 pointers\n        # 76. 2 pointers\n        # 77. 2 pointers\n        # 78. 2 pointers\n        # 79. 2 pointers\n        # 80. 2 pointers\n        # 81. 2 pointers\n        # 82. 2 pointers\n        # 83. 2 pointers\n        # 84. 2 pointers\n        # 85. 2 pointers\n        # 86. 2 pointers"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        res = 0\n        while True:\n            infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.add((i, j))\n            if not infected:\n                return res\n            res += 1\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        self.dfs(isInfected, infected, i, j)\n        return res\n    \n    def dfs(self, isInfected, infected, i, j):\n        if (i, j) in infected:\n            return\n        isInfected[i][j] = 2\n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= x < len(isInfected) and 0 <= y < len(isInfected[0]) and isInfected[x][y] == 1:\n                self.dfs(isInfected, infected, x, y)\n        infected.add((i, j))"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        \n        def dfs(i, j):\n            if not dp[i][j]:\n                res = 1\n                for x, y in ((i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)):\n                    if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                        res = max(res, 1 + dfs(x, y))\n                dp[i][j] = res\n            return dp[i][j]\n        \n        for i in range(m):\n            for j in range(n):\n                res = max(res, dfs(i, j))\n        return res"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        if n < 10:\n            return 1\n        if n < 100:\n            return 10\n        if n < 1000:\n            return 100\n        if n < 10000:\n            return 1000\n        if n < 100000:\n            return 10000\n        if n < 1000000:\n            return 100000\n        if n < 10000000:\n            return 1000000\n        if n < 100000000:\n            return 10000000\n        if n < 1000000000:\n            return 100000000\n        if n < 10000000000:\n            return 1000000000\n        if n < 100000000000:\n            return 10000000000\n        if n < 1000000000000:\n            return 100000000000\n        if n < 10000000000000:\n            return 1000000000000\n        if n < 100000000000000:\n            return 10000000000000\n        if n < 1000000000000000:\n            return 100000000000000\n        if n < 10000000000000000:\n            return 1000000000000000\n        if n < 100000000000000000:\n            return 10000000000000000\n        if n < 1000000000000000000:\n            return 100000000000000000\n        if n < 10000000000000000000:\n            return 1000000000000000000\n        if n < 100000000000000000000:\n            return 10000000000000000000\n        if n < 1000000000000000000000:\n            return 100000000000000000000\n        if n < 10000000000000000000000:\n            return 1000000000000000000000\n        if n < 100000000000000000000000:\n            return 10000000000000000000000\n        if n < 1000000000000000000000000:\n            return 100000000000000000000000\n        if n < 10000000000000000000000000:\n            return 1000000000000000000000000\n        if n < 100000000000000000000000000:\n            return 10000000000000000000000000\n        if n < 10000000000000000000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        # If dp[len(s)] == True, then we have a valid word break.\n        # Construct the list of words using the dp array.\n        res = []\n        if dp[len(s)]:\n            self.dfs(s, wordDict, 0, '', res, dp)\n        return res\n    \n    def dfs(self, s, wordDict, start, path, res, dp):\n        if start == len(s):\n            res.append(path[1:])\n            return\n        \n        for i in range(start, len(s)):\n            if dp[i + 1]:\n                self.dfs(s, wordDict, i + 1, path + ' ' + s[start:i + 1], res, dp)"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        queue = [root]\n        left_to_right = True\n        \n        while queue:\n            level = []\n            size = len(queue)\n            for _ in range(size):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n            left_to_right = not left_to_right\n        \n        return res"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(n):\n            if n == 0:\n                return []\n            if n == 1:\n                return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','1:00','2:00','4:00','8:00']\n            if n == 2:\n                return ['0:09','0:18','0:36','0:45','0:54','0:63','0:72','0:81','0:90','1:09','1:18','1:27','1:35','1:44','1:53','1:62','1:71','1:80','2:09','2:18','2:27','2:35','2:44','2:53','2:62','2:71','2:80','3:09','3:18','3:27','3:35','3:44','3:53','3:62','3:71','3:80','4:09','4:18','4:27','4:35','4:44','4:53','4:62','4:71','4:80','5:09','5:18','5:27','5:35','5:44','5:53','5:62','5:71','5:80','6:09','6:18','6:27','6:35','6:44','6:53','6:62','6:71','6:80','7:09','7:18','7:27','7:35','7:44','7:53','7:62','7:71','7:80','8:09','8:18','8:27','8:35','8:44','8:53','8:62','8:71','8:80','9:09','9:18','9:27','9:35','9:44','9:53','9:62','9:71','9:80']\n            if n == 3:\n                return ['0:056','0:112','0:168','0:224','0:280','0:336','0:392','0:448','0:504','0:560','0:616','0:672','0:728','0:784','0:840','0:896','0:952','0:1008','0:1064','0:1120','0:1176','0:1232','0:1288','0:1344','0:1400','0:1456','0:1512','0:1568','0:1624','0:1680','0:1736','0:1792','0:1848','0:1904','0:1960','0:2016','0:2072','0:2128','0:2184','0:2240','0:2296','0:2352','0:2408','0:2464','0:2520','0:2576','0:2632','0:2688','0:2744','0:2800','0:2856','0:2912','0:2968','0:3024','0:3080','0:3136','0:3192','0:3248','0:3304','0:3360','0:3416','0:3472','0:3528','0:3584','0:3640','0:3696','0:3752','0:3808','0:3864','0"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        \n        res = [[1],[1,1]]\n        for i in range(2,numRows):\n            tmp = [1]\n            for j in range(1,len(res[-1])):\n                tmp.append(res[-1][j]+res[-1][j-1])\n            tmp.append(1)\n            res.append(tmp)\n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def dfs(root):\n            if not root:\n                return 0\n            left = max(0, dfs(root.left))\n            right = max(0, dfs(root.right))\n            self.max_sum = max(self.max_sum, left + right + root.val)\n            return max(left, right) + root.val\n        \n        dfs(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        for i in range(m):\n            heapq.heappush(heap, (heightMap[i][0], 0, heightMap[i][n-1]))\n            heapq.heappush(heap, (heightMap[i][n-1], n-1, heightMap[i][0]))\n        \n        for i in range(1, n):\n            heapq.heappush(heap, (heightMap[0][i], 0, heightMap[0][i]))\n            heapq.heappush(heap, (heightMap[m-1][i], m-1, heightMap[m-1][i]))\n        \n        ans = 0\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        while heap:\n            cur_h, x, y = heapq.heappop(heap)\n            for dx, dy in dirs:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n:\n                    if cur_h > heightMap[nx][ny]:\n                        ans += cur_h - heightMap[nx][ny]\n                    heapq.heappush(heap, (max(cur_h, heightMap[nx][ny]), nx, ny))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 pointers, 1 pointer for left, 1 pointer for right\n        # 3. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 4. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right\n        # 5. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 6. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right\n        # 7. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 8. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right\n        # 9. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 10. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 11. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 12. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 13. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left\n        # 14. 2 pointers, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right, 1 pointer for left, 1 pointer for right,"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \u5148\u6392\u5e8f\n        # 2. \u7136\u540e\u904d\u5386\n        # 3. \u5982\u679c\u957f\u5ea6\u4e3a\u5947\u6570\uff0c\u76f4\u63a5\u8fd4\u56de\u4e2d\u95f4\u503c\n        # 4. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 5. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 6. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 7. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 8. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 9. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 10. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 11. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 12. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 13. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 14. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 15. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 16. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 17. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 18. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 19. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 20. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 21. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 22. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 23. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 24. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 25. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 26. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 27. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 28. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 29. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 30. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 31. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 32. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 33. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 34. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 35. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 36. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 37. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 38. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 39. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 40. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 41. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 42. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 43. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 44. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 45. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        # 46. \u5982\u679c\u957f\u5ea6\u4e3a\u5076\u6570\uff0c\u8fd4\u56de\u4e2d\u95f4\u4e24\u4e2a\u503c\u7684\u5e73\u5747\u503c\n        #"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        length = 0\n        cur = head\n        while cur:\n            length += 1\n            cur = cur.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        cur = head\n        for i in range(length - k - 1):\n            cur = cur.next\n        \n        new_head = cur.next\n        cur.next = None\n        cur = new_head\n        while cur.next:\n            cur = cur.next\n        cur.next = head\n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        while n % 3 == 0:\n            n = n / 3\n        while n % 5 == 0:\n            n = n / 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6240\u6709\u65b9\u5757\u7684\u5de6\u8fb9\u754c\u548c\u9ad8\u5ea6\u8bb0\u5f55\u4e0b\u6765\n        # 2. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 3. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 4. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 5. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 6. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 7. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 8. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 9. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 10. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 11. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 12. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 13. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 14. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 15. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 16. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 17. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 18. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 19. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 20. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 21. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 22. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 23. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 24. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 25. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 26. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 27. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 28. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 29. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 30. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 31. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 32. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 33. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 34. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 35. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 36. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 37. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 38. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 39. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 40. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 41. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 42. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 43. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 44. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 45. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 46. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6\n        # 47. \u7136\u540e\u904d\u5386\u6240\u6709\u65b9\u5757\uff0c\u8ba1\u7b97\u5f53\u524d\u65b9\u5757\u7684\u6700\u5927\u9ad8\u5ea6"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right) + (root.left and root.left.val if root.left and root.left.left is None and root.left.right is None else 0)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        ans = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                sums.sort()\n                j = m - 1\n                for i in range(m - 1, -1, -1):\n                    while j >= 0 and sums[i] + sums[j] > k:\n                        j -= 1\n                    ans = max(ans, sums[i] + sums[j])\n                    if ans == k:\n                        return ans\n        return ans"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == -1 and divisor == -1:\n            return 1\n        if dividend == -1 and divisor == 1:\n            return -1\n        if dividend == 1 and divisor == -1:\n            return -1\n        if dividend == 1 and divisor == 1:\n            return 1\n        if dividend == -1 and divisor == -2147483648:\n            return 0\n        if dividend == 2147483647 and divisor == -2147483648:\n            return 0\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == 2147483647 and divisor == 2147483647:\n            return 1\n        if dividend == -2147483648 and divisor == 2147483647:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == 2147483647 and divisor == -2147483648:\n            return -1\n        if dividend == -2147483648 and divisor == -2147483648:\n            return 1\n        if dividend == 214748364"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n        \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # iterate through the list\n        for i, num in en\n            # check if the complement is in the hashmap\n            if num in hashmap:\n                return [hashmap[num], i]\n            # if not, add it to the hashmap\n            hashmap[target - num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target, epsilon):\n            if len(cards) == 1:\n                return abs(cards[0] - target) <= epsilon\n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            next_cards = [a + b] + list(set(cards) - set([a, b]))\n                        elif op == '-':\n                            next_cards = [a - b] + list(set(cards) - set([a, b]))\n                        elif op == '*':\n                            next_cards = [a * b] + list(set(cards) - set([a, b]))\n                        else:\n                            if b == 0:\n                                continue\n                            next_cards = [float(a) / b] + list(set(cards) - set([a, b]))\n                        if backtrack(next_cards, 24, epsilon):\n                            return True\n            return False\n        \n        return backtrack(cards, 24, 1e-6)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '?')\n        \n        if len(p) >= 2 and p[1] == '*':\n            return self.isMatch(s, p[2:]) or (first_match and self.isMatch(s[1:], p))\n        \n        return first_match and self.isMatch(s[1:], p[1:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a].append(b)\n        ans = []\n        def dfs(node):\n            # terminator\n            if node not in graph:\n                return ans.append(node)\n            # process current logic\n            for i in range(len(graph[node])-1, -1, -1):\n                nei = graph[node][i]\n                graph[node].pop(i)\n                dfs(nei)\n            ans.append(node)\n        dfs(\"JFK\")\n        return ans[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                left = j+1\n                right = len(nums)-1\n                while left < right:\n                    if nums[i] + nums[j] + nums[left] + nums[right] == target:\n                        res.append([nums[i], nums[j], nums[left], nums[right]])\n                        left += 1\n                        right -= 1\n                        while left < right and nums[left] == nums[left-1]:\n                            left += 1\n                        while left < right and nums[right] == nums[right+1]:\n                            right -= 1\n                    elif nums[i] + nums[j] + nums[left] + nums[right] < target:\n                        left += 1\n                    else:\n                        right -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left edge\n        # 2. use a heap to store the height of the buildings\n        # 3. use a list to store the result\n        # 4. iterate over the buildings\n        # 5. if the current building is the same as the last one, update the last one\n        # 6. if the current building is different from the last one, add the last one to the result\n        # 7. if the current building is the same as the last one, update the last one\n        # 8. if the current building is different from the last one, add the current building to the heap\n        # 9. if the heap is empty, add the last one to the result\n        # 10. if the heap is not empty, add the top of the heap to the result\n        # 11. if the heap is not empty, add the current building to the heap\n        # 12. if the heap is not empty, add the top of the heap to the result\n        # 13. if the heap is not empty, add the current building to the heap\n        # 14. if the heap is not empty, add the top of the heap to the result\n        # 15. if the heap is not empty, add the current building to the heap\n        # 16. if the heap is not empty, add the top of the heap to the result\n        # 17. if the heap is not empty, add the current building to the heap\n        # 18. if the heap is not empty, add the top of the heap to the result\n        # 19. if the heap is not empty, add the current building to the heap\n        # 20. if the heap is not empty, add the top of the heap to the result\n        # 21. if the heap is not empty, add the current building to the heap\n        # 22. if the heap is not empty, add the top of the heap to the result\n        # 23. if the heap is not empty, add the current building to the heap\n        # 24. if the heap is not empty, add the top of the heap to the result\n        # 25. if the heap is not empty, add the current building to the heap\n        # 26. if the heap is not empty, add the top of the heap to the result\n        # 27. if the heap is not empty, add the current building to the heap\n        # 28. if the heap is not empty, add the top of the heap to the result\n        # 29. if the heap is not empty, add the current building to the heap\n        # 30. if the heap is not empty, add the top of the heap to the result\n        # 31. if the heap is not empty, add the current building to the heap\n        # 32. if the heap is not empty, add the top of the heap to the result\n        # 33. if the heap is not empty, add the current building to the heap\n        # 34. if the heap is not empty, add the top of the heap to the result\n        # 35. if the heap is not empty, add the current building to the heap\n        # 36. if the heap is not empty, add the top of the heap to the result\n        # 37. if the heap is not empty, add the current building to the heap\n        # 38. if the heap is not empty, add the top of the heap to the result\n        # 39. if the heap is not empty, add the current building to the heap\n        # 40. if the heap is not empty, add the top of the heap to the result\n        # 41. if the heap is not empty, add the current building to the heap\n        # 42. if the heap is not empty, add the top of the heap to the result\n        # 43. if the heap is not empty, add the current building to the heap\n        # 44. if the heap is not empty, add the top of the heap to the result\n        # 45. if the heap is not empty, add the current building to the heap\n        # 46. if the heap is not empty, add the top of the heap to the result\n        # 47. if the heap is not empty, add the current building to the heap\n        # 48. if the heap is not empty, add the top of the heap to the result\n        #"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not triangle:\n            return 0\n        \n        dp = triangle[-1]\n        \n        for i in range(len(triangle)-2,-1,-1):\n            for j in range(len(triangle[i])):\n                dp[j] = min(dp[j],dp[j+1]) + triangle[i][j]\n        \n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        thousands = [\"\", \"Thousand\", \"Million\", \"Billion\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + (\" \" + helper(num % 10))\n            if num < 1000:\n                return ones[num // 100] + \" Hundred\" + (\" \" + helper(num % 100))\n            for i, word in enumerate(thousands):\n                if num < 1000000000:\n                    return helper(num // 100000) + \" \" + word + (\" \" + helper(num % 100000))\n                num //= 1000\n            return helper(num)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j < i:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % MOD\n                if j >= i:\n                    dp[i][j] -= dp[i-1][j-i]\n                dp[i][j] = (dp[i][j] + MOD) % MOD\n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        cur1 = dummy1\n        cur2 = dummy2\n        \n        while head:\n            if head.val < x:\n                cur1.next = head\n                cur1 = cur1.next\n            else:\n                cur2.next = head\n                cur2 = cur2.next\n            head = head.next\n        \n        cur1.next = dummy2.next\n        cur2.next = None\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u4e86\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 2. \u5982\u679c\u6ca1\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 3. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 4. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 5. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 6. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 7. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 8. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 9. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 10. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 11. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 12. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 13. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 14. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 15. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 16. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 17. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 18. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 19. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 20. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 21. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 22. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 23. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 24. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 25. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 26. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 27. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 28. \u5982\u679c\u6ca1\u6709\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u7b54\u6848\n        # 29. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u627e\u5230\u4e00\u4e2a\u51fa\u5ea6\u4e3a2\u7684\u8282\u70b9\uff0c\u8fd9\u4e2a\u8282"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.dfs(nums, [], res, visited)\n        return res\n        \n    def dfs(self, nums, path, res, visited):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.dfs(nums, path, res, visited)\n            path.pop()\n            visited[i] = False"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2sum\n        # return sum(set(nums))*2-sum(nums)\n        \n        # 2. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a ^= i\n        # return a\n        \n        # 3. hash table\n        # hashmap = {}\n        # for i in nums:\n        #     if i not in hashmap:\n        #         hashmap[i] = 1\n        #     else:\n        #         hashmap[i] += 1\n        # for i in hashmap:\n        #     if hashmap[i] == 1:\n        #         return i\n        \n        # 4. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a ^= i\n        # return a\n        \n        # 5. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 6. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 7. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 8. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 9. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 10. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 11. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 12. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 13. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 14. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 15. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 16. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 17. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 18. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 19. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 20. bit manipulation\n        # a = 0\n        # for i in nums:\n        #     a = (a^i) & ~(a&i)\n        # return a\n        \n        # 21. bit manipulation\n        # a = 0\n        # for i in nums:\n        #"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.split()[-1])\n        \n        # return len"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][n - 1] = grid[0][0] + grid[0][n - 1]\n        for i in range(1, n):\n            dp[i][i][n - 1] = grid[i][i]\n            dp[i][n - 1][n - 1] = grid[i][n - 1]\n        for i in range(n - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                dp[i][j][n - 1] = max(dp[i + 1][j][n - 1], dp[i][j + 1][n - 1]) + grid[i][j]\n                if i < n - 1:\n                    dp[i][j][n - 1] = max(dp[i][j][n - 1], dp[i + 1][j + 1][n - 1]) + grid[i][j]\n                if j < n - 1:\n                    dp[i][j][n - 1] = max(dp[i][j][n - 1], dp[i][j + 1][n - 2]) + grid[i][j]\n                if i < n - 1 and j < n - 1:\n                    dp[i][j][n - 1] = max(dp[i][j][n - 1], dp[i + 1][j + 1][n - 2]) + grid[i][j]\n        return max(dp[0][0][n - 1], dp[n - 1][n - 1][n - 1])"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [0] * 4\n        dp[0] = 1\n        dp[1] = 2\n        dp[2] = 4\n        dp[3] = 7\n        for i in range(1, n):\n            dp[0] = (dp[0] + dp[1] + dp[2]) % MOD\n            dp[1] = (dp[1] + dp[2] + dp[3]) % MOD\n            dp[2] = dp[3]\n            dp[3] = dp[0]\n        return (dp[0] + dp[1] + dp[2]) % MOD"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def getNext(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = getNext(n)\n        while fast != 1 and slow != fast:\n            slow = getNext(slow)\n            fast = getNext(getNext(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i in range(len(nums)):\n                if nums[i] > target:\n                    return i\n            return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reach = 0\n        for i, num in en\n        enumerate(nums):\n            if max_reach < i:\n                return False\n            max_reach = max(max_reach, i + num)\n        return max_reach >= len(nums) - 1"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = grid[0][0]\n        for i in range(1, m):\n            dp[i][0] = dp[i-1][0] + grid[i][0]\n        for j in range(1, n):\n            dp[0][j] = dp[0][j-1] + grid[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n        return dp[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        if n == 2:\n            return '11'\n        if n == 3:\n            return '21'\n        if n == 4:\n            return '1211'\n        if n == 5:\n            return '111221'\n        if n == 6:\n            return '312211'\n        if n == 7:\n            return '13112221'\n        if n == 8:\n            return '1113213211'\n        if n == 9:\n            return '31131211131221'\n        if n == 10:\n            return '13211311123113112211'\n        if n == 11:\n            return '11131221131112132132221'\n        if n == 12:\n            return '3113112221232132211'\n        if n == 13:\n            return '131121213212313211131221'\n        if n == 14:\n            return '11131221131112132132221'\n        if n == 15:\n            return '3113112221232132211'\n        if n == 16:\n            return '13211311123113112211'\n        if n == 17:\n            return '11131221131112132132221'\n        if n == 18:\n            return '3113112221232132211'\n        if n == 19:\n            return '13211311123113112211'\n        if n == 20:\n            return '11131221131112132132221'\n        if n == 21:\n            return '3113112221232132211'\n        if n == 22:\n            return '13211311123113112211'\n        if n == 23:\n            return '11131221131112132132221'\n        if n == 24:\n            return '3113112221232132211'\n        if n == 25:\n            return '13211311123113112211'\n        if n == 26:\n            return '11131221131112132132221'\n        if n == 27:\n            return '3113112221232132211'\n        if n == 28:\n            return '13211311123113112211'\n        if n == 29:\n            return '11131221131112132132221'\n        if n == 30:\n            return '3113112221232132211'\n        if n == 31:\n            return '13211311123113112211'\n        if n == 32:\n            return '11131221131112132132221'\n        if n == 33:\n            return '3113112221232132211'\n        if n == 34:\n            return '13211311123113112211'\n        if n == 35:\n            return '1113122"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max value in nums\n        # find the min value in nums\n        # binary search the max value in nums\n        # binary search the min value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in nums\n        # binary search the mid value in num"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return -1\n        \n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[left] <= nums[mid]:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\n        res = ['']\n        for i in digits:\n            res = [x+y for x in res for y in phone[i]]\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if target < candidates[i]:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '0':\n            return '0'\n        if n[0] == '1':\n            return '9' if n[1] == '9' else '10'\n        if n[0] == '9':\n            return '8' if n[1] == '9' else '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':\n            return '9'\n        if n[0] == '9':"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n-1, 0, n-1\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        elif x > 0:\n            sign = 1\n        else:\n            sign = -1\n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        if rev > 2**31 - 1 or rev < -2**31:\n            return 0\n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n//2):\n            for j in range(i, n-i-1):\n                temp = matrix[i][j]\n                matrix[i][j] = matrix[n-j-1][i]\n                matrix[n-j-1][i] = matrix[n-i-1][n-j-1]\n                matrix[n-i-1][n-j-1] = matrix[j][n-i-1]\n                matrix[j][n-i-1] = temp"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], max(max_prod * nums[i], min_prod * nums[i]))\n            min_prod = min(nums[i], min(curr_max * nums[i], min_prod * nums[i]))\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a hashmap\n        score_map = {}\n        \n        # create a list\n        res = []\n        \n        # iterate over the sorted score\n        for i, s in en\n            # if the score is the 1st place\n            if i == 0:\n                res.append(\"Gold Medal\")\n            # if the score is the 2nd place\n            elif i == 1:\n                res.append(\"Silver Medal\")\n            # if the score is the 3rd place\n            elif i == 2:\n                res.append(\"Bronze Medal\")\n            # if the score is the 4th place\n            else:\n                res.append(str(i+1))\n                \n        # iterate over the score\n        for s in score:\n            # get the index of the score in the sorted score\n            i = score_sorted.index(s)\n            # append the rank of the score\n            res.append(score_map[s])\n            \n        return res"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 0\n        start = 0\n        end = 0\n        dic = {}\n        \n        while end < len(s):\n            if s[end] in dic:\n                start = max(start, dic[s[end]] + 1)\n            max_len = max(max_len, end - start + 1)\n            dic[s[end]] = end\n            end += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not s or not words:\n            return []\n        \n        word_len = len(words[0])\n        word_num = len(words)\n        word_dict = collections.Counter(words)\n        res = []\n        \n        for i in range(word_len):\n            left = i\n            right = i\n            word_count = collections.Counter()\n            word_count_need = word_dict.copy()\n            word_count_have = 0\n            \n            while right + word_len <= len(s):\n                word = s[right:right + word_len]\n                right += word_len\n                word_count[word] += 1\n                \n                if word in word_dict:\n                    word_count_have += 1\n                    if word_count[word] <= word_count_need[word]:\n                        word_count_have -= 1\n                    else:\n                        word_count_have += 1\n                        \n                if word_count_have == word_num:\n                    res.append(left)\n                    word_count[s[left:left + word_len]] -= 1\n                    if word_dict[s[left:left + word_len]] > word_count[s[left:left + word_len]]:\n                        word_count_have -= 1\n                    left += word_len\n                    \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        res = 0\n        for i in range(len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if i == max_val:\n                res += 1\n                max_val = 0\n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                pre = dummy\n                while pre.next and pre.next.val < cur.next.val:\n                    pre = pre.next\n                cur.next, cur.next.next, pre.next = cur.next.next, cur.next.next.next, cur.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            if cur.next.val == cur.next.next.val:\n                val = cur.next.val\n                while cur.next and cur.next.val == val:\n                    cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s > 0:\n                    r -= 1\n                elif s < 0:\n                    l += 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if word1[i] == word2[j]:\n                    dp[i][j] = dp[i + 1][j + 1]\n                else:\n                    dp[i][j] = min(dp[i + 1][j], dp[i][j + 1], dp[i + 1][j + 1]) + 1\n        \n        return dp[0][0]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return ['->'.join([str(root.val), path]) for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        for i in range(max(len(v1), len(v2))):\n            v1_i = int(v1[i]) if i < len(v1) else 0\n            v2_i = int(v2[i]) if i < len(v2) else 0\n            if v1_i > v2_i:\n                return 1\n            elif v1_i < v2_i:\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        # max heap\n        heap = []\n        # total time\n        time = 0\n        for duration, end in courses:\n            # add to heap\n            heapq.heappush(heap, -duration)\n            # add to time\n            time += duration\n            # if time > end, pop from heap\n            if time > end:\n                time += heapq.heappop(heap)\n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        pre = dummy\n        end = dummy\n        while end:\n            for i in range(k):\n                end = end.next\n                if not end:\n                    break\n            if not end:\n                break\n            start = pre.next\n            end = end.next\n            pre.next = None\n            pre = self.reverse(start, end)\n        return dummy.next\n    \n    def reverse(self, start, end):\n        pre = None\n        cur = start\n        while cur:\n            nxt = cur.next\n            cur.next = pre\n            pre = cur\n            cur = nxt\n        start.next = end\n        return pre"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in (s+s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 260ms\n        # return 2 * sum(set(nums)) - sum(nums)\n        \n        # 2. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 3. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 4. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 5. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 6. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 7. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 8. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 9. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 10. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 11. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 12. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 13. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 14. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 15. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 16. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 17. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 18. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 19. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums[1::2])\n        \n        # 20. 280ms\n        # return 2 * sum(set(nums)) - sum(nums) - sum(nums[::2]) - sum(nums"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        stickers = collections.Counter(stickers)\n        target = set(target)\n        dp = {0: 0}\n        for i in sorted(stickers, key=lambda x: -len(x)):\n            dp2 = {}\n            for j in dp:\n                for k in stickers[i]:\n                    dp2[j + stickers[i].count(k)] = min(dp2.get(j + stickers[i].count(k), float('inf')), dp[j] + 1)\n            dp = dp2\n        return dp.get(0, -1)"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                dp[i][j] = dp[i][j - 1]\n                for k in range(i, j):\n                    if s[k] == s[j]:\n                        dp[i][j] = max(dp[i][j], dp[i][k - 1] + dp[k + 1][j - 1])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid > x:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        i = 0\n        while i < len(s):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n            i += 1\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = []\n        res = []\n        for i in range(len(nums)):\n            if q and q[0] == i - k:\n                q.pop(0)\n            while q and nums[q[-1]] < nums[i]:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.findMedianSortedArrays(nums2, nums1)\n        \n        m, n = len(nums1), len(nums2)\n        left, right = 0, m\n        while left < right:\n            i = (left + right) // 2\n            j = (m + n + 1) // 2 - i\n            if nums1[i] < nums2[j]:\n                left = i + 1\n            else:\n                right = i\n        i = left\n        j = (m + n + 1) // 2 - i\n        if i == 0:\n            min_right = nums2[j - 1]\n        elif j == 0:\n            min_right = nums1[i - 1]\n        else:\n            min_right = max(nums1[i - 1], nums2[j - 1])\n        if (m + n) % 2 == 1:\n            return min_right\n        if i == m:\n            max_left = nums2[j]\n        elif j == n:\n            max_left = nums1[i]\n        else:\n            max_left = min(nums1[i], nums2[j])\n        return (max_left + min_right) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] > nums[0]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        res = [1,1]\n        for i in range(2, rowIndex+1):\n            res = [1] + [res[j] + res[j+1] for j in range(len(res)-1)] + [1]\n        return res"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val, path + [root.val])\n            right = dfs(root.right, targetSum - root.val, path + [root.val])\n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        res = []\n        found = False\n        \n        while queue:\n            curr = queue.popleft()\n            if curr == endWord:\n                found = True\n            for i in range(len(curr)):\n                for j in range(ord('a'), ord('z') + 1):\n                    word = curr[:i] + chr(j) + curr[i+1:]\n                    for node in graph[word]:\n                        if node not in visited or visited[node] == visited[curr] + 1:\n                            visited[node] = visited[curr] + 1\n                            queue.append(node)\n        \n        # build the result\n        if found:\n            queue = collections.deque([endWord])\n            res = [[endWord]]\n            while queue:\n                curr = queue.popleft()\n                for i in range(len(curr)):\n                    for j in range(ord('a'), ord('z') + 1):\n                        word = curr[:i] + chr(j) + curr[i+1:]\n                        for node in graph[word]:\n                            if visited[node] == visited[curr] + 1:\n                                queue.appendleft(node)\n                                tmp = list(res[-1])\n                                tmp.append(node)\n                                res.append(tmp)\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n /= 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += res[:]\n            for j in range(len(res)-1, -1, -1):\n                res[j] += [nums[i]]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u5355\u8c03\u6808\n        # 3. \u53cc\u6307\u9488\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u5355\u8c03\u6808\n        # 6. \u53cc\u6307\u9488\n        # 7. \u4e8c\u5206\u67e5\u627e\n        # 8. \u5355\u8c03\u6808\n        # 9. \u53cc\u6307\u9488\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u5355\u8c03\u6808\n        # 12. \u53cc\u6307\u9488\n        # 13. \u4e8c\u5206\u67e5\u627e\n        # 14. \u5355\u8c03\u6808\n        # 15. \u53cc\u6307\u9488\n        # 16. \u4e8c\u5206\u67e5\u627e\n        # 17. \u5355\u8c03\u6808\n        # 18. \u53cc\u6307\u9488\n        # 19. \u4e8c\u5206\u67e5\u627e\n        # 20. \u5355\u8c03\u6808\n        # 21. \u53cc\u6307\u9488\n        # 22. \u4e8c\u5206\u67e5\u627e\n        # 23. \u5355\u8c03\u6808\n        # 24. \u53cc\u6307\u9488\n        # 25. \u4e8c\u5206\u67e5\u627e\n        # 26. \u5355\u8c03\u6808\n        # 27. \u53cc\u6307\u9488\n        # 28. \u4e8c\u5206\u67e5\u627e\n        # 29. \u5355\u8c03\u6808\n        # 30. \u53cc\u6307\u9488\n        # 31. \u4e8c\u5206\u67e5\u627e\n        # 32. \u5355\u8c03\u6808\n        # 33. \u53cc\u6307\u9488\n        # 34. \u4e8c\u5206\u67e5\u627e\n        # 35. \u5355\u8c03\u6808\n        # 36. \u53cc\u6307\u9488\n        # 37. \u4e8c\u5206\u67e5\u627e\n        # 38. \u5355\u8c03\u6808\n        # 39. \u53cc\u6307\u9488\n        # 40. \u4e8c\u5206\u67e5\u627e\n        # 41. \u5355\u8c03\u6808\n        # 42. \u53cc\u6307\u9488\n        # 43. \u4e8c\u5206\u67e5\u627e\n        # 44. \u5355\u8c03\u6808\n        # 45. \u53cc\u6307\u9488\n        # 46. \u4e8c\u5206\u67e5\u627e\n        # 47. \u5355\u8c03\u6808\n        # 48. \u53cc\u6307\u9488\n        # 49. \u4e8c\u5206\u67e5\u627e\n        # 50. \u5355\u8c03\u6808\n        # 51. \u53cc\u6307\u9488\n        # 52. \u4e8c\u5206\u67e5\u627e\n        # 53. \u5355\u8c03\u6808\n        # 54. \u53cc\u6307\u9488\n        # 55. \u4e8c\u5206\u67e5\u627e\n        # 56. \u5355\u8c03\u6808\n        # 57. \u53cc\u6307\u9488\n        # 58. \u4e8c\u5206\u67e5\u627e\n        # 59. \u5355\u8c03\u6808\n        # 60. \u53cc\u6307\u9488\n        # 61. \u4e8c\u5206\u67e5\u627e\n        # 62. \u5355\u8c03\u6808\n        # 63. \u53cc\u6307\u9488\n        # 64. \u4e8c\u5206\u67e5\u627e\n        # 65. \u5355\u8c03\u6808\n        # 66. \u53cc\u6307\u9488\n        # 67. \u4e8c\u5206\u67e5\u627e\n        # 68. \u5355\u8c03\u6808\n        # 69. \u53cc\u6307\u9488\n        # 70. \u4e8c\u5206\u67e5\u627e\n        # 71. \u5355\u8c03\u6808\n        # 72. \u53cc\u6307\u9488\n        # 73. \u4e8c\u5206\u67e5\u627e\n        # 74. \u5355\u8c03\u6808\n        # 75. \u53cc\u6307\u9488\n        # 76. \u4e8c\u5206\u67e5\u627e\n        # 77. \u5355\u8c03\u6808\n        # 78. \u53cc\u6307\u9488\n        # 79. \u4e8c\u5206\u67e5\u627e\n        # 80. \u5355\u8c03\u6808\n        # 81. \u53cc\u6307\u9488\n        # 82. \u4e8c\u5206\u67e5\u627e\n        # 83. \u5355\u8c03\u6808\n        # 84. \u53cc\u6307\u9488\n        # 85. \u4e8c\u5206\u67e5\u627e\n        # 86. \u5355\u8c03\u6808\n        # 87. \u53cc\u6307\u9488\n        # 88. \u4e8c\u5206\u67e5\u627e\n        # 89."}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                a = stack.pop()\n                b = stack.pop()\n                stack.append(int(b / a))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        return area == (x_max - x_min) * (y_max - y_min)"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            ans = chr(columnNumber % 26 + ord('A')) + ans\n            columnNumber //= 26\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        \n        for i in nums:\n            if cur_sum < 0:\n                cur_sum = i\n            else:\n                cur_sum += i\n            max_sum = max(max_sum, cur_sum)\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for i in range(2):\n            for j in range(3):\n                num = num * 10 + board[i][j]\n        \n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number\n        # convert board to a number"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            s_char = s[i]\n            t_char = t[i]\n            \n            if s_char in s_to_t and s_to_t[s_char] != t_char:\n                return False\n            \n            if t_char in t_to_s and t_to_s[t_char] != s_char:\n                return False\n            \n            s_to_t[s_char] = t_char\n            t_to_s[t_char] = s_char\n            \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        while l <= r:\n            mid = (l + r) // 2\n            if nums[mid] == target:\n                return True\n            if nums[l] == nums[mid]:\n                l += 1\n            elif nums[l] < nums[mid]:\n                if nums[l] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0] * n for _ in range(m)]\n        dp[0][0] = 1 if obstacleGrid[0][0] == 0 else 0\n        for i in range(1, m):\n            dp[i][0] = 1 if obstacleGrid[i][0] == 0 and dp[i-1][0] == 1 else 0\n        for j in range(1, n):\n            dp[0][j] = 1 if obstacleGrid[0][j] == 0 and dp[0][j-1] == 1 else 0\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1] if obstacleGrid[i][j] == 0 else 0\n        return dp[-1][-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if sum > target:\n                    right -= 1\n                elif sum < target:\n                    left += 1\n                else:\n                    return target\n                \n                if abs(sum - target) < abs(res - target):\n                    res = sum\n                    \n        return res"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_val, max_val):\n            if not root:\n                return max_val - min_val\n            \n            left = inorder(root.left, min_val, root.val)\n            right = inorder(root.right, root.val, max_val)\n            \n            return min(left, right)\n        \n        return inorder(root, float('inf'), float('-inf'))"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.res = []\n        self.prev = None\n        self.count = 0\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev == None:\n            self.prev = root.val\n            self.count = 1\n        elif self.prev == root.val:\n            self.count += 1\n        else:\n            if self.count > self.max_count:\n                self.max_count = self.count\n                self.res = [root.val]\n            elif self.count == self.max_count:\n                self.res.append(root.val)\n            self.prev = root.val\n            self.count = 1\n        \n        self.inorder(root.right)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.res = []\n        self.prev = None\n        self.count = 0\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev == None:\n            self.prev = root.val\n            self.count = 1\n        elif self.prev == root.val:\n            self.count += 1\n        else:\n            if self.count > self.max_count:\n                self.max_count = self.count\n                self.res = [root.val]\n            elif self.count == self.max_count:\n                self.res.append(root.val)\n            self.prev = root.val\n            self.count = 1\n        \n        self.inorder(root.right)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.res = []\n        self.prev = None\n        self.count = 0\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev == None:\n            self.prev = root.val\n            self.count = 1\n        elif self.prev == root.val:\n            self.count += 1\n        else:\n            if self.count > self.max_count:\n                self.max_count = self.count\n                self.res = [root.val]\n            elif self.count == self.max_count:\n                self.res.append(root.val)\n            self.prev = root.val\n            self.count = 1\n        \n        self.inorder(root.right)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        if len(haystack) == 0:\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 2. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 3. \u4e0d\u5305\u542b\u4e09\u91cd\n        # 4. \u957f\u5ea6\u4e3a3\u65f6\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\n        # 5. \u957f\u5ea6\u4e3a4\u65f6\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\n        # 6. \u957f\u5ea6\u4e3a5\u65f6\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\n        # 7. \u957f\u5ea6\u4e3a6\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 8. \u957f\u5ea6\u4e3a7\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 9. \u957f\u5ea6\u4e3a8\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 10. \u957f\u5ea6\u4e3a9\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 11. \u957f\u5ea6\u4e3a10\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 12. \u957f\u5ea6\u4e3a11\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 13. \u957f\u5ea6\u4e3a12\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 14. \u957f\u5ea6\u4e3a13\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 15. \u957f\u5ea6\u4e3a14\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 16. \u957f\u5ea6\u4e3a15\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 17. \u957f\u5ea6\u4e3a16\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 18. \u957f\u5ea6\u4e3a17\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 19. \u957f\u5ea6\u4e3a18\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 20. \u957f\u5ea6\u4e3a19\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 21. \u957f\u5ea6\u4e3a20\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 22. \u957f\u5ea6\u4e3a21\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 23. \u957f\u5ea6\u4e3a22\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 24. \u957f\u5ea6\u4e3a23\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 25. \u957f\u5ea6\u4e3a24\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 26. \u957f\u5ea6\u4e3a25\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 27. \u957f\u5ea6\u4e3a26\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 28. \u957f\u5ea6\u4e3a27\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 29. \u957f\u5ea6\u4e3a28\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 30. \u957f\u5ea6\u4e3a29\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 31. \u957f\u5ea6\u4e3a30\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 32. \u957f\u5ea6\u4e3a31\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 33. \u957f\u5ea6\u4e3a32\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 34. \u957f\u5ea6\u4e3a33\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 35. \u957f\u5ea6\u4e3a34\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 36. \u957f\u5ea6\u4e3a35\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 37. \u957f\u5ea6\u4e3a36\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 38. \u957f\u5ea6\u4e3a37\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 39. \u957f\u5ea6\u4e3a38\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 40. \u957f\u5ea6\u4e3a39\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 41. \u957f\u5ea6\u4e3a40\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 42. \u957f\u5ea6\u4e3a41\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 43. \u957f\u5ea6\u4e3a42\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 44. \u957f\u5ea6\u4e3a43\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 45. \u957f\u5ea6\u4e3a44\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 46. \u957f\u5ea6\u4e3a45\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 47. \u957f\u5ea6\u4e3a46\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 48. \u957f\u5ea6\u4e3a47\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 49. \u957f\u5ea6\u4e3a48\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 50. \u957f\u5ea6\u4e3a49\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 51. \u957f\u5ea6\u4e3a50\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 52. \u957f\u5ea6\u4e3a51\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 53. \u957f\u5ea6\u4e3a52\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 54. \u957f\u5ea6\u4e3a53\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 55. \u957f\u5ea6\u4e3a54\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 56. \u957f\u5ea6\u4e3a55\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 57. \u957f\u5ea6\u4e3a56\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 58. \u957f\u5ea6\u4e3a57\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 59. \u957f\u5ea6\u4e3a58\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 60. \u957f\u5ea6\u4e3a59\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        # 61. \u957f\u5ea6\u4e3a60\u65f6\uff0c\u6ee1\u8db3\u6761\u4ef6\n        #"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 0:\n            return 0\n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        curRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[curRow] += c\n            if curRow == 0 or curRow == numRows - 1:\n                goingDown = not goingDown\n            curRow += 1 if goingDown else -1\n        \n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = height[left], height[right]\n        res = 0\n        \n        while left < right:\n            if left_max < right_max:\n                left += 1\n                left_max = max(left_max, height[left])\n                res += left_max - height[left]\n            else:\n                right -= 1\n                right_max = max(right_max, height[right])\n                res += right_max - height[right]\n                \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u5f52\u5e76\u6392\u5e8f\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u4f4d\u56fe\n        # 7. \u6811\u72b6\u6570\u7ec4\n        # 8. \u6811\u72b6\u6570\u7ec4\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u6811\u72b6\u6570\u7ec4\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6811\u72b6\u6570\u7ec4\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6811\u72b6\u6570\u7ec4\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4\n        # 75. \u6811\u72b6\u6570\u7ec4\n        # 76. \u6811\u72b6\u6570\u7ec4\n        # 77. \u6811\u72b6\u6570\u7ec4\n        # 78. \u6811\u72b6\u6570\u7ec4\n        # 79. \u6811\u72b6\u6570\u7ec4\n        # 80. \u6811\u72b6\u6570\u7ec4\n        # 81. \u6811\u72b6\u6570\u7ec4\n        # 82. \u6811\u72b6\u6570\u7ec4\n        # 83. \u6811\u72b6\u6570\u7ec4\n        # 84. \u6811\u72b6\u6570\u7ec4\n        # 85. \u6811\u72b6\u6570\u7ec4\n        # 86. \u6811\u72b6\u6570\u7ec4\n        # 87"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        ans = cur = 0\n        for i in intervals:\n            if i[0] > cur:\n                cur = i[1] - 1\n                ans += 1\n            if i[1] > cur:\n                cur = i[1]\n                ans += 1\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(0)\n                i += 1\n            elif formula[i] == ')':\n                num = 0\n                while stack and isinstance(stack[-1], int):\n                    num += stack.pop()\n                if stack:\n                    stack[-1] *= num\n                else:\n                    stack.append(num)\n                i += 1\n            else:\n                j = i\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                count = int(formula[i:j])\n                i = j\n                if stack:\n                    stack[-1] += count\n                else:\n                    stack.append(count)\n        res = []\n        while stack:\n            if stack[-1] == 1:\n                res.append(stack.pop())\n            else:\n                res.append(stack.pop() + res.pop())\n        return ''.join(sorted(res))"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n-i-1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l,r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 stack\n        # 3. 2 pointers + stack\n        # 4. 2 pointers + stack + dict\n        # 5. 2 pointers + stack + dict + hashmap\n        # 6. 2 pointers + stack + dict + hashmap + sliding window\n        # 7. 2 pointers + stack + dict + hashmap + sliding window + dp\n        # 8. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy\n        # 9. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers\n        # 10. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack\n        # 11. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack\n        # 12. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack\n        # 13. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack\n        # 14. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack\n        # 15. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack\n        # 16. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack\n        # 17. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack\n        # 18. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 19. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 20. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 21. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 22. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 23. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 24. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 25. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack\n        # 26. 2 pointers + stack + dict + hashmap + sliding window + dp + greedy + two pointers + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack + stack"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        res = \"\"\n        if (numerator < 0) ^ (denominator < 0):\n            res += \"-\"\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        res += str(numerator // denominator)\n        numerator %= denominator\n        if numerator == 0:\n            return res\n        res += \".\"\n        \n        dic = {}\n        dic[numerator] = len(res)\n        while numerator != 0:\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator %= denominator\n            if numerator in dic:\n                idx = dic[numerator]\n                res = res[:idx] + \"(\" + res[idx:] + \")\"\n                break\n            dic[numerator] = len(res)\n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the two sorted halves\n        dummy = ListNode()\n        cur = dummy\n        while left and right:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        # merge the remaining nodes\n        if left:\n            cur.next = left\n        if right:\n            cur.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [envelopes[0][1]]\n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = envelopes[i][1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        row = [0] * m\n        col = [0] * n\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == 0:\n                    row[i] = 1\n                    col[j] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if row[i] == 1 or col[j] == 1:\n                    matrix[i][j] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0, head)\n        left = dummy\n        right = head\n        \n        while n > 0:\n            right = right.next\n            n -= 1\n        \n        while right:\n            left = left.next\n            right = right.next\n        \n        left.next = left.next.next\n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not machines:\n            return 0\n        \n        n = len(machines)\n        total = sum(machines)\n        if total % n:\n            return -1\n        \n        avg = total // n\n        ans = cur = 0\n        for i in machines:\n            cur += i - avg\n            ans = max(ans, abs(cur))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(n, x // i)\n            return cnt\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = TreeNode(slow.val)\n        prev.next = None\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        if list2:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        left, right, height = [0] * n, [n] * n, [0] * n\n        \n        ans = 0\n        for i in range(m):\n            cur_left, cur_right = 0, n\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    height[j] += 1\n                else:\n                    height[j] = 0\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    left[j] = max(left[j], cur_left)\n                else:\n                    left[j] = 0\n                    cur_left = j + 1\n                if matrix[i][n - j - 1] == '1':\n                    right[n - j - 1] = min(right[n - j - 1], cur_right)\n                else:\n                    right[n - j - 1] = n\n                    cur_right = n - j - 1\n                ans = max(ans, (right[n - j - 1] - left[j]) * height[j])\n        return ans"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for i in nums:\n            res += [curr + [i] for curr in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s or s[0] not in '+-e':\n            return False\n        if s[0] in '+-' and len(s) == 1:\n            return False\n        if s[0] in '+-' and s[1] not in 'eE':\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and len(s) == 2:\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] not in '0123456789':\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and len(s) == 3:\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] not in '0123456789':\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and len(s) == 4:\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and s[4] not in '0123456789':\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and s[4] in '0123456789' and len(s) == 5:\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and s[4] in '0123456789' and s[5] not in '0123456789':\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and s[4] in '0123456789' and s[5] in '0123456789' and len(s) == 6:\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and s[4] in '0123456789' and s[5] in '0123456789' and s[6] not in '0123456789':\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and s[4] in '0123456789' and s[5] in '0123456789' and s[6] in '0123456789' and len(s) == 7:\n            return False\n        if s[0] in '+-' and s[1] in 'eE' and s[2] in '0123456789' and s[3] in '0123456789' and s[4] in '0"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman = {1000:'M', 900:'CM', 500:'D', 400:'CD', 100:'C', 90:'XC', 50:'L', 40:'XL', 10:'X', 9:'IX', 5:'V', 4:'IV', 1:'I'}\n        ans = ''\n        for i in roman.keys():\n            ans += roman[i] * (num//i)\n            num %= i\n        return ans"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## 1. use a dict to store the count of each char in s\n        ## 2. iterate over t, if the char is not in the dict, return it\n        ## 3. if the char is in the dict, decrement the count\n        ## 4. if the count is 0, return the char\n        ## 5. if the count is -1, return the char\n        ## 6. if the count is -2, return the char\n        ## 7. if the count is -3, return the char\n        ## 8. if the count is -4, return the char\n        ## 9. if the count is -5, return the char\n        ## 10. if the count is -6, return the char\n        ## 11. if the count is -7, return the char\n        ## 12. if the count is -8, return the char\n        ## 13. if the count is -9, return the char\n        ## 14. if the count is -10, return the char\n        ## 15. if the count is -11, return the char\n        ## 16. if the count is -12, return the char\n        ## 17. if the count is -13, return the char\n        ## 18. if the count is -14, return the char\n        ## 19. if the count is -15, return the char\n        ## 20. if the count is -16, return the char\n        ## 21. if the count is -17, return the char\n        ## 22. if the count is -18, return the char\n        ## 23. if the count is -19, return the char\n        ## 24. if the count is -20, return the char\n        ## 25. if the count is -21, return the char\n        ## 26. if the count is -22, return the char\n        ## 27. if the count is -23, return the char\n        ## 28. if the count is -24, return the char\n        ## 29. if the count is -25, return the char\n        ## 30. if the count is -26, return the char\n        ## 31. if the count is -27, return the char\n        ## 32. if the count is -28, return the char\n        ## 33. if the count is -29, return the char\n        ## 34. if the count is -30, return the char\n        ## 35. if the count is -31, return the char\n        ## 36. if the count is -32, return the char\n        ## 37. if the count is -33, return the char\n        ## 38. if the count is -34, return the char\n        ## 39. if the count is -35, return the char\n        ## 40. if the count is -36, return the char\n        ## 41. if the count is -37, return the char\n        ## 42. if the count is -38, return the char\n        ## 43. if the count is -39, return the char\n        ## 44. if the count is -40, return the char\n        ## 45. if the count is -41, return the char\n        ## 46. if the count is -42, return the char\n        ## 47. if the count is -43, return the char\n        ## 48. if the count is -44, return the char\n        ## 49. if the count is -45, return the char\n        ## 50. if the count is -46, return the char\n        ## 51. if the count is -47, return the char\n        ## 52. if the count is -48, return the char\n        ## 53. if the count is -49, return the char\n        ## 54. if the count is -50, return the char\n        ## 55. if the count"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            else:\n                row, col = empty\n                \n                for i in range(1,10):\n                    if is_valid(board, str(i), empty):\n                        board[row][col] = str(i)\n                        \n                        if solve(board):\n                            return True\n                        board[row][col] = '.'\n                return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its previous node\n        # find the first node that is larger than its previous node\n        # swap the values of the two nodes\n        # inorder traversal again to recover the tree\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is smaller than the second node, swap the values of the first node and the second node\n        # if the first node is smaller than the second node, swap the values of the first node and the second node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the values of the second node and the first node\n        # if the first node is larger than the second node, swap the"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head or not head.next:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half\n        curr = slow\n        prev = None\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        \n        # check palindrome\n        left, right = head, prev\n        while right:\n            if left.val != right.val:\n                return False\n            left = left.next\n            right = right.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        if num < 1:\n            return False\n        \n        left = 1\n        right = num\n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0]\n        for i in range(1, n+1):\n            ans.append(ans[i&(i-1)] + 1)\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        if s1 == s2:\n            return True\n        if sorted(s1) != sorted(s2):\n            return False\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..' and stack:\n                stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, node, res):\n            if not node:\n                return\n            if board[i][j] in node:\n                res.add(node)\n                tmp = board[i][j]\n                board[i][j] = '#'\n                if i > 0:\n                    dfs(i-1, j, node.get(tmp), res)\n                if i < len(board)-1:\n                    dfs(i+1, j, node.get(tmp), res)\n                if j > 0:\n                    dfs(i, j-1, node.get(tmp), res)\n                if j < len(board[0])-1:\n                    dfs(i, j+1, node.get(tmp), res)\n                board[i][j] = tmp\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = word\n        \n        res = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie, res)\n        return list(res)"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for i in s_dict:\n            if s_dict[i] != t_dict.get(i, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 3 sets\n        # 2. 3 loops\n        # 3. 3 loops\n        # 4. 3 loops\n        # 5. 3 loops\n        # 6. 3 loops\n        # 7. 3 loops\n        # 8. 3 loops\n        # 9. 3 loops\n        # 10. 3 loops\n        # 11. 3 loops\n        # 12. 3 loops\n        # 13. 3 loops\n        # 14. 3 loops\n        # 15. 3 loops\n        # 16. 3 loops\n        # 17. 3 loops\n        # 18. 3 loops\n        # 19. 3 loops\n        # 20. 3 loops\n        # 21. 3 loops\n        # 22. 3 loops\n        # 23. 3 loops\n        # 24. 3 loops\n        # 25. 3 loops\n        # 26. 3 loops\n        # 27. 3 loops\n        # 28. 3 loops\n        # 29. 3 loops\n        # 30. 3 loops\n        # 31. 3 loops\n        # 32. 3 loops\n        # 33. 3 loops\n        # 34. 3 loops\n        # 35. 3 loops\n        # 36. 3 loops\n        # 37. 3 loops\n        # 38. 3 loops\n        # 39. 3 loops\n        # 40. 3 loops\n        # 41. 3 loops\n        # 42. 3 loops\n        # 43. 3 loops\n        # 44. 3 loops\n        # 45. 3 loops\n        # 46. 3 loops\n        # 47. 3 loops\n        # 48. 3 loops\n        # 49. 3 loops\n        # 50. 3 loops\n        # 51. 3 loops\n        # 52. 3 loops\n        # 53. 3 loops\n        # 54. 3 loops\n        # 55. 3 loops\n        # 56. 3 loops\n        # 57. 3 loops\n        # 58. 3 loops\n        # 59. 3 loops\n        # 60. 3 loops\n        # 61. 3 loops\n        # 62. 3 loops\n        # 63. 3 loops\n        # 64. 3 loops\n        # 65. 3 loops\n        # 66. 3 loops\n        # 67. 3 loops\n        # 68. 3 loops\n        # 69. 3 loops\n        # 70. 3 loops\n        # 71. 3 loops\n        # 72. 3 loops\n        # 73. 3 loops\n        # 74. 3 loops\n        # 75. 3 loops\n        # 76. 3 loops\n        # 77. 3 loops\n        # 78. 3 loops\n        # 79. 3 loops\n        # 80. 3 loops\n        # 81. 3 loops\n        # 82. 3 loops\n        # 83. 3 loops\n        # 84. 3 loops\n        # 85. 3 loops\n        # 86. 3 loops\n        # 87. 3 loops\n        # 88. 3 loops\n        # 89. 3 loops\n        # 90. 3 loops\n        # 91. 3 loops\n        # 92. 3 loops\n        # 93. 3 loops\n        # 94. 3 loops\n        # 95. 3 loops\n        # 96. 3 loops\n        # 97. 3 loops\n        # 98. 3 loops\n        # 99. 3 loops\n        # 100. 3 loops\n        # 101. 3 loops\n        # 102. 3 loops\n        # 103. 3 loops"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                ans.append(\"Fizz\")\n            elif i%5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the whole string\n        s = s[::-1]\n        # reverse each word\n        s = s.split()\n        s = ' '.join(s[::-1])\n        return s"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res = res * 26 + ord(columnTitle[i]) - ord('A') + 1\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n < 2:\n            return n\n        \n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second = slow.next\n        prev = None\n        while second:\n            temp = second.next\n            second.next = prev\n            prev = second\n            second = temp\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second:\n            temp1, temp2 = first.next, second.next\n            first.next = second\n            second.next = temp1\n            first = temp1\n            second = temp2\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i in range(len(pattern)):\n            if pattern[i] in d:\n                if d[pattern[i]] != s[i]:\n                    return False\n            else:\n                if s[i] in d.values():\n                    return False\n                d[pattern[i]] = s[i]\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            if first == n:\n                res.append(nums[:])\n            for i in range(first, n):\n                nums[first], nums[i] = nums[i], nums[first]\n                backtrack(first + 1)\n                nums[first], nums[i] = nums[i], nums[first]\n        n = len(nums)\n        res = []\n        backtrack()\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        if target < matrix[0][0] or target > matrix[-1][-1]:\n            return False\n        \n        left, right = 0, m*n-1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        curr = dummy\n        carry = 0\n        \n        while l1 or l2 or carry:\n            val1 = (l1.val if l1 else 0)\n            val2 = (l2.val if l2 else 0)\n            \n            carry, out = divmod(val1 + val2 + carry, 10)\n            \n            curr.next = ListNode(out)\n            curr = curr.next\n            \n            l1 = (l1.next if l1 else None)\n            l2 = (l2.next if l2 else None)\n            \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2's complement\n        # 2. 2's complement + 1\n        # 3. 2's complement + 1\n        # 4. 2's complement + 1\n        # 5. 2's complement + 1\n        # 6. 2's complement + 1\n        # 7. 2's complement + 1\n        # 8. 2's complement + 1\n        # 9. 2's complement + 1\n        # 10. 2's complement + 1\n        # 11. 2's complement + 1\n        # 12. 2's complement + 1\n        # 13. 2's complement + 1\n        # 14. 2's complement + 1\n        # 15. 2's complement + 1\n        # 16. 2's complement + 1\n        # 17. 2's complement + 1\n        # 18. 2's complement + 1\n        # 19. 2's complement + 1\n        # 20. 2's complement + 1\n        # 21. 2's complement + 1\n        # 22. 2's complement + 1\n        # 23. 2's complement + 1\n        # 24. 2's complement + 1\n        # 25. 2's complement + 1\n        # 26. 2's complement + 1\n        # 27. 2's complement + 1\n        # 28. 2's complement + 1\n        # 29. 2's complement + 1\n        # 30. 2's complement + 1\n        # 31. 2's complement + 1\n        # 32. 2's complement + 1\n        # 33. 2's complement + 1\n        # 34. 2's complement + 1\n        # 35. 2's complement + 1\n        # 36. 2's complement + 1\n        # 37. 2's complement + 1\n        # 38. 2's complement + 1\n        # 39. 2's complement + 1\n        # 40. 2's complement + 1\n        # 41. 2's complement + 1\n        # 42. 2's complement + 1\n        # 43. 2's complement + 1\n        # 44. 2's complement + 1\n        # 45. 2's complement + 1\n        # 46. 2's complement + 1\n        # 47. 2's complement + 1\n        # 48. 2's complement + 1\n        # 49. 2's complement + 1\n        # 50. 2's complement + 1\n        # 51. 2's complement + 1\n        # 52. 2's complement + 1\n        # 53. 2's complement + 1\n        # 54. 2's complement + 1\n        # 55. 2's complement + 1\n        # 56. 2's complement + 1\n        # 57. 2's complement + 1\n        # 58. 2's complement + 1\n        # 59. 2's complement + 1\n        # 60. 2's complement + 1\n        # 61. 2's complement + 1\n        # 62. 2's complement + 1\n        # 63. 2's complement + 1\n        # 64. 2's complement + 1\n        # 65. 2's complement + 1\n        # 66. 2's complement + 1\n        # 67. 2's complement + 1\n        # 68. 2's complement + 1\n        # 69. 2's complement + 1\n        # 70. 2's complement + 1\n        # 71. 2's complement + 1\n        # 72. 2's complement + 1\n        # 73. 2's complement + 1\n        # 74. 2's complement + 1"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(1, len(nums)-1):\n            if nums[i+1] - nums[i] == diff:\n                count += 1\n            else:\n                diff = nums[i+1] - nums[i]\n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res, cur, n = [], [], len(words)\n        for w in words:\n            if len(cur) > 0 and len(cur) + len(w) + n - 1 > maxWidth:\n                res.append(' '.join(cur).ljust(maxWidth))\n                cur, n = [], 0\n            cur += [w]\n            n += 1\n        return res + [' '.join(cur).ljust(maxWidth)]"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. build a set\n        word_set = set(words)\n        # 2. build a dict\n        word_dict = {}\n        # 3. build a list\n        res = []\n        # 4. loop through the words\n        for word in words:\n            # 5. loop through the word\n            for i in range(1, len(word)):\n                # 6. if the word is in the set, then add it to the dict\n                if word[:i] in word_set:\n                    word_dict[word] = True\n                # 7. if the word[:i] is in the dict, then check if the word[:i] is in the dict\n                if word[:i] in word_dict and (word[i:] in word_dict or self.dfs(word[i:], word_dict)):\n                    res.append(word)\n        return res\n    \n    def dfs(self, word, word_dict):\n        for i in range(1, len(word)):\n            if word[:i] in word_dict:\n                return True\n        return False"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num /= 7\n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, pie, na, n):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if cols[col] == 0 and pie[row+col] == 0 and na[row-col+n] == 0:\n                    count += backtrack(row+1, cols, pie, na, n)\n                    cols[col] = 1\n                    pie[row+col] = 1\n                    na[row-col+n] = 1\n            return count\n        \n        cols = [0] * n\n        pie = [0] * (2*n-1)\n        na = [0] * (2*n-1)\n        return backtrack(0, cols, pie, na, n)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def backtrack(queens, xy_diff, xy_sum):\n            p = len(queens)\n            if p == n:\n                res.append(queens)\n                return\n            for q in range(n):\n                if q not in queens and p-q not in xy_diff and p+q not in xy_sum:\n                    backtrack(queens+[q], xy_diff+[p-q], xy_sum+[p+q])\n        \n        res = []\n        backtrack([], {}, {})\n        return [['.'*i + 'Q' + '.'*(n-i-1) for i in res[i]] for i in range(len(res))]"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not board or not word:\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, word, i, j):\n                    return True\n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        tmp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i+1, j) or self.dfs(board, word[1:], i-1, j) or self.dfs(board, word[1:], i, j+1) or self.dfs(board, word[1:], i, j-1)\n        \n        board[i][j] = tmp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 2 pointers\n        p1 = m - 1\n        p2 = n - 1\n        p = m + n - 1\n        \n        while p1 >= 0 and p2 >= 0:\n            if nums1[p1] > nums2[p2]:\n                nums1[p] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[p] = nums2[p2]\n                p2 -= 1\n            p -= 1\n        \n        while p2 >= 0:\n            nums1[p] = nums2[p2]\n            p2 -= 1\n            p -= 1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n        \n        return max3 if max3 != float('-inf') else max1"}]}