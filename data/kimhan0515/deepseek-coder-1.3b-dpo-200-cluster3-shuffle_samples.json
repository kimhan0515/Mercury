{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        start = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                if start == nums[i - 1]:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(nums[i - 1]))\n                start = nums[i]\n        \n        if start == nums[-1]:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(nums[-1]))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        n, m = len(s), len(t)\n        dp = [0] * (m + 1)\n        dp[0] = 1\n        \n        for i in range(n):\n            for j in range(min(m, i + 1), 0, -1):\n                dp[j] += s[i] == t[j - 1] * dp[j - 1]\n        \n        return dp[m]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        \n        for i in range(n):\n            while 1 <= nums[i] <= n and nums[nums[i] - 1] != nums[i]:\n                nums[nums[i] - 1], nums[i] = nums[i], nums[nums[i] - 1]\n        \n        for i in range(n):\n            if i + 1 != nums[i]:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        ans = []\n        for i in range(n - 1, -1, -1):\n            fact //= i\n            ans.append(str(k // fact + 1))\n            k %= fact\n        \n        return ''.join(ans[::-1])"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] > target:\n                right -= 1\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                return [left + 1, right + 1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res):\n            if i == len(num):\n                if curr == target:\n                    res.append(prev)\n                return\n            for j in range(i, len(num)):\n                if j > i and num[i] == '0':\n                    break\n                curr_num = int(num[i:j+1])\n                if prev == 0:\n                    backtrack(j+1, curr_num, curr_num, res)\n                else:\n                    backtrack(j+1, curr + prev, curr_num, res)\n                    backtrack(j+1, curr - prev, -curr_num, res)\n        \n        res = []\n        backtrack(0, 0, 0, res)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        res = []\n        i = n - 1\n        while i >= 0:\n            res.append(s[i])\n            if (i - k) % (k + 1) == 0:\n                if i != n - 1:\n                    res.append('-')\n            i -= 1\n        res.reverse()\n        return ''.join(res)"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        if total_gas < total_cost:\n            return -1\n        \n        start = 0\n        curr_gas = 0\n        \n        for i in range(len(gas)):\n            curr_gas += gas[i] - cost[i]\n            \n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n                \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                dp[i][j] = max(nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j] for k in range(i + 1, j))\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        return [1] + digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '.')\n        \n        if len(p) >= 2 and p[1] == '*':\n            return self.isMatch(s, p[2:]) or (first_match and self.isMatch(s[1:], p))\n        \n        return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        m, n = len(nums1), len(nums2)\n        if n < k:\n            return nums1\n        if m < k:\n            return nums2\n        \n        ans = []\n        for i in range(k):\n            if nums2[i] > nums1[i]:\n                ans.append(nums2[i])\n            else:\n                break\n        else:\n            ans.append(nums2[k])\n            k += 1\n        \n        for i in range(k, n):\n            if nums2[i] > ans[-1]:\n                ans.pop()\n                ans.append(nums2[i])\n            elif nums2[i] < ans[-1] and k > 0:\n                k -= 1\n                ans.pop()\n                ans.append(nums2[i])\n        \n        return ans"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num / i == i:\n                    sum += i\n                else:\n                    sum += i + num / i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        \n        for i in range(2, n + 1):\n            c = a + b\n            a = b\n            b = c\n            \n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                if i == m - 1 and j == n - 1:\n                    dp[i][j] = max(1, 1 - dungeon[i][j])\n                else:\n                    dp[i][j] = max(1, dp[i + 1][j] - dungeon[i][j])\n                    dp[i][j] = max(dp[i][j], dp[i][j + 1] - dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        l, r = 0, nums[n - 1] - nums[0]\n        while l < r:\n            m = (l + r) // 2\n            cnt = 0\n            j = 0\n            for i in range(n):\n                while nums[i] - nums[j] > m:\n                    j += 1\n                cnt += i - j\n            if cnt >= k:\n                r = m\n            else:\n                l = m + 1\n        return l"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        left, right = 0, len(s) - 1\n        \n        while left < right:\n            while left < right and s[left] not in vowels:\n                left += 1\n            while left < right and s[right] not in vowels:\n                right -= 1\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        \n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest_streak = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                current_num = num\n                current_streak = 1\n                \n                while current_num + 1 in nums_set:\n                    current_num += 1\n                    current_streak += 1\n                    \n                longest_streak = max(longest_streak, current_streak)\n                \n        return longest_streak"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        missing = n * (n + 1) // 2\n        for num in nums:\n            missing -= num\n        return missing"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        q = collections.deque([beginWord])\n        distance = 1\n        \n        while q:\n            for _ in range(len(q)):\n                curr = q.popleft()\n                if curr == endWord:\n                    return distance\n                \n                for i in range(len(curr)):\n                    for c in string.ascii_lowercase:\n                        next_word = curr[:i] + c + curr[i+1:]\n                        if next_word in wordList:\n                            q.append(next_word)\n                            wordList.remove(next_word)\n            \n            distance += 1\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        carry = 0\n        result = []\n        \n        for i in range(len(a) - 1, -1, -1):\n            if i < len(b):\n                carry += int(a[i]) + int(b[i])\n            else:\n                carry += int(a[i])\n            \n            result.append(str(carry % 2))\n            carry //= 2\n        \n        if carry:\n            result.append(str(carry))\n        \n        return ''.join(result[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        left = left + 1\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left + 1) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(len(nums) - 1):\n            if i > curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n                \n            max_reach = max(max_reach, i + nums[i])\n            \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(0, prices[i + 1] - prices[i]) for i in range(0, len(prices) - 1))\n        \n        buy = [float('-inf')] * (k + 1)\n        sell = [0] * (k + 1)\n        \n        for price in prices:\n            for i in range(1, k + 1):\n                buy[i] = max(buy[i], sell[i - 1] - price)\n                sell[i] = max(sell[i], buy[i] + price)\n        \n        return sell[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        res = ''\n        \n        while num != 0 and len(res) < 8:\n            rem = num % 16\n            num //= 16\n            \n            if rem < 10:\n                res = str(rem) + res\n            else:\n                res = hex_dict[rem] + res\n        \n        return res"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        freq = {}\n        \n        # iterate over the string and update the frequency of each character\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # iterate over the string again and return the first character with frequency 1\n        for i, char in en.umerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        bucketSize = valueDiff + 1\n        \n        bucketDict = {}\n        \n        for i in range(len(nums)):\n            bucketId = nums[i] // bucketSize\n            \n            if bucketId in bucketDict:\n                return True\n            \n            if bucketId - 1 in bucketDict and nums[bucketDict[bucketId - 1]] + valueDiff >= nums[i]:\n                return True\n            \n            if bucketId + 1 in bucketDict and nums[bucketDict[bucketId + 1]] - valueDiff <= nums[i]:\n                return True\n            \n            bucketDict[bucketId] = i\n            \n            if i >= indexDiff:\n                del bucketDict[nums[i - indexDiff] // bucketSize]\n                \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        curr_count = 0\n        \n        for num in nums:\n            if num == 1:\n                curr_count += 1\n            else:\n                max_count = max(max_count, curr_count)\n                curr_count = 0\n                \n        return max(max_count, curr_count)"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        return left + right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        i = len(num1) - 1\n        j = len(num2) - 1\n        carry = 0\n        res = \"\"\n        \n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += ord(num1[i]) - ord('0')\n            if j >= 0:\n                carry += ord(num2[j]) - ord('0')\n            res = chr(carry % 10 + ord('0')) + res\n            carry //= 10\n            i -= 1\n            j -= 1\n            \n        return res"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num += sign * stack.pop()\n                sign = 1\n            elif s[i] == '-':\n                num += sign * stack.pop()\n                sign = -1\n            elif s[i] == '(':\n                stack.append(num)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num += sign * stack.pop()\n        return num + sign * stack.pop()"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        sorted_capital, sorted_profits = sorted(zip(capital, profits))\n        \n        # iterate over sorted profits\n        for i, c in enpx range(len(sorted_profits)):\n            # if we can afford the next project\n            if sorted_capital[i] <= w:\n                # add it to our capital\n                w += sorted_profits[i]\n            # if we have used all available projects\n            else:\n                break\n        # return the final capital\n        return w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(')')\n            elif c == '{':\n                stack.append('}')\n            elif c == '[':\n                stack.append(']')\n            elif not stack or stack.pop() != c:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        i = len(nums) - 2\n        \n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        if i >= 0:\n            j = len(nums) - 1\n            \n            while j >= 0 and nums[j] <= nums[i]:\n                j -= 1\n            \n            nums[i], nums[j] = nums[j], nums[i]\n        \n        left, right = i + 1, len(nums) - 1\n        \n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if k < 1:\n            return False\n        \n        d = {}\n        \n        for i, num in enumerate(nums):\n            if num in d and i - d[num] <= k:\n                return True\n            d[num] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        \n        max_diff = 0\n        \n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            level = []\n            for i in range(len(q)):\n                node = q.pop(0)\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        \n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        ans = 0\n        \n        for i in range(0, n, 2):\n            if row[i] % 2 == 1:\n                ans += row[i] // 2\n            else:\n                ans += row[i] // 2 - 1\n        \n        return ans"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1\n        \n        dp = [False] * (len(s2) + 1)\n        dp[0] = True\n        \n        for i in range(len(s1)):\n            dp[0] = dp[0] and s1[i] == s3[i]\n            for j in range(1, len(s2) + 1):\n                dp[j] = (dp[j - 1] and s2[j - 1] == s3[i + j - 1]) or (dp[j] and s1[i] == s3[i + j - 1])\n        \n        return dp[-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = j = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        firstRow = set('qwertyuiop')\n        secondRow = set('asdfghjkl')\n        thirdRow = set('zxcvbnm')\n        \n        ans = []\n        \n        for word in words:\n            if word[0] in firstRow:\n                row = firstRow\n            elif word[0] in secondRow:\n                row = secondRow\n            else:\n                row = thirdRow\n                \n            for c in word:\n                if c not in row:\n                    break\n            else:\n                ans.append(word)\n                \n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        \n        for i in range(left - 1):\n            prev = prev.next\n        \n        curr = prev.next\n        \n        for i in range(right - left):\n            next = curr.next\n            curr.next = next.next\n            next.next = prev.next\n            prev.next = next\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that is a prefix of s\n        i, n = 0, len(s)\n        for j in range(n - 1, -1, -1):\n            if s[i] == s[j]:\n                i += 1\n        \n        # append all characters from the beginning until the end\n        return s[i:][::-1] + s"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        count = len(t)\n        d = {}\n        for c in t:\n            if c not in d:\n                d[c] = 0\n            d[c] += 1\n        \n        l = 0\n        r = 0\n        res = (0, len(s) + 1)\n        for r in range(len(s)):\n            if s[r] in d:\n                d[s[r]] -= 1\n                if d[s[r]] >= 0:\n                    count -= 1\n            \n            while count == 0:\n                if r - l + 1 < res[1] - res[0]:\n                    res = (l, r + 1)\n                \n                if s[l] in d:\n                    d[s[l]] += 1\n                    if d[s[l]] > 0:\n                        count += 1\n                \n                l += 1\n        \n        return s[res[0]:res[1]] if res[1] < len(s) + 1 else \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i - 1] == distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2]:\n                return True\n            if i >= 5 and distance[i - 2] >= distance[i - 4] and distance[i - 1] <= distance[i - 3] and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] + distance[i - 5] >= distance[i - 3]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        \n        while curr.next:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the result\n        result = 0\n        \n        # Create a hashmap to store the frequency of each character\n        freq = {}\n        \n        # Iterate over the string\n        for char in s:\n            \n            # If the character is already in the hashmap, increment its frequency by 2\n            if char in freq:\n                freq[char] += 2\n                \n                # If the frequency is odd, add 1 to the result\n                if freq[char] % 2 == 1:\n                    result += 1\n            else:\n                # If the character is not in the hashmap, add it to the hashmap with a frequency of 1\n                freq[char] = 1\n                \n        # Return the result\n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        rootVal = postorder[-1]\n        rootIdx = inorder.index(rootVal)\n        \n        root = TreeNode(rootVal)\n        root.right = self.buildTree(inorder[rootIdx+1:], postorder[rootIdx:-1])\n        root.left = self.buildTree(inorder[:rootIdx], postorder[:rootIdx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((forest[i][j], i, j))\n        \n        trees.sort()\n        \n        ans = 0\n        curr = (0, 0)\n        for tree, i, j in trees:\n            d = self.bfs(forest, curr, (i, j))\n            if d == -1:\n                return -1\n            ans += d\n            curr = (i, j)\n        \n        return ans\n    \n    def bfs(self, forest, src, dst):\n        m, n = len(forest), len(forest[0])\n        q = collections.deque([src])\n        dist = [[float('inf')] * n for _ in range(m)]\n        dist[src[0]][src[1]] = 0\n        \n        while q:\n            i, j = q.popleft()\n            for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and forest[ni][nj] > 0 and dist[ni][nj] == float('inf'):\n                    dist[ni][nj] = dist[i][j] + 1\n                    q.append((ni, nj))\n        \n        return dist[dst[0]][dst[1]] if dist[dst[0]][dst[1]] != float('inf') else -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # sum[i] = sum[0] + sum[1] + ... + sum[i]\n        # sum[i] - sum[j] = sum[j] - sum[i - 1]\n        # sum[i] - lower <= sum[j] - sum[i - 1] <= upper\n        # sum[i] - lower <= sum[j] <= upper + sum[i - 1]\n        # sum[i] - lower <= sum[j] <= upper\n        # sum[i] - sum[j] <= upper\n        # sum[i] - sum[j] <= upper\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum[i] - sum[j] <= upper - lower\n        # sum"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x == 0:\n            return True\n        \n        div = 1\n        while x / div >= 10:\n            div *= 10\n        \n        while x > 0:\n            left = x / div\n            right = x % 10\n            if left != right:\n                return False\n            \n            x = (x % div) / 10\n            div /= 100\n        \n        return True"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        for c in t:\n            if i < len(s) and c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        res = [0]\n        for i in range(n):\n            for j in reversed(range(res[-1], len(res) * 2)):\n                res.append(res[j] ^ (1 << i))\n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        \n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        \n        for i in range(3, n + 1):\n            c = a + b\n            a = b\n            b = c\n        \n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def helper(node, lower, upper):\n            if not node:\n                return True\n            \n            if node.val <= lower or node.val >= upper:\n                return False\n            \n            return helper(node.left, lower, node.val) and helper(node.right, node.val, upper)\n        \n        return helper(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is empty, return the original list\n        if newInterval[0] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        # if the new interval is not empty, insert it into the list\n        # and merge overlapping intervals\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            i += 1\n        intervals.insert(i, newInterval)\n        \n        merged = []\n        for interval in intervals:\n            if not merged or merged[-1][1] < interval[0]:\n                merged.append(interval)\n            else:\n                merged[-1][1] = max(merged[-1][1], interval[1])\n        \n        return merged"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        if not s:\n            return [[]]\n        \n        res = []\n        self.dfs(s, 0, [], res)\n        return res\n    \n    def dfs(self, s, start, path, res):\n        if start == len(s):\n            res.append(path[:])\n            return\n        \n        for i in range(start, len(s)):\n            if self.isPalindrome(s, start, i):\n                path.append(s[start:i+1])\n                self.dfs(s, i+1, path, res)\n                path.pop()"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize min_val and max_val with the first element of each list\n        min_val, max_val = nums[0][0], nums[0][0]\n        \n        # Initialize the heap with the first element of each list\n        heap = [(nums[i][0], i) for i in range(len(nums))]\n        heapq.heapify(heap)\n        \n        # Initialize the range to the difference between max_val and min_val\n        range_ = max_val - min_val\n        \n        # Iterate until the heap is empty\n        while heap:\n            # Get the element with the smallest value from the heap\n            val, i = heapq.heappop(heap)\n            \n            # Update the range if necessary\n            if max_val - val > range_:\n                range_ = max_val - val\n                min_val = val\n                \n            # If the list has more elements, update the heap and update the max_val\n            if i + 1 < len(nums[i]):\n                val = nums[i][i + 1]\n                heapq.heappush(heap, (val, i))\n                max_val = max(max_val, val)\n                \n        return [min_val, max_val]"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        return ceil(log(buckets, minutesToDie + 1) / log(minutesToTest + 1))"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        pq = [(grid[0][0], 0, 0)]\n        seen = set([(0, 0)])\n        ans = 0\n        \n        while pq:\n            t, i, j = heapq.heappop(pq)\n            ans = max(ans, t)\n            if i == j == n - 1:\n                return ans\n            for ni, nj in ((i, j + 1), (i, j - 1), (i + 1, j), (i - 1, j)):\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in seen:\n                    heapq.heappush(pq, (grid[ni][nj], ni, nj))\n                    seen.add((ni, nj))"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        \n        # return self.uniquePaths(m - 1, n) + self.uniquePaths(m, n - 1)\n        \n        # return reduce(lambda x, y: x * y, range(m + n - 2, m - 1, -1)) // math.factorial(n - 1)\n        \n        dp = [1] * n\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        res = \"0\"\n        for i in range(len(num2)-1, -1, -1):\n            temp = \"0\"\n            for j in range(len(num1)-1, -1, -1):\n                temp = str(int(num2[i]) * int(num1[j]) + int(temp) * 10)\n            res = self.addStrings(res, temp)\n        return res\n    \n    def addStrings(self, num1, num2):\n        i = len(num1) - 1\n        j = len(num2) - 1\n        carry = 0\n        res = \"\"\n        while i >= 0 or j >= 0 or carry != 0:\n            if i >= 0:\n                carry += num1[i] - '0'\n            if j >= 0:\n                carry += num2[j] - '0'\n            res = str(carry % 10) + res\n            carry /= 10\n            i -= 1\n            j -= 1\n        return res"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1st pointer is the buy price\n        # 3. 2nd pointer is the sell price\n        # 4. 2nd pointer is the max profit\n        \n        buy1 = buy2 = float('inf')\n        profit = 0\n        \n        for price in prices:\n            buy1 = min(buy1, price)\n            profit = max(profit, price - buy1)\n            buy2 = min(buy2, price - profit)\n        \n        return profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, nums, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        \n        for i in xrange(start, len(nums)):\n            if nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            self.dfs(nums, target - nums[i], i + 1, path + [nums[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [(root, False)]\n        res = []\n        \n        while stack:\n            node, visited = stack.pop()\n            \n            if node is None:\n                continue\n            \n            if visited:\n                res.append(node.val)\n            else:\n                stack.append((node.right, False))\n                stack.append((node, True))\n                stack.append((node.left, False))\n                \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root_val = preorder[0]\n        root_index = inorder.index(root_val)\n        \n        left_inorder = inorder[:root_index]\n        right_inorder = inorder[root_index + 1:]\n        \n        left_preorder = preorder[1:root_index + 1]\n        right_preorder = preorder[root_index + 1:]\n        \n        root = TreeNode(root_val)\n        root.left = self.buildTree(left_preorder, left_inorder)\n        root.right = self.buildTree(right_preorder, right_inorder)\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the number of left and right parentheses\n        left_removed = 0\n        right_removed = 0\n        for c in s:\n            if c == '(':\n                left_removed += 1\n            elif c == ')':\n                if left_removed > 0:\n                    left_removed -= 1\n                else:\n                    right_removed += 1\n        \n        # 2. remove the remaining parentheses\n        left_removed = right_removed = 0\n        for i in range(len(s) - 1, -1, -1):\n            if s[i] == '(':\n                left_removed += 1\n            elif s[i] == ')':\n                if left_removed > 0:\n                    left_removed -= 1\n                else:\n                    right_removed += 1\n                    s = s[:i] + s[i + 1:]\n                    i -= 1\n        \n        # 3. generate all valid strings\n        result = [s]\n        for i in range(left_removed):\n            for j in range(len(result) - 1, -1, -1):\n                if result[j].count('(') > result[j].count(')'):\n                    result.append(result[j][:j] + result[j][j + 1:])\n        \n        return result"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists or len(lists) == 0:\n            return None\n        \n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode()\n        tail = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                tail.next = l1\n                l1 = l1.next\n            else:\n                tail.next = l2\n                l2 = l2.next\n            tail = tail.next\n        if l1:\n            tail.next = l1\n        if l2:\n            tail.next = l2\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n < 2:\n            return 0\n        \n        dp = [0] * (n + 1)\n        dp[0] = -1\n        \n        for i in range(1, n + 1):\n            dp[i] = i - 1\n            for j in range(i):\n                if s[j] == s[i - 1] and (i - j < 2 or dp[i - 1] == dp[i - j - 2]):\n                    dp[i] = dp[i - 1]\n                    break\n        \n        return dp[n]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. k = 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 22"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. build a hashmap for words\n        word_to_index = {word: i for i, word in en\n                        enumerate(words)}\n        \n        # 2. build a result list\n        result = []\n        \n        # 3. iterate over all words\n        for word, index in word_to_index.items():\n            \n            # 4. check if word is a palindrome\n            if word == word[::-1]:\n                \n                # 5. if so, add all palindrome pairs\n                if index != 0:\n                    result.append([index, index])\n                \n            # 6. check if word[0:len(word)-i] is a palindrome\n            for i in range(len(word)):\n                \n                # 7. if so, add all palindrome pairs\n                if word[i:] == word[i:][::-1]:\n                    result.append([index, word_to_index[word[i:]]])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        \n        root = TreeNode(nums[mid])\n        \n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        res = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if isInfected[i][j] == 1:\n                    res += self.spread(isInfected, i, j)\n        \n        return res\n        \n    def spread(self, isInfected, i, j):\n        res = 0\n        q = collections.deque([(i, j)])\n        isInfected[i][j] = 2\n        \n        while q:\n            i, j = q.popleft()\n            for x, y in [(i, j+1), (i, j-1), (i+1, j), (i-1, j)]:\n                if 0 <= x < len(isInfected) and 0 <= y < len(isInfected[0]) and isInfected[x][y] == 1:\n                    isInfected[x][y] = 2\n                    q.append((x, y))\n                    res += 1\n        \n        return res"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        \n        for i in range(m):\n            for j in range(n):\n                res = max(res, self.dfs(matrix, dp, i, j))\n        \n        return res\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                dp[i][j] = max(dp[i][j], self.dfs(matrix, dp, x, y))\n        \n        return dp[i][j] + 1"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += n / i * i + max(0, min(i, n % i))\n            i *= 10\n        \n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1):\n                if dp[j] and s[j:i + 1] in wordDict:\n                    dp[i + 1] = True\n                    break\n        \n        if not dp[-1]:\n            return []\n        \n        res = []\n        i = len(s)\n        while i > 0:\n            if dp[i]:\n                res.append(s[i - dp[i]:i])\n                i -= dp[i]\n            else:\n                i -= 1\n        \n        return reversed(res)"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            size = len(queue)\n            \n            for _ in range(size):\n                node = queue.pop(0)\n                \n                if leftToRight:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn == 0:\n            return ['0:00']\n        \n        res = []\n        for h in range(turnedOn + 1):\n            m = turnedOn - h\n            if m > 6:\n                continue\n            h_set = [1] * (h + 1) + [0] * (6 - h)\n            m_set = [1] * m + [0] * (6 - m)\n            for h_bit in itertools.combinations(h_set, 3):\n                h_val = sum(h_bit) * 60\n                for m_bit in itertools.combinations(m_set, 3):\n                    m_val = sum(m_bit)\n                    if m_val < 60:\n                        res.append('%d:%02d' % (h_val, m_val))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        res = [[1] * i for i in range(1, numRows)]\n        \n        for i in range(2, numRows):\n            for j in range(1, i):\n                res[i][j] = res[i - 1][j - 1] + res[i - 1][j]\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        n, m = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[0][0], 0, 0), (heightMap[n - 1][m - 1], n - 1, m - 1)]\n        seen = {(0, 0), (n - 1, m - 1)}\n        ans = 0\n        dirs = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        \n        while heap:\n            h, i, j = heapq.heappop(heap)\n            ans += h - heightMap[i][j]\n            for di, dj in dirs:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < m and (ni, nj) not in seen:\n                    seen.add((ni, nj))\n                    heapq.heappush(heap, (max(heightMap[ni][nj], h), ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub('[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # Initialize the result array\n        result = []\n        \n        # Initialize the window\n        window = nums[:k]\n        \n        # Calculate the median\n        result.append(self.median(window))\n        \n        # Iterate over the remaining elements\n        for i in range(k, len(nums)):\n            # Remove the first element from the window\n            window.remove(nums[i - k])\n            \n            # Add the new element to the window\n            window.add(nums[i])\n            \n            # Calculate the median\n            result.append(self.median(window))\n        \n        return result\n    \n    def median(self, window):\n        # If the window has an odd number of elements, return the middle element\n        if len(window) % 2 == 1:\n            return window[len(window) // 2]\n        \n        # Otherwise, return the average of the middle two elements\n        return (window[len(window) // 2] + window[len(window) // 2 - 1]) / 2.0"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        \n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k %= length\n        \n        if k == 0:\n            return head\n        \n        curr = head\n        \n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        curr = new_head\n        \n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the answer with the height of the tallest square.\n        ans = [0]\n        \n        # Iterate over the positions.\n        for left, side in positions:\n            \n            # Add the height of the current square to the answer.\n            ans.append(ans[-1] + side)\n            \n            # Subtract the height of the tallest square that can be dropped.\n            ans[-2] = max(ans[-2], ans[-1])\n            \n        return ans[1:]"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix = zip(*matrix)\n            m, n = n, m\n        \n        res = float('-inf')\n        for i in range(n):\n            curr = 0\n            q = collections.deque()\n            q.append(0)\n            for j in range(n):\n                if i > 0:\n                    curr += matrix[j][i]\n                else:\n                    curr = matrix[j][i]\n                while q and curr - q[0] > k:\n                    curr -= q.popleft()\n                res = max(res, curr)\n                q.append(curr)\n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        sign = 1 if dividend > 0 else -1\n        dividend, divisor = abs(dividend), abs(divisor)\n        \n        quotient = 0\n        while dividend >= divisor:\n            dividend -= divisor\n            quotient += 1\n        \n        return sign * quotient"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        # mark all the border 'O's with 'T's\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    if board[i][j] == 'O':\n                        self.dfs(board, i, j)\n        \n        # change all 'O's to 'X's and 'T's to 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'\n\n    def dfs(self, board, i, j):\n        if board[i][j] != 'O':\n            return\n        \n        board[i][j] = 'T'\n        \n        if i > 1:\n            self.dfs(board, i-1, j)\n        if i < len(board)-2:\n            self.dfs(board, i+1, j)\n        if j > 1:\n            self.dfs(board, i, j-1)\n        if j < len(board[0])-2:\n            self.dfs(board, i, j+1)"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dict to store the number and its index\n        num_index_dict = {}\n        \n        # iterate through the list\n        for i, num in enumerate(nums):\n            \n            # check if the complement of the current number is in the dict\n            if target - num in num_index_dict:\n                \n                # return the index of the complement and the current index\n                return [num_index_dict[target - num], i]\n            \n            # add the current number to the dict\n            num_index_dict[num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 1e-6\n        \n        for i in range(0, len(cards) - 1):\n            for j in range(i + 1, len(cards)):\n                a, b = cards[i], cards[j]\n                for op in [a + b, a - b, b - a, a * b]:\n                    if op != 0 and b != 0 and abs(op / b) == a / b:\n                        return True\n                    if op != 0 and b != 0 and abs(op / b) != a / b and self.judgePoint24([op / b] + [a / b] + cards[0:i] + cards[i + 1:j] + cards[j + 1:]):\n                        return True\n        return False"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '?')\n        \n        return (first_match and self.isMatch(s[1:], p[1:])) or (p[0] == '*' and self.isMatch(s[1:], p))"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += (1 if num == candidate else -1)\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a].append(b)\n        \n        # dfs\n        res = []\n        def dfs(node):\n            while graph[node]:\n                dfs(graph[node].pop())\n            res.append(node)\n        \n        dfs('JFK')\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                \n                l = j+1\n                r = len(nums)-1\n                \n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        \n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        \n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda b: b[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the current building is the last one in the result\n            if building[1] > result[-1][1]:\n                # add the current building to the result\n                result.append(building)\n            else:\n                # if the current building is not the last one in the result\n                # update the height of the last building in the result\n                result[-1][1] = building[1]\n        \n        # initialize the current height\n        current_height = 0\n        \n        # iterate over the buildings in reverse order\n        for i in range(len(result) - 1, -1, -1):\n            # if the current building is the last one in the result\n            if result[i][1] > current_height:\n                # add the current building to the result\n                result.append([result[i][0], result[i][1]])\n                # update the current height\n                current_height = result[i][1]\n            else:\n                # if the current building is not the last one in the result\n                # update the height of the last building in the result\n                result[-1][1] = current_height\n        \n        # remove the last element from the result\n        result.pop()\n        \n        # return the result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        \n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return 'Zero'\n        \n        # 10^9 is the maximum 32-bit signed integer.\n        # 10^9 + 1 is the minimum 32-bit signed integer.\n        # 10^9 + 2 is the maximum 32-bit unsigned integer.\n        # 10^9 + 3 is the minimum 32-bit unsigned integer.\n        # 10^9 + 4 is the maximum 64-bit signed integer.\n        # 10^9 + 5 is the minimum 64-bit signed integer.\n        # 10^9 + 6 is the maximum 64-bit unsigned integer.\n        # 10^9 + 7 is the minimum 64-bit unsigned integer.\n        # 10^9 + 8 is the maximum 128-bit signed integer.\n        # 10^9 + 9 is the minimum 128-bit signed integer.\n        # 10^9 + 10 is the maximum 128-bit unsigned integer.\n        # 10^9 + 11 is the minimum 128-bit unsigned integer.\n        # 10^9 + 12 is the maximum 256-bit signed integer.\n        # 10^9 + 13 is the minimum 256-bit signed integer.\n        # 10^9 + 14 is the maximum 256-bit unsigned integer.\n        # 10^9 + 15 is the minimum 256-bit unsigned integer.\n        # 10^9 + 16 is the maximum 512-bit signed integer.\n        # 10^9 + 17 is the minimum 512-bit signed integer.\n        # 10^9 + 18 is the maximum 512-bit unsigned integer.\n        # 10^9 + 19 is the minimum 512-bit unsigned integer.\n        # 10^9 + 20 is the maximum 1024-bit signed integer.\n        # 10^9 + 21 is the minimum 1024-bit signed integer.\n        # 10^9 + 22 is the maximum 1024-bit unsigned integer.\n        # 10^9 + 23 is the minimum 1024-bit unsigned integer.\n        # 10^9 + 24 is the maximum 4096-bit signed integer.\n        # 10^9 + 25 is the minimum 4096-bit signed integer.\n        # 10^9 + 26 is the maximum 4096-bit unsigned integer.\n        # 10^9 + 27 is the minimum 4096-bit unsigned integer.\n        # 10^9 + 28 is the maximum 8192-bit signed integer.\n        # 10^9 + 29 is the minimum 8192-bit signed integer.\n        # 10^9 + 30 is the maximum 8192-bit unsigned integer.\n        # 10^9 + 31 is the minimum 8192-bit unsigned integer.\n        # 10^9 + 32 is the maximum 2^31 - 1 bit signed integer.\n        # 10^9 + 33 is the minimum 2^31 - 1 bit signed integer.\n        # 10^9 + 34 is the maximum 2^31 - 1 bit unsigned integer.\n        # 10^9 + 35 is the minimum 2^31 - 1 bit unsigned integer.\n        \n        if num < 0 or num > 2**31 - 1:\n            return 'Invalid Input'\n        \n        if num == 0:\n            return 'Zero'\n        \n        # 10^9 is the maximum 32-bit signed integer.\n        # 10^9 + 1 is the minimum 32-bit signed integer.\n        # 10^9 + 2 is the maximum 32-bit unsigned integer.\n        # 10^9 + 3 is the minimum 32-bit unsigned integer.\n        # 10^9 + 4 is the maximum 64-bit signed integer.\n        # 10^9 + 5 is the minimum 64-bit signed integer.\n        # 10^9 + 6 is"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        if k == 0:\n            return 1\n        if k == 1:\n            return n\n        if k == 2:\n            return n * (n - 1) // 2 % MOD\n        \n        cur = [1] + [0] * k\n        for i in range(2, n + 1):\n            next_cur = [0] * (k + 1)\n            for j in range(1, k + 1):\n                next_cur[j] = (cur[j] + cur[j - 1] - (j >= i) * cur[j - i]) % MOD\n            cur = next_cur\n        return cur[k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # dummy nodes\n        smaller = ListNode(0)\n        larger = ListNode(0)\n        \n        # pointers\n        s = smaller\n        l = larger\n        \n        # traverse the list\n        while head:\n            if head.val < x:\n                s.next = head\n                s = s.next\n            else:\n                l.next = head\n                l = l.next\n            head = head.next\n        \n        # connect the two lists\n        s.next = larger.next\n        l.next = None\n        \n        return smaller.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(edges)\n        parent = [0] * (n + 1)\n        for i in range(n - 1):\n            if parent[edges[i][1]] > 0:\n                return [edges[i][1], edges[i][0]]\n            parent[edges[i][1]] = edges[i][0]\n        \n        for i in range(n - 1, -1, -1):\n            if parent[edges[i][0]] > 0:\n                return [parent[edges[i][0]], edges[i][0]]\n            parent[edges[i][0]] = edges[i][1]\n        \n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [nums[:]]\n        \n        i = 0\n        while i < len(nums) - 1:\n            if nums[i] == nums[i + 1]:\n                i += 1\n                continue\n            else:\n                j = i + 1\n                while j < len(nums) and nums[j] == nums[i]:\n                    j += 1\n                nums[i + 1:j] = nums[j - 1:i - 1:-1]\n                res.append(nums[:i + 1] + nums[i + 1:])\n                i += 1\n        \n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        return (num - 1) % 9 + 1"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR operation\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        \n        # 0 ^ 1 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 1 = 1\n        \n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 0 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 0 ^ 1 ^ 0 = 1\n        \n        # 0 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.rstrip().split(' ')[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * n for _ in range(n)]\n        dp[0][0] = grid[0][0]\n        \n        for i in range(1, n):\n            dp[i][0] = dp[i - 1][0] + grid[i][0]\n        \n        for i in range(1, n):\n            for j in range(1, n):\n                dp[i][j] = grid[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n                if i + j != n - 1:\n                    dp[i][j] = max(dp[i][j], dp[i][j - 1] + grid[i][j])\n        \n        return dp[n - 1][n - 1] // 2"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        a, l, p = 1, 0, 1\n        \n        for i in range(n):\n            a, l, p = (2*a + l) % MOD, (2*l + p) % MOD, (2*p) % MOD\n            \n        return (a + l + p) % MOD"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        while True:\n            slow = sum(int(d)**2 for d in str(slow))\n            fast = sum(int(d)**2 for d in str(fast)\n                      if fast % 2 == 0 else 0)\n            if slow == 1:\n                return True\n            if slow == fast:\n                return False"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        last_pos = len(nums) - 1\n        \n        for i in range(last_pos, -1, -1):\n            if i + nums[i] >= last_pos:\n                last_pos = i\n        \n        return last_pos == 0"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        res = '1'\n        \n        for i in range(2, n + 1):\n            res = self.say(res)\n            \n        return res\n        \n    def say(self, s):\n        res = ''\n        count = 1\n        for i in range(len(s) - 1):\n            if s[i] == s[i + 1]:\n                count += 1\n            else:\n                res += str(count) + s[i]\n                count = 1\n                \n        res += str(count) + s[-1]\n        \n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search on the answer\n        lo, hi = max(nums), sum(nums)\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if self.check(nums, mid, k):\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo\n        \n    def check(self, nums, target, k):\n        # check if we can split nums into k subarrays with sum at most target\n        subarrays = 1\n        curr_sum = 0\n        for num in nums:\n            if curr_sum + num > target:\n                subarrays += 1\n                curr_sum = num\n            else:\n                curr_sum += num\n        return subarrays <= k"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        low = 0\n        high = len(nums) - 1\n        \n        while low <= high:\n            mid = low + (high - low) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[low] <= nums[mid]:\n                if nums[low] <= target < nums[mid]:\n                    high = mid - 1\n                else:\n                    low = mid + 1\n            else:\n                if nums[mid] < target <= nums[high]:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_char = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        res = ['']\n        \n        for digit in digits:\n            for c in digit_to_char[digit]:\n                res = [r + c for r in res]\n        \n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        \n        for i in xrange(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i - 1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) - 1)\n        \n        if n[0] == '1':\n            return '9' if n[1] == '9' else '10'\n        \n        return str(int(n[:-1]) - 1) if n[-1] in '1' else str(int(n[:-1]) + 1)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        num = 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        \n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n            \n        if rev > 2**31 - 1:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i] = matrix[i][::-1]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = max_prod\n        \n        for i in range(1, len(nums)):\n            curr = nums[i]\n            max_prod, min_prod = max(curr, max_prod * curr, min_prod * curr), min(curr, max_prod * curr, min_prod * curr)\n            result = max(result, max_prod)\n            \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        n = len(stones)\n        dp = {stones[1]: set([1])}\n        \n        for i in range(2, n):\n            dp.setdefault(stones[i], set())\n            for k in dp[stones[i]]:\n                if k - 1 > 0:\n                    dp[stones[i]].add(k - 1)\n                if k:\n                    dp[stones[i]].add(k)\n                    if stones[i] + k < stones[-1]:\n                        dp[stones[i] + k].add(k)\n        \n        return len(dp[stones[-1]]) > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the array in descending order\n        score = sorted(score, reverse=True)\n        \n        # assign ranks to each element\n        rank = {score[i]: i + 1 for i in range(len(score))}\n        \n        # assign ranks to each element\n        for i in range(len(score)):\n            if i == 0:\n                rank[score[i]] = \"Gold Medal\"\n            elif i == 1:\n                rank[score[i]] = \"Silver Medal\"\n            elif i == 2:\n                rank[score[i]] = \"Bronze Medal\"\n            else:\n                rank[score[i]] = str(i + 1)\n        \n        return [rank[s] for s in score]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) == 0:\n            return 0\n        \n        max_len = 1\n        start = 0\n        end = 0\n        char_map = {}\n        \n        while end < len(s):\n            if s[end] in char_map and char_map[s[end]] >= start:\n                start = char_map[s[end]] + 1\n            char_map[s[end]] = end\n            max_len = max(max_len, end - start + 1)\n            end += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        n, k = len(s), len(words)\n        if k * words[0].__len__() > n:\n            return []\n        \n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        word_dict_copy = word_dict.copy()\n        for i in range(k * words[0].__len__()):\n            if s[i] in word_dict_copy:\n                word_dict_copy[s[i]] -= 1\n                if word_dict_copy[s[i]] == 0:\n                    del word_dict_copy[s[i]]\n                if not word_dict_copy:\n                    res.append(i - k * words[0].__len__() + 1)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        res = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] < max_val:\n                res += 1\n                max_val = arr[i]\n            else:\n                max_val = arr[i]\n        \n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        \n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                curr.next, prev.next, curr.next.next = curr.next.next, curr, prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            if curr.next.val == curr.next.next.val:\n                val = curr.next.val\n                while curr.next and curr.next.val == val:\n                    curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            l, r = i+1, len(nums)-1\n            \n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    \n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    \n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                    \n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n                    \n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            dp[i][0] = i\n        for j in range(n + 1):\n            dp[0][j] = j\n        \n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = min(dp[i - 1][j], dp[i][j - 1]) + 1\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        distance = 0\n        \n        while xor:\n            distance += 1\n            xor &= xor - 1\n        \n        return distance"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        return ['->'.join([str(root.val), path]) for path in left_paths + right_paths]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ans = 0\n        for i in range(len(nums)-1):\n            for j in range(i+1, len(nums)):\n                if nums[i] > 2*nums[j]:\n                    ans += 1\n        return ans"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return sx == tx and sy <= ty"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] *= 10 ** (len(v1) - i - 1)\n            if i < len(v2):\n                v2[i] *= 10 ** (len(v2) - i - 1)\n                \n        return cmp(v1, v2)"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     else:\n        #         profit = max(profit, prices[i] - buy)\n        \n        # return profit\n        \n        profit = 0\n        for i in range(1, len(prices)):\n            if prices[i] > prices[i - 1]:\n                profit += prices[i] - prices[i - 1]\n        \n        return profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        t = 0\n        pq = []\n        for d, lastDay in courses:\n            t += d\n            heapq.heappush(pq, -d)\n            if t > lastDay:\n                t += heapq.heappop(pq)\n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        \n        while True:\n            kth = prev\n            for i in range(k):\n                if kth.next:\n                    kth = kth.next\n                else:\n                    return dummy.next\n            \n            # reverse the nodes of the list\n            curr, nxt = kth, kth.next\n            for i in range(k):\n                curr.next, curr, nxt = nxt, nxt.next, nxt.next\n            \n            # connect the reversed list to the rest of the list\n            prev.next, prev, curr = curr, curr, kth\n        \n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s[1:] + s[:-1] == s"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR of a number with itself is 0\n        # XOR of a number with 0 is the number itself\n        # So we can use XOR to find the single number\n        single = 0\n        for num in nums:\n            single ^= num\n        return single"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the target dictionary with 0's\n        target_dict = {c: 0 for c in string.ascii_lowercase}\n        \n        # Iterate over the stickers and increment the target dictionary\n        # with the number of times the sticker appears in the target\n        for sticker in stickers:\n            for c in sticker:\n                target_dict[c] += sticker.count(c)\n        \n        # Initialize the queue with the target dictionary\n        q = collections.deque([target_dict])\n        \n        # Initialize the number of stickers needed to form the target\n        stickers_needed = 0\n        \n        # BFS\n        while q:\n            # Get the current dictionary\n            curr_dict = q.popleft()\n            \n            # If the current dictionary is the target, return the number of stickers needed\n            if curr_dict == target_dict:\n                return stickers_needed\n            \n            # Increment the number of stickers needed\n            stickers_needed += 1\n            \n            # Get the next dictionary\n            next_dict = {c: curr_dict[c] for c in curr_dict}\n            \n            # Iterate over the stickers\n            for sticker in stickers:\n                # Get the next dictionary with the number of times the sticker appears in the next dictionary\n                next_dict = {c: next_dict[c] + sticker.count(c) for c in sticker}\n                \n                # If the next dictionary has a negative number of stickers, skip it\n                if any(next_dict[c] < 0 for c in next_dict):\n                    continue\n                \n                # Add the next dictionary to the queue\n                q.append(next_dict)\n        \n        # If we reach this point, the number of stickers needed is the maximum number of stickers needed\n        return -1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [0] * (n + 1)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            dp[i] = i\n            for j in range(i - 1, 0, -1):\n                if s[i - 1] == s[j - 1]:\n                    dp[i] = dp[i - 1]\n                else:\n                    dp[i] = min(dp[i], dp[j - 1] + 1)\n        return dp[n]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if mid * mid == x:\n                return mid\n            \n            elif mid * mid < x:\n                left = mid + 1\n            \n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        \n        for i in range(len(s)):\n            if i+1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n                \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) > len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        res = []\n        \n        for i in range(len(nums)):\n            while q and q[0] < i - k + 1:\n                q.popleft()\n            \n            while q and nums[q[-1]] < nums[i]:\n                q.pop()\n            \n            q.append(i)\n            \n            if i >= k - 1:\n                res.append(nums[q[0]])\n        \n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        \n        m, n = len(nums1), len(nums2)\n        left_half_idx = 0\n        right_half_idx = 0\n        \n        half_len = (m + n + 1) // 2\n        \n        while left_half_idx < m and right_half_idx < n:\n            if nums1[left_half_idx] <= nums2[right_half_idx]:\n                left_half_idx += 1\n            else:\n                right_half_idx += 1\n            \n            if left_half_idx + right_half_idx == half_len:\n                if m + n % 2 == 1:\n                    return nums1[left_half_idx]\n                else:\n                    return (max(nums1[left_half_idx], nums2[right_half_idx]) + min(nums1[left_half_idx - 1], nums2[right_half_idx - 1])) / 2.0\n        \n        if left_half_idx == m:\n            return nums2[right_half_idx]\n        else:\n            return nums1[left_half_idx]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] < nums[right]:\n                right = mid - 1\n            else:\n                left = mid + 1"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        if not root:\n            return res\n        \n        def dfs(root, curr_sum, path):\n            if not root:\n                return\n            \n            curr_sum += root.val\n            path.append(root.val)\n            \n            if not root.left and not root.right and curr_sum == targetSum:\n                res.append(path[:])\n            \n            dfs(root.left, curr_sum, path)\n            dfs(root.right, curr_sum, path)\n            \n            path.pop()\n            \n        dfs(root, 0, [])\n        return res"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        w = int(math.sqrt(area))\n        while area % w != 0:\n            w -= 1\n        return [area / w, w]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        if endWord not in wordList:\n            return []\n        \n        wordList = set(wordList)\n        wordList.add(beginWord)\n        \n        q = collections.deque([beginWord])\n        found = False\n        res = []\n        \n        while q and not found:\n            size = len(q)\n            for _ in range(size):\n                word = q.popleft()\n                if word == endWord:\n                    found = True\n                    break\n                for i in range(len(word)):\n                    for c in string.ascii_lowercase:\n                        new_word = word[:i] + c + word[i+1:]\n                        if new_word in wordList:\n                            q.append(new_word)\n                            wordList.remove(new_word)\n        \n        if not found:\n            return []\n        \n        res.append([endWord])\n        \n        while res[-1][0] != beginWord:\n            res.append([res[-1][-1]] + [word for word in res[-2] if word != res[-1][-1]])\n        \n        return res[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and not (n & n - 1)"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        \n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += res[:]\n            for j in range(len(res)-1, len(res)-1-len(res[i]), -1):\n                res[j] = res[j-1] + [nums[i]]\n                \n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                curr_height = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, curr_height * (i - stack[-1] - 1))\n                else:\n                    max_area = max(max_area, curr_height * i)\n            stack.append(i)\n        while stack:\n            curr_height = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, curr_height * (len(heights) - stack[-1] - 1))\n            else:\n                max_area = max(max_area, curr_height * len(heights))\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        \n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        \n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x1, y1, x2, y2 = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x, y, a, b in rectangles:\n            x1, y1, x2, y2 = min(x1, x), min(y1, y), max(x2, a), max(y2, b)\n            area += (a - x) * (b - y)\n        \n        return area == (x2 - x1) * (y2 - y1)"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = ''\n        while columnNumber > 0:\n            columnNumber -= 1\n            ans = chr(columnNumber % 26 + ord('A')) + ans\n            columnNumber //= 26\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a single integer\n        num = 0\n        for i in range(2):\n            for j in range(3):\n                num = num * 10 + board[i][j]\n        \n        # convert 0 to the last position\n        if num % 10 == 0:\n            num //= 10\n        \n        # convert 2 to the first position\n        num = num * 10 + 2\n        \n        # convert 1 to the second position\n        num = num * 10 + 1\n        \n        # convert 3 to the third position\n        num = num * 10 + 3\n        \n        # convert 4 to the fourth position\n        num = num * 10 + 4\n        \n        # convert 5 to the fifth position\n        num = num * 10 + 5\n        \n        # convert 6 to the sixth position\n        num = num * 10 + 6\n        \n        # convert 7 to the seventh position\n        num = num * 10 + 7\n        \n        # convert 8 to the eighth position\n        num = num * 10 + 8\n        \n        # convert 9 to the ninth position\n        num = num * 10 + 9\n        \n        # convert 10 to the tenth position\n        num = num * 10 + 10\n        \n        # convert 11 to the eleventh position\n        num = num * 10 + 11\n        \n        # convert 12 to the twelfth position\n        num = num * 10 + 12\n        \n        # convert 13 to the thirteenth position\n        num = num * 10 + 13\n        \n        # convert 14 to the fourteenth position\n        num = num * 10 + 14\n        \n        # convert 15 to the fifteenth position\n        num = num * 10 + 15\n        \n        # convert 16 to the sixteenth position\n        num = num * 10 + 16\n        \n        # convert 17 to the seventeenth position\n        num = num * 10 + 17\n        \n        # convert 18 to the eighteenth position\n        num = num * 10 + 18\n        \n        # convert 19 to the nineteenth position\n        num = num * 10 + 19\n        \n        # convert 20 to the twentieth position\n        num = num * 10 + 20\n        \n        # convert 21 to the twenty-first position\n        num = num * 10 + 21\n        \n        # convert 22 to the twenty-second position\n        num = num * 10 + 22\n        \n        # convert 23 to the twenty-third position\n        num = num * 10 + 23\n        \n        # convert 24 to the twenty-fourth position\n        num = num * 10 + 24\n        \n        # convert 25 to the twenty-fifth position\n        num = num * 10 + 25\n        \n        # convert 26 to the twenty-sixth position\n        num = num * 10 + 26\n        \n        # convert 27 to the twenty-seventh position\n        num = num * 10 + 27\n        \n        # convert 28 to the twenty-eighth position\n        num = num * 10 + 28\n        \n        # convert 29 to the twenty-ninth position\n        num = num * 10 + 29\n        \n        # convert 30 to the thirty-first position\n        num = num * 10 + 30\n        \n        # convert 31 to the thirty-second position\n        num = num * 10 + 31\n        \n        # convert 32 to the thirty-third position\n        num = num * 10 + 32\n        \n        # convert 33 to the thirty-fourth position\n        num = num * 10 + 33\n        \n        # convert 34 to the thirty-fifth position\n        num = num * 10 + 34\n        \n        # convert 35 to the thirty-sixth position\n        num = num * 10 + 35\n        \n        # convert 36 to the thirty-seventh position\n        num = num * 10 + 36"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t and t[i] != s_to_t[s[i]]:\n                return False\n            if t[i] in t_to_s and s[i] != t_to_s[t[i]]:\n                return False\n            s_to_t[s[i]] = t[i]\n            t_to_s[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l, r = 0, len(nums) - 1\n        \n        while l <= r:\n            while l < r and nums[l] == nums[l + 1]:\n                l += 1\n            while r > l and nums[r] == nums[r - 1]:\n                r -= 1\n            \n            if nums[l] == target or nums[r] == target:\n                return True\n            \n            if nums[l] < nums[r]:\n                if nums[l] < target < nums[r]:\n                    r = r - 1\n                else:\n                    l = l + 1\n            else:\n                if nums[l] > target > nums[r]:\n                    l = l + 1\n                else:\n                    r = r - 1\n        \n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [0] * n\n        dp[0] = 1\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                else:\n                    if j > 0:\n                        dp[j] += dp[j-1]\n        \n        return dp[n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums) - 2):\n            l, r = i + 1, len(nums) - 1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s == target:\n                    return s\n                if abs(s - target) < abs(res - target):\n                    res = s\n                if s > target:\n                    r -= 1\n                else:\n                    l += 1\n        return res"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        prev = None\n        ans = float('inf')\n        \n        def inorder(node):\n            nonlocal prev, ans\n            if node:\n                inorder(node.left)\n                if prev:\n                    ans = min(ans, node.val - prev)\n                prev = node.val\n                inorder(node.right)\n        \n        inorder(root)\n        return ans"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        count = {}\n        max_count = 0\n        res = []\n        \n        def dfs(node):\n            if not node:\n                return\n            \n            if node.val in count:\n                count[node.val] += 1\n            else:\n                count[node.val] = 1\n            \n            if count[node.val] > max_count:\n                max_count = count[node.val]\n                res = [node.val]\n            elif count[node.val] == max_count:\n                res.append(node.val)\n            \n            dfs(node.left)\n            dfs(node.right)\n        \n        dfs(root)\n        \n        return res"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lowercase, uppercase, and digit characters in the password.\n        lowers, uppers, digits = 0, 0, 0\n        for c in password:\n            if c.islower():\n                lowers += 1\n            elif c.isupper():\n                uppers += 1\n            else:\n                digits += 1\n        \n        # 2. If the number of characters is less than 6, we need to add at least 6 - n to the answer.\n        n = len(password) - lowers - uppers - digits\n        if n < 6:\n            return max(6 - n, 0)\n        \n        # 3. If the number of characters is greater than 20, we need to remove 20 - n from the answer.\n        n = len(password) - lowers - uppers - digits\n        if n > 20:\n            return max(n - 20, 0)\n        \n        # 4. Otherwise, we can replace the lowercase, uppercase, and digit characters with one character.\n        return max(n - 2, 0)"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 2 is the only prime factor of 5\n        # 5^2 = 25\n        # 25 has 2 trailing zeros\n        # 5^3 = 125\n        # 125 has 3 trailing zeros\n        # 5^4 = 625\n        # 625 has 4 trailing zeros\n        # 5^5 = 3125\n        # 3125 has 5 trailing zeros\n        # 5^6 = 21875\n        # 21875 has 6 trailing zeros\n        # 5^7 = 138625\n        # 138625 has 7 trailing zeros\n        # 5^8 = 793125\n        # 793125 has 8 trailing zeros\n        # 5^9 = 596875\n        # 596875 has 9 trailing zeros\n        # 5^10 = 48828125\n        # 48828125 has 10 trailing zeros\n        # 5^11 = 47763828125\n        # 47763828125 has 11 trailing zeros\n        # 5^12 = 48884765625\n        # 48884765625 has 12 trailing zeros\n        # 5^13 = 5097656250000\n        # 5097656250000 has 13 trailing zeros\n        # 5^14 = 56298925000000\n        # 56298925000000 has 14 trailing zeros\n        # 5^15 = 665331400000000\n        # 665331400000000 has 15 trailing zeros\n        # 5^16 = 8276475000000000\n        # 8276475000000000 has 16 trailing zeros\n        # 5^17 = 107374182400000000\n        # 107374182400000000 has 17 trailing zeros\n        # 5^18 = 1555178280000000000\n        # 1555178280000000000 has 18 trailing zeros\n        # 5^19 = 23882401200000000000\n        # 23882401200000000000 has 19 trailing zeros\n        # 5^20 = 375499840000000000000\n        # 375499840000000000000 has 20 trailing zeros\n        # 5^21 = 6156751200000000000000\n        # 6156751200000000000000 has 21 trailing zeros\n        # 5^22 = 107374182400000000000000\n        # 107374182400000000000000 has 22 trailing zeros\n        # 5^23 = 209715200000000000000000\n        # 209715200000000000000000 has 23 trailing zeros\n        # 5^24 = 439804651110312"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        curRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[curRow] += c\n            if curRow == 0 or curRow == numRows - 1:\n                goingDown = not goingDown\n            curRow += 1 if goingDown else -1\n        \n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = 0, 0\n        res = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                left_max = max(left_max, height[left])\n                res += left_max - height[left]\n                left += 1\n            else:\n                right_max = max(right_max, height[right])\n                res += right_max - height[right]\n                right -= 1\n                \n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        return [i + 1 for i in range(len(nums)) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return [0] * n\n        \n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.append((float('inf'), n))\n        ans = [0] * n\n        \n        self.bit = [0] * (n + 1)\n        \n        for i in reversed(range(n)):\n            j = nums[i][1]\n            while j <= n:\n                ans[i] += self.bit[j]\n                j += j & -j\n            self.bit[j] += 1\n        \n        return ans"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = cur = 2\n        \n        for i in range(1, len(intervals)):\n            if intervals[i][0] > intervals[i - 1][1]:\n                cur = intervals[i][0]\n            if intervals[i][1] < cur:\n                ans += 1\n                cur += 1\n        \n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if not left and not right:\n            return True\n        \n        if not left or not right:\n            return False\n        \n        return left.val == right.val and self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        n = len(formula)\n        while i < n:\n            if formula[i] == '(':\n                stack.append(0)\n                i += 1\n            else:\n                j = i\n                while j < n and formula[j].islower():\n                    j += 1\n                num = j - i if i > 0 else 1\n                i = j\n                while i < n and formula[i].isdigit():\n                    i += 1\n                num = num * (10 if i < n and formula[i] == ')' else 1) + stack[-1] if stack else num\n                stack[-1] += num\n        return ''.join(atom + (str(count) if count > 1 else '') for atom, count in sorted(stack))"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n > 0 and (n & (n - 1)) == 0 and n & 0x55555555 != 0"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        res = []\n        self.helper(res, '', 0, 0, n)\n        return res\n    \n    def helper(self, res, curr, left, right, n):\n        if left == n and right == n:\n            res.append(curr)\n            return\n        \n        if left < n:\n            self.helper(res, curr + '(', left + 1, right, n)\n        \n        if right < left:\n            self.helper(res, curr + ')', left, right + 1, n)"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the result and the current number of elements in the array\n        res, i = 0, 0\n        \n        # While the current number of elements in the array is less than the length of the array\n        while i < len(nums):\n            \n            # If the current number of elements in the array is greater than or equal to the next number in the array\n            if nums[i] <= n:\n                \n                # Add the current number to the result\n                res += nums[i]\n                \n                # Increment the current number of elements in the array\n                i += 1\n                \n            else:\n                \n                # If the current number of elements in the array is less than the next number in the array\n                res += 1\n                \n                # If the result is greater than the next number in the array\n                if res >= n:\n                    \n                    # Break the loop\n                    break\n                \n                # Add the current number to the result\n                res += nums[i]\n                \n        # Return the result\n        return res"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the stack and the max_len\n        stack = [-1]\n        max_len = 0\n        \n        # Iterate over the string\n        for i in range(len(s)):\n            # If the current character is '('\n            if s[i] == '(':\n                # Push the index onto the stack\n                stack.append(i)\n            else:\n                # If the stack is empty, or the top of the stack is ')'\n                if not stack or stack[-1] == ')':\n                    # Push the current index onto the stack\n                    stack.append(i)\n                else:\n                    # Pop the top of the stack\n                    stack.pop()\n                    # If the stack is empty, add the current index - the previous index + 1 to the max_len\n                    if not stack:\n                        max_len = i + 1\n                    # Otherwise, add the current index - the stack[-1] to the max_len\n                    else:\n                        max_len = max(max_len, i - stack[-1])\n        \n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if not denominator:\n            return '0'\n        \n        res = ''\n        \n        if numerator < 0 == denominator < 0:\n            res += '-'\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        \n        res += str(numerator // denominator)\n        \n        numerator %= denominator\n        \n        if not numerator:\n            return res\n        \n        res += '.'\n        \n        seen = {numerator: len(res)}\n        \n        while numerator:\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator %= denominator\n            \n            if numerator in seen:\n                res = res[:seen[numerator]] + '(' + res[seen[numerator]:] + ')'\n                break\n            else:\n                seen[numerator] = len(res)\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        second = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        l1 = self.sortList(head)\n        l2 = self.sortList(second)\n        \n        # merge the sorted halves\n        sorted_list = ListNode()\n        curr = sorted_list\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        # add any remaining nodes from the non-empty list\n        curr.next = l1 if l1 else l2\n        \n        return sorted_list.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        max_len = 0\n        for i in range(len(envelopes)):\n            if envelopes[i][1] > max_len:\n                max_len = envelopes[i][1]\n        \n        return max_len"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        first_row_has_zero = False\n        \n        for i in range(m):\n            if matrix[i][0] == 0:\n                first_row_has_zero = True\n                \n        for j in range(1, n):\n            if matrix[0][j] == 0:\n                first_row_has_zero = True\n                \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n                    \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n                    \n        if first_row_has_zero:\n            for j in range(n):\n                matrix[0][j] = 0\n                \n        if first_col_has_zero:\n            for i in range(m):\n                matrix[i][0] = 0\n                \n        return matrix"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # Initialize the slow and fast pointers\n        slow = dummy\n        fast = dummy\n        \n        # Move the fast pointer n steps ahead\n        for i in range(n + 1):\n            fast = fast.next\n        \n        # Move the slow pointer until the fast pointer reaches the end\n        while fast:\n            slow = slow.next\n            fast = fast.next\n        \n        # Skip the node to be removed\n        slow.next = slow.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 0:\n            return 0\n        \n        total = sum(machines)\n        if total % n:\n            return -1\n        \n        avg = total // n\n        ans = 0\n        cur = 0\n        for i in range(n):\n            cur += machines[i] - avg\n            ans = max(ans, abs(cur))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        curr = 1\n        for i in range(1, k):\n            if curr >= n:\n                curr //= n\n            else:\n                curr += m - 1\n                if curr >= n:\n                    curr //= n\n                else:\n                    curr += 1\n        return curr + 1"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        \n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        root = slow.next\n        slow.next = None\n        \n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(root.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1, list2 = list1.next, list2\n        \n        head = list1\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                list1 = list1.next\n            else:\n                temp = list2.next\n                list2.next = list1.next\n                list1.next = list2\n                list2 = temp\n            list1 = list1.next\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                max_area = max(max_area, h * (i - stack[-1] - 1 if stack else i))\n            stack.append(i)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        \n        for num in nums:\n            res += [curr + [num] for curr in res]\n        \n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s or s[0] not in '+-':\n            s = s[1:]\n        if not s:\n            return False\n        dot_count = 0\n        for i, c in enumerate(s):\n            if c == 'e':\n                if i == 0 or i == len(s) - 1:\n                    return False\n                if dot_count > 0:\n                    return False\n                dot_count = 1\n            elif c == '.':\n                if dot_count > 0:\n                    return False\n                dot_count += 1\n            elif c not in '0123456789':\n                return False\n        return dot_count == 1"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman = {1000: 'M', 900: 'CM', 500: 'D', 400: 'CD', 100: 'C', 90: 'XC', 50: 'L', 40: 'XL', 10: 'X', 9: 'IX', 5: 'V', 4: 'IV', 1: 'I'}\n        result = ''\n        \n        for key in roman.keys():\n            result += roman[key] * (num // key)\n            num %= key\n            \n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        \n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 0 ^"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i, j)\n            return None\n        \n        def is_valid(board, num, pos):\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            box_row = pos[0] // 3 * 3\n            box_col = pos[1] // 3 * 3\n            for i in range(3):\n                for j in range(3):\n                    if board[box_row + i][box_col + j] == num:\n                        return False\n            return True\n        \n        empty = find_empty_space(board)\n        if empty is None:\n            return True\n        for num in range(1, 10):\n            if is_valid(board, num, empty):\n                board[empty[0]][empty[1]] = str(num)\n                if find_empty_space(board) is None:\n                    return True\n                board[empty[0]][empty[1]] = '.'\n        return False"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node that are swapped\n        first_node = second_node = None\n        prev = None\n        \n        while root:\n            if root.left:\n                # find the inorder predecessor of current node\n                pred = root.left\n                while pred.right and pred.right != root:\n                    pred = pred.right\n                \n                if pred.right:\n                    # restore the inorder predecessor\n                    pred.right = None\n                    \n                    # if first node is None, make it current node\n                    if first_node is None:\n                        first_node = pred\n                    \n                    # if second node is None, make it current node\n                    if second_node is None:\n                        second_node = root\n                    \n                    # if first node is not None and second node is not None and\n                    # first node is greater than second node, make second node\n                    # as current node\n                    elif first_node.val > second_node.val:\n                        second_node = root\n                    \n                    # restore the inorder predecessor\n                    pred.right = root\n                    \n                    # move to the next node\n                    root = root.right\n                \n                # restore the inorder predecessor\n                else:\n                    pred.right = root\n                    root = root.right\n            \n            else:\n                # if first node is None, make it current node\n                if first_node is None:\n                    first_node = root\n                \n                # if first node is not None and second node is not None and\n                # first node is greater than second node, make second node\n                # as current node\n                elif first_node.val > second_node.val:\n                    second_node = root\n                \n                # move to the next node\n                root = root.right\n        \n        # swap the values of the first and second node\n        first_node.val, second_node.val = second_node.val, first_node.val"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half with the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left, right = 1, num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0]\n        for i in range(1, n + 1):\n            ans.append(ans[i & (i - 1)] + 1)\n        \n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr:\n            if curr.next and curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split(\"/\"):\n            if p == \"..\":\n                if stack:\n                    stack.pop()\n            elif p and p != \".\":\n                stack.append(p)\n        return \"/\" + \"/\".join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not board or not board[0]:\n            return []\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = '#'\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, res)\n        \n        return res\n    \n    def dfs(self, board, i, j, node, res):\n        c = board[i][j]\n        if c not in node:\n            return\n        \n        if '#' in node:\n            res.append(node['#'])\n        \n        board[i][j] = '#'\n        if i > 0:\n            self.dfs(board, i - 1, j, node[c], res)\n        if i < len(board) - 1:\n            self.dfs(board, i + 1, j, node[c], res)\n        if j > 0:\n            self.dfs(board, i, j - 1, node[c], res)\n        if j < len(board[0]) - 1:\n            self.dfs(board, i, j + 1, node[c], res)\n        board[i][j] = c"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        count = [0] * 256\n        \n        for i in range(len(s)):\n            count[ord(s[i])] += 1\n            count[ord(t[i])] -= 1\n        \n        for i in count:\n            if i != 0:\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check each row\n        for i in range(9):\n            if not self.isValid(board[i]):\n                return False\n        \n        # 2. check each column\n        for j in range(9):\n            if not self.isValid(self.getCol(board, j)):\n                return False\n        \n        # 3. check each 3x3 sub-box\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                if not self.isValid(self.getSubBox(board, i, j)):\n                    return False\n        \n        return True\n    \n    def isValid(self, nums):\n        # check if all numbers are unique\n        return len(nums) == len(set(nums))\n    \n    def getCol(self, board, colIdx):\n        return [board[i][colIdx] for i in range(9)]\n    \n    def getSubBox(self, board, boxStartRow, boxStartCol):\n        return [board[i][j] for i in range(boxStartRow, boxStartRow + 3) for j in range(boxStartCol, boxStartCol + 3)]"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        \n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n                \n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the whole string\n        s = s[::-1]\n        \n        # reverse each word\n        s = s.split(' ')\n        \n        # reverse each word and join them back together\n        return ' '.join(s[::-1])"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res = res * 26 + ord(columnTitle[i]) - ord('A') + 1\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        ans = 0\n        inc = 1\n        dec = 0\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                dec = inc\n                inc = 1\n            elif ratings[i] == ratings[i - 1]:\n                dec = 0\n                inc = 1\n            else:\n                dec += 1\n                inc = 1\n            ans += max(inc, dec)\n        \n        return ans"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second = slow.next\n        prev = None\n        while second:\n            next = second.next\n            second.next = prev\n            prev = second\n            second = next\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second:\n            first.next, first = second, first.next\n            second = second.next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        words = s.split()\n        if len(words) != len(pattern):\n            return False\n        \n        return len(set(words)) == len(set(pattern)) == len(set(words)) == len(set(pattern))"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        \n        for i in range(len(nums)):\n            n = nums[i]\n            \n            nums_remaining = nums[:i] + nums[i+1:]\n            \n            for p in self.permute(nums_remaining):\n                res.append([n] + p)\n                \n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        left, right = 0, m * n - 1\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if matrix[mid // n][mid % n] < target:\n                left = mid + 1\n            elif matrix[mid // n][mid % n] > target:\n                right = mid - 1\n            else:\n                return True\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode(0)\n        curr = dummy\n        \n        while l1 or l2 or carry:\n            val1 = (l1.val if l1 else 0)\n            val2 = (l2.val if l2 else 0)\n            \n            sum_val = val1 + val2 + carry\n            \n            carry = sum_val // 10\n            \n            curr.next = ListNode(sum_val % 10)\n            curr = curr.next\n            \n            l1 = l1.next if l1 else None\n            l2 = l2.next if l2 else None\n            \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the highest bit that is 1\n        # 2. flip all bits to 1\n        # 3. flip the highest bit to 0\n        # 4. add 1 to the highest bit\n        # 5. subtract 1 from the highest bit\n        # 6. add 1 to the highest bit\n        # 7. subtract 1 from the highest bit\n        # 8. add 1 to the highest bit\n        # 9. subtract 1 from the highest bit\n        # 10. add 1 to the highest bit\n        # 11. subtract 1 from the highest bit\n        # 12. add 1 to the highest bit\n        # 13. subtract 1 from the highest bit\n        # 14. add 1 to the highest bit\n        # 15. subtract 1 from the highest bit\n        # 16. add 1 to the highest bit\n        # 17. subtract 1 from the highest bit\n        # 18. add 1 to the highest bit\n        # 19. subtract 1 from the highest bit\n        # 20. add 1 to the highest bit\n        # 21. subtract 1 from the highest bit\n        # 22. add 1 to the highest bit\n        # 23. subtract 1 from the highest bit\n        # 24. add 1 to the highest bit\n        # 25. subtract 1 from the highest bit\n        # 26. add 1 to the highest bit\n        # 27. subtract 1 from the highest bit\n        # 28. add 1 to the highest bit\n        # 29. subtract 1 from the highest bit\n        # 30. add 1 to the highest bit\n        # 31. subtract 1 from the highest bit\n        # 32. add 1 to the highest bit\n        # 33. subtract 1 from the highest bit\n        # 34. add 1 to the highest bit\n        # 35. subtract 1 from the highest bit\n        # 36. add 1 to the highest bit\n        # 37. subtract 1 from the highest bit\n        # 38. add 1 to the highest bit\n        # 39. subtract 1 from the highest bit\n        # 40. add 1 to the highest bit\n        # 41. subtract 1 from the highest bit\n        # 42. add 1 to the highest bit\n        # 43. subtract 1 from the highest bit\n        # 44. add 1 to the highest bit\n        # 45. subtract 1 from the highest bit\n        # 46. add 1 to the highest bit\n        # 47. subtract 1 from the highest bit\n        # 48. add 1 to the highest bit\n        # 49. subtract 1 from the highest bit\n        # 50. add 1 to the highest bit\n        # 51. subtract 1 from the highest bit\n        # 52. add 1 to the highest bit\n        # 53. subtract 1 from the highest bit\n        # 54. add 1 to the highest bit\n        # 55. subtract 1 from the highest bit\n        # 56. add 1 to the highest bit\n        # 57. subtract 1 from the highest bit\n        # 58. add 1 to the highest bit\n        # 59. subtract 1 from the highest bit\n        # 60. add 1 to the highest bit\n        # 61. subtract 1 from the highest bit\n        # 62. add 1 to the highest bit\n        # 63. subtract 1 from the highest bit\n        # 64. add 1 to the highest bit\n        # 65. subtract 1 from the highest bit\n        # 66. add 1 to the highest bit\n        # 67. subtract 1 from the highest bit\n        # 68. add 1 to the highest bit\n        # 69. subtract 1 from the highest bit\n        # 70. add 1 to the highest bit\n        # 71. subtract 1 from the highest bit\n        # 72"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res, cur_len, num_words = [], 0, len(words)\n        \n        for w in words:\n            if cur_len + len(w) + num_words > maxWidth:\n                if num_words == 1:\n                    res.append(cur_len * ' ' + w)\n                else:\n                    n, m = divmod(cur_len, num_words - 1)\n                    res.append((n + 1) * ' ' + w + (m * ' '))\n                cur_len = 0\n                num_words = 0\n            cur_len += len(w)\n            num_words += 1\n        \n        return res + [' '.join(words[-num_words:]) + ' ' * (maxWidth - cur_len - num_words + 1)]"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            max_area = max(max_area, (right - left) * min(height[left], height[right]))\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        words.sort(key=len)\n        dp = [False] * (len(words) + 1)\n        dp[0] = True\n        \n        for i, word in enumerate(words):\n            for j in range(i + 1, len(words) + 1):\n                if dp[j - 1] and word[:j] in words[:j]:\n                    dp[j] = True\n        \n        return [word for word, d in zip(words, dp) if d]"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        res = ''\n        sign = 1 if num > 0 else -1\n        num = abs(num)\n        \n        while num:\n            res += str(num % 7)\n            num //= 7\n        \n        return res[::-1] * sign"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def backtrack(queens, row, n):\n            if row == n:\n                res.append(queens[:])\n                return\n            \n            for col in range(n):\n                if is_valid(queens, row, col, n):\n                    queens[row] = col\n                    backtrack(queens, row + 1, n)\n                    \n        res = []\n        backtrack([-1] * n, 0, n)\n        return res\n        \n        \n    def is_valid(self, queens, row, col, n):\n        for i in range(row):\n            if queens[i] == col or abs(queens[i] - col) == abs(i - row):\n                return False\n        return True"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board or not board[0]:\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, word, i, j):\n                    return True\n        \n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        tmp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = tmp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # Iterate through nums1 and nums2, starting from the end\n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        while j >= 0:\n            if i >= 0 and nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2:\n                max3 = max2\n                max2 = num\n            elif num > max3:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}]}