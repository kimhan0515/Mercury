{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1]\n        # dp[i][j] = dp[i-1][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i]["}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 1, 2, 3, ..., n\n        # 2. 1, 2, 3, ..., n-1\n        # 3. 1, 2, 3, ..., n-2\n        # 4. 1, 2, 3, ..., n-3\n        # 5. 1, 2, 3, ..., n-4\n        # 6. 1, 2, 3, ..., n-5\n        # 7. 1, 2, 3, ..., n-6\n        # 8. 1, 2, 3, ..., n-7\n        # 9. 1, 2, 3, ..., n-8\n        # 10. 1, 2, 3, ..., n-9\n        # 11. 1, 2, 3, ..., n-10\n        # 12. 1, 2, 3, ..., n-11\n        # 13. 1, 2, 3, ..., n-12\n        # 14. 1, 2, 3, ..., n-13\n        # 15. 1, 2, 3, ..., n-14\n        # 16. 1, 2, 3, ..., n-15\n        # 17. 1, 2, 3, ..., n-16\n        # 18. 1, 2, 3, ..., n-17\n        # 19. 1, 2, 3, ..., n-18\n        # 20. 1, 2, 3, ..., n-19\n        # 21. 1, 2, 3, ..., n-20\n        # 22. 1, 2, 3, ..., n-21\n        # 23. 1, 2, 3, ..., n-22\n        # 24. 1, 2, 3, ..., n-23\n        # 25. 1, 2, 3, ..., n-24\n        # 26. 1, 2, 3, ..., n-25\n        # 27. 1, 2, 3, ..., n-26\n        # 28. 1, 2, 3, ..., n-27\n        # 29. 1, 2, 3, ..., n-28\n        # 30. 1, 2, 3, ..., n-29\n        # 31. 1, 2, 3, ..., n-30\n        # 32. 1, 2, 3, ..., n-31\n        # 33. 1, 2, 3, ..., n-32\n        # 34. 1, 2, 3, ..., n-33\n        # 35. 1, 2, 3, ..., n-34\n        # 36. 1, 2, 3, ..., n-35\n        # 37. 1, 2, 3, ..., n-36\n        # 38. 1, 2, 3, ..., n-37\n        # 39. 1, 2, 3, ..., n-38\n        # 40. 1, 2, 3, ..., n-39\n        # 41. 1, 2, 3, ..., n-40\n        # 42. 1, 2, 3, ..., n-41\n        # 43. 1, 2, 3, ..., n-42\n        # 44. 1, 2, 3, ..., n-43\n        # 45. 1, 2, 3, ..., n-44\n        # 46. 1, 2, 3, ..., n-45\n        # 47. 1, 2, 3, ..., n-46\n        # 48. 1, 2"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Two pointers\n        left = 0\n        right = len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, path):\n            if not num:\n                if target == 0:\n                    res.append(path)\n                return\n            for i in range(1, len(num)+1):\n                if i == 1 or num[0] != '0':\n                    cur = int(num[:i])\n                    if not path:\n                        backtrack(num[i:], target-cur, cur, res, str(cur))\n                    else:\n                        backtrack(num[i:], target-cur, cur, res, path+'+'+str(cur))\n                        backtrack(num[i:], target+cur, -cur, res, path+'-'+str(cur))\n                        backtrack(num[i:], target-cur-op+cur, op*cur, res, path+'*'+str(cur))\n        res = []\n        backtrack(num, target, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, prev_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return prev_sum * 10 + root.val\n            \n            left_sum = dfs(root.left, prev_sum * 10 + root.val)\n            right_sum = dfs(root.right, prev_sum * 10 + root.val)\n            \n            return left_sum + right_sum\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s.upper()\n        s = s[::-1]\n        res = ''\n        for i in range(0, len(s), k):\n            res += s[i:i+k]\n            if i+k < len(s):\n                res += '-'\n        return res[::-1]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Find the total gas and cost\n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        ## 2. If total gas is less than total cost, return -1\n        if total_gas < total_cost:\n            return -1\n        \n        ## 3. Find the starting point\n        start = 0\n        curr_gas = 0\n        \n        for i in range(len(gas)):\n            curr_gas += gas[i] - cost[i]\n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 2.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 3.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 4.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 5.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 6.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 7.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 8.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 9.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 10.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 11.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return true if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*'\n            if self.isMatch(s, p[2:]):\n                return True\n            # if the first character of p is not '*', check if the first character of s is not '*'\n            if s and (p[0] == s[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p)\n            # if the first character of p is not '*', check if the first character of s is not '*'\n            return False\n        \n        # if p is not empty, check if the first character of p is '*'\n        if p[0] == '.' or p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        # if p is not empty, check if the first character of p is not '*'\n        return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick_max(nums1, nums2, k):\n            if len(nums1) > len(nums2):\n                return pick_max(nums2, nums1, k)\n            if len(nums1) == 0:\n                return nums2[:k]\n            if k == 0:\n                return []\n            if k == 1:\n                return [max(nums1, nums2)]\n            if nums1[-1] > nums2[-1]:\n                return nums1\n            if nums1[-1] < nums2[-1]:\n                return nums2\n            if nums1[-1] == nums2[-1]:\n                return [nums1[-1]] + pick_max(nums1[:-1], nums2[:-1], k-1)\n            \n        def pick_min(nums1, nums2, k):\n            if len(nums1) > len(nums2):\n                return pick_min(nums2, nums1, k)\n            if len(nums1) == 0:\n                return nums2[:k]\n            if k == 0:\n                return []\n            if k == 1:\n                return [min(nums1, nums2)]\n            if nums1[-1] < nums2[-1]:\n                return nums1\n            if nums1[-1] > nums2[-1]:\n                return nums2\n            if nums1[-1] == nums2[-1]:\n                return [nums1[-1]] + pick_min(nums1[:-1], nums2[:-1], k-1)\n            \n        def pick_max_min(nums1, nums2, k):\n            if len(nums1) > len(nums2):\n                return pick_max_min(nums2, nums1, k)\n            if len(nums1) == 0:\n                return nums2[:k]\n            if k == 0:\n                return []\n            if k == 1:\n                return [min(nums1, nums2)]\n            if nums1[-1] > nums2[-1]:\n                return nums1\n            if nums1[-1] < nums2[-1]:\n                return nums2\n            if nums1[-1] == nums2[-1]:\n                return [nums1[-1]] + pick_min(nums1[:-1], nums2[:-1], k-1)\n            \n        if len(nums1) + len(nums2) < k:\n            return []\n        if len(nums1) == 0:\n            return nums2[:k]\n        if len(nums2) == 0:\n            return nums1[:k]\n        if k == 1:\n            return [max(nums1, nums2)]\n        if k == 2:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 3:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 4:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 5:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 6:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 7:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 8:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 9:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 10:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 11:\n            return [max(nums1, nums2), min(nums1, nums2)]\n        if k == 12:\n            return [max(nums1, nums2), min(nums1, num"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i\n                if i**2 != num:\n                    sum += num//i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        for i in range(m-1,-1,-1):\n            for j in range(n-1,-1,-1):\n                if i == m-1 and j == n-1:\n                    dp[i][j] = max(1,1-dungeon[i][j])\n                elif i == m-1:\n                    dp[i][j] = max(1,dp[i][j+1]-dungeon[i][j])\n                elif j == n-1:\n                    dp[i][j] = max(1,dp[i+1][j]-dungeon[i][j])\n                else:\n                    dp[i][j] = max(1,min(dp[i+1][j],dp[i][j+1])-dungeon[i][j])\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n                while i < len(s) and s[i] != ' ':\n                    i += 1\n        return count"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        vowel_indices = []\n        for i in range(len(s_list)):\n            if s_list[i] in vowels:\n                vowel_indices.append(i)\n        \n        vowel_indices.reverse()\n        for i in range(len(vowel_indices)):\n            s_list[vowel_indices[i]] = s[i]\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. We can use the property of XOR to solve this problem.\n        ## 2. We can use the property of XOR to solve this problem.\n        ## 3. We can use the property of XOR to solve this problem.\n        ## 4. We can use the property of XOR to solve this problem.\n        ## 5. We can use the property of XOR to solve this problem.\n        ## 6. We can use the property of XOR to solve this problem.\n        ## 7. We can use the property of XOR to solve this problem.\n        ## 8. We can use the property of XOR to solve this problem.\n        ## 9. We can use the property of XOR to solve this problem.\n        ## 10. We can use the property of XOR to solve this problem.\n        ## 11. We can use the property of XOR to solve this problem.\n        ## 12. We can use the property of XOR to solve this problem.\n        ## 13. We can use the property of XOR to solve this problem.\n        ## 14. We can use the property of XOR to solve this problem.\n        ## 15. We can use the property of XOR to solve this problem.\n        ## 16. We can use the property of XOR to solve this problem.\n        ## 17. We can use the property of XOR to solve this problem.\n        ## 18. We can use the property of XOR to solve this problem.\n        ## 19. We can use the property of XOR to solve this problem.\n        ## 20. We can use the property of XOR to solve this problem.\n        ## 21. We can use the property of XOR to solve this problem.\n        ## 22. We can use the property of XOR to solve this problem.\n        ## 23. We can use the property of XOR to solve this problem.\n        ## 24. We can use the property of XOR to solve this problem.\n        ## 25. We can use the property of XOR to solve this problem.\n        ## 26. We can use the property of XOR to solve this problem.\n        ## 27. We can use the property of XOR to solve this problem.\n        ## 28. We can use the property of XOR to solve this problem.\n        ## 29. We can use the property of XOR to solve this problem.\n        ## 30. We can use the property of XOR to solve this problem.\n        ## 31. We can use the property of XOR to solve this problem.\n        ## 32. We can use the property of XOR to solve this problem.\n        ## 33. We can use the property of XOR to solve this problem.\n        ## 34. We can use the property of XOR to solve this problem.\n        ## 35. We can use the property of XOR to solve this problem.\n        ## 36. We can use the property of XOR to solve this problem.\n        ## 37. We can use the property of XOR to solve this problem.\n        ## 38. We can use the property of XOR to solve this problem.\n        ## 39. We can use the property of XOR to solve this problem.\n        ## 40. We can use the property of XOR to solve this problem.\n        ## 41. We can use the property of XOR to solve this problem.\n        ## 42. We can use the property of XOR to solve this problem.\n        ## 43. We can use the property of XOR to solve this problem.\n        ## 44. We can use the property of XOR to solve this problem.\n        ## 45. We can use the property of XOR to solve this problem.\n        ## 46. We can use the property of XOR to solve this problem.\n        ## 47. We can use the property of XOR to solve this problem.\n        ##"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    return level\n                for i in range(len(curr)):\n                    for neighbor in graph[curr[:i] + \"*\" + curr[i+1:]]:\n                        if neighbor not in visited:\n                            visited.add(neighbor)\n                            queue.append(neighbor)\n            level += 1\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, left):\n            low = 0\n            high = len(nums) - 1\n            while low <= high:\n                mid = (low + high) // 2\n                if nums[mid] == target:\n                    if left:\n                        if mid == low or nums[mid - 1] < target:\n                            return mid\n                        high = mid - 1\n                    else:\n                        if mid == high or nums[mid + 1] > target:\n                            return mid\n                        low = mid + 1\n                elif nums[mid] < target:\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            return -1\n        \n        left_index = binary_search(nums, target, True)\n        right_index = binary_search(nums, target, False)\n        return [left_index, right_index]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] == nums[j]:\n                j += 1\n            else:\n                i += 1\n                nums[i] = nums[j]\n                j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(0, len(prices)-1)) for i in range(0, len(prices)-1, 2))\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        for i in range(1, len(prices)):\n            for j in range(1, k+1):\n                dp[j][0] = max(dp[j][0], dp[j-1][1] + prices[i])\n                dp[j][1] = max(dp[j][1], dp[j][0] - prices[i])\n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_list = []\n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_list.append(str(remainder))\n            else:\n                hex_list.append(hex_dict[remainder])\n            num = num // 16\n        \n        hex_list.reverse()\n        return \"\".join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Create a hashmap with key as the character and value as the index\n        ## 2. Iterate through the string and check if the character is already in the hashmap\n        ## 3. If it is, then remove it from the hashmap and continue\n        ## 4. If it is not, then add it to the hashmap and continue\n        ## 5. Return the value of the first character in the hashmap\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        hashmap = {}\n        for i in range(len(s)):\n            if s[i] in hashmap:\n                hashmap.pop(s[i])\n            else:\n                hashmap[s[i]] = i\n        \n        if len(hashmap) == 0:\n            return -1\n        \n        return hashmap[list(hashmap.keys())[0]]"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if abs(nums[i] - nums[j]) <= valueDiff and abs(i - j) <= indexDiff:\n        #             return True\n        # return False\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # for i in range(len(nums)):\n        #     for j in range(i+"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0 -> left\n        # 1 -> right\n        # 2 -> right\n        # 3 -> left\n        # 4 -> right\n        # 5 -> left\n        # 6 -> right\n        # 7 -> left\n        # 8 -> right\n        # 9 -> left\n        # 10 -> right\n        # 11 -> left\n        # 12 -> right\n        # 13 -> left\n        # 14 -> right\n        # 15 -> left\n        # 16 -> right\n        # 17 -> left\n        # 18 -> right\n        # 19 -> left\n        # 20 -> right\n        # 21 -> left\n        # 22 -> right\n        # 23 -> left\n        # 24 -> right\n        # 25 -> left\n        # 26 -> right\n        # 27 -> left\n        # 28 -> right\n        # 29 -> left\n        # 30 -> right\n        # 31 -> left\n        # 32 -> right\n        # 33 -> left\n        # 34 -> right\n        # 35 -> left\n        # 36 -> right\n        # 37 -> left\n        # 38 -> right\n        # 39 -> left\n        # 40 -> right\n        # 41 -> left\n        # 42 -> right\n        # 43 -> left\n        # 44 -> right\n        # 45 -> left\n        # 46 -> right\n        # 47 -> left\n        # 48 -> right\n        # 49 -> left\n        # 50 -> right\n        # 51 -> left\n        # 52 -> right\n        # 53 -> left\n        # 54 -> right\n        # 55 -> left\n        # 56 -> right\n        # 57 -> left\n        # 58 -> right\n        # 59 -> left\n        # 60 -> right\n        # 61 -> left\n        # 62 -> right\n        # 63 -> left\n        # 64 -> right\n        # 65 -> left\n        # 66 -> right\n        # 67 -> left\n        # 68 -> right\n        # 69 -> left\n        # 70 -> right\n        # 71 -> left\n        # 72 -> right\n        # 73 -> left\n        # 74 -> right\n        # 75 -> left\n        # 76 -> right\n        # 77 -> left\n        # 78 -> right\n        # 79 -> left\n        # 80 -> right\n        # 81 -> left\n        # 82 -> right\n        # 83 -> left\n        # 84 -> right\n        # 85 -> left\n        # 86 -> right\n        # 87 -> left\n        # 88 -> right\n        # 89 -> left\n        # 90 -> right\n        # 91 -> left\n        # 92 -> right\n        # 93 -> left\n        # 94 -> right\n        # 95 -> left\n        # 96 -> right\n        # 97 -> left\n        # 98 -> right\n        # 99 -> left\n        # 100 -> right\n        # 101 -> left\n        # 102 -> right\n        # 103 -> left\n        # 104 -> right\n        # 105 -> left\n        # 106 -> right\n        # 107 -> left\n        # 108 -> right\n        # 109 -> left\n        # 110 -> right\n        # 111 -> left\n        # 112 -> right\n        # 1"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        carry = 0\n        res = \"\"\n        i = 0\n        while i < len(num1) or i < len(num2):\n            if i < len(num1):\n                val1 = int(num1[i])\n            else:\n                val1 = 0\n            if i < len(num2):\n                val2 = int(num2[i])\n            else:\n                val2 = 0\n            sum = val1 + val2 + carry\n            carry = sum // 10\n            res += str(sum % 10)\n            i += 1\n        if carry:\n            res += str(carry)\n        return res[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 2. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 3. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 4. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 5. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 6. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 7. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 8. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 9. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 10. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 11. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 12. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 13. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 14. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 15. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 16. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 17. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 18. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 19. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 20. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 21. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 22. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 23. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 24. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 25. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 26. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 27. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 28. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 29. \uc5f0\uc0b0\uc790 \uc6b0\uc120\ufffd"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits = [profits[i] for i in range(len(profits))]\n        # capital = [capital[i] for i in range(len(capital))]\n        # profits.sort()\n        # capital.sort()\n        # print(profits)\n        # print(capital)\n        # print(profits[0])\n        # print(capital[0])\n        # print(profits[1])\n        # print(capital[1])\n        # print(profits[2])\n        # print(capital[2])\n        # print(profits[3])\n        # print(capital[3])\n        # print(profits[4])\n        # print(capital[4])\n        # print(profits[5])\n        # print(capital[5])\n        # print(profits[6])\n        # print(capital[6])\n        # print(profits[7])\n        # print(capital[7])\n        # print(profits[8])\n        # print(capital[8])\n        # print(profits[9])\n        # print(capital[9])\n        # print(profits[10])\n        # print(capital[10])\n        # print(profits[11])\n        # print(capital[11])\n        # print(profits[12])\n        # print(capital[12])\n        # print(profits[13])\n        # print(capital[13])\n        # print(profits[14])\n        # print(capital[14])\n        # print(profits[15])\n        # print(capital[15])\n        # print(profits[16])\n        # print(capital[16])\n        # print(profits[17])\n        # print(capital[17])\n        # print(profits[18])\n        # print(capital[18])\n        # print(profits[19])\n        # print(capital[19])\n        # print(profits[20])\n        # print(capital[20])\n        # print(profits[21])\n        # print(capital[21])\n        # print(profits[22])\n        # print(capital[22])\n        # print(profits[23])\n        # print(capital[23])\n        # print(profits[24])\n        # print(capital[24])\n        # print(profits[25])\n        # print(capital[25])\n        # print(profits[26])\n        # print(capital[26])\n        # print(profits[27])\n        # print(capital[27])\n        # print(profits[28])\n        # print(capital[28])\n        # print(profits[29])\n        # print(capital[29])\n        # print(profits[30])\n        # print(capital[30])\n        # print(profits[31])\n        # print(capital[31])\n        # print(profits[32])\n        # print(capital[32])\n        # print(profits[33])\n        # print(capital[33])\n        # print(profits[34])\n        # print(capital[34])\n        # print(profits[35])\n        # print(capital[35])\n        # print(profits[36])\n        # print(capital[36])\n        # print(profits[37])\n        # print(capital[37])\n        # print(profits[38])\n        # print(capital[38])\n        # print(profits[39])\n        # print(capital[39])\n        # print(profits[40])\n        # print(capital[40])\n        # print(profits[41])\n        # print(capital[41])\n        # print(profits[42])\n        # print(capital[42])\n        # print(profits[43])\n        # print(capital"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the number that is bigger than the number that is smaller than the next number\n        # swap the two numbers\n        # reverse the numbers after the number that is smaller than the next number\n        \n        # find the first number that is smaller than the next number\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # find the number that is bigger than the number that is smaller than the next number\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers after the number that is smaller than the next number\n        left, right = i + 1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        # Store the index of the number in the hashmap\n        # If the number is already in the hashmap, check if the index is within the range of k\n        # If it is, return True\n        # If it is not, update the index of the number in the hashmap\n        \n        # Create a hashmap\n        hashmap = {}\n        \n        # Iterate through the list\n        for i in range(len(nums)):\n            \n            # If the number is already in the hashmap, check if the index is within the range of k\n            if nums[i] in hashmap:\n                if abs(hashmap[nums[i]] - i) <= k:\n                    return True\n            \n            # Update the index of the number in the hashmap\n            hashmap[nums[i]] = i\n        \n        # If the number is not in the hashmap, return False\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i-1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        for word in words:\n            if word[0] in row1:\n                row = row1\n            elif word[0] in row2:\n                row = row2\n            else:\n                row = row3\n            for letter in word:\n                if letter not in row:\n                    break\n            else:\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        prev.next = None\n        tail = curr\n        \n        while count < right:\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n            count += 1\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed substring with the original string\n        # 4. If the concatenated string is a palindrome, return it\n        # 5. Otherwise, return the reversed substring\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the substring\n        # 3. Concatenate the reversed"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        # Create a hashmap for the characters in t\n        # and their frequencies\n        t_map = {}\n        for char in t:\n            if char not in t_map:\n                t_map[char] = 1\n            else:\n                t_map[char] += 1\n        \n        # Create a hashmap for the characters in s\n        # and their frequencies\n        s_map = {}\n        for char in s:\n            if char not in s_map:\n                s_map[char] = 1\n            else:\n                s_map[char] += 1\n        \n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap for the characters in t\n        # and their frequencies\n        # Create a hashmap for the characters in s\n        # and their frequencies\n        # Create a hashmap"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)-3):\n            if distance[i] >= distance[i+2] and distance[i+1] <= distance[i+3]:\n                return True\n            if distance[i] <= distance[i+2] and distance[i+1] >= distance[i+3]:\n                return True\n            if distance[i] <= distance[i+2] and distance[i+1] <= distance[i+3]:\n                if distance[i] + distance[i+4] >= distance[i+2] and distance[i+1] + distance[i+5] >= distance[i+3]:\n                    return True\n            if distance[i] >= distance[i+2] and distance[i+1] >= distance[i+3]:\n                if distance[i] + distance[i+4] <= distance[i+2] and distance[i+1] + distance[i+5] <= distance[i+3]:\n                    return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\ub4e4\uc758 \uac1c\uc218\ub97c \uc800\uc7a5\ud55c\ub2e4.\n        # 2. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 1\uc744 \ube7c\uc900\ub2e4.\n        # 3. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 4. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 5. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 6. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 7. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 8. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 9. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 10. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 11. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 12. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0 1\uc744 \ub354\ud574\uc900\ub2e4.\n        # 13. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find all the trees in the forest\n        # 2. Sort the trees by height\n        # 3. Start from the top left corner and walk to the bottom right corner\n        # 4. Keep track of the number of steps taken\n        # 5. If the tree is not reachable, return -1\n        \n        # 1. Find all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # 2. Sort the trees by height\n        trees.sort()\n        \n        # 3. Start from the top left corner and walk to the bottom right corner\n        # 4. Keep track of the number of steps taken\n        # 5. If the tree is not reachable, return -1\n        steps = 0\n        current_position = (0, 0)\n        for tree in trees:\n            steps += self.walk_to_tree(forest, current_position, tree)\n            if steps == -1:\n                return -1\n        \n        return steps\n    \n    def walk_to_tree(self, forest, current_position, tree):\n        # 4. Keep track of the number of steps taken\n        # 5. If the tree is not reachable, return -1\n        # 6. Update the current position\n        # 7. Return the number of steps taken\n        steps = 0\n        while True:\n            steps += 1\n            if current_position[0] < forest.length - 1 and forest[current_position[0] + 1][current_position[1]] >= tree:\n                current_position = (current_position[0] + 1, current_position[1])\n            elif current_position[1] < forest[0].length - 1 and forest[current_position[0]][current_position[1] + 1] >= tree:\n                current_position = (current_position[0], current_position[1] + 1)\n            elif current_position[0] > 0 and forest[current_position[0] - 1][current_position[1]] >= tree:\n                current_position = (current_position[0] - 1, current_position[1])\n            elif current_position[1] > 0 and forest[current_position[0]][current_position[1] - 1] >= tree:\n                current_position = (current_position[0], current_position[1] - 1)\n            else:\n                return -1\n            if current_position == (forest.length - 1, forest[0].length - 1):\n                return steps\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 30:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 31:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 32:"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(temp)\n            queue = queue[len(temp):]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        else:\n            return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,3,2]\n        \n        if n == 3:\n            return [0,1,3,2,6,7,5,4]\n        \n        if n == 4:\n            return [0,1,3,2,6,7,5,4,12,13,15,14,10,9,8]\n        \n        if n == 5:\n            return [0,1,3,2,6,7,5,4,12,13,15,14,10,9,8,16,17,19,18,22,23,25,24,20,11,11,21,20,21,22,23,24,25,26,27,28,29,26,27,28,29,30,31,32,33,34,35,32,33,34,35,36,37,38,39,40,36,37,38,39,40,41,42,43,44,45,42,43,44,45,46,47,48,49,50,46,47,48,49,50,51,52,53,54,55,52,53,54,55,56,57,58,59,60,56,57,58,59,60,61,62,63,64,65,62,63,64,65,66,67,68,69,70,66,67,68,69,70,71,72,73,74,75,72,73,74,75,76,77,78,79,80,76,77,78,79,80,81,82,83,84,85,82,83,84,85,86,87,88,89,90,86,87,88,89,90,91,92,93,94,95,92,93,94,95,96,97,98,99,100,96,97,98,99,100,101,102,103,104,105,102,103,104,105,106,107,108,109,110,106,107,108,109,110,111,112,113,114,115,112,113,114,115,116,117,118,119,120,116,117,118,119,120,121,122,123,124,125,122,123,124,125,126,127,128,129,130,126,127,128,129,130,131,132,133,134,135,132,133,134,135,136,137,138,139,140,136,137,138,139,140,141,142,143,144,145,142,143,144,145,146,147,148,149,150,146,147,148,149,150,15"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * (n+1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        \n        return dp[n]"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and wordDict[j] in s[j:i]) for all 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp[i] = True if wordDict[j] in s[j:i] for any 0 <= j < i\n        # dp"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTUtil(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return isValidBSTUtil(root.left, min_val, root.val) and isValidBSTUtil(root.right, root.val, max_val)\n        \n        return isValidBSTUtil(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if intervals is empty\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is empty\n        if not newInterval:\n            return intervals\n        \n        # if newInterval is not overlapping with any interval\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with the first interval\n        if newInterval[0] <= intervals[0][0]:\n            newInterval[0] = intervals[0][0]\n        \n        # if newInterval is overlapping with the last interval\n        if newInterval[1] >= intervals[-1][1]:\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval is overlapping with any interval\n        else:\n            # if newInterval is overlapping with the first interval\n            if newInterval[0] <= intervals[0][0]:\n                newInterval[0] = intervals[0][0]\n            \n            # if newInterval is overlapping with the last interval\n            if newInterval[1] >= intervals[-1][1]:\n                newInterval[1] = intervals[-1][1]\n        \n        # remove the first interval\n        intervals.remove(intervals[0])\n        \n        # insert newInterval into intervals\n        intervals.insert(0, newInterval)\n        \n        # sort intervals by starti\n        intervals.sort(key=lambda x: x[0])\n        \n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \uc120\uc5b8\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # 2. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 3. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 4. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 5. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 6. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 7. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 8. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 9. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 10. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 11. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])\n        \n        # 12. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218 \ucd08\uae30\ud654\n        min_val = min(nums[0])\n        max_val = max(nums[0])"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # BFS\n        q = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        while q:\n            curr_time, x, y = q.pop(0)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                visited.add((nx, ny))\n                q.append((grid[nx][ny], nx, ny))\n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2D array\n        # 2. 1D array\n        # 3. 1D array\n        # 4. 1D array\n        # 5. 1D array\n        # 6. 1D array\n        # 7. 1D array\n        # 8. 1D array\n        # 9. 1D array\n        # 10. 1D array\n        # 11. 1D array\n        # 12. 1D array\n        # 13. 1D array\n        # 14. 1D array\n        # 15. 1D array\n        # 16. 1D array\n        # 17. 1D array\n        # 18. 1D array\n        # 19. 1D array\n        # 20. 1D array\n        # 21. 1D array\n        # 22. 1D array\n        # 23. 1D array\n        # 24. 1D array\n        # 25. 1D array\n        # 26. 1D array\n        # 27. 1D array\n        # 28. 1D array\n        # 29. 1D array\n        # 30. 1D array\n        # 31. 1D array\n        # 32. 1D array\n        # 33. 1D array\n        # 34. 1D array\n        # 35. 1D array\n        # 36. 1D array\n        # 37. 1D array\n        # 38. 1D array\n        # 39. 1D array\n        # 40. 1D array\n        # 41. 1D array\n        # 42. 1D array\n        # 43. 1D array\n        # 44. 1D array\n        # 45. 1D array\n        # 46. 1D array\n        # 47. 1D array\n        # 48. 1D array\n        # 49. 1D array\n        # 50. 1D array\n        # 51. 1D array\n        # 52. 1D array\n        # 53. 1D array\n        # 54. 1D array\n        # 55. 1D array\n        # 56. 1D array\n        # 57. 1D array\n        # 58. 1D array\n        # 59. 1D array\n        # 60. 1D array\n        # 61. 1D array\n        # 62. 1D array\n        # 63. 1D array\n        # 64. 1D array\n        # 65. 1D array\n        # 66. 1D array\n        # 67. 1D array\n        # 68. 1D array\n        # 69. 1D array\n        # 70. 1D array\n        # 71. 1D array\n        # 72. 1D array\n        # 73. 1D array\n        # 74. 1D array\n        # 75. 1D array\n        # 76. 1D array\n        # 77. 1D array\n        # 78. 1D array\n        # 79. 1D array\n        # 80. 1D array\n        # 81. 1D array\n        # 82. 1D array\n        # 83. 1D array\n        # 84. 1D array\n        # 85. 1D array\n        # 86. 1D array\n        # 87. 1D array\n        # 88. 1D array\n        # 89. 1D array\n        # 90. 1D array\n        # 91. 1D array\n        # 92. 1D array\n        # 93. 1D array\n        # 94. 1D array"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        ## 2. DP\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## 3. Greedy\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        # max_profit = 0\n        # for i in range(len(prices)):\n        #     for j in range(i+1, len(prices)):\n        #         profit = prices[j] - prices[i]\n        #         max_profit = max(profit, max_profit)\n        # return max_profit\n        \n        ## 2. DP\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        # min_price = float('inf')\n        # max_profit = 0\n        # for price in prices:\n        #     min_price = min(min_price, price)\n        #     max_profit = max(max_profit, price - min_price)\n        # return max_profit\n        \n        ## 3. Greedy\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        min_price = float('inf')\n        max_profit = 0\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # if root is None:\n        #     return []\n        # stack = []\n        # res = []\n        # while root or stack:\n        #     while root:\n        #         stack.append(root)\n        #         root = root.left\n        #     root = stack.pop()\n        #     res.append(root.val)\n        #     root = root.right\n        # return res\n        \n        # Recursive solution\n        if root is None:\n            return []\n        return self.inorderTraversal(root.left) + [root.val] + self.inorderTraversal(root.right)"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(preorder) == 0:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        left_preorder = preorder[1:root_index+1]\n        right_preorder = preorder[root_index+1:]\n        left_inorder = inorder[:root_index]\n        right_inorder = inorder[root_index+1:]\n        \n        root.left = self.buildTree(left_preorder, left_inorder)\n        root.right = self.buildTree(right_preorder, right_inorder)\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc67c\ucabd\ubd80\ud130 \uc624\ub978\ucabd\uc73c\ub85c \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\ub97c \uc13c\ub2e4.\n        # 2. \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\uac00 \uac19\uc544\uc9c0\uba74 \uc67c\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud55c\ub2e4.\n        # 3. \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\uac00 \uac19\uc544\uc9c0\uba74 \uc67c\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud55c\ub2e4.\n        # 4. \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\uac00 \uac19\uc544\uc9c0\uba74 \uc67c\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud55c\ub2e4.\n        # 5. \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\uac00 \uac19\uc544\uc9c0\uba74 \uc67c\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud55c\ub2e4.\n        # 6. \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\uac00 \uac19\uc544\uc9c0\uba74 \uc67c\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud55c\ub2e4.\n        # 7. \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\uac00 \uac19\uc544\uc9c0\uba74 \uc67c\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd \uad04\ud638\ub97c \uc81c\uac70\ud55c\ub2e4.\n        # 8. \uc67c\ucabd \uad04\ud638\uc758 \uac1c\uc218\uc640 \uc624\ub978\ucabd \uad04\ud638\uc758 \uac1c\uc218\ufffd"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Time Complexity: O(nlogk)\n        # Space Complexity: O(1)\n        \n        # Edge Case:\n        if len(lists) == 0:\n            return None\n        \n        # Edge Case:\n        if len(lists) == 1:\n            return lists[0]\n        \n        # Edge Case:\n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        # Edge Case:\n        if len(lists) == 3:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), lists[2])\n        \n        # Edge Case:\n        if len(lists) == 4:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(lists[2], lists[3]))\n        \n        # Edge Case:\n        if len(lists) == 5:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(lists[2], self.mergeTwoLists(lists[3], lists[4])))\n        \n        # Edge Case:\n        if len(lists) == 6:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(lists[4], lists[5])))\n        \n        # Edge Case:\n        if len(lists) == 7:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), lists[6])))\n        \n        # Edge Case:\n        if len(lists) == 8:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(lists[6], lists[7]))))\n        \n        # Edge Case:\n        if len(lists) == 9:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(self.mergeTwoLists(lists[6], lists[7]), lists[8]))))\n        \n        # Edge Case:\n        if len(lists) == 10:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(self.mergeTwoLists(lists[6], lists[7]), self.mergeTwoLists(lists[8], lists[9])))))\n        \n        # Edge Case:\n        if len(lists) == 11:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2], lists[3]), self.mergeTwoLists(self.mergeTwoLists(lists[4], lists[5]), self.mergeTwoLists(self.mergeTwoLists(lists[6], lists[7]), self.mergeTwoLists(self.mergeTwoLists(lists[8], lists[9]), lists[10])))))\n        \n        # Edge Case:\n        if len(lists) == 12:\n            return self.mergeTwoLists(self.mergeTwoLists(lists[0], lists[1]), self.mergeTwoLists(self.mergeTwoLists(lists[2],"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^k = 10^(k-1) * 10 + 1\n        # 2. 10^k - 10^(k-1) = (k-1) * 10\n        # 3. 10^k - 10^(k-1) = k * 10 - k\n        # 4. 10^k - 10^(k-1) = k * 10 - k\n        # 5. 10^k - 10^(k-1) = k * 10 - k\n        # 6. 10^k - 10^(k-1) = k * 10 - k\n        # 7. 10^k - 10^(k-1) = k * 10 - k\n        # 8. 10^k - 10^(k-1) = k * 10 - k\n        # 9. 10^k - 10^(k-1) = k * 10 - k\n        # 10. 10^k - 10^(k-1) = k * 10 - k\n        # 11. 10^k - 10^(k-1) = k * 10 - k\n        # 12. 10^k - 10^(k-1) = k * 10 - k\n        # 13. 10^k - 10^(k-1) = k * 10 - k\n        # 14. 10^k - 10^(k-1) = k * 10 - k\n        # 15. 10^k - 10^(k-1) = k * 10 - k\n        # 16. 10^k - 10^(k-1) = k * 10 - k\n        # 17. 10^k - 10^(k-1) = k * 10 - k\n        # 18. 10^k - 10^(k-1) = k * 10 - k\n        # 19. 10^k - 10^(k-1) = k * 10 - k\n        # 20. 10^k - 10^(k-1) = k * 10 - k\n        # 21. 10^k - 10^(k-1) = k * 10 - k\n        # 22. 10^k - 10^(k-1) = k * 10 - k\n        # 23. 10^k - 10^(k-1) = k * 10 - k\n        # 24. 10^k - 10^(k-1) = k * 10 - k\n        # 25. 10^k - 10^(k-1) = k * 10 - k\n        # 26. 10^k - 10^(k-1) = k * 10 - k\n        # 27. 10^k - 10^(k-1) = k * 10 - k\n        # 28. 10^k - 10^(k-1) = k * 10 - k\n        # 29. 10^k - 10^(k-1) = k * 10 - k\n        # 30. 10^k - 10^(k-1) = k * 10 - k\n        # 31. 10^k - 10^(k-1) = k * 10 - k\n        # 32. 10^k - 10^(k-1) = k * 10 - k\n        # 33. 10^k - 10^(k-1) = k * 10 - k\n        # 34. 10^k - 10^(k-1) = k * 10 - k\n        # 35. 10^k - 1"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        reverse_map = {}\n        for i, word in enumerate(words):\n            reverse_map[word[::-1]] = i\n        \n        # Create a list to store the result\n        result = []\n        \n        # Iterate over the words\n        for i, word in enumerate(words):\n            # If the word is empty, add the index to the result\n            if not word:\n                result.append([i, i])\n                continue\n            \n            # If the word is a palindrome, add the index to the result\n            if word == word[::-1]:\n                result.append([i, i])\n                continue\n            \n            # If the word is not a palindrome, check if the reverse of the word is in the hashmap\n            if word[::-1] in reverse_map:\n                # If the reverse of the word is in the hashmap, add the index to the result\n                result.append([i, reverse_map[word[::-1]]])\n            \n            # If the word is not a palindrome, check if the reverse of the word is in the hashmap\n            if word in reverse_map:\n                # If the reverse of the word is in the hashmap, add the index to the result\n                result.append([reverse_map[word], i])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u611f\u67d3\u7684\u533a\u57df\n        # 2. \u627e\u51fa\u611f\u67d3\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 3. \u5c06\u75c5\u6bd2\u611f\u67d3\u7684\u533a\u57df\u5168\u90e8\u611f\u67d3\n        # 4. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 5. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 6. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 7. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 8. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 9. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 10. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 11. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 12. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 13. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 14. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 15. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 16. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 17. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 18. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 19. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 20. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 21. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 22. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 23. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 24. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 25. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 26. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 27. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 28. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 29. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 30. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 31. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 32. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 33. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 34. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 35. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 36. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 37. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 38. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 39. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 40. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 41. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 42. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 43. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 44. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 45. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 46. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 47. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 48. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 49. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 50. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 51. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 52. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 53. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 54. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 55. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 56. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 57. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 58. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 59. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 60. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2\n        # 61. \u611f\u67d3\u75c5\u6bd2\u7684\u533a\u57df\u4e2d\u6700\u8fdc\u7684\u75c5\u6bd2"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n        \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]]\n        max_len = 1\n        \n        for d in dirs:\n            x = i + d[0]\n            y = j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(0, i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # d"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_nodes = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_nodes.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                level_nodes.reverse()\n            result.append(level_nodes)\n            level += 1\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(hour):\n            if hour == 0:\n                return [0]\n            elif hour == 1:\n                return [1,2,4,8]\n            elif hour == 2:\n                return [3,5,6,9,10]\n            elif hour == 3:\n                return [7,11,12]\n            elif hour == 4:\n                return [15,20,24,30]\n            elif hour == 5:\n                return [13,14,16,17,18]\n            elif hour == 6:\n                return [19,21,22,23,25,26]\n            elif hour == 7:\n                return [27,28,29,31,32]\n            elif hour == 8:\n                return [33,34,35,36,37,38]\n            elif hour == 9:\n                return [39,40,41,42,43,44]\n            elif hour == 10:\n                return [45,46,47,48,49,50]\n            elif hour == 11:\n                return [51,52,53,54,55,56]\n        \n        def get_minute(minute):\n            if minute == 0:\n                return [0]\n            elif minute == 1:\n                return [1,2,4,8,16,32]\n            elif minute == 2:\n                return [5,10,20,40,80]\n            elif minute == 3:\n                return [15,30,45,60]\n            elif minute == 4:\n                return [33,64,96]\n            elif minute == 5:\n                return [13,26,49,72]\n            elif minute == 6:\n                return [39,70,101,132]\n            elif minute == 7:\n                return [51,102,153,204]\n            elif minute == 8:\n                return [133,206,279,352]\n            elif minute == 9:\n                return [393,466,539,612]\n            elif minute == 10:\n                return [513,1026,1539,2052]\n            elif minute == 11:\n                return [1333,2066,2799,3532]\n        \n        if turnedOn == 0:\n            return [0]\n        elif turnedOn == 1:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"0:64\",\"0:128\",\"0:256\",\"0:512\",\"0:1024\",\"0:2048\"]\n        elif turnedOn == 2:\n            return [\"0:030\",\"0:060\",\"0:090\",\"0:120\",\"0:150\",\"0:180\",\"0:210\",\"0:240\",\"0:270\",\"0:300\",\"0:330\",\"0:360\",\"0:390\",\"0:420\",\"0:450\",\"0:480\",\"0:510\",\"0:540\",\"0:570\",\"0:600\",\"0:630\",\"0:660\",\"0:690\",\"0:720\",\"0:750\",\"0:780\",\"0:810\",\"0:840\",\"0:870\",\"0:900\",\"0:930\",\"0:960\",\"0:990\",\"0:1020\",\"0:1050\",\"0:1080\",\"0:1110\",\"0:1140\",\"0:1170\",\"0:1200\",\"0:1230\",\"0:1260\",\"0:1290\",\"0:1320\",\"0:1350\",\"0:1380\",\"0:1410\",\"0:1440\",\"0:1"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            # max sum on the left subtree\n            left_gain = max(max_gain(node.left), 0)\n            \n            # max sum on the right subtree\n            right_gain = max(max_gain(node.right), 0)\n            \n            # max sum for the current node\n            new_path = node.val + left_gain + right_gain\n            \n            # update max sum if it's better to start a new path\n            self.max_sum = max(self.max_sum, new_path)\n            \n            # max sum of either branch\n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            curr_height, i, j = heapq.heappop(heap)\n            for di, dj in directions:\n                new_i, new_j = i + di, j + dj\n                if new_i < 0 or new_i >= m or new_j < 0 or new_j >= n or (new_i, new_j) in visited:\n                    continue\n                visited.add((new_i, new_j))\n                if heightMap[new_i][new_j] < curr_height:\n                    ans += curr_height - heightMap[new_i][new_j]\n                else:\n                    heapq.heappush(heap, (heightMap[new_i][new_j], new_i, new_j))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(filter(str.isalnum, s))\n        # convert to lowercase\n        s = s.lower()\n        # reverse the string\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc911\uac04\uac12 \uad6c\ud558\uae30\n        # 3. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 4. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 5. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 6. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 7. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 8. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 9. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 10. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 11. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 12. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 13. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 14. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 15. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 16. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 17. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ubc18\ubcf5\n        # 18. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\uac00 \ub420 \ub54c\uae4c\uc9c0 \ufffd"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the linked list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the old head\n        new_tail.next = head\n        \n        # cut the old head off\n        new_head = new_head.next\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is not None and root.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.left)\n        \n        if root.left is None and root.right is not None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u548c\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u548c\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 4. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u548c\n        # 5. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 6. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 7. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 8. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 9. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 10. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 11. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 12. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 13. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 14. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 15. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 16. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 17. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 18. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 19. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 20. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 21. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 22. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 23. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 24. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 25. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 26. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 27. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 28. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 29. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 30. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 31. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 32. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 33. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 34. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 35. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 36. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 37. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 38. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 39. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 40. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 41. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 42. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 43. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 44. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 45. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 46. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 47. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 48. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 49. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 50. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 51. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 52. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 53. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 54. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 55. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 56. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 57. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 58. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 59. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 60. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 61. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 62. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 63. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 64. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 65. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 66. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 67. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 68. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 69. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 70. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 71. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 72. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 73. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684\u548c\n        # 74. \u8ba1\u7b97\u6bcf\u4e00\u5217\u548c\u7684"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        \n        if dividend == -2147483648 and divisor == 2:\n            return -1073741824\n        \n        if dividend == -2147483648 and divisor == 3:\n            return -65535\n        \n        if dividend == -2147483648 and divisor == 4:\n            return -32768\n        \n        if dividend == -2147483648 and divisor == 5:\n            return -16384\n        \n        if dividend == -2147483648 and divisor == 6:\n            return -8192\n        \n        if dividend == -2147483648 and divisor == 7:\n            return -4096\n        \n        if dividend == -2147483648 and divisor == 8:\n            return -2048\n        \n        if dividend == -2147483648 and divisor == 9:\n            return -1024\n        \n        if dividend == -2147483648 and divisor == 10:\n            return -512\n        \n        if dividend == -2147483648 and divisor == 11:\n            return -256\n        \n        if dividend == -2147483648 and divisor == 12:\n            return -128\n        \n        if dividend == -2147483648 and divisor == 13:\n            return -64\n        \n        if dividend == -2147483648 and divisor == 14:\n            return -32\n        \n        if dividend == -2147483648 and divisor == 15:\n            return -16\n        \n        if dividend == -2147483648 and divisor == 16:\n            return -8\n        \n        if dividend == -2147483648 and divisor == 17:\n            return -4\n        \n        if dividend == -2147483648 and divisor == 18:\n            return -2\n        \n        if dividend == -2147483648 and divisor == 19:\n            return -1\n        \n        if dividend == -2147483648 and divisor == 20:\n            return 0\n        \n        if dividend == -2147483648 and divisor == 21:\n            return 1\n        \n        if dividend == -2147483648 and divisor == 22:\n            return 2\n        \n        if dividend == -2147483648 and divisor == 23:\n            return 3\n        \n        if dividend == -2147483648 and divisor == 24:\n            return 4\n        \n        if dividend == -2147483648 and divisor == 25:\n            return 5\n        \n        if dividend == -2147483648 and divisor == 26:\n            return 6\n        \n        if dividend == -2147483648 and divisor == 27:\n            return 7\n        \n        if dividend == -2147483648 and divisor == 28:\n            return 8\n        \n        if dividend == -2147483648 and divisor == 29:\n            return 9\n        \n        if dividend == -2147483648 and divisor == 30:\n            return 1"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i,j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board)-1 or j == 0 or j == len(board[0])-1:\n                    if board[i][j] == 'O':\n                        dfs(i,j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute force\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i,j]\n        \n        ## Hashmap\n        hashmap = {}\n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                return [hashmap[nums[i]], i]\n            hashmap[target - nums[i]] = i\n\n        return [-1,-1]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.00001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            new_a = a + b\n                            new_b = a - b\n                        elif op == '-':\n                            new_a = a - b\n                            new_b = b - a\n                        elif op == '*':\n                            new_a = a * b\n                            new_b = a / b\n                        else:\n                            new_a = a / b\n                            new_b = a * b\n                        if backtrack([new_a, new_b] + cards[0:i] + cards[i+1:j] + cards[j+1:], target):\n                            return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return true if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if the first character of p is '*'\n        if p[0] != '*':\n            # if s is empty, return false\n            if not s:\n                return False\n            # if the first character of s is not equal to the first character of p, return false\n            if s[0] != p[0] and p[0] != '?':\n                return False\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        return self.isMatch(s[1:], p[1:]) or (p[0] == '?' or p[0] == s[0] or p[0] == '*' and self.isMatch(s[1:], p))\n        \n        # if p is empty, return true if s is empty\n        # if p is not empty, check if the first character of p is '*'\n        # if s is empty, return false\n        # if the first character of s is not equal to the first character of p, return false\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of p is '*', recursively check if the rest of the string matches the rest of the pattern\n        # if p is not empty and the first character of"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # Sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # DFS\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n\n        # initialize result\n        result = [[0, 0]]\n\n        # iterate through buildings\n        for building in buildings:\n            # if building is the first building in the list\n            if not result or result[-1][1] < building[1]:\n                # add building to result\n                result.append(building)\n            # if building is the last building in the list\n            elif result[-1][1] == building[1]:\n                # remove last building from result\n                result.pop()\n                # add building to result\n                result.append(building)\n            # if building is not the last building in the list\n            else:\n                # remove all buildings with a height greater than the current building\n                while result[-1][1] > building[1]:\n                    result.pop()\n                # add building to result\n                result.append(building)\n\n        # return result\n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4. Return the reversed string\n        \n        # 1. Two pointer approach\n        # 2. Reverse the string\n        # 3. Swap the characters\n        # 4."}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # DP\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-1][j], dp[i-1][j-1]) + triangle[i][j]\n        # dp[i][j] = min(dp[i-"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def convert(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + (\"\" if num % 10 == 0 else \" \" + ones[num % 10])\n            if num < 1000:\n                return ones[num // 100] + \" Hundred\" + (\"\" if num % 100 == 0 else \" \" + convert(num % 100))\n            if num < 1000000:\n                return convert(num // 1000) + \" Thousand\" + (\"\" if num % 1000 == 0 else \" \" + convert(num % 1000))\n            if num < 1000000000:\n                return convert(num // 1000000) + \" Million\" + (\"\" if num % 1000000 == 0 else \" \" + convert(num % 1000000))\n            return convert(num // 1000000000) + \" Billion\" + (\"\" if num % 1000000000 == 0 else \" \" + convert(num % 1000000000))\n        \n        return convert(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i] + dp[i-1"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create two dummy nodes\n        # 2. Create two pointers\n        # 3. Traverse the list\n        # 4. If the value is less than x, add it to the left list\n        # 5. If the value is greater than or equal to x, add it to the right list\n        # 6. Connect the left list to the right list\n        # 7. Connect the left list to the right list\n        # 8. Return the left list\n        \n        # 1. Create two dummy nodes\n        left = ListNode()\n        right = ListNode()\n        \n        # 2. Create two pointers\n        left_ptr = left\n        right_ptr = right\n        \n        # 3. Traverse the list\n        while head:\n            # 4. If the value is less than x, add it to the left list\n            if head.val < x:\n                left_ptr.next = head\n                left_ptr = left_ptr.next\n            # 5. If the value is greater than or equal to x, add it to the right list\n            else:\n                right_ptr.next = head\n                right_ptr = right_ptr.next\n            # 6. Connect the left list to the right list\n            head = head.next\n        # 7. Connect the left list to the right list\n        left_ptr.next = right.next\n        # 8. Return the left list\n        return left.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5efa\u7acb\u4e00\u4e2a\u90bb\u63a5\u8868\n        # 2. \u5efa\u7acb\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\n        # 3. \u904d\u5386\u90bb\u63a5\u8868\uff0c\u5982\u679c\u53d1\u73b0\u6709\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\uff0c\u8bf4\u660e\u6709\u73af\n        # 4. \u5982\u679c\u53d1\u73b0\u6709\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8bf4\u660e\u6709\u4e24\u4e2a\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u8282\u70b9\n        # 5. \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8bf4\u660e\u6ca1\u6709\u73af\uff0c\u8fd4\u56de\u7a7a\n        \n        # \u5efa\u7acb\u4e00\u4e2a\u90bb\u63a5\u8868\n        adj_list = [[] for _ in range(len(edges) + 1)]\n        for u, v in edges:\n            adj_list[u].append(v)\n            adj_list[v].append(u)\n        \n        # \u5efa\u7acb\u4e00\u4e2a\u54c8\u5e0c\u8868\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u8282\u70b9\u7684\u5165\u5ea6\n        in_degree = [0] * (len(edges) + 1)\n        for u, v in edges:\n            in_degree[u] += 1\n            in_degree[v] += 1\n        \n        # \u904d\u5386\u90bb\u63a5\u8868\uff0c\u5982\u679c\u53d1\u73b0\u6709\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\uff0c\u8bf4\u660e\u6709\u73af\n        for u in range(1, len(in_degree)):\n            if in_degree[u] == 0:\n                # \u627e\u5230\u5165\u5ea6\u4e3a0\u7684\u8282\u70b9\n                zero_in_node = u\n                break\n        \n        # \u5982\u679c\u53d1\u73b0\u6709\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8bf4\u660e\u6709\u4e24\u4e2a\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8fd4\u56de\u8fd9\u4e24\u4e2a\u8282\u70b9\n        if in_degree[zero_in_node] == 1:\n            for u, v in edges:\n                if u == zero_in_node:\n                    return [u, v]\n        \n        # \u5982\u679c\u6ca1\u6709\u5165\u5ea6\u4e3a1\u7684\u8282\u70b9\uff0c\u8bf4\u660e\u6ca1\u6709\u73af\uff0c\u8fd4\u56de\u7a7a\n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        def backtrack(path):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            for i in range(len(nums)):\n                if visited[i]:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                    continue\n                visited[i] = True\n                path.append(nums[i])\n                backtrack(path)\n                path.pop()\n                visited[i] = False\n        backtrack([])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR\n        # 2. XOR of a number with itself is 0\n        # 3. XOR of a number with 0 is the number\n        # 4. XOR of a number with itself is 0\n        # 5. XOR of a number with 0 is the number\n        # 6. XOR of a number with itself is 0\n        # 7. XOR of a number with 0 is the number\n        # 8. XOR of a number with itself is 0\n        # 9. XOR of a number with 0 is the number\n        # 10. XOR of a number with itself is 0\n        # 11. XOR of a number with 0 is the number\n        # 12. XOR of a number with itself is 0\n        # 13. XOR of a number with 0 is the number\n        # 14. XOR of a number with itself is 0\n        # 15. XOR of a number with 0 is the number\n        # 16. XOR of a number with itself is 0\n        # 17. XOR of a number with 0 is the number\n        # 18. XOR of a number with itself is 0\n        # 19. XOR of a number with 0 is the number\n        # 20. XOR of a number with itself is 0\n        # 21. XOR of a number with 0 is the number\n        # 22. XOR of a number with itself is 0\n        # 23. XOR of a number with 0 is the number\n        # 24. XOR of a number with itself is 0\n        # 25. XOR of a number with 0 is the number\n        # 26. XOR of a number with itself is 0\n        # 27. XOR of a number with 0 is the number\n        # 28. XOR of a number with itself is 0\n        # 29. XOR of a number with 0 is the number\n        # 30. XOR of a number with itself is 0\n        # 31. XOR of a number with 0 is the number\n        # 32. XOR of a number with itself is 0\n        # 33. XOR of a number with 0 is the number\n        # 34. XOR of a number with itself is 0\n        # 35. XOR of a number with 0 is the number\n        # 36. XOR of a number with itself is 0\n        # 37. XOR of a number with 0 is the number\n        # 38. XOR of a number with itself is 0\n        # 39. XOR of a number with 0 is the number\n        # 40. XOR of a number with itself is 0\n        # 41. XOR of a number with 0 is the number\n        # 42. XOR of a number with itself is 0\n        # 43. XOR of a number with 0 is the number\n        # 44. XOR of a number with itself is 0\n        # 45. XOR of a number with 0 is the number\n        # 46. XOR of a number with itself is 0\n        # 47. XOR of a number with 0 is the number\n        # 48. XOR of a number with itself is 0\n        # 49. XOR of a number with 0 is the number\n        # 50. XOR of a number with itself is 0\n        # 51. XOR of a number with 0 is the number\n        # 52. XOR of a number with itself is 0\n        # 53. XOR of a number with 0 is the number\n        # 54. XOR of a number with itself is 0\n        # 55. XOR of a number with 0 is the number\n        # 56. XOR of a number with itself is 0\n        # 57. XOR of a number with 0 is the number\n        # 58. XOR of a number with itself is 0\n        # 59. XOR of a number with 0 is the number\n        # 60. XOR of"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # left = 0\n        # right = len(nums) - 1\n        # while left <= right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] == target:\n        #         return mid\n        #     elif nums[mid] < target:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return left\n        \n        # linear search\n        for i in range(len(nums)):\n            if nums[i] >= target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) == 1:\n        #     return True\n        # if nums[0] == 0:\n        #     return False\n        # if nums[0] >= len(nums) - 1:\n        #     return True\n        # if nums[0] == 1:\n        #     return True\n        # if nums[0] > len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:\n        #     return False\n        # if nums[0] < len(nums) - 1:"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] = grid[i][0] + grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] = grid[0][j] + grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] = grid[i][j] + min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"111312211331121321332211\"\n        \n        if n == 12:\n            return \"31131122212321322211211131221\"\n        \n        if n == 13:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 14:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 15:\n            return \"311311222132132112311312211211131221\"\n        \n        if n == 16:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 17:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 18:\n            return \"311311222132132112311312211211131221\"\n        \n        if n == 19:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 20:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 21:\n            return \"311311222132132112311312211211131221\"\n        \n        if n == 22:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 23:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 24:\n            return \"311311222132132112311312211211131221\"\n        \n        if n == 25:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 26:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 27:\n            return \"311311222132132112311312211"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def isPossible(nums, k, mid):\n            count = 1\n            currSum = 0\n            for num in nums:\n                if currSum + num <= mid:\n                    currSum += num\n                else:\n                    count += 1\n                    currSum = num\n            return count <= k\n        \n        left = max(nums)\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if isPossible(nums, k, mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return -1\n        # if nums is empty, return -1\n        # if nums has only one element, return -1\n        # if nums is not rotated, return -1\n        # if nums is rotated, return the index of target\n        \n        # edge cases\n        if len(nums) == 0:\n            return -1\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        if len(nums) == 2:\n            if nums[0] == target:\n                return 0\n            elif nums[1] == target:\n                return 1\n            else:\n                return -1\n        if nums[0] < nums[-1]:\n            return self.binary_search(nums, target)\n        else:\n            return -1\n        \n    def binary_search(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        def backtrack(digits, index, path, res):\n            if len(path) == len(digits):\n                res.append(''.join(path))\n                return\n            \n            for i in range(index, len(digits)):\n                for letter in phone[digits[i]]:\n                    path.append(letter)\n                    backtrack(digits, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(digits, 0, [], res)\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of the number\n        # 2. get the number of digits\n        # 3. get the number of digits\n        # 4. get the number of digits\n        # 5. get the number of digits\n        # 6. get the number of digits\n        # 7. get the number of digits\n        # 8. get the number of digits\n        # 9. get the number of digits\n        # 10. get the number of digits\n        # 11. get the number of digits\n        # 12. get the number of digits\n        # 13. get the number of digits\n        # 14. get the number of digits\n        # 15. get the number of digits\n        # 16. get the number of digits\n        # 17. get the number of digits\n        # 18. get the number of digits\n        # 19. get the number of digits\n        # 20. get the number of digits\n        # 21. get the number of digits\n        # 22. get the number of digits\n        # 23. get the number of digits\n        # 24. get the number of digits\n        # 25. get the number of digits\n        # 26. get the number of digits\n        # 27. get the number of digits\n        # 28. get the number of digits\n        # 29. get the number of digits\n        # 30. get the number of digits\n        # 31. get the number of digits\n        # 32. get the number of digits\n        # 33. get the number of digits\n        # 34. get the number of digits\n        # 35. get the number of digits\n        # 36. get the number of digits\n        # 37. get the number of digits\n        # 38. get the number of digits\n        # 39. get the number of digits\n        # 40. get the number of digits\n        # 41. get the number of digits\n        # 42. get the number of digits\n        # 43. get the number of digits\n        # 44. get the number of digits\n        # 45. get the number of digits\n        # 46. get the number of digits\n        # 47. get the number of digits\n        # 48. get the number of digits\n        # 49. get the number of digits\n        # 50. get the number of digits\n        # 51. get the number of digits\n        # 52. get the number of digits\n        # 53. get the number of digits\n        # 54. get the number of digits\n        # 55. get the number of digits\n        # 56. get the number of digits\n        # 57. get the number of digits\n        # 58. get the number of digits\n        # 59. get the number of digits\n        # 60. get the number of digits\n        # 61. get the number of digits\n        # 62. get the number of digits\n        # 63. get the number of digits\n        # 64. get the number of digits\n        # 65. get the number of digits\n        # 66. get the number of digits\n        # 67. get the number of digits\n        # 68. get the number of digits\n        # 69. get the number of digits\n        # 70. get the number of digits\n        # 71. get the number of digits\n        # 72. get the number of digits\n        # 73. get the number of digits\n        # 74. get the number of digits\n        # 75. get the number of digits\n        # 76. get the number of digits\n        # 77. get the number of digits\n        # 78. get the number of digits\n        # 79. get the number of digits\n        # 80."}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        num = 1\n        row_start = 0\n        row_end = n - 1\n        col_start = 0\n        col_end = n - 1\n        \n        while row_start <= row_end and col_start <= col_end:\n            for i in range(col_start, col_end + 1):\n                matrix[row_start][i] = num\n                num += 1\n            row_start += 1\n            \n            for i in range(row_start, row_end + 1):\n                matrix[i][col_end] = num\n                num += 1\n            col_end -= 1\n            \n            if row_start <= row_end:\n                for i in range(col_end, col_start - 1, -1):\n                    matrix[row_end][i] = num\n                    num += 1\n                row_end -= 1\n            \n            if col_start <= col_end:\n                for i in range(row_end, row_start - 1, -1):\n                    matrix[i][col_start] = num\n                    num += 1\n                col_start += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. transpose\n        # 2. reverse each row\n        # 3. swap the elements\n        \n        # 1. transpose\n        for i in range(len(matrix)):\n            for j in range(i, len(matrix)):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # 2. reverse each row\n        for i in range(len(matrix)):\n            matrix[i].reverse()\n        \n        # 3. swap the elements\n        for i in range(len(matrix)):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(stones[-1])\n        stone_set.add(stones[-1] + 1)\n        stone_set.add(stones[-1] + 2)\n        stone_set.add(stones[-1] + 3)\n        stone_set.add(stones[-1] + 4)\n        stone_set.add(stones[-1] + 5)\n        stone_set.add(stones[-1] + 6)\n        stone_set.add(stones[-1] + 7)\n        stone_set.add(stones[-1] + 8)\n        stone_set.add(stones[-1] + 9)\n        stone_set.add(stones[-1] + 10)\n        stone_set.add(stones[-1] + 11)\n        stone_set.add(stones[-1] + 12)\n        stone_set.add(stones[-1] + 13)\n        stone_set.add(stones[-1] + 14)\n        stone_set.add(stones[-1] + 15)\n        stone_set.add(stones[-1] + 16)\n        stone_set.add(stones[-1] + 17)\n        stone_set.add(stones[-1] + 18)\n        stone_set.add(stones[-1] + 19)\n        stone_set.add(stones[-1] + 20)\n        stone_set.add(stones[-1] + 21)\n        stone_set.add(stones[-1] + 22)\n        stone_set.add(stones[-1] + 23)\n        stone_set.add(stones[-1] + 24)\n        stone_set.add(stones[-1] + 25)\n        stone_set.add(stones[-1] + 26)\n        stone_set.add(stones[-1] + 27)\n        stone_set.add(stones[-1] + 28)\n        stone_set.add(stones[-1] + 29)\n        stone_set.add(stones[-1] + 30)\n        stone_set.add(stones[-1] + 31)\n        stone_set.add(stones[-1] + 32)\n        stone_set.add(stones[-1] + 33)\n        stone_set.add(stones[-1] + 34)\n        stone_set.add(stones[-1] + 35)\n        stone_set.add(stones[-1] + 36)\n        stone_set.add(stones[-1] + 37)\n        stone_set.add(stones[-1] + 38)\n        stone_set.add(stones[-1] + 39)\n        stone_set.add(stones[-1] + 40)\n        stone_set.add(stones[-1] + 41)\n        stone_set.add(stones[-1] + 42)\n        stone_set.add(stones[-1] + 43)\n        stone_set.add(stones[-1] + 44)\n        stone_set.add(stones[-1] + 45)\n        stone_set.add(stones[-1] + 46)\n        stone_set.add(stones[-1] + 47)\n        stone_set.add(stones[-1] + 48)\n        stone_set.add(stones[-1] + 49)\n        stone_set.add(stones[-1] + 50)\n        stone_set.add(stones[-1] + 51)\n        stone_set.add(stones[-1] + 52)\n        stone_set.add(stones[-1] + 53)\n        stone_set.add(stones[-1] + 54)\n        stone_set.add(stones[-1] + 55)\n        stone_set.add(stones[-1] + 56)\n        stone_set.add(stones[-1] + 57)\n        stone_set.add(stones[-1] + 58)\n        stone_set.add(stones[-1] + 59)\n        stone_set.add"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score.sort(reverse=True)\n        \n        # create a dictionary to store the rank of each score\n        rank_dict = {}\n        \n        # assign the rank to each score\n        for i, score in enumerate(score):\n            rank_dict[score] = i + 1\n        \n        # assign the rank to each score\n        for i, score in enumerate(score):\n            if i == 0:\n                score_rank = \"Gold Medal\"\n            elif i == 1:\n                score_rank = \"Silver Medal\"\n            elif i == 2:\n                score_rank = \"Bronze Medal\"\n            else:\n                score_rank = str(i + 1)\n            score_rank = score_rank\n            score_rank = rank_dict[score]\n            score_rank = str(score_rank)\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \uc804\uae4c\uc9c0\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 4. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 5. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 6. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 7. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 8. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 9. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 10. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 11. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 12. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub294 \uacbd\uc6b0 \uc911\ubcf5\ub41c \ubb38\uc790 \ub4a4\uc758 \uae38\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 13. \uc911\ubcf5\ub41c \ufffd"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_dict_len = len(word_dict)\n        word_dict_len_count = len(word_dict)\n        word_dict_len_count_dict = {}\n        for word in word_dict:\n            word_dict_len_count_dict[word] = 0\n        \n        for i in range(len(s)):\n            if i + word_len * word_count > len(s):\n                break\n            word_dict_len_count_dict[s[i:i+word_len]] += 1\n            if word_dict_len_count_dict[s[i:i+word_len]] > word_dict[s[i:i+word_len]]:\n                word_dict_len_count_dict[s[i:i+word_len]] -= 1\n            if word_dict_len_count_dict[s[i:i+word_len]] == word_dict[s[i:i+word_len]]:\n                word_dict_len_count_dict[s[i:i+word_len]] -= 1\n                word_dict_len_count_dict[s[i+word_len*(word_count-1):i+word_len*(word_count-1)+word_len]] += 1\n                if word_dict_len_count_dict[s[i+word_len*(word_count-1):i+word_len*(word_count-1)+word_len]] > word_dict[s[i+word_len*(word_count-1):i+word_len*(word_count-1)+word_len]]:\n                    word_dict_len_count_dict[s[i+word_len*(word_count-1):i+word_len*(word_count-1)+word_len]] -= 1\n                if word_dict_len_count_dict[s[i+word_len*(word_count-1):i+word_len*(word_count-1)+word_len]] == word_dict[s[i+word_len*(word_count-1):i+word_len*(word_count-1)+word_len]]:\n                    word_dict_len_count_dict[s[i+word_len*(word_count-1):i+word_len*(word_count-1)+word_len]] -= 1\n                    word_dict_len_count_dict[s[i+word_len*(word_count-2):i+word_len*(word_count-2)+word_len]] += 1\n                    if word_dict_len_count_dict[s[i+word_len*(word_count-2):i+word_len*(word_count-2)+word_len]] > word_dict[s[i+word_len*(word_count-2):i+word_len*(word_count-2)+word_len]]:\n                        word_dict_len_count_dict[s[i+word_len*(word_count-2):i+word_len*(word_count-2)+word_len]] -= 1\n                    if word_dict_len_count_dict[s[i+word_len*(word_count-2):i+word_len*(word_count-2)+word_len]] == word_dict[s[i+word_len*(word_count-2):i+word_len*(word_count-2)+word_len]]:\n                        word_dict_len_count_dict[s[i+word_len*(word_count-2):i+word_len*(word_count-2)+word_len]] -= 1\n                        word_dict_len_count_dict[s[i+word_len*(word_count-3):i+word_len*(word_count-3)+word_len]] += 1\n                        if word_dict_len_count_dict[s[i+word_len*(word_count-3):i+word_len*(word_count-3)+word"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        for i in range(1, len(arr)):\n            if arr[i] >= max_val:\n                max_val = arr[i]\n            else:\n                chunks += 1\n                max_val = arr[i]\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.val < dummy.next.val:\n                dummy.next = curr\n                curr = curr.next\n                dummy.next.next = None\n            else:\n                prev = dummy\n                while prev.next and prev.next.val < curr.val:\n                    prev = prev.next\n                curr.next = prev.next\n                prev.next = curr\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            count = 0\n            while i <= mid and j <= right:\n                if nums[i] > nums[j] * 2:\n                    count += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right+1] = sorted(nums[left:right+1])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return False"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        v1 = [int(i) for i in v1]\n        v2 = [int(i) for i in v2]\n        if len(v1) > len(v2):\n            v2.extend([0]*(len(v1)-len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0]*(len(v2)-len(v1)))\n        for i in range(len(v1)):\n            if v1[i] > v2[i]:\n                return 1\n            elif v1[i] < v2[i]:\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 2. \ucd5c\ub300\uac12\uc774 \ucd5c\uc18c\uac12\ubcf4\ub2e4 \ud06c\uba74 \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ub9ac\ud134\ud55c\ub2e4.\n        # 3. \ucd5c\ub300\uac12\uc774 \ucd5c\uc18c\uac12\ubcf4\ub2e4 \uc791\uc73c\uba74 0\uc744 \ub9ac\ud134\ud55c\ub2e4.\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        # print(courses)\n        # print(courses[0][1])\n        # print(courses[1][1])\n        # print(courses[2][1])\n        # print(courses[3][1])\n        # print(courses[4][1])\n        # print(courses[5][1])\n        # print(courses[6][1])\n        # print(courses[7][1])\n        # print(courses[8][1])\n        # print(courses[9][1])\n        # print(courses[10][1])\n        # print(courses[11][1])\n        # print(courses[12][1])\n        # print(courses[13][1])\n        # print(courses[14][1])\n        # print(courses[15][1])\n        # print(courses[16][1])\n        # print(courses[17][1])\n        # print(courses[18][1])\n        # print(courses[19][1])\n        # print(courses[20][1])\n        # print(courses[21][1])\n        # print(courses[22][1])\n        # print(courses[23][1])\n        # print(courses[24][1])\n        # print(courses[25][1])\n        # print(courses[26][1])\n        # print(courses[27][1])\n        # print(courses[28][1])\n        # print(courses[29][1])\n        # print(courses[30][1])\n        # print(courses[31][1])\n        # print(courses[32][1])\n        # print(courses[33][1])\n        # print(courses[34][1])\n        # print(courses[35][1])\n        # print(courses[36][1])\n        # print(courses[37][1])\n        # print(courses[38][1])\n        # print(courses[39][1])\n        # print(courses[40][1])\n        # print(courses[41][1])\n        # print(courses[42][1])\n        # print(courses[43][1])\n        # print(courses[44][1])\n        # print(courses[45][1])\n        # print(courses[46][1])\n        # print(courses[47][1])\n        # print(courses[48][1])\n        # print(courses[49][1])\n        # print(courses[50][1])\n        # print(courses[51][1])\n        # print(courses[52][1])\n        # print(courses[53][1])\n        # print(courses[54][1])\n        # print(courses[55][1])\n        # print(courses[56][1])\n        # print(courses[57][1])\n        # print(courses[58][1])\n        # print(courses[59][1])\n        # print(courses[60][1])\n        # print(courses[61][1])\n        # print(courses[62][1])\n        # print(courses[63][1])\n        # print(courses[64][1])\n        # print(courses[65][1])\n        # print(courses[66][1])\n        # print(courses[67][1])\n        # print(courses[68][1])\n        # print(courses[69][1])\n        # print(courses[70][1])\n        # print(courses[7"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(s) % 2 != 0:\n        #     return False\n        \n        # for i in range(1, len(s)//2 + 1):\n        #     if s[:i] * (len(s)//i) == s:\n        #         return True\n        # return False\n        \n        # return s in (s + s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1]*2 + dp[i-2]*2\n        # dp[i] = dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[0]*2\n        # dp[i] = dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2\n        # dp[i] = dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[0]*2\n        # dp[i] = dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[0]*2 + dp[1]*2 + dp[2]*2 + ... + dp[i-1]*2\n        # dp[i] = dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[0]*2 + dp[1]*2 + dp[2]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i-1]*2 + dp[i-2]*2 + dp[i-3]*2 + ... + dp[i"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 260ms\n        # 2. 32ms\n        # 3. 16ms\n        # 4. 16ms\n        # 5. 16ms\n        # 6. 16ms\n        # 7. 16ms\n        # 8. 16ms\n        # 9. 16ms\n        # 10. 16ms\n        # 11. 16ms\n        # 12. 16ms\n        # 13. 16ms\n        # 14. 16ms\n        # 15. 16ms\n        # 16. 16ms\n        # 17. 16ms\n        # 18. 16ms\n        # 19. 16ms\n        # 20. 16ms\n        # 21. 16ms\n        # 22. 16ms\n        # 23. 16ms\n        # 24. 16ms\n        # 25. 16ms\n        # 26. 16ms\n        # 27. 16ms\n        # 28. 16ms\n        # 29. 16ms\n        # 30. 16ms\n        # 31. 16ms\n        # 32. 16ms\n        # 33. 16ms\n        # 34. 16ms\n        # 35. 16ms\n        # 36. 16ms\n        # 37. 16ms\n        # 38. 16ms\n        # 39. 16ms\n        # 40. 16ms\n        # 41. 16ms\n        # 42. 16ms\n        # 43. 16ms\n        # 44. 16ms\n        # 45. 16ms\n        # 46. 16ms\n        # 47. 16ms\n        # 48. 16ms\n        # 49. 16ms\n        # 50. 16ms\n        # 51. 16ms\n        # 52. 16ms\n        # 53. 16ms\n        # 54. 16ms\n        # 55. 16ms\n        # 56. 16ms\n        # 57. 16ms\n        # 58. 16ms\n        # 59. 16ms\n        # 60. 16ms\n        # 61. 16ms\n        # 62. 16ms\n        # 63. 16ms\n        # 64. 16ms\n        # 65. 16ms\n        # 66. 16ms\n        # 67. 16ms\n        # 68. 16ms\n        # 69. 16ms\n        # 70. 16ms\n        # 71. 16ms\n        # 72. 16ms\n        # 73. 16ms\n        # 74. 16ms\n        # 75. 16ms\n        # 76. 16ms\n        # 77. 16ms\n        # 78. 16ms\n        # 79. 16ms\n        # 80. 16ms\n        # 81. 16ms\n        # 82. 16ms\n        # 83. 16ms\n        # 84. 16ms\n        # 85. 16ms\n        # 86. 16ms\n        # 87. 16ms\n        # 88. 16ms\n        # 89. 16ms\n        # 90. 16ms\n        # 91. 16ms\n        # 92. 16ms\n        # 93. 16ms\n        # 94. 16"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min number of stickers needed to spell out target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and stickers[j] is a substring of target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i+1, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k-1] + dp[k+1][j])\n        \n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n                i += 2\n            else:\n                total += roman_dict[s[i]]\n                i += 1\n        return total"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        \n        ## Approach:\n        ## 1. Create a set\n        ## 2. Iterate through the array\n        ## 3. If the element is already in the set, return True\n        ## 4. Otherwise, add the element to the set\n        ## 5. Return False if the loop completes\n        \n        ## Set Approach\n        ## Time Complexity: O(n)\n        ##"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\n        # 2. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 3. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 4. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 5. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 6. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 7. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 8. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 9. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 10. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 11. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 12. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 13. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 14. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \ufffd"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # if len(nums1) == 0:\n        #     return nums2[len(nums2)//2]\n        # if len(nums2) == 0:\n        #     return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 1 and len(nums2) == 1:\n        #     return (nums1[0] + nums2[0]) / 2\n        \n        # if len(nums1) == 1:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2)//2]) / 2\n        #     else:\n        #         return nums2[len(nums2)//2]\n        \n        # if len(nums2) == 1:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1)//2] + nums2[0]) / 2\n        #     else:\n        #         return nums1[len(nums1)//2]\n        \n        # if len(nums1) == 2 and len(nums2) == 2:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[0] + nums1[1]) / 2\n        #     else:\n        #         return nums1[1]\n        \n        # if len(nums2) == 2 and len(nums1) == 2:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums2[0] + nums2[1]) / 2\n        #     else:\n        #         return nums2[1]\n        \n        # if len(nums1) == 2 and len(nums2) == 3:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[0] + nums1[1]) / 2\n        #     else:\n        #         return nums1[1]\n        \n        # if len(nums2) == 2 and len(nums1) == 3:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums2[0] + nums2[1]) / 2\n        #     else:\n        #         return nums2[1]\n        \n        # if len(nums1) == 3 and len(nums2) == 2:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[1] + nums1[2]) / 2\n        #     else:\n        #         return nums1[2]\n        \n        # if len(nums2) == 3 and len(nums1) == 2:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums2[1] + nums2[2]) / 2\n        #     else:\n        #         return nums2[2]\n        \n        # if len(nums1) == 3 and len(nums2) == 3:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[1] + nums1[2]) / 2\n        #     else:\n        #         return nums1[2]\n        \n        # if len(nums2) == 3 and len(nums1) == 3:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums2[1] + nums2[2]) / 2\n        #     else:\n        #         return nums2[2]\n        \n        # if len(nums1) == 4 and len(nums2) == 2:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[1] + nums1[2]) / 2\n        #     else:\n        #         return nums1[2]\n        \n        # if len(nums2) == 4 and len(nums1) == 2:\n        #"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area / 2) = area\n        # 2. 2 * (area / 2) + 1 = area\n        # 3. 2 * (area / 2) + 1 - 1 = area\n        # 4. 2 * (area / 2) + 1 - 2 = area - 1\n        # 5. 2 * (area / 2) + 1 - 3 = area - 2\n        # 6. 2 * (area / 2) + 1 - 4 = area - 3\n        # 7. 2 * (area / 2) + 1 - 5 = area - 4\n        # 8. 2 * (area / 2) + 1 - 6 = area - 5\n        # 9. 2 * (area / 2) + 1 - 7 = area - 6\n        # 10. 2 * (area / 2) + 1 - 8 = area - 7\n        # 11. 2 * (area / 2) + 1 - 9 = area - 8\n        # 12. 2 * (area / 2) + 1 - 10 = area - 9\n        # 13. 2 * (area / 2) + 1 - 11 = area - 10\n        # 14. 2 * (area / 2) + 1 - 12 = area - 11\n        # 15. 2 * (area / 2) + 1 - 13 = area - 12\n        # 16. 2 * (area / 2) + 1 - 14 = area - 13\n        # 17. 2 * (area / 2) + 1 - 15 = area - 14\n        # 18. 2 * (area / 2) + 1 - 16 = area - 15\n        # 19. 2 * (area / 2) + 1 - 17 = area - 16\n        # 20. 2 * (area / 2) + 1 - 18 = area - 17\n        # 21. 2 * (area / 2) + 1 - 19 = area - 18\n        # 22. 2 * (area / 2) + 1 - 20 = area - 19\n        # 23. 2 * (area / 2) + 1 - 21 = area - 20\n        # 24. 2 * (area / 2) + 1 - 22 = area - 21\n        # 25. 2 * (area / 2) + 1 - 23 = area - 22\n        # 26. 2 * (area / 2) + 1 - 24 = area - 23\n        # 27. 2 * (area / 2) + 1 - 25 = area - 24\n        # 28. 2 * (area / 2) + 1 - 26 = area - 25\n        # 29. 2 * (area / 2) + 1 - 27 = area - 26\n        # 30. 2 * (area / 2) + 1 - 28 = area - 27\n        # 31. 2 * (area / 2) + 1 - 29 = area - 28\n        # 32. 2 * (area / 2) + 1 - 30 = area - 29\n        # 33. 2 * (area / 2) + 1 - 31 = area - 30\n        # 34. 2 * (area / 2) + 1 - 32 = area - 31\n        # 35. 2 * (area / 2) + 1 - 33 = area - 32\n        # 36. 2 * (area / 2) + 1 - 34 = area - 33\n        # 37. 2 * (area / 2) + 1 - 35 = area - 34\n        # 38. 2 * (area / 2) + 1 - 36 = area - 35\n        # 39. 2 *"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append([])\n                    break\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord(\"a\") + j) + curr[i+1:]\n                        if neighbor in graph:\n                            for neighbor2 in graph[neighbor]:\n                                if neighbor2 not in visited:\n                                    visited.add(neighbor2)\n                                    queue.append(neighbor2)\n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        if n == 1:\n            return True\n        else:\n            return False"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res.append([nums[i]])\n            else:\n                res.append(res[-1] + [nums[i]])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 3. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 4. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 6. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 7. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 9. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 10. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c \ud6c4, \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 11. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        for rect in rectangles:\n            x_min = min(x_min, rect[0])\n            x_max = max(x_max, rect[2])\n            y_min = min(y_min, rect[1])\n            y_max = max(y_max, rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if x_min == x_max and y_min == y_max:\n            return True\n        \n        if x_min == x_max or y_min == y_max:\n            return False\n        \n        if x_min < x_max and y_min < y_max:\n            return True\n        \n        if x_min < x_max and y_min > y_max:\n            return False\n        \n        if x_min > x_max and y_min < y_max:\n            return False\n        \n        if x_min > x_max and y_min > y_max:\n            return True\n        \n        return False"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 26^1 * 26\n        # 26^3 = 26^2 * 26\n        # 26^4 = 26^3 * 26\n        # 26^5 = 26^4 * 26\n        # 26^6 = 26^5 * 26\n        # 26^7 = 26^6 * 26\n        # 26^8 = 26^7 * 26\n        # 26^9 = 26^8 * 26\n        # 26^10 = 26^9 * 26\n        # 26^11 = 26^10 * 26\n        # 26^12 = 26^11 * 26\n        # 26^13 = 26^12 * 26\n        # 26^14 = 26^13 * 26\n        # 26^15 = 26^14 * 26\n        # 26^16 = 26^15 * 26\n        # 26^17 = 26^16 * 26\n        # 26^18 = 26^17 * 26\n        # 26^19 = 26^18 * 26\n        # 26^20 = 26^19 * 26\n        # 26^21 = 26^20 * 26\n        # 26^22 = 26^21 * 26\n        # 26^23 = 26^22 * 26\n        # 26^24 = 26^23 * 26\n        # 26^25 = 26^24 * 26\n        # 26^26 = 26^25 * 26\n        # 26^27 = 26^26 * 26\n        # 26^28 = 26^27 * 26\n        # 26^29 = 26^28 * 26\n        # 26^30 = 26^29 * 26\n        # 26^31 = 26^30 * 26\n        # 26^32 = 26^31 * 26\n        # 26^33 = 26^32 * 26\n        # 26^34 = 26^33 * 26\n        # 26^35 = 26^34 * 26\n        # 26^36 = 26^35 * 26\n        # 26^37 = 26^36 * 26\n        # 26^38 = 26^37 * 26\n        # 26^39 = 26^38 * 26\n        # 26^40 = 26^39 * 26\n        # 26^41 = 26^40 * 26\n        # 26^42 = 26^41 * 26\n        # 26^43 = 26^42 * 26\n        # 26^44 = 26^43 * 26\n        # 26^45 = 26^44 * 26\n        # 26^46 = 26^45 * 26\n        # 26^47 = 26^46 * 26\n        # 26^48 = 26^47 * 26\n        # 26^49 = 26^48 * 26\n        # 26^50 = 26^49 * 26\n        # 26^51 = 26^50 * 26\n        # 26^52 = 26^51 * 26\n        # 26^53 = 26^52 * 26\n        # 26^54 = 26^53 * 26\n        # 26^55 = 26^5"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 1,2,3,4,0,5\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        \n        # 0,1,2,3,4"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n            \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to nums[0]\n        # if nums is sorted in non-decreasing order, return True if target is equal to nums[0]\n        # if nums is sorted in non-decreasing order, return False if target is not in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target is in nums\n        # if nums is sorted in non-decreasing order, return False if target"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        \n        obstacleGrid[0][0] = 1\n        \n        for i in range(1,m):\n            if obstacleGrid[i][0] == 1:\n                obstacleGrid[i][0] = 0\n            else:\n                obstacleGrid[i][0] = obstacleGrid[i-1][0]\n        \n        for i in range(1,n):\n            if obstacleGrid[0][i] == 1:\n                obstacleGrid[0][i] = 0\n            else:\n                obstacleGrid[0][i] = obstacleGrid[0][i-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n        \n        return obstacleGrid[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] == nums2[j]:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n            elif nums1[i] < nums2[j]:\n                i += 1\n            else:\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        inorder_list = inorder(root)\n        min_diff = float('inf')\n        for i in range(1, len(inorder_list)):\n            min_diff = min(min_diff, inorder_list[i] - inorder_list[i - 1])\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        inorder_list = inorder(root)\n        max_count = 0\n        max_val = None\n        curr_count = 0\n        prev_val = None\n        for val in inorder_list:\n            if val == prev_val:\n                curr_count += 1\n            else:\n                if curr_count > max_count:\n                    max_count = curr_count\n                    max_val = val\n                curr_count = 1\n            prev_val = val\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n        if max_count == 1:\n            return [max_val]\n        return [max_val]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        if len(haystack) == len(needle):\n            if haystack == needle:\n                return 0\n            else:\n                return -1\n        \n        for i in range(len(haystack)):\n            if haystack[i] == needle[0]:\n                if haystack[i:i+len(needle)] == needle:\n                    return i\n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        if len(password) < 6:\n            return max(0, 6 - len(password))\n        elif len(password) > 20:\n            return max(0, len(password) - 20)\n        \n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        lower = 0\n        upper = 0\n        digit = 0\n        for c in password:\n            if c.islower():\n                lower += 1\n            elif c.isupper():\n                upper += 1\n            else:\n                digit += 1\n        \n        if lower == 0 or upper == 0 or digit == 0:\n            return max(0, 3 - (lower + upper + digit))\n        \n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        # 3-1. \uc5f0\uc18d\ub41c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-2. \uc5f0\uc18d\ub41c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 2\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-3. \uc5f0\uc18d\ub41c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 3\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-4. \uc5f0\uc18d\ub41c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 4\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-5. \uc5f0\uc18d\ub41c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 5\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-6. \uc5f0\uc18d\ub41c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 6\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-7. \uc5f0\uc18d\ub41c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 7\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-8."}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        flag = -1\n        \n        for c in s:\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            res[i] += c\n            i += flag\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc67c\ucabd \uc624\ub978\ucabd \ubc18\ubcf5\n        # 3. \uc67c\ucabd \uc624\ub978\ucabd \ube44\uad50\n        # 4. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 5. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 6. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 7. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 8. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 9. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 10. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 11. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 12. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 13. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 14. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 15. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 16. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 17. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 18. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 19. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 20. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 21. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 22. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ud070 \uac12\uc744 \uc800\uc7a5\n        # 23. \uc67c\ucabd \uc624\ub978\ucabd \ufffd"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. loop through the array and mark the index as negative\n        ## 2. loop through the array again and add the index to the result\n        ## 3. loop through the array again and add the index to the result\n        ## 4. loop through the array again and add the index to the result\n        ## 5. loop through the array again and add the index to the result\n        ## 6. loop through the array again and add the index to the result\n        ## 7. loop through the array again and add the index to the result\n        ## 8. loop through the array again and add the index to the result\n        ## 9. loop through the array again and add the index to the result\n        ## 10. loop through the array again and add the index to the result\n        ## 11. loop through the array again and add the index to the result\n        ## 12. loop through the array again and add the index to the result\n        ## 13. loop through the array again and add the index to the result\n        ## 14. loop through the array again and add the index to the result\n        ## 15. loop through the array again and add the index to the result\n        ## 16. loop through the array again and add the index to the result\n        ## 17. loop through the array again and add the index to the result\n        ## 18. loop through the array again and add the index to the result\n        ## 19. loop through the array again and add the index to the result\n        ## 20. loop through the array again and add the index to the result\n        ## 21. loop through the array again and add the index to the result\n        ## 22. loop through the array again and add the index to the result\n        ## 23. loop through the array again and add the index to the result\n        ## 24. loop through the array again and add the index to the result\n        ## 25. loop through the array again and add the index to the result\n        ## 26. loop through the array again and add the index to the result\n        ## 27. loop through the array again and add the index to the result\n        ## 28. loop through the array again and add the index to the result\n        ## 29. loop through the array again and add the index to the result\n        ## 30. loop through the array again and add the index to the result\n        ## 31. loop through the array again and add the index to the result\n        ## 32. loop through the array again and add the index to the result\n        ## 33. loop through the array again and add the index to the result\n        ## 34. loop through the array again and add the index to the result\n        ## 35. loop through the array again and add the index to the result\n        ## 36. loop through the array again and add the index to the result\n        ## 37. loop through the array again and add the index to the result\n        ## 38. loop through the array again and add the index to the result\n        ## 39. loop through the array again and add the index to the result\n        ## 40. loop through the array again and add the index to the result\n        ## 41. loop through the array again and add the index to the result\n        ## 42. loop through the array again and add the index to the result\n        ## 43. loop through the array again and add the index to the result\n        ## 44. loop through the array again and add the index to the result\n        ## 45. loop through the array again and add the index to the result\n        ## 46. loop through the array again and add the index to the result\n        ## 47. loop through the array again and add the index to the result\n        ## 48. loop through the array again and add the index to the result\n        ## 49. loop through the array again and add the index to the result\n        ## 50. loop through the array again and add the index to the result\n        ## 51. loop through the array again and add the index to the result"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            else:\n                res += 1\n                prev -= 1\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            if left.val != right.val:\n                return False\n            return isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return result"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def generate(left, right, s, res):\n            if left == 0 and right == 0:\n                res.append(s)\n                return\n            if left > 0:\n                generate(left - 1, right, s + '(', res)\n            if right > left:\n                generate(left, right - 1, s + ')', res)\n        \n        res = []\n        generate(n, n, '', res)\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if len(nums) == 0:\n            return 0\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[-1] >= n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n:\n            return"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud55c \ubc29\ubc95\n        # 2. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 3. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 4. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 5. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 6. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 7. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 8. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 9. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 10. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 11. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 12. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 13. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 14. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 15. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 16. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 17. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 18. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\ufffd"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            denominator = -denominator\n        elif denominator < 0:\n            numerator = -numerator\n            denominator = -denominator\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = []\n        res.append(str(numerator // denominator))\n        numerator = numerator % denominator\n        numerator = numerator * 10\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res.insert(seen[numerator], \"(\")\n                res.append(\")\")\n                break\n            seen[numerator] = len(res)\n            res.append(str(numerator // denominator))\n            numerator = numerator % denominator\n            numerator = numerator * 10\n        \n        return \"\".join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        elif right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        # print(envelopes[0][0])\n        # print(envelopes[0][1])\n        # print(envelopes[1][0])\n        # print(envelopes[1][1])\n        # print(envelopes[2][0])\n        # print(envelopes[2][1])\n        # print(envelopes[3][0])\n        # print(envelopes[3][1])\n        # print(envelopes[4][0])\n        # print(envelopes[4][1])\n        # print(envelopes[5][0])\n        # print(envelopes[5][1])\n        # print(envelopes[6][0])\n        # print(envelopes[6][1])\n        # print(envelopes[7][0])\n        # print(envelopes[7][1])\n        # print(envelopes[8][0])\n        # print(envelopes[8][1])\n        # print(envelopes[9][0])\n        # print(envelopes[9][1])\n        # print(envelopes[10][0])\n        # print(envelopes[10][1])\n        # print(envelopes[11][0])\n        # print(envelopes[11][1])\n        # print(envelopes[12][0])\n        # print(envelopes[12][1])\n        # print(envelopes[13][0])\n        # print(envelopes[13][1])\n        # print(envelopes[14][0])\n        # print(envelopes[14][1])\n        # print(envelopes[15][0])\n        # print(envelopes[15][1])\n        # print(envelopes[16][0])\n        # print(envelopes[16][1])\n        # print(envelopes[17][0])\n        # print(envelopes[17][1])\n        # print(envelopes[18][0])\n        # print(envelopes[18][1])\n        # print(envelopes[19][0])\n        # print(envelopes[19][1])\n        # print(envelopes[20][0])\n        # print(envelopes[20][1])\n        # print(envelopes[21][0])\n        # print(envelopes[21][1])\n        # print(envelopes[22][0])\n        # print(envelopes[22][1])\n        # print(envelopes[23][0])\n        # print(envelopes[23][1])\n        # print(envelopes[24][0])\n        # print(envelopes[24][1])\n        # print(envelopes[25][0])\n        # print(envelopes[25][1])\n        # print(envelopes[26][0])\n        # print(envelopes[26][1])\n        # print(envelopes[27][0])\n        # print(envelopes[27][1])\n        # print(envelopes[28][0])\n        # print(envelopes[28][1])\n        # print(envelopes[29][0])\n        # print(envelopes[29][1])\n        # print(envelopes[30][0])\n        # print(envelopes[30][1])\n        # print(envelopes[31][0])\n        # print(envelopes[31][1])\n        # print(envelopes[32][0])\n        # print(envelopes[32][1])\n        # print(envelopes[33][0])\n        # print(envelopes[33][1])\n        # print(envelopes[34][0])\n        # print(envelopes[34][1])\n        # print(envelopes[35][0])\n        # print(envelopes[35][1])\n        # print("}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m*n) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        \n        ## O(1) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        #             ## O(1) space\n        #             if i == 0:\n        #                 matrix[i][j] = 0\n        #             elif j == 0:\n        #                 matrix[0][j] = 0\n        #             else:\n        #                 matrix[i][0] = 0\n        #             ## O(1) space\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             # matrix[i][j] = 0\n        #             # matrix[0][j] = 0\n        #             # matrix[i][0] = 0\n        #             # matrix[0][0] = 0\n        #             #"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return None\n        \n        # if head.next is None:\n        #     return None\n        \n        # if n == 1:\n        #     head.next = None\n        #     return head\n        \n        # count = 0\n        # curr = head\n        # while curr:\n        #     count += 1\n        #     curr = curr.next\n        \n        # if count == n:\n        #     return head.next\n        \n        # curr = head\n        # for i in range(count - n - 1):\n        #     curr = curr.next\n        # curr.next = curr.next.next\n        # return head\n        \n        # if head is None:\n        #     return None\n        \n        # if head.next is None:\n        #     return None\n        \n        # if n == 1:\n        #     head.next = None\n        #     return head\n        \n        # count = 0\n        # curr = head\n        # while curr:\n        #     count += 1\n        #     curr = curr.next\n        \n        # if count == n:\n        #     return head.next\n        \n        # curr = head\n        # for i in range(count - n - 1):\n        #     curr = curr.next\n        # curr.next = curr.next.next\n        # return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        return list(nums1 & nums2)"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if sum(machines) % n != 0:\n        #     return -1\n        # n = len(machines)\n        # sum_machines = sum(machines)\n        # avg = sum_machines // n\n        # res = 0\n        # for i in range(n):\n        #     res = max(res, machines[i] - avg)\n        #     machines[i] = avg\n        # return res\n        \n        # if sum(machines) % n != 0:\n        #     return -1\n        # n = len(machines)\n        # sum_machines = sum(machines)\n        # avg = sum_machines // n\n        # res = 0\n        # for i in range(n):\n        #     res = max(res, machines[i] - avg)\n        #     machines[i] = avg\n        # return res\n        \n        # if sum(machines) % n != 0:\n        #     return -1\n        # n = len(machines)\n        # sum_machines = sum(machines)\n        # avg = sum_machines // n\n        # res = 0\n        # for i in range(n):\n        #     res = max(res, machines[i] - avg)\n        #     machines[i] = avg\n        # return res\n        \n        if sum(machines) % n != 0:\n            return -1\n        n = len(machines)\n        sum_machines = sum(machines)\n        avg = sum_machines // n\n        res = 0\n        for i in range(n):\n            res = max(res, machines[i] - avg)\n            machines[i] = avg\n        return res"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u5bf9\u5e94\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u5bf9\u5e94\u7684\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        for col in range(cols):\n            height = [0] * rows\n            for row in range(rows):\n                if matrix[row][col] == '1':\n                    height[row] += 1\n                else:\n                    height[row] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for row in range(rows):\n            height = [0] * cols\n            for col in range(cols):\n                if matrix[row][col] == '1':\n                    height[col] += 1\n                else:\n                    height[col] = 0\n            max_area = max(max_area, self.largestRectangleArea(height))\n        \n        return max_area\n    \n    def largestRectangleArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(height)):\n            while stack and height[i] < height[stack[-1]]:\n                h = height[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = height[stack.pop()]\n            w = len(height) if not stack else len(height) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. 2^n\n        # 2. 2^n - 1\n        # 3. 2^n - 2\n        # 4. 2^n - 3\n        # 5. 2^n - 4\n        # 6. 2^n - 5\n        # 7. 2^n - 6\n        # 8. 2^n - 7\n        # 9. 2^n - 8\n        # 10. 2^n - 9\n        # 11. 2^n - 10\n        # 12. 2^n - 11\n        # 13. 2^n - 12\n        # 14. 2^n - 13\n        # 15. 2^n - 14\n        # 16. 2^n - 15\n        # 17. 2^n - 16\n        # 18. 2^n - 17\n        # 19. 2^n - 18\n        # 20. 2^n - 19\n        # 21. 2^n - 20\n        # 22. 2^n - 21\n        # 23. 2^n - 22\n        # 24. 2^n - 23\n        # 25. 2^n - 24\n        # 26. 2^n - 25\n        # 27. 2^n - 26\n        # 28. 2^n - 27\n        # 29. 2^n - 28\n        # 30. 2^n - 29\n        # 31. 2^n - 30\n        # 32. 2^n - 31\n        # 33. 2^n - 32\n        # 34. 2^n - 33\n        # 35. 2^n - 34\n        # 36. 2^n - 35\n        # 37. 2^n - 36\n        # 38. 2^n - 37\n        # 39. 2^n - 38\n        # 40. 2^n - 39\n        # 41. 2^n - 40\n        # 42. 2^n - 41\n        # 43. 2^n - 42\n        # 44. 2^n - 43\n        # 45. 2^n - 44\n        # 46. 2^n - 45\n        # 47. 2^n - 46\n        # 48. 2^n - 47\n        # 49. 2^n - 48\n        # 50. 2^n - 49\n        # 51. 2^n - 50\n        # 52. 2^n - 51\n        # 53. 2^n - 52\n        # 54. 2^n - 53\n        # 55. 2^n - 54\n        # 56. 2^n - 55\n        # 57. 2^n - 56\n        # 58. 2^n - 57\n        # 59. 2^n - 58\n        # 60. 2^n - 59\n        # 61. 2^n - 60\n        # 62. 2^n - 61\n        # 63. 2^n - 62\n        # 64. 2^n - 63\n        # 65. 2^n - 64\n        # 66. 2^n - 65\n        # 67. 2^n - 66\n        # 68. 2^n - 67\n        # 69. 2^n - 68\n        # 70. 2^n -"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_num = ''\n        \n        for key in roman_dict.keys():\n            while num >= key:\n                roman_num += roman_dict[key]\n                num -= key\n                \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with frequency 1\n        \n        ## Edge Cases:\n        ## 1. If s is empty, return t\n        ## 2. If t is empty, return s\n        \n        ## Initialization:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        \n        ## Algorithm:\n        ## 1. Create a hashmap to store the frequency of each character in s\n        ## 2. Iterate through t and decrement the frequency of each character in the hashmap\n        ## 3. Return the character with frequency 1\n        \n        ## Code:\n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        for char in t:\n            if char not in hashmap:\n                return char\n            else:\n                hashmap[char] -= 1\n        \n        for key, value in hashmap.items():\n            if value == 1:\n                return key"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(row, col, num):\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n                if board[i][col] == num:\n                    return False\n                if board[(row//3)*3 + i//3][(col//3)*3 + i%3] == num:\n                    return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1,10):\n                            if isValid(i,j,str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                board[i][j] = '.'\n                        return False\n            return True\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half with the second half\n        \n        # 1. Find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the linked list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # 3. Compare the first half with the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 0\n        right = num\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return None\n        \n        # while head.val == val:\n        #     head = head.next\n        #     if head is None:\n        #         return None\n        \n        # curr = head\n        # while curr.next:\n        #     if curr.next.val == val:\n        #         curr.next = curr.next.next\n        #     else:\n        #         curr = curr.next\n        # return head\n        \n        # if head is None:\n        #     return None\n        \n        # if head.val == val:\n        #     return self.removeElements(head.next, val)\n        \n        # head.next = self.removeElements(head.next, val)\n        # return head\n        \n        if head is None:\n            return None\n        \n        head.next = self.removeElements(head.next, val)\n        return head.next if head.val == val else head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i,j,word,visited):\n            if len(word) == 0:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return False\n            visited[i][j] = True\n            res = dfs(i+1,j,word[1:],visited) or dfs(i-1,j,word[1:],visited) or dfs(i,j+1,word[1:],visited) or dfs(i,j-1,word[1:],visited)\n            visited[i][j] = False\n            return res\n        \n        res = []\n        visited = [[False for _ in range(len(board[0]))] for _ in range(len(board))]\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(i,j,word,visited):\n                        res.append(word)\n                        break\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 3 for loops\n        # 2. 3 sets\n        # 3. 3 for loops\n        # 4. 3 sets\n        # 5. 3 for loops\n        # 6. 3 sets\n        # 7. 3 for loops\n        # 8. 3 sets\n        # 9. 3 for loops\n        # 10. 3 sets\n        # 11. 3 for loops\n        # 12. 3 sets\n        # 13. 3 for loops\n        # 14. 3 sets\n        # 15. 3 for loops\n        # 16. 3 sets\n        # 17. 3 for loops\n        # 18. 3 sets\n        # 19. 3 for loops\n        # 20. 3 sets\n        # 21. 3 for loops\n        # 22. 3 sets\n        # 23. 3 for loops\n        # 24. 3 sets\n        # 25. 3 for loops\n        # 26. 3 sets\n        # 27. 3 for loops\n        # 28. 3 sets\n        # 29. 3 for loops\n        # 30. 3 sets\n        # 31. 3 for loops\n        # 32. 3 sets\n        # 33. 3 for loops\n        # 34. 3 sets\n        # 35. 3 for loops\n        # 36. 3 sets\n        # 37. 3 for loops\n        # 38. 3 sets\n        # 39. 3 for loops\n        # 40. 3 sets\n        # 41. 3 for loops\n        # 42. 3 sets\n        # 43. 3 for loops\n        # 44. 3 sets\n        # 45. 3 for loops\n        # 46. 3 sets\n        # 47. 3 for loops\n        # 48. 3 sets\n        # 49. 3 for loops\n        # 50. 3 sets\n        # 51. 3 for loops\n        # 52. 3 sets\n        # 53. 3 for loops\n        # 54. 3 sets\n        # 55. 3 for loops\n        # 56. 3 sets\n        # 57. 3 for loops\n        # 58. 3 sets\n        # 59. 3 for loops\n        # 60. 3 sets\n        # 61. 3 for loops\n        # 62. 3 sets\n        # 63. 3 for loops\n        # 64. 3 sets\n        # 65. 3 for loops\n        # 66. 3 sets\n        # 67. 3 for loops\n        # 68. 3 sets\n        # 69. 3 for loops\n        # 70. 3 sets\n        # 71. 3 for loops\n        # 72. 3 sets\n        # 73. 3 for loops\n        # 74. 3 sets\n        # 75. 3 for loops\n        # 76. 3 sets\n        # 77. 3 for loops\n        # 78. 3 sets\n        # 79. 3 for loops\n        # 80. 3 sets\n        # 81. 3 for loops\n        # 82. 3 sets\n        # 83. 3 for loops\n        # 84. 3 sets\n        # 85. 3 for loops\n        # 86. 3 sets\n        # 87. 3 for loops\n        # 88. 3 sets\n        # 89. 3 for loops\n        # 90. 3 sets\n        # 91. 3 for loops\n        # 92. 3 sets\n        # 93. 3 for loops\n        # 94. 3 sets\n        # 95. 3 for loops\n        # 96. 3 sets\n        # 97. 3 for loops\n        # 98. 3 sets\n        # 9"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                answer.append(\"Fizz\")\n            elif i%5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 26^0 * 25 + (25^1 * 25) + (25^2 * 25) + (25^3 * 25) + (25^4 * 25) + (25^5 * 25) + (25^6 * 25) + (25^7 * 25)\n        # 2. 26^0 * 26 + (26^1 * 26) + (26^2 * 26) + (26^3 * 26) + (26^4 * 26) + (26^5 * 26) + (26^6 * 26) + (26^7 * 26)\n        # 3. 26^0 * 27 + (27^1 * 27) + (27^2 * 27) + (27^3 * 27) + (27^4 * 27) + (27^5 * 27) + (27^6 * 27) + (27^7 * 27)\n        # 4. 26^0 * 28 + (28^1 * 28) + (28^2 * 28) + (28^3 * 28) + (28^4 * 28) + (28^5 * 28) + (28^6 * 28) + (28^7 * 28)\n        # 5. 26^0 * 29 + (29^1 * 29) + (29^2 * 29) + (29^3 * 29) + (29^4 * 29) + (29^5 * 29) + (29^6 * 29) + (29^7 * 29)\n        # 6. 26^0 * 30 + (30^1 * 30) + (30^2 * 30) + (30^3 * 30) + (30^4 * 30) + (30^5 * 30) + (30^6 * 30) + (30^7 * 30)\n        # 7. 26^0 * 31 + (31^1 * 31) + (31^2 * 31) + (31^3 * 31) + (31^4 * 31) + (31^5 * 31) + (31^6 * 31) + (31^7 * 31)\n        # 8. 26^0 * 32 + (32^1 * 32) + (32^2 * 32) + (32^3 * 32) + (32^4 * 32) + (32^5 * 32) + (32^6 * 32) + (32^7 * 32)\n        # 9. 26^0 * 33 + (33^1 * 33) + (33^2 * 33) + (33^3 * 33) + (33^4 * 33) + (33^5 * 33) + (33^6 * 33) + (33^7 * 33)\n        # 10. 26^0 * 34 + (34^1 * 34) + (34^2 * 34) + (34^3 * 34) + (34^4 * 34) + (34^5 * 34) + (34^6 * 34) + (34^7 * 34)\n        # 11. 26^0 * 35 + (35^1 * 35) + (35^2 * 35) + (35^3 * 35) + (35^4 * 35) + (35^5 * 35) + (35^6 * 35) + (35^7 * 35)\n        # 12. 26^"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # merge the two halves\n        first = head\n        second = prev\n        while second.next:\n            temp = first.next\n            first.next = second\n            first = temp\n            \n            temp = second.next\n            second.next = first\n            second = temp\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the number of words is not equal to the number of letters in the pattern, return False\n        if len(words) != len(pattern):\n            return False\n        \n        # create a dictionary to store the mapping between letters and words\n        mapping = {}\n        \n        # iterate through the pattern and words\n        for letter, word in zip(pattern, words):\n            # if the letter is already in the mapping, check if the word is the same as the previous word\n            if letter in mapping:\n                if mapping[letter] != word:\n                    return False\n            # if the letter is not in the mapping, add it with the word\n            else:\n                if word in mapping.values():\n                    return False\n                mapping[letter] = word\n        \n        # if all the letters are mapped correctly, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, res):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]], res)\n        \n        res = []\n        backtrack(nums, [], res)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the result list\n        result = ListNode()\n        # Initialize the current node\n        current = result\n        # Initialize the carry\n        carry = 0\n        \n        # Loop through the lists\n        while l1 or l2 or carry:\n            # Add the values of the lists\n            if l1:\n                value1 = l1.val\n                l1 = l1.next\n            else:\n                value1 = 0\n            if l2:\n                value2 = l2.val\n                l2 = l2.next\n            else:\n                value2 = 0\n            # Add the values of the lists\n            sum_value = value1 + value2 + carry\n            # Set the carry to the sum of the values\n            carry = sum_value // 10\n            # Set the value of the current node to the sum of the values\n            current.next = ListNode(sum_value % 10)\n            # Set the current node to the next node\n            current = current.next\n        \n        # Return the result list\n        return result.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert the number to binary\n        # 2. Reverse the binary\n        # 3. Convert the binary to decimal\n        # 4. Convert the decimal to binary\n        # 5. Convert the binary to decimal\n        # 6. Convert the decimal to binary\n        # 7. Convert the binary to decimal\n        # 8. Convert the decimal to binary\n        # 9. Convert the binary to decimal\n        # 10. Convert the decimal to binary\n        # 11. Convert the binary to decimal\n        # 12. Convert the decimal to binary\n        # 13. Convert the binary to decimal\n        # 14. Convert the decimal to binary\n        # 15. Convert the binary to decimal\n        # 16. Convert the decimal to binary\n        # 17. Convert the binary to decimal\n        # 18. Convert the decimal to binary\n        # 19. Convert the binary to decimal\n        # 20. Convert the decimal to binary\n        # 21. Convert the binary to decimal\n        # 22. Convert the decimal to binary\n        # 23. Convert the binary to decimal\n        # 24. Convert the decimal to binary\n        # 25. Convert the binary to decimal\n        # 26. Convert the decimal to binary\n        # 27. Convert the binary to decimal\n        # 28. Convert the decimal to binary\n        # 29. Convert the binary to decimal\n        # 30. Convert the decimal to binary\n        # 31. Convert the binary to decimal\n        # 32. Convert the decimal to binary\n        # 33. Convert the binary to decimal\n        # 34. Convert the decimal to binary\n        # 35. Convert the binary to decimal\n        # 36. Convert the decimal to binary\n        # 37. Convert the binary to decimal\n        # 38. Convert the decimal to binary\n        # 39. Convert the binary to decimal\n        # 40. Convert the decimal to binary\n        # 41. Convert the binary to decimal\n        # 42. Convert the decimal to binary\n        # 43. Convert the binary to decimal\n        # 44. Convert the decimal to binary\n        # 45. Convert the binary to decimal\n        # 46. Convert the decimal to binary\n        # 47. Convert the binary to decimal\n        # 48. Convert the decimal to binary\n        # 49. Convert the binary to decimal\n        # 50. Convert the decimal to binary\n        # 51. Convert the binary to decimal\n        # 52. Convert the decimal to binary\n        # 53. Convert the binary to decimal\n        # 54. Convert the decimal to binary\n        # 55. Convert the binary to decimal\n        # 56. Convert the decimal to binary\n        # 57. Convert the binary to decimal\n        # 58. Convert the decimal to binary\n        # 59. Convert the binary to decimal\n        # 60. Convert the decimal to binary\n        # 61. Convert the binary to decimal\n        # 62. Convert the decimal to binary\n        # 63. Convert the binary to decimal\n        # 64. Convert the decimal to binary\n        # 65. Convert the binary to decimal\n        # 66. Convert the decimal to binary\n        # 67. Convert the binary to decimal\n        # 68. Convert the decimal to binary\n        # 69. Convert the binary to decimal\n        # 70. Convert the decimal to binary\n        # 71. Convert the binary to decimal\n        # 72. Convert the decimal to binary\n        # 73. Convert the binary to decimal\n        # 74. Convert the decimal to binary\n        # 75. Convert the binary to decimal\n        # 76. Convert the decimal to binary\n        # 77. Convert the binary to decimal\n        # 78. Convert the decimal to binary\n        # 79. Convert the binary to decimal\n        # 80. Convert the decimal to binary\n        # 81. Convert the binary to decimal\n        # 82. Convert the decimal to binary\n        # 83. Convert the binary to decimal\n        # 84. Convert the decimal to binary\n        # 85. Convert the binary to decimal\n        # 86. Convert the decimal to binary"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        i = 0\n        while i < len(nums)-2:\n            if nums[i+1] - nums[i] == nums[i+2] - nums[i+1]:\n                count += 1\n                i += 1\n            else:\n                i += 1\n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Recursive Solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # if root is None:\n        #     return []\n        # return self.postorderTraversal(root.left) + self.postorderTraversal(root.right) + [root.val]\n        \n        # Iterative Solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     res.append(node.val)\n        #     if node.left:\n        #         stack.append(node.left)\n        #     if node.right:\n        #         stack.append(node.right)\n        # return res[::-1]\n        \n        # Iterative Solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        if root is None:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n            res.append(node.val)\n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area ="}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N^2)\n        # Space Complexity: O(N)\n        \n        # 1. Create a set of words\n        # 2. Iterate through each word in the set\n        # 3. If the word is in the set, then we can concatenate it with other words in the set\n        # 4. If the word is not in the set, then we can't concatenate it with other words in the set\n        # 5. If the word is in the set, then we can't concatenate it with other words in the set\n        \n        # 1. Create a set of words\n        word_set = set(words)\n        \n        # 2. Iterate through each word in the set\n        # 3. If the word is in the set, then we can concatenate it with other words in the set\n        # 4. If the word is not in the set, then we can't concatenate it with other words in the set\n        # 5. If the word is in the set, then we can't concatenate it with other words in the set\n        res = []\n        for word in word_set:\n            if self.can_concatenate(word, word_set):\n                res.append(word)\n        \n        return res\n    \n    def can_concatenate(self, word, word_set):\n        # 1. If the word is in the set, then we can concatenate it with other words in the set\n        # 2. If the word is not in the set, then we can't concatenate it with other words in the set\n        # 3. If the word is in the set, then we can't concatenate it with other words in the set\n        # 4. If the word is not in the set, then we can concatenate it with other words in the set\n        # 5. If the word is in the set, then we can't concatenate it with other words in the set\n        # 6. If the word is not in the set, then we can concatenate it with other words in the set\n        # 7. If the word is in the set, then we can't concatenate it with other words in the set\n        # 8. If the word is not in the set, then we can concatenate it with other words in the set\n        # 9. If the word is in the set, then we can't concatenate it with other words in the set\n        # 10. If the word is not in the set, then we can concatenate it with other words in the set\n        # 11. If the word is in the set, then we can't concatenate it with other words in the set\n        # 12. If the word is not in the set, then we can concatenate it with other words in the set\n        # 13. If the word is in the set, then we can't concatenate it with other words in the set\n        # 14. If the word is not in the set, then we can concatenate it with other words in the set\n        # 15. If the word is in the set, then we can't concatenate it with other words in the set\n        # 16. If the word is not in the set, then we can concatenate it with other words in the set\n        # 17. If the word is in the set, then we can't concatenate it with other words in the set\n        # 18. If the word is not in the set, then we can concatenate it with other words in the set\n        # 19. If the word is in the set, then we can't concatenate it with other words in the set\n        # 20. If the word is not in the set, then we can concatenate it with other words in the set\n        # 21. If the word is in the set, then we can't concatenate it with other words in the set\n        # 22. If the word is not in the set, then we can concatenate it with other words in the set\n        # 23. If the word is in the set, then we can't concatenate it with other words in the set\n        # 24. If the word is not in the set, then we can concatenate it with other words in the set\n        # 25. If the word is in the set, then we can't concatenate it with other words in the"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n % 4 == 0:\n            return False\n        else:\n            return True"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col, board):\n            for i in range(row):\n                if board[i][col] == 1:\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(row, board):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(row, col, board):\n                    board[row][col] = 1\n                    count += backtrack(row + 1, board)\n                    board[row][col] = 0\n            return count\n        \n        board = [[0 for _ in range(n)] for _ in range(n)]\n        return backtrack(0, board)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(row, col, board):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(row, board):\n            if row == n:\n                res.append([\"\".join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(row, col, board):\n                    board[row][col] = 'Q'\n                    backtrack(row + 1, board)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(0, board)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))\n        # if len(nums) < 3:\n        #     return nums[-1]\n        # return nums[-3]\n        \n        # nums = sorted(set(nums))"}]}