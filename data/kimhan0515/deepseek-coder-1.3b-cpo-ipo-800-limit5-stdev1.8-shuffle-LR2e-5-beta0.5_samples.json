{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left = 0\n        right = n - 1\n        top = 0\n        bottom = m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[0][0] = 1\n        # dp[0][j] = 0\n        # dp[i][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 0 if s"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Sort the array\n        ## 2. Iterate through the array and check if the current number is positive and less than the length of the array\n        ## 3. If the current number is positive and less than the length of the array, swap the current number with the index of the current number\n        ## 4. Iterate through the array again and check if the current number is positive and less than the length of the array\n        ## 5. If the current number is positive and less than the length of the array, return the current number\n        ## 6. If the current number is positive and greater than or equal to the length of the array, return the length of the array + 1\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. Sort the array\n        nums.sort()\n        \n        ## 2. Iterate through the array and check if the current number is positive and less than the length of the array\n        ## 3. If the current number is positive and less than the length of the array, swap the current number with the index of the current number\n        ## 4. Iterate through the array again and check if the current number is positive and less than the length of the array\n        ## 5. If the current number is positive and less than the length of the array, return the current number\n        ## 6. If the current number is positive and greater than or equal to the length of the array, return the length of the array + 1\n        \n        for i in range(len(nums)):\n            if nums[i] > 0 and nums[i] < len(nums):\n                temp = nums[i]\n                nums[i] = nums[temp - 1]\n                nums[temp - 1] = temp\n        \n        for i in range(len(nums)):\n            if nums[i] != i + 1:\n                return i + 1\n        \n        return len(nums) + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 1,2,3,4,5,6,7,8,9\n        # 2. 1,2,3,4,5,6,7,8,9\n        # 3. 1,2,3,4,5,6,7,8,9\n        # 4. 1,2,3,4,5,6,7,8,9\n        # 5. 1,2,3,4,5,6,7,8,9\n        # 6. 1,2,3,4,5,6,7,8,9\n        # 7. 1,2,3,4,5,6,7,8,9\n        # 8. 1,2,3,4,5,6,7,8,9\n        # 9. 1,2,3,4,5,6,7,8,9\n        # 10. 1,2,3,4,5,6,7,8,9\n        # 11. 1,2,3,4,5,6,7,8,9\n        # 12. 1,2,3,4,5,6,7,8,9\n        # 13. 1,2,3,4,5,6,7,8,9\n        # 14. 1,2,3,4,5,6,7,8,9\n        # 15. 1,2,3,4,5,6,7,8,9\n        # 16. 1,2,3,4,5,6,7,8,9\n        # 17. 1,2,3,4,5,6,7,8,9\n        # 18. 1,2,3,4,5,6,7,8,9\n        # 19. 1,2,3,4,5,6,7,8,9\n        # 20. 1,2,3,4,5,6,7,8,9\n        # 21. 1,2,3,4,5,6,7,8,9\n        # 22. 1,2,3,4,5,6,7,8,9\n        # 23. 1,2,3,4,5,6,7,8,9\n        # 24. 1,2,3,4,5,6,7,8,9\n        # 25. 1,2,3,4,5,6,7,8,9\n        # 26. 1,2,3,4,5,6,7,8,9\n        # 27. 1,2,3,4,5,6,7,8,9\n        # 28. 1,2,3,4,5,6,7,8,9\n        # 29. 1,2,3,4,5,6,7,8,9\n        # 30. 1,2,3,4,5,6,7,8,9\n        # 31. 1,2,3,4,5,6,7,8,9\n        # 32. 1,2,3,4,5,6,7,8,9\n        # 33. 1,2,3,4,5,6,7,8,9\n        # 34. 1,2,3,4,5,6,7,8,9\n        # 35. 1,2,3,4,5,6,7,8,9\n        # 36. 1,2,3,4,5,6,7,8,9\n        # 37. 1,2,3,4,5,6,7,8,9\n        # 38. 1,2,3,4,5,6,7,8,9\n        # 39. 1,2,3,4,5,6,7,8,9\n        # 40. 1,2,3,4,5,6,7,8,9\n        # 41. 1,2,3,4,5,6,7,8,9\n        # 42. 1"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute Force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Two Pointer\n        left = 0\n        right = len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, curr, prev):\n            if not num:\n                if curr == target:\n                    res.append(op)\n                return\n            for i in range(1, len(num) + 1):\n                if i == 1 or (num[0] != '0' and i != 1):\n                    curr = curr * 10 + int(num[:i])\n                    op = op + num[:i] + '*' if op else num[:i]\n                    backtrack(num[i:], target, op, res, curr, curr)\n                    op = op[:-i]\n                    curr = curr - int(num[:i])\n        \n        res = []\n        backtrack(num, target, '', res, 0, 0)\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        else:\n            return '-'.join(s[i:i+k] for i in range(0, n, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## TLE\n        ## T"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we need to add 1 to the next digit\n        # if the last digit is 9, then we"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return false if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s is not '*'\n            if self.isMatch(s, p[2:]):\n                return True\n            # if the first character of p is not '*', check if the first character of s is '*' or the first character of s is not '*'\n            if s and (p[0] == s[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p)\n            else:\n                return False\n        \n        # if p is not empty, check if the first character of p is '*'\n        if p[0] == '*':\n            # if the first character of p is '*', check if the first character of s is '*' or the first character of s is not '*'\n            if self.isMatch(s, p[1:]):\n                return True\n            # if the first character of p is not '*', check if the first character of s is '*' or the first character of s is not '*'\n            if s and (p[0] == s[0] or p[0] == '.'):\n                return self.isMatch(s[1:], p)\n            else:\n                return False\n        \n        # if p is not empty, check if the first character of p is '*'\n        if p[0] == '.' and s:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if s and (p[0] == s[0] or p[0] == '.'):\n            return self.isMatch(s[1:], p[1:])\n        \n        return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick_max(nums1, nums2, k):\n            if len(nums1) > len(nums2):\n                return pick_max(nums2, nums1, k)\n            if len(nums1) == 0:\n                return nums2[:k]\n            if k == 0:\n                return []\n            if k == len(nums1):\n                return nums1\n            if nums1[-1] > nums2[-1]:\n                return nums1\n            if nums1[-1] < nums2[-1]:\n                return nums2\n            if nums1[-1] == nums2[-1]:\n                return nums1\n            return nums1\n        \n        def pick_min(nums1, nums2, k):\n            if len(nums1) > len(nums2):\n                return pick_min(nums2, nums1, k)\n            if len(nums1) == 0:\n                return nums2[:k]\n            if k == 0:\n                return []\n            if k == len(nums1):\n                return nums1\n            if nums1[-1] < nums2[-1]:\n                return nums1\n            if nums1[-1] > nums2[-1]:\n                return nums2\n            if nums1[-1] == nums2[-1]:\n                return nums1\n            return nums1\n        \n        def pick_max_or_min(nums1, nums2, k):\n            if len(nums1) > len(nums2):\n                return pick_min(nums2, nums1, k)\n            if len(nums1) == 0:\n                return nums2[:k]\n            if k == 0:\n                return []\n            if k == len(nums1):\n                return nums1\n            if nums1[-1] > nums2[-1]:\n                return nums1\n            if nums1[-1] < nums2[-1]:\n                return nums2\n            if nums1[-1] == nums2[-1]:\n                return nums1\n            return nums1\n        \n        if len(nums1) + len(nums2) < k:\n            return []\n        if len(nums1) == 0:\n            return nums2[:k]\n        if len(nums2) == 0:\n            return nums1[:k]\n        if k == 0:\n            return []\n        if k == len(nums1):\n            return nums1\n        if k == len(nums2):\n            return nums2\n        if len(nums1) > len(nums2):\n            return pick_max(nums1, nums2, k)\n        if len(nums1) < len(nums2):\n            return pick_min(nums1, nums2, k)\n        if len(nums1) == len(nums2):\n            return pick_max_or_min(nums1, nums2, k)\n        \n        return []"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i\n                if i**2 != num:\n                    sum += num//i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(dp[i+1][n-1] - dungeon[i][n-1], 1)\n        \n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(dp[m-1][j+1] - dungeon[m-1][j], 1)\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left = 0\n        right = len(s_list) - 1\n        while left < right:\n            if s_list[left] in vowels and s_list[right] in vowels:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n            elif s_list[left] not in vowels:\n                left += 1\n            elif s_list[right] not in vowels:\n                right -= 1\n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. We can use the property of XOR to solve this problem.\n        ## 2. XOR of a number with itself is 0.\n        ## 3. XOR of a number with 0 is the number itself.\n        ## 4. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 5. We can also use the property of XOR to solve this problem.\n        ## 6. XOR of a number with itself is 0.\n        ## 7. XOR of a number with 0 is the number itself.\n        ## 8. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 9. We can also use the property of XOR to solve this problem.\n        ## 10. XOR of a number with itself is 0.\n        ## 11. XOR of a number with 0 is the number itself.\n        ## 12. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 13. We can also use the property of XOR to solve this problem.\n        ## 14. XOR of a number with itself is 0.\n        ## 15. XOR of a number with 0 is the number itself.\n        ## 16. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 17. We can also use the property of XOR to solve this problem.\n        ## 18. XOR of a number with itself is 0.\n        ## 19. XOR of a number with 0 is the number itself.\n        ## 20. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 21. We can also use the property of XOR to solve this problem.\n        ## 22. XOR of a number with itself is 0.\n        ## 23. XOR of a number with 0 is the number itself.\n        ## 24. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 25. We can also use the property of XOR to solve this problem.\n        ## 26. XOR of a number with itself is 0.\n        ## 27. XOR of a number with 0 is the number itself.\n        ## 28. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 29. We can also use the property of XOR to solve this problem.\n        ## 30. XOR of a number with itself is 0.\n        ## 31. XOR of a number with 0 is the number itself.\n        ## 32. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 33. We can also use the property of XOR to solve this problem.\n        ## 34. XOR of a number with itself is 0.\n        ## 35. XOR of a number with 0 is the number itself.\n        ## 36. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 37. We can also use the property of XOR to solve this problem.\n        ## 38. XOR of a number with itself is 0.\n        ## 39. XOR of a number with 0 is the number itself.\n        ## 40. So, we can XOR all the numbers in the array and the missing number will be the XOR of all the numbers.\n        ## 41. We can also use the property of XOR to solve this problem.\n        ## 42. XOR of"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(N * M)\n        # Space: O(N)\n        # N: number of words in wordList\n        # M: length of each word in wordList\n        # N is the number of words in wordList\n        # M is the length of each word in wordList\n        # We can use a set to store the words in wordList\n        # We can use a queue to store the words that we need to explore\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored\n        # We can use a dictionary to store the words that we have already explored"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums)-1\n        \n        while left < right:\n            mid = (left + right) // 2 + 1\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] != nums[j]:\n                i += 1\n                nums[i] = nums[j]\n            j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Approach: Greedy\n        # We can use a greedy approach to solve this problem.\n        # We can keep track of the farthest we can reach and the number of jumps we have taken.\n        # We can also keep track of the current farthest we can reach.\n        # We can update the farthest we can reach every time we move to a new position.\n        # If the farthest we can reach is greater than the current position, we can move to that position.\n        # If the farthest we can reach is less than the current position, we can't move to that position.\n        # We can keep track of the number of jumps we have taken.\n        # We can return the number of jumps we have taken.\n        \n        # Initialize the farthest we can reach and the number of jumps we have taken to 0.\n        farthest = 0\n        jumps = 0\n        \n        # Iterate over the array.\n        for i in range(len(nums)):\n            # If the farthest we can reach is greater than the current position, we can move to that position.\n            if i > farthest:\n                # Increment the number of jumps we have taken.\n                jumps += 1\n                # Update the farthest we can reach.\n                farthest = i\n            # If the farthest we can reach is less than the current position, we can't move to that position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a position that is equal to the current position.\n            # We can't move to a position that is greater than the current position.\n            # We can't move to a position that is less than the current position.\n            # We can't move to a"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i],0) for i in range(len(prices)-1))\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        \n        for i in range(len(prices)):\n            for j in range(1,k+1):\n                dp[j][0] = max(dp[j][0],dp[j-1][1]-prices[i])\n                dp[j][1] = max(dp[j][1],dp[j][0]+prices[i])\n        \n        return dp[-1][1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_str = \"\"\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_str = str(remainder) + hex_str\n            else:\n                hex_str = hex_dict[remainder] + hex_str\n            num = num // 16\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## 1. Create a hashmap with key as the character and value as the index of the character\n        ## 2. Iterate through the string and check if the character is already in the hashmap\n        ## 3. If the character is already in the hashmap, update the value of the character to -1\n        ## 4. If the character is not in the hashmap, add the character to the hashmap with value as the index of the character\n        ## 5. Iterate through the hashmap and return the first character with value as 1\n        ## 6. If there is no character with value as 1, return -1\n        \n        hashmap = {}\n        for i in range(len(s)):\n            if s[i] in hashmap:\n                hashmap[s[i]] = -1\n            else:\n                hashmap[s[i]] = i\n        \n        for key, value in hashmap.items():\n            if value == 1:\n                return value\n        \n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if indexDiff < 0 or valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= nums[-1] - nums[0]:\n            return True\n        \n        nums.sort()\n        \n        for i in range(len(nums)-1):\n            if nums[i+1] - nums[i] <= valueDiff:\n                if abs(nums[i] - nums[i+1]) <= indexDiff:\n                    return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return (2**left_height) + self.countNodes(root.right)\n        else:\n            return (2**right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        carry = 0\n        res = \"\"\n        i = 0\n        while i < len(num1) or i < len(num2) or carry:\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            res += str(carry % 10)\n            carry //= 10\n            i += 1\n        return res[::-1]"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num*10 + int(s[i])\n            if s[i] in '+-' or i == len(s)-1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                elif sign == '*':\n                    stack[-1] = stack[-1]*num\n                elif sign == '/':\n                    stack[-1] = int(stack[-1]/num)\n                sign = s[i]\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits = [profits[i] for i in range(len(profits))]\n        # capital = [capital[i] for i in range(len(capital))]\n        # profits.sort()\n        # capital.sort()\n        # print(profits)\n        # print(capital)\n        # print(profits[0])\n        # print(capital[0])\n        # print(profits[1])\n        # print(capital[1])\n        # print(profits[2])\n        # print(capital[2])\n        # print(profits[3])\n        # print(capital[3])\n        # print(profits[4])\n        # print(capital[4])\n        # print(profits[5])\n        # print(capital[5])\n        # print(profits[6])\n        # print(capital[6])\n        # print(profits[7])\n        # print(capital[7])\n        # print(profits[8])\n        # print(capital[8])\n        # print(profits[9])\n        # print(capital[9])\n        # print(profits[10])\n        # print(capital[10])\n        # print(profits[11])\n        # print(capital[11])\n        # print(profits[12])\n        # print(capital[12])\n        # print(profits[13])\n        # print(capital[13])\n        # print(profits[14])\n        # print(capital[14])\n        # print(profits[15])\n        # print(capital[15])\n        # print(profits[16])\n        # print(capital[16])\n        # print(profits[17])\n        # print(capital[17])\n        # print(profits[18])\n        # print(capital[18])\n        # print(profits[19])\n        # print(capital[19])\n        # print(profits[20])\n        # print(capital[20])\n        # print(profits[21])\n        # print(capital[21])\n        # print(profits[22])\n        # print(capital[22])\n        # print(profits[23])\n        # print(capital[23])\n        # print(profits[24])\n        # print(capital[24])\n        # print(profits[25])\n        # print(capital[25])\n        # print(profits[26])\n        # print(capital[26])\n        # print(profits[27])\n        # print(capital[27])\n        # print(profits[28])\n        # print(capital[28])\n        # print(profits[29])\n        # print(capital[29])\n        # print(profits[30])\n        # print(capital[30])\n        # print(profits[31])\n        # print(capital[31])\n        # print(profits[32])\n        # print(capital[32])\n        # print(profits[33])\n        # print(capital[33])\n        # print(profits[34])\n        # print(capital[34])\n        # print(profits[35])\n        # print(capital[35])\n        # print(profits[36])\n        # print(capital[36])\n        # print(profits[37])\n        # print(capital[37])\n        # print(profits[38])\n        # print(capital[38])\n        # print(profits[39])\n        # print(capital[39])\n        # print(profits[40])\n        # print(capital[40])\n        # print(profits[41])\n        # print(capital[41])\n        # print(profits[42])\n        # print(capital[42])\n        # print(profits[43])\n        # print(capital"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if stack:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        if stack:\n            return False\n        else:\n            return True"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the index of the first number that is smaller than its next number\n        # if no such number exists, the array is sorted in descending order, so reverse it and return it\n        # if the array is already sorted in descending order, return None\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it\n        # if the array is sorted in ascending order, reverse the last k numbers and return it"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        # Store the index of the number in the hashmap\n        # If the number is already in the hashmap, check if the index is within the range of k\n        # If it is, return True\n        # If it is not, add the number to the hashmap\n        # If the number is not in the hashmap, add the number to the hashmap\n        \n        hashmap = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in hashmap:\n                if abs(hashmap[nums[i]] - i) <= k:\n                    return True\n            hashmap[nums[i]] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[1] % 2 == 0]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 == 0]\n        couples.sort()\n        couples"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        for word in words:\n            if word[0].lower() in row1:\n                if set(word.lower()) <= row1:\n                    res.append(word)\n            elif word[0].lower() in row2:\n                if set(word.lower()) <= row2:\n                    res.append(word)\n            else:\n                if set(word.lower()) <= row3:\n                    res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        prev.next = None\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            count += 1\n        \n        prev.next = curr\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the front of the original string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. add the reversed string to the"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        t_dict = {}\n        for char in t:\n            if char not in t_dict:\n                t_dict[char] = 1\n            else:\n                t_dict[char] += 1\n        \n        s_dict = {}\n        for char in s:\n            if char not in s_dict:\n                s_dict[char] = 1\n            else:\n                s_dict[char] += 1\n        \n        if t_dict == s_dict:\n            return s\n        \n        left = 0\n        right = 0\n        min_window = \"\"\n        min_length = float(\"inf\")\n        \n        while right < len(s):\n            if s[right] in t_dict:\n                if s[right] in s_dict:\n                    s_dict[s[right]] -= 1\n                else:\n                    s_dict[s[right]] = 1\n            right += 1\n            \n            while self.is_valid(s_dict, t_dict):\n                if right - left < min_length:\n                    min_window = s[left:right]\n                    min_length = right - left\n                if s[left] in s_dict:\n                    s_dict[s[left]] += 1\n                left += 1\n        \n        return min_window\n    \n    def is_valid(self, s_dict, t_dict):\n        for key in t_dict:\n            if key not in s_dict or s_dict[key] < t_dict[key]:\n                return False\n        return True"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)-3):\n            if distance[i] >= distance[i+2] and distance[i+1] <= distance[i+3]:\n                return True\n            elif distance[i] <= distance[i+2] and distance[i+1] >= distance[i+3]:\n                return True\n            elif distance[i] >= distance[i+2] and distance[i+1] >= distance[i+3]:\n                if distance[i] >= distance[i+4] and distance[i+2] >= distance[i+6]:\n                    return True\n                elif distance[i] <= distance[i+4] and distance[i+2] <= distance[i+6]:\n                    return True\n                elif distance[i] <= distance[i+4] and distance[i+2] >= distance[i+6]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] <= distance[i+6]:\n                    return True\n                else:\n                    return False\n            elif distance[i] <= distance[i+2] and distance[i+1] <= distance[i+3]:\n                if distance[i] <= distance[i+4] and distance[i+2] <= distance[i+6]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] >= distance[i+6]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] <= distance[i+6]:\n                    return True\n                elif distance[i] <= distance[i+4] and distance[i+2] >= distance[i+6]:\n                    return True\n                else:\n                    return False\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a hashmap to store the frequency of each character in the string\n        # 2. Iterate through the hashmap and check if the frequency is odd\n        # 3. If the frequency is odd, add it to the result\n        # 4. If the frequency is even, add it to the result and subtract 1 from the frequency\n        # 5. Return the result\n        \n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        result = 0\n        for char, frequency in hashmap.items():\n            if frequency % 2 == 0:\n                result += frequency\n            else:\n                result += frequency - 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if len(inorder) == 0:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find all the trees in the forest\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((i, j))\n        \n        # 2. Sort the trees by height\n        trees.sort(key=lambda x: forest[x[0]][x[1]])\n        \n        # 3. Start from the first tree and cut off the rest of the trees\n        curr_row, curr_col = trees[0]\n        steps = 0\n        for tree in trees[1:]:\n            steps += self.bfs(forest, curr_row, curr_col, tree[0], tree[1])\n            if steps == -1:\n                return -1\n            curr_row, curr_col = tree\n        \n        return steps\n    \n    def bfs(self, forest, start_row, start_col, end_row, end_col):\n        \"\"\"\n        Breadth-first search to find the shortest path between two trees\n        \"\"\"\n        visited = set()\n        queue = deque([(start_row, start_col)])\n        visited.add((start_row, start_col))\n        steps = 0\n        \n        while queue:\n            for _ in range(len(queue)):\n                row, col = queue.popleft()\n                if row == end_row and col == end_col:\n                    return steps\n                for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                    new_row, new_col = row + dr, col + dc\n                    if new_row < 0 or new_row >= len(forest) or new_col < 0 or new_col >= len(forest[0]) or forest[new_row][new_col] == 0 or (new_row, new_col) in visited:\n                        continue\n                    visited.add((new_row, new_col))\n                    queue.append((new_row, new_col))\n            steps += 1\n        \n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return 1 + self.minDepth(root.right)\n        \n        if root.right is None:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc811\uadfc\n        # 2. \uc811\uadfc\n        # 3. \uc811\uadfc\n        # 4. \uc811\uadfc\n        # 5. \uc811\uadfc\n        # 6. \uc811\uadfc\n        # 7. \uc811\uadfc\n        # 8. \uc811\uadfc\n        # 9. \uc811\uadfc\n        # 10. \uc811\uadfc\n        # 11. \uc811\uadfc\n        # 12. \uc811\uadfc\n        # 13. \uc811\uadfc\n        # 14. \uc811\uadfc\n        # 15. \uc811\uadfc\n        # 16. \uc811\uadfc\n        # 17. \uc811\uadfc\n        # 18. \uc811\uadfc\n        # 19. \uc811\uadfc\n        # 20. \uc811\uadfc\n        # 21. \uc811\uadfc\n        # 22. \uc811\uadfc\n        # 23. \uc811\uadfc\n        # 24. \uc811\uadfc\n        # 25. \uc811\uadfc\n        # 26. \uc811\uadfc\n        # 27. \uc811\uadfc\n        # 28. \uc811\uadfc\n        # 29. \uc811\uadfc\n        # 30. \uc811\uadfc\n        # 31. \uc811\uadfc\n        # 32. \uc811\uadfc\n        # 33. \uc811\uadfc\n        # 34. \uc811\uadfc\n        # 35. \uc811\uadfc\n        # 36. \uc811\uadfc\n        # 37. \uc811\uadfc\n        # 38. \uc811\uadfc\n        # 39. \uc811\uadfc\n        # 40. \uc811\uadfc\n        # 41. \uc811\uadfc\n        # 42. \uc811\uadfc\n        # 43. \uc811\uadfc\n        # 44. \uc811\uadfc\n        # 45. \uc811\uadfc\n        # 46. \uc811\uadfc\n        # 47. \uc811\uadfc\n        # 48. \uc811\uadfc\n        # 49. \uc811\uadfc\n        # 50. \uc811\uadfc\n        # 51. \uc811\uadfc\n        # 52. \uc811\uadfc\n        # 53. \uc811\uadfc\n        # 54. \uc811\uadfc\n        # 55. \uc811\uadfc\n        # 56. \uc811\uadfc\n        # 57. \uc811\uadfc\n        # 58. \uc811\uadfc\n        # 59. \uc811\uadfc\n        # 60. \uc811\uadfc\n        # 61. \uc811\uadfc\n        # 62. \uc811\uadfc\n        # 63. \uc811\uadfc\n        # 64. \uc811\uadfc\n        # 65. \uc811\uadfc\n        # 66. \uc811\uadfc\n        # 67. \uc811\uadfc\n        # 68. \uc811\uadfc\n        # 69. \uc811\uadfc\n        # 70. \uc811\uadfc\n        # 71. \uc811\uadfc\n        # 72. \uc811\uadfc\n        # 73. \uc811\uadfc\n        # 74. \uc811\ufffd"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 30:\n        # Time Complexity: O("}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            temp = []\n            for node in queue:\n                temp.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(temp)\n            queue = queue[len(temp):]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + (1 << i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[i] = True if s[:i] can be segmented into a space-separated"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTUtil(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return isValidBSTUtil(root.left, min_val, root.val) and isValidBSTUtil(root.right, root.val, max_val)\n        \n        return isValidBSTUtil(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if newInterval is empty, return intervals\n        if not newInterval:\n            return intervals\n        \n        # if intervals is empty, return newInterval\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is not overlapping with any interval in intervals, return newInterval\n        if newInterval[1] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if newInterval is overlapping with the first interval in intervals, update newInterval\n        if newInterval[0] <= intervals[0][0]:\n            newInterval[0] = intervals[0][0]\n        \n        # if newInterval is overlapping with the last interval in intervals, update newInterval\n        if newInterval[1] >= intervals[-1][1]:\n            newInterval[1] = intervals[-1][1]\n        \n        # remove the first interval from intervals if it overlaps with newInterval\n        if newInterval[0] > intervals[0][0]:\n            intervals.pop(0)\n        \n        # remove the last interval from intervals if it overlaps with newInterval\n        if newInterval[1] < intervals[-1][1]:\n            intervals.pop(-1)\n        \n        # insert newInterval into intervals\n        intervals.insert(0, newInterval)\n        \n        # merge overlapping intervals\n        for i in range(1, len(intervals)):\n            if intervals[i][0] <= intervals[i-1][1]:\n                intervals[i-1][1] = max(intervals[i][1], intervals[i-1][1])\n                intervals.pop(i)\n        \n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    backtrack(s[i:], path + [s[:i]], res)\n        \n        res = []\n        backtrack(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # 2. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 3. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 4. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 5. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 6. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 7. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 8. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 9. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 10. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 11. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0\n        \n        # 12. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud560 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        min_val_idx = 0\n        max_val_idx = 0"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # BFS\n        q = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        while q:\n            curr_time, x, y = q.pop(0)\n            res = max(res, curr_time)\n            if x == n - 1 and y == n - 1:\n                return res\n            for dx, dy in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                nx, ny = x + dx, y + dy\n                if nx < 0 or nx >= n or ny < 0 or ny >= n or (nx, ny) in visited:\n                    continue\n                visited.add((nx, ny))\n                q.append((grid[nx][ny], nx, ny))\n                q = sorted(q, key=lambda x: x[0])\n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Create a 2D array of size m x n\n        # 2. Initialize the first row and column with 1\n        # 3. Iterate over the remaining cells and update the value of the cell based on the sum of the values in the previous row and previous column\n        # 4. Return the value of the last cell\n        \n        # Time Complexity: O(m*n)\n        # Space Complexity: O(m*n)\n        \n        # Create a 2D array of size m x n\n        dp = [[0] * n for _ in range(m)]\n        \n        # Initialize the first row and column with 1\n        for i in range(m):\n            dp[i][0] = 1\n        for j in range(n):\n            dp[0][j] = 1\n        \n        # Iterate over the remaining cells and update the value of the cell based on the sum of the values in the previous row and previous column\n        for i in range(1, m):\n            for j in range(1, n):\n                dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        # Return the value of the last cell\n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        while len(res) > 1 and res[-1] == 0:\n            res.pop()\n            \n        return \"\".join(map(str, res))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            if curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                result.append(curr.val)\n                curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc67c\ucabd\ubd80\ud130 \uc624\ub978\ucabd\uc73c\ub85c \uc21c\ud68c\ud558\uba74\uc11c \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a4\uace0, \uc624\ub978\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uac10\uc18c\uc2dc\ud0a8\ub2e4.\n        # 2. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc624\ub978\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uac10\uc18c\uc2dc\ud0a8\ub2e4.\n        # 3. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 4. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 5. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 6. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 7. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 8. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 9. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 10. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\uac00 \ub098\uc624\uba74 \uce74\uc6b4\ud2b8\ub97c \uc99d\uac00\uc2dc\ud0a8\ub2e4.\n        # 11. \uce74\uc6b4\ud2b8\uac00 0\uc774 \ub418\uba74 \uc67c\ucabd \uad04\ud638\ufffd"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Time Complexity: O(nlogk)\n        # Space Complexity: O(1)\n        \n        # Edge Case:\n        if not lists:\n            return None\n        \n        # Initialize the head of the merged list\n        head = ListNode()\n        curr = head\n        \n        # Loop through the lists and merge them\n        while lists:\n            # Find the minimum value in the list\n            min_val = float('inf')\n            min_index = None\n            for i, list_node in enumerate(lists):\n                if list_node:\n                    if list_node.val < min_val:\n                        min_val = list_node.val\n                        min_index = i\n            # If the list is empty, remove it from the lists\n            if min_index is None:\n                lists.pop(min_index)\n            else:\n                # Add the minimum value to the merged list\n                curr.next = ListNode(min_val)\n                curr = curr.next\n                lists[min_index] = lists[min_index].next\n        \n        # Return the merged list\n        return head.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        # 3. if the number of zeroes is less than k, then the answer is 0\n        # 4. if the number of zeroes is greater than k, then the answer is 5^i\n        # 5. if the number of zeroes is equal to k, then the answer is 5^(i+1) - 1\n        \n        # 1. find the largest number n such that n * 5^i <= k\n        # 2. find the number of zeroes in n * 5^i\n        #"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        reverse_map = {}\n        for i, word in enumerate(words):\n            reverse_map[word[::-1]] = i\n        \n        # Create a list to store the result\n        result = []\n        \n        # Iterate over the words\n        for i, word in enumerate(words):\n            # If the word is empty, add the index to the result\n            if not word:\n                result.append([i, i])\n            # If the word is a palindrome, add the index to the result\n            elif word in reverse_map:\n                result.append([i, reverse_map[word]])\n            # If the word is not a palindrome, reverse the word\n            # and check if the reverse word is in the hashmap\n            # If it is, add the index to the result\n            else:\n                rev = word[::-1]\n                if rev in reverse_map:\n                    result.append([i, reverse_map[rev]])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def spread(isInfected):\n            m, n = len(isInfected), len(isInfected[0])\n            res = 0\n            while True:\n                infected = set()\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.add((i, j))\n                if not infected:\n                    return res\n                res += 1\n                for i, j in infected:\n                    isInfected[i][j] = 2\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            isInfected[i][j] = 0\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 2:\n                            if i > 0 and isInfected[i-1][j] == 0:\n                                isInfected[i-1][j] = 1\n                            if i < m-1 and isInfected[i+1][j] == 0:\n                                isInfected[i+1][j] = 1\n                            if j > 0 and isInfected[i][j-1] == 0:\n                                isInfected[i][j-1] = 1\n                            if j < n-1 and isInfected[i][j+1] == 0:\n                                isInfected[i][j+1] = 1\n            return res\n        \n        return spread(isInfected)"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        max_len = 1\n        \n        for d in dirs:\n            x = i + d[0]\n            y = j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words\n        # dp[i] = False otherwise\n        # dp[0] = True\n        # dp[i] = True if s[:i] can be segment"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not left_to_right:\n                level = level[::-1]\n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(hour):\n            if hour == 0:\n                return [0]\n            elif hour == 1:\n                return [1,2,4,8]\n            elif hour == 2:\n                return [5,10,20,40]\n            elif hour == 3:\n                return [6,12,24,48]\n            elif hour == 4:\n                return [9,18,36,72]\n            elif hour == 5:\n                return [11,22,44,88]\n            elif hour == 6:\n                return [13,26,52,104]\n            elif hour == 7:\n                return [15,29,58,116]\n            elif hour == 8:\n                return [17,34,68,136]\n            elif hour == 9:\n                return [19,38,76,152]\n            elif hour == 10:\n                return [21,42,84,168]\n            elif hour == 11:\n                return [23,46,92,184]\n            else:\n                return []\n        \n        def get_minute(minute):\n            if minute == 0:\n                return [0]\n            elif minute == 1:\n                return [1,2,4,8,16,32]\n            elif minute == 2:\n                return [5,10,20,40,80,160]\n            elif minute == 3:\n                return [6,12,24,48,96,192]\n            elif minute == 4:\n                return [9,18,36,72,144,288]\n            elif minute == 5:\n                return [11,22,44,88,176,352]\n            elif minute == 6:\n                return [13,26,52,104,208,416]\n            elif minute == 7:\n                return [15,29,58,116,232,464]\n            elif minute == 8:\n                return [17,34,68,136,272,544]\n            elif minute == 9:\n                return [19,38,76,152,288,576]\n            elif minute == 10:\n                return [21,42,84,168,336,672]\n            elif minute == 11:\n                return [23,46,92,184,368,736]\n            else:\n                return []\n        \n        if turnedOn == 0:\n            return ['0:00']\n        elif turnedOn == 1:\n            return ['0:01','0:02','0:04','0:08','0:16','0:32','0:64','0:128','0:256','0:512','0:1024','0:2048','0:4096','0:8192','0:16384','0:32768','0:65536']\n        else:\n            hour_list = get_hour(turnedOn)\n            minute_list = get_minute(turnedOn)\n            res = []\n            for h in hour_list:\n                for m in minute_list:\n                    if h+m < 12:\n                        res.append(str(h)+':'+str(m).zfill(2))\n                    else:\n                        res.append(str(h)+':'+str(m).zfill(2))\n            return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            height, i, j = heapq.heappop(heap)\n            for di, dj in directions:\n                ni, nj = i+di, j+dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in visited:\n                    if heightMap[ni][nj] < heightMap[i][j]:\n                        ans += heightMap[i][j] - heightMap[ni][nj]\n                    heapq.heappush(heap, (max(heightMap[ni][nj], height), ni, nj))\n                    visited.add((ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(c for c in s if c.isalnum())\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # sliding window\n        # 1. sort the array\n        # 2. find the median\n        # 3. return the median\n        \n        # sort the array\n        nums.sort()\n        \n        # find the median\n        if len(nums) % 2 == 0:\n            median = (nums[k//2] + nums[k//2 - 1]) / 2\n        else:\n            median = nums[k//2]\n        \n        # return the median\n        return [median]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the new head\n        new_tail.next = head\n        \n        # cut the old list off\n        new_head = new_head.next\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is not None and root.right is None:\n            return self.sumOfLeftLeaves(root.left) + root.left.val\n        \n        if root.left is None and root.right is not None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right) + root.left.val"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u548c\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 4. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 5. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 6. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 7. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 8. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 9. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 10. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 11. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 12. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 13. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 14. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 15. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 16. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 17. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 18. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 19. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 20. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 21. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 22. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 23. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 24. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 25. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 26. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 27. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 28. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 29. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 30. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 31. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 32. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 33. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 34. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 35. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 36. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 37. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 38. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 39. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 40. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 41. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 42. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 43. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 44. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 45. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 46. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 47. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 48. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 49. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 50. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 51. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 52. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 53. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 54. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 55. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 56. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 57. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 58. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 59. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 60. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 61. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 62. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 63. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 64. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 65. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 66. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 67. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 68. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c\n        # 69. \u8ba1\u7b97\u6bcf\u4e00\u884c\u548c\u7684\u6700\u5927\u548c"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))\n        \n        return 0"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i,j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != \"O\":\n                return\n            board[i][j] = \"T\"\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board)-1 or j == 0 or j == len(board[0])-1:\n                    if board[i][j] == \"O\":\n                        dfs(i,j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == \"O\":\n                    board[i][j] = \"X\"\n                elif board[i][j] == \"T\":\n                    board[i][j] = \"O\""}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i, j]\n        \n        ## Hash Table\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        hashmap = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[nums[i]] = i\n        return []"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 0.0000000001\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a, b] + list(set(cards) - set([a, b]))\n                    if backtrack(new_cards, target):\n                        return True\n                    new_cards = [b, a] + list(set(cards) - set([a, b]))\n                    if backtrack(new_cards, target):\n                        return True\n                    \n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, then s must be empty as well\n        if not p:\n            return not s\n        \n        # if p is not empty, then s must not be empty\n        if not s:\n            return False\n        \n        # if p is not empty, then s must not be empty\n        if p[0] != '*':\n            return False\n        \n        # if p is not empty, then s must not be empty\n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        # if p is not empty, then s must not be empty\n        if p[0] == '?' and s:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is not empty, then s must not be empty\n        if p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        # if p is not empty, then s must not be empty\n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # Sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # Perform DFS\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i>0 and nums[i]==nums[i-1]:\n                continue\n            for j in range(i+1,len(nums)-2):\n                if j>i+1 and nums[j]==nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l<r:\n                    if nums[i]+nums[j]+nums[l]+nums[r]==target:\n                        res.append([nums[i],nums[j],nums[l],nums[r]])\n                        l+=1\n                        r-=1\n                        while l<r and nums[l]==nums[l-1]:\n                            l+=1\n                        while l<r and nums[r]==nums[r+1]:\n                            r-=1\n                    elif nums[i]+nums[j]+nums[l]+nums[r]<target:\n                        l+=1\n                    else:\n                        r-=1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # iterate through buildings\n        for building in buildings:\n            # if building is the first building in the list\n            if not result or result[-1][1] < building[0]:\n                # add building to result\n                result.append(building)\n            # if building is not the first building in the list\n            else:\n                # if building has a higher right edge than the last building in the result\n                if building[1] > result[-1][1]:\n                    # add building to result\n                    result.append(building)\n                # if building has a lower right edge than the last building in the result\n                else:\n                    # remove last building from result\n                    result.pop()\n                    # add building to result\n                    result.append(building)\n        \n        # initialize result\n        skyline = []\n        \n        # iterate through result\n        for i in range(len(result)):\n            # if skyline is empty or last building in skyline is not the same as current building\n            if not skyline or skyline[-1][1] != result[i][1]:\n                # add current building to skyline\n                skyline.append(result[i])\n        \n        # return skyline\n        return skyline"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # return the string\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Dynamic Programming\n        # Base Case:\n        # If the triangle is empty, return 0\n        if not triangle:\n            return 0\n        \n        # Initialize the first row of the triangle\n        for i in range(1, len(triangle)):\n            triangle[i][0] += triangle[i - 1][0]\n            triangle[i][-1] += triangle[i - 1][-1]\n        \n        # Iterate over the triangle from the second row to the bottom\n        for i in range(1, len(triangle)):\n            for j in range(1, len(triangle[i]) - 1):\n                triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        \n        # Return the minimum value in the last row\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            if num < 1000000000000:\n                return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n            if num < 1000000000000000:\n                return helper(num // 1000000000000) + \" Trillion \" + helper(num % 1000000000000)\n            if num < 1000000000000000000:\n                return helper(num // 1000000000000000) + \" Quadrillion \" + helper(num % 1000000000000000)\n            if num < 1000000000000000000000:\n                return helper(num // 1000000000000000000) + \" Quintillion \" + helper(num % 1000000000000000000)\n            if num < 10000000000000000000000000:\n                return helper(num // 1000000000000000000000) + \" Sextillion \" + helper(num % 1000000000000000000000)\n            if num < 100000000000000000000000000000:\n                return helper(num // 1000000000000000000000000) + \" Septillion \" + helper(num % 1000000000000000000000000)\n            if num < 10000000000000000000000000000000000:\n                return helper(num // 10000000000000000000000000000) + \" Octillion \" + helper(num % 100000000000000000000000000000)\n            if num < 10000000000000000000000000000000"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j-1] + dp[i-k-1][j]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j] + dp[i-k-1][j-1]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j] + dp[i-k-1][j-1] - dp[i-k-1][j-2] + ... + dp[i-k-1][j-k]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j] + dp[i-k-1][j-1] - dp[i-k-1][j-2] + ... + dp[i-k-1][j-k] + dp[i-k-1][j-k+1] - dp[i-k-1][j-k]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j] + dp[i-k-1][j-1] - dp[i-k-1][j-2] + ... + dp[i-k-1][j-k] + dp[i-k-1][j-k+1] - dp[i-k-1][j-k] + dp[i-k-1][j-k+2] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k]\n        # dp[i][j] = dp[i][j-1] - dp[i-k-1][j] + dp[i-k-1][j-1] - dp[i-k-1][j-2] + ... + dp[i-k-1][j-k] + dp[i-k-1][j-k+1] - dp[i-k-1][j-k] + dp[i-k-1][j-k+2] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k] + dp[i-k-1][j-k+k+1] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+2] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+3] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+4] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+5] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+6] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+7] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+8] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+9] - dp[i-k-1][j-k] + ... + dp[i-k-1][j-k+k+10] - dp[i-k-1][j-k] + ... + dp["}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode()\n        dummy2 = ListNode()\n        \n        # create two pointers\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (u,v)\n        # edge 3: (u,v)\n        # edge 4: (u,v)\n        # edge 5: (u,v)\n        # edge 6: (u,v)\n        # edge 7: (u,v)\n        # edge 8: (u,v)\n        # edge 9: (u,v)\n        # edge 10: (u,v)\n        # edge 11: (u,v)\n        # edge 12: (u,v)\n        # edge 13: (u,v)\n        # edge 14: (u,v)\n        # edge 15: (u,v)\n        # edge 16: (u,v)\n        # edge 17: (u,v)\n        # edge 18: (u,v)\n        # edge 19: (u,v)\n        # edge 20: (u,v)\n        # edge 21: (u,v)\n        # edge 22: (u,v)\n        # edge 23: (u,v)\n        # edge 24: (u,v)\n        # edge 25: (u,v)\n        # edge 26: (u,v)\n        # edge 27: (u,v)\n        # edge 28: (u,v)\n        # edge 29: (u,v)\n        # edge 30: (u,v)\n        # edge 31: (u,v)\n        # edge 32: (u,v)\n        # edge 33: (u,v)\n        # edge 34: (u,v)\n        # edge 35: (u,v)\n        # edge 36: (u,v)\n        # edge 37: (u,v)\n        # edge 38: (u,v)\n        # edge 39: (u,v)\n        # edge 40: (u,v)\n        # edge 41: (u,v)\n        # edge 42: (u,v)\n        # edge 43: (u,v)\n        # edge 44: (u,v)\n        # edge 45: (u,v)\n        # edge 46: (u,v)\n        # edge 47: (u,v)\n        # edge 48: (u,v)\n        # edge 49: (u,v)\n        # edge 50: (u,v)\n        # edge 51: (u,v)\n        # edge 52: (u,v)\n        # edge 53: (u,v)\n        # edge 54: (u,v)\n        # edge 55: (u,v)\n        # edge 56: (u,v)\n        # edge 57: (u,v)\n        # edge 58: (u,v)\n        # edge 59: (u,v)\n        # edge 60: (u,v)\n        # edge 61: (u,v)\n        # edge 62: (u,v)\n        # edge 63: (u,v)\n        # edge 64: (u,v)\n        # edge 65: (u,v)\n        # edge 66: (u,v)\n        # edge 67: (u,v)\n        # edge 68: (u,v)\n        # edge 69: (u,v)\n        # edge 70: (u,v)\n        # edge 71: (u,v)\n        # edge 72: (u,v)\n        # edge 73: (u,v)\n        # edge 74: (u,v)\n        # edge 75: (u,v)\n        # edge 76: (u,v)\n        # edge 77: (u,v)\n        # edge 78: (u,v)\n        # edge 79: (u,v)\n        # edge 80"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 = 0\n        # 0 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 0\n        # \n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j in range(n):\n                for k in range(n):\n                    dp[i][j][k] = dp[i - 1][j][k] + grid[i][j]\n                    if j > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k] + grid[i][j])\n                    if k > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k - 1] + grid[i][j])\n                    if j > 0 and k > 0:\n                        dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j - 1][k - 1] + grid[i][j])\n        return max(dp[n - 1][n - 1])"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 2\n        \n        for i in range(2, n+1):\n            dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % mod\n        \n        return dp[n]"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] = grid[i][j-1] + grid[i][j]\n                elif j == 0:\n                    grid[i][j] = grid[i-1][j] + grid[i][j]\n                else:\n                    grid[i][j] = min(grid[i][j-1], grid[i-1][j]) + grid[i][j]\n                    \n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"111312211331121321332211\"\n        \n        if n == 12:\n            return \"31131122212321322211211131221\"\n        \n        if n == 13:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 14:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 15:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 16:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 17:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 18:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 19:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 20:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 21:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 22:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 23:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 24:\n            return \"3113112221232132112311312211211131221\"\n        \n        if n == 25:\n            return \"1321132132112311312211211131221\"\n        \n        if n == 26:\n            return \"111312211312132112311312211211131221\"\n        \n        if n == 27:\n            return \"31131122212321321123113"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def isValid(target):\n            count = 1\n            currSum = 0\n            for num in nums:\n                if currSum + num > target:\n                    count += 1\n                    currSum = num\n                else:\n                    currSum += num\n            return count <= k\n        \n        left = max(nums)\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if isValid(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return the index of target\n        # if target is not in nums, return -1\n        \n        # if nums is empty, return -1\n        if not nums:\n            return -1\n        \n        # if nums has only one element, return the index of target if it is in nums, or -1 if it is not in nums\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        # if nums has more than one element, find the pivot index\n        pivot = self.find_pivot(nums)\n        \n        # if target is in nums, return the index of target\n        if target in nums:\n            return nums.index(target)\n        \n        # if target is not in nums, return -1\n        else:\n            return -1\n        \n    def find_pivot(self, nums):\n        # binary search\n        # if nums is empty, return -1\n        if not nums:\n            return -1\n        \n        # if nums has only one element, return the index of target if it is in nums, or -1 if it is not in nums\n        if len(nums) == 1:\n            if nums[0] == target:\n                return 0\n            else:\n                return -1\n        \n        # if nums has more than one element, find the pivot index\n        left = 0\n        right = len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                return mid + 1\n            elif nums[mid] < nums[mid - 1]:\n                return mid\n            elif nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        res = []\n        def backtrack(i, curr):\n            if i == len(digits):\n                res.append(curr)\n                return\n            \n            for c in phone[digits[i]]:\n                backtrack(i+1, curr+c)\n        \n        backtrack(0, \"\")\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        for i in range(start, len(candidates)):\n            if target < candidates[i]:\n                break\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of the number\n        # 2. get the number of digits\n        # 3. get the number of digits\n        # 4. get the number of digits\n        # 5. get the number of digits\n        # 6. get the number of digits\n        # 7. get the number of digits\n        # 8. get the number of digits\n        # 9. get the number of digits\n        # 10. get the number of digits\n        # 11. get the number of digits\n        # 12. get the number of digits\n        # 13. get the number of digits\n        # 14. get the number of digits\n        # 15. get the number of digits\n        # 16. get the number of digits\n        # 17. get the number of digits\n        # 18. get the number of digits\n        # 19. get the number of digits\n        # 20. get the number of digits\n        # 21. get the number of digits\n        # 22. get the number of digits\n        # 23. get the number of digits\n        # 24. get the number of digits\n        # 25. get the number of digits\n        # 26. get the number of digits\n        # 27. get the number of digits\n        # 28. get the number of digits\n        # 29. get the number of digits\n        # 30. get the number of digits\n        # 31. get the number of digits\n        # 32. get the number of digits\n        # 33. get the number of digits\n        # 34. get the number of digits\n        # 35. get the number of digits\n        # 36. get the number of digits\n        # 37. get the number of digits\n        # 38. get the number of digits\n        # 39. get the number of digits\n        # 40. get the number of digits\n        # 41. get the number of digits\n        # 42. get the number of digits\n        # 43. get the number of digits\n        # 44. get the number of digits\n        # 45. get the number of digits\n        # 46. get the number of digits\n        # 47. get the number of digits\n        # 48. get the number of digits\n        # 49. get the number of digits\n        # 50. get the number of digits\n        # 51. get the number of digits\n        # 52. get the number of digits\n        # 53. get the number of digits\n        # 54. get the number of digits\n        # 55. get the number of digits\n        # 56. get the number of digits\n        # 57. get the number of digits\n        # 58. get the number of digits\n        # 59. get the number of digits\n        # 60. get the number of digits\n        # 61. get the number of digits\n        # 62. get the number of digits\n        # 63. get the number of digits\n        # 64. get the number of digits\n        # 65. get the number of digits\n        # 66. get the number of digits\n        # 67. get the number of digits\n        # 68. get the number of digits\n        # 69. get the number of digits\n        # 70. get the number of digits\n        # 71. get the number of digits\n        # 72. get the number of digits\n        # 73. get the number of digits\n        # 74. get the number of digits\n        # 75. get the number of digits\n        # 76. get the number of digits\n        # 77. get the number of digits\n        # 78. get the number of digits\n        # 79. get the number of digits\n        # 80."}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0]*n for _ in range(n)]\n        num = 1\n        left, right = 0, n-1\n        top, bottom = 0, n-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            \n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i,n):\n                matrix[i][j],matrix[j][i] = matrix[j][i],matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n//2):\n                matrix[i][j],matrix[i][n-j-1] = matrix[i][n-j-1],matrix[i][j]\n        \n        return matrix"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod\n            max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\n            min_prod = min(nums[i], nums[i] * curr_max, nums[i] * min_prod)\n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        stone_set.add(stones[-1] + 1)\n        stone_set.add(stones[-1] + 2)\n        stone_set.add(stones[-1] + 3)\n        stone_set.add(stones[-1] + 4)\n        stone_set.add(stones[-1] + 5)\n        stone_set.add(stones[-1] + 6)\n        stone_set.add(stones[-1] + 7)\n        stone_set.add(stones[-1] + 8)\n        stone_set.add(stones[-1] + 9)\n        stone_set.add(stones[-1] + 10)\n        stone_set.add(stones[-1] + 11)\n        stone_set.add(stones[-1] + 12)\n        stone_set.add(stones[-1] + 13)\n        stone_set.add(stones[-1] + 14)\n        stone_set.add(stones[-1] + 15)\n        stone_set.add(stones[-1] + 16)\n        stone_set.add(stones[-1] + 17)\n        stone_set.add(stones[-1] + 18)\n        stone_set.add(stones[-1] + 19)\n        stone_set.add(stones[-1] + 20)\n        stone_set.add(stones[-1] + 21)\n        stone_set.add(stones[-1] + 22)\n        stone_set.add(stones[-1] + 23)\n        stone_set.add(stones[-1] + 24)\n        stone_set.add(stones[-1] + 25)\n        stone_set.add(stones[-1] + 26)\n        stone_set.add(stones[-1] + 27)\n        stone_set.add(stones[-1] + 28)\n        stone_set.add(stones[-1] + 29)\n        stone_set.add(stones[-1] + 30)\n        stone_set.add(stones[-1] + 31)\n        stone_set.add(stones[-1] + 32)\n        stone_set.add(stones[-1] + 33)\n        stone_set.add(stones[-1] + 34)\n        stone_set.add(stones[-1] + 35)\n        stone_set.add(stones[-1] + 36)\n        stone_set.add(stones[-1] + 37)\n        stone_set.add(stones[-1] + 38)\n        stone_set.add(stones[-1] + 39)\n        stone_set.add(stones[-1] + 40)\n        stone_set.add(stones[-1] + 41)\n        stone_set.add(stones[-1] + 42)\n        stone_set.add(stones[-1] + 43)\n        stone_set.add(stones[-1] + 44)\n        stone_set.add(stones[-1] + 45)\n        stone_set.add(stones[-1] + 46)\n        stone_set.add(stones[-1] + 47)\n        stone_set.add(stones[-1] + 48)\n        stone_set.add(stones[-1] + 49)\n        stone_set.add(stones[-1] + 50)\n        stone_set.add(stones[-1] + 51)\n        stone_set.add(stones[-1] + 52)\n        stone_set.add(stones[-1] + 53)\n        stone_set.add(stones[-1] + 54)\n        stone_set.add(stones[-1] + 55)\n        stone_set.add(stones[-1] + 56)\n        stone_set.add(stones[-1] + 57)\n        stone_set.add(stones[-1] + 58)\n        stone_set.add(stones[-1] +"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score.sort(reverse=True)\n        \n        # create a dictionary to map the score to its rank\n        score_to_rank = {}\n        for i, score in enumerate(score):\n            score_to_rank[score] = i + 1\n        \n        # map the score to its rank\n        for i, score in enumerate(score):\n            if i == 0:\n                score_to_rank[score] = \"Gold Medal\"\n            elif i == 1:\n                score_to_rank[score] = \"Silver Medal\"\n            elif i == 2:\n                score_to_rank[score] = \"Bronze Medal\"\n            else:\n                score_to_rank[score] = str(i + 1)\n        \n        # return the rank of each score\n        return [score_to_rank[score] for score in score]"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        start = 0\n        seen = {}\n        \n        for i, char in enumerate(s):\n            if char in seen:\n                start = max(start, seen[char] + 1)\n            seen[char] = i\n            max_len = max(max_len, i - start + 1)\n            \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = word_dict.copy()\n            for j in range(i, i + word_len * word_count, word_len):\n                word = s[j:j+word_len]\n                if word in temp_dict:\n                    temp_dict[word] -= 1\n                    if temp_dict[word] == 0:\n                        del temp_dict[word]\n                else:\n                    break\n            if len(temp_dict) == 0:\n                res.append(i)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                max_val = arr[i]\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            i = left\n            j = mid + 1\n            count = 0\n            while i <= mid and j <= right:\n                if nums[i] > nums[j] * 2:\n                    count += mid - i + 1\n                i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right + 1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid)\n            count += mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return False"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend(['0'] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend(['0'] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        for duration, lastDay in courses:\n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # add course to total time\n            total += duration\n            \n            # if total time exceeds last day, remove course from priority queue\n            if total > lastDay:\n                total += heapq.heappop(pq)[0]\n                \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s)//i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1]*2 + dp[i-2]*2\n        # dp[i] = dp[i-1]*2 + dp[i-2]*dp[i-2]\n        # dp[i] = dp[i-1]*dp[i-1] + dp[i-2]*dp[i-2] + dp[i-3]*dp[i-3] + ... + dp[i-i]*dp[i-i]\n        # dp[i] = dp[i-1]*dp[i-1] + dp[i-2]*dp[i-2] + dp[i-3]*dp[i-3] + ... + dp[i-i]*dp[i-i] + dp[i-i-1]*dp[i-i-1] + dp[i-i-2]*dp[i-i-2] + ... + dp[i-i-i]*dp[i-i-i]\n        # dp[i] = dp[i-1]*dp[i-1] + dp[i-2]*dp[i-2] + dp[i-3]*dp[i-3] + ... + dp[i-i]*dp[i-i] + dp[i-i-1]*dp[i-i-1] + dp[i-i-2]*dp[i-i-2] + ... + dp[i-i-i]*dp[i-i-i] + dp[i-i-i-1]*dp[i-i-i-1] + dp[i-i-i-2]*dp[i-i-i-2] + ... + dp[i-i-i-i]*dp[i-i-i-i]\n        # dp[i] = dp[i-1]*dp[i-1] + dp[i-2]*dp[i-2] + dp[i-3]*dp[i-3] + ... + dp[i-i]*dp[i-i] + dp[i-i-1]*dp[i-i-1] + dp[i-i-2]*dp[i-i-2] + ... + dp[i-i-i]*dp[i-i-i] + dp[i-i-i-1]*dp[i-i-i-1] + dp[i-i-i-2]*dp[i-i-i-2] + ... + dp[i-i-i-i]*dp[i-i-i-i] + dp[i-i-i-i-1]*dp[i-i-i-i-1] + dp[i-i-i-i-2]*dp[i-i-i-i-2] + ... + dp[i-i-i-i-i]*dp[i-i-i-i-i]\n        # dp[i] = dp[i-1]*dp[i-1] + dp[i-2]*dp[i-2] + dp[i-3]*dp[i-3] + ... + dp[i-i]*dp[i-i] + dp[i-i-1]*dp[i-i-1] + dp[i-i-2]*dp[i-i-2] + ... + dp[i-i-i]*dp[i-i-i] + dp[i-i-i-1]*dp[i-i-i-1] + dp[i-i-i-2]*dp[i-i-i-2] + ... + dp[i-i-i-i]*dp[i-i-i-i] + dp[i-i-i-i-1]*dp[i-i-i-i-1] + dp[i-i-i-i-2]*dp[i-i-i-i-2] + ... + dp[i-i-i-i-i]*dp[i-i-i-i-i"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR the number with itself\n        # 3. XOR the number with the number with itself\n        # 4. XOR the number with the number with itself\n        # 5. XOR the number with the number with itself\n        # 6. XOR the number with the number with itself\n        # 7. XOR the number with the number with itself\n        # 8. XOR the number with the number with itself\n        # 9. XOR the number with the number with itself\n        # 10. XOR the number with the number with itself\n        # 11. XOR the number with the number with itself\n        # 12. XOR the number with the number with itself\n        # 13. XOR the number with the number with itself\n        # 14. XOR the number with the number with itself\n        # 15. XOR the number with the number with itself\n        # 16. XOR the number with the number with itself\n        # 17. XOR the number with the number with itself\n        # 18. XOR the number with the number with itself\n        # 19. XOR the number with the number with itself\n        # 20. XOR the number with the number with itself\n        # 21. XOR the number with the number with itself\n        # 22. XOR the number with the number with itself\n        # 23. XOR the number with the number with itself\n        # 24. XOR the number with the number with itself\n        # 25. XOR the number with the number with itself\n        # 26. XOR the number with the number with itself\n        # 27. XOR the number with the number with itself\n        # 28. XOR the number with the number with itself\n        # 29. XOR the number with the number with itself\n        # 30. XOR the number with the number with itself\n        # 31. XOR the number with the number with itself\n        # 32. XOR the number with the number with itself\n        # 33. XOR the number with the number with itself\n        # 34. XOR the number with the number with itself\n        # 35. XOR the number with the number with itself\n        # 36. XOR the number with the number with itself\n        # 37. XOR the number with the number with itself\n        # 38. XOR the number with the number with itself\n        # 39. XOR the number with the number with itself\n        # 40. XOR the number with the number with itself\n        # 41. XOR the number with the number with itself\n        # 42. XOR the number with the number with itself\n        # 43. XOR the number with the number with itself\n        # 44. XOR the number with the number with itself\n        # 45. XOR the number with the number with itself\n        # 46. XOR the number with the number with itself\n        # 47. XOR the number with the number with itself\n        # 48. XOR the number with the number with itself\n        # 49. XOR the number with the number with itself\n        # 50. XOR the number with the number with itself\n        # 51. XOR the number with the number with itself\n        # 52. XOR the number with the number with itself\n        # 53. XOR the number with the number with itself\n        # 54. XOR the number with the number with itself\n        # 55. XOR the number with the number with itself\n        # 56. XOR the number with the number with itself\n        # 57. XOR the number with the number with itself\n        # 58. XOR the number with the number with itself\n        # 59. XOR the number with the number with itself\n        # 60. XOR the number with the number with itself\n        # 61. XOR the number with the number with itself\n        # 62. XOR the number with the number with itself\n        # 63. XOR the number with the number with itself\n        # 64. XOR the number with the number with itself\n        # 65. XOR the number with the number with itself"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i,j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n                i += 2\n            else:\n                total += roman_dict[s[i]]\n                i += 1\n        return total"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hashmap\n        hashmap = {}\n        \n        for num in nums:\n            if num in hashmap:\n                return True\n            hashmap[num] = 1\n        \n        return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # sliding window\n        # use deque\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # deque is a double ended queue\n        # de"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        nums1.extend(nums2)\n        nums1.sort()\n        if len(nums1) % 2 == 0:\n            return (nums1[len(nums1)//2] + nums1[len(nums1)//2 - 1]) / 2\n        else:\n            return nums1[len(nums1)//2]"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L = area / 2\n        # 3. L = sqrt(area)\n        # 4. L = sqrt(area)\n        # 5. L = sqrt(area)\n        # 6. L = sqrt(area)\n        # 7. L = sqrt(area)\n        # 8. L = sqrt(area)\n        # 9. L = sqrt(area)\n        # 10. L = sqrt(area)\n        # 11. L = sqrt(area)\n        # 12. L = sqrt(area)\n        # 13. L = sqrt(area)\n        # 14. L = sqrt(area)\n        # 15. L = sqrt(area)\n        # 16. L = sqrt(area)\n        # 17. L = sqrt(area)\n        # 18. L = sqrt(area)\n        # 19. L = sqrt(area)\n        # 20. L = sqrt(area)\n        # 21. L = sqrt(area)\n        # 22. L = sqrt(area)\n        # 23. L = sqrt(area)\n        # 24. L = sqrt(area)\n        # 25. L = sqrt(area)\n        # 26. L = sqrt(area)\n        # 27. L = sqrt(area)\n        # 28. L = sqrt(area)\n        # 29. L = sqrt(area)\n        # 30. L = sqrt(area)\n        # 31. L = sqrt(area)\n        # 32. L = sqrt(area)\n        # 33. L = sqrt(area)\n        # 34. L = sqrt(area)\n        # 35. L = sqrt(area)\n        # 36. L = sqrt(area)\n        # 37. L = sqrt(area)\n        # 38. L = sqrt(area)\n        # 39. L = sqrt(area)\n        # 40. L = sqrt(area)\n        # 41. L = sqrt(area)\n        # 42. L = sqrt(area)\n        # 43. L = sqrt(area)\n        # 44. L = sqrt(area)\n        # 45. L = sqrt(area)\n        # 46. L = sqrt(area)\n        # 47. L = sqrt(area)\n        # 48. L = sqrt(area)\n        # 49. L = sqrt(area)\n        # 50. L = sqrt(area)\n        # 51. L = sqrt(area)\n        # 52. L = sqrt(area)\n        # 53. L = sqrt(area)\n        # 54. L = sqrt(area)\n        # 55. L = sqrt(area)\n        # 56. L = sqrt(area)\n        # 57. L = sqrt(area)\n        # 58. L = sqrt(area)\n        # 59. L = sqrt(area)\n        # 60. L = sqrt(area)\n        # 61. L = sqrt(area)\n        # 62. L = sqrt(area)\n        # 63. L = sqrt(area)\n        # 64. L = sqrt(area)\n        # 65. L = sqrt(area)\n        # 66. L = sqrt(area)\n        # 67. L = sqrt(area)\n        # 68. L = sqrt(area)\n        # 69. L = sqrt(area)\n        # 70. L = sqrt(area)\n        # 71. L = sqrt(area)\n        # 72. L = sqrt(area)\n        # 73. L = sqrt(area)\n        # 74. L = sqrt(area)"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        \n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    res.append([])\n                    break\n                for i in range(len(curr)):\n                    for j in range(26):\n                        neighbor = curr[:i] + chr(ord(\"a\") + j) + curr[i+1:]\n                        if neighbor in graph:\n                            for neighbor2 in graph[neighbor]:\n                                if neighbor2 not in visited:\n                                    visited.add(neighbor2)\n                                    queue.append(neighbor2)\n            if len(res) > 0:\n                break\n        \n        # build the result\n        res = []\n        if len(res) == 0:\n            return res\n        self.build_result(graph, endWord, res[0], [])\n        return res\n    \n    def build_result(self, graph, endWord, curr, res):\n        if curr == endWord:\n            res.append(curr)\n            return\n        for i in range(len(curr)):\n            for j in range(26):\n                neighbor = curr[:i] + chr(ord(\"a\") + j) + curr[i+1:]\n                if neighbor in graph:\n                    self.build_result(graph, endWord, neighbor, res)\n                    if len(res) > 0:\n                        return\n        return"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]]\n            else:\n                res += [nums[i]]\n                for j in range(len(res)-1, -1, -1):\n                    res.append(res[j] + [nums[i]])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Approach:\n        # 1. Create a stack of indices of the heights array.\n        # 2. Iterate through the heights array.\n        # 3. If the current height is greater than the top of the stack, push the index to the stack.\n        # 4. If the current height is less than the top of the stack, pop the top of the stack and calculate the area.\n        # 5. Repeat steps 3 and 4 until the stack is empty.\n        # 6. Return the maximum area.\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                top = stack.pop()\n                if not stack:\n                    area = heights[top] * i\n                else:\n                    area = heights[top] * (i - stack[-1] - 1)\n                max_area = max(max_area, area)\n            stack.append(i)\n        while stack:\n            top = stack.pop()\n            if not stack:\n                area = heights[top] * len(heights)\n            else:\n                area = heights[top] * (len(heights) - stack[-1] - 1)\n            max_area = max(max_area, area)\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in [\"+\", \"-\", \"*\", \"/\"]:\n                stack.append(int(token))\n            else:\n                num2 = stack.pop()\n                num1 = stack.pop()\n                if token == \"+\":\n                    stack.append(num1 + num2)\n                elif token == \"-\":\n                    stack.append(num1 - num2)\n                elif token == \"*\":\n                    stack.append(num1 * num2)\n                else:\n                    stack.append(int(float(num1) / num2))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        xmin, ymin, xmax, ymax = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        for x1, y1, x2, y2 in rectangles:\n            xmin, ymin, xmax, ymax = min(xmin, x1), min(ymin, y1), max(xmax, x2), max(ymax, y2)\n            area += (x2 - x1) * (y2 - y1)\n        if area != (xmax - xmin) * (ymax - ymin):\n            return False\n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 701\n        # 26^3 = 19683\n        # 26^4 = 416451\n        # 26^5 = 10924101\n        # 26^6 = 33554432\n        # 26^7 = 9007199254\n        # 26^8 = 281474976710\n        # 26^9 = 8589934592\n        # 26^10 = 2516582862\n        # 26^11 = 7776316404\n        # 26^12 = 2058911320\n        # 26^13 = 5764801\n        # 26^14 = 1729761\n        # 26^15 = 488291\n        # 26^16 = 145142\n        # 26^17 = 43329\n        # 26^18 = 129644\n        # 26^19 = 38742\n        # 26^20 = 11622\n        # 26^21 = 3486\n        # 26^22 = 1074\n        # 26^23 = 323\n        # 26^24 = 9\n        # 26^25 = 2\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 701\n        # 26^3 = 19683\n        # 26^4 = 416451\n        # 26^5 = 10924101\n        # 26^6 = 33554432\n        # 26^7 = 9007199254\n        # 26^8 = 281474976710\n        # 26^9 = 8589934592\n        # 26^10 = 2516582862\n        # 26^11 = 7776316404\n        # 26^12 = 2058911320\n        # 26^13 = 5764801\n        # 26^14 = 1729761\n        # 26^15 = 488291\n        # 26^16 = 145142\n        # 26^17 = 43329\n        # 26^18 = 129644\n        # 26^19 = 38742\n        # 26^20 = 11622\n        # 26^21 = 3486\n        # 26^22 = 1074\n        # 26^23 = 323\n        # 26^24 = 9\n        # 26^25 = 2\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 701\n        # 26^3 = 19683\n        # 26^4 = 416451\n        # 26^5 = 10924101\n        # 26^6 = 33554432\n        # 26^7 = 9007199254\n        # 26^8 = 281474976710\n        # 26^9 = 8589934592\n        # 26^10 = 2516582862\n        # 26^11 = 7776316404\n        # 26^12 = 205891"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a string\n        board_str = \"\"\n        for row in board:\n            for num in row:\n                board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a list of integers\n        board_list = [int(num) for num in board_str]\n        \n        # convert board_list to a string\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n                \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to that element\n        # if nums is not rotated, return False\n        \n        # if nums is not rotated, binary search\n        # if target is in nums, return True"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0]*n for _ in range(m)]\n        \n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                break\n            dp[i][0] = 1\n        \n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                break\n            dp[0][j] = 1\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            \n            inorder(root.left, min_diff, prev)\n            \n            if prev is not None:\n                min_diff = min(min_diff, root.val - prev)\n            \n            prev = root.val\n            \n            inorder(root.right, min_diff, prev)\n            \n            return min_diff\n        \n        return inorder(root, float('inf'), None)"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        inorder_list = inorder(root)\n        max_count = 0\n        max_val = None\n        curr_count = 0\n        prev_val = None\n        for val in inorder_list:\n            if val == prev_val:\n                curr_count += 1\n            else:\n                if curr_count > max_count:\n                    max_count = curr_count\n                    max_val = val\n                curr_count = 1\n            prev_val = val\n        if curr_count > max_count:\n            max_count = curr_count\n            max_val = val\n        if max_count == 1:\n            return [max_val]\n        return [max_val]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack)):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        elif len(password) <= 20:\n            return 0\n        else:\n            # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n            # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-1. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-2. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-4. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-5. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-6. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-7. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-8. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-9. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-10. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-11. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-12. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-13. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-14. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-15. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-16. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-17. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-18. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-19. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n            # 3-"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        flag = -1\n        \n        for c in s:\n            res[i] += c\n            if i == 0 or i == numRows - 1:\n                flag = -flag\n            i += flag\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 3. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 4. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 5. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 6. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 7. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 8. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 9. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 10. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 11. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uacfc \uc624\ub978\ucabd\uc744 \uc120\ud0dd\ud55c\ub2e4.\n        # 12. \uc67c\ucabd\uacfc \uc624\ub978\ucabd \uc911 \ub354 \ub192\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \ufffd"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(n) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a hashmap with the range of numbers from 1 to n\n        ## 2. Iterate through the array and for each number, if it exists in the hashmap, remove it\n        ## 3. Return the keys of the hashmap"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. count the number of smaller elements to the right of each element\n        # 3. return the count\n        \n        # 1. sort the array\n        nums = [(num, i) for i, num in enumerate(nums)]\n        nums.sort()\n        \n        # 2. count the number of smaller elements to the right of each element\n        count = [0] * len(nums)\n        for i in range(len(nums)-2, -1, -1):\n            if nums[i][0] > nums[i+1][0]:\n                count[i] = count[i+1] + 1\n        \n        # 3. return the count\n        return count"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        ans = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                ans += 2\n                prev = interval[1] - 1\n            else:\n                ans += 1\n                prev -= 1\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            return root1.val == root2.val and isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n-i-1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l,r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if len(nums) == 0:\n            return 0\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[-1] >= n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            nums.append(n)\n        \n        # edge case"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = -numerator\n            sign = \"-\"\n        elif denominator < 0:\n            denominator = -denominator\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        remainder_dict = {}\n        remainder_dict[remainder] = len(remainder_dict)\n        remainder_str = \"\"\n        while remainder != 0:\n            remainder *= 10\n            quotient, remainder = divmod(remainder, denominator)\n            if remainder in remainder_dict:\n                remainder_str = \"(\" + remainder_str + \")\"\n                break\n            remainder_dict[remainder] = len(remainder_dict)\n            remainder_str += str(quotient)\n        \n        return sign + str(quotient) + remainder_str if remainder_str else str(quotient)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the linked list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # recursively sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add the remaining nodes from the left half\n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        dp = [envelopes[0][1]]\n        for i in range(1, len(envelopes)):\n            if envelopes[i][1] > dp[-1]:\n                dp.append(envelopes[i][1])\n            else:\n                left = 0\n                right = len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < envelopes[i][1]:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = envelopes[i][1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        \n        ## O(1) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        #             if i == 0:\n        #                 matrix[i][j] = 0\n        #             elif j == 0:\n        #                 matrix[0][j] = 0\n        #             else:\n        #                 matrix[i][0] = 0\n        \n        ## O(1) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        #             if i == 0:\n        #                 matrix[i][j] = 0\n        #             elif j == 0:\n        #                 matrix[0][j] = 0\n        #             else:\n        #                 matrix[i][0] = 0\n        #             matrix[0][j] = 0\n        #             matrix[i][0] = 0\n        \n        ## O(1) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        #             matrix[0][j] = 0\n        #             matrix[i][0] = 0\n        \n        ## O(1) space\n        # row = [False] * len(matrix)\n        # col = [False] * len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = True\n        #             col[j] = True\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] or col[j]:\n        #             matrix[i][j] = 0\n        #             matrix[0][j] = 0\n        #             matrix[i][0] = 0\n        #             matrix[0][0] = 0\n        #             matrix[0][j] = 0\n        #             matrix[i][0] = 0\n        #             matrix[0][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Initialize a dummy node with head as its next node\n        ## 2. Initialize a slow and fast pointer with dummy node\n        ## 3. Move the fast pointer n nodes ahead of the slow pointer\n        ## 4. Move the slow pointer until the fast pointer reaches the end\n        ## 5. Set the next node of the slow pointer to the next node of the slow pointer\n        ## 6. Return the dummy node's next node\n        \n        dummy = ListNode(0, head)\n        slow = dummy\n        fast = head\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1 = set(nums1)\n        nums2 = set(nums2)\n        \n        return list(nums1 & nums2)"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if sum(machines) % n != 0:\n        #     return -1\n        # n = len(machines)\n        # sum_machines = sum(machines)\n        # avg = sum_machines // n\n        # res = 0\n        # for i in range(n):\n        #     res = max(res, machines[i] - avg)\n        #     machines[i] = avg\n        # return res\n        \n        n = len(machines)\n        if sum(machines) % n != 0:\n            return -1\n        avg = sum(machines) // n\n        res = 0\n        for i in range(n):\n            res = max(res, machines[i] - avg)\n            machines[i] = avg\n        return res"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        low = 1\n        high = m * n\n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e58\u4ee5\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8fd4\u56de\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for i in range(m):\n            heights = [0] * n\n            for j in range(n-1, -1, -1):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n        \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return nums[0]\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            \n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            \n            if nums[mid] < nums[left]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I'\n        }\n        \n        roman_num = ''\n        \n        for key in roman_dict.keys():\n            roman_num += roman_dict[key] * (num // key)\n            num %= key\n            \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## 1st solution\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ## \n        ##"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def solve(board):\n            # find an empty cell\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for k in range(1,10):\n                            if isValid(board, i, j, str(k)):\n                                board[i][j] = str(k)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n        \n        def isValid(board, row, col, num):\n            # check row\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            \n            # check col\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            \n            # check 3x3 box\n            box_row = row // 3\n            box_col = col // 3\n            \n            for i in range(box_row*3, box_row*3 + 3):\n                for j in range(box_col*3, box_col*3 + 3):\n                    if board[i][j] == num:\n                        return False\n            \n            return True\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the linked list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        left = 0\n        right = num\n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i,j,word,visited):\n            if len(word) == 0:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return False\n            visited[i][j] = True\n            res = dfs(i+1,j,word[1:],visited) or dfs(i-1,j,word[1:],visited) or dfs(i,j+1,word[1:],visited) or dfs(i,j-1,word[1:],visited)\n            visited[i][j] = False\n            return res\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['*'] = True\n        \n        res = []\n        visited = [[False for _ in range(len(board[0]))] for _ in range(len(board))]\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,word,visited):\n                    res.append(word)\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 3 sets for each row, col, and 3x3 box\n        # 2. iterate through each row, col, and 3x3 box\n        # 3. if the value is not a digit, return False\n        # 4. if the value is a digit, add it to the set\n        # 5. if the set has more than 1 value, return False\n        # 6. return True\n        \n        rows = [set() for _ in range(9)]\n        cols = [set() for _ in range(9)]\n        boxes = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    box_idx = (i // 3) * 3 + j // 3\n                    boxes[box_idx].add(num)\n        \n        for row, col, box in zip(rows, cols, boxes):\n            if len(row) != 9 or len(col) != 9 or len(box) != 9:\n                return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                answer.append(\"Fizz\")\n            elif i%5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 25600\n        # 26^4 = 144000\n        # 26^5 = 7372800\n        # 26^6 = 393216000\n        # 26^7 = 21843200000\n        # 26^8 = 1152921504000\n        # 26^9 = 57646075200000\n        # 26^10 = 3174153504000000\n        # 26^11 = 176726320000000000\n        # 26^12 = 1000000000000000000\n        # 26^13 = 50000000000000000000\n        # 26^14 = 2600000000000000000000\n        # 26^15 = 132000000000000000000000\n        # 26^16 = 6600000000000000000000000\n        # 26^17 = 330000000000000000000000000\n        # 26^18 = 16500000000000000000000000000\n        # 26^19 = 873000000000000000000000000000\n        # 26^20 = 4365000000000000000000000000000\n        # 26^21 = 218730000000000000000000000000000\n        # 26^22 = 1093650000000000000000000000000000\n        # 26^23 = 5468730000000000000000000000000000\n        # 26^24 = 27343650000000000000000000000000000\n        # 26^25 = 136187300000000000000000000000000000\n        # 26^26 = 680936500000000000000000000000000000\n        # 26^27 = 3404687300000000000000000000000000000\n        # 26^28 = 17023436500000000000000000000000000000\n        # 26^29 = 85117087300000000000000000000000000000\n        # 26^30 = 425585436500000000000000000000000000000\n        # 26^31 = 21279221873000000000000"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while first and second:\n            temp1 = first.next\n            temp2 = second.next\n            \n            first.next = second\n            second.next = temp1\n            \n            first = temp1\n            second = temp2\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the number of words is not equal to the number of letters in the pattern, return False\n        if len(words) != len(pattern):\n            return False\n        \n        # create a dictionary to store the mapping between letters and words\n        mapping = {}\n        \n        # iterate through the pattern and words\n        for letter, word in zip(pattern, words):\n            # if the letter is already in the mapping, check if the word is the same as the word associated with the letter\n            if letter in mapping:\n                if mapping[letter] != word:\n                    return False\n            # if the letter is not in the mapping, add it with the word as the value\n            else:\n                mapping[letter] = word\n        \n        # if all the letters are mapped correctly, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, res):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]], res)\n        \n        res = []\n        backtrack(nums, [], res)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the result list\n        result = ListNode()\n        # Initialize the current node\n        current = result\n        # Initialize the carry\n        carry = 0\n        \n        # Loop until both lists are empty\n        while l1 or l2 or carry:\n            # Add the values of the two lists\n            if l1:\n                value1 = l1.val\n                l1 = l1.next\n            else:\n                value1 = 0\n            if l2:\n                value2 = l2.val\n                l2 = l2.next\n            else:\n                value2 = 0\n            # Add the values of the two lists\n            sum_value = value1 + value2 + carry\n            # Set the carry to the sum of the values\n            carry = sum_value // 10\n            # Set the value of the current node to the sum of the values\n            current.next = ListNode(sum_value % 10)\n            # Move the current node to the next node\n            current = current.next\n        \n        # Return the result list\n        return result.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert num to binary\n        # 2. reverse the binary\n        # 3. convert the binary to decimal\n        # 4. return the decimal\n        \n        binary = bin(num)[2:]\n        binary = binary[::-1]\n        decimal = int(binary, 2)\n        return decimal"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        cur_len = 0\n        cur_words = []\n        for word in words:\n            if cur_len + len(word) + len(cur_words) > maxWidth:\n                if len(cur_words) == 1:\n                    res.append(cur_words[0] + ' ' * (maxWidth - cur_len))\n                else:\n                    num_spaces = (maxWidth - cur_len) // (len(cur_words) - 1)\n                    extra_spaces = (maxWidth - cur_len) % (len(cur_words) - 1)\n                    res.append(''.join([cur_words[i] + ' ' * num_spaces + (' ' if i < extra_spaces else '') for i in range(len(cur_words))]))\n                cur_len = 0\n                cur_words = []\n            cur_len += len(word)\n            cur_words.append(word)\n        if cur_len > 0:\n            res.append(' '.join(cur_words) + ' ' * (maxWidth - cur_len))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N^2)\n        # Space Complexity: O(N)\n        \n        # Create a set of words\n        word_set = set(words)\n        \n        # Create a dictionary to store the concatenated words\n        concatenated_words = {}\n        \n        # Iterate through the words in the set\n        for word in word_set:\n            # If the word is already in the dictionary, add it to the concatenated words list\n            if word in concatenated_words:\n                concatenated_words[word] = True\n            else:\n                # Initialize a flag to track if the word can be concatenated\n                can_be_concatenated = False\n                \n                # Iterate through the words in the set\n                for i in range(len(word)):\n                    # Check if the substring of the word is in the set\n                    if word[i:] in word_set:\n                        # If the substring is in the set, set the flag to True\n                        can_be_concatenated = True\n                        break\n                    \n                # If the word can be concatenated, add it to the dictionary\n                if can_be_concatenated:\n                    concatenated_words[word] = True\n        \n        # Return the concatenated words list\n        return [word for word in words if concatenated_words.get(word, False)]"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    cols.add(col)\n                    diag1.add(row + col)\n                    diag2.add(row - col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row + col)\n                    diag2.remove(row - col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = sorted(set(nums))\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}