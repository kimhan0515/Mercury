{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for i > 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j-1] + dp[i-1][j-1] if s[i-1] == t[j-1]\n        #         = dp[i][j-1]\n        # dp[0][j] = 1 if j == 0\n        # dp[i][0] = 0 for"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Mark all negative numbers, 0s, and numbers larger than the length of the array as invalid\n        # 2. Iterate through the array and mark the numbers as present\n        # 3. Iterate through the array again and return the first number that is not present\n        \n        # 1. Mark all negative numbers, 0s, and numbers larger than the length of the array as invalid\n        for i in range(len(nums)):\n            if nums[i] <= 0:\n                nums[i] = float('inf')\n        \n        # 2. Iterate through the array and mark the numbers as present\n        for i in range(len(nums)):\n            num = abs(nums[i])\n            if num <= len(nums):\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        # 3. Iterate through the array again and return the first number that is not present\n        for i in range(1, len(nums) + 1):\n            if nums[i - 1] > 0:\n                return i\n        \n        return len(nums) + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        res = \"\"\n        nums = [i for i in range(1, n+1)]\n        for i in range(n-1, -1, -1):\n            # 2.1 calculate the index of the current digit\n            idx = k // fact\n            # 2.2 calculate the digit\n            res += str(nums[idx])\n            # 2.3 remove the digit from the list\n            nums.remove(nums[idx])\n            # 2.4 update k\n            k %= fact\n            # 2.5 update the factorial\n            fact //= i\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Two pointers\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            for j in range(i, len(num)):\n                if j > i and num[i] == '0':\n                    break\n                curr_num = int(num[i:j+1])\n                if op:\n                    backtrack(j+1, curr + curr_num, curr_num, res, op + '+' + str(curr_num))\n                    backtrack(j+1, curr - curr_num, -curr_num, res, op + '-' + str(curr_num))\n                else:\n                    backtrack(j+1, curr_num, curr_num, res, str(curr_num))\n        \n        res = []\n        backtrack(0, 0, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            left_sum = dfs(root.left, curr_sum * 10 + root.val)\n            right_sum = dfs(root.right, curr_sum * 10 + root.val)\n            \n            return left_sum + right_sum\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return '-'.join(s[i:i+k] for i in range(0, n, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return false if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if first character matches\n        first_match = bool(s) and p[0] in (s[0], '?')\n        \n        # if p is not empty, check if there is a star\n        if len(p) > 1 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    first_match and self.isMatch(s[1:], p))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            removed = len(nums) - k\n            out = []\n            for num in nums:\n                while removed and out and out[-1] < num:\n                    out.pop()\n                    removed -= 1\n                out.append(num)\n            return out\n        \n        def merge(nums1, nums2, k):\n            merged = []\n            i, j = 0, 0\n            while i < len(nums1) and j < len(nums2) and len(merged) < k:\n                if nums1[i] > nums2[j]:\n                    merged.append(nums1[i])\n                    i += 1\n                else:\n                    merged.append(nums2[j])\n                    j += 1\n            merged.extend(nums1[i:])\n            merged.extend(nums2[j:])\n            return merged\n        \n        def get_max_k_nums(nums1, nums2, k):\n            if len(nums1) > len(nums2):\n                return get_max_k_nums(nums2, nums1, k)\n            if len(nums2) - len(nums1) >= k:\n                return nums2\n            return pick(merge(nums1, nums2, k), k)\n        \n        return get_max_k_nums(nums1, nums2, k)"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                sum += i + num // i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        lo, hi = 0, nums[-1] - nums[0]\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if sum(bisect_right(nums, mid) - bisect_left(nums, mid) for x in nums) >= k:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and s[left] not in vowels:\n                left += 1\n            while left < right and s[right] not in vowels:\n                right -= 1\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all the numbers from 0 to n+58\n        ## XOR all the numbers from 0 to n+59"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        \n        while queue:\n            word, level = queue.popleft()\n            if word == endWord:\n                return level\n            \n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z') + 1):\n                    new_word = word[:i] + chr(j) + word[i+1:]\n                    if new_word in wordList:\n                        queue.append((new_word, level + 1))\n                        wordList.remove(new_word)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a, b = list(a), list(b)\n        \n        carry = 0\n        for i in range(len(a)):\n            if i < len(b):\n                a[i] = str(int(a[i]) + int(b[i]) + carry)\n            else:\n                a[i] = str(int(a[i]) + carry)\n            carry = int(a[i] > '1')\n            if carry and i == len(a) - 1:\n                a.append('1')\n            else:\n                a[i] = str(int(a[i]) % 2)\n        return ''.join(a)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, find_left):\n            left, right = 0, len(nums) - 1\n            index = -1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid] > target or (find_left and nums[mid] == target):\n                    right = mid - 1\n                    index = mid\n                else:\n                    left = mid + 1\n            return index\n        \n        left_index = binary_search(nums, target, True)\n        \n        if left_index == -1:\n            return [-1, -1]\n        \n        return [left_index, binary_search(nums, target, False)]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = 0\n        \n        for i in range(n):\n            if i > cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i] - prices[i - 1] for i in range(1, len(prices))) for _ in range(k))\n        \n        dp = [[0] * 2 for _ in range(k + 1)]\n        for i in range(1, len(prices)):\n            for j in range(1, k + 1):\n                dp[j][0] = max(dp[j][0], dp[j - 1][1] + prices[i])\n                dp[j][1] = max(dp[j][1], dp[j - 1][0] - prices[i])\n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_dict_rev = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_dict_rev.update({10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'})\n        hex_dict_rev.update({16: '0', 17: '1', 18: '2', 19: '3', 20: '4', 21: '5', 22: '6', 23: '7', 24: '8', 25: '9'})\n        hex_dict_rev.update({26: 'a', 27: 'b', 28: 'c', 29: 'd', 30: 'e', 31: 'f'})\n        \n        if num < 0:\n            num = 2 ** 32 + num\n        \n        hex_str = ''\n        \n        while num > 0:\n            rem = num % 16\n            if rem in hex_dict_rev:\n                hex_str = hex_dict_rev[rem] + hex_str\n            else:\n                hex_str = str(rem) + hex_str\n            num = num // 16\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add its index to the list\n        # if it is not, add it to the hashmap with a frequency of 1\n        # if the list is empty, return -1\n        # if the list has more than one element, return the first element\n        \n        # create a hashmap to store the frequency of each character\n        # create a list to store the indices of the first unique character\n        # iterate through the string and for each character, check if it is in the hashmap\n        # if it is, remove it from the hashmap and add"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) < 2:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff == 0:\n            return False\n        \n        if valueDiff == 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= len(nums):\n            return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        curr_count = 0\n        \n        for num in nums:\n            if num == 1:\n                curr_count += 1\n            else:\n                curr_count = 0\n            max_count = max(max_count, curr_count)\n        \n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = list(num1), list(num2)\n        \n        carry = 0\n        for i in range(len(num1)):\n            if i < len(num2):\n                carry += int(num1[i]) + int(num2[i])\n            else:\n                carry += int(num1[i])\n            num1[i] = str(carry % 10)\n            carry //= 10\n        \n        if carry:\n            num1.append(str(carry))\n        \n        return ''.join(num1[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        def helper(s, i, sign):\n            res = 0\n            while i < len(s):\n                if s[i].isdigit():\n                    res = res * 10 + int(s[i])\n                elif s[i] == '(':\n                    res, i = helper(s, i + 1, 1)\n                elif s[i] == ')':\n                    return res, i + 1\n                else:\n                    if sign == 1:\n                        res += helper(s, i + 1, 1)\n                    else:\n                        res -= helper(s, i + 1, -1)\n                i += 1\n            return res, i\n        \n        return helper(s, 0, 1)[0]"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort by capital\n        projects = sorted(zip(capital, profits))\n        \n        # greedy: pick the project with the smallest capital\n        # until we have enough capital to buy the next project\n        # or we have no more projects to pick\n        for i in range(len(projects)):\n            if projects[i][0] <= w:\n                heapq.heappush(projects, projects[i])\n            else:\n                break\n        \n        # greedy: pick the project with the smallest capital\n        # until we have enough capital to buy the next project\n        # or we have no more projects to pick\n        for i in range(min(k, len(projects))):\n            w += heapq.heappop(projects)[1]\n        \n        return w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '{':\n                stack.append('}')\n            elif i == '[':\n                stack.append(']')\n            elif stack and stack[-1] == i:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the number that is smaller than the next number\n        # swap the two numbers\n        # reverse the numbers after the index\n        \n        # find the first number that is smaller than the next number\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # find the first number that is larger than the number that is smaller than the next number\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers after the index\n        nums[i + 1:] = nums[len(nums) - 1: i - 1:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if k == 0:\n            return False\n        \n        if len(nums) > k:\n            return True\n        \n        nums_dict = {}\n        \n        for i in range(len(nums)):\n            if nums[i] in nums_dict:\n                if i - nums_dict[nums[i]] <= k:\n                    return True\n            nums_dict[nums[i]] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            res.append(level)\n        \n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 0:\n            return 0\n        \n        couples = [(row[i], i) for i in range(n)]\n        couples.sort()\n        \n        ans = 0\n        for i in range(n):\n            if couples[i][1] % 2 == 0:\n                if couples[i][0] != couples[i + 1][0] + 1:\n                    ans += 1\n                    couples[i + 1] = couples[i]\n        return ans"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = j = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        ans = []\n        for word in words:\n            if word[0] in row1:\n                r = row1\n            elif word[0] in row2:\n                r = row2\n            else:\n                r = row3\n            if all(w in r for w in word):\n                ans.append(word)\n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        for i in range(right - left):\n            temp = curr.next\n            curr.next = temp.next\n            temp.next = prev.next\n            prev.next = temp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the suffix of the string\n        # that is also a palindrome\n        # if the string is a palindrome, then the longest palindrome is itself"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        # create a hashmap for the characters in t\n        # and their counts\n        count_t = collections.Counter(t)\n        \n        # create a hashmap for the characters in s\n        # and their counts\n        count_s = collections.Counter()\n        \n        # create a hashmap for the characters in s\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        #"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i] == distance[i - 3] and distance[i - 1] == distance[i - 4]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3] - distance[i - 5]:\n                return True\n            if i >= 6 and distance[i] + distance[i - 5] >= distance[i - 2] and distance[i - 1] == distance[i - 4] - distance[i - 6]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        \n        while curr:\n            while curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            curr = curr.next\n        \n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the number of each letter\n        # 2. if the number is odd, add 1 to the result\n        # 3. if the number is even, add it to the result\n        \n        # 1.\n        letter_count = {}\n        for letter in s:\n            if letter not in letter_count:\n                letter_count[letter] = 1\n            else:\n                letter_count[letter] += 1\n        \n        # 2.\n        result = 0\n        for letter in letter_count:\n            if letter_count[letter] % 2 == 0:\n                result += letter_count[letter]\n            else:\n                result += letter_count[letter] - 1\n        \n        # 3.\n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder.pop())\n        idx = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[idx+1:], postorder)\n        root.left = self.buildTree(inorder[:idx], postorder)\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def bfs(start, end):\n            q = collections.deque([start])\n            visited = set([start])\n            steps = 0\n            while q:\n                for _ in range(len(q)):\n                    i, j = q.popleft()\n                    if [i, j] == end:\n                        return steps\n                    for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                        ni, nj = i + di, j + dj\n                        if 0 <= ni < m and 0 <= nj < n and forest[ni][nj] > 0 and (ni, nj) not in visited:\n                            q.append((ni, nj))\n                            visited.add((ni, nj))\n                steps += 1\n            return -1\n        \n        m, n = len(forest), len(forest[0])\n        trees = [(i, j) for i in range(m) for j in range(n) if forest[i][j] > 1]\n        trees.sort(key=lambda x: forest[x[0]][x[1]])\n        steps = 0\n        for i, j in trees:\n            steps += bfs((i, j), (m - 1, n - 1))\n            if steps < 0:\n                return steps\n            steps += 1\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. calculate the prefix sum\n        # 2. sort the prefix sum\n        # 3. use two pointers to find the range sum\n        # 4. use binary search to find the range sum\n        # 5. use two pointers to find the range sum\n        # 6. use binary search to find the range sum\n        # 7. use two pointers to find the range sum\n        # 8. use two pointers to find the range sum\n        # 9. use two pointers to find the range sum\n        # 10. use two pointers to find the range sum\n        # 11. use two pointers to find the range sum\n        # 12. use two pointers to find the range sum\n        # 13. use two pointers to find the range sum\n        # 14. use two pointers to find the range sum\n        # 15. use two pointers to find the range sum\n        # 16. use two pointers to find the range sum\n        # 17. use two pointers to find the range sum\n        # 18. use two pointers to find the range sum\n        # 19. use two pointers to find the range sum\n        # 20. use two pointers to find the range sum\n        # 21. use two pointers to find the range sum\n        # 22. use two pointers to find the range sum\n        # 23. use two pointers to find the range sum\n        # 24. use two pointers to find the range sum\n        # 25. use two pointers to find the range sum\n        # 26. use two pointers to find the range sum\n        # 27. use two pointers to find the range sum\n        # 28. use two pointers to find the range sum\n        # 29. use two pointers to find the range sum\n        # 30. use two pointers to find the range sum\n        # 31. use two pointers to find the range sum\n        # 32. use two pointers to find the range sum\n        # 33. use two pointers to find the range sum\n        # 34. use two pointers to find the range sum\n        # 35. use two pointers to find the range sum\n        # 36. use two pointers to find the range sum\n        # 37. use two pointers to find the range sum\n        # 38. use two pointers to find the range sum\n        # 39. use two pointers to find the range sum\n        # 40. use two pointers to find the range sum\n        # 41. use two pointers to find the range sum\n        # 42. use two pointers to find the range sum\n        # 43. use two pointers to find the range sum\n        # 44. use two pointers to find the range sum\n        # 45. use two pointers to find the range sum\n        # 46. use two pointers to find the range sum\n        # 47. use two pointers to find the range sum\n        # 48. use two pointers to find the range sum\n        # 49. use two pointers to find the range sum\n        # 50. use two pointers to find the range sum\n        # 51. use two pointers to find the range sum\n        # 52. use two pointers to find the range sum\n        # 53. use two pointers to find the range sum\n        # 54. use two pointers to find the range sum\n        # 55. use two pointers to find the range sum\n        # 56. use two pointers to find the range sum\n        # 57. use two pointers to find the range sum\n        # 58. use two pointers to find the range sum\n        # 59. use two pointers to find the range sum\n        # 60. use two pointers to find the range sum\n        # 61. use two pointers to find the range sum\n        # 62. use two pointers to"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1: Binary Search\n        # Time Complexity: O(log(n))\n        # Space Complexity: O(1)\n        # 1. n is the sum of all the coins\n        # 2. n is the sum of all the coins\n        # 3. n is the sum of all the coins\n        # 4. n is the sum of all the coins\n        # 5. n is the sum of all the coins\n        # 6. n is the sum of all the coins\n        # 7. n is the sum of all the coins\n        # 8. n is the sum of all the coins\n        # 9. n is the sum of all the coins\n        # 10. n is the sum of all the coins\n        # 11. n is the sum of all the coins\n        # 12. n is the sum of all the coins\n        # 13. n is the sum of all the coins\n        # 14. n is the sum of all the coins\n        # 15. n is the sum of all the coins\n        # 16. n is the sum of all the coins\n        # 17. n is the sum of all the coins\n        # 18. n is the sum of all the coins\n        # 19. n is the sum of all the coins\n        # 20. n is the sum of all the coins\n        # 21. n is the sum of all the coins\n        # 22. n is the sum of all the coins\n        # 23. n is the sum of all the coins\n        # 24. n is the sum of all the coins\n        # 25. n is the sum of all the coins\n        # 26. n is the sum of all the coins\n        # 27. n is the sum of all the coins\n        # 28. n is the sum of all the coins\n        # 29. n is the sum of all the coins\n        # 30. n is the sum of all the coins\n        # 31. n is the sum of all the coins\n        # 32. n is the sum of all the coins\n        # 33. n is the sum of all the coins\n        # 34. n is the sum of all the coins\n        # 35. n is the sum of all the coins\n        # 36. n is the sum of all the coins\n        # 37. n is the sum of all the coins\n        # 38. n is the sum of all the coins\n        # 39. n is the sum of all the coins\n        # 40. n is the sum of all the coins\n        # 41. n is the sum of all the coins\n        # 42. n is the sum of all the coins\n        # 43. n is the sum of all the coins\n        # 44. n is the sum of all the coins\n        # 45. n is the sum of all the coins\n        # 46. n is the sum of all the coins\n        # 47. n is the sum of all the coins\n        # 48. n is the sum of all the coins\n        # 49. n is the sum of all the coins\n        # 50. n is the sum of all the coins\n        # 51. n is the sum of all the coins\n        # 52. n is the sum of all the coins\n        # 53. n is the sum of all the coins\n        # 54. n is the sum of all the coins\n        # 55. n is the sum of all the coins\n        # 56. n is the sum of all the coins\n        # 57. n is the sum of all the coins\n        # 58. n is the sum of all the coins\n        # 59. n is the sum of all the coins\n        # 60. n is the sum of all the coins\n        # 61. n is the sum of all the coins\n        # 62. n is the sum of all the coins\n        # 63. n is the sum of all the coins\n        # 64. n is the sum of all the coins\n        # 65. n is the sum of all the coins\n        # 66. n is the sum of all the coins\n        # 67."}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        \n        return result"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        for c in t:\n            if i == len(s):\n                return True\n            if c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2^n - 1 is the last number of the sequence\n        # 2. 2^n - 1 - 2^(n-1) is the first number of the sequence\n        # 3. 2^(n-1) is the difference between the first and last number of the sequence\n        # 4. 2^(n-1) - 1 is the difference between the second and third number of the sequence\n        # 5. 2^(n-1) - 2 is the difference between the third and fourth number of the sequence\n        # 6. 2^(n-1) - 3 is the difference between the fourth and fifth number of the sequence\n        # 7. 2^(n-1) - 4 is the difference between the fifth and sixth number of the sequence\n        # 8. 2^(n-1) - 5 is the difference between the sixth and seventh number of the sequence\n        # 9. 2^(n-1) - 6 is the difference between the seventh and eighth number of the sequence\n        # 10. 2^(n-1) - 7 is the difference between the eighth and nth number of the sequence\n        # 11. 2^(n-1) - 8 is the difference between the nth and (n+1)th number of the sequence\n        # 12. 2^(n-1) - 9 is the difference between the (n+1)th and (n+2)th number of the sequence\n        # 13. 2^(n-1) - 10 is the difference between the (n+2)th and (n+3)th number of the sequence\n        # 14. 2^(n-1) - 11 is the difference between the (n+3)th and (n+4)th number of the sequence\n        # 15. 2^(n-1) - 12 is the difference between the (n+4)th and (n+5)th number of the sequence\n        # 16. 2^(n-1) - 13 is the difference between the (n+5)th and (n+6)th number of the sequence\n        # 17. 2^(n-1) - 14 is the difference between the (n+6)th and (n+7)th number of the sequence\n        # 18. 2^(n-1) - 15 is the difference between the (n+7)th and (n+8)th number of the sequence\n        # 19. 2^(n-1) - 16 is the difference between the (n+8)th and (n+9)th number of the sequence\n        # 20. 2^(n-1) - 17 is the difference between the (n+9)th and (n+10)th number of the sequence\n        # 21. 2^(n-1) - 18 is the difference between the (n+10)th and (n+11)th number of the sequence\n        # 22. 2^(n-1) - 19 is the difference between the (n+11)th and (n+12)th number of the sequence\n        # 23. 2^(n-1) - 20 is the difference between the (n+12)th and (n+13)th number of the sequence\n        # 24. 2^(n-1) - 21 is the difference between the (n+13)th and (n+14)th number of the sequence\n        # 25. 2^(n-1) - 22 is the difference between the (n+14)th and (n+15)th number of the sequence\n        # 26. 2^(n-1) - 23 is the difference between the (n+15)th and (n+16)th number of the sequence\n        # 27. 2^(n-1) - 24 is the difference between the (n+16)th and (n+17)th number of the sequence\n        # 28. 2^(n-1) - 25 is the difference between the (n+17)th and (n+18"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if not (node.val < right and node.val > left):\n                return False\n            \n            return valid(node.left, left, node.val) and valid(node.right, node.val, right)\n        \n        return valid(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is smaller than the first element in the list, insert it at the beginning\n        if newInterval[0] < intervals[0][0]:\n            return [newInterval] + intervals\n        \n        # if the new interval is larger than the last element in the list, insert it at the end\n        if newInterval[1] > intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        # if the new interval overlaps with the first element in the list, merge the new interval with the first element\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval] + intervals[1:]\n        \n        # if the new interval overlaps with the last element in the list, merge the new interval with the last element\n        if newInterval[0] >= intervals[-1][0] and newInterval[1] <= intervals[-1][1]:\n            return intervals[:-1] + [newInterval]\n        \n        # if the new interval overlaps with the middle elements in the list, merge the new interval with the middle elements\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i+1:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                return intervals[:i] + [newInterval] + intervals[i:]\n        \n        # if the new interval does not overlap with any elements in the list, insert the new interval at the appropriate position\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval["}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of each list\n        # 2. use min heap to store the max of each list\n        # 3. use max heap to store the min of each list\n        # 4. while the max heap has more than 1 element, compare the max of the max heap with the min of the min heap\n        # 5. if the max of the max heap is greater than the min of the min heap, update the min range\n        # 6. if the max of the max heap is equal to the min of the min heap, update the min range\n        # 7. return the min range\n        \n        # 1. find the min and max of each list\n        min_val = float('inf')\n        max_val = float('-inf')\n        for num in nums:\n            min_val = min(min_val, num[0])\n            max_val = max(max_val, num[-1])\n        \n        # 2. use min heap to store the max of each list\n        max_heap = [(num[-1], i) for i, num in en\n        enumerate(nums)]\n        heapq.heapify(max_heap)\n        \n        # 3. use max heap to store the min of each list\n        min_heap = [(num[0], i) for i, num in enumerate(nums)]\n        heapq.heapify(min_heap)\n        \n        # 4. while the max heap has more than 1 element, compare the max of the max heap with the min of the min heap\n        # 5. if the max of the max heap is greater than the min of the min heap, update the min range\n        # 6. if the max of the max heap is equal to the min of the min heap, update the min range\n        # 7. return the min range\n        min_range = [min_val, max_val]\n        while len(max_heap) > 1:\n            max_val = max_heap[0][0]\n            min_val = min_heap[0][0]\n            if max_val - min_val < min_range[1] - min_range[0]:\n                min_range = [min_val, max_val]\n            if max_val == min_heap[0][0]:\n                break\n            heapq.heappop(max_heap)\n            heapq.heappush(min_heap, (nums[min_heap[0][1]][heapq.heappop(min_heap)[1] + 1], min_heap[0][1]))\n        \n        return min_range"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 pig can test 1 bucket\n        # 2. 1 pig can test 2 buckets\n        # 3. 1 pig can test 4 buckets\n        # 4. 1 pig can test 8 buckets\n        # 5. 1 pig can test 16 buckets\n        # 6. 1 pig can test 32 buckets\n        # 7. 1 pig can test 64 buckets\n        # 8. 1 pig can test 128 buckets\n        # 9. 1 pig can test 256 buckets\n        # 10. 1 pig can test 512 buckets\n        # 11. 1 pig can test 1024 buckets\n        # 12. 1 pig can test 2048 buckets\n        # 13. 1 pig can test 4096 buckets\n        # 14. 1 pig can test 8192 buckets\n        # 15. 1 pig can test 16384 buckets\n        # 16. 1 pig can test 32768 buckets\n        # 17. 1 pig can test 65536 buckets\n        # 18. 1 pig can test 131072 buckets\n        # 19. 1 pig can test 262144 buckets\n        # 20. 1 pig can test 524288 buckets\n        # 21. 1 pig can test 1048576 buckets\n        # 22. 1 pig can test 2097152 buckets\n        # 23. 1 pig can test 4194304 buckets\n        # 24. 1 pig can test 8388608 buckets\n        # 25. 1 pig can test 16777216 buckets\n        # 26. 1 pig can test 33554432 buckets\n        # 27. 1 pig can test 67108864 buckets\n        # 28. 1 pig can test 134217728 buckets\n        # 29. 1 pig can test 268435456 buckets\n        # 30. 1 pig can test 536870912 buckets\n        # 31. 1 pig can test 1073741824 buckets\n        # 32. 1 pig can test 2147483648 buckets\n        # 33. 1 pig can test 4294967296 buckets\n        # 34. 1 pig can test 8589934592 buckets\n        # 35. 1 pig can test 17179869184 buckets\n        # 36. 1 pig can test 34359738368 buckets\n        # 37. 1 pig can test 68719476736 buckets\n        # 38. 1 pig can test 137438953472 buckets\n        # 39. 1 pig can test 274877906944 buckets\n        # 40. 1 pig can test 549755813888 buckets\n        # 41. 1 pig can test 1099511627776 buckets\n        # 42. 1 pig can test 2199023255552 buckets\n        # 43. 1 pig can test 4398046511104 buckets\n        # 44. 1 pig can test 8796093022208 buckets\n        # 45. 1 pig can test 17592186044416 buckets\n        # 46. 1 pig can test 35184372088832 buckets\n        # 47. 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        seen = set()\n        seen.add((0, 0))\n        res = 0\n        \n        while heap:\n            t, i, j = heapq.heappop(heap)\n            res = max(res, t)\n            if i == j == n - 1:\n                return res\n            for ni, nj in ((i, j + 1), (i, j - 1), (i + 1, j), (i - 1, j)):\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in seen:\n                    heapq.heappush(heap, (grid[ni][nj], ni, nj))\n                    seen.add((ni, nj))"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # create a 2D array to store the number of unique paths to each cell\n        # the number of unique paths to a cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of unique paths to the cell to the left\n        # the number of unique paths to the cell is the sum of the number of unique paths to the cell above and the cell to the left\n        # the number of unique paths to the cell above is the number of unique paths to the cell above\n        # the number of unique paths to the cell to the left is the number of"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res) - 1):\n            res[i + 1] += res[i] // 10\n            res[i] %= 10\n            \n        res = [str(x) for x in res]\n        res = ''.join(res[::-1]).lstrip('0')\n        \n        return res or '0'"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        ## 7. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        ## 7. DP with constant space\n        ## 8. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        ## 7. DP with constant space\n        ## 8. DP with constant space\n        ## 9. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        ## 7. DP with constant space\n        ## 8. DP with constant space\n        ## 9. DP with constant space\n        ## 10. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        ## 7. DP with constant space\n        ## 8. DP with constant space\n        ## 9. DP with constant space\n        ## 10. DP with constant space\n        ## 11. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        ## 7. DP with constant space\n        ## 8. DP with constant space\n        ## 9. DP with constant space\n        ## 10. DP with constant space\n        ## 11. DP with constant space\n        ## 12. DP with constant space\n        \n        ## 1. 2 pointer approach\n        ## 2. 1 pointer approach\n        ## 3. DP\n        ## 4. DP with constant space\n        ## 5. DP with constant space\n        ## 6. DP with constant space\n        ## 7. DP with constant space\n        ## 8. DP with constant space\n        ## 9. DP with constant space\n        ## 10. DP with constant space"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, nums, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(nums)):\n            if nums[i] > target:\n                break\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            self.dfs(nums, target - nums[i], i + 1, path + [nums[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper() and word[1:].islower():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        ## 2. DP\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## 1. Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        max_profit = 0\n        for i in range(len(prices)):\n            for j in range(i+1, len(prices)):\n                max_profit = max(max_profit, prices[j] - prices[i])\n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                result.append(root.val)\n                root = root.right\n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    if count > 0:\n                        count -= 1\n                    else:\n                        return False\n            return count == 0\n        \n        left, right = 0, len(s)\n        while left < right:\n            if isValid(s):\n                return [s]\n            else:\n                if s[left] == '(':\n                    left += 1\n                elif s[left] == ')':\n                    right -= 1\n                else:\n                    left += 1\n        return [s[i:j] for i, j in ((left, right) if isValid(s[left:j]) else (right, left) for j in range(left, right + 1))]"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # if lists is empty, return None\n        if not lists:\n            return None\n        \n        # if there is only one list, return it\n        if len(lists) == 1:\n            return lists[0]\n        \n        # if there are more than one list, merge them\n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i+1] if i+1 < len(lists) else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        \n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode()\n        \n        # create a pointer to the dummy node\n        curr = dummy\n        \n        # while both lists have nodes, merge them\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        # if l1 is longer than l2, add the remaining nodes to the merged list\n        if l1:\n            curr.next = l1\n        else:\n            curr.next = l2\n        \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1."}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # build a reverse lookup table\n        reverse_lookup = {word[::-1]: i for i, word in en\n                         enumerate(words)}\n        \n        # build a result list\n        result = []\n        \n        # iterate over all words\n        for i, word in enumerate(words):\n            # if the current word is a palindrome\n            if word in reverse_lookup:\n                # if the current word is the same as its reverse\n                if i != reverse_lookup[word]:\n                    result.append([i, reverse_lookup[word]])\n            # if the current word is not a palindrome\n            else:\n                # iterate over all possible prefixes\n                for j in range(len(word) + 1):\n                    # if the current prefix is a palindrome\n                    if word[:j] in reverse_lookup:\n                        # if the current word is the reverse of the current prefix\n                        if word[j:] in reverse_lookup:\n                            result.append([i, reverse_lookup[word[j:]]])\n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def spread(isInfected):\n            m, n = len(isInfected), len(isInfected[0])\n            res = 0\n            while True:\n                infected = set()\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.add((i, j))\n                if not infected:\n                    break\n                res += 1\n                for i, j in infected:\n                    isInfected[i][j] = 2\n                for i, j in infected:\n                    for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        ni, nj = i + di, j + dj\n                        if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 1:\n                            isInfected[i][j] = 3\n            return res\n        \n        m, n = len(isInfected), len(isInfected[0])\n        res = 0\n        while True:\n            res += spread(isInfected)\n            isInfected = [[0] * n for _ in range(m)]\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        isInfected[i][j] = 3\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 3:\n                        isInfected[i][j] = 1\n            if not any(1 in row for row in isInfected):\n                break\n        return res"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        max_len = 1\n        \n        for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, ni, nj))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1):\n                if dp[j] and s[j:i + 1] in wordDict:\n                    dp[i + 1] = True\n        \n        if dp[-1]:\n            return [s[:i + 1] for i in range(len(s)) if dp[i + 1]]\n        else:\n            return []"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_nodes = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_nodes.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                level_nodes.reverse()\n            result.append(level_nodes)\n            level += 1\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def gen_time(h, m):\n            if h > 11 or m > 59:\n                return\n            return '%d:%02d' % (h, m)\n        \n        def gen_times(h, m):\n            if h > 11 or m > 59:\n                return\n            return [gen_time(h, m), gen_time(h + 1, m - 1), gen_time(h + 2, m - 2), gen_time(h + 3, m - 3), gen_time(h + 4, m - 4), gen_time(h + 5, m - 5), gen_time(h + 6, m - 6), gen_time(h + 7, m - 7), gen_time(h + 8, m - 8), gen_time(h + 9, m - 9)]\n        \n        if turnedOn > 10:\n            return []\n        \n        res = []\n        for h in range(12):\n            m = turnedOn - h\n            if m < 0:\n                break\n            res += gen_times(h, m)\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, i):\n                row.append(res[i-1][j-1] + res[i-1][j])\n            row.append(1)\n            res.append(row)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            new_path = node.val + left_gain + right_gain\n            \n            self.max_sum = max(self.max_sum, new_path)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if (i, j) not in seen:\n                seen.add((i, j))\n                ans += h\n                for ni, nj in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                    if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                        heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. find the median\n        # 3. return the median\n        \n        # 1. sort the array\n        nums.sort()\n        \n        # 2. find the median\n        if len(nums) % 2 == 0:\n            return (nums[k//2] + nums[k//2 - 1]) / 2.0\n        else:\n            return nums[k//2]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        curr = head\n        for _ in range(length - k - 1):\n            curr = curr.next\n        \n        new_head = curr.next\n        curr.next = None\n        \n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        \n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        while n % 3 == 0:\n            n = n / 3\n        while n % 5 == 0:\n            n = n / 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the positions by left coordinate\n        # 2. use a monotonic stack to keep track of the max height\n        # 3. use a hashmap to keep track of the max height for each left coordinate\n        # 4. return the max height for each left coordinate\n        \n        positions.sort(key=lambda x: x[0])\n        max_height = 0\n        max_height_map = {}\n        ans = []\n        \n        for left, side_length in positions:\n            max_height += side_length\n            max_height_map[left] = max_height\n            ans.append(max_height)\n            \n            for right in range(left, left + side_length):\n                max_height_map[right] = max(max_height_map[right], max_height)\n                \n        return ans"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        \n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                sums = [max(sums[i] - k, 0) for i in range(m)]\n                sums = [0] + sums\n                sums = [sums[i] + (sums[i + 1] if i + 1 < m else 0) for i in range(m + 1)]\n                sums = [max(sums[i] - k, 0) for i in range(m + 1)]\n                res = max(res, max(sums))\n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend > 0 and divisor > 0:\n            return self.divide_helper(dividend, divisor)\n        else:\n            return -self.divide_helper(abs(dividend), abs(divisor))\n        \n    def divide_helper(self, dividend, divisor):\n        if dividend < divisor:\n            return 0\n        \n        if dividend < divisor * 2:\n            return 1\n        \n        count = 1\n        temp = divisor\n        while temp < dividend:\n            count *= 2\n            temp *= 2\n        \n        return count + self.divide_helper(dividend - temp, divisor)"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary to store the number and its index\n        num_dict = {}\n        \n        # iterate through the list of numbers\n        for i, num in enumerate(nums):\n            \n            # check if the difference between the target and the current number is in the dictionary\n            if target - num in num_dict:\n                \n                # return the index of the current number and the index of the number that is the difference between the target and the current number\n                return [num_dict[target - num], i]\n            \n            # add the current number to the dictionary with its index\n            num_dict[num] = i"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(len(cards)):\n                    if i != j:\n                        a, b = cards[i], cards[j]\n                        for op in ['+', '-', '*', '/']:\n                            if op == '+':\n                                new_a, new_b = a + b, a - b\n                            elif op == '-':\n                                new_a, new_b = a - b, b - a\n                            elif op == '*':\n                                new_a, new_b = a * b, a / b\n                            else:\n                                new_a, new_b = b / a, a / b\n                            if new_b > 0 and backtrack([new_a] + cards[0:i] + cards[i+1:j] + cards[j+1:], target):\n                                return True\n                            if new_a > 0 and backtrack([new_b] + cards[0:i] + cards[i+1:j] + cards[j+1:], target):\n                                return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if not s:\n            return not p or p == '*'\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:]) or self.isMatch(s[1:], p)\n        \n        if p[0] == '?' or p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100388/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/pro"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in sorted(tickets):\n            graph[from_city].append(to_city)\n        \n        # dfs\n        res = []\n        def dfs(from_city):\n            # if there is no more city to visit, add to the result\n            if len(graph[from_city]) == 0:\n                res.append(from_city)\n                return\n            # visit all the next city\n            for i in range(len(graph[from_city])):\n                next_city = graph[from_city][i]\n                graph[from_city].pop(i)\n                dfs(next_city)\n                # backtrack\n                graph[from_city].insert(i, next_city)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the building is ending\n            if building[1] < 0:\n                # add the building to the result\n                result.append([building[0], -building[1]])\n            else:\n                # find the index of the building in the result\n                i = 0\n                while i < len(result) and result[i][0] < building[0]:\n                    i += 1\n                # if the building is ending\n                if building[1] < 0:\n                    # add the building to the result\n                    result.append([building[0], -building[1]])\n                else:\n                    # if the building is ending\n                    if result[i][1] < -building[1]:\n                        # add the building to the result\n                        result.append([building[0], -building[1]])\n                    else:\n                        # if the building is ending\n                        if result[i][1] < building[1]:\n                            # add the building to the result\n                            result.append([building[0], building[1]])\n        # remove the last element from the result\n        result.pop()\n        # return the result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word in the string\n        for i in range(len(s)):\n            s[i] = s[i][::-1]"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 20:\n                return ones[num]\n            if num < 100:\n                return tens[num//10] + helper(num%10)\n            if num < 1000:\n                return ones[num//100] + \" Hundred\" + helper(num%100)\n            if num < 1000000:\n                return helper(num//1000) + \" Thousand\" + helper(num%1000)\n            if num < 1000000000:\n                return helper(num//1000000) + \" Million\" + helper(num%1000000)\n            return helper(num//1000000000) + \" Billion\" + helper(num%1000000000)\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [[0] * (k + 1) for _ in range(n + 1)]\n        for i in range(1, n + 1):\n            for j in range(1, k + 1):\n                if j < i:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i - 1][j] + dp[i - 1][j - 1]) % MOD\n                    if j >= i:\n                        dp[i][j] -= dp[i - 1][j - i]\n        return dp[n][k] % MOD"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = {}\n        child = {}\n        for u, v in edges:\n            if u not in parent:\n                parent[u] = v\n            else:\n                child[u] = v\n        \n        # find the node with only one parent\n        for u, v in edges:\n            if u not in parent and v not in parent:\n                return [u, v]\n            elif u in parent and v in parent:\n                return [parent[u], v]\n        \n        # find the node with only one child\n        for u, v in edges:\n            if u not in child and v not in child:\n                return [u, v]\n            elif u in child and v in child:\n                return [u, v]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, res):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            \n            for i in range(len(nums)):\n                if i > 0 and nums[i] == nums[i - 1]:\n                    continue\n                backtrack(nums[:i] + nums[i + 1:], path + [nums[i]], res)\n        \n        nums.sort()\n        res = []\n        backtrack(nums, [], res)\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## XOR\n        ## a ^ a = 0\n        ## a ^ 0 = a\n        ## a ^ b ^ a = b\n        ## a ^ b ^ b ^ a = a\n        ## a ^ b ^ a ^ b = b\n        ## a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a = b\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b = a\n        ## a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b ^ a ^ b"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(n):\n                for j2 in range(n):\n                    p1 = max(j1 - 1, 0)\n                    p2 = min(j1 + 1, n - 1)\n                    p3 = max(j2 - 1, 0)\n                    p4 = min(j2 + 1, n - 1)\n                    if grid[i][j1] == -1 or grid[i][j2] == -1:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2]\n                    elif j1 == j2:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1]\n                    else:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1] + grid[i][j2]\n                    if p1 <= p2 and p3 <= p4:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][p1][p3])\n        return dp[n - 1][n - 1][n - 1]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if the last element is 0, it is impossible to reach the end\n        if nums[-1] == 0:\n            return False\n        \n        # if the last element is 1, it is possible to reach the end\n        if nums[-1] == 1:\n            return True\n        \n        # if the last element is greater than 1, we need to find the index of the first element that can reach the end\n        # if the last element is greater than the first element, it is impossible to reach the end\n        if nums[-1] > len(nums) - 1:\n            return False\n        \n        # if the last element is greater than the first element, we need to find the index of the first element that can reach the end\n        # if the last element is greater than the first element, it is impossible to reach the end\n        for i in range(len(nums) - 2, -1, -1):\n            if nums[i] + i >= len(nums) - 1:\n                return True\n        \n        return False"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        res = '1'\n        for i in range(1, n):\n            res = self.helper(res)\n        return res\n    \n    def helper(self, s):\n        res = ''\n        count = 1\n        for i in range(1, len(s)):\n            if s[i] == s[i-1]:\n                count += 1\n            else:\n                res += str(count) + s[i-1]\n                count = 1\n        res += str(count) + s[-1]\n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max sum of the subarray\n        # if the max sum is less than the sum of the subarray, then the max sum is too small\n        # if the max sum is greater than the sum of the subarray, then the max sum is too large\n        # if the max sum is equal to the sum of the subarray, then the max sum is the answer\n        # binary search the max sum\n        # if the number of subarrays is less than k, then the max sum is too small\n        # if the number of subarrays is greater than k, then the max sum is too large\n        # if the number of subarrays is equal to k, then the max sum is the answer\n        # binary search the max sum\n        \n        # find the max sum of the subarray\n        def getMaxSum(nums, k):\n            maxSum = 0\n            curSum = 0\n            for num in nums:\n                if curSum + num > maxSum:\n                    maxSum = curSum + num\n                    if maxSum > curSum:\n                        curSum = maxSum\n                else:\n                    curSum += num\n            return maxSum\n        \n        # binary search the max sum\n        left = max(nums)\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if getMaxSum(nums, k) > mid:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if pivot is not found, then the array is not rotated\n        if pivot == -1:\n            return self.binary_search(nums, target)\n        \n        # if the target is found in the first part of the array, search in the first part\n        if nums[pivot] == target:\n            return pivot\n        \n        # if the target is found in the second part of the array, search in the second part\n        if nums[0] <= target:\n            return self.binary_search(nums[:pivot+1], target)\n        \n        # if the target is not found in either part, search in the second part\n        return self.binary_search(nums[pivot+1:], target)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[mid + 1]:\n                return mid\n            \n            if nums[mid] < nums[mid - 1]:\n                return mid - 1\n            \n            if nums[mid] > nums[left]:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1\n    \n    def binary_search(self, nums, target):\n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\n        res = ['']\n        \n        for digit in digits:\n            for letter in phone[digit]:\n                for i in range(len(res)):\n                    res.append(res[i] + letter)\n        \n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of n\n        length = len(n)\n        \n        # 2. get the number of digits in n\n        digits = length // 2\n        \n        # 3. get the left and right half of n\n        left = n[:digits]\n        right = n[digits:]\n        \n        # 4. get the possible candidates\n        candidates = [int(left), int(right)]\n        candidates.append(int(left) - 1)\n        candidates.append(int(left) + 1)\n        \n        # 5. get the closest palindrome\n        closest = min(candidates, key=lambda x: abs(x - int(n)))\n        \n        # 6. return the closest palindrome\n        return str(closest)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n-1, 0, n-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            \n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the maximum product and the current maximum product\n        max_product = nums[0]\n        curr_max = nums[0]\n        \n        # Iterate through the array from left to right\n        for i in range(1, len(nums)):\n            # If the current number is positive, update the current maximum product\n            if nums[i] > 0:\n                curr_max = max(nums[i], curr_max * nums[i])\n            # If the current number is negative, update the maximum product\n            else:\n                curr_max = max(nums[i], curr_max * nums[i])\n                max_product = max(max_product, curr_max)\n        \n        return max_product"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if there is a way to jump to the ith stone\n        dp = {0: True}\n        for s in stones:\n            dp[s] = False\n        \n        for s in stones:\n            for k in range(s+1):\n                if dp[s] and s+k in dp:\n                    dp[s+k] = True\n                if k > 0 and s+k-1 in dp:\n                    dp[s+k-1] = True\n                if k > 1 and s+k-2 in dp:\n                    dp[s+k-2] = True\n        \n        return dp[stones[-1]]"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a hashmap to store the index of each score\n        score_map = {score_sorted[i]: i for i in range(len(score_sorted))}\n        \n        # create a list of the rank of each score\n        rank = [None] * len(score)\n        for i, s in enumerate(score):\n            rank[score_map[s]] = str(i + 1)\n        \n        # replace the score with the rank\n        for i, s in en\n            if rank[i] == '1':\n                rank[i] = 'Gold Medal'\n            elif rank[i] == '2':\n                rank[i] = 'Silver Medal'\n            elif rank[i] == '3':\n                rank[i] = 'Bronze Medal'\n        \n        return rank"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the max length of the substring\n        max_len = 0\n        \n        # Initialize the start and end of the substring\n        start = 0\n        end = 0\n        \n        # Initialize the set to store the characters in the substring\n        char_set = set()\n        \n        # Iterate over the string\n        while end < len(s):\n            # If the character is not in the set, add it to the set\n            if s[end] not in char_set:\n                char_set.add(s[end])\n                end += 1\n                max_len = max(max_len, end - start)\n            else:\n                # If the character is in the set, remove the character from the set\n                char_set.remove(s[start])\n                start += 1\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = collections.Counter(words)\n        res = []\n        \n        for i in range(word_len):\n            left = i\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s) - word_len + 1, word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                else:\n                    left = j + word_len\n                    word_dict_copy = word_dict.copy()\n                if not word_dict_copy:\n                    res.append(left)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            elif max_val > arr[i]:\n                chunks += 1\n                max_val = arr[i]\n                \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                curr.next, curr.next.next, prev.next = curr.next.next, curr.next, curr\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n            \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s < 0:\n                    l += 1\n                elif s > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(root, path):\n            if not root:\n                return\n            path += str(root.val)\n            if not root.left and not root.right:\n                self.paths.append(path)\n            else:\n                path += '->'\n                dfs(root.left, path)\n                dfs(root.right, path)\n        \n        self.paths = []\n        dfs(root, '')\n        return self.paths"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] = v1[i] * 10**(len(v1) - i - 1)\n            if i < len(v2):\n                v2[i] = v2[i] * 10**(len(v2) - i - 1)\n        \n        if v1 < v2:\n            return -1\n        elif v1 > v2:\n            return 1\n        else:\n            return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        for duration, end in courses:\n            # add course to queue\n            heapq.heappush(pq, -duration)\n            \n            # add course to total time\n            total += duration\n            \n            # if total time exceeds end date, remove course from queue\n            if total > end:\n                total += heapq.heappop(pq)\n                \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while True:\n            tail = prev\n            for i in range(k):\n                if not tail:\n                    return dummy.next\n                tail = tail.next\n            head = prev.next\n            tail = head\n            for i in range(k):\n                tmp = head.next\n                head.next = head\n                head = tmp\n            prev.next = head\n            prev = tail\n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in (s+s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR all the numbers again\n        # 3. XOR all the numbers again\n        # 4. XOR all the numbers again\n        # 5. XOR all the numbers again\n        # 6. XOR all the numbers again\n        # 7. XOR all the numbers again\n        # 8. XOR all the numbers again\n        # 9. XOR all the numbers again\n        # 10. XOR all the numbers again\n        # 11. XOR all the numbers again\n        # 12. XOR all the numbers again\n        # 13. XOR all the numbers again\n        # 14. XOR all the numbers again\n        # 15. XOR all the numbers again\n        # 16. XOR all the numbers again\n        # 17. XOR all the numbers again\n        # 18. XOR all the numbers again\n        # 19. XOR all the numbers again\n        # 20. XOR all the numbers again\n        # 21. XOR all the numbers again\n        # 22. XOR all the numbers again\n        # 23. XOR all the numbers again\n        # 24. XOR all the numbers again\n        # 25. XOR all the numbers again\n        # 26. XOR all the numbers again\n        # 27. XOR all the numbers again\n        # 28. XOR all the numbers again\n        # 29. XOR all the numbers again\n        # 30. XOR all the numbers again\n        # 31. XOR all the numbers again\n        # 32. XOR all the numbers again\n        # 33. XOR all the numbers again\n        # 34. XOR all the numbers again\n        # 35. XOR all the numbers again\n        # 36. XOR all the numbers again\n        # 37. XOR all the numbers again\n        # 38. XOR all the numbers again\n        # 39. XOR all the numbers again\n        # 40. XOR all the numbers again\n        # 41. XOR all the numbers again\n        # 42. XOR all the numbers again\n        # 43. XOR all the numbers again\n        # 44. XOR all the numbers again\n        # 45. XOR all the numbers again\n        # 46. XOR all the numbers again\n        # 47. XOR all the numbers again\n        # 48. XOR all the numbers again\n        # 49. XOR all the numbers again\n        # 50. XOR all the numbers again\n        # 51. XOR all the numbers again\n        # 52. XOR all the numbers again\n        # 53. XOR all the numbers again\n        # 54. XOR all the numbers again\n        # 55. XOR all the numbers again\n        # 56. XOR all the numbers again\n        # 57. XOR all the numbers again\n        # 58. XOR all the numbers again\n        # 59. XOR all the numbers again\n        # 60. XOR all the numbers again\n        # 61. XOR all the numbers again\n        # 62. XOR all the numbers again\n        # 63. XOR all the numbers again\n        # 64. XOR all the numbers again\n        # 65. XOR all the numbers again\n        # 66. XOR all the numbers again\n        # 67. XOR all the numbers again\n        # 68. XOR all the numbers again\n        # 69. XOR all the numbers again\n        # 70. XOR all the numbers again\n        # 71. XOR all the numbers again\n        # 72. XOR all the numbers again\n        # 73. XOR all the numbers again\n        # 74. XOR all the numbers again\n        # 75. XOR all the numbers again\n        # 76. XOR all the numbers again\n        # 77. XOR all the numbers again\n        # 78. XOR all the numbers again\n        # 79. XOR all the numbers again\n        # 80. X"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict for each sticker\n        # 2. build a dict for each letter in target\n        # 3. iterate through target, for each letter, check if it can be made from stickers\n        # 4. if it can, add 1 to the count\n        # 5. if it can't, check if it can be made from stickers with one less sticker\n        # 6. if it can't, return -1\n        \n        sticker_dict = {}\n        for sticker in stickers:\n            sticker_dict[sticker] = sticker_dict.get(sticker, 0) + 1\n        \n        target_dict = {}\n        for letter in target:\n            target_dict[letter] = target_dict.get(letter, 0) + 1\n        \n        queue = [(target_dict, 0)]\n        visited = set()\n        \n        while queue:\n            target_dict, count = queue.pop(0)\n            if target_dict == sticker_dict:\n                return count\n            if target_dict in visited:\n                continue\n            visited.add(target_dict)\n            for letter in target_dict:\n                if target_dict[letter] > 0:\n                    new_dict = target_dict.copy()\n                    new_dict[letter] -= 1\n                    for sticker in sticker_dict:\n                        if new_dict[sticker] > 0:\n                            new_dict[sticker] -= 1\n                            if new_dict[sticker] == 0:\n                                new_dict.pop(sticker)\n                            queue.append((new_dict, count + 1))\n        return -1"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = min(dp[i][j - 1] + 1, dp[j][j])\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a dictionary to map roman numerals to their integer values\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        \n        # Initialize the result to 0\n        result = 0\n        \n        # Iterate over the string in reverse order\n        for i in range(len(s) - 1):\n            # If the current character is less than the next character, subtract it from the result\n            if roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            # Otherwise, add the current character to the result\n            else:\n                result += roman_dict[s[i]]\n        \n        # Add the last character to the result\n        result += roman_dict[s[-1]]\n        \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        res = []\n        \n        for i in range(len(nums)):\n            while q and q[0] <= i - k:\n                q.popleft()\n            while q and nums[q[-1]] < nums[i]:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # if len(nums1) > len(nums2):\n        #     nums1, nums2 = nums2, nums1\n        #    \n        # if len(nums1) == 0:\n        #     return nums2[len(nums2) // 2]\n        # \n        # if len(nums2) == 0:\n        #     return nums1[len(nums1) // 2]\n        # \n        # if len(nums1) == 1 and len(nums2) == 1:\n        #     return (nums1[0] + nums2[0]) / 2.0\n        # \n        # if len(nums1) == 1:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2) // 2 - 1]) / 2.0\n        #     else:\n        #         return nums2[len(nums2) // 2]\n        # \n        # if len(nums2) == 1:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1) // 2 - 1] + nums2[0]) / 2.0\n        #     else:\n        #         return nums1[len(nums1) // 2]\n        # \n        # if len(nums1) == 2 and len(nums2) == 2:\n        #     return (max(nums1[0], nums2[0]) + min(nums1[1], nums2[1])) / 2.0\n        # \n        # if len(nums1) == 2:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2) // 2 - 1]) / 2.0\n        #     else:\n        #         return nums2[len(nums2) // 2]\n        # \n        # if len(nums2) == 2:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1) // 2 - 1] + nums2[0]) / 2.0\n        #     else:\n        #         return nums1[len(nums1) // 2]\n        # \n        # if len(nums1) == 3 and len(nums2) == 3:\n        #     return (max(nums1[0], nums2[0]) + max(nums1[1], nums2[1])) / 2.0\n        # \n        # if len(nums1) == 3:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2) // 2 - 1]) / 2.0\n        #     else:\n        #         return nums2[len(nums2) // 2]\n        # \n        # if len(nums2) == 3:\n        #     if len(nums1) % 2 == 0:\n        #         return (nums1[len(nums1) // 2 - 1] + nums2[0]) / 2.0\n        #     else:\n        #         return nums1[len(nums1) // 2]\n        # \n        # if len(nums1) == 4 and len(nums2) == 4:\n        #     return (max(nums1[0], nums2[0]) + max(nums1[1], nums2[1])) / 2.0\n        # \n        # if len(nums1) == 4:\n        #     if len(nums2) % 2 == 0:\n        #         return (nums1[0] + nums2[len(nums2) // 2 - 1]) / 2.0\n        #     else:\n        #         return nums2[len(nums2) // 2]\n        # \n        # if len(num"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[l]\n        \n        # linear search\n        return min(nums)"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L <= area ** 0.5\n        # 3. L >= W\n        # 4. L - W = area - L * W\n        # 5. L >= W\n        # 6. L ** 2 - area = W ** 2\n        # 7. L ** 2 - area = W ** 2\n        # 8. L ** 2 - area = W ** 2\n        # 9. L ** 2 - area = W ** 2\n        # 10. L ** 2 - area = W ** 2\n        # 11. L ** 2 - area = W ** 2\n        # 12. L ** 2 - area = W ** 2\n        # 13. L ** 2 - area = W ** 2\n        # 14. L ** 2 - area = W ** 2\n        # 15. L ** 2 - area = W ** 2\n        # 16. L ** 2 - area = W ** 2\n        # 17. L ** 2 - area = W ** 2\n        # 18. L ** 2 - area = W ** 2\n        # 19. L ** 2 - area = W ** 2\n        # 20. L ** 2 - area = W ** 2\n        # 21. L ** 2 - area = W ** 2\n        # 22. L ** 2 - area = W ** 2\n        # 23. L ** 2 - area = W ** 2\n        # 24. L ** 2 - area = W ** 2\n        # 25. L ** 2 - area = W ** 2\n        # 26. L ** 2 - area = W ** 2\n        # 27. L ** 2 - area = W ** 2\n        # 28. L ** 2 - area = W ** 2\n        # 29. L ** 2 - area = W ** 2\n        # 30. L ** 2 - area = W ** 2\n        # 31. L ** 2 - area = W ** 2\n        # 32. L ** 2 - area = W ** 2\n        # 33. L ** 2 - area = W ** 2\n        # 34. L ** 2 - area = W ** 2\n        # 35. L ** 2 - area = W ** 2\n        # 36. L ** 2 - area = W ** 2\n        # 37. L ** 2 - area = W ** 2\n        # 38. L ** 2 - area = W ** 2\n        # 39. L ** 2 - area = W ** 2\n        # 40. L ** 2 - area = W ** 2\n        # 41. L ** 2 - area = W ** 2\n        # 42. L ** 2 - area = W ** 2\n        # 43. L ** 2 - area = W ** 2\n        # 44. L ** 2 - area = W ** 2\n        # 45. L ** 2 - area = W ** 2\n        # 46. L ** 2 - area = W ** 2\n        # 47. L ** 2 - area = W ** 2\n        # 48. L ** 2 - area = W ** 2\n        # 49. L ** 2 - area = W ** 2\n        # 50. L ** 2 - area = W ** 2\n        # 51. L ** 2 - area = W ** 2\n        # 52. L ** 2 - area = W ** 2\n        # 53. L ** 2 - area = W ** 2\n        # 54. L ** 2 - area = W ** 2\n        # 55. L ** 2 - area = W ** 2\n        # 56. L ** 2 - area = W ** 2\n        # 57. L ** 2 - area = W ** 2\n        # 58. L ** 2 - area = W ** 2\n        # 59. L ** 2 - area = W **"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # build the queue\n        queue = collections.deque([beginWord])\n        visited = {beginWord: 0}\n        while queue:\n            word = queue.popleft()\n            if word == endWord:\n                break\n            for i in range(len(word)):\n                for j in range(26):\n                    neighbor = word[:i] + chr(ord(\"a\") + j) + word[i+1:]\n                    for n in graph[neighbor]:\n                        if n not in visited:\n                            visited[n] = visited[word] + 1\n                            queue.append(n)\n        \n        # build the result\n        res = []\n        if endWord not in visited:\n            return res\n        while endWord in visited:\n            res.append([endWord])\n            endWord = visited[endWord]\n        return res[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [r + [nums[i]] for r in res]\n            else:\n                res += [r + [nums[i]] for r in res[:-1]]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc5d0 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 3. \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294 \uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 4. \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud55c\ub2e4.\n        # 5. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 6. \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294 \uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 7. \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud55c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 9. \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub2e4\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ub294 \uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 10. \uc624\ub978\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc5c6\ub2e4\uba74 \uc2a4\ud0dd\uc5d0 \uc778\ub371\uc2a4\ub97c \uc800\uc7a5\ud55c\ub2e4.\n        # 11. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uc778\ub371\uc2a4\ub97c \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0 \ub354 \ud070 \uc218\uac00 \uc788\ufffd"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_max, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 26^1 * 26\n        # 26^3 = 26^2 * 26\n        # 26^4 = 26^3 * 26\n        # 26^5 = 26^4 * 26\n        # 26^6 = 26^5 * 26\n        # 26^7 = 26^6 * 26\n        # 26^8 = 26^7 * 26\n        # 26^9 = 26^8 * 26\n        # 26^10 = 26^9 * 26\n        # 26^11 = 26^10 * 26\n        # 26^12 = 26^11 * 26\n        # 26^13 = 26^12 * 26\n        # 26^14 = 26^13 * 26\n        # 26^15 = 26^14 * 26\n        # 26^16 = 26^15 * 26\n        # 26^17 = 26^16 * 26\n        # 26^18 = 26^17 * 26\n        # 26^19 = 26^18 * 26\n        # 26^20 = 26^19 * 26\n        # 26^21 = 26^20 * 26\n        # 26^22 = 26^21 * 26\n        # 26^23 = 26^22 * 26\n        # 26^24 = 26^23 * 26\n        # 26^25 = 26^24 * 26\n        # 26^26 = 26^25 * 26\n        # 26^27 = 26^26 * 26\n        # 26^28 = 26^27 * 26\n        # 26^29 = 26^28 * 26\n        # 26^30 = 26^29 * 26\n        # 26^31 = 26^30 * 26\n        # 26^32 = 26^31 * 26\n        # 26^33 = 26^32 * 26\n        # 26^34 = 26^33 * 26\n        # 26^35 = 26^34 * 26\n        # 26^36 = 26^35 * 26\n        # 26^37 = 26^36 * 26\n        # 26^38 = 26^37 * 26\n        # 26^39 = 26^38 * 26\n        # 26^40 = 26^39 * 26\n        # 26^41 = 26^40 * 26\n        # 26^42 = 26^41 * 26\n        # 26^43 = 26^42 * 26\n        # 26^44 = 26^43 * 26\n        # 26^45 = 26^44 * 26\n        # 26^46 = 26^45 * 26\n        # 26^47 = 26^46 * 26\n        # 26^48 = 26^47 * 26\n        # 26^49 = 26^48 * 26\n        # 26^50 = 26^49 * 26\n        # 26^51 = 26^50 * 26\n        # 26^52 = 26^51 * 26\n        # 26^53 = 26^52 * 26\n        # 26^54 = 26^53 * 26\n        # 26^55 = 26^5"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        \n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = num\n            else:\n                cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_str = \"\"\n        for row in board:\n            for num in row:\n                board_str += str(num)\n        \n        # convert board_str to a 1D array\n        board_str_arr = [int(x) for x in board_str]\n        \n        # convert board_str_arr to a 2D array\n        board_arr = []\n        for i in range(0, len(board_str_arr), 3):\n            board_arr.append(board_str_arr[i:i+3])\n        \n        # convert board_arr to a 1D array\n        board_arr_str = \"\"\n        for row in board_arr:\n            for num in row:\n                board_arr_str += str(num)\n        \n        # convert board_arr_str to a 1D array\n        board_arr_str_arr = [int(x) for x in board_arr_str]\n        \n        # convert board_arr_str_arr to a 2D array\n        board_arr_str_arr_arr = []\n        for i in range(0, len(board_arr_str_arr), 3):\n            board_arr_str_arr_arr.append(board_arr_str_arr[i:i+3])\n        \n        # convert board_arr_str_arr_arr to a 2D array\n        board_arr_str_arr_arr_arr = []\n        for i in range(0, len(board_arr_str_arr_arr), 3):\n            board_arr_str_arr_arr_arr.append(board_arr_str_arr_arr[i:i+3])\n        \n        # convert board_arr_str_arr_arr_arr to a 2D array\n        board_arr_str_arr_arr_arr_arr = []\n        for i in range(0, len(board_arr_str_arr_arr_arr), 3):\n            board_arr_str_arr_arr_arr_arr.append(board_arr_str_arr_arr_arr[i:i+3])\n        \n        # convert board_arr_str_arr_arr_arr_arr to a 2D array\n        board_arr_str_arr_arr_arr_arr_arr = []\n        for i in range(0, len(board_arr_str_arr_arr_arr_arr), 3):\n            board_arr_str_arr_arr_arr_arr_arr.append(board_arr_str_arr_arr_arr_arr[i:i+3])\n        \n        # convert board_arr_str_arr_arr_arr_arr_arr to a 2D array\n        board_arr_str_arr_arr_arr_arr_arr_arr = []\n        for i in range(0, len(board_arr_str_arr_arr_arr_arr_arr), 3):\n            board_arr_str_arr_arr_arr_arr_arr_arr.append(board_arr_str_arr_arr_arr_arr_arr[i:i+3])\n        \n        # convert board_arr_str_arr_arr_arr_arr_arr_arr to a 2D array\n        board_arr_str_arr_arr_arr_arr_arr_arr_arr = []\n        for i in range(0, len(board_arr_str_arr_arr_arr_arr_arr_arr), 3):\n            board_arr_str_arr_arr_arr_arr_arr_arr_arr.append(board_arr_str_arr_arr_arr_arr_arr_arr[i:i+3])\n        \n        # convert board_arr_str_arr_arr_arr_arr_arr_arr_arr to a 2D array\n        board_arr_str_arr_arr_arr_arr_arr_arr_arr_arr = []\n        for i in range(0, len(board_arr_str_arr_arr_arr_arr_arr_arr_arr), 3):\n            board_arr_str_arr_arr_arr_arr_arr_arr_arr_arr.append(board_arr_str_arr_arr_arr_arr_arr_arr_arr[i:i+3])\n        \n        # convert board"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            s_char = s[i]\n            t_char = t[i]\n            \n            if s_char in s_to_t and s_to_t[s_char] != t_char:\n                return False\n            \n            if t_char in t_to_s and t_to_s[t_char] != s_char:\n                return False\n            \n            s_to_t[s_char] = t_char\n            t_to_s[t_char] = s_char\n            \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r = m\n        pivot = l\n        \n        # search in the sorted part\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[(m + pivot) % len(nums)] == target:\n                return True\n            elif nums[(m + pivot) % len(nums)] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        \n        return dp[m - 1][n - 1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        \n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            \n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                \n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                \n                if sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n                \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                yield from inorder(root.left)\n                yield root.val\n                yield from inorder(root.right)\n        \n        prev = None\n        min_diff = float('inf')\n        for n in inorder(root):\n            if prev:\n                min_diff = min(min_diff, n - prev)\n            prev = n\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def dfs(root):\n            if not root:\n                return [0, float('-inf')]\n            left = dfs(root.left)\n            right = dfs(root.right)\n            if left[0] == right[0]:\n                return [left[0] + 1, root.val]\n            elif left[0] > right[0]:\n                return [left[0] + 1, left[1]]\n            else:\n                return [right[0] + 1, right[1]]\n        \n        return dfs(root)[1:]"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check length\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        if len(password) > 20:\n            return max(20 - len(password), 3)\n        \n        # 2. check for repeating characters\n        # 2.1 check for 3 repeating characters in a row\n        # 2.2 check for 2 repeating characters in a row\n        # 2.3 check for 1 repeating character in a row\n        # 2.4 check for 0 repeating characters in a row\n        # 2.5 check for 0 repeating characters\n        # 2.6 check for 1 repeating character\n        # 2.7 check for 2 repeating characters\n        # 2.8 check for 3 repeating characters\n        # 2.9 check for 4 repeating characters\n        # 2.10 check for 5 repeating characters\n        # 2.11 check for 6 repeating characters\n        # 2.12 check for 7 repeating characters\n        # 2.13 check for 8 repeating characters\n        # 2.14 check for 9 repeating characters\n        # 2.15 check for 10 repeating characters\n        # 2.16 check for 11 repeating characters\n        # 2.17 check for 12 repeating characters\n        # 2.18 check for 13 repeating characters\n        # 2.19 check for 14 repeating characters\n        # 2.20 check for 15 repeating characters\n        # 2.21 check for 16 repeating characters\n        # 2.22 check for 17 repeating characters\n        # 2.23 check for 18 repeating characters\n        # 2.24 check for 19 repeating characters\n        # 2.25 check for 20 repeating characters\n        # 2.26 check for 21 repeating characters\n        # 2.27 check for 22 repeating characters\n        # 2.28 check for 23 repeating characters\n        # 2.29 check for 24 repeating characters\n        # 2.30 check for 25 repeating characters\n        # 2.31 check for 26 repeating characters\n        # 2.32 check for 27 repeating characters\n        # 2.33 check for 28 repeating characters\n        # 2.34 check for 29 repeating characters\n        # 2.35 check for 30 repeating characters\n        # 2.36 check for 31 repeating characters\n        # 2.37 check for 32 repeating characters\n        # 2.38 check for 33 repeating characters\n        # 2.39 check for 34 repeating characters\n        # 2.40 check for 35 repeating characters\n        # 2.41 check for 36 repeating characters\n        # 2.42 check for 37 repeating characters\n        # 2.43 check for 38 repeating characters\n        # 2.44 check for 39 repeating characters\n        # 2.45 check for 40 repeating characters\n        # 2.46 check for 41 repeating characters\n        # 2.47 check for 42 repeating characters\n        # 2.48 check for 43 repeating characters\n        # 2.49 check for 44 repeating characters\n        # 2.50 check for 45 repeating characters\n        # 2.51 check for 46 repeating characters\n        # 2.52 check for 47 repeating characters\n        # 2.53 check for 48 repeating characters\n        # 2.54 check for 49 repeating characters\n        # 2.55 check for 50 repeating characters\n        # 2.56 check for 51 repeating characters\n        # 2.57 check for 52 repeating characters\n        # 2.58 check for 53 repeating characters\n        # 2.59 check for 54 repeating characters\n        # 2.60 check for 55 repeating characters\n        # 2.61 check for 56 repeating characters\n        # 2.62 check for 57 repeating characters\n        # 2.63 check for 58 repeating characters\n        # 2.64 check for 59 repeating characters\n        # 2."}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the number of 5's in the factorial\n        # 2. count the number of 2's in the factorial\n        # 3. return the min of the two\n        \n        if n < 5:\n            return 0\n        \n        count = 0\n        while n >= 5:\n            count += n // 5\n            n = n // 5\n        \n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\"] * numRows\n        curRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[curRow] += c\n            if curRow == 0 or curRow == numRows - 1:\n                goingDown = not goingDown\n            curRow += 1 if goingDown else -1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the max height\n        max_height = max(height)\n        \n        # 2. find the left and right max height\n        left_max = [0] * len(height)\n        right_max = [0] * len(height)\n        \n        for i in range(1, len(height)):\n            left_max[i] = max(left_max[i-1], height[i-1])\n        \n        for i in range(len(height)-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i+1])\n        \n        # 3. find the water\n        water = 0\n        for i in range(len(height)):\n            water += min(left_max[i], right_max[i]) - height[i]\n        \n        return water"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        return [i + 1 for i in range(len(nums)) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use binary search to find the number of smaller elements to the right of each element\n        # 3. use binary search to find the number of smaller elements to the left of each element\n        # 4. use binary search to find the number of smaller elements to the left of each element\n        # 5. use binary search to find the number of smaller elements to the right of each element\n        # 6. use binary search to find the number of smaller elements to the right of each element\n        # 7. use binary search to find the number of smaller elements to the left of each element\n        # 8. use binary search to find the number of smaller elements to the left of each element\n        # 9. use binary search to find the number of smaller elements to the right of each element\n        # 10. use binary search to find the number of smaller elements to the right of each element\n        # 11. use binary search to find the number of smaller elements to the left of each element\n        # 12. use binary search to find the number of smaller elements to the left of each element\n        # 13. use binary search to find the number of smaller elements to the right of each element\n        # 14. use binary search to find the number of smaller elements to the right of each element\n        # 15. use binary search to find the number of smaller elements to the left of each element\n        # 16. use binary search to find the number of smaller elements to the left of each element\n        # 17. use binary search to find the number of smaller elements to the right of each element\n        # 18. use binary search to find the number of smaller elements to the right of each element\n        # 19. use binary search to find the number of smaller elements to the left of each element\n        # 20. use binary search to find the number of smaller elements to the left of each element\n        # 21. use binary search to find the number of smaller elements to the right of each element\n        # 22. use binary search to find the number of smaller elements to the right of each element\n        # 23. use binary search to find the number of smaller elements to the left of each element\n        # 24. use binary search to find the number of smaller elements to the left of each element\n        # 25. use binary search to find the number of smaller elements to the right of each element\n        # 26. use binary search to find the number of smaller elements to the right of each element\n        # 27. use binary search to find the number of smaller elements to the left of each element\n        # 28. use binary search to find the number of smaller elements to the left of each element\n        # 29. use binary search to find the number of smaller elements to the right of each element\n        # 30. use binary search to find the number of smaller elements to the right of each element\n        # 31. use binary search to find the number of smaller elements to the left of each element\n        # 32. use binary search to find the number of smaller elements to the left of each element\n        # 33. use binary search to find the number of smaller elements to the right of each element\n        # 34. use binary search to find the number of smaller elements to the right of each element\n        # 35. use binary search to find the number of smaller elements to the left of each element\n        # 36. use binary search to find the number of smaller elements to the left of each element\n        # 37. use binary search to find the number of smaller elements to the right of each element\n        # 38. use binary search to find the number of smaller elements to the right of each element\n        # 39. use binary search to find the number of smaller elements to the left of each element\n        # 40. use binary search to find the number of smaller elements to the left of each element\n        # 41. use binary search to find the number of smaller elements to the right of each element\n        # 42. use binary search to find the number of smaller elements to the right of each element\n        # 43. use binary search to find the number of smaller elements to the left of each element\n        # 44. use binary search to find the number of smaller elements to the left of each element\n        # 45. use binary search to find the number of smaller elements to the right of each element\n        # 46. use binary search to find"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the intervals by start and end\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        \n        # initialize the result and the current interval\n        res = curr = 0\n        \n        # iterate over the intervals\n        for s, e in intervals:\n            # if the current interval is larger than the current result,\n            # update the result\n            if s > curr:\n                res += 2\n                curr = e\n            # otherwise, update the current interval\n            else:\n                curr = min(curr, e)\n        \n        # return the result\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n /= 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            for left in self.generateParenthesis(i):\n                for right in self.generateParenthesis(n - i - 1):\n                    res.append('({}){}'.format(left, right))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # initialize\n        patches = 0\n        i = 0\n        \n        # iterate\n        while i < len(nums):\n            if nums[i] <= n:\n                n += nums[i]\n                i += 1\n            else:\n                patches += 1\n                n += n\n        \n        return patches"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        # 6. recursion\n        # 7. stack\n        # 8. dp\n        # 9. math\n        # 10. recursion\n        # 11. stack\n        # 12. dp\n        # 13. math\n        # 14. recursion\n        # 15. stack\n        # 16. dp\n        # 17. math\n        # 18. recursion\n        # 19. stack\n        # 20. dp\n        # 21. math\n        # 22. recursion\n        # 23. stack\n        # 24. dp\n        # 25. math\n        # 26. recursion\n        # 27. stack\n        # 28. dp\n        # 29. math\n        # 30. recursion\n        # 31. stack\n        # 32. dp\n        # 33. math\n        # 34. recursion\n        # 35. stack\n        # 36. dp\n        # 37. math\n        # 38. recursion\n        # 39. stack\n        # 40. dp\n        # 41. math\n        # 42. recursion\n        # 43. stack\n        # 44. dp\n        # 45. math\n        # 46. recursion\n        # 47. stack\n        # 48. dp\n        # 49. math\n        # 50. recursion\n        # 51. stack\n        # 52. dp\n        # 53. math\n        # 54. recursion\n        # 55. stack\n        # 56. dp\n        # 57. math\n        # 58. recursion\n        # 59. stack\n        # 60. dp\n        # 61. math\n        # 62. recursion\n        # 63. stack\n        # 64. dp\n        # 65. math\n        # 66. recursion\n        # 67. stack\n        # 68. dp\n        # 69. math\n        # 70. recursion\n        # 71. stack\n        # 72. dp\n        # 73. math\n        # 74. recursion\n        # 75. stack\n        # 76. dp\n        # 77. math\n        # 78. recursion\n        # 79. stack\n        # 80. dp\n        # 81. math\n        # 82. recursion\n        # 83. stack\n        # 84. dp\n        # 85. math\n        # 86. recursion\n        # 87. stack\n        # 88. dp\n        # 89. math\n        # 90. recursion\n        # 91. stack\n        # 92. dp\n        # 93. math\n        # 94. recursion\n        # 95. stack\n        # 96. dp\n        # 97. math\n        # 98. recursion\n        # 99. stack\n        # 100. dp\n        # 101. math\n        # 102. recursion\n        # 103. stack\n        # 104. dp\n        # 105. math\n        # 106. recursion\n        # 107. stack\n        # 108. dp\n        # 109. math\n        # 110. recursion\n        # 111. stack\n        # 112. dp\n        # 113. math\n        # 114. recursion\n        # 115. stack\n        # 116. dp\n        # 117. math\n        # 118. recursion\n        # 119."}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return '0'\n        \n        res = ''\n        if (numerator < 0) ^ (denominator < 0):\n            res += '-'\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        res += str(numerator // denominator)\n        \n        numerator %= denominator\n        if numerator == 0:\n            return res\n        \n        res += '.'\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + '(' + res[seen[numerator]:] + ')'\n                break\n            seen[numerator] = len(res)\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator %= denominator\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # merge the remaining nodes\n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Sort the envelopes by width and height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        # Use a dynamic programming approach to find the longest increasing subsequence\n        # with the current envelope as the ending element\n        dp = [1] * len(envelopes)\n        for i in range(len(envelopes)):\n            for j in range(i):\n                if envelopes[j][1] < envelopes[i][1]:\n                    dp[i] = max(dp[i], dp[j] + 1)\n        \n        return max(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m+n) space\n        ## row and col are set to 0 if the corresponding element is 0\n        ## we iterate over the matrix and set the corresponding row and col to 0\n        ## if the element is 0, we set the corresponding row and col to 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        \n        ## O(1) space\n        ## we iterate over the matrix and set the corresponding row and col to 0 if the corresponding element is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        \n        ## O(1) space\n        ## we iterate over the matrix and set the corresponding row and col to 0 if the corresponding element is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix again and set the corresponding element to 0 if the corresponding row or col is 0\n        ## we iterate over the matrix"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode(0, head)\n        \n        # create a slow and fast pointer\n        slow = dummy\n        fast = head\n        \n        # move fast pointer n steps\n        for i in range(n):\n            fast = fast.next\n        \n        # move both pointers until fast pointer reaches the end\n        while fast:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node\n        slow.next = slow.next.next\n        \n        # return the modified head\n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 0:\n            return 0\n        if sum(machines) % n != 0:\n            return -1\n        avg = sum(machines) // n\n        ans = 0\n        cur = 0\n        for i in machines:\n            cur += i - avg\n            ans = max(ans, abs(cur))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1, list2 = list1.next, list2\n        \n        head = list1\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                list1 = list1.next\n            else:\n                temp = list2\n                list2 = list2.next\n                temp.next = list1\n                list1 = temp\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        \n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0, curr = []):\n            if first == len(nums):\n                output.append(curr[:])\n            else:\n                # include nums[first] in the current subset\n                curr.append(nums[first])\n                backtrack(first + 1, curr)\n                # do not include nums[first] in the current subset\n                curr.pop()\n                backtrack(first + 1, curr)\n        \n        output = [[]]\n        backtrack()\n        return output"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # find the index of the smallest element\n        # if the smallest element is not at the beginning,\n        # then the smallest element will be at the beginning\n        # of the sorted array\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            elif nums[m] < nums[r]:\n                r = m\n            else:\n                r -= 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. remove all spaces\n        s = s.strip()\n        \n        # 2. check if it is a valid number\n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, IV, V, IX, X, XL, L, XC, C, CD, D, CM, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, V, X, L, C, D, M\n        #"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## XOR\n        ## 1. XOR all the characters in s and t\n        ## 2. XOR the result with the first character in t\n        ## 3. Return the result\n        \n        result = 0\n        for c in s:\n            result ^= ord(c)\n        for c in t:\n            result ^= ord(c)\n        return chr(result)"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_location(board, l):\n            for row in range(9):\n                for col in range(9):\n                    if board[row][col] == '.':\n                        l[0] = row\n                        l[1] = col\n                        return True\n            return False\n        \n        def used_in_row(board, row, num):\n            for col in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_col(board, col, num):\n            for row in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_box(board, box_start_row, box_start_col, num):\n            for row in range(3):\n                for col in range(3):\n                    if board[row+box_start_row][col+box_start_col] == num:\n                        return True\n            return False\n        \n        def is_valid(board, row, col, num):\n            return not used_in_row(board, row, num) and not used_in_col(board, col, num) and not used_in_box(board, row - row % 3, col - col % 3, num)\n        \n        def solve_sudoku(board):\n            l = [0, 0]\n            if not find_empty_location(board, l):\n                return True\n            \n            row = l[0]\n            col = l[1]\n            \n            for num in range(1, 10):\n                if is_valid(board, row, col, num):\n                    board[row][col] = str(num)\n                    \n                    if solve_sudoku(board):\n                        return True\n                    \n                    board[row][col] = '.'\n            \n            return False\n        \n        solve_sudoku(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        first = None\n        second = None\n        prev = None\n        \n        def inorder(root):\n            nonlocal first, second, prev\n            if not root:\n                return\n            \n            inorder(root.left)\n            \n            if prev and prev.val > root.val:\n                if not first:\n                    first = prev\n                second = root\n            \n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        \n        # swap the values\n        first.val, second.val = second.val, first.val"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left = 1\n        right = num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        ans = [0]\n        for i in range(1, n + 1):\n            ans.append(ans[i >> 1] + (i & 1))\n        \n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                if letter not in node:\n                    node[letter] = {}\n                node = node[letter]\n            node['#'] = word\n        \n        def dfs(i, j, node):\n            letter = board[i][j]\n            if letter not in node:\n                return []\n            word = node.pop(letter, '#')\n            if '#' in node:\n                res.append(word)\n            board[i][j] = '#'\n            for x, y in ((i-1, j), (i+1, j), (i, j-1), (i, j+1)):\n                if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] != '#':\n                    dfs(x, y, node[board[x][y]])\n            board[i][j] = letter\n            return res\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie)\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for c in s_dict:\n            if s_dict[c] != t_dict.get(c, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 sub-boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                sub = [board[x][y] for x in range(i, i+3) for y in range(j, j+3)]\n                if len(set(sub)) != len(sub):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 17576\n        # 26^4 = 488384\n        # 26^5 = 14594364\n        # 26^6 = 45296176\n        # 26^7 = 137846528\n        \n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1)\n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1) + (26^(n-2) * (columnTitle[n-2] - 'A' + 1))\n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1) + (26^(n-2) * (columnTitle[n-2] - 'A' + 1)) + (26^(n-3) * (columnTitle[n-3] - 'A' + 1))\n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1) + (26^(n-2) * (columnTitle[n-2] - 'A' + 1)) + (26^(n-3) * (columnTitle[n-3] - 'A' + 1)) + (26^(n-4) * (columnTitle[n-4] - 'A' + 1))\n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1) + (26^(n-2) * (columnTitle[n-2] - 'A' + 1)) + (26^(n-3) * (columnTitle[n-3] - 'A' + 1)) + (26^(n-4) * (columnTitle[n-4] - 'A' + 1)) + (26^(n-5) * (columnTitle[n-5] - 'A' + 1))\n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1) + (26^(n-2) * (columnTitle[n-2] - 'A' + 1)) + (26^(n-3) * (columnTitle[n-3] - 'A' + 1)) + (26^(n-4) * (columnTitle[n-4] - 'A' + 1)) + (26^(n-5) * (columnTitle[n-5] - 'A' + 1)) + (26^(n-6) * (columnTitle[n-6] - 'A' + 1))\n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1) + (26^(n-2) * (columnTitle[n-2] - 'A' + 1)) + (26^(n-3) * (columnTitle[n-3] - 'A' + 1)) + (26^(n-4) * (columnTitle[n-4] - 'A' + 1)) + (26^(n-5) * (columnTitle[n-5] - 'A' + 1)) + (26^(n-6) * (columnTitle[n-6] - 'A' + 1)) + (26^(n-7) * (columnTitle[n-7] - 'A' + 1))\n        # 26^(n-1) * (columnTitle[n-1] - 'A' + 1) + (26^(n-2) * (columnTitle[n-2] - 'A' + 1)) + (26^(n-3) * (columnTitle[n-3] - 'A' + 1)) + (26^(n-4) * (columnTitle[n-4] - 'A' + 1)) + (26^(n-5) * (columnTitle[n-5] - 'A' + 1)) + (26^(n-6) * (columnTitle[n-6] - 'A' + 1)) + (26^(n-7"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second.next:\n            first, second = first.next, second.next\n        \n        return first"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(pattern) != len(s):\n            return False\n        \n        d = {}\n        for i, j in zip(pattern, s):\n            if i not in d:\n                if j in d.values():\n                    return False\n                d[i] = j\n            elif d[i] != j:\n                return False\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(first = 0):\n            # if all integers are used up\n            # we've a valid combination\n            if first == n:\n                output.append(nums[:])\n            for i in range(first, n):\n                # place i-th integer first \n                # in the current permutation\n                nums[first], nums[i] = nums[i], nums[first]\n                # use next integers to complete the permutation\n                backtrack(first + 1)\n                # backtrack\n                nums[first], nums[i] = nums[i], nums[first]\n        \n        n = len(nums)\n        output = []\n        backtrack()\n        return output"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m * n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        head = ListNode(0)\n        curr = head\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert to binary\n        # 2. flip bits\n        # 3. convert back to decimal\n        \n        # 1. convert to binary\n        binary = bin(num)[2:]\n        \n        # 2. flip bits\n        binary = ''.join('1' if bit == '0' else '0' for bit in binary)\n        \n        # 3. convert back to decimal\n        return int(binary, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        dp = [0] * len(nums)\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        \n        return sum(dp)"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        cur_len = 0\n        cur_words = []\n        \n        for word in words:\n            if cur_len + len(word) + len(cur_words) > maxWidth:\n                if len(cur_words) == 1:\n                    res.append(cur_words[0] + ' ' * (maxWidth - cur_len))\n                else:\n                    spaces = (maxWidth - cur_len) // (len(cur_words) - 1)\n                    extra = (maxWidth - cur_len) % (len(cur_words) - 1)\n                    res.append(''.join(cur_words[i] + ' ' * (spaces + 1) + (' ' * extra) if i < len(cur_words) - 1 else cur_words[i] + ' ' * (spaces + extra)) for i in range(len(cur_words)))\n                cur_len = 0\n                cur_words = []\n            cur_len += len(word)\n            cur_words.append(word)\n        if cur_len:\n            res.append(' '.join(cur_words + [' '] * (maxWidth - cur_len + len(cur_words) - 1))[:maxWidth])\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left and right pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area ="}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a set of words\n        word_set = set(words)\n        \n        # build a dict to store the longest word that can be built from the rest of the words\n        # the key is the length of the word, the value is the longest word that can be built from the rest of the words\n        # if the key is 0, then the word is the longest word that can be built from the rest of the words\n        longest_word_dict = {0: []}\n        \n        # iterate through the words\n        for word in words:\n            # iterate through the length of the word\n            for i in range(len(word)):\n                # get the prefix of the word\n                prefix = word[:i]\n                # get the suffix of the word\n                suffix = word[i:]\n                # if the prefix is in the dict, then the suffix can be built from the rest of the words\n                if prefix in word_set:\n                    # if the suffix is in the dict, then the prefix can be built from the suffix\n                    if suffix in word_set:\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) == 0:\n                            return []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if the length of the suffix is 0, then the word is the longest word that can be built from the rest of the words\n                        if len(suffix) not in longest_word_dict:\n                            longest_word_dict[len(suffix)] = []\n                        # if"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = -num\n        \n        res = \"\"\n        \n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return res if res else \"-\" + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    count += backtrack(row + 1, cols | {col}, diag1 | {row + col}, diag2 | {row - col})\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if self.dfs(board, word, i, j):\n                    return True\n        \n        return False\n    \n    def dfs(self, board, word, i, j):\n        if len(word) == 0:\n            return True\n        \n        if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n            return False\n        \n        tmp = board[i][j]\n        board[i][j] = '#'\n        \n        res = self.dfs(board, word[1:], i + 1, j) or self.dfs(board, word[1:], i - 1, j) or self.dfs(board, word[1:], i, j + 1) or self.dfs(board, word[1:], i, j - 1)\n        \n        board[i][j] = tmp\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums1[:m] + nums2[:n]\n        # nums1.sort()\n        \n        # nums1[:m] = nums"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the list\n        nums.sort()\n        \n        # 2. if the list has less than 3 elements, return the max element\n        if len(nums) < 3:\n            return nums[-1]\n        \n        # 3. if the list has 3 elements, return the third element\n        else:\n            return nums[-3]"}]}