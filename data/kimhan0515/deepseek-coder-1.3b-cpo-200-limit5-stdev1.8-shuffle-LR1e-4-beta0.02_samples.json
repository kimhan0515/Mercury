{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        res = []\n        start = nums[0]\n        end = nums[0]\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = dp[i][j-1]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i][j-1]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i][j]\n        # dp[i][j] = dp[i][j]\n        # dp[i][0] = 1\n        # dp[0][j"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 1, 2, 3, ..., n\n        # 2. 1, 2, 3, ..., n-1\n        # 3. 1, 2, 3, ..., n-2\n        # 4. 1, 2, 3, ..., n-3\n        # 5. 1, 2, 3, ..., n-4\n        # 6. 1, 2, 3, ..., n-5\n        # 7. 1, 2, 3, ..., n-6\n        # 8. 1, 2, 3, ..., n-7\n        # 9. 1, 2, 3, ..., n-8\n        # 10. 1, 2, 3, ..., n-9\n        # 11. 1, 2, 3, ..., n-10\n        # 12. 1, 2, 3, ..., n-11\n        # 13. 1, 2, 3, ..., n-12\n        # 14. 1, 2, 3, ..., n-13\n        # 15. 1, 2, 3, ..., n-14\n        # 16. 1, 2, 3, ..., n-15\n        # 17. 1, 2, 3, ..., n-16\n        # 18. 1, 2, 3, ..., n-17\n        # 19. 1, 2, 3, ..., n-18\n        # 20. 1, 2, 3, ..., n-19\n        # 21. 1, 2, 3, ..., n-20\n        # 22. 1, 2, 3, ..., n-21\n        # 23. 1, 2, 3, ..., n-22\n        # 24. 1, 2, 3, ..., n-23\n        # 25. 1, 2, 3, ..., n-24\n        # 26. 1, 2, 3, ..., n-25\n        # 27. 1, 2, 3, ..., n-26\n        # 28. 1, 2, 3, ..., n-27\n        # 29. 1, 2, 3, ..., n-28\n        # 30. 1, 2, 3, ..., n-29\n        # 31. 1, 2, 3, ..., n-30\n        # 32. 1, 2, 3, ..., n-31\n        # 33. 1, 2, 3, ..., n-32\n        # 34. 1, 2, 3, ..., n-33\n        # 35. 1, 2, 3, ..., n-34\n        # 36. 1, 2, 3, ..., n-35\n        # 37. 1, 2, 3, ..., n-36\n        # 38. 1, 2, 3, ..., n-37\n        # 39. 1, 2, 3, ..., n-38\n        # 40. 1, 2, 3, ..., n-39\n        # 41. 1, 2, 3, ..., n-40\n        # 42. 1, 2, 3, ..., n-41\n        # 43. 1, 2, 3, ..., n-42\n        # 44. 1, 2, 3, ..., n-43\n        # 45. 1, 2, 3, ..., n-44\n        # 46. 1, 2, 3, ..., n-45\n        # 47. 1, 2, 3, ..., n-46\n        # 48. 1, 2"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc67c\ucabd \ud3ec\uc778\ud130\uc640 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ub97c \uc124\uc815\n        # 3. \uc67c\ucabd \ud3ec\uc778\ud130\uc640 \uc624\ub978\ucabd \ud3ec\uc778\ud130\uc758 \ud569\uc774 target\uacfc \uac19\uc73c\uba74 \ub9ac\ud134\n        # 4. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ub97c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 5. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \ud06c\uba74 \uc67c\ucabd \ud3ec\uc778\ud130\ub97c \uc67c\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 6. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uac19\uc73c\uba74 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ub97c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 7. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc67c\ucabd \ud3ec\uc778\ud130\ub97c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 8. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ub97c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 9. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc67c\ucabd \ud3ec\uc778\ud130\ub97c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 10. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ub97c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 11. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ucabd \ud3ec\uc778\ud130\ubcf4\ub2e4 \uac19\uc9c0 \uc54a\uc73c\uba74 \uc67c\ucabd \ud3ec\uc778\ud130\ub97c \uc624\ub978\ucabd\uc73c\ub85c \uc774\ub3d9\n        # 12. \uc67c\ucabd \ud3ec\uc778\ud130\uac00 \uc624\ub978\ufffd"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, res, path):\n            if not num:\n                if target == 0:\n                    res.append(path)\n                return\n            for i in range(1, len(num) + 1):\n                if i == 1 or num[0] != '0':\n                    cur = int(num[:i])\n                    if not path:\n                        backtrack(num[i:], target - cur, cur, res, str(cur))\n                    else:\n                        backtrack(num[i:], target - cur, cur, res, path + '+' + str(cur))\n                        backtrack(num[i:], target + cur, -cur, res, path + '-' + str(cur))\n                        backtrack(num[i:], target - op + op * cur, op * cur, res, path + '*' + str(cur))\n        res = []\n        backtrack(num, target, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s.upper()\n        if len(s) <= k:\n            return s\n        if len(s) % k == 0:\n            return s[:k]\n        else:\n            return s[:len(s) % k] + '-' + s[len(s) % k:]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## TLE\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. Calculate the total gas and cost\n        ## 2. Iterate through the gas and cost array\n        ## 3. If the total gas is less than the total cost, return -1\n        ## 4. If the total gas is greater than the total cost, return 0\n        ## 5. If the total gas is equal to the total cost, return the index of the first station\n        ## 6. If the total gas is greater than the total cost, return the index of the first station\n        ## 7. If the total gas is less than the total cost, return -1\n        \n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        if total_gas < total_cost:\n            return -1\n        \n        if total_gas == total_cost:\n            return 0\n        \n        for i in range(len(gas)):\n            if gas[i] < cost[i]:\n                return -1\n            \n            if gas[i] >= cost[i]:\n                if i == 0:\n                    return i\n                else:\n                    return i\n        \n        return -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i]*nums[k]*nums[j] + dp[i][k] + dp[k][j])\n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 2.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 3.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 4.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 5.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 6.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 7.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 8.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 9.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 10.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits\n        \n        # 11.\n        # for i in range(len(digits)-1,-1,-1):\n        #     if digits[i] < 9:\n        #         digits[i] += 1\n        #         return digits\n        #     else:\n        #         digits[i] = 0\n        # digits.insert(0,1)\n        # return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return true if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if the first character of p is '*'\n        if len(p) > 1 and p[1] == '*':\n            # if the first character of p is '*', check if the first character of s is not '*'\n            if p[0] == s or p[0] == '.':\n                return self.isMatch(s, p[2:])\n            else:\n                return self.isMatch(s, p[1:])\n        \n        # if p is not empty, check if the first character of p is '*'\n        if p[0] == '.' or p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        else:\n            return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick_max(nums, k):\n            # \u4ecenums\u4e2d\u6311\u9009\u51fak\u4e2a\u6570\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u6570\u7684\u548c\u6700\u5927\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709k\u4e2a\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            # \u5982\u679cnums\u4e2d\u6ca1\u6709\u6570\uff0c\u5219\u8fd4\u56de\u7a7a\u5217\u8868\n            #"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5)+1):\n            if num % i == 0:\n                sum += i\n                if i**2 != num:\n                    sum += num//i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i][j], max(dp[i][j-1], dp[i-1][j]) - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], 1)\n        # dp[i][j] = min(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i-1][j] - dungeon[i][j])\n        # dp[i][j] = min(dp[i][j], dp[i][j-1] - dungeon[i][j])\n        # dp[i][j] = max(dp[i][j], dp[i][j-1] - dun"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Solution 1:\n        # return len(s.split())\n        \n        # Solution 2:\n        # return len(s.split())\n        \n        # Solution 3:\n        # return len(s.split())\n        \n        # Solution 4:\n        # return len(s.split())\n        \n        # Solution 5:\n        # return len(s.split())\n        \n        # Solution 6:\n        # return len(s.split())\n        \n        # Solution 7:\n        # return len(s.split())\n        \n        # Solution 8:\n        # return len(s.split())\n        \n        # Solution 9:\n        # return len(s.split())\n        \n        # Solution 10:\n        # return len(s.split())\n        \n        # Solution 11:\n        # return len(s.split())\n        \n        # Solution 12:\n        # return len(s.split())\n        \n        # Solution 13:\n        # return len(s.split())\n        \n        # Solution 14:\n        # return len(s.split())\n        \n        # Solution 15:\n        # return len(s.split())\n        \n        # Solution 16:\n        # return len(s.split())\n        \n        # Solution 17:\n        # return len(s.split())\n        \n        # Solution 18:\n        # return len(s.split())\n        \n        # Solution 19:\n        # return len(s.split())\n        \n        # Solution 20:\n        # return len(s.split())\n        \n        # Solution 21:\n        # return len(s.split())\n        \n        # Solution 22:\n        # return len(s.split())\n        \n        # Solution 23:\n        # return len(s.split())\n        \n        # Solution 24:\n        # return len(s.split())\n        \n        # Solution 25:\n        # return len(s.split())\n        \n        # Solution 26:\n        # return len(s.split())\n        \n        # Solution 27:\n        # return len(s.split())\n        \n        # Solution 28:\n        # return len(s.split())\n        \n        # Solution 29:\n        # return len(s.split())\n        \n        # Solution 30:\n        # return len(s.split())\n        \n        # Solution 31:\n        # return len(s.split())\n        \n        # Solution 32:\n        # return len(s.split())\n        \n        # Solution 33:\n        # return len(s.split())\n        \n        # Solution 34:\n        # return len(s.split())\n        \n        # Solution 35:\n        # return len(s.split())\n        \n        # Solution 36:\n        # return len(s.split())\n        \n        # Solution 37:\n        # return len(s.split())\n        \n        # Solution 38:\n        # return len(s.split())\n        \n        # Solution 39:\n        # return len(s.split())\n        \n        # Solution 40:\n        # return len(s.split())\n        \n        # Solution 41:\n        # return len(s.split())\n        \n        # Solution 42:\n        # return len(s.split())\n        \n        # Solution 43:\n        # return len(s.split())\n        \n        # Solution 44:\n        # return len(s.split())\n        \n        # Solution 45:\n        # return len(s.split())\n        \n        # Solution 46:\n        # return len(s.split())\n        \n        # Solution 47:\n        # return len(s.split())\n        \n        # Solution 48:\n        # return len(s.split())\n        \n        # Solution 49:\n        # return len(s.split())\n        \n        # Solution"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        left = 0\n        right = len(s_list) - 1\n        while left < right:\n            if s_list[left] in vowels and s_list[right] in vowels:\n                s_list[left], s_list[right] = s_list[right], s_list[left]\n                left += 1\n                right -= 1\n            elif s_list[left] not in vowels:\n                left += 1\n            elif s_list[right] not in vowels:\n                right -= 1\n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## 1. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 2. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 3. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 4. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 5. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 6. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 7. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 8. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 9. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 10. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 11. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 12. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 13. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 14. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 15. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 16. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 17. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 18. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 19. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 20. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 21. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 22. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 23. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 24. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 25. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 26. We can use the sum of the numbers from 0 to n-1 to get the sum of all the numbers in the array\n        ## 27. We can subtract the sum of the numbers from 0 to n-1 from the sum of the numbers from 0 to n to get the missing number\n        ## 28. We can use the sum of the numbers from 0 to n to get the sum of all the numbers in the array\n        ## 2"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # Create a set of words from the wordList\n        wordSet = set(wordList)\n        \n        # Check if the endWord is in the wordSet\n        if endWord not in wordSet:\n            return 0\n        \n        # Create a queue to store the words to be visited\n        queue = collections.deque([beginWord])\n        \n        # Create a set to store the visited words\n        visited = set()\n        \n        # Initialize the number of steps to 1\n        steps = 1\n        \n        # Loop until the queue is empty\n        while queue:\n            # Get the number of words in the queue\n            size = len(queue)\n            \n            # Loop through the words in the queue\n            for _ in range(size):\n                # Get the current word from the queue\n                word = queue.popleft()\n                \n                # Check if the current word is the endWord\n                if word == endWord:\n                    return steps\n                \n                # Add the current word to the visited set\n                visited.add(word)\n                \n                # Loop through the letters of the word\n                for i in range(len(word)):\n                    # Generate all possible words by replacing one letter at a time\n                    for letter in string.ascii_lowercase:\n                        # Check if the letter is the same as the current letter\n                        if word[i] == letter:\n                            continue\n                        # Generate the new word\n                        newWord = word[:i] + letter + word[i+1:]\n                        # Check if the new word is in the wordSet\n                        if newWord in wordSet:\n                            # Check if the new word has been visited\n                            if newWord not in visited:\n                                # Add the new word to the queue\n                                queue.append(newWord)\n            \n            # Increment the number of steps\n            steps += 1\n        \n        # Return 0 if the endWord is not in the wordSet\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #    \n        # while len(a) > len(b):\n        #     b = \"0\" + b\n        #     \n        # carry = 0\n        # res = \"\"\n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == \"1\":\n        #         if b[i] == \"1\":\n        #             res = \"1\" + res\n        #             carry = 1\n        #         else:\n        #             res = \"0\" + res\n        #             carry = 1\n        #     else:\n        #         if b[i] == \"1\":\n        #             res = \"0\" + res\n        #             carry = 1\n        #         else:\n        #             res = str(carry) + res\n        #             carry = 0\n        #             \n        # if carry == 1:\n        #     res = \"1\" + res\n        #     \n        # return res\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     \n        # res = \"\"\n        # carry = 0\n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == \"1\":\n        #         if b[i] == \"1\":\n        #             res = \"1\" + res\n        #             carry = 1\n        #         else:\n        #             res = \"0\" + res\n        #             carry = 1\n        #     else:\n        #         if b[i] == \"1\":\n        #             res = \"0\" + res\n        #             carry = 1\n        #         else:\n        #             res = str(carry) + res\n        #             carry = 0\n        #             \n        # if carry == 1:\n        #     res = \"1\" + res\n        #     \n        # return res\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     \n        # res = \"\"\n        # carry = 0\n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == \"1\":\n        #         if b[i] == \"1\":\n        #             res = \"1\" + res\n        #             carry = 1\n        #         else:\n        #             res = \"0\" + res\n        #             carry = 1\n        #     else:\n        #         if b[i] == \"1\":\n        #             res = \"0\" + res\n        #             carry = 1\n        #         else:\n        #             res = str(carry) + res\n        #             carry = 0\n        #             \n        # if carry == 1:\n        #     res = \"1\" + res\n        #     \n        # return res\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     \n        # res = \"\"\n        # carry = 0\n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == \"1\":\n        #         if b[i] == \"1\":\n        #             res = \"1\" + res\n        #             carry = 1\n        #         else:\n        #             res = \"0\" + res\n        #             carry = 1\n        #     else:\n        #         if b[i] == \"1\":\n        #             res = \"0\" + res\n        #             carry = 1\n        #         else:\n        #             res = str(carry) + res\n        #             carry = 0\n        #             \n        # if carry == 1:\n        #     res = \"1\" + res\n        #     \n        # return res\n        \n        # if len(a) < len(b):\n        #     a, b = b, a\n        #     \n        # res = \"\"\n        # carry = 0\n        # for i in range(len(a)-1, -1, -1):\n        #     if a[i] == \"1\":\n        #         if b[i] == \"1\":\n        #             res = \"1\" + res"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # binary search\n        # return [-1,-1] if target not in nums else [left,right]\n        # left = bisect_left(nums,target)\n        # right = bisect_right(nums,target)\n        # return [left,right-1]\n\n        # linear search\n        left = 0\n        right = len(nums)-1\n        while left <= right:\n            mid = (left+right)//2\n            if nums[mid] == target:\n                left = mid\n                right = mid\n                while left > 0 and nums[left-1] == target:\n                    left -= 1\n                while right < len(nums)-1 and nums[right+1] == target:\n                    right += 1\n                return [left,right]\n            elif nums[mid] < target:\n                left = mid+1\n            else:\n                right = mid-1\n        return [-1,-1]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] == nums[j]:\n                j += 1\n            else:\n                i += 1\n                nums[i] = nums[j]\n                j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(prices[i+1]-prices[i] for i in range(len(prices)-1))\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        for i in range(k+1):\n            dp[i][1] = -prices[0]\n        \n        for i in range(1, len(prices)):\n            for j in range(1, k+1):\n                dp[j][0] = max(dp[j][0], dp[j-1][1]+prices[i])\n                dp[j][1] = max(dp[j][1], dp[j][0]-prices[i])\n        \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_list = []\n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_list.append(str(remainder))\n            else:\n                hex_list.append(hex_dict[remainder])\n            num = num // 16\n        \n        hex_list.reverse()\n        return \"\".join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Create a hashmap to store the frequency of each character in the string\n        # Create a hashmap to store the index of each character in the string\n        # Iterate through the string and for each character, check if the character is already in the hashmap\n        # If the character is already in the hashmap, increment the frequency by 1\n        # If the character is not in the hashmap, add it to the hashmap with a frequency of 1\n        # Iterate through the string again and for each character, check if the frequency of the character is 1\n        # If the frequency is 1, return the index of the character\n        # If the frequency is not 1, return -1\n        \n        # Create a hashmap to store the frequency of each character in the string\n        freq = {}\n        # Create a hashmap to store the index of each character in the string\n        index = {}\n        # Iterate through the string and for each character, check if the character is already in the hashmap\n        for i, c in enumerate(s):\n            if c in freq:\n                # If the character is already in the hashmap, increment the frequency by 1\n                freq[c] += 1\n            else:\n                # If the character is not in the hashmap, add it to the hashmap with a frequency of 1\n                freq[c] = 1\n                # Add the index of the character to the hashmap\n                index[c] = i\n        # Iterate through the string again and for each character, check if the frequency of the character is 1\n        for i, c in enumerate(s):\n            if freq[c] == 1:\n                # If the frequency is 1, return the index of the character\n                return index[c]\n        # If the frequency is not 1, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(nlog(n))\n        # Space Complexity: O(n)\n        \n        # Edge Case\n        if len(nums) <= 1:\n            return False\n        \n        # Sort the array\n        nums.sort()\n        \n        # Iterate through the array\n        for i in range(len(nums)-1):\n            # Check if the difference between the current and next number is less than or equal to indexDiff\n            if abs(nums[i] - nums[i+1]) <= valueDiff:\n                return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = root\n        right = root\n        level = 0\n        \n        while left:\n            left = left.left\n            right = right.right\n            level += 1\n        \n        if not right:\n            return (2**level) - 1\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 2. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 3. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 4. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 5. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 6. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 7. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 8. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 9. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 10. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 11. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 12. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 13. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 14. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 15. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 16. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 17. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 18. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 19. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 20. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 21. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 22. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 23. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 24. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 25. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 26. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 27. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 28. \uc5f0\uc0b0\uc790 \uc6b0\uc120\uc21c\uc704 \uc815\uc758\n        # 29. \uc5f0\uc0b0\uc790 \uc6b0\uc120\ufffd"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits[i] - capital[i]\n        # if profits[i] - capital[i] > 0, then we can do this project\n        # if profits[i] - capital[i] < 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project\n        # if profits[i] - capital[i] == 0, then we can't do this project"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the number that is larger than the number that is smaller than the next number\n        # swap the two numbers\n        # reverse the numbers after the number that is smaller than the next number\n        # return the result\n        \n        # find the first number that is smaller than the next number\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # find the number that is larger than the number that is smaller than the next number\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers after the number that is smaller than the next number\n        left, right = i+1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Create a dictionary to store the number and its index\n        # Iterate through the list and check if the number is already in the dictionary\n        # If the number is already in the dictionary, check if the index is within the range of k\n        # If the number is not in the dictionary, add it to the dictionary\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the number is in the dictionary, check if the index is within the range of k\n        # If the"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i-1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique.\n        \n        # 1. 2n = row.length\n        # 2. n is even\n        # 3. 0 <= row[i] < 2n\n        # 4. All the elements of row are unique."}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        count = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        for word in words:\n            if word[0] in row1:\n                row = row1\n            elif word[0] in row2:\n                row = row2\n            else:\n                row = row3\n            for letter in word:\n                if letter not in row:\n                    break\n            else:\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Find the left node\n        left_node = head\n        for _ in range(left - 1):\n            left_node = left_node.next\n        \n        # 2. Find the right node\n        right_node = head\n        for _ in range(right):\n            right_node = right_node.next\n        \n        # 3. Reverse the nodes\n        prev = None\n        curr = left_node\n        while curr != right_node:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        \n        # 4. Update the left node\n        left_node.next = prev\n        \n        # 5. Update the right node\n        right_node.next = curr\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the reversed string with the original string\n        # 4. Return the concatenated string\n        \n        # 1. Find the longest palindrome substring of s\n        # 2. Reverse the string\n        # 3. Concatenate the revers"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        # Create a hashmap for the characters in t\n        # and their frequencies\n        t_map = {}\n        for char in t:\n            if char not in t_map:\n                t_map[char] = 0\n            t_map[char] += 1\n        \n        # Create a hashmap for the characters in s\n        # and their frequencies\n        s_map = {}\n        for char in s:\n            if char not in s_map:\n                s_map[char] = 0\n            s_map[char] += 1\n        \n        # Initialize the window\n        window_start = 0\n        window_end = 0\n        min_window_start = 0\n        min_window_end = len(s)\n        min_window_len = len(s) + 1\n        \n        # Iterate through the characters in s\n        for window_end in range(len(s)):\n            # If the character is in t, add it to the hashmap\n            if s[window_end] in t_map:\n                if s[window_end] in s_map:\n                    s_map[s[window_end]] += 1\n                else:\n                    s_map[s[window_end]] = 1\n            \n            # If the character is in t, and it is in the hashmap,\n            # increment the frequency of the character in the hashmap\n            # and increment the window end\n            if s[window_end] in t_map and s[window_end] in s_map:\n                t_map[s[window_end]] -= 1\n                s_map[s[window_end]] += 1\n                window_end += 1\n            \n            # If the character is not in t, increment the window start\n            # and continue\n            else:\n                window_start += 1\n                continue\n            \n            # If the character is in t, and it is not in the hashmap,\n            # increment the window start\n            # and continue\n            if s[window_start] in t_map and s[window_start] in s_map:\n                t_map[s[window_start]] += 1\n                s_map[s[window_start]] -= 1\n                window_start += 1\n            \n            # If the character is not in t, increment the window start\n            # and continue\n            else:\n                window_start += 1\n                continue\n            \n            # If the character is in t, and it is in the hashmap,\n            # decrement the frequency of the character in the hashmap\n            # and increment the window end\n            if s[window_end] in t_map and s[window_end] in s_map:\n                t_map[s[window_end]] -= 1\n                s_map[s[window_end]] += 1\n                window_end += 1\n            \n            # If the character is not in t, increment the window start\n            # and continue\n            else:\n                window_start += 1\n                continue\n            \n            # If the character is in t, and it is not in the hashmap,\n            # increment the window start\n            # and continue\n            if s[window_end] in t_map and s[window_end] in s_map:\n                t_map[s[window_end]] += 1\n                s_map[s[window_end]] -= 1\n                window_end += 1\n            \n            # If the character is not in t, increment the window start\n            # and continue\n            else:\n                window_start += 1\n                continue\n            \n            # If the character is in t, and it is not in the hashmap,\n            # increment the window start\n            # and continue\n            if s[window_end] in t_map and s[window_end] in s_map:\n                t_map[s[window_end]] -= 1\n                s_map[s[window_end]] += 1\n                window_end += 1\n            \n            # If the character is not in t, increment the window start\n            # and continue\n            else:\n                window_start += 1\n                continue\n            \n            # If the character is in t, and it is not in the hashmap,\n            # increment the window start\n            # and continue\n            if s[window_end] in t_map and s[window_end] in"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,28"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc911\ubcf5\ub41c \ubb38\uc790\ub97c \uc81c\uc678\ud55c \ubb38\uc790\uc758 \uac1c\uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 2. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 1\uc744 \ube7c\uc900\ub2e4.\n        # 3. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 1\uc744 \ub354\ud55c\ub2e4.\n        # 4. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 5. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 6. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 7. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 8. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 9. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 10. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 11. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 12. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc788\ub2e4\uba74 \uc911\ubcf5\ub41c \ubb38\uc790\uc758 \uac1c\uc218\uc5d0\uc11c 2\ub97c \ub354\ud55c\ub2e4.\n        # 13. \uc911\ubcf5\ub41c \ubb38\uc790\uac00 \uc5c6\ub2e4"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6240\u6709\u6811\u7684\u4f4d\u7f6e\n        # 2. \u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\uff0c\u4f9d\u6b21\u5f80\u524d\u8d70\uff0c\u76f4\u5230\u8d70\u5230\u7ec8\u70b9\n        # 3. \u5982\u679c\u7ec8\u70b9\u5728\u6811\u7684\u8303\u56f4\u5185\uff0c\u5219\u8fd4\u56de\u6b65\u6570\n        # 4. \u5982\u679c\u7ec8\u70b9\u4e0d\u5728\u6811\u7684\u8303\u56f4\u5185\uff0c\u5219\u8fd4\u56de -1\n        \n        # 1. \u627e\u5230\u6240\u6709\u6811\u7684\u4f4d\u7f6e\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((i, j))\n        \n        # 2. \u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\uff0c\u4f9d\u6b21\u5f80\u524d\u8d70\uff0c\u76f4\u5230\u8d70\u5230\u7ec8\u70b9\n        # 3. \u5982\u679c\u7ec8\u70b9\u5728\u6811\u7684\u8303\u56f4\u5185\uff0c\u5219\u8fd4\u56de\u6b65\u6570\n        # 4. \u5982\u679c\u7ec8\u70b9\u4e0d\u5728\u6811\u7684\u8303\u56f4\u5185\uff0c\u5219\u8fd4\u56de -1\n        trees.sort(key=lambda x: forest[x[0]][x[1]])\n        start = (0, 0)\n        steps = 0\n        for tree in trees:\n            steps += self.walk(forest, start, tree)\n            if steps == -1:\n                return -1\n            start = tree\n        return steps\n        \n    def walk(self, forest, start, end):\n        # \u4ece\u8d77\u70b9\u51fa\u53d1\uff0c\u6309\u7167\u9ad8\u5ea6\u6392\u5e8f\uff0c\u4f9d\u6b21\u5f80\u524d\u8d70\uff0c\u76f4\u5230\u8d70\u5230\u7ec8\u70b9\n        # \u5982\u679c\u7ec8\u70b9\u5728\u6811\u7684\u8303\u56f4\u5185\uff0c\u5219\u8fd4\u56de\u6b65\u6570\n        # \u5982\u679c\u7ec8\u70b9\u4e0d\u5728\u6811\u7684\u8303\u56f4\u5185\uff0c\u5219\u8fd4\u56de -1\n        m, n = len(forest), len(forest[0])\n        visited = [[False] * n for _ in range(m)]\n        queue = [start]\n        visited[start[0]][start[1]] = True\n        steps = 0\n        while queue:\n            new_queue = []\n            for i, j in queue:\n                if i == end[0] and j == end[1]:\n                    return steps\n                for di, dj in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < m and 0 <= nj < n and not visited[ni][nj] and forest[ni][nj] > 0:\n                        visited[ni][nj] = True\n                        new_queue.append((ni, nj))\n            steps += 1\n            queue = new_queue\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u524d\u7f00\u548c\n        # 2. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8elower\u7684\u7d22\u5f15\n        # 3. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8eupper\u7684\u7d22\u5f15\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        # 5. \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n        # 6. \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        \n        # 1. \u8ba1\u7b97\u524d\u7f00\u548c\n        n = len(nums)\n        pre_sum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            pre_sum[i] = pre_sum[i - 1] + nums[i - 1]\n        \n        # 2. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8elower\u7684\u7d22\u5f15\n        # 3. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8eupper\u7684\u7d22\u5f15\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        # 5. \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n        # 6. \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        def binary_search(target):\n            left, right = 0, n\n            while left < right:\n                mid = (left + right) // 2\n                if pre_sum[mid] < target:\n                    left = mid + 1\n                else:\n                    right = mid\n            return left\n        \n        # 2. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8elower\u7684\u7d22\u5f15\n        # 3. \u4f7f\u7528\u4e8c\u5206\u67e5\u627e\uff0c\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8eupper\u7684\u7d22\u5f15\n        # 4. \u8fd4\u56de\u7ed3\u679c\n        # 5. \u65f6\u95f4\u590d\u6742\u5ea6O(nlogn)\n        # 6. \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        left = binary_search(lower)\n        right = binary_search(upper + 1)\n        return right - left"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        # Approach 2:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 3:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 4:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 5:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 6:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 7:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 8:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 9:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 10:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 11:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 12:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 13:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 14:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 15:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 16:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 17:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 18:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 19:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 20:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 21:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 22:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 23:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 24:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 25:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 26:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 27:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 28:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 29:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 30:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 31:\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Approach 32:"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        \n        return result"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        temp = x\n        while temp > 0:\n            rev = rev * 10 + temp % 10\n            temp = temp // 10\n        \n        return x == rev"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        else:\n            return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 2^n - 1\n        # 2^n - 2\n        # 2^n - 3\n        # 2^n - 4\n        # 2^n - 5\n        # 2^n - 6\n        # 2^n - 7\n        # 2^n - 8\n        # 2^n - 9\n        # 2^n - 10\n        # 2^n - 11\n        # 2^n - 12\n        # 2^n - 13\n        # 2^n - 14\n        # 2^n - 15\n        # 2^n - 16\n        # 2^n - 17\n        # 2^n - 18\n        # 2^n - 19\n        # 2^n - 20\n        # 2^n - 21\n        # 2^n - 22\n        # 2^n - 23\n        # 2^n - 24\n        # 2^n - 25\n        # 2^n - 26\n        # 2^n - 27\n        # 2^n - 28\n        # 2^n - 29\n        # 2^n - 30\n        # 2^n - 31\n        # 2^n - 32\n        # 2^n - 33\n        # 2^n - 34\n        # 2^n - 35\n        # 2^n - 36\n        # 2^n - 37\n        # 2^n - 38\n        # 2^n - 39\n        # 2^n - 40\n        # 2^n - 41\n        # 2^n - 42\n        # 2^n - 43\n        # 2^n - 44\n        # 2^n - 45\n        # 2^n - 46\n        # 2^n - 47\n        # 2^n - 48\n        # 2^n - 49\n        # 2^n - 50\n        # 2^n - 51\n        # 2^n - 52\n        # 2^n - 53\n        # 2^n - 54\n        # 2^n - 55\n        # 2^n - 56\n        # 2^n - 57\n        # 2^n - 58\n        # 2^n - 59\n        # 2^n - 60\n        # 2^n - 61\n        # 2^n - 62\n        # 2^n - 63\n        # 2^n - 64\n        # 2^n - 65\n        # 2^n - 66\n        # 2^n - 67\n        # 2^n - 68\n        # 2^n - 69\n        # 2^n - 70\n        # 2^n - 71\n        # 2^n - 72\n        # 2^n - 73\n        # 2^n - 74\n        # 2^n - 75\n        # 2^n - 76\n        # 2^n - 77\n        # 2^n - 78\n        # 2^n - 79\n        # 2^n - 80\n        # 2^n - 81\n        # 2^n - 82\n        # 2^n - 83\n        # 2^n - 84\n        # 2^n - 85\n        # 2^n - 86\n        # 2^n - 87\n        # 2^n - 88\n        # 2^n - 89\n        # 2^n - 90\n        # 2^n - 91\n        # 2^n - 92\n        # 2^n - 93\n        # 2^n - 94"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        dp = [0] * (n+1)\n        dp[1] = 1\n        dp[2] = 2\n        \n        for i in range(3, n+1):\n            dp[i] = dp[i-1] + dp[i-2]\n        \n        return dp[n]"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        # Approach: Dynamic Programming\n        # 1. Create a dictionary of words from wordDict\n        # 2. Iterate through the string s\n        # 3. For each character in the string, check if the substring of the string up to the current character is in the dictionary\n        # 4. If the substring is in the dictionary, check if the substring up to the end of the string is in the dictionary\n        # 5. If the substring is in the dictionary, return True\n        # 6. If the substring is not in the dictionary, return False\n        # 7. If the substring is not in the dictionary and the substring up to the end of the string is in the dictionary, return True\n        # 8. If the substring is not in the dictionary and the substring up to the end of the string is not in the dictionary, return False\n        # 9. If the substring is not in the dictionary and the substring up to the end of the string is not in the dictionary, return False\n\n        # 1. Create a dictionary of words from wordDict\n        word_dict = set(wordDict)\n\n        # 2. Iterate through the string s\n        for i in range(len(s)):\n            # 3. For each character in the string, check if the substring of the string up to the current character is in the dictionary\n            if s[:i+1] in word_dict:\n                # 4. If the substring is in the dictionary, check if the substring up to the end of the string is in the dictionary\n                if i == len(s) - 1 or s[i+1:] in word_dict:\n                    return True\n\n        # 5. If the substring is not in the dictionary, return False\n        return False"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isValidBSTUtil(root, min_val, max_val):\n            if root is None:\n                return True\n            \n            if root.val <= min_val or root.val >= max_val:\n                return False\n            \n            return isValidBSTUtil(root.left, min_val, root.val) and isValidBSTUtil(root.right, root.val, max_val)\n        \n        return isValidBSTUtil(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if intervals is empty\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is empty\n        if not newInterval:\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            intervals[0][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            intervals[0][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            intervals[-1][1] = newInterval[1]\n            return intervals\n        \n        # if newInterval is not empty\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[0][0] = newInterval[0]\n            return intervals\n        \n        # if"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    path.append(s[start:i+1])\n                    backtrack(s, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 2. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 3. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 4. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 5. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 6. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 7. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 8. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 9. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 10. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 11. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 12. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 13. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 14. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4.\n        # 15. \ucd5c\uc18c\uac12\uacfc \ucd5c\ub300\uac12\uc744 \uc800\uc7a5\ud558\ub294 \ubcc0\uc218\ub97c \uc120\uc5b8\ud55c\ub2e4"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n^2)\n        # Approach:\n        # 1. BFS\n        # 2. BFS\n        # 3. BFS\n        # 4. BFS\n        # 5. BFS\n        # 6. BFS\n        # 7. BFS\n        # 8. BFS\n        # 9. BFS\n        # 10. BFS\n        # 11. BFS\n        # 12. BFS\n        # 13. BFS\n        # 14. BFS\n        # 15. BFS\n        # 16. BFS\n        # 17. BFS\n        # 18. BFS\n        # 19. BFS\n        # 20. BFS\n        # 21. BFS\n        # 22. BFS\n        # 23. BFS\n        # 24. BFS\n        # 25. BFS\n        # 26. BFS\n        # 27. BFS\n        # 28. BFS\n        # 29. BFS\n        # 30. BFS\n        # 31. BFS\n        # 32. BFS\n        # 33. BFS\n        # 34. BFS\n        # 35. BFS\n        # 36. BFS\n        # 37. BFS\n        # 38. BFS\n        # 39. BFS\n        # 40. BFS\n        # 41. BFS\n        # 42. BFS\n        # 43. BFS\n        # 44. BFS\n        # 45. BFS\n        # 46. BFS\n        # 47. BFS\n        # 48. BFS\n        # 49. BFS\n        # 50. BFS\n        # 51. BFS\n        # 52. BFS\n        # 53. BFS\n        # 54. BFS\n        # 55. BFS\n        # 56. BFS\n        # 57. BFS\n        # 58. BFS\n        # 59. BFS\n        # 60. BFS\n        # 61. BFS\n        # 62. BFS\n        # 63. BFS\n        # 64. BFS\n        # 65. BFS\n        # 66. BFS\n        # 67. BFS\n        # 68. BFS\n        # 69. BFS\n        # 70. BFS\n        # 71. BFS\n        # 72. BFS\n        # 73. BFS\n        # 74. BFS\n        # 75. BFS\n        # 76. BFS\n        # 77. BFS\n        # 78. BFS\n        # 79. BFS\n        # 80. BFS\n        # 81. BFS\n        # 82. BFS\n        # 83. BFS\n        # 84. BFS\n        # 85. BFS\n        # 86. BFS\n        # 87. BFS\n        # 88. BFS\n        # 89. BFS\n        # 90. BFS\n        # 91. BFS\n        # 92. BFS\n        # 93. BFS\n        # 94. BFS\n        # 95. BFS\n        # 96. BFS\n        # 97. BFS\n        # 98. BFS\n        # 99. BFS\n        # 100. BFS\n        # 101. BFS\n        # 102. BFS\n        # 103. BFS\n        # 104. BFS\n        # 105. BFS\n        # 106. BFS\n        # 107. BFS\n        # 108. BFS\n        # 109. BFS\n        #"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n        \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n        \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n        \n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointer approach\n        # 2. 1 pointer approach\n        # 3. 2 pointer approach\n        # 4. 1 pointer approach\n        # 5. 2 pointer approach\n        # 6. 1 pointer approach\n        # 7. 2 pointer approach\n        # 8. 1 pointer approach\n        # 9. 2 pointer approach\n        # 10. 1 pointer approach\n        # 11. 2 pointer approach\n        # 12. 1 pointer approach\n        # 13. 2 pointer approach\n        # 14. 1 pointer approach\n        # 15. 2 pointer approach\n        # 16. 1 pointer approach\n        # 17. 2 pointer approach\n        # 18. 1 pointer approach\n        # 19. 2 pointer approach\n        # 20. 1 pointer approach\n        # 21. 2 pointer approach\n        # 22. 1 pointer approach\n        # 23. 2 pointer approach\n        # 24. 1 pointer approach\n        # 25. 2 pointer approach\n        # 26. 1 pointer approach\n        # 27. 2 pointer approach\n        # 28. 1 pointer approach\n        # 29. 2 pointer approach\n        # 30. 1 pointer approach\n        # 31. 2 pointer approach\n        # 32. 1 pointer approach\n        # 33. 2 pointer approach\n        # 34. 1 pointer approach\n        # 35. 2 pointer approach\n        # 36. 1 pointer approach\n        # 37. 2 pointer approach\n        # 38. 1 pointer approach\n        # 39. 2 pointer approach\n        # 40. 1 pointer approach\n        # 41. 2 pointer approach\n        # 42. 1 pointer approach\n        # 43. 2 pointer approach\n        # 44. 1 pointer approach\n        # 45. 2 pointer approach\n        # 46. 1 pointer approach\n        # 47. 2 pointer approach\n        # 48. 1 pointer approach\n        # 49. 2 pointer approach\n        # 50. 1 pointer approach\n        # 51. 2 pointer approach\n        # 52. 1 pointer approach\n        # 53. 2 pointer approach\n        # 54. 1 pointer approach\n        # 55. 2 pointer approach\n        # 56. 1 pointer approach\n        # 57. 2 pointer approach\n        # 58. 1 pointer approach\n        # 59. 2 pointer approach\n        # 60. 1 pointer approach\n        # 61. 2 pointer approach\n        # 62. 1 pointer approach\n        # 63. 2 pointer approach\n        # 64. 1 pointer approach\n        # 65. 2 pointer approach\n        # 66. 1 pointer approach\n        # 67. 2 pointer approach\n        # 68. 1 pointer approach\n        # 69. 2 pointer approach\n        # 70. 1 pointer approach\n        # 71. 2 pointer approach\n        # 72. 1 pointer approach\n        # 73. 2 pointer approach\n        # 74. 1 pointer approach\n        # 75. 2 pointer approach\n        # 76. 1 pointer approach\n        # 77. 2 pointer approach\n        # 78. 1 pointer approach\n        # 79. 2 pointer approach\n        # 80. 1 pointer approach\n        # 81. 2 pointer approach\n        # 82. 1 pointer approach\n        # 83. 2 pointer approach\n        # 84. 1 pointer approach\n        # 85. 2 pointer approach\n        # 86. 1 pointer approach\n        # 87. 2 pointer approach\n        # 88. 1 pointer approach\n        # 89. 2 pointer approach\n        # 90. 1 pointer approach\n        # 91. 2 pointer approach\n        # 92. 1 pointer approach\n        # 93. 2 pointer approach\n        # 94. 1 pointer approach"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def backtrack(start, target):\n            if target == 0:\n                res.append(list(temp))\n                return\n            for i in range(start, len(candidates)):\n                if i > start and candidates[i] == candidates[i-1]:\n                    continue\n                if candidates[i] > target:\n                    break\n                temp.append(candidates[i])\n                backtrack(i+1, target-candidates[i])\n                temp.pop()\n        temp = []\n        backtrack(0, target)\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        curr = root\n        \n        while curr is not None or len(stack) > 0:\n            while curr is not None:\n                stack.append(curr)\n                curr = curr.left\n            curr = stack.pop()\n            result.append(curr.val)\n            curr = curr.right\n        \n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \uc785\ub825\ubc1b\uc740 \ubb38\uc790\uc5f4\uc744 \uc2a4\ud0dd\uc73c\ub85c \uc800\uc7a5\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 3. \uc81c\uac70\ud55c \ubb38\uc790\uc5f4\uc774 \uc720\ud6a8\ud55c \ubb38\uc790\uc5f4\uc778\uc9c0 \ud655\uc778\ud55c\ub2e4.\n        # 4. \uc720\ud6a8\ud55c \ubb38\uc790\uc5f4\uc774\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ud55c\ub2e4.\n        # 5. \uc720\ud6a8\ud558\uc9c0 \uc54a\uc740 \ubb38\uc790\uc5f4\uc774\uba74 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud55c\ub2e4.\n        # 6. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 7. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 9. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 10. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 11. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 12. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 13. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 14. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 15. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 16. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 17. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 18. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 19. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 20. \uc2a4\ud0dd\uc5d0 \uc788\ub294 \ubb38\uc790\uc5f4\ufffd"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Time Complexity: O(nlogk)\n        # Space Complexity: O(1)\n        # We can use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap to store the first element of each list\n        # We can also use a min heap"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count_zeroes(n):\n            count = 0\n            while n:\n                count += n // 5\n                n //= 5\n            return count\n        \n        left, right = 0, 10**10\n        while left < right:\n            mid = (left + right) // 2\n            if count_zeroes(mid) < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left - k"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        reverse_map = {}\n        for i, word in enumerate(words):\n            reverse_map[word[::-1]] = i\n        \n        # Create a list to store the result\n        result = []\n        \n        # Iterate over the words\n        for i, word in enumerate(words):\n            # If the word is empty, add the index to the result\n            if not word:\n                result.append([i, i])\n            # If the word is a palindrome, add the index to the result\n            if word in reverse_map:\n                result.append([i, reverse_map[word]])\n            # If the word is a palindrome, add the index to the result\n            for j in range(len(word)):\n                left = word[:j]\n                right = word[j:]\n                # If the left part is a palindrome and the right part is not,\n                # add the index to the result\n                if left[::-1] in reverse_map and right != right[::-1]:\n                    result.append([i, reverse_map[left[::-1]]])\n                # If the right part is a palindrome and the left part is not,\n                # add the index to the result\n                if right[::-1] in reverse_map and left != left[::-1]:\n                    result.append([reverse_map[right[::-1]], i])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6240\u6709\u611f\u67d3\u7684\u533a\u57df\n        # 2. \u627e\u51fa\u611f\u67d3\u533a\u57df\u7684\u8fb9\u754c\n        # 3. \u5c06\u8fb9\u754c\u4e0a\u7684\u75c5\u6bd2\u611f\u67d3\n        # 4. \u611f\u67d3\u75c5\u6bd2\n        # 5. \u611f\u67d3\u75c5\u6bd2\n        # 6. \u611f\u67d3\u75c5\u6bd2\n        # 7. \u611f\u67d3\u75c5\u6bd2\n        # 8. \u611f\u67d3\u75c5\u6bd2\n        # 9. \u611f\u67d3\u75c5\u6bd2\n        # 10. \u611f\u67d3\u75c5\u6bd2\n        # 11. \u611f\u67d3\u75c5\u6bd2\n        # 12. \u611f\u67d3\u75c5\u6bd2\n        # 13. \u611f\u67d3\u75c5\u6bd2\n        # 14. \u611f\u67d3\u75c5\u6bd2\n        # 15. \u611f\u67d3\u75c5\u6bd2\n        # 16. \u611f\u67d3\u75c5\u6bd2\n        # 17. \u611f\u67d3\u75c5\u6bd2\n        # 18. \u611f\u67d3\u75c5\u6bd2\n        # 19. \u611f\u67d3\u75c5\u6bd2\n        # 20. \u611f\u67d3\u75c5\u6bd2\n        # 21. \u611f\u67d3\u75c5\u6bd2\n        # 22. \u611f\u67d3\u75c5\u6bd2\n        # 23. \u611f\u67d3\u75c5\u6bd2\n        # 24. \u611f\u67d3\u75c5\u6bd2\n        # 25. \u611f\u67d3\u75c5\u6bd2\n        # 26. \u611f\u67d3\u75c5\u6bd2\n        # 27. \u611f\u67d3\u75c5\u6bd2\n        # 28. \u611f\u67d3\u75c5\u6bd2\n        # 29. \u611f\u67d3\u75c5\u6bd2\n        # 30. \u611f\u67d3\u75c5\u6bd2\n        # 31. \u611f\u67d3\u75c5\u6bd2\n        # 32. \u611f\u67d3\u75c5\u6bd2\n        # 33. \u611f\u67d3\u75c5\u6bd2\n        # 34. \u611f\u67d3\u75c5\u6bd2\n        # 35. \u611f\u67d3\u75c5\u6bd2\n        # 36. \u611f\u67d3\u75c5\u6bd2\n        # 37. \u611f\u67d3\u75c5\u6bd2\n        # 38. \u611f\u67d3\u75c5\u6bd2\n        # 39. \u611f\u67d3\u75c5\u6bd2\n        # 40. \u611f\u67d3\u75c5\u6bd2\n        # 41. \u611f\u67d3\u75c5\u6bd2\n        # 42. \u611f\u67d3\u75c5\u6bd2\n        # 43. \u611f\u67d3\u75c5\u6bd2\n        # 44. \u611f\u67d3\u75c5\u6bd2\n        # 45. \u611f\u67d3\u75c5\u6bd2\n        # 46. \u611f\u67d3\u75c5\u6bd2\n        # 47. \u611f\u67d3\u75c5\u6bd2\n        # 48. \u611f\u67d3\u75c5\u6bd2\n        # 49. \u611f\u67d3\u75c5\u6bd2\n        # 50. \u611f\u67d3\u75c5\u6bd2\n        # 51. \u611f\u67d3\u75c5\u6bd2\n        # 52. \u611f\u67d3\u75c5\u6bd2\n        # 53. \u611f\u67d3\u75c5\u6bd2\n        # 54. \u611f\u67d3\u75c5\u6bd2\n        # 55. \u611f\u67d3\u75c5\u6bd2\n        # 56. \u611f\u67d3\u75c5\u6bd2\n        # 57. \u611f\u67d3\u75c5\u6bd2\n        # 58. \u611f\u67d3\u75c5\u6bd2\n        # 59. \u611f\u67d3\u75c5\u6bd2\n        # 60. \u611f\u67d3\u75c5\u6bd2\n        # 61. \u611f\u67d3\u75c5\u6bd2\n        # 62. \u611f\u67d3\u75c5\u6bd2\n        # 63. \u611f\u67d3\u75c5\u6bd2\n        # 64. \u611f\u67d3\u75c5\u6bd2\n        # 65. \u611f\u67d3\u75c5\u6bd2\n        # 66. \u611f\u67d3\u75c5\u6bd2\n        # 67. \u611f\u67d3\u75c5\u6bd2\n        # 68. \u611f\u67d3\u75c5\u6bd2\n        # 69. \u611f\u67d3\u75c5\u6bd2\n        # 70. \u611f\u67d3\u75c5\u6bd2\n        # 71. \u611f\u67d3\u75c5\u6bd2\n        # 72. \u611f\u67d3\u75c5\u6bd2\n        # 73. \u611f\u67d3\u75c5\u6bd2\n        # 74. \u611f\u67d3\u75c5\u6bd2\n        # 75. \u611f\u67d3\u75c5\u6bd2\n        # 76. \u611f\u67d3\u75c5\u6bd2\n        # 77. \u611f\u67d3\u75c5\u6bd2\n        # 78. \u611f\u67d3\u75c5\u6bd2\n        # 79. \u611f\u67d3\u75c5\u6bd2\n        # 80. \u611f\u67d3\u75c5\u6bd2\n        # 81. \u611f\u67d3\u75c5\u6bd2\n        # 82. \u611f\u67d3\u75c5\u6bd2\n        # 83. \u611f\u67d3\u75c5\u6bd2\n        # 84. \u611f\u67d3\u75c5\u6bd2\n        # 85. \u611f\u67d3\u75c5\u6bd2\n        # 86. \u611f\u67d3\u75c5\u6bd2\n        # 87. \u611f\u67d3\u75c5\u6bd2\n        # 88. \u611f\u67d3\u75c5\u6bd2\n        # 89. \u611f\u67d3\u75c5\u6bd2\n        # 90. \u611f\u67d3\u75c5\u6bd2\n        # 91. \u611f\u67d3\u75c5\u6bd2\n        # 92. \u611f\u67d3\u75c5\u6bd2\n        # 93. \u611f\u67d3\u75c5\u6bd2\n        # 94. \u611f\u67d3\u75c5\u6bd2\n        # 95. \u611f\u67d3\u75c5\u6bd2\n        # 96. \u611f\u67d3\u75c5\u6bd2\n        # 97. \u611f\u67d3\u75c5\u6bd2\n        # 98. \u611f\u67d3\u75c5\u6bd2\n        # 99. \u611f\u67d3\u75c5\u6bd2\n        # 100. \u611f\u67d3\u75c5\u6bd2\n        # 101. \u611f\u67d3\u75c5\u6bd2\n        # 102."}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        def dfs(i, j):\n            if dp[i][j]:\n                return dp[i][j]\n            \n            max_len = 1\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                    max_len = max(max_len, 1 + dfs(x, y))\n            \n            dp[i][j] = max_len\n            return max_len\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j))\n        \n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # DP\n        # dp[i] = True if s[:i] is a valid word\n        # dp[i] = False if s[:i] is not a valid word\n        # dp[0] = True\n        # dp[i] = True if s[:i] is a valid word and dp[i-j] is True for some j\n        # dp[i] = False if s[:i] is not a valid word and dp[i-j] is True for some j\n        \n        # dp = [False] * (len(s) + 1)\n        # dp[0] = True\n        \n        # for i in range(1, len(s) + 1):\n        #     for word in wordDict:\n        #         if s[i - len(word):i] == word:\n        #             dp[i] = dp[i] or dp[i - len(word)]\n        # return dp[-1]\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Trie"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_nodes = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_nodes.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 0:\n                result.append(level_nodes)\n            else:\n                result.append(level_nodes[::-1])\n            level += 1\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hour(hour):\n            if hour == 0:\n                return [0]\n            if hour == 1:\n                return [1,2,4,8]\n            if hour == 2:\n                return [5,10,20,40]\n            if hour == 3:\n                return [6,12,24,48]\n            if hour == 4:\n                return [9,18,36,72]\n            if hour == 5:\n                return [11,22,44,88]\n            if hour == 6:\n                return [13,26,52,104]\n            if hour == 7:\n                return [15,29,58,116]\n            if hour == 8:\n                return [17,34,68,136]\n            if hour == 9:\n                return [19,38,76,152]\n            if hour == 10:\n                return [21,42,84,168]\n            if hour == 11:\n                return [23,46,92,184]\n            if hour == 12:\n                return [24,48,96,192]\n            if hour == 13:\n                return [25,50,100,200]\n            if hour == 14:\n                return [27,54,108,216]\n            if hour == 15:\n                return [28,60,120,240]\n            if hour == 16:\n                return [30,62,126,252]\n            if hour == 17:\n                return [31,63,127,254]\n            if hour == 18:\n                return [32,64,128,256]\n            if hour == 19:\n                return [33,65,130,258]\n            if hour == 20:\n                return [34,66,132,260]\n            if hour == 21:\n                return [35,67,134,262]\n            if hour == 22:\n                return [36,68,136,264]\n            if hour == 23:\n                return [37,69,138,266]\n            if hour == 24:\n                return [38,70,140,268]\n            if hour == 25:\n                return [39,71,142,270]\n            if hour == 26:\n                return [40,72,144,272]\n            if hour == 27:\n                return [41,73,146,274]\n            if hour == 28:\n                return [42,74,148,276]\n            if hour == 29:\n                return [43,75,150,278]\n            if hour == 30:\n                return [44,76,152,280]\n            if hour == 31:\n                return [45,77,154,282]\n            if hour == 32:\n                return [46,78,156,284]\n            if hour == 33:\n                return [47,79,158,286]\n            if hour == 34:\n                return [48,80,160,288]\n            if hour == 35:\n                return [49,81,162,290]\n            if hour == 36:\n                return [50,82,164,292]\n            if hour == 37:\n                return [51,83,166,294]\n            if hour == 38:\n                return [52,84,168,296]\n            if hour == 39:\n                return [53,85,170,298]\n            if hour == 40:\n                return [54,86,172,"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j-1] + res[i-1][j])\n            temp.append(1)\n            res.append(temp)\n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            # Recursively traverse the left and right subtree\n            # and find their maximum gain\n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            # The maximum gain if the node is included\n            new_path = node.val + left_gain + right_gain\n            \n            # Update the maximum gain if it's better\n            self.max_sum = max(self.max_sum, new_path)\n            \n            # Return the maximum gain if the node is included\n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        min_height = float('inf')\n        max_height = float('-inf')\n        for i in range(len(heightMap)):\n            for j in range(len(heightMap[0])):\n                if heightMap[i][j] < min_height:\n                    min_height = heightMap[i][j]\n                if heightMap[i][j] > max_height:\n                    max_height = heightMap[i][j]\n        \n        # 2. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774\ubbc0\ub85c \ucd5c\ub313\uac12\uc774 0\uc774 \ub418\uba74 \uc548\ub428\n        if min_height == 0:\n            return 0\n        \n        # 3. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774 \uc544\ub2c8\ubbc0\ub85c \ucd5c\ub313\uac12\uc774 0\uc774 \ub418\uba74 \uc548\ub428\n        if max_height == 0:\n            return 0\n        \n        # 4. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774 \uc544\ub2c8\ubbc0\ub85c \ucd5c\ub313\uac12\uc774 0\uc774 \ub418\uba74 \uc548\ub428\n        if min_height == max_height:\n            return 0\n        \n        # 5. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774 \uc544\ub2c8\ubbc0\ub85c \ucd5c\ub313\uac12\uc774 0\uc774 \ub418\uba74 \uc548\ub428\n        if min_height == max_height:\n            return 0\n        \n        # 6. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774 \uc544\ub2c8\ubbc0\ub85c \ucd5c\ub313\uac12\uc774 0\uc774 \ub418\uba74 \uc548\ub428\n        if min_height == max_height:\n            return 0\n        \n        # 7. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774 \uc544\ub2c8\ubbc0\ub85c \ucd5c\ub313\uac12\uc774 0\uc774 \ub418\uba74 \uc548\ub428\n        if min_height == max_height:\n            return 0\n        \n        # 8. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774 \uc544\ub2c8\ubbc0\ub85c \ucd5c\ub313\uac12\uc774 0\uc774 \ub418\uba74 \uc548\ub428\n        if min_height == max_height:\n            return 0\n        \n        # 9. \ucd5c\uc19f\uac12\uacfc \ucd5c\ub313\uac12 \ucc3e\uae30\n        # \ucd5c\uc19f\uac12\uc774 0\uc774 \uc544\ub2c8\ubbc0\ub85c \ucd5c\ub313\uac12\uc774"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Remove all non-alphanumeric characters\n        # 2. Convert all uppercase letters to lowercase letters\n        # 3. Check if the string is a palindrome\n        \n        # 1. Remove all non-alphanumeric characters\n        s = s.lower()\n        s = ''.join(char for char in s if char.isalnum())\n        \n        # 2. Convert all uppercase letters to lowercase letters\n        s = s.lower()\n        \n        # 3. Check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc911\uac04\uac12 \uad6c\ud558\uae30\n        # 3. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 4. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \ud06c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \uc81c\uac70\n        # 5. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 6. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uac19\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 7. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 8. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uac19\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 9. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 10. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uac19\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 11. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 12. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uac19\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 13. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uc791\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 14. \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8 \uc0ac\uc774\uc988\uac00 k\ubcf4\ub2e4 \uac19\uc73c\uba74 \uc911\uac04\uac12 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        # 15. \ufffd"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # if k is greater than the length of the list, we need to rotate by k % length\n        k = k % length\n        \n        # if k is 0, we don't need to rotate\n        if k == 0:\n            return head\n        \n        # find the new head\n        new_head = head\n        for i in range(length - k - 1):\n            new_head = new_head.next\n        \n        # find the new tail\n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the new head\n        new_tail.next = head\n        \n        # cut the old list off\n        new_head = new_head.next\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.left)\n        \n        return root.left.val + self.sumOfLeftLeaves(root.right) + self.sumOfLeftLeaves(root.left)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u77e9\u9635\u7684\u884c\u6570\u548c\u5217\u6570\n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 2. \u8ba1\u7b97\u77e9\u9635\u7684\u6700\u5927\u548c\n        max_sum = float('-inf')\n        for i in range(n):\n            # 2.1 \u8ba1\u7b97\u5217\u7684\u6700\u5927\u548c\n            cur_sum = 0\n            for j in range(i, n):\n                cur_sum += sum(matrix[i][j])\n                max_sum = max(max_sum, cur_sum)\n                if max_sum == k:\n                    return k\n                if cur_sum > k:\n                    break\n        \n        # 3. \u8ba1\u7b97\u77e9\u9635\u7684\u6700\u5927\u548c\n        for i in range(m):\n            # 3.1 \u8ba1\u7b97\u884c\u5217\u7684\u6700\u5927\u548c\n            cur_sum = 0\n            for j in range(n):\n                cur_sum += sum(matrix[j][i])\n                max_sum = max(max_sum, cur_sum)\n                if max_sum == k:\n                    return k\n                if cur_sum > k:\n                    break\n        \n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        if dividend == 2**31 - 1 and divisor == -1:\n            return 2**31 - 1\n        if dividend == 2**31 - 1 and divisor == 1:\n            return 2**31 - 1\n        if dividend == -2**31 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == -2**31:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == -2**31 and divisor == 2**31 - 1:\n            return -1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 1:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 2:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 3:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 4:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 5:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 6:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 7:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 8:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 9:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 10:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 11:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 12:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 13:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 14:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 15:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 16:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 17:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 18:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 19:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 20:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 21:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 22:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 23:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 24:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**31 - 25:\n            return 1\n        if dividend == 2**31 - 1 and divisor == 2**"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def dfs(i,j):\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != \"O\":\n                return\n            board[i][j] = \"T\"\n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if i == 0 or i == len(board)-1 or j == 0 or j == len(board[0])-1:\n                    if board[i][j] == \"O\":\n                        dfs(i,j)\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == \"O\":\n                    board[i][j] = \"X\"\n                elif board[i][j] == \"T\":\n                    board[i][j] = \"O\""}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute Force\n        ## Time Complexity: O(n^2)\n        ## Space Complexity: O(1)\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i,j]\n        \n        ## Hashmap\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        # hashmap = {}\n        # for i in range(len(nums)):\n        #     if nums[i] in hashmap:\n        #         return [hashmap[nums[i]], i]\n        #     hashmap[target - nums[i]] = i\n        \n        ## Two Pointer\n        ## Time Complexity: O(nlogn)\n        ## Space Complexity: O(1)\n        nums.sort()\n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            if nums[left] + nums[right] == target:\n                return [left, right]\n            elif nums[left] + nums[right] < target:\n                left += 1\n            else:\n                right -= 1\n        return [-1, -1]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(target - cards}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, return true if s is empty\n        if not p:\n            return not s\n        \n        # if p is not empty, check if the first character is '*'\n        if p[0] != '*':\n            # if s is empty, return false\n            if not s:\n                return False\n            # if the first character of s is not equal to the first character of p, return false\n            if s[0] != p[0] and p[0] != '?':\n                return False\n        # if p is not empty, check if the first character is '*'\n        if p[0] == '*':\n            # if s is empty, return true\n            if not s:\n                return True\n            # if the first character of s is not equal to the first character of p, return false\n            if s[0] != p[0] and p[0] != '?':\n                return False\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '?':\n                return True\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '*':\n                return self.isMatch(s[1:], p[1:])\n        # if p is not empty, check if the first character is '*'\n        if p[0] == '*':\n            # if s is empty, return true\n            if not s:\n                return True\n            # if the first character of s is not equal to the first character of p, return false\n            if s[0] != p[0] and p[0] != '?':\n                return False\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '?':\n                return True\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '*':\n                return self.isMatch(s, p[1:])\n        # if p is not empty, check if the first character is '*'\n        if p[0] == '*':\n            # if s is empty, return true\n            if not s:\n                return True\n            # if the first character of s is not equal to the first character of p, return false\n            if s[0] != p[0] and p[0] != '?':\n                return False\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '?':\n                return True\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '*':\n                return self.isMatch(s[1:], p[1:])\n        # if p is not empty, check if the first character is '*'\n        if p[0] == '*':\n            # if s is empty, return true\n            if not s:\n                return True\n            # if the first character of s is not equal to the first character of p, return false\n            if s[0] != p[0] and p[0] != '?':\n                return False\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '?':\n                return True\n            # if the first character of s is equal to the first character of p, return true\n            if s[0] == p[0] or p[0] == '*':\n                return self.isMatch(s[1:], p[1:])\n        # if p is not empty, check if the first character is '*'\n        if p[0] == '*':\n            # if s is empty, return true\n            if not s:\n                return True\n            # if the first character of s is not equal to the first character of p, return false\n            if s[0] != p[0] and p[0] != '?':\n                return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Initialize the majority element and the count\n        majority_element = nums[0]\n        count = 1\n        \n        # Iterate through the array\n        for i in range(1, len(nums)):\n            # If the current element is the majority element, increment the count\n            if nums[i] == majority_element:\n                count += 1\n            else:\n                # If the count becomes 0, set the current element as the majority element\n                if count == 0:\n                    majority_element = nums[i]\n                    count = 1\n                else:\n                    count -= 1\n        \n        return majority_element"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build the graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # Sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # Perform DFS\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n\n        # initialize result\n        result = [[0, 0]]\n\n        # iterate through buildings\n        for building in buildings:\n            # if building is the last building in the result, add it to the result\n            if building[1] == result[-1][0]:\n                result[-1][1] = max(result[-1][1], building[2])\n            # if building is not the last building in the result, add it to the result\n            else:\n                result.append([building[1], building[2]])\n\n        # sort result by right edge\n        result.sort(key=lambda x: x[0])\n\n        # initialize result\n        result = [[0, 0]]\n\n        # iterate through result\n        for i in range(len(result)):\n            # if result is the last building in the result, add it to the result\n            if result[i][0] == result[-1][0]:\n                result[-1][1] = max(result[-1][1], result[i][1])\n            # if result is not the last building in the result, add it to the result\n            else:\n                result.append(result[i])\n\n        # remove last building from result\n        result.pop()\n\n        # return result\n        return result"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Base Case\n        if len(triangle) == 1:\n            return triangle[0][0]\n        \n        # Initialize the DP array\n        dp = [0] * len(triangle[-1])\n        \n        # Iterate through the triangle from bottom to top\n        for i in range(len(triangle)-1, -1, -1):\n            for j in range(len(triangle[i])):\n                # If the current element is the last element in the row, return the value\n                if i == len(triangle)-1:\n                    dp[j] = triangle[i][j]\n                    continue\n                # If the current element is not the last element in the row, update the value\n                dp[j] = triangle[i][j] + min(dp[j], dp[j+1])\n        \n        # Return the minimum value in the DP array\n        return dp[0]"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        # 1000 - 999\n        # 1000000 - 999999\n        # 1000000000 - 9223372036854775807\n        # 1000000000000 - 9223372036854775807\n        # 1000000000000000 - 9223372036854775807\n        # 1000000000000000000 - 9223372036854775807\n        # 1000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000000000 - 9223372036854775807\n        # 1000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000000000 - 9223372036854775807\n        # 100000000000000000000000000000000000000000000000000000000 -"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] + dp[i-1][j-2] + ... + dp[i-1][j-i+1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] + dp[i-1][j-1] - dp[i-1][j-i]\n        # dp[i][j] = dp[i-1][j] +"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr and curr.next:\n            next_node = curr.next\n            curr.next = next_node.next\n            next_node.next = curr\n            prev.next = next_node\n            prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Create 2 dummy nodes\n        # 2. Create 2 pointers\n        # 3. Traverse the list\n        # 4. If the node value is less than x, add it to the left list\n        # 5. If the node value is greater than or equal to x, add it to the right list\n        # 6. Connect the left list to the right list\n        # 7. Connect the left list to the right list\n        # 8. Return the left list\n        \n        # 1. Create 2 dummy nodes\n        left = ListNode()\n        right = ListNode()\n        \n        # 2. Create 2 pointers\n        l = left\n        r = right\n        \n        # 3. Traverse the list\n        while head:\n            # 4. If the node value is less than x, add it to the left list\n            if head.val < x:\n                l.next = head\n                l = l.next\n            # 5. If the node value is greater than or equal to x, add it to the right list\n            else:\n                r.next = head\n                r = r.next\n            # 6. Connect the left list to the right list\n            head = head.next\n        # 7. Connect the left list to the right list\n        r.next = None\n        # 8. Return the left list\n        return left.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Find the node with two parents\n        # 2. Find the node with one parent\n        # 3. Find the node with no parent\n        # 4. Return the node with two parents\n        # 5. Return the node with one parent\n        # 6. Return the node with no parent\n        \n        # 1. Find the node with two parents\n        parent_node_1 = None\n        parent_node_2 = None\n        for edge in edges:\n            if parent_node_1 is None and edge[1] in edges:\n                parent_node_1 = edge[1]\n            elif parent_node_2 is None and edge[0] in edges:\n                parent_node_2 = edge[0]\n            elif parent_node_1 is not None and parent_node_2 is not None:\n                break\n        \n        # 2. Find the node with one parent\n        child_node_1 = None\n        child_node_2 = None\n        for edge in edges:\n            if edge[0] == parent_node_1:\n                child_node_1 = edge[1]\n            elif edge[0] == parent_node_2:\n                child_node_2 = edge[1]\n            elif edge[1] == parent_node_1:\n                child_node_1 = edge[0]\n            elif edge[1] == parent_node_2:\n                child_node_2 = edge[0]\n            elif edge[0] == child_node_1 and edge[1] == child_node_2:\n                return edge\n            elif edge[1] == child_node_1 and edge[0] == child_node_2:\n                return edge\n        \n        # 3. Find the node with no parent\n        no_parent_node = None\n        for edge in edges:\n            if edge[0] != parent_node_1 and edge[0] != parent_node_2:\n                no_parent_node = edge[0]\n            elif edge[1] != parent_node_1 and edge[1] != parent_node_2:\n                no_parent_node = edge[1]\n        \n        # 4. Return the node with two parents\n        if parent_node_1 is None:\n            return [parent_node_2, child_node_1]\n        # 5. Return the node with one parent\n        elif parent_node_2 is None:\n            return [parent_node_1, child_node_2]\n        # 6. Return the node with no parent\n        else:\n            return [no_parent_node, parent_node_1]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        def backtrack(path):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            for i in range(len(nums)):\n                if visited[i]:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                    continue\n                visited[i] = True\n                path.append(nums[i])\n                backtrack(path)\n                path.pop()\n                visited[i] = False\n        backtrack([])\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## Approach:\n        ## XOR:\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with a number is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with a number is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0\n        ## XOR of a number with 0 is the number itself\n        ## XOR of a number with itself is 0"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # left = 0\n        # right = len(nums) - 1\n        # while left <= right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] == target:\n        #         return mid\n        #     elif nums[mid] < target:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return left\n        \n        # linear search\n        for i in range(len(nums)):\n            if nums[i] >= target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(m*n)\n        # Space Complexity: O(m*n)\n        \n        # Approach:\n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We can use DP to solve this problem.\n        \n        # 1. We can use DP to solve this problem.\n        # 2. We can use DP to solve this problem.\n        # 3. We"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"111312211331121321332211\"\n        \n        if n == 12:\n            return \"31131122212321322211211\"\n        \n        if n == 13:\n            return \"1321131112311311221121312211\"\n        \n        if n == 14:\n            return \"1113122113311213213322112311312211\"\n        \n        if n == 15:\n            return \"311311222123213222112112311312211231131122211\"\n        \n        if n == 16:\n            return \"1321131112311311221121312211231131221123113112221121321332211\"\n        \n        if n == 17:\n            return \"1113122113311213213322112311312211231131122211213213322112311312211231131122211213322112311312211\"\n        \n        if n == 18:\n            return \"311311222123213222112112311312211231131122211213213322112311312211231131122211213213322112311312211231131122211213322112311312211\"\n        \n        if n == 19:\n            return \"13211311123113112211213122112311312211231131122211213213322112311312211231131122211213213322112311312211231131122211213322112311312211\"\n        \n        if n == 20:\n            return \"11131221133112132133221123113122112311311222112132133221123113122112311311222112132133221"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # binary search on the range of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number in the array\n        # binary search on the range of the sum of the largest number"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # 1. find the pivot\n        # 2. find the target in the left part\n        # 3. find the target in the right part\n        # 4. return the index of target\n        \n        # 1. find the pivot\n        # 1.1 find the pivot\n        # 1.2 if the pivot is 0, return -1\n        # 1.3 if the pivot is not 0, return the index of pivot\n        # 1.4 if the pivot is not 0, return the index of pivot + 1\n        # 1.5 if the pivot is not 0, return the index of pivot - 1\n        # 1.6 if the pivot is not 0, return the index of pivot - 2\n        # 1.7 if the pivot is not 0, return the index of pivot - 3\n        # 1.8 if the pivot is not 0, return the index of pivot - 4\n        # 1.9 if the pivot is not 0, return the index of pivot - 5\n        # 1.10 if the pivot is not 0, return the index of pivot - 6\n        # 1.11 if the pivot is not 0, return the index of pivot - 7\n        # 1.12 if the pivot is not 0, return the index of pivot - 8\n        # 1.13 if the pivot is not 0, return the index of pivot - 9\n        # 1.14 if the pivot is not 0, return the index of pivot - 10\n        # 1.15 if the pivot is not 0, return the index of pivot - 11\n        # 1.16 if the pivot is not 0, return the index of pivot - 12\n        # 1.17 if the pivot is not 0, return the index of pivot - 13\n        # 1.18 if the pivot is not 0, return the index of pivot - 14\n        # 1.19 if the pivot is not 0, return the index of pivot - 15\n        # 1.20 if the pivot is not 0, return the index of pivot - 16\n        # 1.21 if the pivot is not 0, return the index of pivot - 17\n        # 1.22 if the pivot is not 0, return the index of pivot - 18\n        # 1.23 if the pivot is not 0, return the index of pivot - 19\n        # 1.24 if the pivot is not 0, return the index of pivot - 20\n        # 1.25 if the pivot is not 0, return the index of pivot - 21\n        # 1.26 if the pivot is not 0, return the index of pivot - 22\n        # 1.27 if the pivot is not 0, return the index of pivot - 23\n        # 1.28 if the pivot is not 0, return the index of pivot - 24\n        # 1.29 if the pivot is not 0, return the index of pivot - 25\n        # 1.30 if the pivot is not 0, return the index of pivot - 26\n        # 1.31 if the pivot is not 0, return the index of pivot - 27\n        # 1.32 if the pivot is not 0, return the index of pivot - 28\n        # 1.33 if the pivot is not 0, return the index of pivot - 29\n        # 1.34 if the pivot is not 0, return the index of pivot - 30\n        # 1.35 if the pivot is not 0, return the index of pivot - 31\n        # 1.36 if the pivot is not 0, return the index of pivot - 32\n        # 1.37 if the pivot is not 0, return the index of pivot - 33\n        # 1.38 if"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        def backtrack(digits, index, path, res):\n            if len(path) == len(digits):\n                res.append(''.join(path))\n                return\n            \n            for i in range(index, len(digits)):\n                for letter in phone[digits[i]]:\n                    path.append(letter)\n                    backtrack(digits, i+1, path, res)\n                    path.pop()\n        \n        res = []\n        backtrack(digits, 0, [], res)\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the array\n        candidates.sort()\n        \n        # initialize the result\n        result = []\n        \n        # initialize the current combination\n        current_combination = []\n        \n        # initialize the current sum\n        current_sum = 0\n        \n        # initialize the index\n        index = 0\n        \n        # loop through the candidates\n        while index < len(candidates):\n            # if the current sum is less than the target\n            if current_sum < target:\n                # add the current candidate to the current combination\n                current_combination.append(candidates[index])\n                # update the current sum\n                current_sum += candidates[index]\n                # recursively call the function with the next index\n                result += self.combinationSum(candidates, target, index, current_combination, current_sum)\n                # remove the last element from the current combination\n                current_combination.pop()\n                # update the current sum\n                current_sum -= candidates[index]\n            # if the current sum is equal to the target\n            elif current_sum == target:\n                # add the current combination to the result\n                result.append(current_combination.copy())\n            # if the current sum is greater than the target\n            else:\n                # break the loop\n                break\n            # increment the index\n            index += 1\n        \n        # return the result\n        return result\n    \n    def combinationSum(self, candidates, target, index, current_combination, current_sum):\n        # initialize the result\n        result = []\n        \n        # loop through the candidates\n        for i in range(index, len(candidates)):\n            # if the current sum is less than the target\n            if current_sum + candidates[i] <= target:\n                # add the current candidate to the current combination\n                current_combination.append(candidates[i])\n                # recursively call the function with the next index\n                result += self.combinationSum(candidates, target, i, current_combination, current_sum + candidates[i])\n                # remove the last element from the current combination\n                current_combination.pop()\n            # if the current sum is equal to the target\n            elif current_sum + candidates[i] == target:\n                # add the current combination to the result\n                result.append(current_combination.copy())\n            # if the current sum is greater than the target\n            else:\n                # break the loop\n                break\n        \n        # return the result\n        return result"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Find the nearest palindrome\n        # 2. If the nearest palindrome is 0, return 1\n        # 3. If the nearest palindrome is 9, return 8\n        # 4. If the nearest palindrome is 99, return 101\n        # 5. If the nearest palindrome is 999, return 1001\n        # 6. If the nearest palindrome is 9999, return 10001\n        # 7. If the nearest palindrome is 99999, return 100001\n        # 8. If the nearest palindrome is 999999, return 1000001\n        # 9. If the nearest palindrome is 9999999, return 10000001\n        # 10. If the nearest palindrome is 99999999, return 100000001\n        # 11. If the nearest palindrome is 999999999, return 1000000001\n        # 12. If the nearest palindrome is 9999999999, return 10000000001\n        # 13. If the nearest palindrome is 99999999999, return 100000000001\n        # 14. If the nearest palindrome is 999999999999, return 1000000000001\n        # 15. If the nearest palindrome is 9999999999999, return 10000000000001\n        # 16. If the nearest palindrome is 99999999999999, return 100000000000001\n        # 17. If the nearest palindrome is 999999999999999, return 1000000000000001\n        # 18. If the nearest palindrome is 9999999999999999, return 10000000000000001\n        # 19. If the nearest palindrome is 99999999999999999, return 100000000000000001\n        # 20. If the nearest palindrome is 999999999999999999, return 1000000000000000001\n        # 21. If the nearest palindrome is 9999999999999999999, return 10000000000000000001\n        # 22. If the nearest palindrome is 99999999999999999999, return 100000000000000000001\n        # 23. If the nearest palindrome is 999999999999999999999, return 1000000000000000000001\n        # 24. If the nearest palindrome is 9999999999999999999999, return 10000000000000000000001\n        # 25. If the nearest palindrome is 99999999999999999999999, return 100000000000000000000001\n        # 26. If the nearest palindrome"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        num = 1\n        row_start = 0\n        row_end = n - 1\n        col_start = 0\n        col_end = n - 1\n        \n        while row_start <= row_end and col_start <= col_end:\n            for i in range(col_start, col_end + 1):\n                matrix[row_start][i] = num\n                num += 1\n            row_start += 1\n            \n            for i in range(row_start, row_end + 1):\n                matrix[i][col_end] = num\n                num += 1\n            col_end -= 1\n            \n            if row_start <= row_end:\n                for i in range(col_end, col_start - 1, -1):\n                    matrix[row_end][i] = num\n                    num += 1\n                row_end -= 1\n            \n            if col_start <= col_end:\n                for i in range(row_end, row_start - 1, -1):\n                    matrix[i][col_start] = num\n                    num += 1\n                col_start += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = -x\n            sign = -1\n        else:\n            sign = 1\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return rev * sign"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. transpose\n        # 2. reverse each row\n        # 3. swap\n        \n        # 1. transpose\n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # 2. reverse each row\n        for i in range(n):\n            matrix[i].reverse()\n        \n        # 3. swap\n        for i in range(n):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # if the last stone is 0, return True\n        if stones[-1] == 0:\n            return True\n        \n        # if the last stone is not 0, return False\n        if stones[-1] != 0:\n            return False\n        \n        # create a dictionary to store the stone positions\n        stone_dict = {}\n        \n        # create a set to store the stone positions\n        stone_set = set()\n        \n        # add the stones to the stone_set\n        for stone in stones:\n            stone_set.add(stone)\n        \n        # add the stone positions to the stone_dict\n        for i, stone in enumerate(stones):\n            stone_dict[stone] = i\n        \n        # create a queue to store the stone positions\n        queue = deque([0])\n        \n        # create a set to store the stone positions\n        visited = set()\n        \n        # while the queue is not empty\n        while queue:\n            # pop the first stone position\n            stone = queue.popleft()\n            \n            # if the stone is the last stone, return True\n            if stone == stones[-1]:\n                return True\n            \n            # if the stone is not the last stone, check if the stone is in the stone_set\n            if stone not in stone_set:\n                continue\n            \n            # if the stone is in the stone_set, add the stone to the visited set\n            visited.add(stone)\n            \n            # if the stone is not the last stone, check if the stone is in the stone_dict\n            if stone not in stone_dict:\n                continue\n            \n            # if the stone is in the stone_dict, add the stone to the queue\n            for i in range(stone + 1, stone + stone_dict[stone] + 1):\n                if i in stone_set:\n                    queue.append(i)\n        \n        # if the queue is empty, return False\n        return False"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score.sort(reverse=True)\n        \n        # create a dictionary to store the rank of each score\n        rank_dict = {}\n        \n        # assign the rank to each score\n        for i, score in enumerate(score):\n            rank_dict[score] = i + 1\n        \n        # assign the rank to each score\n        for i, score in enumerate(score):\n            if i == 0:\n                score_rank = \"Gold Medal\"\n            elif i == 1:\n                score_rank = \"Silver Medal\"\n            elif i == 2:\n                score_rank = \"Bronze Medal\"\n            else:\n                score_rank = str(i + 1)\n            score_rank = score_rank\n            score_rank = rank_dict[score]\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank\n            score_rank = score_rank"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. left pointer\n        # 2. right pointer\n        # 3. keep track of the longest substring\n        # 4. keep track of the unique characters\n        # 5. if the character is already in the unique characters, remove the left pointer\n        # 6. if the character is not in the unique characters, add the character to the unique characters\n        # 7. update the longest substring\n        # 8. return the longest substring\n        \n        # 1. left pointer\n        left = 0\n        # 2. right pointer\n        right = 0\n        # 3. keep track of the longest substring\n        longest = 0\n        # 4. keep track of the unique characters\n        unique = set()\n        \n        while right < len(s):\n            # 5. if the character is already in the unique characters, remove the left pointer\n            if s[right] in unique:\n                unique.remove(s[left])\n                left += 1\n            # 6. if the character is not in the unique characters, add the character to the unique characters\n            else:\n                unique.add(s[right])\n                right += 1\n            # 7. update the longest substring\n            longest = max(longest, right - left)\n        \n        return longest"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = word_dict.copy()\n            j = i\n            while j < i + word_len * word_count:\n                word = s[j:j+word_len]\n                if word in temp_dict:\n                    temp_dict[word] -= 1\n                    if temp_dict[word] == 0:\n                        del temp_dict[word]\n                j += word_len\n            if len(temp_dict) == 0:\n                res.append(i)\n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_num = max(arr)\n        chunks = 0\n        for i in range(len(arr)):\n            if arr[i] == max_num:\n                chunks += 1\n                max_num = max(arr[i+1:])\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the matrix with the number of operations required to convert word1 to word2\n        # The matrix is initialized with the number of operations required to convert word1 to an empty string\n        # The matrix is initialized with the number of operations required to convert an empty string to word2\n        # The matrix is initialized with the number of operations required to convert an empty string to an empty string\n        # The matrix is initialized with the number of operations required to convert a single character to an empty string\n        # The matrix is initialized with the number of operations required to convert an empty string to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single character to a single character\n        # The matrix is initialized with the number of operations required to convert a single"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + \"->\" + path for path in left_paths + right_paths]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            # print(nums, left, mid, right)\n            i = left\n            j = mid + 1\n            count = 0\n            while i <= mid and j <= right:\n                if nums[i] > 2 * nums[j]:\n                    count += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right+1] = sorted(nums[left:right+1])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx >= sx and ty >= sy:\n            if tx == sx and ty == sy:\n                return True\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return False"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        v1 = [int(i) for i in v1]\n        v2 = [int(i) for i in v2]\n        if len(v1) > len(v2):\n            v2.extend([0]*(len(v1)-len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend([0]*(len(v2)-len(v1)))\n        for i in range(len(v1)):\n            if v1[i] > v2[i]:\n                return 1\n            elif v1[i] < v2[i]:\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 2. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 3. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 4. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 5. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 6. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 7. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 8. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 9. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 10. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 11. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 12. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 13. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 14. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 15. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 16. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 17. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 18. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 19. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 20. \ucd5c\ub300\uac12 - \ucd5c\uc18c\uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # 21. \ucd5c\uc18c\uac12\uc744 \ucc3e\uc544\uc11c \ucd5c\ub300\uac12\uc744 \ucc3e\ub294\ub2e4.\n        # 22. \ucd5c\ub300\uac12 - \ucd5c"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        # print(courses)\n        # print(courses[0][1])\n        # print(courses[1][1])\n        # print(courses[2][1])\n        # print(courses[3][1])\n        # print(courses[4][1])\n        # print(courses[5][1])\n        # print(courses[6][1])\n        # print(courses[7][1])\n        # print(courses[8][1])\n        # print(courses[9][1])\n        # print(courses[10][1])\n        # print(courses[11][1])\n        # print(courses[12][1])\n        # print(courses[13][1])\n        # print(courses[14][1])\n        # print(courses[15][1])\n        # print(courses[16][1])\n        # print(courses[17][1])\n        # print(courses[18][1])\n        # print(courses[19][1])\n        # print(courses[20][1])\n        # print(courses[21][1])\n        # print(courses[22][1])\n        # print(courses[23][1])\n        # print(courses[24][1])\n        # print(courses[25][1])\n        # print(courses[26][1])\n        # print(courses[27][1])\n        # print(courses[28][1])\n        # print(courses[29][1])\n        # print(courses[30][1])\n        # print(courses[31][1])\n        # print(courses[32][1])\n        # print(courses[33][1])\n        # print(courses[34][1])\n        # print(courses[35][1])\n        # print(courses[36][1])\n        # print(courses[37][1])\n        # print(courses[38][1])\n        # print(courses[39][1])\n        # print(courses[40][1])\n        # print(courses[41][1])\n        # print(courses[42][1])\n        # print(courses[43][1])\n        # print(courses[44][1])\n        # print(courses[45][1])\n        # print(courses[46][1])\n        # print(courses[47][1])\n        # print(courses[48][1])\n        # print(courses[49][1])\n        # print(courses[50][1])\n        # print(courses[51][1])\n        # print(courses[52][1])\n        # print(courses[53][1])\n        # print(courses[54][1])\n        # print(courses[55][1])\n        # print(courses[56][1])\n        # print(courses[57][1])\n        # print(courses[58][1])\n        # print(courses[59][1])\n        # print(courses[60][1])\n        # print(courses[61][1])\n        # print(courses[62][1])\n        # print(courses[63][1])\n        # print(courses[64][1])\n        # print(courses[65][1])\n        # print(courses[66][1])\n        # print(courses[67][1])\n        # print(courses[68][1])\n        # print(courses[69][1])\n        # print(courses[70][1])\n        # print(courses[7"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        next = curr.next\n        \n        while next:\n            curr.next = next.next\n            next.next = prev.next\n            prev.next = next\n            next = curr.next\n        \n        return curr"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        # Approach:\n        # 1. Check if the string is a palindrome\n        # 2. Check if the string is a substring of the string\n        # 3. Return True if the string is a substring of the string\n        # 4. Return False if the string is not a substring of the string\n        # 5. Return True if the string is a palindrome\n        # 6. Return False if the string is not a palindrome\n        \n        # 1. Check if the string is a palindrome\n        if s == s[::-1]:\n            return True\n        \n        # 2. Check if the string is a substring of the string\n        for i in range(1, len(s)):\n            if s[:i] * (len(s) // i) == s:\n                return True\n        \n        # 3. Return True if the string is a substring of the string\n        return False\n        \n        # 4. Return False if the string is not a substring of the string\n        \n        # 5. Return True if the string is a palindrome\n        \n        # 6. Return False if the string is not a palindrome"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1,2,3,4,5,6,7,8,9,10\n        # 2. 1,2,3,4,5,6,7,8,9,10\n        # 3. 1,2,3,4,5,6,7,8,9,10\n        # 4. 1,2,3,4,5,6,7,8,9,10\n        # 5. 1,2,3,4,5,6,7,8,9,10\n        # 6. 1,2,3,4,5,6,7,8,9,10\n        # 7. 1,2,3,4,5,6,7,8,9,10\n        # 8. 1,2,3,4,5,6,7,8,9,10\n        # 9. 1,2,3,4,5,6,7,8,9,10\n        # 10. 1,2,3,4,5,6,7,8,9,10\n        # 11. 1,2,3,4,5,6,7,8,9,10\n        # 12. 1,2,3,4,5,6,7,8,9,10\n        # 13. 1,2,3,4,5,6,7,8,9,10\n        # 14. 1,2,3,4,5,6,7,8,9,10\n        # 15. 1,2,3,4,5,6,7,8,9,10\n        # 16. 1,2,3,4,5,6,7,8,9,10\n        # 17. 1,2,3,4,5,6,7,8,9,10\n        # 18. 1,2,3,4,5,6,7,8,9,10\n        # 19. 1,2,3,4,5,6,7,8,9,10\n        # 20. 1,2,3,4,5,6,7,8,9,10\n        # 21. 1,2,3,4,5,6,7,8,9,10\n        # 22. 1,2,3,4,5,6,7,8,9,10\n        # 23. 1,2,3,4,5,6,7,8,9,10\n        # 24. 1,2,3,4,5,6,7,8,9,10\n        # 25. 1,2,3,4,5,6,7,8,9,10\n        # 26. 1,2,3,4,5,6,7,8,9,10\n        # 27. 1,2,3,4,5,6,7,8,9,10\n        # 28. 1,2,3,4,5,6,7,8,9,10\n        # 29. 1,2,3,4,5,6,7,8,9,10\n        # 30. 1,2,3,4,5,6,7,8,9,10\n        # 31. 1,2,3,4,5,6,7,8,9,10\n        # 32. 1,2,3,4,5,6,7,8,9,10\n        # 33. 1,2,3,4,5,6,7,8,9,10\n        # 34. 1,2,3,4,5,6,7,8,9,10\n        # 35. 1,2,3,4,5,6,7,8,9,10\n        # 36. 1,2,3,4,5,6,7,8,9,10\n        # 37. 1,2,3,4,5,6,7,8,9,"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2sum\n        # 2. 3sum\n        # 3. 4sum\n        # 4. 5sum\n        # 5. 6sum\n        # 6. 7sum\n        # 7. 8sum\n        # 8. 9sum\n        # 9. 10sum\n        # 10. 11sum\n        # 11. 12sum\n        # 12. 13sum\n        # 13. 14sum\n        # 14. 15sum\n        # 15. 16sum\n        # 16. 17sum\n        # 17. 18sum\n        # 18. 19sum\n        # 19. 20sum\n        # 20. 21sum\n        # 21. 22sum\n        # 22. 23sum\n        # 23. 24sum\n        # 24. 25sum\n        # 25. 26sum\n        # 26. 27sum\n        # 27. 28sum\n        # 28. 29sum\n        # 29. 30sum\n        # 30. 31sum\n        # 31. 32sum\n        # 32. 33sum\n        # 33. 34sum\n        # 34. 35sum\n        # 35. 36sum\n        # 36. 37sum\n        # 37. 38sum\n        # 38. 39sum\n        # 39. 40sum\n        # 40. 41sum\n        # 41. 42sum\n        # 42. 43sum\n        # 43. 44sum\n        # 44. 45sum\n        # 45. 46sum\n        # 46. 47sum\n        # 47. 48sum\n        # 48. 49sum\n        # 49. 50sum\n        # 50. 51sum\n        # 51. 52sum\n        # 52. 53sum\n        # 53. 54sum\n        # 54. 55sum\n        # 55. 56sum\n        # 56. 57sum\n        # 57. 58sum\n        # 58. 59sum\n        # 59. 60sum\n        # 60. 61sum\n        # 61. 62sum\n        # 62. 63sum\n        # 63. 64sum\n        # 64. 65sum\n        # 65. 66sum\n        # 66. 67sum\n        # 67. 68sum\n        # 68. 69sum\n        # 69. 70sum\n        # 70. 71sum\n        # 71. 72sum\n        # 72. 73sum\n        # 73. 74sum\n        # 74. 75sum\n        # 75. 76sum\n        # 76. 77sum\n        # 77. 78sum\n        # 78. 79sum\n        # 79. 80sum\n        # 80. 81sum\n        # 81. 82sum\n        # 82. 83sum\n        # 83. 84sum\n        # 84. 85sum\n        # 85. 86sum\n        # 86. 87sum\n        # 87. 88sum\n        # 88. 89sum\n        # 89. 90sum\n        # 90. 91sum\n        # 91. 92sum\n        # 92. 93sum\n        # 93. 94sum\n        # 94. 95sum\n        # 95."}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min number of stickers needed to spell out target[0:i]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring of stickers[j] and target[j:i] is a substring of target[0:j]\n        # dp[i] = min(dp[j] + 1) where target[j:i] is a substring"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j] + 1)\n        # dp[i][j] ="}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        result = 0\n        i = 0\n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                result += roman_dict[s[i + 1]] - roman_dict[s[i]]\n                i += 2\n            else:\n                result += roman_dict[s[i]]\n                i += 1\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        # Hash Table\n        # Hash Table:\n        # - Hash Table:\n        #     - Hash Table:\n        #         - Hash Table:\n        #             - Hash Table:\n        #                 - Hash Table:\n        #                     - Hash Table:\n        #                         - Hash Table:\n        #                             - Hash Table:\n        #                                 - Hash Table:\n        #                                     - Hash Table:\n        #                                         - Hash Table:\n        #                                             - Hash Table:\n        #                                                 - Hash Table:\n        #                                                     - Hash Table:\n        #                                                         - Hash Table:\n        #                                                             - Hash Table:\n        #                                                                 - Hash Table:\n        #                                                                     - Hash Table:\n        #                                                                         - Hash Table:\n        #                                                                             - Hash Table:\n        #                                                                                 - Hash Table:\n        #                                                                                     - Hash Table:\n        #                                                                                         - Hash Table:\n        #                                                                                             - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #                                                                                                 - Hash Table:\n        #"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\n        # 2. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 3. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 4. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 5. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 6. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 7. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 8. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 9. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 10. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 11. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 12. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 13. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ucd5c\ub300\uac12\uc744 \uad6c\ud55c\ub2e4.\n        # 14. \uc2ac\ub77c\uc774\ub529 \uc708\ub3c4\uc6b0 \ufffd"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # 1. Merge the two arrays\n        # 2. Find the median\n        # 3. Return the median\n        \n        # 1. Merge the two arrays\n        nums1.extend(nums2)\n        nums1.sort()\n        \n        # 2. Find the median\n        if len(nums1) % 2 == 0:\n            median = (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2\n        else:\n            median = nums1[len(nums1) // 2]\n        \n        # 3. Return the median\n        return median"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left = 0\n        # right = len(nums) - 1\n        \n        # while left < right:"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            path.append(root.val)\n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L >= W\n        # 3. L - W < W\n        # 4. L - W = area - W\n        # 5. L - W = area - W\n        # 6. L - W = area - W\n        # 7. L - W = area - W\n        # 8. L - W = area - W\n        # 9. L - W = area - W\n        # 10. L - W = area - W\n        # 11. L - W = area - W\n        # 12. L - W = area - W\n        # 13. L - W = area - W\n        # 14. L - W = area - W\n        # 15. L - W = area - W\n        # 16. L - W = area - W\n        # 17. L - W = area - W\n        # 18. L - W = area - W\n        # 19. L - W = area - W\n        # 20. L - W = area - W\n        # 21. L - W = area - W\n        # 22. L - W = area - W\n        # 23. L - W = area - W\n        # 24. L - W = area - W\n        # 25. L - W = area - W\n        # 26. L - W = area - W\n        # 27. L - W = area - W\n        # 28. L - W = area - W\n        # 29. L - W = area - W\n        # 30. L - W = area - W\n        # 31. L - W = area - W\n        # 32. L - W = area - W\n        # 33. L - W = area - W\n        # 34. L - W = area - W\n        # 35. L - W = area - W\n        # 36. L - W = area - W\n        # 37. L - W = area - W\n        # 38. L - W = area - W\n        # 39. L - W = area - W\n        # 40. L - W = area - W\n        # 41. L - W = area - W\n        # 42. L - W = area - W\n        # 43. L - W = area - W\n        # 44. L - W = area - W\n        # 45. L - W = area - W\n        # 46. L - W = area - W\n        # 47. L - W = area - W\n        # 48. L - W = area - W\n        # 49. L - W = area - W\n        # 50. L - W = area - W\n        # 51. L - W = area - W\n        # 52. L - W = area - W\n        # 53. L - W = area - W\n        # 54. L - W = area - W\n        # 55. L - W = area - W\n        # 56. L - W = area - W\n        # 57. L - W = area - W\n        # 58. L - W = area - W\n        # 59. L - W = area - W\n        # 60. L - W = area - W\n        # 61. L - W = area - W\n        # 62. L - W = area - W\n        # 63. L - W = area - W\n        # 64. L - W = area - W\n        # 65. L - W = area - W\n        # 66. L - W = area - W\n        # 67. L - W = area - W\n        # 68. L - W = area - W\n        # 69. L - W = area - W\n        # 70. L - W = area - W\n        # 71. L - W = area - W\n        # 72. L - W = area - W\n        # 73. L - W = area - W\n        # 74. L - W = area - W\n        # 7"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                word = queue.popleft()\n                for i in range(len(word)):\n                    neighbor = word[:i] + \"*\" + word[i+1:]\n                    for neighbor_word in graph[neighbor]:\n                        if neighbor_word == endWord:\n                            res.append([beginWord, neighbor_word] + [neighbor_word])\n                        if neighbor_word not in visited:\n                            visited.add(neighbor_word)\n                            queue.append(neighbor_word)\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 2 != 0:\n            return False\n        return self.isPowerOfTwo(n/2)"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            res.append(res[i])\n            for k in range(i, j):\n                res[-1].append(nums[k])\n            i = j\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 2. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 3. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 4. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 5. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 6. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 7. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 8. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 9. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 10. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 11. \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uc77c \uc704\uc5d0 \uc788\ub294 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc73c\ub85c \uac00\uba74\uc11c \uc2a4\ud0dd\uc5d0 \ub123\uae30\n        # 1"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif token == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif token == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif token == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(token))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        for rect in rectangles:\n            x_min = min(x_min, rect[0])\n            x_max = max(x_max, rect[2])\n            y_min = min(y_min, rect[1])\n            y_max = max(y_max, rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        if x_min == x_max or y_min == y_max:\n            return False\n        if (x_min, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_min) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 26^1 * 26\n        # 26^3 = 26^2 * 26\n        # 26^4 = 26^3 * 26\n        # 26^5 = 26^4 * 26\n        # 26^6 = 26^5 * 26\n        # 26^7 = 26^6 * 26\n        # 26^8 = 26^7 * 26\n        # 26^9 = 26^8 * 26\n        # 26^10 = 26^9 * 26\n        # 26^11 = 26^10 * 26\n        # 26^12 = 26^11 * 26\n        # 26^13 = 26^12 * 26\n        # 26^14 = 26^13 * 26\n        # 26^15 = 26^14 * 26\n        # 26^16 = 26^15 * 26\n        # 26^17 = 26^16 * 26\n        # 26^18 = 26^17 * 26\n        # 26^19 = 26^18 * 26\n        # 26^20 = 26^19 * 26\n        # 26^21 = 26^20 * 26\n        # 26^22 = 26^21 * 26\n        # 26^23 = 26^22 * 26\n        # 26^24 = 26^23 * 26\n        # 26^25 = 26^24 * 26\n        # 26^26 = 26^25 * 26\n        # 26^27 = 26^26 * 26\n        # 26^28 = 26^27 * 26\n        # 26^29 = 26^28 * 26\n        # 26^30 = 26^29 * 26\n        # 26^31 = 26^30 * 26\n        # 26^32 = 26^31 * 26\n        # 26^33 = 26^32 * 26\n        # 26^34 = 26^33 * 26\n        # 26^35 = 26^34 * 26\n        # 26^36 = 26^35 * 26\n        # 26^37 = 26^36 * 26\n        # 26^38 = 26^37 * 26\n        # 26^39 = 26^38 * 26\n        # 26^40 = 26^39 * 26\n        # 26^41 = 26^40 * 26\n        # 26^42 = 26^41 * 26\n        # 26^43 = 26^42 * 26\n        # 26^44 = 26^43 * 26\n        # 26^45 = 26^44 * 26\n        # 26^46 = 26^45 * 26\n        # 26^47 = 26^46 * 26\n        # 26^48 = 26^47 * 26\n        # 26^49 = 26^48 * 26\n        # 26^50 = 26^49 * 26\n        # 26^51 = 26^50 * 26\n        # 26^52 = 26^51 * 26\n        # 26^53 = 26^52 * 26\n        # 26^54 = 26^53 * 26\n        # 26^55 = 26^5"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Kadane's Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n\n        max_sum = nums[0]\n        curr_sum = 0\n\n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = 0\n            curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 1 2 3 4 5\n        # 1 2 3 4 5 6\n        # 7 8 9 10 11 12\n        # 13 14 15 16 17 18\n        # 19 20 21 22 23 24\n        # 25 26 27 28 29 30\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26 27 28 29\n        # 30 31 32 33 34 35\n        \n        # 0 1 2 3 4 5\n        # 6 7 8 9 10 11\n        # 12 13 14 15 16 17\n        # 18 19 20 21 22 23\n        # 24 25 26"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n            \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return True\n        # if target is not in nums, return False\n        # if nums is empty, return False\n        # if nums has only one element, return True if target is equal to nums[0]\n        # if nums has more than one element, check if target is in nums[0]\n        # if target is in nums[0], return True\n        # if target is not in nums[0], check if target is in nums[1]\n        # if target is in nums[1], return True\n        # if target is not in nums[1], return False\n        \n        # edge cases\n        if not nums:\n            return False\n        if len(nums) == 1:\n            return nums[0] == target\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] < nums[right]:\n                if nums[mid] < target and target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target and target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0]*n for _ in range(m)]\n        dp[0][0] = 1\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    if i > 0:\n                        dp[i][j] += dp[i-1][j]\n                    if j > 0:\n                        dp[i][j] += dp[i][j-1]\n        return dp[-1][-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return max(self.maxDepth(root.left), self.maxDepth(root.right)) + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root is None:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        inorder_list = inorder(root)\n        min_diff = float('inf')\n        for i in range(1, len(inorder_list)):\n            min_diff = min(min_diff, inorder_list[i] - inorder_list[i - 1])\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        inorder_list = inorder(root)\n        max_count = 0\n        max_val = inorder_list[0]\n        count = 1\n        for i in range(1, len(inorder_list)):\n            if inorder_list[i] == inorder_list[i-1]:\n                count += 1\n            else:\n                if count > max_count:\n                    max_count = count\n                    max_val = inorder_list[i]\n                count = 1\n        if count > max_count:\n            max_count = count\n            max_val = inorder_list[i]\n        return [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val] if max_count == 1 else [max_val"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) == 0:\n            return -1\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \uc22b\uc790, 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        # 4. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 5. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 6. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 7. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 8. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 9. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 10. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 11. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 12. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 13. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 14. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 15. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 16. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 17. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 18. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 19. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 20. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 21. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 22. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 23. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 24. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 25. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 26. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 27. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 28. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ucd94\uac00\n        # 29. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \uc0ad\uc81c\n        # 30. \ucd5c\uc18c 1\uac1c \ubb38\uc790 \ubcc0\uacbd\n        # 31. \ufffd"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 10 = 2 * 5\n        # 2 * 5 = 10\n        # 10 = 2 * 2 * 5\n        # 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5 = 10\n        # 10 = 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 2 * 5\n        # 2 * 2 *"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = \"\"\n        for i in range(numRows):\n            res += s[i::2*numRows-2]\n            if i < numRows-1:\n                res += s[1+i::2*numRows-2]\n        return res"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc815\ub82c\n        # 2. \uc67c\ucabd \uc624\ub978\ucabd \uc911 \uc791\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd \uc624\ub978\ucabd \uc911 \uc791\uc740 \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 4. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 5. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 6. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 7. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 8. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 9. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 10. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 11. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 12. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 13. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 14. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 15. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 16. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 17. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 18. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 19. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 20. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4.\n        # 21. \uc804\uccb4 \ub192\uc774 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ufffd"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## 1. We can use the array as a hashmap to store the frequency of each number in the array.\n        ## 2. We can iterate through the array and for each number, we can check if the number is present in the hashmap.\n        ## 3. If the number is not present in the hashmap, we can add it to the result array.\n        ## 4. If the number is present in the hashmap, we can ignore it.\n        \n        ## Edge Cases:\n        ## 1. If the array is empty, we can return an empty array.\n        ## 2. If the array has only one element, we can return an empty array.\n        \n        ## Initialization:\n        ## 1. Create a hashmap to store the frequency of each number in the array.\n        ## 2. Create a result array to store the missing numbers.\n        \n        ## Iteration:\n        ## 1. Iterate through the array.\n        ## 2. For each number, check if the number is present in the hashmap.\n        ## 3. If the number is not present in the hashmap, we can add it to the result array.\n        ## 4. If the number is present in the hashmap, we can ignore it.\n        \n        ## Return:\n        ## 1. Return the result array.\n        \n        ## Edge Cases:\n        ## 1. If the array is empty, we can return an empty array.\n        ## 2. If the array has only one element, we can return an empty array.\n        \n        ## Initialization:\n        ## 1. Create a hashmap to store the frequency of each number in the array.\n        ## 2. Create a result array to store the missing numbers.\n        \n        ## Iteration:\n        ## 1. Iterate through the array.\n        ## 2. For each number, check if the number is present in the hashmap.\n        ## 3. If the number is not present in the hashmap, we can add it to the result array.\n        ## 4. If the number is present in the hashmap, we can ignore it.\n        \n        ## Return:\n        ## 1. Return the result array.\n        \n        ## Edge Cases:\n        ## 1. If the array is empty, we can return an empty array.\n        ## 2. If the array has only one element, we can return an empty array.\n        \n        ## Initialization:\n        ## 1. Create a hashmap to store the frequency of each number in the array.\n        ## 2. Create a result array to store the missing numbers.\n        \n        ## Iteration:\n        ## 1. Iterate through the array.\n        ## 2. For each number, check if the number is present in the hashmap.\n        ## 3. If the number is not present in the hashmap, we can add it to the result array.\n        ## 4. If the number is present in the hashmap, we can ignore it.\n        \n        ## Return:\n        ## 1. Return the result array.\n        \n        ## Edge Cases:\n        ## 1. If the array is empty, we can return an empty array.\n        ## 2. If the array has only one element, we can return an empty array.\n        \n        ## Initialization:\n        ## 1. Create a hashmap to store the frequency of each number in the array.\n        ## 2. Create a result array to store the missing numbers.\n        \n        ## Iteration:\n        ## 1. Iterate through the array.\n        ## 2. For each number, check if the number is present in the hashmap.\n        ## 3. If the number is not present in the hashmap, we can add it to the result array.\n        ## 4. If the number is present in the hashmap, we can ignore it.\n        \n        ## Return:\n        ## 1. Return the result array.\n        \n        ## Edge Cases:\n        ## 1. If the array is empty, we can return an empty array."}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[1])\n        res = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                res += 2\n                prev = interval[1] - 1\n            else:\n                res += 1\n                prev -= 1\n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            return root1.val == root2.val and isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(open_count, close_count, curr_str, res):\n            if open_count == close_count == n:\n                res.append(curr_str)\n                return\n            if open_count < n:\n                backtrack(open_count + 1, close_count, curr_str + \"(\", res)\n            if close_count < open_count:\n                backtrack(open_count, close_count + 1, curr_str + \")\", res)\n        \n        res = []\n        backtrack(0, 0, \"\", res)\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud55c \ubc29\ubc95\n        # 2. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 3. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 4. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 5. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 6. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 7. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 8. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 9. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 10. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 11. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 12. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 13. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 14. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 15. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 16. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 17. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\uc811 \uad6c\ud604\ud55c \ubc29\ubc95\n        # 18. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uace0 \uc9c1\ufffd"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n            return \"-\" + self.fractionToDecimal(numerator, denominator)\n        elif denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n            return \"-\" + self.fractionToDecimal(numerator, denominator)\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = \"\"\n        res += str(numerator // denominator) + \".\"\n        numerator = numerator % denominator\n        numerator *= 10\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + \"(\" + res[seen[numerator]:] + \")\"\n                break\n            seen[numerator] = len(res)\n            res += str(numerator // denominator)\n            numerator = numerator % denominator\n            numerator *= 10\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # 1. Find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Split the linked list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # 3. Recursively sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # 4. Merge the sorted halves\n        sorted_list = ListNode(0)\n        curr = sorted_list\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # 5. Concatenate the remaining nodes\n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return sorted_list.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort the envelopes by width and height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # print(envelopes)\n        # find the longest increasing subsequence\n        # return the length of the longest increasing subsequence\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelopes)\n        # return len(envelopes) - self.longest_increasing_subsequence(envelop"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(m*n) space\n        # row = [0]*len(matrix)\n        # col = [0]*len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = 1\n        #             col[j] = 1\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] == 1 or col[j] == 1:\n        #             matrix[i][j] = 0\n        # return matrix\n\n        ## O(1) space\n        # row = [0]*len(matrix)\n        # col = [0]*len(matrix[0])\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if matrix[i][j] == 0:\n        #             row[i] = 1\n        #             col[j] = 1\n        # for i in range(len(matrix)):\n        #     for j in range(len(matrix[0])):\n        #         if row[i] == 1 or col[j] == 1:\n        #             matrix[i][j] = 0\n        # return matrix\n\n        ## O(1) space\n        row = False\n        col = False\n        for i in range(len(matrix)):\n            if matrix[i][0] == 0:\n                col = True\n            for j in range(1, len(matrix[0])):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        for i in range(len(matrix)):\n            for j in range(1, len(matrix[0])):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        if col:\n            for i in range(len(matrix)):\n                matrix[i][0] = 0\n        if row:\n            for j in range(len(matrix[0])):\n                matrix[0][j] = 0\n        return matrix"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Find the length of the linked list\n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        \n        # 1. Find the length of the linked list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head\n        \n        # 2. Find the nth node from the end\n        # 3. Remove the nth node from the end\n        # 4. Return the head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in set, add it to the result\n        ## 4. Return the result\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If nums2[i] is in"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is None:\n            curr.next = list2\n        else:\n            curr.next = list1\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_area = 0\n        heights = [0] * n\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] >= heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. 2^n - 1\n        # 2. 2^n - 1\n        # 3. 2^n - 1\n        # 4. 2^n - 1\n        # 5. 2^n - 1\n        # 6. 2^n - 1\n        # 7. 2^n - 1\n        # 8. 2^n - 1\n        # 9. 2^n - 1\n        # 10. 2^n - 1\n        # 11. 2^n - 1\n        # 12. 2^n - 1\n        # 13. 2^n - 1\n        # 14. 2^n - 1\n        # 15. 2^n - 1\n        # 16. 2^n - 1\n        # 17. 2^n - 1\n        # 18. 2^n - 1\n        # 19. 2^n - 1\n        # 20. 2^n - 1\n        # 21. 2^n - 1\n        # 22. 2^n - 1\n        # 23. 2^n - 1\n        # 24. 2^n - 1\n        # 25. 2^n - 1\n        # 26. 2^n - 1\n        # 27. 2^n - 1\n        # 28. 2^n - 1\n        # 29. 2^n - 1\n        # 30. 2^n - 1\n        # 31. 2^n - 1\n        # 32. 2^n - 1\n        # 33. 2^n - 1\n        # 34. 2^n - 1\n        # 35. 2^n - 1\n        # 36. 2^n - 1\n        # 37. 2^n - 1\n        # 38. 2^n - 1\n        # 39. 2^n - 1\n        # 40. 2^n - 1\n        # 41. 2^n - 1\n        # 42. 2^n - 1\n        # 43. 2^n - 1\n        # 44. 2^n - 1\n        # 45. 2^n - 1\n        # 46. 2^n - 1\n        # 47. 2^n - 1\n        # 48. 2^n - 1\n        # 49. 2^n - 1\n        # 50. 2^n - 1\n        # 51. 2^n - 1\n        # 52. 2^n - 1\n        # 53. 2^n - 1\n        # 54. 2^n - 1\n        # 55. 2^n - 1\n        # 56. 2^n - 1\n        # 57. 2^n - 1\n        # 58. 2^n - 1\n        # 59. 2^n - 1\n        # 60. 2^n - 1\n        # 61. 2^n - 1\n        # 62. 2^n - 1\n        # 63. 2^n - 1\n        # 64. 2^n - 1\n        # 65. 2^n - 1\n        # 66. 2^n - 1\n        # 67. 2^n - 1\n        # 68. 2^n - 1\n        # 69. 2^n - 1\n        # 70. 2^n - 1\n        # 71. 2^n - 1\n        # 72. 2^n - 1\n        # 73. 2^n - 1\n        # 74. 2^n -"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[-1] < nums[-2]:\n        #     return nums[-1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\"\n        }\n        \n        roman_num = \"\"\n        \n        for key in roman_dict.keys():\n            roman_num += roman_dict[key] * (num // key)\n            num %= key\n            \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ##\n        ## Approach:\n        ## 1. We can use XOR to find the difference between the two strings.\n        ## 2. We can use a hashmap to store the frequency of each character in the string s.\n        ## 3. We can iterate through the string t and decrement the frequency of each character in the hashmap.\n        ## 4. If the frequency of a character is negative, it means that the character is present in string s.\n        ## 5. If the frequency of a character is zero, it means that the character is not present in string s.\n        ## 6. If the frequency of a character is positive, it means that the character is present in string s.\n        ## 7. We can return the character that has a negative frequency.\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##\n        ##"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def isValid(row, col, num):\n            # check row\n            for i in range(9):\n                if board[row][i] == num:\n                    return False\n            # check col\n            for i in range(9):\n                if board[i][col] == num:\n                    return False\n            # check 3x3 box\n            box_row = row // 3\n            box_col = col // 3\n            for i in range(box_row * 3, box_row * 3 + 3):\n                for j in range(box_col * 3, box_col * 3 + 3):\n                    if board[i][j] == num:\n                        return False\n            return True\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for num in range(1, 10):\n                            if isValid(i, j, str(num)):\n                                board[i][j] = str(num)\n                                if solve(board):\n                                    return True\n                                board[i][j] = '.'\n                        return False\n            return True\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree\n        # 4. Recursively traverse the right subtree\n        \n        # 1. Find the first and second node that is out of order\n        # 2. Swap the values of the first and second node\n        # 3. Recursively traverse the left subtree"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Find the middle of the linked list\n        # 2. Reverse the second half of the linked list\n        # 3. Compare the first half with the second half\n        \n        # 1. Find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the linked list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # 3. Compare the first half with the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. binary search\n        # 3. math\n        # 4. math\n        # 5. math\n        # 6. math\n        # 7. math\n        # 8. math\n        # 9. math\n        # 10. math\n        # 11. math\n        # 12. math\n        # 13. math\n        # 14. math\n        # 15. math\n        # 16. math\n        # 17. math\n        # 18. math\n        # 19. math\n        # 20. math\n        # 21. math\n        # 22. math\n        # 23. math\n        # 24. math\n        # 25. math\n        # 26. math\n        # 27. math\n        # 28. math\n        # 29. math\n        # 30. math\n        # 31. math\n        # 32. math\n        # 33. math\n        # 34. math\n        # 35. math\n        # 36. math\n        # 37. math\n        # 38. math\n        # 39. math\n        # 40. math\n        # 41. math\n        # 42. math\n        # 43. math\n        # 44. math\n        # 45. math\n        # 46. math\n        # 47. math\n        # 48. math\n        # 49. math\n        # 50. math\n        # 51. math\n        # 52. math\n        # 53. math\n        # 54. math\n        # 55. math\n        # 56. math\n        # 57. math\n        # 58. math\n        # 59. math\n        # 60. math\n        # 61. math\n        # 62. math\n        # 63. math\n        # 64. math\n        # 65. math\n        # 66. math\n        # 67. math\n        # 68. math\n        # 69. math\n        # 70. math\n        # 71. math\n        # 72. math\n        # 73. math\n        # 74. math\n        # 75. math\n        # 76. math\n        # 77. math\n        # 78. math\n        # 79. math\n        # 80. math\n        # 81. math\n        # 82. math\n        # 83. math\n        # 84. math\n        # 85. math\n        # 86. math\n        # 87. math\n        # 88. math\n        # 89. math\n        # 90. math\n        # 91. math\n        # 92. math\n        # 93. math\n        # 94. math\n        # 95. math\n        # 96. math\n        # 97. math\n        # 98. math\n        # 99. math\n        # 100. math\n        # 101. math\n        # 102. math\n        # 103. math\n        # 104. math\n        # 105. math\n        # 106. math\n        # 107. math\n        # 108. math\n        # 109. math\n        # 110. math\n        # 111. math\n        # 112. math\n        # 113. math\n        # 114. math\n        # 115. math\n        # 116. math\n        # 117. math\n        # 118. math\n        # 119. math\n        # 120. math\n        # 121. math\n        # 122. math\n        # 123. math\n        # 124. math\n        # 125. math\n        #"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return None\n        \n        # while head and head.val == val:\n        #     head = head.next\n        #     if head is None:\n        #         return None\n        \n        # curr = head\n        # while curr.next:\n        #     if curr.next.val == val:\n        #         curr.next = curr.next.next\n        #     else:\n        #         curr = curr.next\n        # return head\n        \n        # if head is None:\n        #     return None\n        \n        # while head and head.val == val:\n        #     head = head.next\n        #     if head is None:\n        #         return None\n        \n        # curr = head\n        # while curr.next:\n        #     if curr.next.val == val:\n        #         curr.next = curr.next.next\n        #     else:\n        #         curr = curr.next\n        # return head\n        \n        if head is None:\n            return None\n        \n        while head and head.val == val:\n            head = head.next\n            if head is None:\n                return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of strings\n        path_list = path.split('/')\n        \n        # initialize an empty stack\n        stack = []\n        \n        # loop through the list of strings\n        for item in path_list:\n            # if the item is not empty and not '.'\n            if item and item != '.':\n                # if the item is '..'\n                if item == '..':\n                    # if the stack is not empty\n                    if stack:\n                        # pop the last item from the stack\n                        stack.pop()\n                # otherwise, add the item to the stack\n                else:\n                    stack.append(item)\n        \n        # join the stack with a '/'\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i,j,word,visited):\n            if len(word) == 0:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or visited[i][j] or board[i][j] != word[0]:\n                return False\n            visited[i][j] = True\n            res = dfs(i+1,j,word[1:],visited) or dfs(i-1,j,word[1:],visited) or dfs(i,j+1,word[1:],visited) or dfs(i,j-1,word[1:],visited)\n            visited[i][j] = False\n            return res\n        \n        res = []\n        visited = [[False for i in range(len(board[0]))] for j in range(len(board))]\n        for word in words:\n            for i in range(len(board)):\n                for j in range(len(board[0])):\n                    if dfs(i,j,word,visited):\n                        res.append(word)\n                        break\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_dict:\n                s_dict[s[i]] += 1\n            else:\n                s_dict[s[i]] = 1\n            \n            if t[i] in t_dict:\n                t_dict[t[i]] += 1\n            else:\n                t_dict[t[i]] = 1\n        \n        for key in s_dict:\n            if key not in t_dict:\n                return False\n            if s_dict[key] != t_dict[key]:\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 3 for loops\n        # 2. 3 for loops\n        # 3. 3 for loops\n        # 4. 3 for loops\n        # 5. 3 for loops\n        # 6. 3 for loops\n        # 7. 3 for loops\n        # 8. 3 for loops\n        # 9. 3 for loops\n        # 10. 3 for loops\n        # 11. 3 for loops\n        # 12. 3 for loops\n        # 13. 3 for loops\n        # 14. 3 for loops\n        # 15. 3 for loops\n        # 16. 3 for loops\n        # 17. 3 for loops\n        # 18. 3 for loops\n        # 19. 3 for loops\n        # 20. 3 for loops\n        # 21. 3 for loops\n        # 22. 3 for loops\n        # 23. 3 for loops\n        # 24. 3 for loops\n        # 25. 3 for loops\n        # 26. 3 for loops\n        # 27. 3 for loops\n        # 28. 3 for loops\n        # 29. 3 for loops\n        # 30. 3 for loops\n        # 31. 3 for loops\n        # 32. 3 for loops\n        # 33. 3 for loops\n        # 34. 3 for loops\n        # 35. 3 for loops\n        # 36. 3 for loops\n        # 37. 3 for loops\n        # 38. 3 for loops\n        # 39. 3 for loops\n        # 40. 3 for loops\n        # 41. 3 for loops\n        # 42. 3 for loops\n        # 43. 3 for loops\n        # 44. 3 for loops\n        # 45. 3 for loops\n        # 46. 3 for loops\n        # 47. 3 for loops\n        # 48. 3 for loops\n        # 49. 3 for loops\n        # 50. 3 for loops\n        # 51. 3 for loops\n        # 52. 3 for loops\n        # 53. 3 for loops\n        # 54. 3 for loops\n        # 55. 3 for loops\n        # 56. 3 for loops\n        # 57. 3 for loops\n        # 58. 3 for loops\n        # 59. 3 for loops\n        # 60. 3 for loops\n        # 61. 3 for loops\n        # 62. 3 for loops\n        # 63. 3 for loops\n        # 64. 3 for loops\n        # 65. 3 for loops\n        # 66. 3 for loops\n        # 67. 3 for loops\n        # 68. 3 for loops\n        # 69. 3 for loops\n        # 70. 3 for loops\n        # 71. 3 for loops\n        # 72. 3 for loops\n        # 73. 3 for loops\n        # 74. 3 for loops\n        # 75. 3 for loops\n        # 76. 3 for loops\n        # 77. 3 for loops\n        # 78. 3 for loops\n        # 79. 3 for loops\n        # 80. 3 for loops\n        # 81. 3 for loops\n        # 82. 3 for loops\n        # 83. 3 for loops\n        # 84. 3 for loops\n        # 85. 3 for loops\n        # 86. 3 for loops\n        # 87. 3 for loops\n        # 88. 3 for loops\n        # 89. 3 for loops\n        # 90. 3 for loops\n        # 91. 3 for loops\n        # 92. 3 for loops\n        # 93. 3 for loops\n        # 94. 3 for loops"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                answer.append(\"Fizz\")\n            elif i % 5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Reverse the order of the words\n        words.reverse()\n        \n        # Join the words back into a single string\n        return \" \".join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 26^1 * 26\n        # 26^3 = 26^2 * 26\n        # 26^4 = 26^3 * 26\n        # 26^5 = 26^4 * 26\n        # 26^6 = 26^5 * 26\n        # 26^7 = 26^6 * 26\n        # 26^8 = 26^7 * 26\n        # 26^9 = 26^8 * 26\n        # 26^10 = 26^9 * 26\n        # 26^11 = 26^10 * 26\n        # 26^12 = 26^11 * 26\n        # 26^13 = 26^12 * 26\n        # 26^14 = 26^13 * 26\n        # 26^15 = 26^14 * 26\n        # 26^16 = 26^15 * 26\n        # 26^17 = 26^16 * 26\n        # 26^18 = 26^17 * 26\n        # 26^19 = 26^18 * 26\n        # 26^20 = 26^19 * 26\n        # 26^21 = 26^20 * 26\n        # 26^22 = 26^21 * 26\n        # 26^23 = 26^22 * 26\n        # 26^24 = 26^23 * 26\n        # 26^25 = 26^24 * 26\n        # 26^26 = 26^25 * 26\n        # 26^27 = 26^26 * 26\n        # 26^28 = 26^27 * 26\n        # 26^29 = 26^28 * 26\n        # 26^30 = 26^29 * 26\n        # 26^31 = 26^30 * 26\n        # 26^32 = 26^31 * 26\n        # 26^33 = 26^32 * 26\n        # 26^34 = 26^33 * 26\n        # 26^35 = 26^34 * 26\n        # 26^36 = 26^35 * 26\n        # 26^37 = 26^36 * 26\n        # 26^38 = 26^37 * 26\n        # 26^39 = 26^38 * 26\n        # 26^40 = 26^39 * 26\n        # 26^41 = 26^40 * 26\n        # 26^42 = 26^41 * 26\n        # 26^43 = 26^42 * 26\n        # 26^44 = 26^43 * 26\n        # 26^45 = 26^44 * 26\n        # 26^46 = 26^45 * 26\n        # 26^47 = 26^46 * 26\n        # 26^48 = 26^47 * 26\n        # 26^49 = 26^48 * 26\n        # 26^50 = 26^49 * 26\n        # 26^51 = 26^50 * 26\n        # 26^52 = 26^51 * 26\n        # 26^53 = 26^52 * 26\n        # 26^54 = 26^53 * 26\n        # 26^55 = 26^5"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # 1. Find the middle of the linked list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # 2. Reverse the second half of the linked list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # 3. Merge the first and second halves\n        first = head\n        second = prev\n        while second.next:\n            temp = first.next\n            first.next = second\n            first = temp\n            \n            temp = second.next\n            second.next = first\n            second = temp\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Check if the number of words is equal to the number of characters in the pattern\n        if len(words) != len(pattern):\n            return False\n        \n        # Create a dictionary to store the mapping between characters and words\n        char_to_word = {}\n        \n        # Iterate through the pattern and words\n        for char, word in zip(pattern, words):\n            # Check if the character is already mapped to a word\n            if char in char_to_word:\n                # Check if the mapped word is the same as the current word\n                if char_to_word[char] != word:\n                    return False\n            else:\n                # Add the character to the dictionary\n                char_to_word[char] = word\n        \n        # Check if all characters are mapped to words\n        return len(char_to_word) == len(set(char_to_word.values()))"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def backtrack(nums, path, res):\n            if len(nums) == 0:\n                res.append(path)\n                return\n            for i in range(len(nums)):\n                backtrack(nums[:i] + nums[i+1:], path + [nums[i]], res)\n        \n        res = []\n        backtrack(nums, [], res)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        # O(log(m*n))\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)\n        # O(1)"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new ListNode with value 0\n        result = ListNode(0)\n        # Initialize a pointer to the result ListNode\n        curr = result\n        # Initialize a variable to keep track of the carry\n        carry = 0\n        # Loop until both l1 and l2 are None\n        while l1 and l2:\n            # Add the values of l1 and l2\n            sum = l1.val + l2.val + carry\n            # Set the value of l1 and l2 to the remainder of the sum\n            l1.val = sum % 10\n            carry = sum // 10\n            # Set the next pointer of l1 to the next node of l1\n            l1 = l1.next\n            # Set the next pointer of l2 to the next node of l2\n            l2 = l2.next\n            # Set the next pointer of curr to the current node of l1\n            curr.next = l1\n            # Set the next pointer of curr to the current node of l2\n            curr = curr.next\n        # Loop until l1 is None\n        while l1:\n            # Add the values of l1 and carry\n            sum = l1.val + carry\n            # Set the value of l1 to the remainder of the sum\n            l1.val = sum % 10\n            carry = sum // 10\n            # Set the next pointer of l1 to the next node of l1\n            l1 = l1.next\n            # Set the next pointer of curr to the current node of l1\n            curr.next = l1\n            # Set the next pointer of curr to the current node of l2\n            curr = curr.next\n        # Loop until l2 is None\n        while l2:\n            # Add the values of l2 and carry\n            sum = l2.val + carry\n            # Set the value of l2 to the remainder of the sum\n            l2.val = sum % 10\n            carry = sum // 10\n            # Set the next pointer of l2 to the next node of l2\n            l2 = l2.next\n            # Set the next pointer of curr to the current node of l2\n            curr.next = l2\n            # Set the next pointer of curr to the current node of l2\n            curr = curr.next\n        # If carry is 1, add a new node with value 1 to the result ListNode\n        if carry == 1:\n            curr.next = ListNode(1)\n        # Return the result ListNode\n        return result.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert the number to binary\n        # 2. Reverse the binary\n        # 3. Convert the binary to decimal\n        # 4. Return the complement\n        \n        binary = bin(num)[2:]\n        binary = binary[::-1]\n        decimal = int(binary, 2)\n        return decimal"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n\n        # 1 pointer\n        # max_area = 0\n        # left = 0\n        # right = len(height) - 1\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n\n        # 2 pointers\n        # max_area = 0\n        # left = 0\n        # right = len(height) - 1\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n\n        # 1 pointer\n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N * L)\n        # Space Complexity: O(N)\n        # Approach:\n        # 1. Create a set of words\n        # 2. Iterate through the words and check if the word can be formed by concatenating other words\n        # 3. If the word can be formed by concatenating other words, add it to the result\n        # 4. Return the result\n        \n        # Create a set of words\n        word_set = set(words)\n        \n        # Initialize the result\n        result = []\n        \n        # Iterate through the words\n        for word in words:\n            # Check if the word can be formed by concatenating other words\n            if self.can_be_formed(word, word_set):\n                # If the word can be formed by concatenating other words, add it to the result\n                result.append(word)\n        \n        # Return the result\n        return result\n    \n    def can_be_formed(self, word, word_set):\n        # Initialize the result\n        result = False\n        \n        # Iterate through the word\n        for i in range(1, len(word)):\n            # Check if the prefix of the word can be formed by concatenating other words\n            prefix = word[:i]\n            suffix = word[i:]\n            if prefix in word_set and suffix in word_set:\n                # If the prefix of the word can be formed by concatenating other words, set the result to True\n                result = True\n                break\n        \n        # Return the result\n        return result"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = -num\n        \n        res = \"\"\n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n % 4 == 0:\n        #     return False\n        # return True\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True\n        # return self.canWinNim(n - 1) or self.canWinNim(n - 2) or self.canWinNim(n - 3)\n        \n        # if n <= 3:\n        #     return True"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(row, col, n):\n            for i in range(row):\n                if board[i][col] == 1:\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 1:\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(row):\n            if row == n:\n                return 1\n            count = 0\n            for col in range(n):\n                if is_valid(row, col, n):\n                    board[row][col] = 1\n                    count += backtrack(row + 1)\n                    board[row][col] = 0\n            return count\n        \n        board = [[0 for _ in range(n)] for _ in range(n)]\n        return backtrack(0)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = '#'\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1]\n        # m = 1\n        # nums2 = []\n        # n = 0\n        \n        # nums1 = [0]\n        # m = 0\n        # nums2 = [1]\n        # n = 1\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3\n        \n        # nums1 = [1,2,3,0,0,0]\n        # m = 3\n        # nums2 = [2,5,6]\n        # n = 3"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. if the array has less than 3 elements, return the max element\n        # 3. if the array has 3 elements, return the third element\n        # 4. if the array has more than 3 elements, return the third element\n        \n        nums.sort()\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}