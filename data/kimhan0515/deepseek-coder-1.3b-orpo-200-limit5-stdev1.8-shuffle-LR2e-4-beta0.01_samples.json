{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\""}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        n, m = len(s), len(t)\n        dp = [[0] * (m + 1) for _ in range(n + 1)]\n        for i in range(n + 1):\n            dp[i][0] = 1\n        for i in range(1, n + 1):\n            for j in range(1, m + 1):\n                dp[i][j] = dp[i - 1][j]\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] += dp[i - 1][j - 1]\n        return dp[n][m]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            while nums[i] > 0 and nums[i] <= n and nums[i] != nums[nums[i]-1]:\n                nums[i], nums[nums[i]-1] = nums[nums[i]-1], nums[i]\n        \n        for i in range(n):\n            if i + 1 != nums[i]:\n                return i + 1\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        nums = [i for i in range(1, n + 1)]\n        k -= 1\n        res = \"\"\n        while n > 0:\n            n -= 1\n            num, k = divmod(k, math.factorial(n))\n            res += str(nums[num])\n            nums.remove(nums[num])\n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                if numbers[i] + numbers[j] == target:\n                    return [i+1, j+1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(num, target, cur, cur_num, cur_num_str, cur_operator):\n            if not num:\n                if cur_num == target:\n                    res.append(cur_num_str)\n                return\n            for i in range(1, len(num) + 1):\n                if i == 1 or num[0] != '0':\n                    cur_num = cur_num * 10 + int(num[:i])\n                    cur_num_str = cur_num_str + cur_operator + num[:i]\n                    dfs(num[i:], target, cur, cur_num, cur_num_str, cur_operator + '+')\n                    cur_num_str = cur_num_str[:-i-1]\n                    cur_num = cur_num - int(num[:i])\n                    cur_num_str = cur_num_str[:-i]\n                if i == 2 or num[0] != '0' and int(num[:2]) <= 255:\n                    cur_num = cur_num * 10 + int(num[:2])\n                    cur_num_str = cur_num_str + cur_operator + num[:2]\n                    dfs(num[2:], target, cur, cur_num, cur_num_str, cur_operator + '+')\n                    cur_num_str = cur_num_str[:-2]\n                    cur_num = cur_num - int(num[:2])\n                    cur_num_str = cur_num_str[:-2]\n        \n        res = []\n        dfs(num, target, 0, 0, '', '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, num):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return num * 10 + root.val\n            return dfs(root.left, num * 10 + root.val) + dfs(root.right, num * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-','')\n        s = s.upper()\n        s = s[::-1]\n        s = s[:k]\n        s = s[::-1]\n        s = s.replace('-','')\n        return s"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(gas)\n        total_gas = 0\n        total_cost = 0\n        for i in range(n):\n            total_gas += gas[i]\n            total_cost += cost[i]\n        \n        if total_gas < total_cost:\n            return -1\n        \n        start = 0\n        tank = 0\n        for i in range(n):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        nums = [1] + nums + [1]\n        dp = [[0] * (n + 2) for _ in range(n + 2)]\n        for i in range(n, -1, -1):\n            for j in range(i, n + 2):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        return dp[0][n + 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\""}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\""}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        sum = 1\n        for i in range(2, num // 2 + 1):\n            if num % i == 0:\n                sum += i\n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        return self.fib(n-1) + self.fib(n-2)"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        dp = [[0 for i in range(n)] for j in range(m)]\n        dp[m-1][n-1] = max(1, 1-dungeon[m-1][n-1])\n        for i in range(m-2,-1,-1):\n            dp[i][n-1] = max(dp[i+1][n-1]-dungeon[i][n-1], 1)\n        for i in range(n-2,-1,-1):\n            dp[m-1][i] = max(dp[m-1][i+1]-dungeon[m-1][i], 1)\n        for i in range(m-2,-1,-1):\n            for j in range(n-2,-1,-1):\n                dp[i][j] = max(min(dp[i+1][j], dp[i][j+1])-dungeon[i][j], 1)\n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(n):\n                while j < n and nums[j] - nums[i] <= mid:\n                    j += 1\n                count += j - i - 1\n            if count < k:\n                left = mid + 1\n            else:\n                right = mid\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s_list = list(s)\n        i = 0\n        j = len(s_list) - 1\n        while i < j:\n            while i < j and s_list[i] not in vowels:\n                i += 1\n            while i < j and s_list[j] not in vowels:\n                j -= 1\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n            i += 1\n            j -= 1\n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest_seq = 0\n\n        for num in nums:\n            if num - 1 not in nums_set:\n                cur_seq = 0\n                while num in nums_set:\n                    cur_seq += 1\n                    num += 1\n                longest_seq = max(longest_seq, cur_seq)\n\n        return longest_seq"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        sum_nums = n*(n+1)/2\n        sum_nums_arr = sum(nums)\n        return sum_nums - sum_nums_arr"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\""}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        a = int(a, 2)\n        b = int(b, 2)\n        return bin(a + b)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def binary_search(nums, target, left):\n            left, right = 0, len(nums) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if nums[mid] < target or (left == right and nums[mid] == target):\n                    return mid\n                elif nums[mid] < target:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return -1\n        \n        left = binary_search(nums, target, True)\n        right = binary_search(nums, target, False)\n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        k = 0\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[k]:\n                k += 1\n                nums[k] = nums[i]\n        return k + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        jumps = [float('inf') for i in range(n)]\n        jumps[0] = 0\n        for i in range(n):\n            for j in range(i + 1, i + nums[i] + 1):\n                if j < n:\n                    jumps[j] = min(jumps[j], jumps[i] + 1)\n        return jumps[n - 1]"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices):\n            return sum(prices[i] - prices[i-1] for i in range(1, len(prices)))\n        \n        dp = [[0 for i in range(k+1)] for j in range(len(prices))]\n        \n        for i in range(1, len(prices)):\n            for j in range(1, k+1):\n                dp[i][j] = max(dp[i-1][j], prices[i] + dp[i-1][j-1])\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n        \n        return dp[-1][-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_dict_rev = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_dict_rev.update({10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"})\n        hex_"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(s)):\n            if s.count(s[i]) == 1:\n                return i\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if abs(i-j) <= indexDiff and abs(nums[i]-nums[j]) <= valueDiff:\n                    return True\n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        zero = 0\n        one = 0\n        two = 0\n        for i in nums:\n            if i == 0:\n                zero += 1\n            elif i == 1:\n                one += 1\n            else:\n                two += 1\n        nums.clear()\n        for i in range(zero):\n            nums.append(0)\n        for i in range(one):\n            nums.append(1)\n        for i in range(two):\n            nums.append(2)\n\n        return nums"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        for i in nums:\n            if i == 1:\n                count += 1\n                max_count = max(max_count, count)\n            else:\n                count = 0\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        return left + right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        num1_len = len(num1)\n        num2_len = len(num2)\n        num1_len = max(num1_len, num2_len)\n        num1_len = num1_len + 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len = num1_len - 1\n        num1_len ="}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\""}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\""}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i in ['(','{','[']:\n                stack.append(i)\n            else:\n                if len(stack) == 0:\n                    return False\n                else:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n        if len(stack) == 0:\n            return True\n        else:\n            return False"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        i = len(nums)-2\n        while i>=0 and nums[i]>=nums[i+1]:\n            i-=1\n        if i>=0:\n            j = len(nums)-1\n            while nums[j]<=nums[i]:\n                j-=1\n            nums[i],nums[j] = nums[j],nums[i]\n        i+=1\n        j = len(nums)-1\n        while i<j:\n            nums[i],nums[j] = nums[j],nums[i]\n            i+=1\n            j-=1"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] == nums[j] and abs(i-j) <= k:\n                    return True\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n % 2 == 1:\n            return -1\n        if n == 2:\n            return 0\n        if n == 4:\n            return 1\n        if n == 6:\n            return 2\n        if n == 8:\n            return 3\n        if n == 10:\n            return 4\n        if n == 12:\n            return 5\n        if n == 14:\n            return 6\n        if n == 16:\n            return 7\n        if n == 18:\n            return 8\n        if n == 20:\n            return 9\n        if n == 22:\n            return 10\n        if n == 24:\n            return 11\n        if n == 26:\n            return 12\n        if n == 28:\n            return 13\n        if n == 30:\n            return 14\n        if n == 32:\n            return 15\n        if n == 34:\n            return 16\n        if n == 36:\n            return 17\n        if n == 38:\n            return 18\n        if n == 40:\n            return 19\n        if n == 42:\n            return 20\n        if n == 44:\n            return 21\n        if n == 46:\n            return 22\n        if n == 48:\n            return 23\n        if n == 50:\n            return 24\n        if n == 52:\n            return 25\n        if n == 54:\n            return 26\n        if n == 56:\n            return 27\n        if n == 58:\n            return 28\n        if n == 60:\n            return 29\n        if n == 62:\n            return 30\n        if n == 64:\n            return 31\n        if n == 66:\n            return 32\n        if n == 68:\n            return 33\n        if n == 70:\n            return 34\n        if n == 72:\n            return 35\n        if n == 74:\n            return 36\n        if n == 76:\n            return 37\n        if n == 78:\n            return 38\n        if n == 80:\n            return 39\n        if n == 82:\n            return 40\n        if n == 84:\n            return 41\n        if n == 86:\n            return 42\n        if n == 88:\n            return 43\n        if n == 90:\n            return 44\n        if n == 92:\n            return 45\n        if n == 94:\n            return 46\n        if n == 96:\n            return 47\n        if n == 98:\n            return 48\n        if n == 100:\n            return 49\n        if n == 102:\n            return 50\n        if n == 104:\n            return 51\n        if n == 106:\n            return 52\n        if n == 108:\n            return 53\n        if n == 110:\n            return 54\n        if n == 112:\n            return 55\n        if n == 114:\n            return 56\n        if n == 116:\n            return 57\n        if n == 118:\n            return 58\n        if n == 120:\n            return 59\n        if n == 122:\n            return 60\n        if n == 124:\n            return 61\n        if n == 126:\n            return 62\n        if n == 128:\n            return 63\n        if n == 130:\n            return 64\n        if n == 132:\n            return 65\n        if n == 134:\n            return 66\n        if n == 136:\n            return 67\n        if n == 138:\n            return 68\n        if n == 140:\n            return 69\n        if n == 142:\n            return 70"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0 and len(s3) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:])\n        \n        if s2[0] == s3[0]:\n            return self.isInterleave(s1, s2[1:], s3[1:])\n        \n        return False"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = \"qwertyuiop\"\n        row2 = \"asdfghjkl\"\n        row3 = \"zxcvbnm\"\n        res = []\n        for word in words:\n            if word[0].lower() in row1:\n                row = row1\n            elif word[0].lower() in row2:\n                row = row2\n            else:\n                row = row3\n            for letter in word:\n                if letter.lower() not in row:\n                    break\n            else:\n                res.append(word)\n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        leftNode = dummy\n        rightNode = dummy\n        for i in range(1, left):\n            leftNode = leftNode.next\n        for i in range(1, right):\n            rightNode = rightNode.next\n        rightNode.next = rightNode.next.next\n        leftNode.next = rightNode.next\n        rightNode.next = None\n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) <= 1:\n            return s\n        \n        i = 0\n        j = len(s) - 1\n        while i < j:\n            if s[i] == s[j]:\n                i += 1\n                j -= 1\n            else:\n                j -= 1\n        \n        return s[j+1:][::-1] + s"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n\n        return \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i-2] and distance[i-1] <= distance[i-3]:\n                return True\n            if i >= 4 and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] == distance[i-3]:\n                return True\n            if i >= 5 and distance[i] + distance[i-4] >= distance[i-2] and distance[i-1] + distance[i-5] >= distance[i-3] and distance[i-2] + distance[i-4] >= distance[i-4]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        \n        curr = head\n        while curr.next is not None:\n            if curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        d = {}\n        for i in s:\n            if i in d:\n                d[i] += 1\n            else:\n                d[i] = 1\n        count = 0\n        for i in d.values():\n            if i % 2 == 0:\n                count += i\n            else:\n                count += i - 1\n                d[i] = 1\n        if len(s) > count:\n            count += 1\n        return count"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        inorder_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:inorder_index], postorder[:inorder_index])\n        root.right = self.buildTree(inorder[inorder_index+1:], postorder[inorder_index:-1])\n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\""}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 1\n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 0:\n            return 0\n        sum_arr = [0] * (n + 1)\n        for i in range(n):\n            sum_arr[i + 1] = sum_arr[i] + nums[i]\n        return self.countRangeSum(sum_arr, lower, upper)"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2*n + 0.25)**0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        while queue:\n            res.append([node.val for node in queue])\n            queue = [child for node in queue for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        else:\n            x = str(x)\n            for i in range(len(x)//2):\n                if x[i] != x[-i-1]:\n                    return False\n            return True"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2 and int(s) < 27:\n            return 2\n        if len(s) == 2 and int(s) > 26:\n            return 1\n        if len(s) == 3:\n            if int(s[1:3]) < 27:\n                return 2\n            else:\n                return 1\n        if len(s) > 3:\n            if int(s[1:3]) < 27:\n                return self.numDecodings(s[1:]) + self.numDecodings(s[2:])\n            else:\n                return self.numDecodings(s[1:])"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        if s[0] == t[0]:\n            return self.isSubsequence(s[1:], t[1:])\n        else:\n            return self.isSubsequence(s, t[1:])"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        if n == 2:\n            return [0, 1, 3, 2]\n        if n == 3:\n            return [0, 1, 3, 2, 6, 7, 5, 4]\n        if n == 4:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 9, 8]\n        if n == 5:\n            return [0, 1, 3, 2, 6, 7, 5, 4, 12, 13, 15, 14, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9, 8, 16, 17, 19, 18, 11, 11, 10, 9"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        return self.climbStairs(n-1) + self.climbStairs(n-2)"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        return dp[n]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if (left and node.val <= left.val) or (right and node.val >= right.val):\n                return False\n            \n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        intervals.append(newInterval)\n        intervals.sort()\n        i = 0\n        while i < len(intervals):\n            if intervals[i][1] < intervals[i+1][0]:\n                i += 1\n            else:\n                intervals[i][0] = min(intervals[i][0], intervals[i+1][0])\n                intervals[i][1] = max(intervals[i][1], intervals[i+1][1])\n                intervals.pop(i+1)\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\""}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\""}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        pigs = 0\n        while minutesToTest / minutesToDie ** pigs >= 1:\n            pigs += 1\n        return pigs"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0 for i in range(n)] for j in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = \"0\"\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res = self.add(res, self.multiply(num1[i], num2[j]))\n        return res\n        \n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = \"0\"\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res = self.add(res, self.multiply(num1[i], num2[j]))\n        return res\n        \n    def add(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        if num1 == \"0\":\n            return num2\n        if num2 == \"0\":\n            return num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        res = \"0\"\n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res = self.add(res, self.add(num1[i], num2[j]))\n        return res"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(prices)\n        if n <= 1:\n            return 0\n        \n        left_min = [0] * n\n        left_min[0] = prices[0]\n        for i in range(1, n):\n            left_min[i] = min(left_min[i-1], prices[i])\n        \n        right_max = [0] * n\n        right_max[-1] = prices[-1]\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], prices[i])\n        \n        max_profit = 0\n        for i in range(n):\n            max_profit = max(max_profit, right_max[i] - left_min[i])\n        \n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def backtrack(start, target, comb):\n            if target == 0:\n                res.append(comb[:])\n                return\n            for i in range(start, len(candidates)):\n                if i > start and candidates[i] == candidates[i-1]:\n                    continue\n                if candidates[i] > target:\n                    break\n                comb.append(candidates[i])\n                backtrack(i+1, target-candidates[i], comb)\n                comb.pop()\n        backtrack(0, target, [])\n        return res"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower():\n            return True\n        if word[0].isupper() and word[1:].islower():\n            return True\n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        stack = []\n        res = []\n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        i = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:i+1], inorder[:i])\n        root.right = self.buildTree(preorder[i+1:], inorder[i+1:])\n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\""}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists or len(lists) == 0:\n            return None\n        \n        while len(lists) > 1:\n            merged_lists = []\n            for i in range(0, len(lists), 2):\n                list1 = lists[i]\n                list2 = lists[i + 1] if i + 1 < len(lists) else None\n                merged_lists.append(self.mergeTwoLists(list1, list2))\n            lists = merged_lists\n        return lists[0]\n        \n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: ListNode\n        :type list2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        dummy = ListNode()\n        curr = dummy\n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        if list1:\n            curr.next = list1\n        if list2:\n            curr.next = list2\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [n] * n\n        dp[0] = -1\n        for i in range(1, n):\n            dp[i] = min(dp[i], dp[i - 1] + 1)\n            for j in range(i):\n                if s[j:i + 1] == s[j:i + 1][::-1]:\n                    dp[i] = min(dp[i], dp[j - 1] + 1)\n        return dp[n - 1]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def f(x):\n            return x / 5 + x / 25 + x / 125\n\n        l, r = 0, 10 ** 9\n        while l < r:\n            m = (l + r) // 2\n            if f(m) < k:\n                l = m + 1\n            else:\n                r = m\n        return l"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        res = []\n        for i in range(len(words)):\n            for j in range(len(words)):\n                if i != j and isPalindrome(words[i] + words[j]):\n                    res.append([i,j])\n        return res"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\""}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        max_len = 0\n        \n        def dfs(i, j):\n            if not dp[i][j]:\n                dp[i][j] = 1\n                for di, dj in [[0, 1], [0, -1], [1, 0], [-1, 0]]:\n                    ni, nj = i + di, j + dj\n                    if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > matrix[i][j]:\n                        dp[i][j] = max(dp[i][j], dfs(ni, nj) + 1)\n            return dp[i][j]\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, dfs(i, j))\n        \n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            count += n // i * i + min(i, n % i)\n            i *= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        n = len(s)\n        dp = [False] * (n + 1)\n        dp[0] = True\n        for i in range(1, n + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        if dp[n]:\n            return self.dfs(s, wordDict, n, {})\n        return []\n        \n    def dfs(self, s, wordDict, i, d):\n        if i == 0:\n            return [\"\"]\n        res = []\n        for j in range(i):\n            if s[j:i] in wordDict and s[j:i] not in d:\n                d[s[j:i]] = 1\n                for r in self.dfs(s, wordDict, j, d):\n                    res.append(s[j:i] + \" \" + r)\n                d.pop(s[j:i])\n        return res"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        leftToRight = True\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if not leftToRight:\n                level.reverse()\n            result.append(level)\n            leftToRight = not leftToRight\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_hours(turnedOn):\n            if turnedOn == 0:\n                return []\n            if turnedOn == 1:\n                return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n            if turnedOn == 2:\n                return [\"0:06\",\"0:09\",\"0:12\",\"0:18\",\"0:24\",\"0:30\",\"0:36\",\"0:42\",\"0:48\",\"1:02\",\"1:04\",\"1:06\",\"1:08\",\"1:10\",\"1:12\",\"1:14\",\"1:16\",\"1:18\",\"1:20\",\"1:22\",\"1:24\",\"1:26\",\"1:28\",\"1:30\",\"1:32\",\"1:34\",\"1:36\",\"1:38\",\"1:40\",\"1:42\",\"1:44\",\"1:46\",\"1:48\",\"2:02\",\"2:04\",\"2:06\",\"2:08\",\"2:10\",\"2:12\",\"2:14\",\"2:16\",\"2:18\",\"2:20\",\"2:22\",\"2:24\",\"2:26\",\"2:28\",\"2:30\",\"2:32\",\"2:34\",\"2:36\",\"2:38\",\"2:40\",\"2:42\",\"2:44\",\"2:46\",\"2:48\",\"3:02\",\"3:04\",\"3:06\",\"3:08\",\"3:10\",\"3:12\",\"3:14\",\"3:16\",\"3:18\",\"3:20\",\"3:22\",\"3:24\",\"3:26\",\"3:28\",\"3:30\",\"3:32\",\"3:34\",\"3:36\",\"3:38\",\"3:40\",\"3:42\",\"3:44\",\"3:46\",\"3:48\",\"4:02\",\"4:04\",\"4:06\",\"4:08\",\"4:10\",\"4:12\",\"4:14\",\"4:16\",\"4:18\",\"4:20\",\"4:22\",\"4:24\",\"4:26\",\"4:28\",\"4:30\",\"4:32\",\"4:34\",\"4:36\",\"4:38\",\"4:40\",\"4:42\",\"4:44\",\"4:46\",\"4:48\",\"5:02\",\"5:04\",\"5:06\",\"5:08\",\"5:10\",\"5:12\",\"5:14\",\"5:16\",\"5:18\",\"5:20\",\"5:22\",\"5:24\",\"5:26\",\"5:28\",\"5:30\",\"5:32\",\"5:34\",\"5:36\",\"5:38\",\"5:40\",\"5:42\",\"5:44\",\"5:46\",\"5:48\",\"6:02\",\"6:04\",\"6:06\",\"6:08\",\"6:10\",\"6:12\",\"6:14\",\"6:16\",\"6:18\",\"6:20\",\"6:22\",\"6:24\",\"6:26\",\"6:28\",\"6:30\",\"6:32\",\"6:34\",\"6:36\",\"6:38\",\"6:40\",\"6:42\",\"6:44\",\"6:46\",\"6:48\",\"7:02\",\"7:04\",\"7:06\",\"7:08\",\"7:10\",\"7:12\",\"7:14\",\"7:16\",\"7:18\",\"7:20\",\"7:22\",\"7:24\",\"7:26\",\"7:28\",\"7:30\",\"7:32\",\"7:34\",\"7:36\",\"7:38\",\"7:40\",\"7:42\",\"7:44\",\"7:46\",\"7:48\",\"8:02\",\"8:04\",\"8:06\",\"8:08\",\"8:10\",\"8:12\",\"8:14\",\"8:16\",\"8:18"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        if numRows == 3:\n            return [[1],[1,1],[1,2,1]]\n        if numRows == 4:\n            return [[1],[1,1],[1,2,1],[1,3,3,1]]\n        if numRows == 5:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n        if numRows == 6:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1]]\n        if numRows == 7:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1]]\n        if numRows == 8:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1]]\n        if numRows == 9:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1]]\n        if numRows == 10:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,84,126,126,84,36,9,1]]\n        if numRows == 11:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,84,126,126,84,36,9,1],[1,10,45,120,210,252,210,120,45,10,1]]\n        if numRows == 12:\n            return [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1],[1,5,10,10,5,1],[1,6,15,20,15,6,1],[1,7,21,35,35,21,7,1],[1,8,28,56,70,56,28,8,1],[1,9,36,84,126,126,84,36,9,1],[1,10,45,120,210,252,2"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 3 == 0:\n            n /= 3\n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\""}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.lower()\n        s = s.replace(\" \", \"\")\n        s = s.replace(\"-\", \"\")\n        s = s.replace(\"_\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"\\\\\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\"<\", \"\")\n        s = s.replace(\">\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"$\", \"\")\n        s = s.replace(\"%\", \"\")\n        s = s.replace(\"&\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"\\\\\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\"<\", \"\")\n        s = s.replace(\">\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"$\", \"\")\n        s = s.replace(\"%\", \"\")\n        s = s.replace(\"&\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"\\\\\", \"\")\n        s = s.replace(\"?\", \"\")\n        s = s.replace(\":\", \"\")\n        s = s.replace(\";\", \"\")\n        s = s.replace(\"<\", \"\")\n        s = s.replace(\">\", \"\")\n        s = s.replace(\"|\", \"\")\n        s = s.replace(\"~\", \"\")\n        s = s.replace(\"`\", \"\")\n        s = s.replace(\"^\", \"\")\n        s = s.replace(\"$\", \"\")\n        s = s.replace(\"%\", \"\")\n        s = s.replace(\"&\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"(\", \"\")\n        s = s.replace(\")\", \"\")\n        s = s.replace(\"[\", \"\")\n        s = s.replace(\"]\", \"\")\n        s = s.replace(\"{\", \"\")\n        s = s.replace(\"}\", \"\")\n        s = s.replace(\"\\\"\", \"\")\n        s = s.replace(\"'\", \"\")\n        s = s.replace(\"*\", \"\")\n        s = s.replace(\"/\", \"\")\n        s = s.replace(\"\\\\"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        ans = []\n        nums = nums[:k]\n        nums.sort()\n        ans.append(nums[k // 2])\n        for i in range(k, len(nums)):\n            nums.remove(nums[k // 2])\n            nums.append(nums[k // 2])\n            nums.sort()\n            ans.append(nums[k // 2])\n        return ans"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        cur = head\n        while cur:\n            length += 1\n            cur = cur.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        cur = head\n        for i in range(length - k - 1):\n            cur = cur.next\n        \n        new_head = cur.next\n        cur.next = None\n        cur = new_head\n        while cur.next:\n            cur = cur.next\n        \n        cur.next = head\n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n != 1:\n            if n % 2 == 0:\n                n = n / 2\n            elif n % 3 == 0:\n                n = n / 3\n            elif n % 5 == 0:\n                n = n / 5\n            else:\n                return False\n        return True"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ans = []\n        max_height = 0\n        for left, side_length in positions:\n            max_height = max(max_height, left + side_length)\n            ans.append(max_height)\n        return ans"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        if not root.left and not root.right:\n            return 0\n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        if root.right and not root.right.left and not root.right.right:\n            return self.sumOfLeftLeaves(root.left)\n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\""}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend < 0 and divisor < 0:\n            dividend = abs(dividend)\n            divisor = abs(divisor)\n        if dividend < 0:\n            dividend = -dividend\n            divisor = -divisor\n        if dividend < divisor:\n            return 0\n        if dividend == divisor:\n            return 1\n        if dividend < divisor * 2:\n            return 1\n        if dividend < divisor * 4:\n            return 2\n        if dividend < divisor * 8:\n            return 4\n        if dividend < divisor * 16:\n            return 8\n        if dividend < divisor * 32:\n            return 16\n        if dividend < divisor * 64:\n            return 32\n        if dividend < divisor * 128:\n            return 64\n        if dividend < divisor * 256:\n            return 128\n        if dividend < divisor * 512:\n            return 256\n        if dividend < divisor * 1024:\n            return 512\n        if dividend < divisor * 2048:\n            return 1024\n        if dividend < divisor * 4096:\n            return 2048\n        if dividend < divisor * 8192:\n            return 4096\n        if dividend < divisor * 16384:\n            return 8192\n        if dividend < divisor * 32768:\n            return 16384\n        if dividend < divisor * 65536:\n            return 32768\n        if dividend < divisor * 131072:\n            return 65536\n        if dividend < divisor * 262144:\n            return 131072\n        if dividend < divisor * 524288:\n            return 262144\n        if dividend < divisor * 1048576:\n            return 524288\n        if dividend < divisor * 2097152:\n            return 1048576\n        if dividend < divisor * 4194304:\n            return 2097152\n        if dividend < divisor * 8388608:\n            return 4194304\n        if dividend < divisor * 16777216:\n            return 8388608\n        if dividend < divisor * 33554432:\n            return 16777216\n        if dividend < divisor * 67108864:\n            return 33554432\n        if dividend < divisor * 134217728:\n            return 67108864\n        if dividend < divisor * 268435456:\n            return 134217728\n        if dividend < divisor * 536870912:\n            return 268435456\n        if dividend < divisor * 1073741824:\n            return 536870912\n        if dividend < divisor * 2147483648:\n            return 1073741824\n        if dividend < divisor * 4294967296:\n            return 2147483648\n        if dividend < divisor * 8589934592:\n            return 4294967296\n        if dividend < divisor * 17179869184:\n            return 858"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        m = len(board)\n        n = len(board[0])\n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            board[i][j] = 'T'\n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(nums)):\n            for j in range(i+1, len(nums)):\n                if nums[i] + nums[j] == target:\n                    return [i, j]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n\n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '/' and b == 0:\n                            continue\n                        cards_new = cards[:i] + cards[j + 1:]\n                        cards_new.append(eval(str(a) + op + str(b)))\n                        if backtrack(cards_new, target):\n                            return True\n            return False\n\n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(p) == 0:\n            return len(s) == 0\n        \n        if len(p) == 1:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '?')\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:]) or (len(s) > 0 and (s[0] == p[0] or p[0] == '?')) and self.isMatch(s[1:], p)\n        \n        return len(s) > 0 and (s[0] == p[0] or p[0] == '?') and self.isMatch(s[1:], p[1:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        return nums[len(nums)//2]"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n\n        tickets.sort()\n        itinerary = []\n        def dfs(start):\n            while tickets and start in tickets[0][0]:\n                dfs(tickets[0][1])\n                itinerary.append(tickets[0][1])\n                tickets.pop(0)\n            itinerary.append(start)\n        dfs(\"JFK\")\n        return itinerary[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        res = []\n        for i in range(n):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, n):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = n-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] > target:\n                        r -= 1\n                    else:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\""}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        while curr:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        num_words = {\n            1000000000000: \"Billion\",\n            1000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            1000000000000000: \"Crore\",\n            1000000000000: \"Crore\",\n            1000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            1000000000000000000: \"Crore\",\n            1000000000000000: \"Crore\",\n            1000000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            1000000000000000000000: \"Crore\",\n            10000000000000000000: \"Crore\",\n            100000000000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            100000000000000000000000: \"Crore\",\n            1000000000000000000000: \"Crore\",\n            10000000000000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            10000000000000000000000000: \"Crore\",\n            100000000000000000000000: \"Crore\",\n            1000000000000000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            1000000000000000000000000000: \"Crore\",\n            10000000000000000000000000: \"Crore\",\n            100000000000000000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            100000000000000000000000000000: \"Crore\",\n            10000000000000000000000000000: \"Crore\",\n            1000000000000000000000000000: \"Crore\",\n            1000000: \"Lakh\",\n            1000: \"Thousand\",\n            10000000000000000000000000000000: \"Crore\",\n            1000000000000000000000000000000: \"Crore\",\n            10000000000000000000000"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0 for j in range(k+1)] for i in range(n+1)]\n        for i in range(n+1):\n            dp[i][0] = 1\n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\n                if j >= i:\n                    dp[i][j] = (dp[i][j] - dp[i-1][j-i] + mod) % mod\n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = cur.next.next\n        \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        if not root.left and not root.right and targetSum == root.val:\n            return True\n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        left_head = ListNode()\n        right_head = ListNode()\n        left_tail = left_head\n        right_tail = right_head\n        \n        while head:\n            if head.val < x:\n                left_tail.next = head\n                left_tail = left_tail.next\n            else:\n                right_tail.next = head\n                right_tail = right_tail.next\n            head = head.next\n        \n        left_tail.next = right_head.next\n        right_tail.next = None\n        \n        return left_head.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(edges)\n        parent = [i for i in range(n + 1)]\n        def find(x):\n            if x != parent[x]:\n                parent[x] = find(parent[x])\n            return parent[x]\n        \n        def union(x, y):\n            parent[find(x)] = find(y)\n        \n        for edge in edges:\n            if find(edge[0]) == find(edge[1]):\n                return edge\n            else:\n                union(edge[0], edge[1])\n        \n        for edge in edges:\n            if find(edge[0]) == find(edge[1]):\n                return edge\n            else:\n                union(edge[0], edge[1])\n        \n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False for i in range(len(nums))]\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and visited[i-1] == False:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        while num > 9:\n            num = sum(map(int, str(num)))\n        return num"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        for i in nums:\n            if nums.count(i) == 1:\n                return i"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        s = s.strip()\n        s = s.split()\n        return len(s[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\""}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0 for j in range(3)] for i in range(n+1)]\n        dp[0][0] = 1\n        for i in range(1, n+1):\n            dp[i][0] = (dp[i-1][0] + dp[i-1][1] + dp[i-1][2]) % mod\n            dp[i][1] = (dp[i-1][0] + dp[i-1][2]) % mod\n            dp[i][2] = dp[i-1][0] % mod\n        return (dp[n][0] + dp[n][1] + dp[n][2]) % mod"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n\n        seen = set()\n        while n != 1 and n not in seen:\n            seen.add(n)\n            n = get_next(n)\n        return n == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        for i in range(len(nums)):\n            if nums[i] == target:\n                return i\n            elif nums[i] > target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        n = len(nums)\n        max_reach = 0\n        for i in range(n):\n            if i > max_reach:\n                return False\n            max_reach = max(max_reach, i + nums[i])\n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] += grid[i][j-1]\n                elif j == 0:\n                    grid[i][j] += grid[i-1][j]\n                else:\n                    grid[i][j] += min(grid[i][j-1], grid[i-1][j])\n        return grid[m-1][n-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        if n == 2:\n            return \"11\"\n        if n == 3:\n            return \"21\"\n        if n == 4:\n            return \"1211\"\n        if n == 5:\n            return \"111221\"\n        if n == 6:\n            return \"312211\"\n        if n == 7:\n            return \"13112221\"\n        if n == 8:\n            return \"1113213211\"\n        if n == 9:\n            return \"31131211131221\"\n        if n == 10:\n            return \"13211311123113112211\"\n        if n == 11:\n            return \"1113122113311213212313211\"\n        if n == 12:\n            return \"31131122212321322211\"\n        if n == 13:\n            return \"13112122212313213211\"\n        if n == 14:\n            return \"11131221131122212313211\"\n        if n == 15:\n            return \"31131122212321322211\"\n        if n == 16:\n            return \"13211311123113112211\"\n        if n == 17:\n            return \"1113122113311213212313211\"\n        if n == 18:\n            return \"31131122212321322211\"\n        if n == 19:\n            return \"13211311123113112211\"\n        if n == 20:\n            return \"11131221131122212313211\"\n        if n == 21:\n            return \"31131122212321322211\"\n        if n == 22:\n            return \"13211311123113112211\"\n        if n == 23:\n            return \"1113122113311213212313211\"\n        if n == 24:\n            return \"31131122212321322211\"\n        if n == 25:\n            return \"13211311123113112211\"\n        if n == 26:\n            return \"1113122113311213212313211\"\n        if n == 27:\n            return \"31131122212321322211\"\n        if n == 28:\n            return \"13211311123113112211\"\n        if n == 29:\n            return \"1113122113311213212313211\"\n        if n == 30:\n            return \"31131122212321322211\""}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def can_split(max_sum):\n            sum_ = 0\n            count = 1\n            for num in nums:\n                if sum_ + num > max_sum:\n                    sum_ = num\n                    count += 1\n                else:\n                    sum_ += num\n            return count <= k\n\n        left = max(nums)\n        right = sum(nums)\n        while left < right:\n            mid = (left + right) // 2\n            if can_split(mid):\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums)-1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return mid\n            if nums[left] <= nums[mid]:\n                if nums[left] <= target and nums[mid] > target:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            else:\n                if nums[mid] < target and nums[right] >= target:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        digit_to_letter = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        def helper(digits, digit_to_letter, index, result):\n            if index == len(digits):\n                result.append(''.join(digits))\n                return\n            \n            for letter in digit_to_letter[digits[index]]:\n                digits.append(letter)\n                helper(digits, digit_to_letter, index + 1, result)\n                digits.pop()\n        \n        result = []\n        helper(digits, digit_to_letter, 0, result)\n        return result"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def backtrack(target, start, path):\n            if target == 0:\n                res.append(path[:])\n                return\n            for i in range(start, len(candidates)):\n                if target - candidates[i] < 0:\n                    break\n                backtrack(target - candidates[i], i, path + [candidates[i]])\n        backtrack(target, 0, [])\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\""}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        num = 1\n        row_start = 0\n        row_end = n - 1\n        col_start = 0\n        col_end = n - 1\n        while row_start <= row_end and col_start <= col_end:\n            for i in range(col_start, col_end + 1):\n                matrix[row_start][i] = num\n                num += 1\n            row_start += 1\n            for i in range(row_start, row_end + 1):\n                matrix[i][col_end] = num\n                num += 1\n            col_end -= 1\n            for i in range(col_end, col_start - 1, -1):\n                matrix[row_end][i] = num\n                num += 1\n            row_end -= 1\n            for i in range(row_end, row_start - 1, -1):\n                matrix[i][col_start] = num\n                num += 1\n            col_start += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            x = x * -1\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n            x = x * -1\n        else:\n            x = str(x)\n            x = x[::-1]\n            x = int(x)\n        if x < -2**31 or x > 2**31 - 1:\n            return 0\n        else:\n            return x"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n // 2):\n                matrix[i][j], matrix[i][n - j - 1] = matrix[i][n - j - 1], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        cur_max = nums[0]\n        cur_min = nums[0]\n        for i in range(1, len(nums)):\n            cur_max, cur_min = max(nums[i], cur_max * nums[i], cur_min * nums[i]), min(nums[i], cur_max * nums[i], cur_min * nums[i])\n            max_prod = max(max_prod, cur_max)\n        return max_prod"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        stone_set.add(stones[-1] + 1)\n        stone_set.add(stones[-1] + 2)\n        stone_set.add(stones[-1] + 3)\n        stone_set.add(stones[-1] + 4)\n        stone_set.add(stones[-1] + 5)\n        stone_set.add(stones[-1] + 6)\n        stone_set.add(stones[-1] + 7)\n        stone_set.add(stones[-1] + 8)\n        stone_set.add(stones[-1] + 9)\n        stone_set.add(stones[-1] + 10)\n        stone_set.add(stones[-1] + 11)\n        stone_set.add(stones[-1] + 12)\n        stone_set.add(stones[-1] + 13)\n        stone_set.add(stones[-1] + 14)\n        stone_set.add(stones[-1] + 15)\n        stone_set.add(stones[-1] + 16)\n        stone_set.add(stones[-1] + 17)\n        stone_set.add(stones[-1] + 18)\n        stone_set.add(stones[-1] + 19)\n        stone_set.add(stones[-1] + 20)\n        stone_set.add(stones[-1] + 21)\n        stone_set.add(stones[-1] + 22)\n        stone_set.add(stones[-1] + 23)\n        stone_set.add(stones[-1] + 24)\n        stone_set.add(stones[-1] + 25)\n        stone_set.add(stones[-1] + 26)\n        stone_set.add(stones[-1] + 27)\n        stone_set.add(stones[-1] + 28)\n        stone_set.add(stones[-1] + 29)\n        stone_set.add(stones[-1] + 30)\n        stone_set.add(stones[-1] + 31)\n        stone_set.add(stones[-1] + 32)\n        stone_set.add(stones[-1] + 33)\n        stone_set.add(stones[-1] + 34)\n        stone_set.add(stones[-1] + 35)\n        stone_set.add(stones[-1] + 36)\n        stone_set.add(stones[-1] + 37)\n        stone_set.add(stones[-1] + 38)\n        stone_set.add(stones[-1] + 39)\n        stone_set.add(stones[-1] + 40)\n        stone_set.add(stones[-1] + 41)\n        stone_set.add(stones[-1] + 42)\n        stone_set.add(stones[-1] + 43)\n        stone_set.add(stones[-1] + 44)\n        stone_set.add(stones[-1] + 45)\n        stone_set.add(stones[-1] + 46)\n        stone_set.add(stones[-1] + 47)\n        stone_set.add(stones[-1] + 48)\n        stone_set.add(stones[-1] + 49)\n        stone_set.add(stones[-1] + 50)\n        stone_set.add(stones[-1] + 51)\n        stone_set.add(stones[-1] + 52)\n        stone_set.add(stones[-1] + 53)\n        stone_set.add(stones[-1] + 54)\n        stone_set.add(stones[-1] + 55)\n        stone_set.add(stones[-1] + 56)\n        stone_set.add(stones[-1] + 57)\n        stone_set.add(stones[-1] + 58)\n        stone_set.add(stones[-1] +"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        score_dict = {}\n        for i in range(len(score)):\n            score_dict[score[i]] = i\n        \n        score.sort(reverse = True)\n        answer = []\n        for i in score:\n            if score_dict[i] == 0:\n                answer.append(\"Gold Medal\")\n            elif score_dict[i] == 1:\n                answer.append(\"Silver Medal\")\n            elif score_dict[i] == 2:\n                answer.append(\"Bronze Medal\")\n            else:\n                answer.append(str(score_dict[i] + 1))\n        \n        return answer"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        max_len = 0\n        cur_len = 0\n        cur_str = \"\"\n        for i in range(len(s)):\n            if s[i] in cur_str:\n                max_len = max(max_len, cur_len)\n                cur_len = cur_len - cur_str.index(s[i])\n                cur_str = cur_str[cur_str.index(s[i])+1:]\n            cur_str += s[i]\n            cur_len += 1\n        max_len = max(max_len, cur_len)\n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\""}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 0\n        for i in range(len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if i == max_val:\n                chunks += 1\n                max_val = 0\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.next and cur.val > cur.next.val:\n                prev = dummy\n                while prev.next and cur.val > prev.next.val:\n                    prev = prev.next\n                cur.next, cur.next.next, prev.next = cur.next.next, cur, prev.next\n            cur = cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if head is None:\n            return None\n        if head.next is None:\n            return head\n        cur = head\n        while cur.next is not None:\n            if cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return head"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i + 1\n            r = len(nums) - 1\n            while l < r:\n                sum = nums[i] + nums[l] + nums[r]\n                if sum < 0:\n                    l += 1\n                elif sum > 0:\n                    r -= 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    r -= 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                    while l < r and nums[r] == nums[r+1]:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m = len(word1)\n        n = len(word2)\n        dp = [[0 for i in range(n+1)] for j in range(m+1)]\n        for i in range(m+1):\n            dp[i][0] = i\n        for j in range(n+1):\n            dp[0][j] = j\n        for i in range(1, m+1):\n            for j in range(1, n+1):\n                if word1[i-1] == word2[j-1]:\n                    dp[i][j] = dp[i-1][j-1]\n                else:\n                    dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += xor & 1\n            xor = xor >> 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left_paths = self.binaryTreePaths(root.left)\n        right_paths = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left_paths + right_paths]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = merge(nums, left, mid) + merge(nums, mid + 1, right)\n            i, j = left, mid + 1\n            while i <= mid and j <= right:\n                if nums[i] > 2 * nums[j]:\n                    count += mid - i + 1\n                    j += 1\n                else:\n                    i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        \n        return merge(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while sx < tx and sy < ty:\n            if sx == tx and sy < ty:\n                return (ty - sy) % sx == 0\n            if sy == ty and sx < tx:\n                return (tx - sx) % sy == 0\n            if sx < ty and sy < tx:\n                sx, sy = sy, sx\n            else:\n                return False\n        return sx == tx and sy == ty"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        for i in range(max(len(v1), len(v2))):\n            if i >= len(v1):\n                v1.append('0')\n            if i >= len(v2):\n                v2.append('0')\n            if int(v1[i]) < int(v2[i]):\n                return -1\n            if int(v1[i]) > int(v2[i]):\n                return 1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        courses.sort(key=lambda x: x[1])\n        cur_time = 0\n        cur_courses = []\n        for duration, last_day in courses:\n            cur_time += duration\n            heapq.heappush(cur_courses, -duration)\n            while cur_time > last_day:\n                cur_time += heapq.heappop(cur_courses)\n        return len(cur_courses)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        count = 0\n        \n        while cur:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, cur.next)\n                cur = prev.next\n            else:\n                cur = cur.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, cur):\n        cur_prev = cur\n        while cur:\n            next_node = cur.next\n            cur.next = prev.next\n            prev.next = cur\n            cur = next_node\n        return cur_prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(1, len(s) // 2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s) // i) == s:\n                    return True\n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        for i in range(0, len(nums)-1, 2):\n            if nums[i] != nums[i+1]:\n                return nums[i]\n        return nums[-1]"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\""}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n        for i in range(n-2, -1, -1):\n            for j in range(i+1, n):\n                dp[i][j] = dp[i][j-1]\n                for k in range(i, j):\n                    if s[k] == s[j]:\n                        dp[i][j] = max(dp[i][j], dp[i][k] + dp[k+1][j-1])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0 or x == 1:\n            return x\n        \n        low = 1\n        high = x\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return high"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        num = 0\n        for i in range(len(s)):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                num -= roman_dict[s[i]]\n            else:\n                num += roman_dict[s[i]]\n        return num"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(nums) != len(set(nums))"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        if len(nums) == 1:\n            return [nums[0]]\n        if len(nums) == 2:\n            return [max(nums[0], nums[1]), max(nums[1], nums[0])]\n        if len(nums) == 3:\n            return [max(nums[0], nums[1], nums[2]), max(nums[1], max(nums[0], nums[2])), max(nums[2], max(nums[0], nums[1]))]\n        if len(nums) == 4:\n            return [max(nums[0], nums[1], nums[2], nums[3]), max(nums[1], max(nums[0], nums[2], nums[3])), max(nums[2], max(nums[1], max(nums[0], nums[3]))), max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[3]))))]\n        if len(nums) == 5:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4]), max(nums[1], max(nums[0], nums[2], nums[3], nums[4])), max(nums[2], max(nums[1], max(nums[0], nums[3], nums[4]))), max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[4])))), max(nums[4], max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[4])))))]\n        if len(nums) == 6:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5]), max(nums[1], max(nums[0], nums[2], nums[3], nums[4], nums[5])), max(nums[2], max(nums[1], max(nums[0], nums[3], nums[4], nums[5]))), max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[4], nums[5])))), max(nums[4], max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[5]))))), max(nums[5], max(nums[4], max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[5]))))))]\n        if len(nums) == 7:\n            return [max(nums[0], nums[1], nums[2], nums[3], nums[4], nums[5], nums[6]), max(nums[1], max(nums[0], nums[2], nums[3], nums[4], nums[5], nums[6])), max(nums[2], max(nums[1], max(nums[0], nums[3], nums[4], nums[5], nums[6]))), max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[4], nums[5], nums[6])))), max(nums[4], max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[5], nums[6]))))), max(nums[5], max(nums[4], max(nums[3], max(nums[2], max(nums[1], max(nums[0], nums[6])))))), max(nums[6], max(nums[5], max(nums[4], max(nums[3], max(nums[2], max(nums[1"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\""}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        row = [1] * (rowIndex + 1)\n        for i in range(1, rowIndex + 1):\n            for j in range(i - 1, 0, -1):\n                row[j] += row[j - 1]\n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            path.append(root.val)\n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(area, 0, -1):\n            if area % i == 0:\n                return [area / i, i]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\""}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isBalanced(root):\n            if not root:\n                return True\n            left = isBalanced(root.left)\n            right = isBalanced(root.right)\n            if not left or not right:\n                return False\n            if abs(left - right) > 1:\n                return False\n            return True\n        \n        return isBalanced(root)"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        while n % 2 == 0:\n            n = n / 2\n        if n == 1:\n            return True\n        else:\n            return False"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        def backtrack(i, cur):\n            if i == len(nums):\n                res.append(cur[:])\n                return\n            backtrack(i+1, cur)\n            if i == len(nums) or nums[i] != nums[i-1]:\n                cur.append(nums[i])\n                backtrack(i+1, cur)\n                cur.pop()\n        backtrack(0, [])\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(heights)\n        left = [0] * n\n        right = [0] * n\n        stack = []\n        for i in range(n):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                left[i] = 0\n            else:\n                left[i] = stack[-1] + 1\n            stack.append(i)\n        stack = []\n        for i in range(n-1,-1,-1):\n            while stack and heights[stack[-1]] >= heights[i]:\n                stack.pop()\n            if not stack:\n                right[i] = n-1\n            else:\n                right[i] = stack[-1] - 1\n            stack.append(i)\n        max_area = 0\n        for i in range(n):\n            max_area = max(max_area, (right[i]-left[i]+1) * heights[i])\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i not in [\"+\",\"-\",\"*\",\"/\"]:\n                stack.append(int(i))\n            else:\n                a = stack.pop()\n                b = stack.pop()\n                if i == \"+\":\n                    stack.append(a+b)\n                elif i == \"-\":\n                    stack.append(b-a)\n                elif i == \"*\":\n                    stack.append(a*b)\n                else:\n                    stack.append(int(b/a))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        for rect in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, rect[0]), min(y_min, rect[1]), max(x_max, rect[2]), max(y_max, rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        if x_min < x_max and y_min < y_max:\n            return area == (x_max - x_min) * (y_max - y_min)\n        return False"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res += chr(columnNumber % 26 + ord('A'))\n            columnNumber //= 26\n        return res[::-1]"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = 0\n            cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n        def swap(board, i, j):\n            board[i][j], board[i][j + 1] = board[i][j + 1], board[i][j]\n\n        def swap_zero(board):\n            for i in range(2):\n                for j in range(3):\n                    if board[i][j] == 0:\n                        return i, j\n\n        def is_solved(board):\n            return board == [[1, 2, 3], [4, 5, 0]]\n\n        def solve(board):\n            if is_solved(board):\n                return 0\n            i, j = swap_zero(board)\n            moves = []\n            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                new_i, new_j = i + di, j + dj\n                if new_i < 2 and new_j < 3 and new_i >= 0 and new_j >= 0:\n                    new_board = [row[:] for row in board]\n                    swap(new_board, i, j)\n                    swap(new_board, new_i, new_j)\n                    moves.append(1 + solve(new_board))\n            return min(moves) if moves else -1\n\n        return solve(board)"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_dict:\n                if s_dict[s[i]] != t[i]:\n                    return False\n            else:\n                s_dict[s[i]] = t[i]\n            \n            if t[i] in t_dict:\n                if t_dict[t[i]] != s[i]:\n                    return False\n            else:\n                t_dict[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        l = 0\n        r = len(nums)-1\n        while l<=r:\n            mid = (l+r)//2\n            if nums[mid] == target:\n                return True\n            if nums[l] == nums[mid]:\n                l += 1\n            elif nums[l] < nums[mid]:\n                if nums[l] <= target < nums[mid]:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            else:\n                if nums[mid] < target <= nums[r]:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        dp = [[0 for i in range(n)] for j in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '*':\n            return 9\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':\n            return 15\n        if s[0] == '*' and s[1] == '*':"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            j = i + 1\n            k = len(nums) - 1\n            while j < k:\n                sum = nums[i] + nums[j] + nums[k]\n                if abs(target - sum) < abs(target - closest):\n                    closest = sum\n                if sum < target:\n                    j += 1\n                else:\n                    k -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        nums1.sort()\n        nums2.sort()\n        i = 0\n        j = 0\n        res = []\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if not root:\n                return []\n            return inorder(root.left) + [root.val] + inorder(root.right)\n        \n        inorder_list = inorder(root)\n        min_diff = float('inf')\n        for i in range(1, len(inorder_list)):\n            min_diff = min(min_diff, inorder_list[i] - inorder_list[i - 1])\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\""}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        if len(haystack) == 0:\n            return -1\n        if len(haystack) < len(needle):\n            return -1\n        for i in range(len(haystack)-len(needle)+1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        if len(password) < 6:\n            return 6 - len(password)\n        if len(password) > 20:\n            return 20 - len(password)\n        \n        low, up, digit = 0, 0, 0\n        for i in range(len(password)):\n            if password[i].islower():\n                low += 1\n            elif password[i].isupper():\n                up += 1\n            elif password[i].isdigit():\n                digit += 1\n        \n        if low == 0 or up == 0 or digit == 0:\n            return 3\n        \n        repeat = 0\n        for i in range(len(password)-1):\n            if password[i] == password[i+1]:\n                repeat += 1\n                if repeat == 2:\n                    repeat = 0\n                    up -= 1\n            else:\n                repeat = 0\n        \n        if repeat == 2:\n            up -= 1\n        \n        return max(0, 3 - up)"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n > 0:\n            n = n // 5\n            count += n\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        rows = [\"\" for i in range(numRows)]\n        row_index = 0\n        direction = 1\n        \n        for i in range(len(s)):\n            rows[row_index] += s[i]\n            if row_index == 0:\n                direction = 1\n            elif row_index == numRows - 1:\n                direction = -1\n            row_index += direction\n        \n        return \"\".join(rows)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(height)\n        left_max = [0] * n\n        right_max = [0] * n\n        left_max[0] = height[0]\n        right_max[n-1] = height[n-1]\n        for i in range(1, n):\n            left_max[i] = max(left_max[i-1], height[i])\n        for i in range(n-2, -1, -1):\n            right_max[i] = max(right_max[i+1], height[i])\n        ans = 0\n        for i in range(n):\n            ans += min(left_max[i], right_max[i]) - height[i]\n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(nums)\n        for i in range(n):\n            index = nums[i] - 1\n            if nums[index] != nums[i]:\n                nums[index], nums[i] = nums[i], nums[index]\n        res = []\n        for i in range(n):\n            if nums[i] != i + 1:\n                res.append(i + 1)\n        return res"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return [0] * n\n        nums = [(nums[i], i) for i in range(n)]\n        self.counts = [0] * n\n        self.build_tree(nums, 0, n - 1, 0)\n        return self.counts\n\n    def build_tree(self, nums, l, r, index):\n        if l == r:\n            self.counts[l] = 0\n            return nums[l]\n        m = (l + r) // 2\n        left = self.build_tree(nums, l, m, 2 * index + 1)\n        right = self.build_tree(nums, m + 1, r, 2 * index + 2)\n        self.counts[index] = left + right\n        return self.counts[index]\n\n    def update(self, nums, l, r, index, val):\n        if l == r:\n            nums[l] = val\n            return nums[l]\n        m = (l + r) // 2\n        if index <= m:\n            self.update(nums, l, m, index, val)\n        else:\n            self.update(nums, m + 1, r, index, val)\n        self.counts[index] = self.counts[2 * index + 1] + self.counts[2 * index + 2]\n        return self.counts[index]\n\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        n = len(nums)\n        if n <= 1:\n            return [0] * n\n        nums = [(nums[i], i) for i in range(n)]\n        self.counts = [0] * n\n        self.build_tree(nums, 0, n - 1, 0)\n        for i in range(n - 1, -1, -1):\n            self.update(nums, 0, n - 1, nums[i][1], self.counts[i])\n        return self.counts"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: x[0])\n        ans = 0\n        a, b = intervals[0][0], intervals[0][1]\n        for i in range(1, len(intervals)):\n            if intervals[i][0] <= b:\n                a, b = min(a, intervals[i][0]), max(b, intervals[i][1])\n            else:\n                ans += b - a + 1\n                a, b = intervals[i][0], intervals[i][1]\n        return ans + b - a + 1"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if not root1 and not root2:\n                return True\n            if not root1 or not root2:\n                return False\n            return root1.val == root2.val and isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\""}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        while n % 4 == 0:\n            n /= 4\n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\""}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\""}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [0] * n\n        for i in range(1, n):\n            if s[i] == ')':\n                if s[i - 1] == '(':\n                    dp[i] = dp[i - 2] + 2\n                elif i - dp[i - 1] - 1 >= 0 and s[i - dp[i - 1] - 1] == '(':\n                    dp[i] = dp[i - 1] + 2 + dp[i - dp[i - 1] - 2]\n        return max(dp)"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if denominator == 0:\n            return \"\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        \n        if numerator < 0:\n            numerator = -numerator\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        if denominator < 0:\n            denominator = -denominator\n            sign += \"-\"\n        \n        quotient = numerator // denominator\n        remainder = numerator % denominator\n        \n        if remainder == 0:\n            return sign + str(quotient)\n        \n        remainder_dict = {}\n        remainder_dict[remainder] = 0\n        \n        fraction = \"\"\n        i = 1\n        while remainder != 0:\n            remainder *= 10\n            quotient = remainder // denominator\n            remainder = remainder % denominator\n            \n            if remainder in remainder_dict:\n                fraction = fraction[:remainder_dict[remainder]] + \"(\" + fraction[remainder_dict[remainder]:] + \")\"\n                break\n            \n            remainder_dict[remainder] = i\n            i += 1\n            fraction += str(quotient)\n        \n        return sign + str(quotient) + \".\" + fraction"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow.next, slow.next = None, None\n        left = self.sortList(head)\n        right = self.sortList(slow)\n        \n        dummy = ListNode()\n        cur = dummy\n        while left and right:\n            if left.val < right.val:\n                cur.next = left\n                left = left.next\n            else:\n                cur.next = right\n                right = right.next\n            cur = cur.next\n        \n        cur.next = left if left else right\n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        envelopes_len = len(envelopes)\n        envelopes_dp = [1] * envelopes_len\n        for i in range(envelopes_len):\n            for j in range(i):\n                if envelopes[j][0] < envelopes[i][0] and envelopes[j][1] < envelopes[i][1]:\n                    envelopes_dp[i] = max(envelopes_dp[i], envelopes_dp[j] + 1)\n        return max(envelopes_dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        row_zero = False\n        col_zero = False\n\n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 0:\n                    if i == 0:\n                        row_zero = True\n                    if j == 0:\n                        col_zero = True\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n\n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n\n        if row_zero:\n            for j in range(cols):\n                matrix[0][j] = 0\n\n        if col_zero:\n            for i in range(rows):\n                matrix[i][0] = 0\n\n        return matrix"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        if n == length:\n            return head.next\n        \n        curr = head\n        for i in range(length - n - 1):\n            curr = curr.next\n        \n        curr.next = curr.next.next\n        \n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1).intersection(set(nums2)))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(machines)\n        if n == 1:\n            return 0\n        if n == 2:\n            return max(machines[0], machines[1]) - min(machines[0], machines[1])\n        if n == 3:\n            return max(machines[0], machines[1], machines[2]) - min(machines[0], machines[1], machines[2])\n        if n == 4:\n            return max(machines[0], machines[1], machines[2], machines[3]) - min(machines[0], machines[1], machines[2], machines[3])\n        if n == 5:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4]) - min(machines[0], machines[1], machines[2], machines[3], machines[4])\n        if n == 6:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5])\n        if n == 7:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6])\n        if n == 8:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7])\n        if n == 9:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8])\n        if n == 10:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9])\n        if n == 11:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9], machines[10]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9], machines[10])\n        if n == 12:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9], machines[10], machines[11]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9], machines[10], machines[11])\n        if n == 13:\n            return max(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9], machines[10], machines[11], machines[12]) - min(machines[0], machines[1], machines[2], machines[3], machines[4], machines[5], machines[6], machines[7], machines[8], machines[9], machines[10], machines[1"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(m, n, i, j):\n            count = 0\n            while i <= m and j <= n:\n                count += m // i * n // j\n                i *= 10\n                j *= 10\n            return count\n        \n        i, j = 1, 1\n        while i * j <= k:\n            count = count(m, n, i, j)\n            if count >= k:\n                j *= 10\n            else:\n                i *= 10\n                k -= count\n        return i * j"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        if not head.next:\n            return TreeNode(head.val)\n        slow = head\n        fast = head\n        while fast.next and fast.next.next:\n            slow = slow.next\n            fast = fast.next.next\n        root = TreeNode(slow.next.val)\n        slow.next = None\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1.next = self.mergeTwoLists(list1.next, list2)\n            return list1\n        else:\n            list2.next = self.mergeTwoLists(list1, list2.next)\n            return list2"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        rows, cols = len(matrix), len(matrix[0])\n        matrix = [[int(matrix[i][j]) for j in range(cols)] for i in range(rows)]\n        \n        for i in range(rows):\n            for j in range(cols):\n                if matrix[i][j] == 1:\n                    matrix[i][j] += matrix[i-1][j] if i > 0 else 0\n        \n        return max(map(max, matrix))"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        def backtrack(i, subset):\n            if i >= len(nums):\n                res.append(subset.copy())\n                return\n            backtrack(i+1, subset)\n            subset.append(nums[i])\n            backtrack(i+1, subset)\n            subset.pop()\n        backtrack(0, [])\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        l = 0\n        r = len(nums)-1\n        while l<r:\n            m = (l+r)//2\n            if nums[m]>nums[r]:\n                l = m+1\n            else:\n                r = m\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        if s[0] in ['+','-']:\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['e','E']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        if not s:\n            return False\n        if s[-1] in ['.']:\n            s = s[:-1]\n        if not s:"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_num = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\"\n        }\n        roman_num_list = []\n        for i in roman_num.keys():\n            while num >= i:\n                roman_num_list.append(roman_num[i])\n                num -= i\n        return \"\".join(roman_num_list)"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        s_sum = 0\n        t_sum = 0\n        for i in range(len(s)):\n            s_sum += ord(s[i])\n            t_sum += ord(t[i])\n        t_sum += ord(t[-1])\n        return chr(t_sum - s_sum)"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def solve(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        for k in range(1, 10):\n                            if valid(board, i, j, k):\n                                board[i][j] = str(k)\n                                if solve(board):\n                                    return True\n                                else:\n                                    board[i][j] = '.'\n                        return False\n            return True\n\n        def valid(board, i, j, k):\n            for l in range(9):\n                if board[l][j] == str(k) and l != i:\n                    return False\n            for l in range(9):\n                if board[i][l] == str(k) and l != j:\n                    return False\n            for l in range(3):\n                for m in range(3):\n                    if board[i - i % 3 + l][j - j % 3 + m] == str(k) and (i - i % 3 + l != i or j - j % 3 + m != j):\n                        return False\n            return True\n\n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # Inorder Traversal\n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        self.prev = None\n        self.first = None\n        self.second = None\n        self.inorder(root)\n        self.first.val, self.second.val = self.second.val, self.first.val\n        \n    def inorder(self, root):\n        if not root:\n            return\n        self.inorder(root.left)\n        if self.prev and self.prev.val > root.val:\n            if self.first is None:\n                self.first = self.prev\n            self.second = root\n        self.prev = root\n        self.inorder(root.right)"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = head\n        fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        slow = self.reverse(slow)\n        fast = head\n        while slow:\n            if slow.val != fast.val:\n                return False\n            slow = slow.next\n            fast = fast.next\n        return True\n        \n    def reverse(self, head):\n        prev = None\n        while head:\n            next = head.next\n            head.next = prev\n            prev = head\n            head = next\n        return prev"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        i = 1\n        while i * i < num:\n            i += 1\n        return i * i == num"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        if not head:\n            return None\n        \n        cur = head\n        while cur.next:\n            if cur.next.val == val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        if len(s1) == 1:\n            return s1 == s2\n        if s1 == s2:\n            return True\n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n\n        return \"\""}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\""}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for i in s_dict:\n            if s_dict[i] != t_dict.get(i, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        rows = [set() for i in range(9)]\n        cols = [set() for i in range(9)]\n        boxes = [set() for i in range(9)]\n\n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    box_index = (i // 3) * 3 + j // 3\n                    if num in rows[i] or num in cols[j] or num in boxes[box_index]:\n                        return False\n                    rows[i].add(num)\n                    cols[j].add(num)\n                    boxes[box_index].add(num)\n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        s = s.strip()\n        s = s.split()\n        s.reverse()\n        return ' '.join(s)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        columnTitle = columnTitle[::-1]\n        columnNumber = 0\n        for i in range(len(columnTitle)):\n            columnNumber += (26**i) * (ord(columnTitle[i]) - 64)\n        return columnNumber"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n\n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n\n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n\n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head.next\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        fast = slow.next\n        slow.next = None\n        slow = head\n        \n        while fast:\n            temp = fast.next\n            fast.next = slow.next\n            slow.next = fast\n            slow = temp\n            fast = fast.next\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        pattern_dict = {}\n        s_list = s.split()\n        if len(pattern) != len(s_list):\n            return False\n        for i in range(len(pattern)):\n            if pattern[i] in pattern_dict:\n                if pattern_dict[pattern[i]] != s_list[i]:\n                    return False\n            else:\n                if s_list[i] in pattern_dict.values():\n                    return False\n                pattern_dict[pattern[i]] = s_list[i]\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        for i in range(m):\n            if target <= matrix[i][n-1]:\n                for j in range(n):\n                    if target == matrix[i][j]:\n                        return True\n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        l1 = self.reverse(l1)\n        l2 = self.reverse(l2)\n        l3 = ListNode()\n        l4 = l3\n        carry = 0\n        while l1 or l2:\n            if l1:\n                l3.val += l1.val\n                l1 = l1.next\n            if l2:\n                l3.val += l2.val\n                l2 = l2.next\n            l3.next = ListNode()\n            l3 = l3.next\n            l3.val += carry\n            carry = l3.val // 10\n            l3.val = l3.val % 10\n        if carry:\n            l3.next = ListNode(carry)\n        return self.reverse(l4)\n        \n    def reverse(self, l):\n        prev = None\n        while l:\n            next = l.next\n            l.next = prev\n            prev = l\n            l = next\n        return prev"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        binary = bin(num)[2:]\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')\n        binary = binary.replace('1', '0')\n        binary = binary.replace('0', '1')"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n < 3:\n            return 0\n        dp = [0] * n\n        for i in range(2, n):\n            if nums[i] - nums[i - 1] == nums[i - 1] - nums[i - 2]:\n                dp[i] = dp[i - 1] + 1\n        return sum(dp)"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        res = []\n        i = 0\n        while i < len(words):\n            cur_len = len(words[i])\n            j = i + 1\n            while j < len(words) and cur_len + 1 + len(words[j]) <= maxWidth:\n                cur_len += 1 + len(words[j])\n                j += 1\n            if j == len(words):\n                res.append(' '.join(words[i:j]) + ' ' * (maxWidth - len(words[i:j]) - (j - i - 1)))\n            else:\n                res.append(' '.join(words[i:j]) + ' ' * (maxWidth - cur_len))\n                res.append(' '.join(words[j]) + ' ' * (maxWidth - cur_len - 1))\n            i = j\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack = [root]\n        res = []\n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        maxArea = 0\n        left = 0\n        right = len(height) - 1\n        while left < right:\n            maxArea = max(maxArea, min(height[left], height[right]) * (right - left))\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return maxArea"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))\n        words.sort(key=lambda x: len(x), reverse=True)\n        words.sort(key=lambda x: len(x))"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        if num < 7:\n            return str(num)\n        return self.convertToBase7(num // 7) + str(num % 7)"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(n, row, cols, diag, anti_diag):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag and row - col not in anti_diag:\n                    count += backtrack(n, row + 1, cols + [col], diag + [row + col], anti_diag + [row - col])\n            return count\n        \n        return backtrack(n, 0, [], [], [])"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n\n\nclass Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def solve(n, row, cols, diag1, diag2):\n            if row == n:\n                return [['.' * col + 'Q' + '.' * (n - col - 1) for col in cols]]\n            solutions = []\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    solutions.extend(solve(n, row + 1, cols + [col], diag1 + [row + col], diag2 + [row - col]))\n            return solutions\n\n        return solve(n, 0, [], [], [])"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, word):\n            if len(word) == 0:\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[0]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i + 1, j, word[1:]) or dfs(i - 1, j, word[1:]) or dfs(i, j + 1, word[1:]) or dfs(i, j - 1, word[1:])\n            board[i][j] = word[0]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, word):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        while i >= 0 and j >= 0:\n            if nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1\n        \n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = list(set(nums))\n        if len(nums) < 3:\n            return max(nums)\n        else:\n            nums.sort()\n            return nums[-3]"}]}