{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = dp[i-1][j-1] + dp[i-1][j]\n        # dp[i][j] = 0 if s[i] != t[j]\n        # dp[i][0] = 1\n        # dp[0][j] = 0\n        # dp[0][0] = 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1] if s[i] == t[j]\n        \n        dp = [[0] * (len(t) + 1) for _ in range(len(s) + 1)]\n        for i in range(len(s) + 1):\n            dp[i][0] = 1\n        for i in range(1, len(s) + 1):\n            for j in range(1, len(t) + 1):\n                if s[i - 1] == t[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n                else:\n                    dp[i][j] = dp[i - 1][j]\n        return dp[-1][-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers as 0\n        # 2. mark all numbers in the range [1, len(nums)] as 1\n        # 3. iterate through the array and mark the number at nums[i] as -1\n        # 4. iterate through the array again and return the first number that is not marked as -1\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        res = \"\"\n        nums = [i for i in range(1, n+1)]\n        for i in range(n-1, -1, -1):\n            fact //= i\n            idx = k // fact\n            res += str(nums[idx])\n            nums.pop(idx)\n            k %= fact\n        \n        return res"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. Brute force\n        # for i in range(len(numbers)):\n        #     for j in range(i+1, len(numbers)):\n        #         if numbers[i] + numbers[j] == target:\n        #             return [i+1, j+1]\n        \n        # 2. Two pointers\n        left, right = 0, len(numbers) - 1\n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left+1, right+1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            if i > 0:\n                backtrack(i + 1, curr + int(num[i]), int(num[i]), res, op + '+' + num[i])\n                backtrack(i + 1, curr - int(num[i]), -int(num[i]), res, op + '-' + num[i])\n                backtrack(i + 1, curr - prev + prev * int(num[i]), prev * int(num[i]), res, op + '*' + num[i])\n        \n        if not num:\n            return []\n        res = []\n        backtrack(0, 0, 0, res, '')\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            return dfs(root.left, curr_sum * 10 + root.val) + dfs(root.right, curr_sum * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        return '-'.join(s[i:i+k] for i in range(0, n, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank = 0\n        start = 0\n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] < 9:\n                digits[i] += 1\n                return digits\n            digits[i] = 0\n        digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '.')\n        \n        if len(p) >= 2 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    (first_match and self.isMatch(s[1:], p)))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            removed = len(nums) - k\n            out = []\n            for n in nums:\n                while removed and out and out[-1] < n:\n                    out.pop()\n                    removed -= 1\n                out.append(n)\n            return out\n        \n        def merge(nums1, nums2, k):\n            out = []\n            while nums1 and nums2 and k:\n                if nums1 > nums2:\n                    out.append(nums1.pop(0))\n                else:\n                    out.append(nums2.pop(0))\n                k -= 1\n            out += nums1 + nums2\n            return out\n        \n        return max(merge(pick(nums1, i), pick(nums2, k-i), k) for i in range(k+1) if i <= len(nums1) and k-i <= len(nums2))"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                if num / i == i:\n                    sum += i\n                else:\n                    sum += i + num / i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j], dp[i][j + 1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        lo, hi = 0, nums[-1] - nums[0]\n        while lo < hi:\n            mid = (lo + hi) // 2\n            if sum(bisect_right(nums, mid) - bisect_left(nums, mid) for x in nums) >= k:\n                hi = mid\n            else:\n                lo = mid + 1\n        return lo"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        s = list(s)\n        left, right = 0, len(s) - 1\n        while left < right:\n            while left < right and s[left] not in vowels:\n                left += 1\n            while left < right and s[right] not in vowels:\n                right -= 1\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 = 0\n        ## 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # BFS\n        # Time: O(n * m)\n        # Space: O(n * m)\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        \n        while queue:\n            word, length = queue.popleft()\n            \n            for i in range(len(word)):\n                for j in range(ord('a'), ord('z') + 1):\n                    new_word = word[:i] + chr(j) + word[i + 1:]\n                    \n                    if new_word == endWord:\n                        return length + 1\n                    \n                    if new_word in wordList:\n                        queue.append((new_word, length + 1))\n                        wordList.remove(new_word)\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a, b = list(a), list(b)\n        \n        carry = 0\n        for i in range(len(a)):\n            if i < len(b):\n                a[i] = str(int(a[i]) + int(b[i]) + carry)\n            else:\n                a[i] = str(int(a[i]) + carry)\n            carry = int(a[i] > '1')\n        \n        if carry:\n            a.append('1')\n        \n        return ''.join(a)"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        if nums[left] != target:\n            return [-1, -1]\n        else:\n            left = right\n            right = len(nums) - 1\n            while left < right:\n                mid = (left + right + 1) // 2\n                if nums[mid] > target:\n                    right = mid - 1\n                else:\n                    left = mid\n            return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = 0\n        \n        for i in range(n):\n            if i > cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n            max_reach = max(max_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i+1] - prices[i] for i in range(0, len(prices) - 1)) - (max(prices[i+1] - prices[i] for i in range(0, len(prices) - 1)) % 2)\n        \n        dp = [[0] * 2 for _ in range(k + 1)]\n        \n        for i in range(len(prices)):\n            for j in range(1, k + 1):\n                dp[j][0] = max(dp[j][0], dp[j - 1][1] + prices[i])\n                dp[j][1] = max(dp[j][1], dp[j - 1][0] - prices[i])\n        \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        hex_list = []\n        if num < 0:\n            num = num + 2**32\n        \n        while num > 0:\n            hex_list.append(num % 16)\n            num = num // 16\n        \n        hex_list.reverse()\n        hex_str = ''\n        for i in hex_list:\n            if i < 10:\n                hex_str += str(i)\n            else:\n                hex_str += hex_dict[i]\n        \n        return hex_str"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap to store the frequency of each character in the string\n        freq = {}\n        \n        # iterate over the string and update the frequency of each character\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # iterate over the string again and return the first character with frequency 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # if no character with frequency 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff < 0:\n            indexDiff = len(nums) + indexDiff\n        \n        if indexDiff > len(nums):\n            return False\n        \n        if indexDiff == 0:\n            return False\n        \n        if indexDiff == 1:\n            return True\n        \n        if valueDiff == 0:\n            return False\n        \n        if valueDiff == 1:\n            return True\n        \n        if len(nums) == 2:\n            return False\n        \n        if len(nums) == 3:\n            return False\n        \n        if len(nums) == 4:\n            return False\n        \n        if len(nums) == 5:\n            return False\n        \n        if len(nums) == 6:\n            return False\n        \n        if len(nums) == 7:\n            return False\n        \n        if len(nums) == 8:\n            return False\n        \n        if len(nums) == 9:\n            return False\n        \n        if len(nums) == 10:\n            return False\n        \n        if len(nums) == 11:\n            return False\n        \n        if len(nums) == 12:\n            return False\n        \n        if len(nums) == 13:\n            return False\n        \n        if len(nums) == 14:\n            return False\n        \n        if len(nums) == 15:\n            return False\n        \n        if len(nums) == 16:\n            return False\n        \n        if len(nums) == 17:\n            return False\n        \n        if len(nums) == 18:\n            return False\n        \n        if len(nums) == 19:\n            return False\n        \n        if len(nums) == 20:\n            return False\n        \n        if len(nums) == 21:\n            return False\n        \n        if len(nums) == 22:\n            return False\n        \n        if len(nums) == 23:\n            return False\n        \n        if len(nums) == 24:\n            return False\n        \n        if len(nums) == 25:\n            return False\n        \n        if len(nums) == 26:\n            return False\n        \n        if len(nums) == 27:\n            return False\n        \n        if len(nums) == 28:\n            return False\n        \n        if len(nums) == 29:\n            return False\n        \n        if len(nums) == 30:\n            return False\n        \n        if len(nums) == 31:\n            return False\n        \n        if len(nums) == 32:\n            return False\n        \n        if len(nums) == 33:\n            return False\n        \n        if len(nums) == 34:\n            return False\n        \n        if len(nums) == 35:\n            return False\n        \n        if len(nums) == 36:\n            return False\n        \n        if len(nums) == 37:\n            return False\n        \n        if len(nums) == 38:\n            return False\n        \n        if len(nums) == 39:\n            return False\n        \n        if len(nums) == 40:\n            return False\n        \n        if len(nums) == 41:\n            return False\n        \n        if len(nums) == 42:\n            return False\n        \n        if len(nums) == 43:\n            return False\n        \n        if len(nums) == 44:\n            return False\n        \n        if len(nums) == 45:\n            return False\n        \n        if len(nums) == 46:\n            return False\n        \n        if len(nums) == 47:\n            return False\n        \n        if len(nums) == 48:\n            return False\n        \n        if len(nums) == 49:\n            return False\n        \n        if len(nums) == 50:\n            return False\n        \n        if len(nums) == 51:\n            return False\n        \n        if len(num"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        curr_count = 0\n        \n        for i in nums:\n            if i == 1:\n                curr_count += 1\n            else:\n                max_count = max(max_count, curr_count)\n                curr_count = 0\n                \n        return max(max_count, curr_count)"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = list(num1), list(num2)\n        \n        carry = 0\n        for i in range(len(num1)):\n            if i < len(num2):\n                carry += int(num1[i]) + int(num2[i])\n            else:\n                carry += int(num1[i])\n            \n            num1[i] = str(carry % 10)\n            carry //= 10\n        \n        if carry:\n            num1.append(str(carry))\n        \n        return ''.join(num1)"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        for i in range(len(s)):\n            if s[i] == ' ':\n                continue\n            elif s[i] == '+':\n                num += sign\n            elif s[i] == '-':\n                num += sign\n            elif s[i] == '(':\n                stack.append(num)\n                stack.append(sign)\n                num = 0\n                sign = 1\n            elif s[i] == ')':\n                num += sign\n                num *= stack.pop()\n                num += stack.pop()\n            else:\n                num = num * 10 + int(s[i])\n        return num"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O(nlogn)\n        # O(1)\n        # greedy\n        # O("}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(':\n                stack.append(')')\n            elif i == '{':\n                stack.append('}')\n            elif i == '[':\n                stack.append(']')\n            elif stack and i == stack[-1]:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first index i such that nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if no such index exists, then the array is already in descending order\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first index j such that nums[j] > nums[i]\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the subarray nums[i+1:]\n        nums[i+1:] = nums[len(nums)-1:i:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time: O(n)\n        # Space: O(n)\n        if len(nums) <= 1:\n            return False\n        \n        # Create a hashmap to store the last index of each number\n        # If the number is already in the hashmap, check if the last index is within k\n        # If it is, return True\n        # If it is not, add the number to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hashmap\n        # If the number is not in the hashmap, add it to the hash"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        \n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            level = []\n            for i in range(len(q)):\n                node = q.pop(0)\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.append(level)\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        if n == 0:\n            return 0\n        \n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        \n        swaps = 0\n        for i in range(0, n, 2):\n            if couples[i][0] / 2 != couples[i][1] / 2:\n                j = i + 1\n                while couples[j][0] / 2 != couples[i][1] / 2:\n                    j += 1\n                couples[i], couples[j] = couples[j], couples[i]\n                swaps += 1\n        \n        return swaps"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1\n        \n        dp = [[False] * (len(s2) + 1) for _ in range(len(s1) + 1)]\n        \n        for i in range(len(s1) + 1):\n            for j in range(len(s2) + 1):\n                if i == 0 and j == 0:\n                    dp[i][j] = True\n                elif i == 0:\n                    dp[i][j] = dp[i][j - 1] and s2[j - 1] == s3[j - 1]\n                elif j == 0:\n                    dp[i][j] = dp[i - 1][j] and s1[i - 1] == s3[i - 1]\n                else:\n                    dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[-1][-1]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = j = 0\n        \n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        first_row = set('qwertyuiop')\n        second_row = set('asdfghjkl')\n        third_row = set('zxcvbnm')\n        \n        res = []\n        \n        for word in words:\n            if word[0] in first_row:\n                row = first_row\n            elif word[0] in second_row:\n                row = second_row\n            else:\n                row = third_row\n            \n            for c in word:\n                if c not in row:\n                    break\n            else:\n                res.append(word)\n        \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        for i in range(right - left):\n            tmp = curr.next\n            curr.next = tmp.next\n            tmp.next = prev.next\n            prev.next = tmp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be centered at the beginning of the string\n        # if the string is a palindrome, then the longest palindrome is itself\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is not a palindrome, then the longest palindrome is the reverse of the string with the first character removed\n        # if the string is a palindrome,"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        # create a hashmap for the characters in t\n        # and their counts\n        t_map = {}\n        for c in t:\n            if c not in t_map:\n                t_map[c] = 0\n            t_map[c] += 1\n        \n        # create a hashmap for the characters in s\n        # and their counts\n        s_map = {}\n        for c in s:\n            if c not in s_map:\n                s_map[c] = 0\n            s_map[c] += 1\n        \n        # create a hashmap for the characters in t\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        # and their counts\n        #"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(3, len(distance)):\n            if distance[i] >= distance[i - 2] and distance[i - 1] <= distance[i - 3]:\n                return True\n            if i >= 4 and distance[i] == distance[i - 3] and distance[i - 1] == distance[i - 4]:\n                return True\n            if i >= 5 and distance[i] + distance[i - 4] >= distance[i - 2] and distance[i - 1] == distance[i - 3]:\n                return True\n            if i >= 6 and distance[i] + distance[i - 5] >= distance[i - 2] and distance[i - 2] == distance[i - 4] and distance[i - 1] == distance[i - 3]:\n                return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            while curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and add the max(odd, 1) to the result\n        # 3. return result\n        \n        hashmap = {}\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        result = 0\n        for key in hashmap:\n            if hashmap[key] % 2 == 0:\n                result += hashmap[key]\n            else:\n                result += hashmap[key] - 1\n        \n        if result < len(s):\n            result += 1\n        \n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        idx = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[idx+1:], postorder[idx:-1])\n        root.left = self.buildTree(inorder[:idx], postorder[:idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def bfs(start, end):\n            q = [start]\n            visited = set()\n            steps = 0\n            while q:\n                for _ in range(len(q)):\n                    x, y = q.pop(0)\n                    if (x, y) == end:\n                        return steps\n                    for dx, dy in [(0, 1), (1, 0), (0, -1), (-1, 0)]:\n                        nx, ny = x + dx, y + dy\n                        if 0 <= nx < m and 0 <= ny < n and forest[nx][ny] > 0 and (nx, ny) not in visited:\n                            q.append((nx, ny))\n                            visited.add((nx, ny))\n                steps += 1\n            return -1\n        \n        m, n = len(forest), len(forest[0])\n        trees = [(forest[i][j], i, j) for i in range(m) for j in range(n) if forest[i][j] > 1]\n        trees.sort()\n        steps = 0\n        for i, j in trees:\n            steps += bfs((0, 0), (i, j))\n            if steps < 0:\n                return steps\n        return steps"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q for child in (node.left, node.right) if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        for c in t:\n            if i == len(s):\n                return True\n            if c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2^n - 1 is the last number of the sequence\n        # 2. 2^n - 1 - 2^(n-1) is the first number of the sequence\n        # 3. 2^n - 1 - 2^(n-1) - 2^(n-2) is the second number of the sequence\n        # 4. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) is the third number of the sequence\n        # 5. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) is the fourth number of the sequence\n        # 6. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) is the fifth number of the sequence\n        # 7. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) - 2^(n-6) is the sixth number of the sequence\n        # 8. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) - 2^(n-6) - 2^(n-7) is the seventh number of the sequence\n        # 9. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) - 2^(n-6) - 2^(n-7) - 2^(n-8) is the eighth number of the sequence\n        # 10. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) - 2^(n-6) - 2^(n-7) - 2^(n-8) - 2^(n-9) is the ninth number of the sequence\n        # 11. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) - 2^(n-6) - 2^(n-7) - 2^(n-8) - 2^(n-9) - 2^(n-10) is the tenth number of the sequence\n        # 12. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) - 2^(n-6) - 2^(n-7) - 2^(n-8) - 2^(n-9) - 2^(n-10) - 2^(n-11) is the eleventh number of the sequence\n        # 13. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^(n-4) - 2^(n-5) - 2^(n-6) - 2^(n-7) - 2^(n-8) - 2^(n-9) - 2^(n-10) - 2^(n-11) - 2^(n-12) is the twelfth number of the sequence\n        # 14. 2^n - 1 - 2^(n-1) - 2^(n-2) - 2^(n-3) - 2^("}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(1, len(s) + 1):\n            for j in range(i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if not (node.val < right and node.val > left):\n                return False\n            \n            return valid(node.left, left, node.val) and valid(node.right, node.val, right)\n        \n        return valid(root, float('-inf'), float('inf'))"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval is larger than the last interval in the list,\n        # append the new interval to the end of the list\n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # if the new interval is smaller than the first interval in the list,\n        # insert the new interval at the beginning of the list\n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # if the new interval overlaps with the first interval in the list,\n        # merge the new interval with the first interval\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            intervals[0] = newInterval\n            return intervals\n        \n        # if the new interval overlaps with the last interval in the list,\n        # merge the new interval with the last interval\n        if newInterval[0] >= intervals[-1][0] and newInterval[1] <= intervals[-1][1]:\n            intervals[-1] = newInterval\n            return intervals\n        \n        # if the new interval overlaps with an interval in the middle of the list,\n        # merge the new interval with the interval in the middle\n        for i in range(len(intervals)):\n            if newInterval[0] <= intervals[i][0] and newInterval[1] >= intervals[i][1]:\n                intervals[i] = newInterval\n                return intervals\n            \n            # if the new interval overlaps with an interval in the middle of the list,\n            # merge the new interval with the interval in the middle\n            if newInterval[0] <= intervals[i][1] and newInterval[1] >= intervals[i][0]:\n                intervals[i] = [min(newInterval[0], intervals[i][0]), max(newInterval[1], intervals[i][1])]\n                return intervals\n            \n        # if the new interval does not overlap with any interval in the list,\n        # insert the new interval at the end of the list\n        intervals.append(newInterval)\n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def dfs(s, path, res):\n            if not s:\n                res.append(path[:])\n                return\n            for i in range(1, len(s) + 1):\n                if isPalindrome(s[:i]):\n                    dfs(s[i:], path + [s[:i]], res)\n        \n        res = []\n        dfs(s, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of all the numbers in the list\n        # 2. find the range of the list\n        # 3. find the range of the list\n        # 4. find the range of the list\n        # 5. find the range of the list\n        # 6. find the range of the list\n        # 7. find the range of the list\n        # 8. find the range of the list\n        # 9. find the range of the list\n        # 10. find the range of the list\n        # 11. find the range of the list\n        # 12. find the range of the list\n        # 13. find the range of the list\n        # 14. find the range of the list\n        # 15. find the range of the list\n        # 16. find the range of the list\n        # 17. find the range of the list\n        # 18. find the range of the list\n        # 19. find the range of the list\n        # 20. find the range of the list\n        # 21. find the range of the list\n        # 22. find the range of the list\n        # 23. find the range of the list\n        # 24. find the range of the list\n        # 25. find the range of the list\n        # 26. find the range of the list\n        # 27. find the range of the list\n        # 28. find the range of the list\n        # 29. find the range of the list\n        # 30. find the range of the list\n        # 31. find the range of the list\n        # 32. find the range of the list\n        # 33. find the range of the list\n        # 34. find the range of the list\n        # 35. find the range of the list\n        # 36. find the range of the list\n        # 37. find the range of the list\n        # 38. find the range of the list\n        # 39. find the range of the list\n        # 40. find the range of the list\n        # 41. find the range of the list\n        # 42. find the range of the list\n        # 43. find the range of the list\n        # 44. find the range of the list\n        # 45. find the range of the list\n        # 46. find the range of the list\n        # 47. find the range of the list\n        # 48. find the range of the list\n        # 49. find the range of the list\n        # 50. find the range of the list\n        # 51. find the range of the list\n        # 52. find the range of the list\n        # 53. find the range of the list\n        # 54. find the range of the list\n        # 55. find the range of the list\n        # 56. find the range of the list\n        # 57. find the range of the list\n        # 58. find the range of the list\n        # 59. find the range of the list\n        # 60. find the range of the list\n        # 61. find the range of the list\n        # 62. find the range of the list\n        # 63. find the range of the list\n        # 64. find the range of the list\n        # 65. find the range of the list\n        # 66. find the range of the list\n        # 67. find the range of the list\n        # 68. find the range of the list\n        # 69. find the range of the list\n        # 70. find the range of the list\n        # 71. find the range of the list\n        # 72. find the range of the list\n        # 73. find the range of the list\n        # 74. find the range of the list\n        # 75. find the range of the list\n        # 76. find the range of the list\n        # 77. find the range of the list\n        # 78. find the range of the list\n        # 79. find the range of the list"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 pig can test 1 bucket\n        # 2. 1 pig can test 2 buckets\n        # 3. 1 pig can test 4 buckets\n        # 4. 1 pig can test 8 buckets\n        # 5. 1 pig can test 16 buckets\n        # 6. 1 pig can test 32 buckets\n        # 7. 1 pig can test 64 buckets\n        # 8. 1 pig can test 128 buckets\n        # 9. 1 pig can test 256 buckets\n        # 10. 1 pig can test 512 buckets\n        # 11. 1 pig can test 1024 buckets\n        # 12. 1 pig can test 2048 buckets\n        # 13. 1 pig can test 4096 buckets\n        # 14. 1 pig can test 8192 buckets\n        # 15. 1 pig can test 16384 buckets\n        # 16. 1 pig can test 32768 buckets\n        # 17. 1 pig can test 65536 buckets\n        # 18. 1 pig can test 131072 buckets\n        # 19. 1 pig can test 262144 buckets\n        # 20. 1 pig can test 524288 buckets\n        # 21. 1 pig can test 1048576 buckets\n        # 22. 1 pig can test 2097152 buckets\n        # 23. 1 pig can test 4194304 buckets\n        # 24. 1 pig can test 8388608 buckets\n        # 25. 1 pig can test 16777216 buckets\n        # 26. 1 pig can test 33554432 buckets\n        # 27. 1 pig can test 67108864 buckets\n        # 28. 1 pig can test 134217728 buckets\n        # 29. 1 pig can test 268435456 buckets\n        # 30. 1 pig can test 536870912 buckets\n        # 31. 1 pig can test 1073741824 buckets\n        # 32. 1 pig can test 2147483648 buckets\n        # 33. 1 pig can test 4294967296 buckets\n        # 34. 1 pig can test 8589934592 buckets\n        # 35. 1 pig can test 17179869184 buckets\n        # 36. 1 pig can test 34359738368 buckets\n        # 37. 1 pig can test 68719476736 buckets\n        # 38. 1 pig can test 137438953472 buckets\n        # 39. 1 pig can test 274877906944 buckets\n        # 40. 1 pig can test 549755813888 buckets\n        # 41. 1 pig can test 1099511627776 buckets\n        # 42. 1 pig can test 2199023255552 buckets\n        # 43. 1 pig can test 4398046511104 buckets\n        # 44. 1 pig can test 8796093022208 buckets\n        # 45. 1 pig can test 17592186044416 buckets\n        # 46. 1 pig can test 35184372088832 buckets\n        # 47. 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        seen = set([(0, 0)])\n        res = 0\n        \n        while heap:\n            t, i, j = heapq.heappop(heap)\n            res = max(res, t)\n            if i == j == n - 1:\n                return res\n            for ni, nj in [(i, j + 1), (i + 1, j), (i, j - 1), (i - 1, j)]:\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in seen:\n                    heapq.heappush(heap, (grid[ni][nj], ni, nj))\n                    seen.add((ni, nj))"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. DP\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        # dp[i][j] = 1 if i == 1 or j == 1\n        # dp[i][j] = dp[i-1"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i + j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res) - 1):\n            res[i + 1] += res[i] // 10\n            res[i] %= 10\n            \n        res = [str(x) for x in res]\n        res = \"\".join(res[::-1]).lstrip(\"0\")\n        \n        return res or \"0\""}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointer approach\n        # 2. 1 pass\n        # 3. 2 pass\n        # 4. 3 pass\n        # 5. 4 pass\n        # 6. 5 pass\n        # 7. 6 pass\n        # 8. 7 pass\n        # 9. 8 pass\n        # 10. 9 pass\n        # 11. 10 pass\n        # 12. 11 pass\n        # 13. 12 pass\n        # 14. 13 pass\n        # 15. 14 pass\n        # 16. 15 pass\n        # 17. 16 pass\n        # 18. 17 pass\n        # 19. 18 pass\n        # 20. 19 pass\n        # 21. 20 pass\n        # 22. 21 pass\n        # 23. 22 pass\n        # 24. 23 pass\n        # 25. 24 pass\n        # 26. 25 pass\n        # 27. 26 pass\n        # 28. 27 pass\n        # 29. 28 pass\n        # 30. 29 pass\n        # 31. 30 pass\n        # 32. 31 pass\n        # 33. 32 pass\n        # 34. 33 pass\n        # 35. 34 pass\n        # 36. 35 pass\n        # 37. 36 pass\n        # 38. 37 pass\n        # 39. 38 pass\n        # 40. 39 pass\n        # 41. 40 pass\n        # 42. 41 pass\n        # 43. 42 pass\n        # 44. 43 pass\n        # 45. 44 pass\n        # 46. 45 pass\n        # 47. 46 pass\n        # 48. 47 pass\n        # 49. 48 pass\n        # 50. 49 pass\n        # 51. 50 pass\n        # 52. 51 pass\n        # 53. 52 pass\n        # 54. 53 pass\n        # 55. 54 pass\n        # 56. 55 pass\n        # 57. 56 pass\n        # 58. 57 pass\n        # 59. 58 pass\n        # 60. 59 pass\n        # 61. 60 pass\n        # 62. 61 pass\n        # 63. 62 pass\n        # 64. 63 pass\n        # 65. 64 pass\n        # 66. 65 pass\n        # 67. 66 pass\n        # 68. 67 pass\n        # 69. 68 pass\n        # 70. 69 pass\n        # 71. 70 pass\n        # 72. 71 pass\n        # 73. 72 pass\n        # 74. 73 pass\n        # 75. 74 pass\n        # 76. 75 pass\n        # 77. 76 pass\n        # 78. 77 pass\n        # 79. 78 pass\n        # 80. 79 pass\n        # 81. 80 pass\n        # 82. 81 pass\n        # 83. 82 pass\n        # 84. 83 pass\n        # 85. 84 pass\n        # 86. 85 pass\n        # 87. 86 pass\n        # 88. 87 pass\n        # 89. 88 pass\n        # 90. 89 pass\n        # 91. 90 pass\n        # 92. 91 pass\n        # 93. 92 pass\n        # 94. 93 pass\n        # 95. 9"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, nums, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(nums)):\n            if i > start and nums[i] == nums[i-1]:\n                continue\n            if nums[i] > target:\n                break\n            self.dfs(nums, target - nums[i], i + 1, path + [nums[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        while root or stack:\n            if root:\n                stack.append(root)\n                root = root.left\n            else:\n                root = stack.pop()\n                result.append(root.val)\n                root = root.right\n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            cnt = 0\n            for c in s:\n                if c == '(':\n                    cnt += 1\n                elif c == ')':\n                    if cnt > 0:\n                        cnt -= 1\n                    else:\n                        return False\n            return cnt == 0\n        \n        q = collections.deque([s])\n        seen = {s}\n        while q:\n            s = q.popleft()\n            if isValid(s):\n                return [s]\n            for i in range(len(s)):\n                if s[i] not in '()':\n                    continue\n                t = s[:i] + s[i+1:]\n                if t not in seen:\n                    q.append(t)\n                    seen.add(t)\n        return list(seen)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # Time: O(nlogk)\n        # Space: O(1)\n        \n        if not lists:\n            return None\n        \n        while len(lists) > 1:\n            mergedLists = []\n            for i in range(0, len(lists), 2):\n                l1 = lists[i]\n                l2 = lists[i + 1] if i + 1 < len(lists) else None\n                mergedLists.append(self.mergeTwoLists(l1, l2))\n            lists = mergedLists\n        return lists[0]\n    \n    def mergeTwoLists(self, l1, l2):\n        dummy = ListNode()\n        curr = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        if l1:\n            curr.next = l1\n        if l2:\n            curr.next = l2\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with k zeros\n        # 2. find the last number with k zeros\n        # 3. return the difference\n        \n        # 1. find the first number with"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a hashmap to store the reverse of each word\n        # and the index of the word\n        word_map = {word[::-1]: i for i, word in enumerate(words)}\n        \n        # create a list to store the result\n        result = []\n        \n        # iterate over the words\n        for i, word in enumerate(words):\n            # if the word is empty, add the index of the empty word\n            if not word:\n                result.append([i, i])\n            # if the word is a palindrome, add the index of the word\n            # and its reverse\n            elif word in word_map:\n                result.append([i, word_map[word]])\n            # if the word is not a palindrome, iterate over the reverse\n            # of the word and check if the reverse is a palindrome\n            else:\n                for j in range(len(word) + 1):\n                    # if the reverse of the word is a palindrome,\n                    # add the index of the word and its reverse\n                    if word[j:] in word_map:\n                        result.append([i, word_map[word[j:]]])\n                    # if the reverse of the word is not a palindrome,\n                    # add the index of the word and its reverse\n                    # but reverse the word\n                    if word[:j] in word_map:\n                        result.append([word_map[word[:j]], i])\n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        def spread(isInfected):\n            m, n = len(isInfected), len(isInfected[0])\n            res = 0\n            while True:\n                infected = set()\n                for i in range(m):\n                    for j in range(n):\n                        if isInfected[i][j] == 1:\n                            infected.add((i, j))\n                if not infected:\n                    break\n                res += 1\n                for i, j in infected:\n                    isInfected[i][j] = 2\n                for i, j in infected:\n                    for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                        ni, nj = i + di, j + dj\n                        if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 1:\n                            isInfected[i][j] = 3\n            return res\n        \n        return len(isInfected) * len(isInfected[0]) - spread(isInfected) - spread(list(zip(*isInfected)))"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        max_len = 1\n        \n        for x, y in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for j in range(i + 1):\n                if dp[j] and s[j:i + 1] in wordDict:\n                    dp[i + 1] = True\n                    break\n        \n        if dp[-1]:\n            return [s[:i + 1] for i in range(len(s)) if dp[i + 1]]\n        else:\n            return []"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(h, m):\n            if h > 11 or m > 59:\n                return\n            return \"%d:%02d\" % (h, m)\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append(get_time(h, m))\n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            row = [1]\n            for j in range(1, len(res[-1])):\n                row.append(res[-1][j] + res[-1][j-1])\n            row.append(1)\n            res.append(row)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        self.max_sum = float('-inf')\n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set()\n        ans = 0\n        while heap:\n            h, i, j = heapq.heappop(heap)\n            if (i, j) not in seen:\n                ans += h\n                seen.add((i, j))\n                if j+1 < n:\n                    heapq.heappush(heap, (max(h, heightMap[i][j+1]), i, j+1))\n                if i+1 < m:\n                    heapq.heappush(heap, (max(h, heightMap[i+1][j]), i+1, j))\n                if j > 0:\n                    heapq.heappush(heap, (max(h, heightMap[i][j-1]), i, j-1))\n                if i > 0:\n                    heapq.heappush(heap, (max(h, heightMap[i-1][j]), i-1, j))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s)\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # O(n) time, O(n) space\n        # Use a max heap to store the first half of the array\n        # Use a min heap to store the second half of the array\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is even, the median is the mean of the two maxes\n        # If the size of the two heaps is even, the median is the mean of the two min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the max of the first half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is the min of the second half\n        # If the size of the two heaps is uneven, the median is"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        if k == 0:\n            return head\n        \n        slow = fast = head\n        for i in range(k):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        fast.next = head\n        head = slow.next\n        slow.next = None\n        \n        return head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        while n % 3 == 0:\n            n = n / 3\n        \n        while n % 5 == 0:\n            n = n / 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        res = float('-inf')\n        \n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                sums.sort()\n                i = bisect.bisect_left(sums, k)\n                if i < m:\n                    res = max(res, sums[i] - k)\n                for j in range(i):\n                    res = max(res, sums[i] - sums[j])\n        \n        return res"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend / divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend) / abs(divisor))\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend) / abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend) / abs(divisor))"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(i + 1, len(cards)):\n                    a, b = cards[i], cards[j]\n                    for op in ['+', '-', '*', '/']:\n                        if op == '+':\n                            new_a, new_b = a + b, a - b\n                        elif op == '-':\n                            new_a, new_b = a - b, b - a\n                        elif op == '*':\n                            new_a, new_b = a * b, a / b\n                        else:\n                            new_a, new_b = b / a, a / b\n                        if backtrack([new_a, new_b] + cards[0:i] + cards[i + 1:], target):\n                            return True\n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return not s\n        \n        if not s.replace('*', ''):\n            return False\n        \n        if '*' not in p:\n            return s == p\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        if p[0] == s[0] or p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        for i in range(len(s)):\n            if p[1] == '*':\n                if self.isMatch(s[i:], p[2:]):\n                    return True\n            elif p[0] == '*':\n                if self.isMatch(s[i:], p[1:]):\n                    return True\n            elif p[0] == s[i]:\n                if self.isMatch(s[i+1:], p[1:]):\n                    return True\n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O(1)-space-beat-96\n        # https://leetcode.com/problems/majority-element/discuss/104008/Python-O(n)-time-O"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for from_city, to_city in sorted(tickets):\n            graph[from_city].append(to_city)\n        \n        # dfs\n        res = []\n        def dfs(node):\n            # if there is no more edges, add to the result\n            if len(graph[node]) == 0:\n                res.append(node)\n                return\n            # otherwise, iterate through all the edges\n            for i in range(len(graph[node])):\n                # remove the edge\n                tmp = graph[node][i]\n                graph[node].pop(i)\n                # dfs\n                dfs(tmp)\n                # add the edge back\n                graph[node].insert(i, tmp)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l, r = j+1, len(nums)-1\n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize the result\n        result = [[0, 0]]\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the building is the last one, add it to the result\n            if building[1] == -1:\n                if result[-1][1] < building[2]:\n                    result.append([building[0], building[2]])\n            # if the building is not the last one, add it to the result\n            else:\n                # if the building is taller than the last one, add it to the result\n                if building[2] > result[-1][1]:\n                    result.append([building[0], building[2]])\n                # if the building is shorter than the last one, remove it from the result\n                elif building[2] < result[-1][1]:\n                    result.pop()\n                    result.append([building[0], result[-1][1]])\n        \n        # return the result\n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        tens = [\"\", \"\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + (\" \" + helper(num % 10))\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [0] * (k+1)\n        dp[0] = 1\n        \n        for i in range(1, n+1):\n            for j in range(min(k, i*(i-1)//2), k+1):\n                dp[j] = (dp[j] + dp[j-i]) % MOD\n        \n        return dp[k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the node with two parents\n        # 2. find the edge that connects the two parents\n        # 3. find the node that has only one parent\n        # 4. return the edge that connects the two parents\n        \n        # 1. find the node with two parents\n        parent_map = {}\n        for edge in edges:\n            if edge[0] in parent_map:\n                parent_map[edge[0]].append(edge[1])\n            else:\n                parent_map[edge[0]] = [edge[1]]\n        \n        # 2. find the edge that connects the two parents\n        for edge in edges:\n            if edge[1] in parent_map and edge[0] in parent_map[edge[1]]:\n                return edge\n        \n        # 3. find the node that has only one parent\n        for edge in edges:\n            if len(parent_map[edge[1]]) == 1:\n                return edge"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        used = [False] * len(nums)\n        def backtrack(nums, path, res, used):\n            if len(path) == len(nums):\n                res.append(path[:])\n                return\n            for i in range(len(nums)):\n                if used[i]:\n                    continue\n                if i > 0 and nums[i] == nums[i-1] and not used[i-1]:\n                    continue\n                path.append(nums[i])\n                used[i] = True\n                backtrack(nums, path, res, used)\n                path.pop()\n                used[i] = False\n        backtrack(nums, [], res, used)\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR operation\n        ## a ^ a = 0\n        ## a ^ 0 = a\n        ## a ^ b ^ a = (a ^ a) ^ b = 0 ^ b = b\n        ## a ^ b ^ c ^ a = (a ^ a) ^ (b ^ b) ^ c = 0 ^ c = c\n        ## a ^ b ^ c ^ d = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ d = d\n        ## a ^ b ^ c ^ d ^ e = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ e = e\n        ## a ^ b ^ c ^ d ^ e ^ f = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ f = f\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ g = g\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ h = h\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ (h ^ h) ^ i = i\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ (h ^ h) ^ (i ^ i) ^ j = j\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ (h ^ h) ^ (i ^ i) ^ (j ^ j) ^ k = k\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ (h ^ h) ^ (i ^ i) ^ (j ^ j) ^ (k ^ k) ^ l = l\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ (h ^ h) ^ (i ^ i) ^ (j ^ j) ^ (k ^ k) ^ (l ^ l) ^ m = m\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ (h ^ h) ^ (i ^ i) ^ (j ^ j) ^ (k ^ k) ^ (l ^ l) ^ (m ^ m) ^ n = n\n        ## a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o = (a ^ a) ^ (b ^ b) ^ (c ^ c) ^ (d ^ d) ^ (e ^ e) ^ (f ^ f) ^ (g ^ g) ^ (h ^ h) ^ (i ^ i) ^ (j ^ j) ^ (k ^ k) ^ (l ^ l) ^ (m ^ m) ^ (n ^ n) ^ o = o\n        ## a ^"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(n):\n                for j2 in range(n):\n                    p1 = max(j1 - 1, 0)\n                    p2 = min(j1 + 1, n - 1)\n                    p3 = max(j2 - 1, 0)\n                    p4 = min(j2 + 1, n - 1)\n                    if grid[i][j1] == -1 or grid[i][j2] == -1:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2]\n                    elif j1 == j2:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1]\n                    else:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1] + grid[i][j2]\n                    if j1 != j2:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][p1][p2] + dp[i - 1][p3][p4])\n        return max(dp[n - 1][j][j] for j in range(n))"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^9 + 7\n        # 2. 10^9 + 7\n        # 3. 10^9 + 7\n        # 4. 10^9 + 7\n        # 5. 10^9 + 7\n        # 6. 10^9 + 7\n        # 7. 10^9 + 7\n        # 8. 10^9 + 7\n        # 9. 10^9 + 7\n        # 10. 10^9 + 7\n        # 11. 10^9 + 7\n        # 12. 10^9 + 7\n        # 13. 10^9 + 7\n        # 14. 10^9 + 7\n        # 15. 10^9 + 7\n        # 16. 10^9 + 7\n        # 17. 10^9 + 7\n        # 18. 10^9 + 7\n        # 19. 10^9 + 7\n        # 20. 10^9 + 7\n        # 21. 10^9 + 7\n        # 22. 10^9 + 7\n        # 23. 10^9 + 7\n        # 24. 10^9 + 7\n        # 25. 10^9 + 7\n        # 26. 10^9 + 7\n        # 27. 10^9 + 7\n        # 28. 10^9 + 7\n        # 29. 10^9 + 7\n        # 30. 10^9 + 7\n        # 31. 10^9 + 7\n        # 32. 10^9 + 7\n        # 33. 10^9 + 7\n        # 34. 10^9 + 7\n        # 35. 10^9 + 7\n        # 36. 10^9 + 7\n        # 37. 10^9 + 7\n        # 38. 10^9 + 7\n        # 39. 10^9 + 7\n        # 40. 10^9 + 7\n        # 41. 10^9 + 7\n        # 42. 10^9 + 7\n        # 43. 10^9 + 7\n        # 44. 10^9 + 7\n        # 45. 10^9 + 7\n        # 46. 10^9 + 7\n        # 47. 10^9 + 7\n        # 48. 10^9 + 7\n        # 49. 10^9 + 7\n        # 50. 10^9 + 7\n        # 51. 10^9 + 7\n        # 52. 10^9 + 7\n        # 53. 10^9 + 7\n        # 54. 10^9 + 7\n        # 55. 10^9 + 7\n        # 56. 10^9 + 7\n        # 57. 10^9 + 7\n        # 58. 10^9 + 7\n        # 59. 10^9 + 7\n        # 60. 10^9 + 7\n        # 61. 10^9 + 7\n        # 62. 10^9 + 7\n        # 63. 10^9 + 7\n        # 64. 10^9 + 7\n        # 65. 10^9 + 7\n        # 66. 10^9 + 7\n        # 67. 10^9 + 7\n        # 68. 10^9 + 7\n        # 69. 10^9 + 7\n        # 70. 10^9 + 7\n        # 71. 10^9 + 7\n        # 72. 10^9 + 7\n        # 73. 10^9 + 7\n        # 74. 10^9"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        def get_next(n):\n            total_sum = 0\n            while n > 0:\n                n, digit = divmod(n, 10)\n                total_sum += digit ** 2\n            return total_sum\n        \n        slow = n\n        fast = get_next(n)\n        while fast != 1 and fast != slow:\n            slow = get_next(slow)\n            fast = get_next(get_next(fast))\n        return fast == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        # O(1) space\n        \n        # binary search\n        # O(log n) runtime\n        #"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) == 1:\n        #     return True\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_jump = nums[0]\n        \n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        \n        # return True\n        \n        # O(n) time and O(1) space\n        last_pos = len(nums) - 1\n        \n        for i in range(len(nums) - 1, -1, -1):\n            if i + nums[i] >= last_pos:\n                last_pos = i\n        \n        return last_pos == 0"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        \n        prev = '1'\n        for i in range(2, n+1):\n            curr = ''\n            count = 1\n            for j in range(1, len(prev)):\n                if prev[j] == prev[j-1]:\n                    count += 1\n                else:\n                    curr += str(count) + prev[j-1]\n                    count = 1\n            curr += str(count) + prev[-1]\n            prev = curr\n        return prev"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max sum of the subarray\n        # if the sum is too big, then we need to decrease the sum\n        # if the sum is too small, then we need to increase the sum\n        # we can use binary search to find the max sum\n        # we can use binary search to find the min sum\n        # we can use binary search to find the mid sum\n        \n        # find the max sum\n        max_sum = sum(nums)\n        min_sum = max(nums)\n        \n        while min_sum < max_sum:\n            mid_sum = (min_sum + max_sum) // 2\n            if self.is_valid(nums, k, mid_sum):\n                max_sum = mid_sum\n            else:\n                min_sum = mid_sum + 1\n        \n        return min_sum\n    \n    def is_valid(self, nums, k, target):\n        subarray_count = 1\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum + num > target:\n                subarray_count += 1\n                curr_sum = num\n            else:\n                curr_sum += num\n        \n        return subarray_count <= k"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r = m\n        pivot = l\n        \n        # find the target\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[(m + pivot) % len(nums)] == target:\n                return (m + pivot) % len(nums)\n            elif nums[(m + pivot) % len(nums)] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        phone = {'2':'abc', '3':'def', '4':'ghi', '5':'jkl', '6':'mno', '7':'pqrs', '8':'tuv', '9':'wxyz'}\n        res = ['']\n        \n        for digit in digits:\n            tmp = []\n            for letter in phone[digit]:\n                for item in res:\n                    tmp.append(item + letter)\n            res = tmp\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n    \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path)\n            return\n        for i in range(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. get the length of n\n        length = len(n)\n        \n        # 2. get the number of digits\n        digits = length // 2\n        \n        # 3. get the left and right part of n\n        left = n[:digits]\n        right = n[digits:]\n        \n        # 4. get the possible candidates\n        candidates = [int(left), int(right)]\n        candidates.append(int(left) - 1)\n        candidates.append(int(left) + 1)\n        \n        # 5. get the closest palindrome\n        closest = min(candidates, key=lambda x: abs(x - int(n)))\n        \n        # 6. return the closest palindrome\n        return str(closest)"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n-1, 0, n-1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            \n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n            \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 pointer to max product\n        # 3. 1 pointer to min product\n        # 4. 1 pointer to max product\n        # 5. 1 pointer to min product\n        # 6. 1 pointer to max product\n        # 7. 1 pointer to min product\n        # 8. 1 pointer to max product\n        # 9. 1 pointer to min product\n        # 10. 1 pointer to max product\n        # 11. 1 pointer to min product\n        # 12. 1 pointer to max product\n        # 13. 1 pointer to min product\n        # 14. 1 pointer to max product\n        # 15. 1 pointer to min product\n        # 16. 1 pointer to max product\n        # 17. 1 pointer to min product\n        # 18. 1 pointer to max product\n        # 19. 1 pointer to min product\n        # 20. 1 pointer to max product\n        # 21. 1 pointer to min product\n        # 22. 1 pointer to max product\n        # 23. 1 pointer to min product\n        # 24. 1 pointer to max product\n        # 25. 1 pointer to min product\n        # 26. 1 pointer to max product\n        # 27. 1 pointer to min product\n        # 28. 1 pointer to max product\n        # 29. 1 pointer to min product\n        # 30. 1 pointer to max product\n        # 31. 1 pointer to min product\n        # 32. 1 pointer to max product\n        # 33. 1 pointer to min product\n        # 34. 1 pointer to max product\n        # 35. 1 pointer to min product\n        # 36. 1 pointer to max product\n        # 37. 1 pointer to min product\n        # 38. 1 pointer to max product\n        # 39. 1 pointer to min product\n        # 40. 1 pointer to max product\n        # 41. 1 pointer to min product\n        # 42. 1 pointer to max product\n        # 43. 1 pointer to min product\n        # 44. 1 pointer to max product\n        # 45. 1 pointer to min product\n        # 46. 1 pointer to max product\n        # 47. 1 pointer to min product\n        # 48. 1 pointer to max product\n        # 49. 1 pointer to min product\n        # 50. 1 pointer to max product\n        # 51. 1 pointer to min product\n        # 52. 1 pointer to max product\n        # 53. 1 pointer to min product\n        # 54. 1 pointer to max product\n        # 55. 1 pointer to min product\n        # 56. 1 pointer to max product\n        # 57. 1 pointer to min product\n        # 58. 1 pointer to max product\n        # 59. 1 pointer to min product\n        # 60. 1 pointer to max product\n        # 61. 1 pointer to min product\n        # 62. 1 pointer to max product\n        # 63. 1 pointer to min product\n        # 64. 1 pointer to max product\n        # 65. 1 pointer to min product\n        # 66. 1 pointer to max product\n        # 67. 1 pointer to min product\n        # 68. 1 pointer to max product\n        # 69. 1 pointer to min product\n        # 70. 1 pointer to max product\n        # 71. 1 pointer to min product\n        # 72. 1 pointer to max product\n        # 73. 1 pointer to min product\n        # 74. 1 pointer to max product\n        # 75. 1 pointer to min product\n        # 76. 1 pointer to max product\n        # 77. 1 pointer to min product\n        # 78. 1 pointer to max product\n        # 79. 1 pointer to min product\n        # 80."}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score list\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a hashmap to store the score and its index\n        score_map = {}\n        for i, s in enumerate(score_sorted):\n            score_map[s] = i\n        \n        # create a list of the rank\n        rank = [None] * len(score)\n        for i, s in enumerate(score):\n            rank[score_map[s]] = str(i + 1)\n        \n        # return the rank list\n        return rank"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = collections.Counter(words)\n        res = []\n        \n        for i in range(word_len):\n            left = i\n            word_dict_copy = word_dict.copy()\n            for j in range(i, len(s) - word_len + 1, word_len):\n                word = s[j:j+word_len]\n                if word in word_dict_copy:\n                    word_dict_copy[word] -= 1\n                    if word_dict_copy[word] == 0:\n                        del word_dict_copy[word]\n                else:\n                    left = j + word_len\n                    word_dict_copy = word_dict.copy()\n                if not word_dict_copy:\n                    res.append(left)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        res = 1\n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                res += 1\n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next.val < curr.next.val:\n                    prev = prev.next\n                curr.next, curr.next.next, prev.next = curr.next.next, curr, prev.next\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l, r = i+1, len(nums)-1\n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                if s > 0:\n                    r -= 1\n                elif s < 0:\n                    l += 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    l += 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i, j = left, mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            nums[left:right + 1] = sorted(nums[left:right + 1])\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(i) for i in version1.split('.')]\n        v2 = [int(i) for i in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                if v1[i] > v2[i]:\n                    return 1\n                elif v1[i] < v2[i]:\n                    return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end date\n        courses.sort(key=lambda x: x[1])\n        \n        # greedy\n        # max heap\n        heap = []\n        \n        # sum of durations\n        total = 0\n        \n        for duration, end in courses:\n            # add to heap\n            heapq.heappush(heap, duration)\n            \n            # add duration to total\n            total += duration\n            \n            # if total exceeds end date, remove from heap\n            if total > end:\n                total -= heapq.heappop(heap)\n        \n        return len(heap)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        while True:\n            kth = prev\n            for i in range(k):\n                if not kth:\n                    break\n                kth = kth.next\n            if not kth:\n                break\n            start = prev.next\n            end = kth.next\n            for i in range(k - 1):\n                tmp = start.next\n                start.next = end.next\n                end.next = end.next.next\n                start.next.next = tmp\n            prev.next = kth\n            prev = start\n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        return s in (s+s)[1:-1]"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. use a hashmap to store the frequency of each element\n        # 2. iterate through the hashmap and return the element with frequency 1\n        \n        hashmap = {}\n        for num in nums:\n            if num not in hashmap:\n                hashmap[num] = 1\n            else:\n                hashmap[num] += 1\n        \n        for key, value in hashmap.items():\n            if value == 1:\n                return key"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict of all the letters in the target\n        # 2. build a dict of all the letters in the stickers\n        # 3. build a dict of all the letters in the stickers\n        # 4. build a dict of all the letters in the stickers\n        # 5. build a dict of all the letters in the stickers\n        # 6. build a dict of all the letters in the stickers\n        # 7. build a dict of all the letters in the stickers\n        # 8. build a dict of all the letters in the stickers\n        # 9. build a dict of all the letters in the stickers\n        # 10. build a dict of all the letters in the stickers\n        # 11. build a dict of all the letters in the stickers\n        # 12. build a dict of all the letters in the stickers\n        # 13. build a dict of all the letters in the stickers\n        # 14. build a dict of all the letters in the stickers\n        # 15. build a dict of all the letters in the stickers\n        # 16. build a dict of all the letters in the stickers\n        # 17. build a dict of all the letters in the stickers\n        # 18. build a dict of all the letters in the stickers\n        # 19. build a dict of all the letters in the stickers\n        # 20. build a dict of all the letters in the stickers\n        # 21. build a dict of all the letters in the stickers\n        # 22. build a dict of all the letters in the stickers\n        # 23. build a dict of all the letters in the stickers\n        # 24. build a dict of all the letters in the stickers\n        # 25. build a dict of all the letters in the stickers\n        # 26. build a dict of all the letters in the stickers\n        # 27. build a dict of all the letters in the stickers\n        # 28. build a dict of all the letters in the stickers\n        # 29. build a dict of all the letters in the stickers\n        # 30. build a dict of all the letters in the stickers\n        # 31. build a dict of all the letters in the stickers\n        # 32. build a dict of all the letters in the stickers\n        # 33. build a dict of all the letters in the stickers\n        # 34. build a dict of all the letters in the stickers\n        # 35. build a dict of all the letters in the stickers\n        # 36. build a dict of all the letters in the stickers\n        # 37. build a dict of all the letters in the stickers\n        # 38. build a dict of all the letters in the stickers\n        # 39. build a dict of all the letters in the stickers\n        # 40. build a dict of all the letters in the stickers\n        # 41. build a dict of all the letters in the stickers\n        # 42. build a dict of all the letters in the stickers\n        # 43. build a dict of all the letters in the stickers\n        # 44. build a dict of all the letters in the stickers\n        # 45. build a dict of all the letters in the stickers\n        # 46. build a dict of all the letters in the stickers\n        # 47. build a dict of all the letters in the stickers\n        # 48. build a dict of all the letters in the stickers\n        # 49. build a dict of all the letters in the stickers\n        # 50. build a dict of all the letters in the stickers\n        # 51. build a dict of all the letters in the stickers\n        # 52. build a dict of all the letters in the stickers\n        # 53. build a dict of all the letters in the stickers\n        # 54. build a dict of all the letters in the stickers\n        # 55. build a dict of all the letters in the stickers\n        # 56. build a dict of all the letters in the stickers\n        # 57. build a dict of all the letters in the stickers\n        # 58. build a"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            for j in range(i + 1, n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j - 1]\n                else:\n                    dp[i][j] = min(dp[i][j - 1] + 1, dp[j][j])\n                    for k in range(i, j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k + 1][j])\n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        result = 0\n        for i in range(len(s)):\n            if i < len(s)-1 and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = []\n        res = []\n        \n        for i in range(len(nums)):\n            while q and q[0] <= i - k:\n                q.pop(0)\n            while q and nums[q[-1]] < nums[i]:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # merge nums1 and nums2 into nums\n        nums = nums1 + nums2\n        nums.sort()\n        \n        # find median\n        if len(nums) % 2 == 1:\n            return nums[len(nums) // 2]\n        else:\n            return (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     mid = (l + r) // 2\n        #     if nums[mid] > nums[r]:\n        #         l = mid + 1\n        #     else:\n        #         r = mid\n        # return nums[l]\n        \n        # linear search\n        return min(nums)"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            if not root.left and not root.right and targetSum == root.val:\n                return [[root.val]]\n            left = dfs(root.left, targetSum - root.val, path + [root.val])\n            right = dfs(root.right, targetSum - root.val, path + [root.val])\n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area ** 0.5)\n        # 2. 2 * area ** 0.5\n        # 3. 2 * math.sqrt(area)\n        # 4. 2 * area ** 0.5\n        # 5. 2 * math.sqrt(area)\n        # 6. 2 * area ** 0.5\n        # 7. 2 * math.sqrt(area)\n        # 8. 2 * area ** 0.5\n        # 9. 2 * math.sqrt(area)\n        # 10. 2 * area ** 0.5\n        # 11. 2 * math.sqrt(area)\n        # 12. 2 * area ** 0.5\n        # 13. 2 * math.sqrt(area)\n        # 14. 2 * area ** 0.5\n        # 15. 2 * math.sqrt(area)\n        # 16. 2 * area ** 0.5\n        # 17. 2 * math.sqrt(area)\n        # 18. 2 * area ** 0.5\n        # 19. 2 * math.sqrt(area)\n        # 20. 2 * area ** 0.5\n        # 21. 2 * math.sqrt(area)\n        # 22. 2 * area ** 0.5\n        # 23. 2 * math.sqrt(area)\n        # 24. 2 * area ** 0.5\n        # 25. 2 * math.sqrt(area)\n        # 26. 2 * area ** 0.5\n        # 27. 2 * math.sqrt(area)\n        # 28. 2 * area ** 0.5\n        # 29. 2 * math.sqrt(area)\n        # 30. 2 * area ** 0.5\n        # 31. 2 * math.sqrt(area)\n        # 32. 2 * area ** 0.5\n        # 33. 2 * math.sqrt(area)\n        # 34. 2 * area ** 0.5\n        # 35. 2 * math.sqrt(area)\n        # 36. 2 * area ** 0.5\n        # 37. 2 * math.sqrt(area)\n        # 38. 2 * area ** 0.5\n        # 39. 2 * math.sqrt(area)\n        # 40. 2 * area ** 0.5\n        # 41. 2 * math.sqrt(area)\n        # 42. 2 * area ** 0.5\n        # 43. 2 * math.sqrt(area)\n        # 44. 2 * area ** 0.5\n        # 45. 2 * math.sqrt(area)\n        # 46. 2 * area ** 0.5\n        # 47. 2 * math.sqrt(area)\n        # 48. 2 * area ** 0.5\n        # 49. 2 * math.sqrt(area)\n        # 50. 2 * area ** 0.5\n        # 51. 2 * math.sqrt(area)\n        # 52. 2 * area ** 0.5\n        # 53. 2 * math.sqrt(area)\n        # 54. 2 * area ** 0.5\n        # 55. 2 * math.sqrt(area)\n        # 56. 2 * area ** 0.5\n        # 57. 2 * math.sqrt(area)\n        # 58. 2 * area ** 0.5\n        # 59. 2 * math.sqrt(area)\n        # 60. 2 * area ** 0.5\n        # 61. 2 * math.sqrt(area)\n        # 62. 2 * area ** 0.5\n        # 63. 2 * math.sqrt(area)\n        # 64. 2 * area ** 0.5\n        # 65."}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # build a queue and a set\n        queue = collections.deque([beginWord])\n        visited = set([beginWord])\n        \n        # build a dict to store the shortest path\n        shortest_path = {beginWord: [beginWord]}\n        \n        # BFS\n        while queue:\n            curr_word = queue.popleft()\n            for i in range(len(curr_word)):\n                for j in range(ord('a'), ord('z') + 1):\n                    neighbor = curr_word[:i] + chr(j) + curr_word[i+1:]\n                    if neighbor in graph:\n                        for word in graph[neighbor]:\n                            if word == endWord:\n                                return shortest_path[curr_word] + [word]\n                            if word not in shortest_path:\n                                shortest_path[word] = shortest_path[curr_word] + [word]\n                                queue.append(word)\n                                visited.add(word)\n        return []"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n / 2\n        \n        return n == 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        for i in range(len(nums)):\n            if i == 0 or nums[i] != nums[i-1]:\n                res += [nums[i]] + r for r in res]\n            else:\n                res += [nums[i]]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc624\ub978\ucabd\uc5d0\uc11c \uc67c\ucabd\uc73c\ub85c \ud0d0\uc0c9\ud558\uba70 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 3. \uc624\ub978\ucabd \ub05d\uc5d0 \ub3c4\ub2ec\ud558\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c\ub2e4.\n        # 4. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud0d0\uc0c9\ud558\uba70 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 5. \uc67c\ucabd \ub05d\uc5d0 \ub3c4\ub2ec\ud558\uba74 \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \ubaa8\ub450 \uc81c\uac70\ud55c\ub2e4.\n        # 6. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud0d0\uc0c9\ud558\uba70 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 7. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud0d0\uc0c9\ud558\uba70 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 8. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud0d0\uc0c9\ud558\uba70 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 9. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud0d0\uc0c9\ud558\uba70 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4.\n        # 10. \uc2a4\ud0dd\uc5d0 \uc800\uc7a5\ub41c \uac12\uc744 \uae30\uc900\uc73c\ub85c \uc67c\ucabd\uc5d0\uc11c \uc624\ub978\ucabd\uc73c\ub85c \ud0d0\uc0c9\ud558\uba70 \ucd5c\ub300 \ub113\uc774\ub97c \uad6c\ud55c\ub2e4."}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min, y_min, x_max, y_max = min(x_min, x1), min(y_min, y1), max(x_max, x2), max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if (x_min, y_min) not in rectangles or (x_max, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 17576\n        # 26^4 = 43980465112\n}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        cur_sum = 0\n        \n        for num in nums:\n            if cur_sum < 0:\n                cur_sum = num\n            else:\n                cur_sum += num\n            max_sum = max(max_sum, cur_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_str = \"\"\n        for row in board:\n            for num in row:\n                board_str += str(num)\n        \n        # convert board_str to a 1D array\n        board_arr = [int(x) for x in board_str]\n        \n        # convert board_arr to a 2D array\n        board_2d = []\n        for i in range(0, len(board_arr), 3):\n            board_2d.append(board_arr[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0, len(board_1d), 3):\n            board_2d.append(board_1d[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0, len(board_1d), 3):\n            board_2d.append(board_1d[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0, len(board_1d), 3):\n            board_2d.append(board_1d[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0, len(board_1d), 3):\n            board_2d.append(board_1d[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0, len(board_1d), 3):\n            board_2d.append(board_1d[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0, len(board_1d), 3):\n            board_2d.append(board_1d[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0, len(board_1d), 3):\n            board_2d.append(board_1d[i:i+3])\n        \n        # convert board_2d to a 1D array\n        board_1d = []\n        for row in board_2d:\n            for num in row:\n                board_1d.append(num)\n        \n        # convert board_1d to a 2D array\n        board_2d = []\n        for i in range(0,"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            s_char = s[i]\n            t_char = t[i]\n            \n            if s_char in s_to_t and s_to_t[s_char] != t_char:\n                return False\n            \n            if t_char in t_to_s and t_to_s[t_char] != s_char:\n                return False\n            \n            s_to_t[s_char] = t_char\n            t_to_s[t_char] = s_char\n            \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r = m\n        pivot = l\n        \n        # find the target\n        l, r = 0, len(nums) - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[(m + pivot) % len(nums)] == target:\n                return True\n            if nums[(m + pivot) % len(nums)] < target:\n                l = m + 1\n            else:\n                r = m - 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                elif i == 0 and j == 0:\n                    dp[i][j] = 1\n                elif i == 0:\n                    dp[i][j] = dp[i][j-1]\n                elif j == 0:\n                    dp[i][j] = dp[i-1][j]\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = float('inf')\n        \n        for i in range(len(nums)-2):\n            left, right = i+1, len(nums)-1\n            \n            while left < right:\n                curr_sum = nums[i] + nums[left] + nums[right]\n                \n                if curr_sum == target:\n                    return curr_sum\n                \n                if abs(curr_sum - target) < abs(closest - target):\n                    closest = curr_sum\n                \n                if curr_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i, j = 0, 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root):\n            if root:\n                yield from inorder(root.left)\n                yield root.val\n                yield from inorder(root.right)\n        \n        prev = None\n        min_diff = float('inf')\n        for val in inorder(root):\n            if prev:\n                min_diff = min(min_diff, val - prev)\n            prev = val\n        return min_diff"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.curr_count = 0\n        self.max_val = None\n        self.res = []\n        \n        self.inorder(root)\n        \n        return self.res\n        \n    def inorder(self, root):\n        if not root:\n            return\n        \n        self.inorder(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n            \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.max_val = root.val\n            self.res = [self.max_val]\n        elif self.curr_count == self.max_count:\n            self.res.append(root.val)\n            \n        self.prev_val = root.val\n        \n        self.inorder(root.right)"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check length\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        if len(password) > 20:\n            return max(20 - len(password), 3)\n        \n        # 2. check for repeating characters\n        # 2.1 check for 3 repeating characters in a row\n        # 2.2 check for 2 repeating characters in a row\n        # 2.3 check for 1 repeating character in a row\n        # 2.4 check for 0 repeating characters in a row\n        # 2.5 check for 0 repeating characters\n        # 2.6 check for 1 repeating character\n        # 2.7 check for 2 repeating characters\n        # 2.8 check for 3 repeating characters\n        # 2.9 check for 4 repeating characters\n        # 2.10 check for 5 repeating characters\n        # 2.11 check for 6 repeating characters\n        # 2.12 check for 7 repeating characters\n        # 2.13 check for 8 repeating characters\n        # 2.14 check for 9 repeating characters\n        # 2.15 check for 10 repeating characters\n        # 2.16 check for 11 repeating characters\n        # 2.17 check for 12 repeating characters\n        # 2.18 check for 13 repeating characters\n        # 2.19 check for 14 repeating characters\n        # 2.20 check for 15 repeating characters\n        # 2.21 check for 16 repeating characters\n        # 2.22 check for 17 repeating characters\n        # 2.23 check for 18 repeating characters\n        # 2.24 check for 19 repeating characters\n        # 2.25 check for 20 repeating characters\n        # 2.26 check for 21 repeating characters\n        # 2.27 check for 22 repeating characters\n        # 2.28 check for 23 repeating characters\n        # 2.29 check for 24 repeating characters\n        # 2.30 check for 25 repeating characters\n        # 2.31 check for 26 repeating characters\n        # 2.32 check for 27 repeating characters\n        # 2.33 check for 28 repeating characters\n        # 2.34 check for 29 repeating characters\n        # 2.35 check for 30 repeating characters\n        # 2.36 check for 31 repeating characters\n        # 2.37 check for 32 repeating characters\n        # 2.38 check for 33 repeating characters\n        # 2.39 check for 34 repeating characters\n        # 2.40 check for 35 repeating characters\n        # 2.41 check for 36 repeating characters\n        # 2.42 check for 37 repeating characters\n        # 2.43 check for 38 repeating characters\n        # 2.44 check for 39 repeating characters\n        # 2.45 check for 40 repeating characters\n        # 2.46 check for 41 repeating characters\n        # 2.47 check for 42 repeating characters\n        # 2.48 check for 43 repeating characters\n        # 2.49 check for 44 repeating characters\n        # 2.50 check for 45 repeating characters\n        # 2.51 check for 46 repeating characters\n        # 2.52 check for 47 repeating characters\n        # 2.53 check for 48 repeating characters\n        # 2.54 check for 49 repeating characters\n        # 2.55 check for 50 repeating characters\n        \n        # 3. check for lowercase, uppercase, digit\n        # 3.1 check for lowercase\n        # 3.2 check for uppercase\n        # 3.3 check for digit\n        # 3.4 check for lowercase, uppercase, digit\n        # 3.5 check for lowercase, digit\n        # 3.6 check for uppercase, digit\n        # 3.7 check for digit\n        # 3.8 check for lowercase, digit\n        # 3.9 check for uppercase, digit\n        # 3.10 check for digit\n        #"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5\n        # 10 = 2 * 5\n        # 2 = 5\n        # 5 = 5"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [''] * numRows\n        currRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[currRow] += c\n            if currRow == 0 or currRow == numRows - 1:\n                goingDown = not goingDown\n            currRow += 1 if goingDown else -1\n        \n        return ''.join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 pointers\n        # 3. 2 pointers\n        # 4. 2 pointers\n        # 5. 2 pointers\n        # 6. 2 pointers\n        # 7. 2 pointers\n        # 8. 2 pointers\n        # 9. 2 pointers\n        # 10. 2 pointers\n        # 11. 2 pointers\n        # 12. 2 pointers\n        # 13. 2 pointers\n        # 14. 2 pointers\n        # 15. 2 pointers\n        # 16. 2 pointers\n        # 17. 2 pointers\n        # 18. 2 pointers\n        # 19. 2 pointers\n        # 20. 2 pointers\n        # 21. 2 pointers\n        # 22. 2 pointers\n        # 23. 2 pointers\n        # 24. 2 pointers\n        # 25. 2 pointers\n        # 26. 2 pointers\n        # 27. 2 pointers\n        # 28. 2 pointers\n        # 29. 2 pointers\n        # 30. 2 pointers\n        # 31. 2 pointers\n        # 32. 2 pointers\n        # 33. 2 pointers\n        # 34. 2 pointers\n        # 35. 2 pointers\n        # 36. 2 pointers\n        # 37. 2 pointers\n        # 38. 2 pointers\n        # 39. 2 pointers\n        # 40. 2 pointers\n        # 41. 2 pointers\n        # 42. 2 pointers\n        # 43. 2 pointers\n        # 44. 2 pointers\n        # 45. 2 pointers\n        # 46. 2 pointers\n        # 47. 2 pointers\n        # 48. 2 pointers\n        # 49. 2 pointers\n        # 50. 2 pointers\n        # 51. 2 pointers\n        # 52. 2 pointers\n        # 53. 2 pointers\n        # 54. 2 pointers\n        # 55. 2 pointers\n        # 56. 2 pointers\n        # 57. 2 pointers\n        # 58. 2 pointers\n        # 59. 2 pointers\n        # 60. 2 pointers\n        # 61. 2 pointers\n        # 62. 2 pointers\n        # 63. 2 pointers\n        # 64. 2 pointers\n        # 65. 2 pointers\n        # 66. 2 pointers\n        # 67. 2 pointers\n        # 68. 2 pointers\n        # 69. 2 pointers\n        # 70. 2 pointers\n        # 71. 2 pointers\n        # 72. 2 pointers\n        # 73. 2 pointers\n        # 74. 2 pointers\n        # 75. 2 pointers\n        # 76. 2 pointers\n        # 77. 2 pointers\n        # 78. 2 pointers\n        # 79. 2 pointers\n        # 80. 2 pointers\n        # 81. 2 pointers\n        # 82. 2 pointers\n        # 83. 2 pointers\n        # 84. 2 pointers\n        # 85. 2 pointers\n        # 86. 2 pointers"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. create a list of all numbers from 1 to n\n        ## 2. iterate through the list and mark the number as negative\n        ## 3. iterate through the list again and return the numbers that are positive\n        \n        n = len(nums)\n        for i in range(n):\n            index = abs(nums[i]) - 1\n            if nums[index] > 0:\n                nums[index] *= -1\n        \n        return [i + 1 for i in range(n) if nums[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. for each element, find the number of smaller elements to the right\n        # 3. use binary search to find the number of smaller elements to the left\n        # 4. use binary search to find the number of smaller elements to the right\n        # 5. use binary search to find the number of smaller elements to the left\n        # 6. use binary search to find the number of smaller elements to the right\n        # 7. use binary search to find the number of smaller elements to the left\n        # 8. use binary search to find the number of smaller elements to the right\n        # 9. use binary search to find the number of smaller elements to the left\n        # 10. use binary search to find the number of smaller elements to the right\n        # 11. use binary search to find the number of smaller elements to the left\n        # 12. use binary search to find the number of smaller elements to the right\n        # 13. use binary search to find the number of smaller elements to the left\n        # 14. use binary search to find the number of smaller elements to the right\n        # 15. use binary search to find the number of smaller elements to the left\n        # 16. use binary search to find the number of smaller elements to the right\n        # 17. use binary search to find the number of smaller elements to the left\n        # 18. use binary search to find the number of smaller elements to the right\n        # 19. use binary search to find the number of smaller elements to the left\n        # 20. use binary search to find the number of smaller elements to the right\n        # 21. use binary search to find the number of smaller elements to the left\n        # 22. use binary search to find the number of smaller elements to the right\n        # 23. use binary search to find the number of smaller elements to the left\n        # 24. use binary search to find the number of smaller elements to the right\n        # 25. use binary search to find the number of smaller elements to the left\n        # 26. use binary search to find the number of smaller elements to the right\n        # 27. use binary search to find the number of smaller elements to the left\n        # 28. use binary search to find the number of smaller elements to the right\n        # 29. use binary search to find the number of smaller elements to the left\n        # 30. use binary search to find the number of smaller elements to the right\n        # 31. use binary search to find the number of smaller elements to the left\n        # 32. use binary search to find the number of smaller elements to the right\n        # 33. use binary search to find the number of smaller elements to the left\n        # 34. use binary search to find the number of smaller elements to the right\n        # 35. use binary search to find the number of smaller elements to the left\n        # 36. use binary search to find the number of smaller elements to the right\n        # 37. use binary search to find the number of smaller elements to the left\n        # 38. use binary search to find the number of smaller elements to the right\n        # 39. use binary search to find the number of smaller elements to the left\n        # 40. use binary search to find the number of smaller elements to the right\n        # 41. use binary search to find the number of smaller elements to the left\n        # 42. use binary search to find the number of smaller elements to the right\n        # 43. use binary search to find the number of smaller elements to the left\n        # 44. use binary search to find the number of smaller elements to the right\n        # 45. use binary search to find the number of smaller elements to the left\n        # 46. use binary search to find the number of smaller elements to the right\n        # 47. use binary search to find the number of smaller elements to the left\n        # 48. use binary search to find the number of smaller elements to the right\n        # 49. use binary search to find the number of smaller elements to the left\n        # 50. use binary search to find the number of smaller elements to the right\n        # 51. use binary search to find the number of smaller elements to the left\n        # 52. use binary search to find the number of smaller elements to the right\n        #"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # max end\n        max_end = -1\n        \n        # min end\n        min_end = -1\n        \n        # count\n        count = 0\n        \n        for interval in intervals:\n            if interval[0] > max_end:\n                max_end = interval[1]\n                min_end = interval[1]\n                count += 2\n            elif interval[0] > min_end:\n                min_end = max_end\n                max_end = interval[1]\n                count += 1\n            elif interval[1] > max_end:\n                max_end = interval[1]\n                count += 1\n        \n        return count"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.right)\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n /= 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        left = self.invertTree(root.left)\n        right = self.invertTree(root.right)\n        \n        root.left = right\n        root.right = left\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if not nums:\n            return 0\n        \n        # initialize\n        patches = 0\n        i = 0\n        num_set = set()\n        \n        # iterate through nums\n        while i < len(nums):\n            # if nums[i] is not in num_set, add it to num_set\n            if nums[i] not in num_set:\n                num_set.add(nums[i])\n            else:\n                # if nums[i] is in num_set, add 1 to patches\n                patches += 1\n                # add nums[i] to num_set\n                num_set.add(nums[i])\n            # add nums[i] to num_set\n            num_set.add(nums[i])\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 1)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 2)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 3)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 4)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 5)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 6)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 7)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 8)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 9)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 10)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 11)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 12)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 13)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 14)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 15)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 16)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 17)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 18)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 19)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 20)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 21)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 22)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 23)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 24)\n            # add nums[i] to num_set\n            num_set.add(nums[i] + patches + 25)\n            # add nums[i] to num_set"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. dp\n        # 4. greedy\n        # 5. math\n        # 6. stack\n        # 7. dp\n        # 8. math\n        # 9. dp\n        # 10. math\n        # 11. dp\n        # 12. math\n        # 13. dp\n        # 14. math\n        # 15. dp\n        # 16. math\n        # 17. dp\n        # 18. math\n        # 19. dp\n        # 20. math\n        # 21. dp\n        # 22. math\n        # 23. dp\n        # 24. math\n        # 25. dp\n        # 26. math\n        # 27. dp\n        # 28. math\n        # 29. dp\n        # 30. math\n        # 31. dp\n        # 32. math\n        # 33. dp\n        # 34. math\n        # 35. dp\n        # 36. math\n        # 37. dp\n        # 38. math\n        # 39. dp\n        # 40. math\n        # 41. dp\n        # 42. math\n        # 43. dp\n        # 44. math\n        # 45. dp\n        # 46. math\n        # 47. dp\n        # 48. math\n        # 49. dp\n        # 50. math\n        # 51. dp\n        # 52. math\n        # 53. dp\n        # 54. math\n        # 55. dp\n        # 56. math\n        # 57. dp\n        # 58. math\n        # 59. dp\n        # 60. math\n        # 61. dp\n        # 62. math\n        # 63. dp\n        # 64. math\n        # 65. dp\n        # 66. math\n        # 67. dp\n        # 68. math\n        # 69. dp\n        # 70. math\n        # 71. dp\n        # 72. math\n        # 73. dp\n        # 74. math\n        # 75. dp\n        # 76. math\n        # 77. dp\n        # 78. math\n        # 79. dp\n        # 80. math\n        # 81. dp\n        # 82. math\n        # 83. dp\n        # 84. math\n        # 85. dp\n        # 86. math\n        # 87. dp\n        # 88. math\n        # 89. dp\n        # 90. math\n        # 91. dp\n        # 92. math\n        # 93. dp\n        # 94. math\n        # 95. dp\n        # 96. math\n        # 97. dp\n        # 98. math\n        # 99. dp\n        # 100. math\n        # 101. dp\n        # 102. math\n        # 103. dp\n        # 104. math\n        # 105. dp\n        # 106. math\n        # 107. dp\n        # 108. math\n        # 109. dp\n        # 110. math\n        # 111. dp\n        # 112. math\n        # 113. dp\n        # 114. math\n        # 115. dp\n        # 116. math\n        # 117. dp\n        # 118. math\n        # 119. d"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 == denominator < 0:\n            sign = \"\"\n        elif numerator < 0:\n            sign = \"-\"\n        else:\n            sign = \"+\"\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        \n        quotient, remainder = divmod(numerator, denominator)\n        if remainder == 0:\n            return sign + str(quotient)\n        \n        seen = {}\n        res = sign + str(quotient) + \".\"\n        \n        while remainder != 0:\n            if remainder in seen:\n                res = res[:seen[remainder]] + \"(\" + res[seen[remainder]:] + \")\"\n                break\n            seen[remainder] = len(res)\n            remainder *= 10\n            quotient, remainder = divmod(remainder, denominator)\n            res += str(quotient)\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add any remaining nodes from the left half\n        curr.next = left if left else right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by width, then height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        # find longest increasing subsequence\n        dp = []\n        for w, h in envelopes:\n            if not dp or dp[-1] < h:\n                dp.append(h)\n            else:\n                left, right = 0, len(dp) - 1\n                while left < right:\n                    mid = (left + right) // 2\n                    if dp[mid] < h:\n                        left = mid + 1\n                    else:\n                        right = mid\n                dp[left] = h\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        row_zero = False\n        \n        for i in range(m):\n            if matrix[i][0] == 0:\n                row_zero = True\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            for i in range(m):\n                matrix[i][0] = 0\n        \n        if row_zero:\n            for i in range(m):\n                matrix[i][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. Find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # 2. Find the node to remove\n        if length == n:\n            return head.next\n        \n        # 3. Find the node to remove\n        curr = head\n        for i in range(length - n - 1):\n            curr = curr.next\n        \n        curr.next = curr.next.next\n        \n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) / len(machines)\n        ans = 0\n        curr = 0\n        for i in machines:\n            curr += i - avg\n            ans = max(ans, abs(curr))\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            cnt = 0\n            for i in range(1, m + 1):\n                cnt += min(n, x // i)\n            return cnt\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1, list2 = list1.next, list2\n        \n        head = list1\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                list1 = list1.next\n            else:\n                list1.next, list2 = list2, list1\n                list1 = list1.next\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        \n        for i, h in enumerate(heights):\n            while stack and h < heights[stack[-1]]:\n                height = heights[stack.pop()]\n                width = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, height * width)\n            stack.append(i)\n        \n        while stack:\n            height = heights[stack.pop()]\n            width = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, height * width)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     mid = (l + r) // 2\n        #     if nums[mid] < nums[r]:\n        #         r = mid\n        #     elif nums[mid] > nums[r]:\n        #         l = mid + 1\n        #     else:\n        #         r -= 1\n        # return nums[l]\n        \n        # binary search\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     mid = (l + r) // 2\n        #     if nums[mid] < nums[r]:\n        #         r = mid\n        #     else:\n        #         l = mid + 1\n        # return nums[l]\n        \n        # binary search\n        if nums[0] < nums[-1]:\n            return nums[0]\n        l, r = 0, len(nums) - 1\n        while l < r:\n            mid = (l + r) // 2\n            if nums[mid] < nums[r]:\n                r = mid\n            else:\n                l = mid + 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        try:\n            float(s)\n            return True\n        except ValueError:\n            return False"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, IV, V, IX, X, XL, L, XC, C, CD, D, CM, M\n        \n        roman = ''\n        while num > 0:\n            if num >= 1000:\n                roman += 'M'\n                num -= 1000\n            elif num >= 900:\n                roman += 'CM'\n                num -= 900\n            elif num >= 500:\n                roman += 'D'\n                num -= 500\n            elif num >= 400:\n                roman += 'CD'\n                num -= 400\n            elif num >= 100:\n                roman += 'C'\n                num -= 100\n            elif num >= 90:\n                roman += 'XC'\n                num -= 90\n            elif num >= 50:\n                roman += 'L'\n                num -= 50\n            elif num >= 40:\n                roman += 'XL'\n                num -= 40\n            elif num >= 10:\n                roman += 'X'\n                num -= 10\n            elif num >= 9:\n                roman += 'IX'\n                num -= 9\n            elif num >= 5:\n                roman += 'V'\n                num -= 5\n            elif num >= 4:\n                roman += 'IV'\n                num -= 4\n            else:\n                roman += 'I'\n                num -= 1\n        return roman"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## 1st method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 2nd method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 3rd method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 4th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 5th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 6th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 7th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 8th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 9th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 10th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 11th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 12th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 13th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 14th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 15th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 16th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 17th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 18th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 19th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 20th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 21th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 22th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 23th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 24th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 25th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        ## \n        ## 26th method\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i, j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i, j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1, 10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values\n        \n        # find the first and second node\n        # find the first node\n        # find the second node\n        # swap the values"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half with the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left, right = 1, num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        ans = [0]\n        for i in range(1, n + 1):\n            ans.append(ans[i >> 1] + (i & 1))\n        \n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        def dfs(i, j, node):\n            if node.isWord:\n                res.append(node.word)\n                node.isWord = False\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]):\n                return\n            if board[i][j] not in node.children:\n                return\n            c = board[i][j]\n            board[i][j] = '#'\n            dfs(i + 1, j, node.children[c])\n            dfs(i - 1, j, node.children[c])\n            dfs(i, j + 1, node.children[c])\n            dfs(i, j - 1, node.children[c])\n            board[i][j] = c\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['isWord'] = True\n            node['word'] = word\n        \n        res = []\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                dfs(i, j, trie)\n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = s_dict.get(s[i], 0) + 1\n            t_dict[t[i]] = t_dict.get(t[i], 0) + 1\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # check 3x3 boxes\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                box = [board[x][y] for x in (i, i + 1, i + 2) for y in (j, j + 1, j + 2)]\n                if len(set(box)) != len(box):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        return \" \".join(s.split()[::-1])"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 17576\n        # 26^4 = 488384\n        # 26^5 = 14594364\n        # 26^6 = 45296176\n        # 26^7 = 137846528\n        # 26^8 = 429496729\n        # 26^9 = 125829124\n        # 26^10 = 387420488\n        # 26^11 = 1162261440\n        # 26^12 = 3486784400\n        # 26^13 = 10242165560\n        # 26^14 = 31381056640\n        # 26^15 = 94371255040\n        # 26^16 = 282429363200\n        # 26^17 = 858993459200\n        # 26^18 = 2576416291200\n        # 26^19 = 7752953184000\n        # 26^20 = 23088208544000\n        # 26^21 = 69175318848000\n        # 26^22 = 207367553459200\n        # 26^23 = 576460752358400\n        # 26^24 = 1729765036416000\n        # 26^25 = 4915296147404800\n        # 26^26 = 14745369626928000\n        # 26^27 = 44031536910592000\n        # 26^28 = 128194667367296000\n        # 26^29 = 384580101032192000\n        # 26^30 = 1153433208193152000\n        # 26^31 = 3518509648589312000\n        # 26^32 = 10237658344375040000\n        # 26^33 = 3170064901832160000\n        # 26^34 = 9532734085406720000\n        # 26^35 = 28190096442133760000\n        # 26^36 = 84524589288901120000\n        # 26^37 = 251890348548728320000\n        # 26^38 = 75557603419432320000\n        # 26^39 = 229150411157809920000\n        # 26^40 = 687765244555735040000\n        # 26^41 = 2061006981955011200000\n        # 26^42 = 578725067581124800000\n        # 26^43 = 1"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        if p is None or q is None:\n            return False\n        if p.val != q.val:\n            return False\n        return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second.next:\n            first, second = first.next, second.next\n        \n        return first"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # check if the length of pattern and words are equal\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate over the pattern and words\n        for c, w in zip(pattern, words):\n            # if the word is not in the mapping, add it\n            if w not in mapping:\n                mapping[w] = c\n            # if the word is in the mapping, check if it matches the pattern\n            elif mapping[w] != c:\n                return False\n        \n        # if we reach here, all words are mapped correctly\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            for j in self.permute(nums[:i] + nums[i+1:]):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m * n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            if matrix[mid // n][mid % n] == target:\n                return True\n            elif matrix[mid // n][mid % n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        head = ListNode(0)\n        curr = head\n        \n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n            \n        return head.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert to binary\n        # 2. flip bits\n        # 3. convert back to decimal\n        \n        # 1. convert to binary\n        binary = bin(num)[2:]\n        \n        # 2. flip bits\n        flip_bits = \"\"\n        for bit in binary:\n            if bit == \"0\":\n                flip_bits += \"1\"\n            else:\n                flip_bits += \"0\"\n        \n        # 3. convert back to decimal\n        return int(flip_bits, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n                \n            if node.right:\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left, right = 0, len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     area = min(height[left], height[right]) * (right - left)\n        #     max_area = max(max_area, area)\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        left, right = 0, len(height) - 1\n        max_area = 0\n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a set of words\n        word_set = set(words)\n        \n        # build a dict to store the longest word that can be built from the words in the set\n        # the key is the length of the word, the value is the longest word that can be built from the words in the set\n        # if the key is 0, then the value is None\n        longest_word_dict = {0: None}\n        \n        # iterate through the words in the set\n        for word in word_set:\n            \n            # build a list of words that can be built from the word\n            # the list is empty if the word is empty\n            # the list is [word] if the word is not empty\n            # the list is [word, word[1:]] if the word is not empty and the word is longer than 1\n            # the list is [word, word[1:], word[2:]] if the word is not empty, the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:]] if the word is not empty, the word is longer than 3, and the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:], word[4:]] if the word is not empty, the word is longer than 4, and the word is longer than 3, and the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:], word[4:], word[5:]] if the word is not empty, the word is longer than 5, and the word is longer than 4, and the word is longer than 3, and the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:], word[4:], word[5:], word[6:]] if the word is not empty, the word is longer than 6, and the word is longer than 5, and the word is longer than 4, and the word is longer than 3, and the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:], word[4:], word[5:], word[6:], word[7:]] if the word is not empty, the word is longer than 7, and the word is longer than 6, and the word is longer than 5, and the word is longer than 4, and the word is longer than 3, and the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:], word[4:], word[5:], word[6:], word[7:], word[8:]] if the word is not empty, the word is longer than 8, and the word is longer than 7, and the word is longer than 6, and the word is longer than 5, and the word is longer than 4, and the word is longer than 3, and the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:], word[4:], word[5:], word[6:], word[7:], word[8:], word[9:]] if the word is not empty, the word is longer than 9, and the word is longer than 8, and the word is longer than 7, and the word is longer than 6, and the word is longer than 5, and the word is longer than 4, and the word is longer than 3, and the word is longer than 2, and the word is longer than 1\n            # the list is [word, word[1:], word[2:], word[3:], word[4:], word[5:], word[6:], word[7:], word[8:], word[9:], word[10:]] if the word is not empty, the word is longer than 10, and the word is longer than 9, and the word is longer than 8, and the word is longer than 7, and the word"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        \n        res = \"\"\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row + col not in diag1 and row - col not in diag2:\n                    count += backtrack(row + 1, cols | {col}, diag1 | {row + col}, diag2 | {row - col})\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i, j, idx):\n            if idx == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[idx]:\n                return False\n            board[i][j] = '#'\n            res = dfs(i + 1, j, idx + 1) or dfs(i - 1, j, idx + 1) or dfs(i, j + 1, idx + 1) or dfs(i, j - 1, idx + 1)\n            board[i][j] = word[idx]\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, 0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # O(m+n) time, O(1) space\n        p1 = m - 1\n        p2 = n - 1\n        p = m + n - 1\n        \n        while p1 >= 0 and p2 >= 0:\n            if nums1[p1] > nums2[p2]:\n                nums1[p] = nums1[p1]\n                p1 -= 1\n            else:\n                nums1[p] = nums2[p2]\n                p2 -= 1\n            p -= 1\n        \n        if p2 >= 0:\n            nums1[:p2 + 1] = nums2[:p2 + 1]"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. sort the list\n        # 2. if the list has less than 3 elements, return the max element\n        # 3. if the list has 3 elements, return the third element\n        # 4. if the list has more than 3 elements, return the third element\n        \n        nums = sorted(set(nums))\n        if len(nums) < 3:\n            return nums[-1]\n        else:\n            return nums[-3]"}]}