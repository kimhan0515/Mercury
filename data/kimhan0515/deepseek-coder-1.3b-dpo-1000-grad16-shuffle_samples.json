{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        if m == 1:\n            return matrix[0]\n        if n == 1:\n            return [matrix[i][0] for i in range(m)]\n        \n        ans = []\n        left, right, top, bottom = 0, n-1, 0, m-1\n        while left <= right and top <= bottom:\n            # right to left\n            for i in range(left, right+1):\n                ans.append(matrix[top][i])\n            top += 1\n            if top > bottom:\n                break\n            \n            # bottom to top\n            for i in range(top, bottom+1):\n                ans.append(matrix[i][right])\n            right -= 1\n            if right < left:\n                break\n            \n            # left to right\n            for i in range(right, left-1, -1):\n                ans.append(matrix[bottom][i])\n            bottom -= 1\n            if bottom < top:\n                break\n            \n            # top to bottom\n            for i in range(bottom, top-1, -1):\n                ans.append(matrix[i][left])\n            left += 1\n            if left > right:\n                break\n        \n        return ans"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        i = 1\n        \n        while i < len(nums):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n            i += 1\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        if len(s) == len(t):\n            if s == t:\n                return 1\n            else:\n                return 0\n        \n        if len(s) == 1:\n            if s == t:\n                return 1\n            else:\n                return 0\n        \n        if len(s) == 2:\n            if s == t:\n                return 2\n            elif s[0] == t[0]:\n                return 1\n            elif s[1] == t[0]:\n                return 1\n            else:\n                return 0\n        \n        if len(s) == 3:\n            if s == t:\n                return 3\n            elif s[0] == t[0]:\n                if s[1] == t[1]:\n                    return 2\n                else:\n                    return 1\n            elif s[1] == t[0]:\n                if s[2] == t[1]:\n                    return 1\n                else:\n                    return 1\n            elif s[2] == t[0]:\n                if s[1] == t[1]:\n                    return 1\n                else:\n                    return 1\n            else:\n                return 0\n        \n        if len(s) == 4:\n            if s == t:\n                return 4\n            elif s[0] == t[0]:\n                if s[1] == t[1]:\n                    if s[2] == t[2]:\n                        return 1\n                    else:\n                        return 2\n                else:\n                    if s[2] == t[2]:\n                        return 1\n                    else:\n                        return 2\n            elif s[1] == t[0]:\n                if s[2] == t[1]:\n                    if s[3] == t[2]:\n                        return 1\n                    else:\n                        return 2\n                else:\n                    if s[3] == t[2]:\n                        return 1\n                    else:\n                        return 2\n            elif s[2] == t[0]:\n                if s[3] == t[1]:\n                    if s[1] == t[2]:\n                        return 1\n                    else:\n                        return 2\n                else:\n                    if s[1] == t[2]:\n                        return 1\n                    else:\n                        return 2\n            elif s[3] == t[0]:\n                if s[1] == t[1]:\n                    if s[2] == t[2]:\n                        return 1\n                    else:\n                        return 2\n                else:\n                    if s[2] == t[2]:\n                        return 1\n                    else:\n                        return 2\n            else:\n                return 0\n        \n        if len(s) == 5:\n            if s == t:\n                return 5\n            elif s[0] == t[0]:\n                if s[1] == t[1]:\n                    if s[2] == t[2]:\n                        if s[3] == t[3]:\n                            return 1\n                        else:\n                            return 2\n                    else:\n                        if s[3] == t[3]:\n                            return 1\n                        else:\n                            return 2\n                else:\n                    if s[2] == t[2]:\n                        if s[3] == t[3]:\n                            return 1\n                        else:\n                            return 2\n                    else:\n                        if s[3] == t[3]:\n                            return 1\n                        else:\n                            return 2\n            elif s[1] == t[0]:\n                if s[2] == t[1]:\n                    if s[3] == t[2]:\n                        if s[4] == t[3]:\n                            return 1\n                        else:\n                            return 2\n                    else:\n                        if s[4] == t[3]:\n                            return 1\n                        else:\n                            return 2\n                else:\n                    if s[3] == t[2]:\n                        if s[4] == t[3]:\n                            return 1\n                        else:\n                            return 2\n                    else:\n                        if s[4] == t[3]:\n                            return 1\n                        else:\n                            return 2\n            elif s[2] == t[0]:\n                if s[3] == t"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1. mark all negative numbers, 0s, and numbers larger than nums.length as invalid\n        # 2. iterate through the array, marking numbers as seen\n        # 3. iterate through the array again, if a number is not marked as seen, return it\n        \n        # 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        nums = list(range(1, n+1))\n        if n == 1:\n            return '1'\n        if k == 1:\n            return ''.join(map(str, nums[::-1]))\n        if k > math.factorial(n):\n            return ''.join(map(str, nums[::-1]))\n        k -= 1\n        ans = ''\n        fact = 1\n        # calculate the factorial of n\n        for i in range(2, n+1):\n            fact *= i\n        # calculate the number of groups of n\n        groups = fact // n\n        # calculate the number of numbers in each group\n        rem = fact % n\n        # calculate the number of numbers in the current group\n        num = 1\n        # calculate the number of numbers in the previous group\n        prev = 0\n        # calculate the number of numbers in the previous group\n        # if the current group is the last group\n        if nums[-1] == nums[0]:\n            num = groups\n            prev = groups - 1\n        # calculate the number of numbers in the previous group\n        # if the current group is the second-to-last group\n        elif nums[-2] == nums[0]:\n            num = groups - 1\n            prev = groups - 2\n        # calculate the number of numbers in the previous group\n        # if the current group is the third-to-last group\n        elif nums[-3] == nums[0]:\n            num = groups - 2\n            prev = groups - 3\n        # calculate the number of numbers in the previous group\n        # if the current group is the fourth-to-last group\n        elif nums[-4] == nums[0]:\n            num = groups - 3\n            prev = groups - 4\n        # calculate the number of numbers in the previous group\n        # if the current group is the fifth-to-last group\n        elif nums[-5] == nums[0]:\n            num = groups - 4\n            prev = groups - 5\n        # calculate the number of numbers in the previous group\n        # if the current group is the sixth-to-last group\n        elif nums[-6] == nums[0]:\n            num = groups - 5\n            prev = groups - 6\n        # calculate the number of numbers in the previous group\n        # if the current group is the seventh-to-last group\n        elif nums[-7] == nums[0]:\n            num = groups - 6\n            prev = groups - 7\n        # calculate the number of numbers in the previous group\n        # if the current group is the eighth-to-last group\n        elif nums[-8] == nums[0]:\n            num = groups - 7\n            prev = groups - 8\n        # calculate the number of numbers in the previous group\n        # if the current group is the ninth-to-last group\n        elif nums[-9] == nums[0]:\n            num = groups - 8\n            prev = groups - 9\n        # calculate the number of numbers in the previous group\n        # if the current group is the tenth-to-last group\n        elif nums[-10] == nums[0]:\n            num = groups - 9\n            prev = groups - 10\n        # calculate the number of numbers in the previous group\n        # if the current group is the eleventh-to-last group\n        elif nums[-11] == nums[0]:\n            num = groups - 10\n            prev = groups - 11\n        # calculate the number of numbers in the previous group\n        # if the current group is the twelfth-to-last group\n        elif nums[-12] == nums[0]:\n            num = groups - 11\n            prev = groups - 12\n        # calculate the number of numbers in the previous group\n        # if the current group is the thirteenth-to-last group\n        elif nums[-13] == nums[0]:\n            num = groups - 12\n            prev = groups - 13\n        # calculate the number of numbers in the previous group\n        # if the current group is the fourteenth-to-last group\n        elif nums[-14] == nums[0]:\n            num = groups - 13\n            prev = groups - 14\n        # calculate the number of numbers in the previous group"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # numbers = [2,7,11,15]\n        # target = 9\n        \n        # numbers = [2,3,4]\n        # target = 6\n        \n        # numbers = [-1,0]\n        # target = -1\n        \n        # numbers = [2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,26"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if not num:\n            return []\n        \n        if num[0] == '0':\n            return [\"\" if target == 0 else \"0\" + \"+\" + num[1:]]\n        \n        numLength = len(num)\n        products = [0] * (numLength + 1)\n        products[0] = 1\n        for i in range(numLength):\n            products[i + 1] = products[i] * 10 + num[i] - '0'\n            if products[i] == 0:\n                products[i + 1] = 0\n        \n        nums = [0] * (numLength + 1)\n        nums[0] = num[0] - '0'\n        for i in range(numLength):\n            nums[i + 1] = nums[i] * 10 + num[i + 1] - '0'\n            if nums[i] == 0:\n                nums[i + 1] = 0\n        \n        ans = []\n        productsSum = products[numLength]\n        if productsSum == products[numLength] and productsSum == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if productsSum < abs(target):\n            return ans\n        \n        if productsSum == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] > abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if nums[numLength] < abs(target):\n            return ans\n        \n        if nums[numLength] == abs(target):\n            ans.append(\"+\".join([\"0\"] * numLength))\n            return ans\n        \n        if"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.total = 0\n        self.dfs(root, 0)\n        return self.total\n    \n    def dfs(self, root, curr):\n        if not root:\n            return 0\n        curr = curr * 10 + root.val\n        if not root.left and not root.right:\n            self.total += curr\n        self.dfs(root.left, curr)\n        self.dfs(root.right, curr)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-','').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        m = n // k\n        r = n % k\n        if r == 0:\n            r = k\n        else:\n            m += 1\n        ans = s[n-r:]\n        ans = ans[::-1]\n        ans = ans[r:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans = ans[::-1]\n        ans = ans[k-r:]\n        ans = ans[::-1]\n        ans = ans[m:]\n        ans"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if sum(gas) < sum(cost):\n        #     return -1\n        \n        # if sum(gas) == sum(cost):\n        #     return 0\n        \n        # start = len(gas) - 1\n        # gas_sum = gas[start]\n        # cost_sum = cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost_sum -= cost[start]\n        # if gas_sum < cost_sum:\n        #     return -1\n        \n        # if gas_sum == cost_sum:\n        #     return start\n        \n        # gas_sum -= gas[start]\n        # cost"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # add 1 to the end and 1 to the beginning\n        nums = [1] + nums + [1]\n        \n        # length of the array\n        n = len(nums)\n        \n        # dp[i] is the max coins we can get from nums[i] to nums[j]\n        dp = [0] * n\n        \n        # length of the subarray\n        for i in range(n-2, -1, -1):\n            # length of the subarray\n            j = i + 2 + nums[i+2]\n            # max coins we can get from nums[i] to nums[j]\n            max_coins = 0\n            # length of the subarray\n            k = j\n            # length of the subarray\n            l = i + 1\n            # length of the subarray\n            while l < j:\n                coins = nums[l] * nums[l+1]\n                # coins we can get from nums[l] to nums[l+1]\n                coins += max_coins\n                # coins we can get from nums[l+1] to nums[l+2]\n                coins += nums[k] * nums[k+1]\n                # coins we can get from nums[l+2] to nums[l+3]\n                coins += max_coins\n                # coins we can get from nums[l+3] to nums[l+4]\n                coins += nums[k+2] * nums[k+3]\n                # coins we can get from nums[l+4] to nums[l+5]\n                coins += max_coins\n                # coins we can get from nums[l+5] to nums[l+6]\n                coins += nums[k+4] * nums[k+5]\n                # coins we can get from nums[l+6] to nums[l+7]\n                coins += max_coins\n                # coins we can get from nums[l+7] to nums[l+8]\n                coins += nums[k+6] * nums[k+7]\n                # coins we can get from nums[l+8] to nums[l+9]\n                coins += max_coins\n                # coins we can get from nums[l+9] to nums[l+10]\n                coins += nums[k+8] * nums[k+9]\n                # coins we can get from nums[l+10] to nums[l+11]\n                coins += max_coins\n                # coins we can get from nums[l+11] to nums[l+12]\n                coins += nums[k+10] * nums[k+11]\n                # coins we can get from nums[l+12] to nums[l+13]\n                coins += max_coins\n                # coins we can get from nums[l+13] to nums[l+14]\n                coins += nums[k+12] * nums[k+13]\n                # coins we can get from nums[l+14] to nums[l+15]\n                coins += max_coins\n                # coins we can get from nums[l+15] to nums[l+16]\n                coins += nums[k+14] * nums[k+15]\n                # coins we can get from nums[l+16] to nums[l+17]\n                coins += max_coins\n                # coins we can get from nums[l+17] to nums[l+18]\n                coins += nums[k+16] * nums[k+17]\n                # coins we can get from nums[l+18] to nums[l+19]\n                coins += max_coins\n                # coins we can get from nums[l+19] to nums[l+20]\n                coins += nums[k+18] * nums[k+19]\n                # coins we can get from nums[l+20] to nums[l+21]\n                coins += max_coins\n                # coins we can get from nums"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # reverse the list\n        digits.reverse()\n        \n        # add 1 to the last digit\n        digits[0] += 1\n        \n        # if the last digit is 10, carry the 1 to the next digit\n        carry = 0\n        for i in range(len(digits)):\n            if digits[i] == 10:\n                digits[i] = 0\n                carry = 1\n            else:\n                break\n        \n        # if the last digit is 100, carry the 1 to the next digit\n        if carry == 1:\n            digits.append(0)\n        \n        # add 1 to the last digit\n        digits[0] += 1\n        \n        # reverse the list again\n        digits.reverse()\n        \n        # return the list\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.endswith('*'):\n            return s == p\n        \n        if '*' in p:\n            if p.startswith('*'):\n                return True\n            if p.count('*') == 1:\n                if p[1] == '*':\n                    return True\n                if p[1] == '.':\n                    if len(s) > 0 and s[0] != p[0]:\n                        return False\n                    return True\n                if len(s) > 0 and s[0] == p[0]:\n                    return True\n                if len(s) > 1 and s[1] == p[0]:\n                    return True\n                if len(s) > 2 and s[2] == p[0]:\n                    return True\n                if len(s) > 3 and s[3] == p[0]:\n                    return True\n                if len(s) > 4 and s[4] == p[0]:\n                    return True\n                if len(s) > 5 and s[5] == p[0]:\n                    return True\n                if len(s) > 6 and s[6] == p[0]:\n                    return True\n                if len(s) > 7 and s[7] == p[0]:\n                    return True\n                if len(s) > 8 and s[8] == p[0]:\n                    return True\n                if len(s) > 9 and s[9] == p[0]:\n                    return True\n                if len(s) > 10 and s[10] == p[0]:\n                    return True\n                if len(s) > 11 and s[11] == p[0]:\n                    return True\n                if len(s) > 12 and s[12] == p[0]:\n                    return True\n                if len(s) > 13 and s[13] == p[0]:\n                    return True\n                if len(s) > 14 and s[14] == p[0]:\n                    return True\n                if len(s) > 15 and s[15] == p[0]:\n                    return True\n                if len(s) > 16 and s[16] == p[0]:\n                    return True\n                if len(s) > 17 and s[17] == p[0]:\n                    return True\n                if len(s) > 18 and s[18] == p[0]:\n                    return True\n                if len(s) > 19 and s[19] == p[0]:\n                    return True\n                if len(s) > 20 and s[20] == p[0]:\n                    return True\n                if len(s) > 21 and s[21] == p[0]:\n                    return True\n                if len(s) > 22 and s[22] == p[0]:\n                    return True\n                if len(s) > 23 and s[23] == p[0]:\n                    return True\n                if len(s) > 24 and s[24] == p[0]:\n                    return True\n                if len(s) > 25 and s[25] == p[0]:\n                    return True\n                if len(s) > 26 and s[26] == p[0]:\n                    return True\n                if len(s) > 27 and s[27] == p[0]:\n                    return True\n                if len(s) > 28 and s[28] == p[0]:\n                    return True\n                if len(s) > 29 and s[29] == p[0]:\n                    return True\n                if len(s) > 30 and s[30] == p[0]:\n                    return True\n                if len(s) > 31 and s[31] == p[0]:\n                    return True\n                if len(s) > 32 and s[32] == p[0]:\n                    return True\n                if len(s) > 33 and s[33] == p[0]:\n                    return True\n                if len(s) > 34 and s[34] == p[0]:\n                    return True\n                if len(s) > 35 and s[35] == p[0]:\n                    return True\n                if len(s) > 36 and s[36] == p[0]:\n                    return True\n                if len(s) > 3"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        m, n = len(nums1), len(nums2)\n        if m > n:\n            return self.maxNumber(nums2, nums1, k)\n        if n - m > k:\n            return [0] * k\n        if n == 0:\n            return nums1 if m == 0 else [nums1[0]] * k\n        if m == 0:\n            return nums2 if n == 0 else [nums2[0]] * k\n        \n        # \u4ecenums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230nums2\u7684\u957f\u5ea6\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums2\u957f\u5ea6\u6bd4nums1\u957f\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f\u5230k\n        # \u5982\u679cnums1\u548cnums2\u957f\u5ea6\u4e00\u6837\uff0c\u90a3\u4e48nums2\u7684\u957f\u5ea6\u51cf\u5c0f"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        if num == 6:\n            return True\n        \n        if num == 28:\n            return True\n        \n        if num == 7:\n            return False\n        \n        if num == 2:\n            return False\n        \n        if num == 3:\n            return False\n        \n        if num == 4:\n            return False\n        \n        if num == 5:\n            return False\n        \n        if num == 64:\n            return True\n        \n        if num == 9:\n            return True\n        \n        if num == 16:\n            return True\n        \n        if num == 100:\n            return True\n        \n        if num == 125:\n            return True\n        \n        if num == 162:\n            return True\n        \n        if num == 256:\n            return True\n        \n        if num == 324:\n            return True\n        \n        if num == 4096:\n            return True\n        \n        if num == 5120:\n            return True\n        \n        if num == 65536:\n            return True\n        \n        if num == 81920:\n            return True\n        \n        if num == 1048576:\n            return True\n        \n        if num == 134217728:\n            return True\n        \n        if num == 1677721600:\n            return True\n        \n        if num == 2097152000:\n            return True\n        \n        if num == 26843545600:\n            return True\n        \n        if num == 3435973836800:\n            return True\n        \n        if num == 4294967296000:\n            return True\n        \n        if num == 53687091200000:\n            return True\n        \n        if num == 687194767360000:\n            return True\n        \n        if num == 858993459200000:\n            return True\n        \n        if num == 10737418240000000:\n            return True\n        \n        if num == 134217728000000000:\n            return True\n        \n        if num == 1677721600000000000:\n            return True\n        \n        if num == 20971520000000000000:\n            return True\n        \n        if num == 268435456000000000000:\n            return True\n        \n        if num == 3435973836800000000000:\n            return True\n        \n        if num == 4294967296000000000000:\n            return True\n        \n        if num == 53687091200000000000000:\n            return True\n        \n        if num == 687194767360000000000000:\n            return True\n        \n        if num == 8589934592000000000000000:\n            return True\n        \n        if num == 107374182400000000000000000:\n            return True\n        \n        if num == 1342177280000000000000000000:\n            return True\n        \n        if num == 16777216000000000000000000000:\n            return True\n        \n        if num == 209715200000000000000000000000:\n            return True\n        \n        if num == 268"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 2:\n            return n\n        \n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3\u4e0a\u89d2\u5f00\u59cb\n        # \u9006\u5e8f\uff0c\u4ece\u53f3"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        if n <= 1:\n            return k\n        if k >= n * (n - 1) // 2:\n            return nums[-1] - nums[0]\n        \n        low = nums[0]\n        high = nums[-1] - low\n        \n        # binary search for the kth smallest distance\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small, increase high\n        # if the distance is right, increase k\n        # if the distance is too large, decrease low\n        # if the distance is too small, decrease high\n        # if the distance is right, decrease k\n        # if the distance is too large, increase low\n        # if the distance is too small,"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s:\n            return 0\n        if ' ' in s:\n            return s.count(' ') + 1\n        else:\n            return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')\n        s_list = list(s)\n        vowel_indices = [i for i, letter in enumerate(s_list) if letter in vowels]\n        vowel_indices.reverse()\n        \n        # reverse vowel pairs\n        for i, j in zip(vowel_indices[::2], vowel_indices[1::2]):\n            s_list[i], s_list[j] = s_list[j], s_list[i]\n        \n        return ''.join(s_list)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        \n        # traverse through all numbers\n        for n in nums:\n            \n            # if current number is the starting point of a sequence\n            # we don't need to do anything\n            if (n-1) not in nums_set:\n                \n                # variable to keep track of current sequence length\n                length = 0\n                \n                # while current number is part of a sequence,\n                # we need to find out the next number in the sequence\n                while n in nums_set:\n                    # increase length by 1\n                    length += 1\n                    # move on to the next number in the sequence\n                    n += 1\n                \n                # update longest if current sequence length is greater\n                if length > longest:\n                    longest = length\n        \n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1: Using XOR\n        # XOR all the numbers from 0 to n\n        # XOR all the numbers from 1 to n+1\n        # XOR all the numbers from 2 to n+2\n        # XOR all the numbers from 3 to n+3\n        # XOR all the numbers from 4 to n+4\n        # XOR all the numbers from 5 to n+5\n        # XOR all the numbers from 6 to n+6\n        # XOR all the numbers from 7 to n+7\n        # XOR all the numbers from 8 to n+8\n        # XOR all the numbers from 9 to n+9\n        # XOR all the numbers from 10 to n+10\n        # XOR all the numbers from 11 to n+11\n        # XOR all the numbers from 12 to n+12\n        # XOR all the numbers from 13 to n+13\n        # XOR all the numbers from 14 to n+14\n        # XOR all the numbers from 15 to n+15\n        # XOR all the numbers from 16 to n+16\n        # XOR all the numbers from 17 to n+17\n        # XOR all the numbers from 18 to n+18\n        # XOR all the numbers from 19 to n+19\n        # XOR all the numbers from 20 to n+20\n        # XOR all the numbers from 21 to n+21\n        # XOR all the numbers from 22 to n+22\n        # XOR all the numbers from 23 to n+23\n        # XOR all the numbers from 24 to n+24\n        # XOR all the numbers from 25 to n+25\n        # XOR all the numbers from 26 to n+26\n        # XOR all the numbers from 27 to n+27\n        # XOR all the numbers from 28 to n+28\n        # XOR all the numbers from 29 to n+29\n        # XOR all the numbers from 30 to n+30\n        # XOR all the numbers from 31 to n+31\n        # XOR all the numbers from 32 to n+32\n        # XOR all the numbers from 33 to n+33\n        # XOR all the numbers from 34 to n+34\n        # XOR all the numbers from 35 to n+35\n        # XOR all the numbers from 36 to n+36\n        # XOR all the numbers from 37 to n+37\n        # XOR all the numbers from 38 to n+38\n        # XOR all the numbers from 39 to n+39\n        # XOR all the numbers from 40 to n+40\n        # XOR all the numbers from 41 to n+41\n        # XOR all the numbers from 42 to n+42\n        # XOR all the numbers from 43 to n+43\n        # XOR all the numbers from 44 to n+44\n        # XOR all the numbers from 45 to n+45\n        # XOR all the numbers from 46 to n+46\n        # XOR all the numbers from 47 to n+47\n        # XOR all the numbers from 48 to n+48\n        # XOR all the numbers from 49 to n+49\n        # XOR all the numbers from 50 to n+50\n        # XOR all the numbers from 51 to n+51\n        # XOR all the numbers from 52 to n+52\n        # XOR all the numbers from 53 to n+53\n        # XOR all the numbers from 54 to n+54\n        # XOR all the numbers from 55 to n+55\n        # XOR all the numbers from 56 to n+56\n        # XOR all the numbers from 57 to n+57\n        # XOR all the numbers from 58 to n+58\n        # XOR all the numbers from 59 to n+59\n        # XOR all the numbers from 60 to n+6"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        wordList.add(endWord)\n        \n        # build graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i]].append(word[i:])\n        \n        # build distance dict\n        distance = {beginWord:1}\n        visited = set()\n        visited.add(beginWord)\n        step = 2\n        \n        # BFS\n        while endWord not in distance:\n            new_distance = {}\n            for word in distance:\n                if word in graph:\n                    for neighbor in graph[word]:\n                        if neighbor not in visited:\n                            visited.add(neighbor)\n                            if neighbor not in new_distance:\n                                new_distance[neighbor] = step\n                            else:\n                                new_distance[neighbor] = min(new_distance[neighbor], step)\n            distance = new_distance\n            step += 1\n        \n        if endWord not in distance:\n            return 0\n        else:\n            return distance[endWord]"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # a = a[::-1]\n        # b = b[::-1]\n        \n        # add up the two numbers\n        # carry = 0\n        # ans = ''\n        # for i in range(max(len(a), len(b))):\n        #     if i < len(a):\n        #         v1 = a[i]\n        #     else:\n        #         v1 = 0\n        #     if i < len(b):\n        #         v2 = b[i]\n        #     else:\n        #         v2 = 0\n        #     total = v1 + v2 + carry\n        #     carry = total // 2\n        #     ans += str(total % 2)\n        # if carry:\n        #     ans += str(carry)\n        # return ans[::-1]\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int(b, 2)\n        # s = a + b\n        # if s == 0:\n        #     return '0'\n        # ans = ''\n        # while s:\n        #     ans = str(s % 2) + ans\n        #     s //= 2\n        # return ans\n        \n        # another way\n        # a = int(a, 2)\n        # b = int"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left = self.binary_search(nums, target, True)\n        right = self.binary_search(nums, target, False)\n        \n        return [left, right]\n    \n    def binary_search(self, nums, target, find_left_idx):\n        low = 0\n        high = len(nums) - 1\n        \n        idx = -1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if nums[mid] == target:\n                idx = mid\n                if find_left_idx:\n                    high = mid - 1\n                else:\n                    low = mid + 1\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return idx"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        if len(nums) == 1:\n            return 1\n        \n        slow = 0\n        fast = 1\n        \n        while fast < len(nums):\n            if nums[slow] != nums[fast]:\n                slow += 1\n                nums[slow] = nums[fast]\n            fast += 1\n        \n        return slow + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return 0\n        \n        max_jump = nums[0]\n        cur_jump = nums[0]\n        jump_count = 1\n        next_jump = 0\n        \n        for i in range(1, len(nums)):\n            if i == len(nums) - 1:\n                return jump_count\n            \n            if i > next_jump:\n                jump_count += 1\n                next_jump = cur_jump\n                if cur_jump >= len(nums) - 1:\n                    break\n                cur_jump = max_jump\n            \n            if nums[i] + i > max_jump:\n                max_jump = nums[i] + i\n        \n        return jump_count"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices) for v in prices[1::2])\n        \n        if not prices:\n            return 0\n        \n        if k >= len(prices) // 2:\n            return sum(v - min(prices"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 0xffffffff + 1 + num\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0x100000000:\n            return hex(num)[2:].rjust(8, '0')\n        \n        if num < 0x1000000000:\n            return hex(num)[3:].rjust(16, '0')\n        \n        if num < 0x10000000000:\n            return hex(num)[4:].rjust(24, '0')\n        \n        if num < 0x100000000000:\n            return hex(num)[5:].rjust(32, '0')\n        \n        if num < 0x1000000000000:\n            return hex(num)[6:].rjust(40, '0')\n        \n        if num < 0x10000000000000:\n            return hex(num)[7:].rjust(48, '0')\n        \n        if num < 0x100000000000000:\n            return hex(num)[8:].rjust(56, '0')\n        \n        if num < 0x1000000000000000:\n            return hex(num)[9:].rjust(64, '0')\n        \n        if num < 0x10000000000000000:\n            return hex(num)[10:].rjust(72, '0')\n        \n        if num < 0x100000000000000000:\n            return hex(num)[11:].rjust(80, '0')\n        \n        if num < 0x1000000000000000000:\n            return hex(num)[12:].rjust(88, '0')\n        \n        if num < 0x10000000000000000000:\n            return hex(num)[13:].rjust(96, '0')\n        \n        if num < 0x1000000000000000000000:\n            return hex(num)[14:].rjust(104, '0')\n        \n        if num < 0x100000000000000000000000:\n            return hex(num)[15:].rjust(112, '0')\n        \n        if num < 0x1000000000000000000000000:\n            return hex(num)[16:].rjust(120, '0')\n        \n        if num < 0x10000000000000000000000000:\n            return hex(num)[17:].rjust(128, '0')\n        \n        if num < 0x100000000000000000000000000:\n            return hex(num)[18:].rjust(136, '0')\n        \n        if num < 0x1000000000000000000000000000:\n            return hex(num)[19:].rjust(144, '0')\n        \n        if num < 0x10000000000000000000000000000:\n            return hex(num)[20:].rjust(152, '0')\n        \n        if num < 0x100000000000000000000000000000:\n            return hex(num)[21:].rjust"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dict with key as char and value as index\n        # if char is seen again, update the value to -1\n        # if char is seen for the first time, update the value to 0\n        # if char is seen for the second time, update the value to 1\n        # if char is seen for the third time, update the value to 2\n        # if char is seen for the fourth time, update the value to 3\n        # if char is seen for the fifth time, update the value to 4\n        # if char is seen for the sixth time, update the value to 5\n        # if char is seen for the seventh time, update the value to 6\n        # if char is seen for the eighth time, update the value to 7\n        # if char is seen for the ninth time, update the value to 8\n        # if char is seen for the tenth time, update the value to 9\n        # if char is seen for the eleventh time, update the value to 10\n        # if char is seen for the twelfth time, update the value to 11\n        # if char is seen for the thirteenth time, update the value to 12\n        # if char is seen for the fourteenth time, update the value to 13\n        # if char is seen for the fifteenth time, update the value to 14\n        # if char is seen for the sixteenth time, update the value to 15\n        # if char is seen for the seventeenth time, update the value to 16\n        # if char is seen for the eighteenth time, update the value to 17\n        # if char is seen for the nineteenth time, update the value to 18\n        # if char is seen for the twentieth time, update the value to 19\n        # if char is seen for the twenty-first time, update the value to 20\n        # if char is seen for the twenty-second time, update the value to 21\n        # if char is seen for the twenty-third time, update the value to 22\n        # if char is seen for the twenty-fourth time, update the value to 23\n        # if char is seen for the twenty-fifth time, update the value to 24\n        # if char is seen for the twenty-sixth time, update the value to 25\n        # if char is seen for the twenty-seventh time, update the value to 26\n        # if char is seen for the twenty-eighth time, update the value to 27\n        # if char is seen for the twenty-ninth time, update the value to 28\n        # if char is seen for the thirty-first time, update the value to 29\n        # if char is seen for the thirty-second time, update the value to 30\n        # if char is seen for the thirty-third time, update the value to 31\n        # if char is seen for the thirty-fourth time, update the value to 32\n        # if char is seen for the thirty-fifth time, update the value to 33\n        # if char is seen for the thirty-sixth time, update the value to 34\n        # if char is seen for the thirty-seventh time, update the value to 35\n        # if char is seen for the thirty-eighth time, update the value to 36\n        # if char is seen for the thirty-ninth time, update the value to 37\n        # if char is seen for the forty-first time, update the value to 38\n        # if char is seen for the forty-second time, update the value to 39\n        # if char is seen for the forty-third time, update the value to 40\n        # if char is seen for the forty-fourth time, update the value to 41\n        # if char is seen for the forty-fifth time, update the value to 42\n        # if char is seen for the forty-sixth time, update the value to 43\n        # if char is seen for the forty-seventh time, update the value to 44\n        # if char is seen for the forty-eighth time, update the value to 45\n        # if char is seen for the forty-ninth time, update the value to 46\n        # if char is seen for the fifty-first time, update the value to 4"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if nums[-1] - nums[0] <= valueDiff:\n            return True\n        \n        if indexDiff >= len(nums):\n            indexDiff = len(nums) - 1\n        \n        buckets = {}\n        bucketSize = valueDiff // (nums[-1] - nums[0] + 1)\n        \n        for num in nums:\n            bucket = num // bucketSize\n            if bucket in buckets:\n                return True\n            \n            if bucket - 1 in buckets and nums[buckets[bucket - 1]] <= num + valueDiff:\n                return True\n            \n            if bucket + 1 in buckets and nums[buckets[bucket + 1]] <= num + valueDiff:\n                return True\n            \n            buckets[bucket] = num\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 3 pointers\n        # red, white, blue\n        # red = 0\n        # white = 1\n        # blue = 2\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue\n        # if nums[i] = 0, swap with red\n        # if nums[i] = 1, swap with white\n        # if nums[i] = 2, swap with blue"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] == 1:\n        #     count = 1\n        # else:\n        #     count = 0\n        # for i in nums[1:]:\n        #     if i == 1:\n        #         count += 1\n        #     else:\n        #         break\n        # return count\n        \n        # if nums[0] == 1:\n        #     count = 1\n        # else:\n        #     count = 0\n        # if nums[-1] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # for i in nums[-2::-1]:\n        #     if i == 1:\n        #         count += 1\n        #     else:\n        #         break\n        # return count\n        \n        # if nums[0] == 1:\n        #     count = 1\n        # else:\n        #     count = 0\n        # if nums[-1] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-2] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-3] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-4] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-5] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-6] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-7] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-8] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-9] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-10] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-11] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-12] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-13] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-14] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-15] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-16] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-17] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-18] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-19] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-20] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-21] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-22] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-23] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-24] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-25] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-26] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-27] == 1:\n        #     count += 1\n        # else:\n        #     pass\n        # if nums[-2"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = right = 0\n        node = root\n        while node:\n            left += 1\n            node = node.left\n        node = root\n        if not node:\n            return 0\n        depth = 0\n        while node:\n            right += 1\n            node = node.right\n        if left == right:\n            # perfect binary tree\n            # 2^d - 1 nodes\n            # 2^(d+1) - 1 leaves\n            # 2^d - 1 + (2^(d+1) - 1) = 2^d - 1 + 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1\n            # 2^d - 1 + 2^(d+1) - 1 = 2^(d+1) - 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        # initialize the result string\n        result = ''\n        \n        # initialize the carry\n        carry = 0\n        \n        # initialize the index of num1 and num2\n        i = 0\n        j = 0\n        \n        # loop through the string\n        while i < len(num1) or j < len(num2):\n            \n            # if num1 is longer than num2, add 0 to num2\n            if i >= len(num1):\n                num2 += '0'\n                j += 1\n                continue\n            \n            # if num2 is longer than num1, add 0 to num1\n            if j >= len(num2):\n                num1 += '0'\n                i += 1\n                continue\n            \n            # add the current digit of num1 and num2\n            digit1 = num1[i]\n            digit2 = num2[j]\n            \n            # add the carry to the current digit\n            digit_sum = int(digit1) + int(digit2) + carry\n            \n            # if the sum is greater than 9, set the carry to 1\n            if digit_sum >= 10:\n                carry = 1\n            # if the sum is less than 9, set the carry to 0\n            else:\n                carry = 0\n            \n            # add the current digit to the result string\n            result += str(digit_sum % 10)\n            \n            # increment the index of num1 and num2\n            i += 1\n            j += 1\n        \n        # if the result string is empty, add 0 to it\n        if not result:\n            result += '0'\n        \n        # reverse the result string\n        result = result[::-1]\n        \n        # return the result string\n        return result"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        num, sign, total, num_next, sign_next = 0, 1, 0, 0, 1\n        for c in s:\n            if c in '+-':\n                total += num * sign_next\n                num, sign, num_next, sign_next = num_next, sign_next if c == '+' else -sign_next, 0, 1\n            elif c == ' ':\n                pass\n            elif c == '(':\n                num, sign, num_next, sign_next = num_next, sign_next, 0, 1\n            elif c == ')':\n                total += num * sign_next\n                return total\n            elif c.isdigit():\n                num = num * 10 + int(c)\n            else:\n                raise ValueError('Invalid character: %s' % c)\n        total += num * sign_next\n        return total"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits by capital\n        # profits[i] - capital[i]\n        # if profits[i] - capital[i] > 0, then profits[i] is bigger than capital[i]\n        # if profits[i] - capital[i] == 0, then profits[i] is equal to capital[i]\n        # if profits[i] - capital[i] < 0, then profits[i] is smaller than capital[i]\n        # if profits[i] is bigger than capital[i], then profits[i] is bigger than capital[i]\n        # if profits[i] is smaller than capital[i], then profits[i] is smaller than capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]\n        # if profits[i] is equal to capital[i], then profits[i] is equal to capital[i]"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) % 2 != 0:\n            return False\n        \n        if s[0] in [')',']','}']:\n            return False\n        \n        pairs = {')':'(',']':'[','}':'{'}\n        stack = [s[0]]\n        \n        for c in s[1:]:\n            if c in pairs:\n                if not stack or pairs[c] != stack.pop():\n                    return False\n            else:\n                stack.append(c)\n        \n        if stack:\n            return False\n        \n        return True"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the point where the number is in descending order\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if the number is already in descending order, reverse the whole array\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the point where the number is in ascending order\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the number and the point where the number is in ascending order\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the subarray from the point where the number is in ascending order\n        left, right = j+1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) == len(set(nums)):\n            return False\n        \n        if k >= len(nums):\n            k = len(nums) - 1\n        \n        seen = {}\n        \n        for i, num in enumerate(nums):\n            if num in seen and i - seen[num] <= k:\n                return True\n            seen[num] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        # find the max and min value in the array\n        max_val = max(nums)\n        min_val = min(nums)\n        \n        # if the max and min value are the same, return 0\n        if max_val == min_val:\n            return 0\n        \n        # calculate the gap between the max and min value\n        gap = max_val // 1000000000\n        \n        # if the gap is 0, return 0\n        if gap == 0:\n            return 0\n        \n        # create a list of buckets with the gap as the size\n        buckets = [None for _ in range(gap+1)]\n        \n        # add the numbers to the buckets\n        for num in nums:\n            # calculate the bucket index for the current number\n            bucket_index = (num - min_val) // gap\n            \n            # if the bucket is empty, add the number to the bucket\n            if buckets[bucket_index] is None:\n                buckets[bucket_index] = num\n            # if the bucket is not empty, update the max value if the current number is greater than the current max value\n            else:\n                if num > buckets[bucket_index]:\n                    buckets[bucket_index] = num\n        \n        # initialize the previous bucket index to the min value\n        prev_bucket_index = min_val // gap\n        \n        # initialize the next bucket index to the max value\n        next_bucket_index = max_val // gap\n        \n        # initialize the max gap to 0\n        max_gap = 0\n        \n        # iterate through the buckets\n        for bucket_index in range(next_bucket_index+1):\n            # if the current bucket is empty, skip it\n            if buckets[bucket_index] is None:\n                continue\n            # if the previous bucket index is empty, set the previous bucket index to the current bucket index\n            if buckets[prev_bucket_index] is None:\n                prev_bucket_index = bucket_index\n                continue\n            # if the current bucket is not empty, calculate the gap between the current and previous bucket\n            if buckets[bucket_index] is not None:\n                if buckets[bucket_index] - buckets[prev_bucket_index] > max_gap:\n                    max_gap = buckets[bucket_index] - buckets[prev_bucket_index]\n                # set the previous bucket index to the current bucket index\n                prev_bucket_index = bucket_index\n        \n        # if the next bucket index is empty, set the next bucket index to the max value\n        if buckets[next_bucket_index] is None:\n            next_bucket_index = max_val // gap\n        \n        # if the next bucket index is greater than the next bucket index, return 0\n        if next_bucket_index > next_bucket_index:\n            return 0\n        \n        # if the next bucket index is greater than the max value, return the max value minus the min value\n        if next_bucket_index > max_val:\n            return max_val - min_val\n        \n        # if the next bucket index is greater than the next bucket index, return the next bucket index minus the previous bucket index\n        return next_bucket_index - prev_bucket_index"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            new_queue = []\n            level = []\n            for node in queue:\n                level.append(node.val)\n                if node.left:\n                    new_queue.append(node.left)\n                if node.right:\n                    new_queue.append(node.right)\n            queue = new_queue\n            res.append(level)\n        \n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row) // 2\n        id2pos = {r: r // 2 if r % 2 == 0 else r // 2 + 1 for r in row}\n        ans = n\n        for r in sorted(id2pos):\n            if r_i := id2pos[r + 1]:\n                if r_j := id2pos[r + 2]:\n                    ans -= r_j // 2\n                    if r_j % 2:\n                        id2pos[r_i + 1] = r_j + 1\n                elif r_j := id2pos[r_i + 3]:\n                    id2pos[r_i + 2] = r_j + 1\n        return ans"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s2) > len(s1):\n            return self.isInterleave(s2, s1, s3)\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        if len(s1) == 1 and len(s2) == 1:\n            return s1[0] == s2[0] and s3[0] == s1[0] + s2[0]\n        \n        if len(s1) == 1:\n            if s1[0] != s3[0]:\n                return False\n            if len(s3) == 2:\n                return s2[1] == s3[1]\n            if len(s3) == 3:\n                return s2[1] == s3[2]\n            if len(s3) == 4:\n                return s2[1] == s3[3]\n            if len(s3) == 5:\n                return s2[1] == s3[4]\n            if len(s3) == 6:\n                return s2[1] == s3[5]\n            if len(s3) == 7:\n                return s2[1] == s3[6]\n            if len(s3) == 8:\n                return s2[1] == s3[7]\n            if len(s3) == 9:\n                return s2[1] == s3[8]\n            if len(s3) == 10:\n                return s2[1] == s3[9]\n            if len(s3) == 11:\n                return s2[1] == s3[10]\n            if len(s3) == 12:\n                return s2[1] == s3[11]\n            if len(s3) == 13:\n                return s2[1] == s3[12]\n            if len(s3) == 14:\n                return s2[1] == s3[13]\n            if len(s3) == 15:\n                return s2[1] == s3[14]\n            if len(s3) == 16:\n                return s2[1] == s3[15]\n            if len(s3) == 17:\n                return s2[1] == s3[16]\n            if len(s3) == 18:\n                return s2[1] == s3[17]\n            if len(s3) == 19:\n                return s2[1] == s3[18]\n            if len(s3) == 20:\n                return s2[1] == s3[19]\n            if len(s3) == 21:\n                return s2[1] == s3[20]\n            if len(s3) == 22:\n                return s2[1] == s3[21]\n            if len(s3) == 23:\n                return s2[1] == s3[22]\n            if len(s3) == 24:\n                return s2[1] == s3[23]\n            if len(s3) == 25:\n                return s2[1] == s3[24]\n            if len(s3) == 26:\n                return s2[1] == s3[25]\n            if len(s3) == 27:\n                return s2[1] == s3[26]\n            if len(s3) == 28:\n                return s2[1] == s3[27]\n            if len(s3) == 29:\n                return s2[1] == s3[28]\n            if len(s3) == 30:\n                return s2[1] == s3[29]\n            if len(s3) == 31:\n                return s2[1] == s3[30]\n            if len(s3) == 32:\n                return s2[1] == s3[31]\n            if len(s3) == 33:\n                return s2[1"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort(reverse=True)\n        s.sort(reverse=True)\n        \n        i=j=0\n        \n        while i<len(g) and j<len(s):\n            if g[i]<=s[j]:\n                i+=1\n            j+=1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a dict of each letter's index\n        # if the letter is in the word, return the index\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in the word, return -1\n        # if the letter is not in"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        # 1. reverse the nodes of the list from position left to position right\n        # 2. connect the reversed list to the right part\n        # 3. connect the reversed list to the left part\n        # 4. connect the left part to the right part\n        \n        # 1. reverse the nodes of the list from position left to position right\n        prev, cur, nxt = None, head, None\n        i = 1\n        while i < left:\n            prev = cur\n            cur = cur.next\n            nxt = nxt.next if nxt else None\n            i += 1\n        \n        # reverse the nodes of the list from position left to position right\n        prev2, cur2 = None, cur\n        nxt2 = None\n        while i <= right:\n            nxt2 = cur2.next\n            cur2.next = prev2\n            prev2 = cur2\n            cur2 = nxt2\n            i += 1\n        \n        # connect the reversed list to the right part\n        if prev:\n            prev.next = prev2\n        else:\n            head = prev2\n        \n        # connect the reversed list to the left part\n        if cur:\n            cur.next = nxt2\n        \n        # connect the left part to the right part\n        if prev:\n            prev.next = cur2\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the string\n        # reverse the string and add it to the front of the original string\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the reversed string is not a substring of the original string, then the original string is not a palindrome\n        # if the reversed string is a substring of the original string, then the original string is a palindrome\n        # if the"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        # build hash table of t\n        need = {}\n        for c in t:\n            if c not in need:\n                need[c] = 1\n            else:\n                need[c] += 1\n        \n        # try to extend the range of the window\n        valid = 0\n        # check the initial window\n        start, end = 0, 0\n        # keep track of the valid characters\n        window_valid = {}\n        # keep track of the valid characters in the range\n        window_valid_count = 0\n        # try to extend the range of the window\n        # as long as the window is within the range of s\n        while end < len(s):\n            # if the character doesn't exist in the hash table, skip\n            if s[end] not in need:\n                end += 1\n                continue\n            # if the character exists in the hash table, add it to the window\n            if s[end] in window_valid:\n                window_valid[s[end]] += 1\n                if window_valid[s[end]] == need[s[end]]:\n                    window_valid_count += 1\n            else:\n                window_valid[s[end]] = 1\n                window_valid_count += 1\n            # if the valid characters match the need, increment the valid count\n            if window_valid_count == len(need):\n                valid += 1\n                # if the valid characters match the need, increment the valid count\n                if valid == 1:\n                    start = end\n            # if the valid characters don't match the need, decrement the valid count\n            elif window_valid_count < len(need):\n                valid -= 1\n            # if the valid characters don't match the need, decrement the valid count\n            else:\n                # if the character at the start of the window is in the hash table, decrement the count\n                if window_valid[s[start]] == need[s[start]]:\n                    window_valid_count -= 1\n                    if window_valid[s[start]] == need[s[start]]:\n                        valid -= 1\n                window_valid[s[start]] -= 1\n                if window_valid[s[start]] < need[s[start]]:\n                    window_valid_count += 1\n                start += 1\n            end += 1\n        \n        # if the valid characters match the need, increment the valid count\n        if valid == len(need):\n            return s[start:end]\n        else:\n            return \"\""}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) <= 3:\n            return False\n        \n        if distance[3] == distance[1] or distance[2] == distance[4]:\n            if distance[4] >= distance[0] or distance[2] >= distance[6]:\n                if distance[5] >= distance[1] or distance[5] >= distance[9] - distance[1]:\n                    return True\n        elif distance[2] == distance[6] or distance[5] == distance[9]:\n            if distance[6] >= distance[0] or distance[5] >= distance[10]:\n                if distance[7] >= distance[2] or distance[7] >= distance[11] - distance[2]:\n                    return True\n        elif distance[5] == distance[9] or distance[6] == distance[10]:\n            if distance[7] >= distance[3] or distance[7] >= distance[12] - distance[3]:\n                if distance[8] >= distance[4] or distance[8] >= distance[13] - distance[4]:\n                    return True\n        elif distance[6] >= distance[10] - distance[9] and distance[7] >= distance[11] - distance[10]:\n            if distance[8] >= distance[12] - distance[11] and distance[9] >= distance[13] - distance[12]:\n                return True\n        else:\n            return False\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        curr = head\n        prev = None\n        \n        while curr:\n            if prev and prev.val == curr.val:\n                curr = curr.next\n            else:\n                prev = curr\n                curr = curr.next\n        \n        return head if prev is None else prev.next"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 3. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 4. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\n        # 5. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 6. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 7. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 8. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 9. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 10. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 11. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 12. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 13. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 14. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 15. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 16. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 17. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 18. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 19. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 20. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 21. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 22. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 23. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 24. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 25. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 26. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 27. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 28. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 29. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 30. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 31. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 32. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 33. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 34. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 35. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 36. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 37. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 38. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 39. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 40. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 41. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 42. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 43. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 44. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 45. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 46. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 47. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 48. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 49. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 50. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 51. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 52. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\u7684\u4e2a\u6570\u51cf1\n        # 53. \u51fa\u73b0"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        # last element of postorder is root\n        rootVal = postorder[-1]\n        rootIdx = inorder.index(rootVal)\n        \n        # all elements before root are left subtree\n        leftInorder = inorder[:rootIdx]\n        rightInorder = inorder[rootIdx+1:]\n        \n        # all elements after root are right subtree\n        leftPostorder = postorder[:-1]\n        rightPostorder = postorder[rootIdx:-1]\n        \n        # recursively build left and right subtree\n        root = TreeNode(rootVal)\n        root.left = self.buildTree(leftInorder, leftPostorder)\n        root.right = self.buildTree(rightInorder, rightPostorder)\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't reach the end, return -1\n        \n        # get all the starting points\n        # put them in a min heap\n        # pop off the min heap until you reach the end\n        # if you can't"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u524d\u7f00\u548c\n        # 2. \u4f7f\u7528\u6709\u5e8f\u96c6\u5408\u5b58\u50a8\u524d\u7f00\u548c\n        # 3. \u904d\u5386\u524d\u7f00\u548c\u6570\u7ec4\uff0c\u8ba1\u7b97\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\n        # 4. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 5. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 6. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 7. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 8. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 9. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 10. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 11. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 12. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 13. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 14. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 15. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 16. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 17. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 18. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 19. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 20. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 21. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 22. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 23. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 24. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 25. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 26. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 27. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 28. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 29. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 30. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 31. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 32. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 33. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u51cf\u5230\u7ed3\u679c\u4e2d\n        # 34. \u4f7f\u7528\u53cc\u6307\u9488\u6cd5\uff0c\u5c06\u5f53\u524d\u524d\u7f00\u548c - lower \u7684\u4e2a\u6570\u7d2f\u52a0\u5230\u7ed3\u679c\u4e2d\n        # 35. \u4f7f\u7528\u53cc\u6307\u9488"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if n is even, then the last row is incomplete\n        # if n is odd, then the last row is incomplete\n        # if n is 1, then the last row is incomplete\n        # if n is 2, then the last row is incomplete\n        # if n is 3, then the last row is incomplete\n        # if n is 4, then the last row is incomplete\n        # if n is 5, then the last row is incomplete\n        # if n is 6, then the last row is incomplete\n        # if n is 7, then the last row is incomplete\n        # if n is 8, then the last row is incomplete\n        # if n is 9, then the last row is incomplete\n        # if n is 10, then the last row is incomplete\n        # if n is 11, then the last row is incomplete\n        # if n is 12, then the last row is incomplete\n        # if n is 13, then the last row is incomplete\n        # if n is 14, then the last row is incomplete\n        # if n is 15, then the last row is incomplete\n        # if n is 16, then the last row is incomplete\n        # if n is 17, then the last row is incomplete\n        # if n is 18, then the last row is incomplete\n        # if n is 19, then the last row is incomplete\n        # if n is 20, then the last row is incomplete\n        # if n is 21, then the last row is incomplete\n        # if n is 22, then the last row is incomplete\n        # if n is 23, then the last row is incomplete\n        # if n is 24, then the last row is incomplete\n        # if n is 25, then the last row is incomplete\n        # if n is 26, then the last row is incomplete\n        # if n is 27, then the last row is incomplete\n        # if n is 28, then the last row is incomplete\n        # if n is 29, then the last row is incomplete\n        # if n is 30, then the last row is incomplete\n        # if n is 31, then the last row is incomplete\n        # if n is 32, then the last row is incomplete\n        # if n is 33, then the last row is incomplete\n        # if n is 34, then the last row is incomplete\n        # if n is 35, then the last row is incomplete\n        # if n is 36, then the last row is incomplete\n        # if n is 37, then the last row is incomplete\n        # if n is 38, then the last row is incomplete\n        # if n is 39, then the last row is incomplete\n        # if n is 40, then the last row is incomplete\n        # if n is 41, then the last row is incomplete\n        # if n is 42, then the last row is incomplete\n        # if n is 43, then the last row is incomplete\n        # if n is 44, then the last row is incomplete\n        # if n is 45, then the last row is incomplete\n        # if n is 46, then the last row is incomplete\n        # if n is 47, then the last row is incomplete\n        # if n is 48, then the last row is incomplete\n        # if n is 49, then the last row is incomplete\n        # if n is 50, then the last row is incomplete\n        # if n is 51, then the last row is incomplete\n        # if n is 52, then the last row is incomplete\n        # if n is 53, then the last row is incomplete\n        # if n is 54, then the last row is incomplete\n        # if n is 55, then the last row is incomplete\n        # if n is 56, then the last row is incomplete\n        # if n is 57, then the last row is incomplete\n        # if n is 58, then the last row is incomplete\n        # if n is 59, then the last row is incomplete\n        # if n is 60, then the last row is incomplete\n        # if n is 61, then the last row is incomplete\n        # if n is 62, then the last row is incomplete\n        # if n is 63, then the last row"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        if len(a) > len(b):\n            return len(a)\n        if len(b) > len(a):\n            return len(b)\n        return len(a)"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # reverse the list\n        rev_list = []\n        \n        # use a queue to store the nodes\n        queue = [root]\n        \n        # use a dict to store the nodes and their level\n        level_dict = {root: 0}\n        \n        # use a variable to store the current level\n        curr_level = 0\n        \n        # use a variable to store the next level\n        next_level = 0\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_level_nodes = []\n        \n        # use a variable to store the nodes at the next level\n        next_level_nodes = []\n        \n        # use a variable to store the nodes at the current level\n        curr_"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        org = x\n        \n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n            \n        return rev == org or rev // 10 == org"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        n1, n2 = 1, 1\n        for i in range(len(s) - 2, -1, -1):\n            n1, n2 = n2, n1 * (9 if s[i] != '0' else 10 + (9 if s[i+1] in '12' else 100)) + n2 * (s[i] == '1' and (s[i+1] in '0123456' or s[i+1:i+3] <= '26') else 0)\n        \n        return n2 if s[-1] != '0' else n1"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        if len(s) == 0:\n            return True\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        if i == len(s):\n            return True\n        \n        return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 2^n - 1\n}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 2:\n            return n\n        \n        a, b = 1, 2\n        \n        for i in range(3, n+1):\n            a, b = b, a+b\n        \n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # inorder traversal\n        # if the inorder traversal is sorted, it is a valid BST\n        # if the inorder traversal is not sorted, it is not a valid BST\n        # if the inorder traversal is sorted, the left subtree of the root node should be less than the root node\n        # the right subtree of the root node should be greater than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be less than the root node\n        # the right subtree of the root node should be greater than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is not sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node\n        # if the inorder traversal is sorted, the left subtree of the root node should be greater than the root node\n        # the right subtree of the root node should be less than the root node"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if intervals is empty\n        if not intervals:\n            return [newInterval]\n        \n        # if newInterval is empty\n        if not newInterval:\n            return intervals\n        \n        # if newInterval is not empty\n        # if newInterval's start is greater than intervals's end\n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        # if newInterval's end is less than intervals's start\n        if newInterval[1] < intervals[0][0]:\n            return intervals + [newInterval]\n        \n        # if newInterval's start is less than intervals's start\n        if newInterval[0] <= intervals[0][0]:\n            newInterval[0] = intervals[0][0]\n        \n        # if newInterval's end is greater than intervals's end\n        if newInterval[1] >= intervals[-1][1]:\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is greater than intervals's start\n        # and newInterval's end is less than intervals's end\n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is greater than intervals's start\n        # and newInterval's end is greater than intervals's end\n        if newInterval[0] > intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is less than intervals's start\n        # and newInterval's end is greater than intervals's end\n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is less than intervals's start\n        # and newInterval's end is less than intervals's end\n        if newInterval[0] < intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is greater than intervals's start\n        # and newInterval's end is less than intervals's end\n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is less than intervals's start\n        # and newInterval's end is greater than intervals's end\n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is greater than intervals's start\n        # and newInterval's end is less than intervals's end\n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is less than intervals's start\n        # and newInterval's end is greater than intervals's end\n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            newInterval[0] = intervals[0][0]\n            newInterval[1] = intervals[-1][1]\n        \n        # if newInterval's start is greater than intervals's start\n        # and newInterval's end is less than intervals's end\n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            newInterval[0] = intervals[0][0]"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u56de\u6587\u5b50\u4e32\u95ee\u9898\n        # 2. \u56de\u6eaf\u7b97\u6cd5\n        # 3. \u52a8\u6001\u89c4\u5212\n        \n        # \u56de\u6eaf\u7b97\u6cd5\n        # 1. \u56de\u6eaf\u7b97\u6cd5\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5728\u641c\u7d22\u7684\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u67d0\u4e00\u6b65\u7684\u641c\u7d22\u5df2\u7ecf\u65e0\u6cd5\u518d\u6df1\u5165\u4e0b\u53bb\uff0c\u5219\u56de\u9000\u5230\u4e0a\u4e00\u6b65\uff0c\n        # \u5e76\u4e14\u628a\u4e0a\u4e00\u6b65\u7684\u7ed3\u679c\u72b6\u6001\u4fdd\u5b58\u8d77\u6765\uff0c\u4ee5\u5907\u4e0b\u4e00\u6b65\u4f7f\u7528\u3002\n        # 2. \u56de\u6eaf\u7b97\u6cd5\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\n        # 2.1 \u9012\u5f52\u5b9e\u73b0\n        # 2.2 \u8fed\u4ee3\u5b9e\u73b0\n        \n        # 3. \u52a8\u6001\u89c4\u5212\n        # 3.1 \u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\n        # \u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 3.2 \u52a8\u6001\u89c4\u5212\u7684\u5b9e\u73b0\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a\n        # 3.2.1 \u9012\u5f52\u5b9e\u73b0\n        # 3.2.2 \u8fed\u4ee3\u5b9e\u73b0\n        \n        # \u56de\u6587\u5b50\u4e32\u95ee\u9898\n        # 1. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u662f\u5b57\u7b26\u4e32\u95ee\u9898\u4e2d\u6700\u7ecf\u5178\u7684\u4e86\uff0c\u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\u3002\n        # 2. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 3. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 4. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 5. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 6. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 7. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 8. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 9. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 10. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212\u6765\u89e3\u51b3\uff0c\u52a8\u6001\u89c4\u5212\u7684\u57fa\u672c\u601d\u60f3\u662f\uff1a\u5c06\u4e00\u4e2a\u590d\u6742\u7684\u95ee\u9898\u5206\u89e3\u6210\u4e00\u4e2a\u6216\u591a\u4e2a\u5b50\u95ee\u9898\uff0c\n        # \u8fd9\u4e9b\u5b50\u95ee\u9898\u88ab\u5206\u89e3\u6210\u66f4\u5c0f\u7684\u5b50\u95ee\u9898\uff0c\u76f4\u5230\u4e0d\u80fd\u518d\u5206\u89e3\u4e3a\u6b62\uff0c\u8fd9\u4e9b\u6700\u5c0f\u5b50\u95ee\u9898\u88ab\u7ec4\u5408\u6210\u4e00\u4e2a\u6700\u7ec8\u7684\u89e3\u3002\n        # 11. \u56de\u6587\u5b50\u4e32\u95ee\u9898\u53ef\u4ee5\u7528\u52a8\u6001\u89c4\u5212"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u627e\u5230\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n        # 2. \u5c06\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 3. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 4. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 5. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 6. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 7. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 8. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 9. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 10. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 11. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 12. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 13. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 14. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 15. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 16. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 17. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 18. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 19. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 20. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 21. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 22. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 23. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 24. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 25. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 26. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 27. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 28. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 29. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 30. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 31. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 32. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 33. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 34. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 35. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 36. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 37. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 38. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 39. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 40. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4\u4e2d\n        # 41. \u5c06\u6570\u7ec4\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\n        # 42. \u5c06\u4f18\u5148\u7ea7\u961f\u5217\u4e2d\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u653e\u5165\u4e00\u4e2a\u6570\u7ec4"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1000 / 15 = 62.5\n        # 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # 1. sort all the values in the array\n        # 2. use binary search to find the minimum time to swim to the end\n        # 3. if the minimum time is greater than the maximum value in the array,\n        #    return the maximum value in the array\n        \n        # sort the values in the array\n        values = sorted([grid[i][j] for i in range(n) for j in range(n) if i < j])\n        \n        # use binary search to find the minimum time to swim to the end\n        low, high = 0, values[-1]\n        \n        # if the minimum time is greater than the maximum value in the array,\n        #   return the maximum value in the array\n        if high > n * n - 1:\n            return high\n        \n        # use binary search to find the minimum time to swim to the end\n        while low < high:\n            mid = (low + high) // 2\n            if self.canSwim(grid, mid, n):\n                high = mid\n            else:\n                low = mid + 1\n        \n        # return the minimum time to swim to the end\n        return low\n    \n    def canSwim(self, grid, time, n):\n        # use breadth-first search to find the minimum time to swim to the end\n        seen = {(0, 0)}\n        q = deque([(0, 0)])\n        seen.add((0, 0))\n        if grid[0][0] > time:\n            return False\n        while q:\n            i, j = q.popleft()\n            if i == j == n - 1:\n                return True\n            if i < j:\n                if j + 1 < n and grid[j + 1][i] <= time:\n                    seen.add((j + 1, i))\n                    q.append((j + 1, i))\n                if i + 1 < n and grid[i + 1][j] <= time:\n                    seen.add((i + 1, j))\n                    q.append((i + 1, j))\n            else:\n                if i + 1 < n and grid[i + 1][j] <= time:\n                    seen.add((i + 1, j))\n                    q.append((i + 1, j))\n                if j + 1 < n and grid[j + 1][i] <= time:\n                    seen.add((j + 1, i))\n                    q.append((j + 1, i))\n        return False"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m or n is 1, then only 1 way to reach the end\n        if m == 1 or n == 1:\n            return 1\n        \n        # if m or n is 2, then there are 2 ways to reach the end\n        # either we take a step right or down\n        if m == 2 or n == 2:\n            return 2\n        \n        # if m or n is 3, then there are 3 ways to reach the end\n        # either we take a step right or down, or we take a step down and then a step right\n        if m == 3 or n == 3:\n            return 3\n        \n        # if m or n is 4, then there are 4 ways to reach the end\n        # either we take a step right or down, or we take a step down and then a step right, or we take a step right and then a step down, or we take a step down and then a step right and then a step down\n        if m == 4 or n == 4:\n            return 4\n        \n        # if m or n is 5, then there are 5 ways to reach the end\n        # either we take a step right or down, or we take a step down and then a step right, or we take a step right and then a step down, or we take a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down\n        if m == 5 or n == 5:\n            return 5\n        \n        # if m or n is 6, then there are 6 ways to reach the end\n        # either we take a step right or down, or we take a step down and then a step right, or we take a step right and then a step down, or we take a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take a step right and then a step down and then a step right and then a step down, or we take"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        if num1 < num2:\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = \"0\"\n        for i in range(len(num2)):\n            if num2[i] == \"0\":\n                continue\n            curr = \"0\"\n            j = i\n            carry = 0\n            while j < len(num1):\n                product = int(num1[j]) * int(num2[i]) + carry\n                curr = str(product % 10) + curr\n                carry = product // 10\n                j += 1\n            if carry:\n                curr = str(carry) + curr\n            if i > 0:\n                curr = addStrings(res, curr)\n            res = curr\n        return res"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     elif prices[i] > buy:\n        #         profit += prices[i] - buy\n        #         buy = prices[i]\n        \n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # sell = 0\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     elif prices[i] > sell:\n        #         sell = prices[i]\n        #         profit += sell - buy\n        #         buy = prices[i]\n        \n        # if sell > buy:\n        #     profit += sell - buy\n        \n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # sell = 0\n        # prev_sell = 0\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     elif prices[i] > sell:\n        #         sell = prices[i]\n        #         profit += sell - buy\n        #         buy = prices[i]\n        #         prev_sell = sell\n        \n        # if sell > buy:\n        #     profit += sell - buy\n        \n        # if prev_sell > buy:\n        #     profit += prev_sell - buy\n        \n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # sell = 0\n        # prev_sell = 0\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     elif prices[i] > sell:\n        #         sell = prices[i]\n        #         profit += sell - buy\n        #         buy = prices[i]\n        #         prev_sell = sell\n        \n        # if sell > buy:\n        #     profit += sell - buy\n        \n        # if prev_sell > buy:\n        #     profit += prev_sell - buy\n        \n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # sell = 0\n        # prev_sell = 0\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     elif prices[i] > sell:\n        #         sell = prices[i]\n        #         profit += sell - buy\n        #         buy = prices[i]\n        #         prev_sell = sell\n        \n        # if sell > buy:\n        #     profit += sell - buy\n        \n        # if prev_sell > buy:\n        #     profit += prev_sell - buy\n        \n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # sell = 0\n        # prev_sell = 0\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     elif prices[i] > sell:\n        #         sell = prices[i]\n        #         profit += sell - buy\n        #         buy = prices[i]\n        #         prev_sell = sell\n        \n        # if sell > buy:\n        #     profit += sell - buy\n        \n        # if prev_s"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        if not candidates or candidates[0] > target:\n            return []\n        if candidates[0] == target:\n            return [[target]]\n        \n        res = []\n        path = []\n        used = [0] * len(candidates)\n        \n        self.dfs(candidates, target, used, path, res)\n        \n        return res\n    \n    def dfs(self, candidates, target, used, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(list(path))\n            return\n        \n        for i in xrange(len(used)):\n            if used[i]:\n                continue\n            used[i] = 1\n            path.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], used, path, res)\n            used[i] = 0\n            path.pop()"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper():\n            return True\n        if word.islower():\n            return True\n        if word[0].isupper() and word[1:].islower():\n            return True\n        return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = prices[0]\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative Solution\n        # if root is None:\n        #     return []\n        # stack = []\n        # res = []\n        # cur = root\n        # while stack or cur:\n        #     if cur:\n        #         stack.append(cur)\n        #         cur = cur.left\n        #     else:\n        #         cur = stack.pop()\n        #         res.append(cur.val)\n        #         cur = cur.right\n        # return res\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # res = self.inorder(root, res)\n        # return res\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # res.append(root.val)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # return res\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # res.append(root.val)\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # return res\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # res.append(root.val)\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # return res[::-1]\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # res.append(root.val)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # return res[::-1]\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # res.append(root.val)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # return res[::-1]\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # res.append(root.val)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # return res[::-1]\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # res.append(root.val)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # return res[::-1]\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # res.append(root.val)\n        # if root.left:\n        #     res = self.inorder(root.left, res)\n        # return res[::-1]\n        \n        # Recursive Solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res = self.inorder(root.right, res)\n        # res.append(root"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder or not inorder:\n            return None\n        \n        # create a hashmap to store the inorder values and their indices\n        inorder_map = {val: idx for idx, val in enumerate(inorder)}\n        \n        # set the root node\n        root = TreeNode(preorder[0])\n        \n        # set the preorder index to 1 since the first element is the root node\n        preorder_idx = 1\n        \n        # set the inorder index to the inorder_map value of the root node\n        inorder_idx = inorder_map[preorder[0]]\n        \n        # iterate through the preorder array\n        # if the preorder value is less than the inorder value, it means we have a left subtree\n        # if the preorder value is greater than the inorder value, it means we have a right subtree\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it means we have a leaf node\n        # if the preorder value is equal to the inorder value, it"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u627e\u51fa\u6700\u5c11\u5220\u9664\u7684\u53f3\u62ec\u53f7\u548c\u5de6\u62ec\u53f7\n        # 2. \u627e\u51fa\u6700\u957f\u6709\u6548\u62ec\u53f7\u7684\u957f\u5ea6\n        # 3. \u4ece\u6700\u957f\u6709\u6548\u62ec\u53f7\u7684\u957f\u5ea6\u5411\u524d\u904d\u5386\uff0c\u5982\u679c\u9047\u5230\u5de6\u62ec\u53f7\uff0c\u5219\u5220\u9664\u5de6\u62ec\u53f7\n        # 4. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 5. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 6. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 7. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 8. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 9. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 10. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 11. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 12. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 13. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 14. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 15. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 16. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 17. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 18. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 19. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 20. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 21. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 22. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 23. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 24. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 25. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 26. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 27. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 28. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 29. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 30. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 31. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 32. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 33. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 34. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 35. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 36. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 37. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 38. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 39. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 40. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 41. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 42. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 43. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6709\u6548\u62ec\u53f7\n        # 44. \u5982\u679c\u9047\u5230\u53f3\u62ec\u53f7\uff0c\u5219\u68c0\u67e5\u662f\u5426\u4e3a\u6700\u957f\u6709\u6548\u62ec\u53f7\n        # 45. \u5982\u679c\u4e0d\u662f\u6700\u957f\u6709\u6548\u62ec\u53f7\uff0c\u5219"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        import heapq\n        h = []\n        root = cur = ListNode(None)\n        for l in lists:\n            if l:\n                heapq.heappush(h, (l.val, l))\n        \n        while h:\n            val, node = heapq.heappop(h)\n            if node is None:\n                continue\n            cur.next = node\n            cur = node\n            if node.next:\n                heapq.heappush(h, (node.next.val, node.next))\n        \n        return root.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 2. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 3. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 4. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 5. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 6. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 7. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 8. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 9. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 10. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 11. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 12. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 13. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 14. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 15. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 16. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 17. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 18. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 19. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 20. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 21. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 22. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 23. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 24. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 25. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 26. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 27. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 28. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 29. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 30. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 31. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 32. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 33. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 34. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 35. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 36. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 37. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 38. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 39. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 40. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 41. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 42. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 43. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 44. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 45. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 46. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 47. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 48. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 49. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 50. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 51. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 52. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 53. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 54. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 55. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 56. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 57. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 58. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 59. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 60. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 61. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 62. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 63. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 64. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 65. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 66. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 67. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 68. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 69. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 70. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 71. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 72. \u56de\u6587\u5b50\u4e32\u4e2a\u6570\n        # 73. \u56de\u6587\u5b50\u4e32\u957f\u5ea6\n        # 74. \u56de\u6587\u5b50\u4e32"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a dict with word as key and index as value\n        word_to_index = {word: i for i, word in enumerate(words)}\n        # create an empty dict to store reversed words\n        reversed_words = {}\n        # iterate over the words in the dict\n        for word in words:\n            # reverse the word\n            reversed_word = word[::-1]\n            # if the reversed word is already in the dict, add the index to the list\n            if reversed_word in reversed_words:\n                reversed_words[reversed_word].append(word_to_index[word])\n            # if the reversed word is not in the dict, add it to the dict with the word as key and the index as value\n            else:\n                reversed_words[reversed_word] = [word_to_index[word]]\n        \n        # create an empty list to store the pairs\n        pairs = []\n        # iterate over the words in the dict\n        for word in words:\n            # reverse the word\n            reversed_word = word[::-1]\n            # if the reversed word is not in the dict, add it to the dict with the word as key and the index as value\n            if reversed_word in reversed_words:\n                # if the reversed word is the same as the word, add the index to the list\n                if word == reversed_word:\n                    pairs.append([word_to_index[word], word_to_index[word]])\n                # if the reversed word is not the same as the word, add the index to the list\n                else:\n                    pairs.append([word_to_index[word], reversed_words[reversed_word][0]])\n            # if the reversed word is not in the dict, add it to the dict with the word as key and the index as value\n            else:\n                # if the word is the same as the reversed word, add the index to the list\n                if word == reversed_word:\n                    pairs.append([word_to_index[word], word_to_index[word]])\n                # if the word is not the same as the reversed word, add the index to the list\n                else:\n                    pairs.append([word_to_index[word], word_to_index[word]])\n        \n        # sort the pairs by the length of the words\n        pairs.sort(key=lambda x: -len(words[x[0]]))\n        \n        # create an empty list to store the pairs\n        result = []\n        # iterate over the pairs\n        for i, pair in enumerate(pairs):\n            # if the word at index 0 is the same as the word at index 1, add the pair to the list\n            if pair[0] == pair[1]:\n                if pair[0] != word_to_index[words[pair[0]]]:\n                    result.append([pair[0], pair[1]])\n            # if the word at index 0 is not the same as the word at index 1, add the pair to the list\n            else:\n                result.append([pair[1], pair[0]])\n        \n        # return the result\n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        \n        root = TreeNode(nums[mid])\n        \n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u611f\u67d3\u75c5\u6bd2\n        # 2. \u611f\u67d3\u75c5\u6bd2\n        # 3. \u611f\u67d3\u75c5\u6bd2\n        # 4. \u611f\u67d3\u75c5\u6bd2\n        # 5. \u611f\u67d3\u75c5\u6bd2\n        # 6. \u611f\u67d3\u75c5\u6bd2\n        # 7. \u611f\u67d3\u75c5\u6bd2\n        # 8. \u611f\u67d3\u75c5\u6bd2\n        # 9. \u611f\u67d3\u75c5\u6bd2\n        # 10. \u611f\u67d3\u75c5\u6bd2\n        # 11. \u611f\u67d3\u75c5\u6bd2\n        # 12. \u611f\u67d3\u75c5\u6bd2\n        # 13. \u611f\u67d3\u75c5\u6bd2\n        # 14. \u611f\u67d3\u75c5\u6bd2\n        # 15. \u611f\u67d3\u75c5\u6bd2\n        # 16. \u611f\u67d3\u75c5\u6bd2\n        # 17. \u611f\u67d3\u75c5\u6bd2\n        # 18. \u611f\u67d3\u75c5\u6bd2\n        # 19. \u611f\u67d3\u75c5\u6bd2\n        # 20. \u611f\u67d3\u75c5\u6bd2\n        # 21. \u611f\u67d3\u75c5\u6bd2\n        # 22. \u611f\u67d3\u75c5\u6bd2\n        # 23. \u611f\u67d3\u75c5\u6bd2\n        # 24. \u611f\u67d3\u75c5\u6bd2\n        # 25. \u611f\u67d3\u75c5\u6bd2\n        # 26. \u611f\u67d3\u75c5\u6bd2\n        # 27. \u611f\u67d3\u75c5\u6bd2\n        # 28. \u611f\u67d3\u75c5\u6bd2\n        # 29. \u611f\u67d3\u75c5\u6bd2\n        # 30. \u611f\u67d3\u75c5\u6bd2\n        # 31. \u611f\u67d3\u75c5\u6bd2\n        # 32. \u611f\u67d3\u75c5\u6bd2\n        # 33. \u611f\u67d3\u75c5\u6bd2\n        # 34. \u611f\u67d3\u75c5\u6bd2\n        # 35. \u611f\u67d3\u75c5\u6bd2\n        # 36. \u611f\u67d3\u75c5\u6bd2\n        # 37. \u611f\u67d3\u75c5\u6bd2\n        # 38. \u611f\u67d3\u75c5\u6bd2\n        # 39. \u611f\u67d3\u75c5\u6bd2\n        # 40. \u611f\u67d3\u75c5\u6bd2\n        # 41. \u611f\u67d3\u75c5\u6bd2\n        # 42. \u611f\u67d3\u75c5\u6bd2\n        # 43. \u611f\u67d3\u75c5\u6bd2\n        # 44. \u611f\u67d3\u75c5\u6bd2\n        # 45. \u611f\u67d3\u75c5\u6bd2\n        # 46. \u611f\u67d3\u75c5\u6bd2\n        # 47. \u611f\u67d3\u75c5\u6bd2\n        # 48. \u611f\u67d3\u75c5\u6bd2\n        # 49. \u611f\u67d3\u75c5\u6bd2\n        # 50. \u611f\u67d3\u75c5\u6bd2\n        # 51. \u611f\u67d3\u75c5\u6bd2\n        # 52. \u611f\u67d3\u75c5\u6bd2\n        # 53. \u611f\u67d3\u75c5\u6bd2\n        # 54. \u611f\u67d3\u75c5\u6bd2\n        # 55. \u611f\u67d3\u75c5\u6bd2\n        # 56. \u611f\u67d3\u75c5\u6bd2\n        # 57. \u611f\u67d3\u75c5\u6bd2\n        # 58. \u611f\u67d3\u75c5\u6bd2\n        # 59. \u611f\u67d3\u75c5\u6bd2\n        # 60. \u611f\u67d3\u75c5\u6bd2\n        # 61. \u611f\u67d3\u75c5\u6bd2\n        # 62. \u611f\u67d3\u75c5\u6bd2\n        # 63. \u611f\u67d3\u75c5\u6bd2\n        # 64. \u611f\u67d3\u75c5\u6bd2\n        # 65. \u611f\u67d3\u75c5\u6bd2\n        # 66. \u611f\u67d3\u75c5\u6bd2\n        # 67. \u611f\u67d3\u75c5\u6bd2\n        # 68. \u611f\u67d3\u75c5\u6bd2\n        # 69. \u611f\u67d3\u75c5\u6bd2\n        # 70. \u611f\u67d3\u75c5\u6bd2\n        # 71. \u611f\u67d3\u75c5\u6bd2\n        # 72. \u611f\u67d3\u75c5\u6bd2\n        # 73. \u611f\u67d3\u75c5\u6bd2\n        # 74. \u611f\u67d3\u75c5\u6bd2\n        # 75. \u611f\u67d3\u75c5\u6bd2\n        # 76. \u611f\u67d3\u75c5\u6bd2\n        # 77. \u611f\u67d3\u75c5\u6bd2\n        # 78. \u611f\u67d3\u75c5\u6bd2\n        # 79. \u611f\u67d3\u75c5\u6bd2\n        # 80. \u611f\u67d3\u75c5\u6bd2\n        # 81. \u611f\u67d3\u75c5\u6bd2\n        # 82. \u611f\u67d3\u75c5\u6bd2\n        # 83. \u611f\u67d3\u75c5\u6bd2\n        # 84. \u611f\u67d3\u75c5\u6bd2\n        # 85. \u611f\u67d3\u75c5\u6bd2\n        # 86. \u611f\u67d3\u75c5\u6bd2\n        # 87. \u611f\u67d3\u75c5\u6bd2\n        # 88. \u611f\u67d3\u75c5\u6bd2\n        # 89. \u611f\u67d3\u75c5\u6bd2\n        # 90. \u611f\u67d3\u75c5\u6bd2\n        # 91. \u611f\u67d3\u75c5\u6bd2\n        # 92. \u611f\u67d3\u75c5\u6bd2\n        # 93. \u611f\u67d3\u75c5\u6bd2\n        # 94. \u611f\u67d3\u75c5\u6bd2\n        # 95. \u611f\u67d3\u75c5\u6bd2\n        # 96. \u611f\u67d3\u75c5\u6bd2\n        # 97. \u611f\u67d3\u75c5\u6bd2\n        # 98. \u611f\u67d3\u75c5\u6bd2\n        # 99. \u611f\u67d3\u75c5\u6bd2\n        # 100. \u611f\u67d3\u75c5\u6bd2\n        # 101. \u611f\u67d3\u75c5\u6bd2\n        # 102. \u611f\u67d3\u75c5\u6bd2\n        # 103. \u611f\u67d3\u75c5\u6bd2"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        v = {}\n        ans = 0\n        \n        def dfs(i, j):\n            if (i, j) not in v:\n                v[i, j] = vj if (vj := matrix[i][j]) is None else 1\n                if i > 0 and vj < matrix[i - 1][j]:\n                    if vj + 1 == matrix[i - 1][j]:\n                        v[i, j] = v[i - 1, j] + 1\n                    else:\n                        v[i, j] = max(v[i, j], dfs(i - 1, j) + 1)\n                if j > 0 and vj < matrix[i][j - 1]:\n                    if vj + 1 == matrix[i][j - 1]:\n                        v[i, j] = v[i, j - 1] + 1\n                    else:\n                        v[i, j] = max(v[i, j], dfs(i, j - 1) + 1)\n                if i < m - 1 and vj < matrix[i + 1][j]:\n                    if vj + 1 == matrix[i + 1][j]:\n                        v[i, j] = v[i + 1, j] + 1\n                    else:\n                        v[i, j] = max(v[i, j], dfs(i + 1, j) + 1)\n                if j < n - 1 and vj < matrix[i][j + 1]:\n                    if vj + 1 == matrix[i][j + 1]:\n                        v[i, j] = v[i, j + 1] + 1\n                    else:\n                        v[i, j] = max(v[i, j], dfs(i, j + 1) + 1)\n                ans = max(ans, v[i, j])\n            return v[i, j]\n        \n        for i in range(m):\n            for j in range(n):\n                ans = max(ans, dfs(i, j))\n        \n        return ans"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n <= 0:\n            return 0\n        \n        # 10^x\n        # 10^(x-1) * 10\n        # 10^(x-2) * 100\n        # 10^(x-3) * 1000\n        # 10^(x-4) * 10000\n        # 10^(x-5) * 100000\n        # 10^(x-6) * 1000000\n        # 10^(x-7) * 10000000\n        # 10^(x-8) * 100000000\n        # 10^(x-9) * 1000000000\n        # 10^(x-10) * 10000000000\n        # 10^(x-11) * 100000000000\n        # 10^(x-12) * 1000000000000\n        # 10^(x-13) * 10000000000000\n        # 10^(x-14) * 100000000000000\n        # 10^(x-15) * 1000000000000000\n        # 10^(x-16) * 10000000000000000\n        # 10^(x-17) * 100000000000000000\n        # 10^(x-18) * 1000000000000000000\n        # 10^(x-19) * 10000000000000000000\n        # 10^(x-20) * 100000000000000000000\n        # 10^(x-21) * 1000000000000000000000\n        # 10^(x-22) * 10000000000000000000000\n        # 10^(x-23) * 100000000000000000000000\n        # 10^(x-24) * 1000000000000000000000000\n        # 10^(x-25) * 10000000000000000000000000\n        # 10^(x-26) * 100000000000000000000000000\n        # 10^(x-27) * 1000000000000000000000000000\n        # 10^(x-28) * 10000000000000000000000000000\n        # 10^(x-29) * 100000000000000000000000000000\n        # 10^(x-30) * 1000000000000000000000000000000\n        # 10^(x-31) * 10000000000000000000000000000000\n        # 10^(x-32) * 10000"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            size = len(queue)\n            \n            for i in range(size):\n                node = queue.pop(0)\n                \n                if node:\n                    level.append(node.val)\n                    if node.left:\n                        queue.append(node.left)\n                    if node.right:\n                        queue.append(node.right)\n            \n            if not left_to_right:\n                level = level[::-1]\n            \n            res.append(level)\n            left_to_right = not left_to_right\n        \n        return res"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 9:\n            return []\n        \n        if turnedOn == 0:\n            return [\"0:00\"]\n        \n        if turnedOn == 9:\n            return [\"8:01\",\"4:09\",\"2:02\",\"1:03\",\"0:04\",\"0:05\",\"0:06\",\"0:08\",\"0:10\",\"0:20\",\"0:40\",\"0:80\"]\n        \n        if turnedOn == 10:\n            return [\"11:01\",\"6:06\",\"2:02\",\"1:03\",\"0:04\",\"0:05\",\"0:06\",\"0:08\",\"0:10\",\"0:20\",\"0:40\",\"0:80\",\"0:16\",\"0:32\",\"0:64\",\"0:128\",\"0:256\",\"0:512\",\"0:1024\",\"0:2048\",\"0:4096\",\"0:8192\",\"0:16384\",\"0:32768\",\"0:65536\",\"0:131072\",\"0:262144\",\"0:524288\",\"0:1048576\"]\n        \n        if turnedOn == 11:\n            return [\"11:01\",\"6:06\",\"2:02\",\"1:03\",\"0:04\",\"0:05\",\"0:06\",\"0:08\",\"0:10\",\"0:20\",\"0:40\",\"0:80\",\"0:16\",\"0:32\",\"0:64\",\"0:128\",\"0:256\",\"0:512\",\"0:1024\",\"0:2048\",\"0:4096\",\"0:8192\",\"0:16384\",\"0:32768\",\"0:65536\",\"0:131072\",\"0:262144\",\"0:524288\",\"0:1048576\",\"0:2097152\",\"0:4194304\",\"0:8388608\",\"0:16777216\",\"0:33554432\",\"0:67108864\",\"0:134217728\",\"0:268435456\",\"0:536870912\",\"0:1073741824\",\"0:2147483648\"]\n        \n        if turnedOn == 12:\n            return [\"11:01\",\"6:06\",\"2:02\",\"1:03\",\"0:04\",\"0:05\",\"0:06\",\"0:08\",\"0:10\",\"0:20\",\"0:40\",\"0:80\",\"0:16\",\"0:32\",\"0:64\",\"0:128\",\"0:256\",\"0:512\",\"0:1024\",\"0:2048\",\"0:4096\",\"0:8192\",\"0:16384\",\"0:32768\",\"0:65536\",\"0:131072\",\"0:262144\",\"0:524288\",\"0:1048576\",\"0:2097152\",\"0:4194304\",\"0:8388608\",\"0:16777216\",\"0:33554432\",\"0:67108864\",\"0:134217728\",\"0:268435456\",\"0:536870912\",\"0:1073741824\",\"0:2147483648\",\"0:4294967296\",\"0:8589934592\",\"0:17179869184\",\"0:34359738368\",\"0:68719476736\",\"0:137438"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        \n        pascal = [[1],[1,1]]\n        \n        if numRows > 2:\n            for i in range(2,numRows):\n                row = [1]\n                prevRow = pascal[i-1]\n                for j in range(len(prevRow)-1):\n                    row.append(prevRow[j]+prevRow[j+1])\n                row.append(1)\n                pascal.append(row)\n        \n        return pascal"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 3^19 = 1162261467 is the largest 3^x we can have\n        # if n is a power of 3, n must be a multiple of 3\n        # if n % 3 == 0, then n is a multiple of 3\n        # if n is a power of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a power of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n/3 must be a multiple of 3\n        # if n is a multiple of 3, then n"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = -2**31\n        self.max_gain(root)\n        return self.max_sum\n    \n    def max_gain(self, root):\n        if not root:\n            return 0\n        \n        left_gain = max(self.max_gain(root.left), 0)\n        right_gain = max(self.max_gain(root.right), 0)\n        \n        # current_sum is non-negative for all root, leaf, and non-leaf nodes\n        current_sum = root.val + left_gain + right_gain\n        \n        # if current_sum is less than the sum we've seen so far, update accordingly\n        if current_sum > self.max_sum:\n            self.max_sum = current_sum\n        \n        # finally, return the max gain if it's positive. Note that if the node is a leaf\n        # then left/right gains are considered 0\n        return root.val + max(left_gain, right_gain)"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        n, m = len(heightMap), len(heightMap[0])\n        # 3 pointers\n        # 1. left, right: the boundaries of the water area\n        # 2. up, down: the boundaries of the water area\n        # 3. visited: visited cells\n        left, right = [0] * n, [m - 1] * n\n        up, down = [0] * m, [n - 1] * m\n        visited = set()\n        \n        # 1. initialize the boundaries\n        for i in range(n):\n            visited.add((i, left[i]))\n            visited.add((i, right[i]))\n        for j in range(m):\n            visited.add((up[j], j))\n            visited.add((down[j], j))\n        \n        # 2. initialize the water area\n        water = 0\n        # 3. initialize the water area\n        # 4. initialize the water area\n        # 5. initialize the water area\n        # 6. initialize the water area\n        # 7. initialize the water area\n        # 8. initialize the water area\n        # 9. initialize the water area\n        # 10. initialize the water area\n        # 11. initialize the water area\n        # 12. initialize the water area\n        # 13. initialize the water area\n        # 14. initialize the water area\n        # 15. initialize the water area\n        # 16. initialize the water area\n        # 17. initialize the water area\n        # 18. initialize the water area\n        # 19. initialize the water area\n        # 20. initialize the water area\n        # 21. initialize the water area\n        # 22. initialize the water area\n        # 23. initialize the water area\n        # 24. initialize the water area\n        # 25. initialize the water area\n        # 26. initialize the water area\n        # 27. initialize the water area\n        # 28. initialize the water area\n        # 29. initialize the water area\n        # 30. initialize the water area\n        # 31. initialize the water area\n        # 32. initialize the water area\n        # 33. initialize the water area\n        # 34. initialize the water area\n        # 35. initialize the water area\n        # 36. initialize the water area\n        # 37. initialize the water area\n        # 38. initialize the water area\n        # 39. initialize the water area\n        # 40. initialize the water area\n        # 41. initialize the water area\n        # 42. initialize the water area\n        # 43. initialize the water area\n        # 44. initialize the water area\n        # 45. initialize the water area\n        # 46. initialize the water area\n        # 47. initialize the water area\n        # 48. initialize the water area\n        # 49. initialize the water area\n        # 50. initialize the water area\n        # 51. initialize the water area\n        # 52. initialize the water area\n        # 53. initialize the water area\n        # 54. initialize the water area\n        # 55. initialize the water area\n        # 56. initialize the water area\n        # 57. initialize the water area\n        # 58. initialize the water area\n        # 59. initialize the water area\n        # 60. initialize the water area\n        # 61. initialize the water area\n        # 62. initialize the water area\n        # 63. initialize the water area\n        # 64. initialize the water area\n        # 65. initialize the water area\n        # 66. initialize the water area\n        # 67. initialize the water area\n        # 68. initialize the water area\n        # 69. initialize the water area\n        # 70. initialize the water area\n        # 71. initialize the water area\n        # 72. initialize the water area\n        # 73. initialize the water area\n        # 74. initialize the water area\n        # 75. initialize the water area"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(e for e in s if e.isalnum())\n        \n        # reverse the string\n        s = s[::-1]\n        \n        # check if the reversed string is the same as the original string\n        return s.lower() == s[::-1].lower()"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        if len(nums) < k:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        if k == len(nums):\n            return [(nums[i] + nums[i+1]) / 2.0 for i in range(len(nums) - 1)]\n        \n        if k % 2 == 0:\n            median = (nums[k // 2 - 1] + nums[k // 2]) / 2.0\n        else:\n            median = nums[k // 2]\n        \n        medians = [median]\n        \n        if k < len(nums):\n            if k % 2 == 0:\n                if nums[k // 2 - 1] > nums[k // 2]:\n                    median = (median + nums[k // 2 - 1] - nums[k // 2]) / 2.0\n                else:\n                    median = (median + nums[k // 2] - nums[k // 2 - 1]) / 2.0\n            else:\n                if nums[k // 2] > nums[k // 2 - 1]:\n                    median = median + nums[k // 2] - nums[k // 2 - 1]\n                else:\n                    median = median + nums[k // 2 - 1] - nums[k // 2]\n        \n            medians.append(median)\n        \n        left = 0\n        right = k\n        \n        while right < len(nums):\n            if nums[left] > medians[0]:\n                medians[0] = nums[left]\n            if nums[right] > medians[0]:\n                medians[0] = nums[right]\n            \n            if left < right:\n                if nums[left + 1] < medians[0]:\n                    medians[0] = nums[left + 1]\n                if nums[right - 1] < medians[0]:\n                    medians[0] = nums[right - 1]\n            \n            left += 1\n            right += 1\n        \n            if left < right:\n                if nums[left] > medians[1]:\n                    medians[1] = nums[left]\n                if nums[right - 1] > medians[1]:\n                    medians[1] = nums[right - 1]\n            \n            if left < right:\n                if nums[left + 1] < medians[1]:\n                    medians[1] = nums[left + 1]\n                if nums[right] < medians[1]:\n                    medians[1] = nums[right]\n            \n            if left < right:\n                if nums[left + 2] < medians[2]:\n                    medians[2] = nums[left + 2]\n                if nums[right - 1] < medians[2]:\n                    medians[2] = nums[right - 1]\n            \n            if left < right:\n                if nums[left + 3] < medians[2]:\n                    medians[2] = nums[left + 3]\n                if nums[right - 2] < medians[2]:\n                    medians[2] = nums[right - 2]\n            \n            if left < right:\n                if nums[left + 4] < medians[3]:\n                    medians[3] = nums[left + 4]\n                if nums[right - 3] < medians[3]:\n                    medians[3] = nums[right - 3]\n            \n            if left < right:\n                if nums[left + 5] < medians[3]:\n                    medians[3] = nums[left + 5]\n                if nums[right - 4] < medians[3]:\n                    medians[3] = nums[right - 4]\n            \n            if left < right:\n                if nums[left + 6] < medians[4]:\n                    medians[4] = nums[left + 6]\n                if nums[right - 5] < medians[4]:\n                    medians[4] = nums[right - 5]"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        length = 0\n        cur = head\n        last = None\n        \n        # find length of linked list\n        while cur:\n            length += 1\n            last = cur\n            cur = cur.next\n        \n        # if k is greater than length of linked list, make k modulo length of linked list\n        if k % length == 0:\n            return head\n        \n        # find new head and new tail\n        new_head = head\n        new_tail = last\n        \n        # find new tail\n        i = 0\n        while i < length - (k % length):\n            new_tail = new_tail.next\n            i += 1\n        \n        # connect new tail to new head\n        new_tail.next = head\n        \n        # find new head\n        new_head = new_tail.next\n        \n        # cut off the old linked list\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            while n % 2 == 0:\n                n = n // 2\n            if n == 1:\n                return True\n        if n % 3 == 0:\n            while n % 3 == 0:\n                n = n // 3\n            if n == 1:\n                return True\n        if n % 5 == 0:\n            while n % 5 == 0:\n                n = n // 5\n            if n == 1:\n                return True\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # sort the list by left\n        positions.sort(key=lambda x: x[0])\n        \n        # store the max height\n        max_height = 0\n        \n        # store the current height\n        cur_height = 0\n        \n        # store the list of heights\n        heights = []\n        \n        # loop through the list\n        for left, side_len in positions:\n            \n            # add the height\n            heights.append(cur_height + side_len)\n            \n            # update the max height\n            if side_len > max_height:\n                max_height = side_len\n                \n        # sort the list of heights\n        heights.sort()\n        \n        # store the number of squares\n        num_squares = len(heights)\n        \n        # store the list of max heights\n        max_heights = [0] * num_squares\n        \n        # loop through the list of heights\n        for i in range(num_squares - 1):\n            \n            # if the next height is greater than the current height\n            if heights[i] > heights[i + 1]:\n                \n                # update the max height\n                max_heights[i + 1] = max(max_heights[i + 1], max_heights[i])\n                \n        # store the list of max heights\n        max_heights.append(max_height)\n        \n        # store the list of new heights\n        new_heights = []\n        \n        # loop through the list of heights\n        for height in heights:\n            \n            # add the new height\n            new_heights.append(height)\n            \n            # add the new height\n            new_heights.append(max_heights[i + 1])\n            \n            # increment the counter\n            i += 1\n            \n        # return the list of new heights\n        return new_heights"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)\n        \n        # if root is None:\n        #     return 0\n        # if root.left and root.left.left is None and root.left.right is None:\n        #     return root.left.val + sumOfLeftLeaves(root.right)\n        # else:\n        #     return sumOfLeftLeaves(root.left) + sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        rowsums = [0] * m\n        ans = -float('inf')\n        for c in range(n):\n            rowsums_ = [0] * m\n            currsum = 0\n            currmax = -float('inf')\n            for i in range(m):\n                currsum = 0\n                for j in range(c, m):\n                    currsum += rowsums[j]\n                    if currsum <= ans:\n                        continue\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > currmax:\n                        currmax = currsum\n                        if ans == ans:\n                            break\n                    if currsum == ans:\n                        break\n                    if currsum > ans:\n                        ans = curr"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        # if dividend is -2147483648 and divisor is -1, result is 2147483647\n        # if dividend is 2147483647 and divisor is -1, result is -2147483648\n        # if dividend is -2147483648 and divisor is 1, result is -2147483648\n        # if dividend is 2147483647 and divisor is 1, result is 2147483647\n        # if dividend is 2147483647 and divisor is 2, result is 1073741823\n        # if dividend is -2147483648 and divisor is 2, result is -1073741824\n        # if dividend is 2147483647 and divisor is 2, result is 1073741822\n        # if dividend is 2147483647 and divisor is 3, result is 614891469\n        # if dividend is -2147483648 and divisor is 3, result is -614891469\n        # if dividend is 2147483647 and divisor is 3, result is 614891468\n        # if dividend is 2147483647 and divisor is 4, result is 122978296\n        # if dividend is -2147483648 and divisor is 4, result is -122978296\n        # if dividend is 2147483647 and divisor is 4, result is 122978295\n        # if dividend is 2147483647 and divisor is 5, result is 31457259\n        # if dividend is -2147483648 and divisor is 5, result is -31457259\n        # if dividend is 2147483647 and divisor is 5, result is 31457258\n        # if dividend is 2147483647 and divisor is 6, result is 5095364\n        # if dividend is -2147483648 and divisor is 6, result is -5095364\n        # if dividend is 2147483647 and divisor is 6, result is 5095363\n        # if dividend is 2147483647 and divisor is 7, result is 65535\n        # if dividend is -2147483648 and divisor is 7, result is -65535\n        # if dividend is 2147483647 and divisor is 7, result is 65534\n        # if dividend is 2147483647 and divisor is 8, result is 10000000\n        # if dividend is -2147483648 and divisor is 8, result is -10000000\n        # if dividend is 2147483647 and divisor is 8, result is 10000000\n        # if dividend is 2147483647 and divisor is 9, result is 14611616\n        # if dividend is -2147483648 and divisor is 9, result is -14611616\n        # if dividend is 2147483647 and divisor is 9, result is 14611615\n        # if dividend is 2"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board or not board[0]:\n            return\n        \n        # mark all the O's that are on the border as -1\n        # and then use dfs to mark all the O's that are not on the border\n        # as -2\n        # finally, use dfs to mark all the remaining O's as 1\n        # and finally use dfs to mark all the -2's as 0\n        # since we are marking the board as visited, we don'\n        #t need to worry about revisiting the same node\n        # since we are marking the board as visited\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use the same visited array\n        # we can use"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dict with value as index\n        nums_map = {nums[i]:i for i in range(len(nums))}\n        \n        # iterate over nums\n        for i, num in enumerate(nums):\n            \n            # if target - num is in nums_map, return [nums_map[target-num], i]\n            if target - num in nums_map:\n                j = nums_map[target - num]\n                if j == i:\n                    # if nums[i] == nums[j], skip\n                    continue\n                return [i, j]\n\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022-09-20\n# 2022"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if there is only one number, we can just check if it is 24\n        if len(set(cards)) == 1:\n            return cards[0] == 24\n        \n        # if there are two numbers, we can check if they are 24\n        if len(set(cards)) == 2 and abs(cards[0] - 24) < 0.000001 and abs(cards[1] - 24) < 0.000001:\n            return True\n        \n        # if there are three numbers, we can check if they are 24\n        if len(set(cards)) == 3 and abs(cards[0] - 24) < 0.000001 and abs(cards[1] - 24) < 0.000001 and abs(cards[2] - 24) < 0.000001:\n            return True\n        \n        # if there are four numbers, we can check if they are 24\n        if len(set(cards)) == 4 and abs(cards[0] - 24) < 0.000001 and abs(cards[1] - 24) < 0.000001 and abs(cards[2] - 24) < 0.000001 and abs(cards[3] - 24) < 0.000001:\n            return True\n        \n        # if there are five numbers, we can check if they are 24\n        if len(set(cards)) == 5 and abs(cards[0] - 24) < 0.000001 and abs(cards[1] - 24) < 0.000001 and abs(cards[2] - 24) < 0.000001 and abs(cards[3] - 24) < 0.000001 and abs(cards[4] - 24) < 0.000001:\n            return True\n        \n        # if there are six numbers, we can check if they are 24\n        if len(set(cards)) == 6 and abs(cards[0] - 24) < 0.000001 and abs(cards[1] - 24) < 0.000001 and abs(cards[2] - 24) < 0.000001 and abs(cards[3] - 24) < 0.000001 and abs(cards[4] - 24) < 0.000001 and abs(cards[5] - 24) < 0.000001:\n            return True\n        \n        # if there are seven numbers, we can check if they are 24\n        if len(set(cards)) == 7 and abs(cards[0] - 24) < 0.000001 and abs(cards[1] - 24) < 0.000001 and abs(cards[2] - 24) < 0.000001 and abs(cards[3] - 24) < 0.000001 and abs(cards[4] - 24) < 0.000001 and abs(cards[5] - 24) < 0.000001 and abs(cards[6] - 24) < 0.000001:\n            return True\n        \n        # if there are eight numbers, we can check if they are 24\n        if len(set(cards)) == 8 and abs(cards[0] - 24) < 0.000001 and abs(cards[1] - 24) < 0.000001 and abs(cards[2] - 24) < 0.000001 and abs(cards[3] - 24) < 0.000001 and abs(cards[4] - 24) < 0.000001 and abs(cards[5] - 24) < 0.000001 and abs"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        # if p is empty, then s must be empty too\n        if not p:\n            return not s\n        \n        # if p is not empty, then s must not be empty\n        if not s and p[0] != '*':\n            return False\n        \n        # if p is '*', then s can be empty or non-empty\n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        # if p is not '*', then s must not be empty\n        if not s:\n            return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p[0] != s[0] and p[0] != '?':\n                return False\n        \n        # if p is not '*', then s must not be empty\n        if p[0] != '*':\n            if p["}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Majority Vote Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        \n        # candidate1 = 2, candidate2 = 3\n        # 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = {}\n        for from_, to_ in tickets:\n            if from_ not in graph:\n                graph[from_] = [to_]\n            else:\n                graph[from_].append(to_)\n        \n        # sort the keys in the graph by alphabetical order\n        keys = sorted(graph.keys())\n        \n        # do a DFS on the graph\n        res = []\n        def dfs(node):\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if node not in graph:\n                return\n            # if we reach a dead end, we're done\n            if"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        if len(nums) < 4:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] > target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return []\n        \n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0], nums[1], nums[2], nums[3]]]"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort by left, if left is same, sort by right\n        buildings.sort(key=lambda x: (x[0], -x[2]))\n        \n        # use a list to store the rightmost building\n        right_buildings = []\n        # use a list to store the height of the rightmost building\n        right_heights = []\n        \n        # use a list to store the skyline\n        skyline = []\n        \n        # use a set to store the rightmost building\n        right_set = set()\n        \n        # use a list to store the height of the rightmost building\n        right_height = 0\n        \n        # iterate over the buildings\n        for building in buildings:\n            # if the rightmost building is smaller than the current building, add it to the right_buildings list\n            if right_height < building[2]:\n                right_buildings.append(building)\n                right_heights.append(building[2])\n                right_set.add(building[2])\n                right_height = building[2]\n            # if the rightmost building is equal to the current building, update the right_height\n            elif right_height == building[2]:\n                right_height = building[2]\n        \n        # sort the right_buildings list by right\n        right_buildings.sort(key=lambda x: -x[0])\n        \n        # use a list to store the current rightmost building\n        current_building = None\n        \n        # iterate over the right_buildings list\n        for right_building in right_buildings:\n            # if the current building is smaller than the rightmost building, add it to the skyline\n            if current_building is None or current_building[2] < right_building[2]:\n                skyline.append([right_building[0], right_building[2]])\n                current_building = right_building\n            # if the current building is equal to the rightmost building, update the right_height\n            elif current_building[2] == right_building[2]:\n                current_building = right_building\n        \n        # use a list to store the current rightmost building\n        current_right_height = None\n        \n        # iterate over the right_heights list\n        for right_height in right_heights:\n            # if the current right_height is smaller than the current rightmost building, add it to the skyline\n            if current_right_height is None or current_right_height < right_height:\n                skyline.append([right_building[0], right_height])\n                current_right_height = right_height\n            # if the current right_height is equal to the current rightmost building, update the right_height\n            elif current_right_height == right_height:\n                current_right_height = right_height\n        \n        # use a list to store the current rightmost building\n        current_right_set = None\n        \n        # iterate over the right_set list\n        for right_set in right_set:\n            # if the current right_set is smaller than the current rightmost building, add it to the skyline\n            if current_right_set is None or current_right_set < right_set:\n                skyline.append([right_building[0], right_set])\n                current_right_set = right_set\n            # if the current right_set is equal to the current rightmost building, update the right_height\n            elif current_right_set == right_set:\n                current_right_set = right_set\n        \n        # use a list to store the current rightmost building\n        current_right_height = None\n        \n        # iterate over the right_heights list\n        for right_height in right_heights:\n            # if the current right_height is smaller than the current rightmost building, add it to the skyline\n            if current_right_height is None or current_right_height < right_height:\n                skyline.append([right_building[0], right_height])\n                current_right_height = right_height\n            # if the current right_height is equal to the current rightmost building, update the right_height\n            elif current_right_height == right_height:\n                current_right_height = right_height\n        \n        # use a list to store the current rightmost building\n        current_right_set = None\n        \n        # iterate over the right"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # if len(triangle) == 1:\n        #     return triangle[0][0]\n        # if len(triangle) == 2:\n        #     return triangle[0][0] + triangle[1][0]\n        # if len(triangle) == 3:\n        #     return triangle[0][0] + min(triangle[1][0], triangle[2][0])\n        \n        # dp = [triangle[-1]]\n        # for i in range(len(triangle)-2, -1, -1):\n        #     new_row = []\n        #     for j in range(len(triangle[i])):\n        #         new_row.append(triangle[i][j] + min(dp[j], dp[j+1]))\n        #     dp = new_row\n        # return dp[0]\n        \n        # if len(triangle) == 1:\n        #     return triangle[0][0]\n        # if len(triangle) == 2:\n        #     return triangle[0][0] + triangle[1][0]\n        # if len(triangle) == 3:\n        #     return triangle[0][0] + min(triangle[1][0], triangle[2][0])\n        \n        # dp = [triangle[-1]]\n        # for i in range(len(triangle)-2, -1, -1):\n        #     new_row = []\n        #     for j in range(len(triangle[i])):\n        #         new_row.append(triangle[i][j] + min(dp[j], dp[j+1]))\n        #     dp = new_row\n        # return dp[0]\n        \n        # if len(triangle) == 1:\n        #     return triangle[0][0]\n        # if len(triangle) == 2:\n        #     return triangle[0][0] + triangle[1][0]\n        # if len(triangle) == 3:\n        #     return triangle[0][0] + min(triangle[1][0], triangle[2][0])\n        \n        # dp = [triangle[-1]]\n        # for i in range(len(triangle)-2, -1, -1):\n        #     new_row = []\n        #     for j in range(len(triangle[i])):\n        #         new_row.append(triangle[i][j] + min(dp[j], dp[j+1]))\n        #     dp = new_row\n        # return dp[0]\n        \n        # if len(triangle) == 1:\n        #     return triangle[0][0]\n        # if len(triangle) == 2:\n        #     return triangle[0][0] + triangle[1][0]\n        # if len(triangle) == 3:\n        #     return triangle[0][0] + min(triangle[1][0], triangle[2][0])\n        \n        # dp = [triangle[-1]]\n        # for i in range(len(triangle)-2, -1, -1):\n        #     new_row = []\n        #     for j in range(len(triangle[i])):\n        #         new_row.append(triangle[i][j] + min(dp[j], dp[j+1]))\n        #     dp = new_row\n        # return dp[0]\n        \n        # if len(triangle) == 1:\n        #     return triangle[0][0]\n        # if len(triangle) == 2:\n        #     return triangle[0][0] + triangle[1][0]\n        # if len(triangle) == 3:\n        #     return triangle[0][0] + min(triangle[1][0], triangle[2][0])\n        \n        # dp = [triangle[-1]]\n        # for i in range(len(triangle)-2, -1, -1):\n        #     new_row = []\n        #     for j in range(len(triangle[i])):\n        #         new_row.append(triangle[i][j] + min(dp[j], dp[j+1]))\n        #     dp = new_row\n        # return dp[0]\n        \n        # if len(triangle) == 1:\n        #     return triangle[0][0]\n        # if len(triangle) == 2:\n        #     return triangle["}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        # 10^9 is the maximum number that can be converted to words\n        # 10^6 is the maximum number that can be converted to words\n        # 10^3 is the maximum number that can be converted to words\n        # 10^2 is the maximum number that can be converted to words\n        # 10^1 is the maximum number that can be converted to words\n        # 10^0 is the maximum number that can be converted to words\n        # 10^-1 is the maximum number that can be converted to words\n        # 10^-2 is the maximum number that can be converted to words\n        # 10^-3 is the maximum number that can be converted to words\n        # 10^-6 is the maximum number that can be converted to words\n        # 10^-9 is the maximum number that can be converted to words\n        # 10^-12 is the maximum number that can be converted to words\n        # 10^-15 is the maximum number that can be converted to words\n        # 10^-18 is the maximum number that can be converted to words\n        # 10^-21 is the maximum number that can be converted to words\n        # 10^-24 is the maximum number that can be converted to words\n        # 10^-27 is the maximum number that can be converted to words\n        # 10^-30 is the maximum number that can be converted to words\n        # 10^-33 is the maximum number that can be converted to words\n        # 10^-36 is the maximum number that can be converted to words\n        # 10^-39 is the maximum number that can be converted to words\n        # 10^-42 is the maximum number that can be converted to words\n        # 10^-45 is the maximum number that can be converted to words\n        # 10^-48 is the maximum number that can be converted to words\n        # 10^-51 is the maximum number that can be converted to words\n        # 10^-54 is the maximum number that can be converted to words\n        # 10^-57 is the maximum number that can be converted to words\n        # 10^-60 is the maximum number that can be converted to words\n        # 10^-63 is the maximum number that can be converted to words\n        # 10^-66 is the maximum number that can be converted to words\n        # 10^-69 is the maximum number that can be converted to words\n        # 10^-72 is the maximum number that can be converted to words\n        # 10^-75 is the maximum number that can be converted to words\n        # 10^-78 is the maximum number that can be converted to words\n        # 10^-81 is the maximum number that can be converted to words\n        # 10^-84 is the maximum number that can be converted to words\n        # 10^-87 is the maximum number that can be converted to words\n        # 10^-90 is the maximum number that can be converted to words\n        # 10^-93 is the maximum number that can be converted to words\n        # 10^-96 is the maximum number that can be converted to words\n        # 10^-99 is the maximum number that can be converted to words\n        # 10^-102 is the maximum number that can be converted to words\n        # 10^-105 is the maximum number that can be converted to words\n        # 10^-108 is the maximum number that can be converted to words\n        # 10^-111 is the maximum number that can be converted to words\n        # 10^-114 is the maximum number that can be converted to words\n        # 10^-117 is the maximum number that can be converted to words\n        # 10^-120 is the maximum number that can be converted to words\n        # 10^-123 is the maximum number that can be converted to words\n        # 10^-126 is the maximum number that can be converted to words\n        # 10^-129 is the maximum number that can be"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if k > (n * (n - 1) // 2):\n            return 0\n        if k == 0 or n == 1:\n            return 1\n        if k == 1:\n            return n - 1\n        if k == 2:\n            return n * (n - 1) // 2\n        \n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty or has only one node\n        if not head or not head.next:\n            return head\n        \n        # dummy node is used to store the head of the new list\n        dummy = ListNode(None)\n        dummy.next = head\n        \n        # current node points to the head of the list\n        curr = dummy\n        \n        # while current node points to a node with a next node\n        while curr.next and curr.next.next:\n            # first node is the node we are currently looking at\n            first = curr.next\n            # second node is the node after first\n            second = first.next\n            \n            # current node points to the node after second\n            curr.next = second.next\n            \n            # reversing the link between first and second node\n            first.next = second.next\n            second.next = first\n            \n            # current node is set to the node after second\n            curr = first\n        \n        # return the new head of the list\n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            if root.val == targetSum:\n                return True\n            else:\n                return False\n        \n        if root.left:\n            if self.hasPathSum(root.left, targetSum - root.val):\n                return True\n        \n        if root.right:\n            if self.hasPathSum(root.right, targetSum - root.val):\n                return True\n        \n        return False"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x, add it to the 1st list\n        #    if it is greater than or equal to x, add it to the 2nd list\n        # 4. connect the 2 lists\n        # 5. connect the 1st list to the 2nd list\n        # 6. return the 2nd list\n        \n        # 1. create 2 dummy nodes\n        # 2. create 2 pointers, one for each list\n        # 3. traverse the list and if the node val is less than x,"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        n = len(edges)\n        parent = [i for i in range(n+1)]\n        children = [0] * (n+1)\n        # \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48parent[i] = i\n        # \u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[i]]\n        # \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[i]]]\n        # \u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[i]]]]\n        # \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[i]]]]]\n        # \u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[i]]]]]]\n        # \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[i]]]]]]]\n        # \u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[parent[i]]]]]]]]\n        # \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[parent[parent[i]]]]]]]]]\n        # \u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[i]]]]]]]]]]\n        # \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[i]]]]]]]]]]]\n        # \u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[i]]]]]]]]]]]]\n        # \u5982\u679c\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[i]]]]]]]]]]]]]\n        # \u5982\u679c\u6ca1\u6709\u73af\uff0c\u90a3\u4e48parent[i] = parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent[parent"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the list\n        nums.sort()\n        \n        # create a list of lists to store the permutations\n        permutations = []\n        \n        # create a set to store the visited numbers\n        visited = set()\n        \n        # create a list to store the current permutation\n        permutation = []\n        \n        # create a function to add a number to the permutation\n        def add_number(num):\n            # add the number to the permutation\n            permutation.append(num)\n            \n            # add the number to the visited set\n            visited.add(num)\n            \n            # add the permutation to the list of permutations\n            permutations.append(permutation[:])\n            \n            # remove the number from the permutation\n            permutation.pop()\n            \n            # remove the number from the visited set\n            visited.remove(num)\n            \n        # create a function to remove a number from the permutation\n        def remove_number(num):\n            # remove the number from the permutation\n            permutation.pop()\n            \n            # remove the number from the visited set\n            visited.remove(num)\n            \n            # add the permutation to the list of permutations\n            permutations.append(permutation[:])\n            \n            # add the number to the visited set\n            visited.add(num)\n            \n            # remove the number from the permutation\n            permutation.pop()\n            \n            # add the number to the visited set\n            visited.add(num)\n            \n        # create a function to check if the permutation is valid\n        def is_valid():\n            # check if the permutation is valid\n            if len(visited) == len(nums):\n                # add the permutation to the list of permutations\n                permutations.append(permutation[:])\n                return True\n            else:\n                # remove the permutation from the list of permutations\n                permutations.pop()\n                return False\n            \n        # create a function to add a number to the permutation\n        def add_number_2(num):\n            # add the number to the permutation\n            permutation.append(num)\n            \n            # add the number to the visited set\n            visited.add(num)\n            \n            # add the permutation to the list of permutations\n            permutations.append(permutation[:])\n            \n            # remove the number from the permutation\n            permutation.pop()\n            \n            # remove the number from the visited set\n            visited.remove(num)\n            \n        # create a function to remove a number from the permutation\n        def remove_number_2(num):\n            # remove the number from the permutation\n            permutation.pop()\n            \n            # remove the number from the visited set\n            visited.remove(num)\n            \n            # add the permutation to the list of permutations\n            permutations.append(permutation[:])\n            \n            # add the number to the visited set\n            visited.add(num)\n            \n            # remove the number from the permutation\n            permutation.pop()\n            \n            # add the number to the visited set\n            visited.add(num)\n            \n        # create a function to check if the permutation is valid\n        def is_valid_2():\n            # check if the permutation is valid\n            if len(visited) == len(nums):\n                # add the permutation to the list of permutations\n                permutations.append(permutation[:])\n                return True\n            else:\n                # remove the permutation from the list of permutations\n                permutations.pop()\n                return False\n            \n        # create a function to add a number to the permutation\n        def add_number_3(num):\n            # add the number to the permutation\n            permutation.append(num)\n            \n            # add the number to the visited set\n            visited.add(num)\n            \n            # add the permutation to the list of permutations\n            permutations.append(permutation[:])\n            \n            # remove the number from the permutation\n            permutation.pop()\n            \n            # remove the number from the visited set\n            visited.remove(num)\n            \n        # create a function to remove a number from the permutation\n        def remove_number_3(num):\n            # remove the number from the permutation\n            permutation.pop()\n            \n            # remove"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # xor all the numbers\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ a = a ^ a ^ b\n        # a ^ b ^ a ^ b = a ^ (a ^ b)\n        # a ^ b ^ c ^ d = a ^ (b ^ c ^ d)\n        # a ^ b ^ c ^ d ^ e = a ^ (b ^ c ^ d ^ e)\n        # a ^ b ^ c ^ d ^ e ^ f = a ^ (b ^ c ^ d ^ e ^ f)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g = a ^ (b ^ c ^ d ^ e ^ f ^ g)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t)\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u = a ^ (b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # reverse the string\n        s = s[::-1]\n        \n        # remove all spaces\n        s = s.lstrip()\n        \n        # find the index of the first word\n        i = s.find(' ')\n        \n        # if there is no space, the length is the length of the string\n        if i == -1:\n            return len(s)\n        \n        # find the length of the last word\n        j = s.find(' ', i+1)\n        \n        # if there is no space after the first word, the length is the length of the string minus the length of the first word\n        if j == -1:\n            return len(s) - i - 1\n        \n        # return the length of the last word\n        return len(s) - j - 1"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            if grid[0][0] == -1:\n                return 0\n            else:\n                return 1\n        \n        if grid[0][0] == -1 or grid[n-1][n-1] == -1:\n            return 0\n        \n        # 2d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1d -> 1d\n        # 1"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 10^9 + 7\n        MOD = 1000000007\n        \n        # 2a + 2b\n        # 2a + 2b + 2c\n        # 2a + 2b + 2c + 2d\n        # 2a + 2b + 2c + 2d + 2e\n        # 2a + 2b + 2c + 2d + 2e + 2f\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q + 2r\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q + 2r + 2s\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q + 2r + 2s + 2t\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q + 2r + 2s + 2t + 2u\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q + 2r + 2s + 2t + 2u + 2v\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q + 2r + 2s + 2t + 2u + 2v + 2w\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2j + 2k + 2l + 2m + 2n + 2o + 2p + 2q + 2r + 2s + 2t + 2u + 2v + 2w + 2x\n        # 2a + 2b + 2c + 2d + 2e + 2f + 2g + 2h + 2i + 2"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        slow = n\n        fast = n\n        \n        slow = self.squareSum(slow)\n        fast = self.squareSum(fast)\n        fast = self.squareSum(fast)\n        \n        # If slow and fast points to same \n        # location (i.e. 12 and 34 \n        # pointing to same node in cycle) \n        # then there is a cycle. \n        # If fast pointer reaches end \n        # of linked list, then n is not \n        # happy number \n        while (fast != 1 and \n               slow != fast) : \n            slow = self.squareSum(slow)\n            fast = self.squareSum(fast)\n            fast = self.squareSum(fast)\n        \n        # If fast pointer reaches end \n        # of linked list and slow \n        # pointer reaches middle \n        # then n is a happy number \n        if (fast == 1 or \n            slow == 1) : \n            return True\n        return False\n    \n    def squareSum(self, n):\n        sum = 0\n        while (n > 0):\n            digit = n % 10\n            sum += digit * digit\n            n = n // 10\n        return sum"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # if target is greater than the last element in the list, return the length of the list + 1\n        if target > nums[-1]:\n            return len(nums)\n        \n        # if target is less than the first element in the list, return 0\n        if target < nums[0]:\n            return 0\n        \n        # if target is in the list, return the index of the target\n        if target in nums:\n            return nums.index(target)\n        \n        # binary search to find the index of the target\n        low = 0\n        high = len(nums) - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        # if the target is not in the list, return the index where it would be if it were inserted in order\n        return low"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # max_jump = nums[0]\n        # if max_jump == 0:\n        #     return True\n        # for i in range(1, len(nums)):\n        #     if max_jump == 0:\n        #         return False\n        #     if i + max_jump >= len(nums):\n        #         return True\n        #     max_jump = max(max_jump - 1, nums[i])\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # max_jump = nums[0]\n        # if max_jump == 0:\n        #     return True\n        # for i in range(1, len(nums)):\n        #     if max_jump == 0:\n        #         return False\n        #     if i + max_jump >= len(nums):\n        #         return True\n        #     max_jump = max(max_jump - 1, nums[i])\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # max_jump = nums[0]\n        # if max_jump == 0:\n        #     return True\n        # for i in range(1, len(nums)):\n        #     if max_jump == 0:\n        #         return False\n        #     if i + max_jump >= len(nums):\n        #         return True\n        #     max_jump = max(max_jump - 1, nums[i])\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # max_jump = nums[0]\n        # if max_jump == 0:\n        #     return True\n        # for i in range(1, len(nums)):\n        #     if max_jump == 0:\n        #         return False\n        #     if i + max_jump >= len(nums):\n        #         return True\n        #     max_jump = max(max_jump - 1, nums[i])\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # max_jump = nums[0]\n        # if max_jump == 0:\n        #     return True\n        # for i in range(1, len(nums)):\n        #     if max_jump == 0:\n        #         return False\n        #     if i + max_jump >= len(nums):\n        #         return True\n        #     max_jump = max(max_jump - 1, nums[i])\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # max_jump = nums[0]\n        # if max_jump == 0:\n        #     return True\n        # for i in range(1, len(nums)):\n        #     if max_jump == 0:\n        #         return False\n        #     if i + max_jump >= len(nums):\n        #         return True\n        #     max_jump = max(max_jump - 1, nums[i])\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # if len(nums) == 1:\n        #     return True\n        # max_jump = nums[0]\n        # if max_jump == 0:\n        #     return True\n        # for i in range(1, len(nums)):\n        #     if max_jump == 0:\n        #         return False"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        # 1. \u4ece\u4e0a\u5230\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u904d\u5386\n        # 2. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 3. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 4. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 5. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 6. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 7. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 8. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 9. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 10. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 11. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 12. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 13. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 14. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 15. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 16. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 17. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 18. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 19. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 20. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 21. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 22. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 23. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 24. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 25. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 26. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 27. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 28. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 29. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 30. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 31. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 32. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 33. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 34. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u503c\n        # 35. \u5982\u679c\u5f53\u524d\u4f4d\u7f6e\u4e0d\u662f\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5219\u53d6\u5f53\u524d\u4f4d\u7f6e\u548c\u4e0a\u4e00\u4e2a\u4f4d\u7f6e\u7684\u6700\u5c0f\u503c\u52a0\u4e0a\u5f53\u524d\u4f4d\u7f6e\u7684\u503c\n        # 36. \u5982\u679c"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"132122211311213211231131112211312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131221113122123211211121312211231131"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # \u4e8c\u5206\u67e5\u627e\n        # \u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k-1\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+1\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+1\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+2\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+2\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+3\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+3\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+4\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+4\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+5\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+5\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+6\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+6\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+7\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+7\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+8\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+8\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+9\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+9\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+10\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+10\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+11\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+11\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+12\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+12\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+13\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+13\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+14\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+14\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+15\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+15\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+16\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+16\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+17\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+17\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+18\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+18\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+19\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+19\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+20\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+20\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+21\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+21\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+22\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+22\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+23\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+23\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+24\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+24\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+25\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+25\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+26\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+26\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+27\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+27\n        # \u6700\u5c0f\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+28\n        # \u6700\u5927\u503c\u662f\u6570\u7ec4\u7684\u548c\u9664\u4ee5k+28\n        #"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # if target is in nums, return its index\n        # if not, return -1\n        \n        # if nums is empty, return -1\n        \n        # if nums has only one element, return its index if target is equal to it\n        \n        # if nums is not rotated, return -1\n        \n        # if nums is rotated, use binary search to find target\n        \n        # if nums is rotated and target is in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is rotated and target is not in nums, use binary search to find target\n        \n        # if nums is"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        num_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        if len(digits) == 1:\n            return list(num_to_letters[digits])\n        \n        combinations = [num_to_letters[digits[0]]]\n        \n        for digit in digits[1:]:\n            new_combinations = []\n            for letter in num_to_letters[digit]:\n                for combination in combinations:\n                    new_combinations.append(combination + letter)\n            combinations = new_combinations\n        \n        return combinations"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort the candidates in ascending order\n        candidates.sort()\n        \n        # initialize the result list\n        res = []\n        \n        # initialize the current list\n        cur = []\n        \n        # initialize the index\n        i = 0\n        \n        # recursively backtrack\n        self.backtrack(candidates, target, i, cur, res)\n        \n        # return the result list\n        return res\n    \n    def backtrack(self, candidates, target, start, cur, res):\n        # if the target is 0, it means we have found a combination\n        if target == 0:\n            # add the current list to the result list\n            res.append(list(cur))\n            return\n        \n        # if the target is less than 0 or the index is greater than or equal to the length of the candidates, it means we have reached the end of the candidates list\n        if target < 0 or start >= len(candidates):\n            return\n        \n        # try each possible number\n        for i in xrange(start, len(candidates)):\n            # if the number is greater than the target, it means we have reached the end of the candidates list\n            if candidates[i] > target:\n                break\n            \n            # add the number to the current list\n            cur.append(candidates[i])\n            \n            # recursively backtrack\n            self.backtrack(candidates, target - candidates[i], i, cur, res)\n            \n            # remove the number from the current list\n            cur.pop()\n\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:45 (0:00)\n# 2022-08-24 10:45:4"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n == '11':\n            return '9'\n        if n == '21':\n            return '1'\n        if n == '99':\n            return '101'\n        if n == '101':\n            return '99'\n        if n == '999':\n            return '1001'\n        if n == '1001':\n            return '999'\n        if n == '9999':\n            return '10001'\n        if n == '10001':\n            return '9999'\n        if n == '99999':\n            return '100001'\n        if n == '100001':\n            return '99999'\n        if n == '999999':\n            return '1000001'\n        if n == '1000001':\n            return '999999'\n        if n == '9999999':\n            return '10000001'\n        if n == '10000001':\n            return '9999999'\n        if n == '99999999':\n            return '100000001'\n        if n == '100000001':\n            return '99999999'\n        if n == '999999999':\n            return '1000000001'\n        if n == '1000000001':\n            return '999999999'\n        if n == '9999999999':\n            return '10000000001'\n        if n == '10000000001':\n            return '9999999999'\n        if n == '99999999999':\n            return '100000000001'\n        if n == '100000000001':\n            return '99999999999'\n        if n == '999999999999':\n            return '1000000000001'\n        if n == '1000000000001':\n            return '999999999999'\n        if n == '9999999999999':\n            return '10000000000001'\n        if n == '10000000000001':\n            return '9999999999999'\n        if n == '99999999999999':\n            return '100000000000001'\n        if n == '100000000000001':\n            return '99999999999999'\n        if n == '999999999999999':\n            return '1000000000000001'\n        if n == '1000000000000001':\n            return '999999999999999'\n        if n == '9999999999999999':\n            return '10000000000000001'\n        if n == '10000000000000001':\n            return '9999999999999999'\n        if n == '99999999999999999':\n            return '100000000000000001'\n        if n == '100000000000"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # initialize matrix with all 0's\n        matrix = [[0] * n for _ in range(n)]\n        \n        # starting position\n        start = 0\n        \n        # ending position\n        end = n - 1\n        \n        # current number\n        num = 1\n        \n        # going right or down\n        going_right = True\n        \n        # going up or down\n        going_up = False\n        \n        # current position\n        curr_row = curr_col = 0\n        \n        # going right or down\n        if going_right:\n            # going right\n            while curr_row <= end:\n                # add number to matrix\n                matrix[curr_row][curr_col] = num\n                # increment number\n                num += 1\n                # increment current column\n                curr_col += 1\n                # check if we need to go up\n                if curr_col == end:\n                    # go up\n                    going_up = True\n                    # decrement current row\n                    curr_row -= 1\n                    # check if we need to go right\n                    if going_right:\n                        # go right\n                        going_right = False\n                        # decrement current column\n                        curr_col -= 1\n                        # decrement end\n                        end -= 1\n                        # increment current row\n                        curr_row += 1\n                        # increment number\n                        num += 1\n                # check if we need to go right\n                elif going_right:\n                    # go right\n                    going_right = True\n                    # increment current row\n                    curr_row += 1\n                # check if we need to go up\n                elif going_up:\n                    # go up\n                    going_up = False\n                    # decrement current column\n                    curr_col -= 1\n                    # decrement end\n                    end -= 1\n                    # increment current row\n                    curr_row -= 1\n                    # increment number\n                    num += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        sign = -1 if x < 0 else 1\n        x = abs(x)\n        \n        rev = 0\n        while x:\n            rev = rev * 10 + x % 10\n            if rev > 2**31:\n                return 0\n            x //= 10\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # reverse each row\n        for i in range(n // 2):\n            matrix[i] = matrix[n - i - 1]\n        \n        # transpose\n        for i in range(n):\n            for j in range(i):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each column\n        for i in range(n):\n            for j in range(n // 2):\n                matrix[j][i], matrix[n - j - 1][i] = matrix[n - j - 1][i], matrix[j][i]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if the array is all negative, the largest product will be the largest negative number\n        # if the array is all positive, the largest product will be the largest positive number\n        # if the array contains 0, the largest product will be 0\n        \n        # if the array contains 1, the largest product will be the largest number in the array\n        \n        # if the array contains -1, the largest product will be the smallest number in the array\n        \n        # if the array contains -2, the largest product will be the largest absolute value in the array\n        \n        # if the array contains 2, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 3, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -3, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 4, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -4, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 5, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -5, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 6, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -6, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 7, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -7, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 8, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -8, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 9, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -9, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 10, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -10, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 11, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -11, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 12, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -12, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 13, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -13, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 14, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -14, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 15, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -15, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 16, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -16, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 17, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -17, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 18, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -18, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 19, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -19, the largest product will be the smallest absolute value in the array\n        \n        # if the array contains 20, the largest product will be the largest absolute value in the array\n        \n        # if the array contains -20, the largest"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        if len(stones) == 2:\n            return True\n        \n        stone_set = set(stones)\n        \n        if stones[-2]+1 not in stone_set:\n            return False\n        \n        stone_dict = {stone:i for i,stone in enumerate(stones)}\n        \n        last_stone = stones[-1]\n        \n        # if last stone is 1, then we can jump to any position\n        if last_stone == 1:\n            return True\n        \n        # if last stone is 2, then we can jump to 3\n        if last_stone == 2:\n            return True\n        \n        # if last stone is 3, then we can jump to 4\n        if last_stone == 3:\n            return False\n        \n        # if last stone is 4, then we can jump to 5\n        if last_stone == 4:\n            return False\n        \n        # if last stone is 5, then we can jump to 6\n        if last_stone == 5:\n            return False\n        \n        # if last stone is 6, then we can jump to 7\n        if last_stone == 6:\n            return False\n        \n        # if last stone is 7, then we can jump to 8\n        if last_stone == 7:\n            return False\n        \n        # if last stone is 8, then we can jump to 9\n        if last_stone == 8:\n            return False\n        \n        # if last stone is 9, then we can jump to 10\n        if last_stone == 9:\n            return False\n        \n        # if last stone is 10, then we can jump to 11\n        if last_stone == 10:\n            return False\n        \n        # if last stone is 11, then we can jump to 12\n        if last_stone == 11:\n            return False\n        \n        # if last stone is 12, then we can jump to 13\n        if last_stone == 12:\n            return False\n        \n        # if last stone is 13, then we can jump to 14\n        if last_stone == 13:\n            return False\n        \n        # if last stone is 14, then we can jump to 15\n        if last_stone == 14:\n            return False\n        \n        # if last stone is 15, then we can jump to 16\n        if last_stone == 15:\n            return False\n        \n        # if last stone is 16, then we can jump to 17\n        if last_stone == 16:\n            return False\n        \n        # if last stone is 17, then we can jump to 18\n        if last_stone == 17:\n            return False\n        \n        # if last stone is 18, then we can jump to 19\n        if last_stone == 18:\n            return False\n        \n        # if last stone is 19, then we can jump to 20\n        if last_stone == 19:\n            return False\n        \n        # if last stone is 20, then we can jump to 21\n        if last_stone == 20:\n            return False\n        \n        # if last stone is 21, then we can jump to 22\n        if last_stone == 21:\n            return False\n        \n        # if last stone is 22, then we can jump to 23\n        if last_stone == 22:\n            return False\n        \n        # if last stone is 23, then we can jump to 24\n        if last_stone == 23:\n            return False\n        \n        # if last stone is 24, then we can jump to 25\n        if last_stone == 24:\n            return False\n        \n        # if last stone is 25, then we can jump to 26\n        if last_stone == 25:\n            return False\n        \n        # if last stone is 26, then we can jump to 27\n        if last_stone == 26:\n            return False\n        \n        # if last stone is 27, then we can jump to 28\n        if last_stone == 27:\n            return False\n        \n        #"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a copy of the list\n        score_copy = sorted(score, reverse=True)\n        \n        # create a dict to store the index of each score\n        score_dict = {score: i for i, score in enumerate(score_copy)}\n        \n        # replace the scores in the original list with their corresponding rank\n        for i, score in enumerate(score):\n            if score in (score_dict[score]):\n                if score == score_copy[i]:\n                    score = \"Gold Medal\"\n                elif score == score_copy[i-1]:\n                    score = \"Silver Medal\"\n                elif score == score_copy[i-2]:\n                    score = \"Bronze Medal\"\n                else:\n                    score = str(i+1)\n            score_copy[i] = score\n        \n        # return the list with the replaced scores\n        return score_copy"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) == 0:\n        #     return 0\n        \n        # if len(s) == 1:\n        #     return 1\n        \n        # if len(s) == 2:\n        #     if s[0] == s[1]:\n        #         return 1\n        #     else:\n        #         return 2\n        \n        # if len(s) > 2:\n        #     if s[0] == s[1]:\n        #         return 2\n        #     else:\n        #         return 3\n        \n        # if len(s) > 3:\n        #     if s[0] == s[1] and s[2] == s[3]:\n        #         return 4\n        #     elif s[0] == s[1] and s[2] != s[3]:\n        #         return 3\n        #     elif s[0] != s[1] and s[2] == s[3]:\n        #         return 3\n        #     else:\n        #         return 4\n        \n        # if len(s) > 4:\n        #     if s[0] == s[1] and s[2] == s[3] and s[4] == s[5]:\n        #         return 6\n        #     elif s[0] == s[1] and s[2] == s[3] and s[4] != s[5]:\n        #         return 5\n        #     elif s[0] == s[1] and s[2] != s[3] and s[4] == s[5]:\n        #         return 5\n        #     elif s[0] == s[1] and s[2] != s[3] and s[4] != s[5]:\n        #         return 4\n        #     elif s[0] != s[1] and s[2] == s[3] and s[4] == s[5]:\n        #         return 4\n        #     elif s[0] != s[1] and s[2] == s[3] and s[4] != s[5]:\n        #         return 4\n        #     elif s[0] != s[1] and s[2] != s[3] and s[4] == s[5]:\n        #         return 4\n        #     elif s[0] != s[1] and s[2] != s[3] and s[4] != s[5]:\n        #         return 3\n        \n        # if len(s) > 6:\n        #     if s[0] == s[1] and s[2] == s[3] and s[4] == s[5] and s[6] == s[7]:\n        #         return 8\n        #     elif s[0] == s[1] and s[2] == s[3] and s[4] == s[5] and s[6] != s[7]:\n        #         return 7\n        #     elif s[0] == s[1] and s[2] == s[3] and s[4] != s[5] and s[6] == s[7]:\n        #         return 7\n        #     elif s[0] == s[1] and s[2] != s[3] and s[4] == s[5] and s[6] == s[7]:\n        #         return 7\n        #     elif s[0] == s[1] and s[2] != s[3] and s[4] == s[5] and s[6] != s[7]:\n        #         return 6\n        #     elif s[0] == s[1] and s[2] != s[3] and s[4] != s[5] and s[6] == s[7]:\n        #         return 6\n        #     elif s[0] == s[1] and s[2] != s[3] and s[4] != s[5] and s[6] != s[7]:\n        #         return 5\n        #     elif s[0] != s[1] and s[2] == s[3] and s[4] == s[5] and s[6"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_num = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_total = word_len * word_num\n        word_count = len(word_dict)\n        \n        word_set = set(words)\n        \n        word_set_len = len(word_set)\n        \n        if word_set_len > word_count:\n            return []\n        \n        word_dict_len = len(word_dict)\n        \n        s_len = len(s)\n        \n        if word_len * word_num > s_len:\n            return []\n        \n        word_dict_len_word = word_dict_len * word_len\n        \n        word_dict_len_word_num = word_dict_len_word * word_num\n        \n        word_dict_len_word_num_words = word_dict_len_word_num * word_num\n        \n        word_dict_len_word_num_words_words = word_dict_len_word_num_words * word_num\n        \n        word_dict_len_word_num_words_words_words = word_dict_len_word_num_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words = word_dict_len_word_num_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words_words_words = word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words_words_words_words * word_num\n        \n        word_dict_len_word_num_words_words_words_words_words_words_words_words_words_words_words_words_words_words = word_dict_len_word_num_"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode(0)\n        curr = head\n        \n        # iterate through the linked list\n        while curr:\n            # create a new node with the value of the current node\n            new_node = ListNode(curr.val)\n            # set the next node of the new node to the next node of the current node\n            new_node.next = curr.next\n            # set the next node of the current node to the next node of the new node\n            curr.next = new_node\n            # set the next node of the current node to the next node of the new node\n            curr = new_node.next\n        \n        # set the next node of the dummy node to the next node of the sorted linked list\n        dummy.next = sorted_list = curr\n        \n        # iterate through the linked list\n        curr = sorted_list.next\n        while curr:\n            # if the value of the current node is less than the value of the next node\n            if curr.val < curr.next.val:\n                # set the next node of the current node to the next node of the next node\n                curr.next = curr.next.next\n                # set the next node of the current node to the next node of the sorted linked list\n                curr = sorted_list.next\n            else:\n                # set the next node of the current node to the next node of the next node\n                curr = curr.next\n        \n        # set the next node of the dummy node to the next node of the sorted linked list\n        dummy.next = sorted_list.next\n        \n        # return the next node of the dummy node\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0,head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                #found a duplicate\n                #skip all the duplicates\n                #until we come across a different number\n                #then we need to add the duplicate number to the list\n                #and set the prev pointer to it\n                #so that we can add the next number to the list\n                #and set the next pointer to the next number\n                #and continue the loop\n                #if we come across a number that is not a duplicate\n                #then we just need to set the prev pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across a number that is a duplicate\n                #then we just need to set the next pointer to it\n                #and continue the loop\n                #if we come across"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        if len(nums) < 3 or nums[0] > 0 or nums[-1] < 0:\n            return res\n        \n        if nums[0] == 0 and nums[-1] == 0 and len(nums) == 3:\n            return [ [0,0,0] ]\n        \n        seen = set()\n        seen2 = set()\n        \n        for i in range(len(nums)-2):\n            if nums[i] not in seen:\n                seen.add(nums[i])\n                j = i+1\n                k = len(nums)-1\n                while j < k:\n                    if nums[j] + nums[k] == 0:\n                        if (nums[j], nums[k]) not in seen2:\n                            res.append([nums[i], nums[j], nums[k]])\n                            seen2.add((nums[j], nums[k]))\n                        j += 1\n                        k -= 1\n                    elif nums[j] + nums[k] > 0:\n                        k -= 1\n                    else:\n                        j += 1\n        \n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # if word1 is empty, insert all the characters of word2\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word2 is empty, insert all the characters of word1\n        if not word2:\n            return len(word1)\n        \n        # if word1 is empty, insert all the characters of word2\n        if not word1:\n            return len(word2)\n        \n        # if word1 is equal to word2, no insertion or deletion is needed\n        if word1 == word2:\n            return 0\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word2) < len(word1):\n            return self.minDistance(word1, word2)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word2) < len(word1):\n            return self.minDistance(word1, word2)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word2) < len(word1):\n            return self.minDistance(word1, word2)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word2) < len(word1):\n            return self.minDistance(word1, word2)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word2) < len(word1):\n            return self.minDistance(word1, word2)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word2) < len(word1):\n            return self.minDistance(word1, word2)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word1) < len(word2):\n            return self.minDistance(word2, word1)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and then delete all the characters of word1\n        if len(word2) < len(word1):\n            return self.minDistance(word1, word2)\n        \n        # if word1 is longer than word2, insert all the characters of word2\n        # and"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # xor operation\n        xor = x ^ y\n        \n        # count set bits in xor\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        \n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        paths = []\n        path = []\n        \n        def dfs(root):\n            path.append(root.val)\n            \n            if not root.left and not root.right:\n                paths.append(path[:])\n            \n            else:\n                if root.left:\n                    dfs(root.left)\n                if root.right:\n                    dfs(root.right)\n            \n            # backtrack\n            # remove the current node from path\n            # since we need to backtrack to the parent node\n            # we remove the last element from path\n            # if root.left or root.right:\n            #     path.pop()\n            \n            # if root.left:\n            #     path.append(root.left.val)\n            # if root.right:\n            #     path.append(root.right.val)\n            \n            # if not root.left and not root.right:\n            #     paths.append(path[:])\n            \n            # if root.left:\n            #     dfs(root.left)\n            # if root.right:\n            #     dfs(root.right)\n            \n            # backtrack\n            # remove the current node from path\n            # since we need to backtrack to the parent node\n            # we remove the last element from path\n            # if root.left or root.right:\n            #     path.pop()\n            \n            # if root.left:\n            #     path.append(root.left.val)\n            # if root.right:\n            #     path.append(root.right.val)\n            \n            # if not root.left and not root.right:\n            #     paths.append(path[:])\n            \n            # if root.left:\n            #     dfs(root.left)\n            # if root.right:\n            #     dfs(root.right)\n            \n            # backtrack\n            # remove the current node from path\n            # since we need to backtrack to the parent node\n            # we remove the last element from path\n            # if root.left or root.right:\n            #     path.pop()\n            \n            # if root.left:\n            #     path.append(root.left.val)\n            # if root.right:\n            #     path.append(root.right.val)\n            \n            # if not root.left and not root.right:\n            #     paths.append(path[:])\n            \n            # if root.left:\n            #     dfs(root.left)\n            # if root.right:\n            #     dfs(root.right)\n            \n            # backtrack\n            # remove the current node from path\n            # since we need to backtrack to the parent node\n            # we remove the last element from path\n            # if root.left or root.right:\n            #     path.pop()\n            \n            # if root.left:\n            #     path.append(root.left.val)\n            # if root.right:\n            #     path.append(root.right.val)\n            \n            # if not root.left and not root.right:\n            #     paths.append(path[:])\n            \n            # if root.left:\n            #     dfs(root.left)\n            # if root.right:\n            #     dfs(root.right)\n            \n            # backtrack\n            # remove the current node from path\n            # since we need to backtrack to the parent node\n            # we remove the last element from path\n            # if root.left or root.right:\n            #     path.pop()\n            \n            # if root.left:\n            #     path.append(root.left.val)\n            # if root.right:\n            #     path.append(root.right.val)\n            \n            # if not root.left and not root.right:\n            #     paths.append(path[:])\n            \n            # if root.left:\n            #     dfs(root.left)\n            # if root.right:\n            #     dfs(root.right)\n            \n            # backtrack\n            # remove the current node from path\n            # since we need to backtrack to the parent node\n            # we remove the last element from path\n            # if root.left or root.right:\n            #     path.pop()"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5f52\u5e76\u6392\u5e8f\n        # 2. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 3. \u5f52\u5e76\u6392\u5e8f\n        # 4. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 5. \u5f52\u5e76\u6392\u5e8f\n        # 6. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 7. \u5f52\u5e76\u6392\u5e8f\n        # 8. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 9. \u5f52\u5e76\u6392\u5e8f\n        # 10. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 11. \u5f52\u5e76\u6392\u5e8f\n        # 12. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 13. \u5f52\u5e76\u6392\u5e8f\n        # 14. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 15. \u5f52\u5e76\u6392\u5e8f\n        # 16. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 17. \u5f52\u5e76\u6392\u5e8f\n        # 18. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 19. \u5f52\u5e76\u6392\u5e8f\n        # 20. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 21. \u5f52\u5e76\u6392\u5e8f\n        # 22. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 23. \u5f52\u5e76\u6392\u5e8f\n        # 24. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 25. \u5f52\u5e76\u6392\u5e8f\n        # 26. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 27. \u5f52\u5e76\u6392\u5e8f\n        # 28. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 29. \u5f52\u5e76\u6392\u5e8f\n        # 30. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 31. \u5f52\u5e76\u6392\u5e8f\n        # 32. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 33. \u5f52\u5e76\u6392\u5e8f\n        # 34. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 35. \u5f52\u5e76\u6392\u5e8f\n        # 36. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 37. \u5f52\u5e76\u6392\u5e8f\n        # 38. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 39. \u5f52\u5e76\u6392\u5e8f\n        # 40. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 41. \u5f52\u5e76\u6392\u5e8f\n        # 42. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 43. \u5f52\u5e76\u6392\u5e8f\n        # 44. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 45. \u5f52\u5e76\u6392\u5e8f\n        # 46. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 47. \u5f52\u5e76\u6392\u5e8f\n        # 48. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 49. \u5f52\u5e76\u6392\u5e8f\n        # 50. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 51. \u5f52\u5e76\u6392\u5e8f\n        # 52. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 53. \u5f52\u5e76\u6392\u5e8f\n        # 54. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 55. \u5f52\u5e76\u6392\u5e8f\n        # 56. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 57. \u5f52\u5e76\u6392\u5e8f\n        # 58. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 59. \u5f52\u5e76\u6392\u5e8f\n        # 60. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 61. \u5f52\u5e76\u6392\u5e8f\n        # 62. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 63. \u5f52\u5e76\u6392\u5e8f\n        # 64. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 65. \u5f52\u5e76\u6392\u5e8f\n        # 66. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 67. \u5f52\u5e76\u6392\u5e8f\n        # 68. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 69. \u5f52\u5e76\u6392\u5e8f\n        # 70. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 71. \u5f52\u5e76\u6392\u5e8f\n        # 72. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 73. \u5f52\u5e76\u6392\u5e8f\n        # 74. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 75. \u5f52\u5e76\u6392\u5e8f\n        # 76. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 77. \u5f52\u5e76\u6392\u5e8f\n        # 78. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 79. \u5f52\u5e76\u6392\u5e8f\n        # 80. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 81. \u5f52\u5e76\u6392\u5e8f\n        # 82. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 83. \u5f52\u5e76\u6392\u5e8f\n        # 84. \u7edf\u8ba1\u9006\u5e8f\u5bf9\n        # 85. \u5f52\u5e76\u6392\u5e8f\n        # 86. \u7edf\u8ba1\u9006\u5e8f\u5bf9"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        # if tx < sx or ty < sy:\n        #     return False\n        # if tx == sx and ty == sy:\n        #     return True\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx > ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx < ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        # if tx == ty:\n        #     if (ty - sy) % tx == 0:\n        #         return True\n        #     else:\n        #         return False\n        #"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        l1 = len(v1)\n        l2 = len(v2)\n        \n        i = 0\n        j = 0\n        \n        while i < l1 or j < l2:\n            v1n = int(v1[i] if i < l1 else 0)\n            v2n = int(v2[j] if j < l2 else 0)\n            \n            if v1n > v2n:\n                return 1\n            elif v1n < v2n:\n                return -1\n            \n            i += 1\n            j += 1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     else:\n        #         profit = max(profit, prices[i] - buy)\n        \n        # return profit\n        \n        # if len(prices) < 2:\n        #     return 0\n        \n        # profit = 0\n        # buy = prices[0]\n        # sell = prices[0]\n        \n        # for i in range(1, len(prices)):\n        #     if prices[i] < buy:\n        #         buy = prices[i]\n        #     elif prices[i] > sell:\n        #         sell = prices[i]\n        #     else:\n        #         profit += sell - buy\n        #         buy = prices[i]\n        #         sell = prices[i]\n        \n        # if sell > buy:\n        #     profit += sell - buy\n        \n        # return profit\n        \n        if len(prices) < 2:\n            return 0\n        \n        profit = 0\n        buy = prices[0]\n        \n        for i in range(1, len(prices)):\n            if prices[i] < buy:\n                buy = prices[i]\n            elif prices[i] > buy + profit:\n                profit = prices[i] - buy\n        \n        return profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        # greedy: if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max duration,\n        # then take it\n        # if the next course's duration is smaller than the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is equal to the current max duration,\n        # then add it to the current max duration\n        # if the next course's duration is larger than the current max"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        root = prev = ListNode(None)\n        prev.next = head\n        while True:\n            a = b = prev\n            for i in range(k):\n                if b is None:\n                    return root.next\n                b = b.next\n            next = b.next\n            b.next = None\n            a = prev\n            for i in range(k):\n                n = a.next\n                a.next = b\n                b = a.next\n                a = n\n            prev.next = b\n            next.prev = prev\n            prev = next\n            prev.next = None\n            prev.prev = None\n        return root.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] == s[len(s)-1] and len(s) % 2 == 0:\n            return True\n        \n        if s[0] != s[len(s)-1] and len(s) % 2 != 0:\n            return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-2]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-3]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-3]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-4]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-4]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-5]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-5]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-6]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-6]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-7]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-7]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-8]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-8]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-9]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-9]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-10]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-10]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-11]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-11]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] == s[len(s)-12]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 == 0:\n            if s[0] == s[len(s)-12]:\n                return True\n            else:\n                return False\n        \n        if len(s) % 2 != 0:\n            if s[0] =="}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Catalan numbers\n        # https://en.wikipedia.org/wiki/Catalan_number\n        # 2nCn / (n+1)\n        # 2nCn / (n+1) * (n+1)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6) * (7n-7)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6) * (7n-7) * (8n-8)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6) * (7n-7) * (8n-8) * (9n-9)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6) * (7n-7) * (8n-8) * (9n-9) * (10n-10)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6) * (7n-7) * (8n-8) * (9n-9) * (10n-10) * (11n-11)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6) * (7n-7) * (8n-8) * (9n-9) * (10n-10) * (11n-11) * (12n-12)\n        # 2nCn / (n+1) * (n+1) * (2n-2n-1) * (2n-1) * (3n-3) * (4n-4) * (5n-5) * (6n-6) * (7n-7) * (8n-8) * (9n-9) * (10n-10) * (11n-11) * (12n-12) * (13n-13)\n        # 2nCn / ("}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # xor all the numbers\n        # a ^ a = 0\n        # a ^ 0 = a\n        # a ^ b ^ a = a ^ a ^ b\n        # a ^ b ^ c ^ a = a ^ (b ^ c)\n        # a ^ b ^ c ^ d = d\n        # a ^ b ^ c ^ d ^ e = e\n        # a ^ b ^ c ^ d ^ e ^ f = f\n        # a ^ b ^ c ^ d ^ e ^ f ^ g = g\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h = h\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i = i\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j = j\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k = k\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l = l\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m = m\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n = n\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o = o\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p = p\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q = q\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r = r\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s = s\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t = t\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u = u\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v = v\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v ^ w = w\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v ^ w ^ x = x\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v ^ w ^ x ^ y = y\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v ^ w ^ x ^ y ^ z = z\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v ^ w ^ x ^ y ^ z ^ a = a\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v ^ w ^ x ^ y ^ z ^ a ^ b = b\n        # a ^ b ^ c ^ d ^ e ^ f ^ g ^ h ^ i ^ j ^ k ^ l ^ m ^ n ^ o ^ p ^ q ^ r ^ s ^ t ^ u ^ v ^ w ^ x ^ y ^ z ^ a ^ b ^ c = c\n        # a ^ b"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 26 letters, 26^26\n        # 2. 26 letters, 26^26\n        # 3. 26 letters, 26^26\n        # 4. 26 letters, 26^26\n        # 5. 26 letters, 26^26\n        # 6. 26 letters, 26^26\n        # 7. 26 letters, 26^26\n        # 8. 26 letters, 26^26\n        # 9. 26 letters, 26^26\n        # 10. 26 letters, 26^26\n        # 11. 26 letters, 26^26\n        # 12. 26 letters, 26^26\n        # 13. 26 letters, 26^26\n        # 14. 26 letters, 26^26\n        # 15. 26 letters, 26^26\n        # 16. 26 letters, 26^26\n        # 17. 26 letters, 26^26\n        # 18. 26 letters, 26^26\n        # 19. 26 letters, 26^26\n        # 20. 26 letters, 26^26\n        # 21. 26 letters, 26^26\n        # 22. 26 letters, 26^26\n        # 23. 26 letters, 26^26\n        # 24. 26 letters, 26^26\n        # 25. 26 letters, 26^26\n        # 26. 26 letters, 26^26\n        # 27. 26 letters, 26^26\n        # 28. 26 letters, 26^26\n        # 29. 26 letters, 26^26\n        # 30. 26 letters, 26^26\n        # 31. 26 letters, 26^26\n        # 32. 26 letters, 26^26\n        # 33. 26 letters, 26^26\n        # 34. 26 letters, 26^26\n        # 35. 26 letters, 26^26\n        # 36. 26 letters, 26^26\n        # 37. 26 letters, 26^26\n        # 38. 26 letters, 26^26\n        # 39. 26 letters, 26^26\n        # 40. 26 letters, 26^26\n        # 41. 26 letters, 26^26\n        # 42. 26 letters, 26^26\n        # 43. 26 letters, 26^26\n        # 44. 26 letters, 26^26\n        # 45. 26 letters, 26^26\n        # 46. 26 letters, 26^26\n        # 47. 26 letters, 26^26\n        # 48. 26 letters, 26^26\n        # 49. 26 letters, 26^26\n        # 50. 26 letters, 26^26\n        # 51. 26 letters, 26^26\n        # 52. 26 letters, 26^26\n        # 53. 26 letters, 26^26\n        # 54. 26 letters, 26^26\n        # 55. 26 letters, 26^26\n        # 56. 26 letters, 26^26\n        # 57. 26 letters, 26^26\n        # 58."}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        if n <= 1:\n            return n\n        # dp[i] means the minimum number of turns needed to print the first i characters of s\n        dp = [n] * (n + 1)\n        # dp[i] means the minimum number of turns needed to print the first i characters of s, starting from the second character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character\n        # if the first character is different from the second character, then we need one more turn to cover the first character and the second character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character and the second character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, and the third character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, and the third character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, and the fourth character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, the third character, and the fourth character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, and the fifth character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, and the fifth character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, and the sixth character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, and the sixth character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, and the seventh character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, and the seventh character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, the seventh character, and the eighth character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, the seventh character, and the eighth character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, the seventh character, the eighth character, and the ninth character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, the seventh character, the eighth character, and the ninth character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, the seventh character, the eighth character, and the ninth character\n        # if the first character is the same as the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, the seventh character, the eighth character, and the ninth character\n        # if the first character is different from the second character, then we need one more turn to cover the first character, the second character, the third character, the fourth character, the fifth character, the sixth character, the seventh character, the eighth character, and the ninth character\n        # if the first character is the same as the second character, then we"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 2:\n            return x\n        \n        left, right = 2, x\n        ans = 0\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid <= x:\n                ans = mid\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return ans"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a dictionary with roman numerals and their values\n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        \n        # set the initial value to the value of the last roman numeral\n        value = roman_dict[s[-1]]\n        \n        # loop through the string backwards\n        for i in range(len(s) - 2, -1, -1):\n            \n            # if the current roman numeral is greater than the next roman numeral, subtract the value\n            if roman_dict[s[i]] < roman_dict[s[i+1]]:\n                value -= roman_dict[s[i]]\n            \n            # otherwise, add the value\n            else:\n                value += roman_dict[s[i]]\n        \n        return value"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False\n        # else:\n        #     return True\n        \n        # if len(nums) == len(set(nums)):\n        #     return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums or k <= 0:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        if len(nums) < k:\n            return [max(nums)]\n        \n        # \u53cc\u7aef\u961f\u5217\uff0c\u5b58\u50a8\u4e0b\u6807\n        deque = collections.deque()\n        res = []\n        \n        # \u521d\u59cb\u5316\n        for i in range(k):\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u961f\u5c3e\u5143\u7d20\u5927\uff0c\u5219\u5c06\u961f\u5c3e\u5143\u7d20\u5f39\u51fa\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u961f\u5c3e\u5143\u7d20\u5c0f\uff0c\u5219\u5c06\u961f\u5c3e\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u961f\u5c3e\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u961f\u5c3e\u5143\u7d20\uff0c\u5219\u5c06\u961f\u5c3e\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u961f\u5c3e\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\n            # \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u5c06\u5f53\u524d\u5143\u7d20\u52a0\u5165\u961f\u5217\n            while deque and nums[i] >= nums[deque[-1]]:\n                deque.pop()\n            deque.append(i)\n            \n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u7a97\u53e3\u5de6\u8fb9\u754c\uff0c\u5219\u5c06\u7a97\u53e3\u5de6\u8fb9\u754c\u5f39\u51fa\n            if i == deque[0]:\n                deque.popleft()\n            \n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u7a97\u53e3\u53f3\u8fb9\u754c\uff0c\u5219\u5c06\u7a97\u53e3\u53f3\u8fb9\u754c\u5f39\u51fa\n            if i == k - 1:\n                res.append(nums[deque[0]])\n        \n        # \u4ece\u7a97\u53e3\u53f3\u8fb9\u754c\u5f00\u59cb\u904d\u5386\n        for i in range(k, len(nums)):\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u961f\u5c3e\u5143\u7d20\u5927\uff0c\u5219\u5c06\u961f\u5c3e\u5143\u7d20\u5f39\u51fa\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u6bd4\u961f\u5c3e\u5143\u7d20\u5c0f\uff0c\u5219\u5c06\u961f\u5c3e\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u961f\u5c3e\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u961f\u5c3e\u5143\u7d20\uff0c\u5219\u5c06\u961f\u5c3e\u5143\u7d20\u5f39\u51fa\uff0c\u76f4\u5230\u961f\u5c3e\u5143\u7d20\u6bd4\u5f53\u524d\u5143\u7d20\u5c0f\n            # \u5982\u679c\u961f\u5217\u4e3a\u7a7a\uff0c\u5219\u5c06\u5f53\u524d\u5143\u7d20\u52a0\u5165\u961f\u5217\n            while deque and nums[i] >= nums[deque[-1]]:\n                deque.pop()\n            deque.append(i)\n            \n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u7a97\u53e3\u5de6\u8fb9\u754c\uff0c\u5219\u5c06\u7a97\u53e3\u5de6\u8fb9\u754c\u5f39\u51fa\n            if i == deque[0]:\n                deque.popleft()\n            \n            # \u5982\u679c\u5f53\u524d\u5143\u7d20\u7b49\u4e8e\u7a97\u53e3\u53f3\u8fb9\u754c\uff0c\u5219\u5c06\u7a97\u53e3\u53f3\u8fb9\u754c\u5f39\u51fa\n            if i == k - 1:\n                res.append(nums[deque[0]])\n        \n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # if len(nums1) > len(nums2):\n        #     nums1, nums2 = nums2, nums1\n        #     # if len(nums1) > len(nums2):\n        #     #     nums1, nums2 = nums2, nums1\n        #     #     # if len(nums1) > len(nums2):\n        #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     #     #     #     #     #     nums1, nums2 = nums2, nums1\n        #     #     #     #     #     #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #     #     #     #     #     #     #     #     #     #     # if len(nums1) > len(nums2):\n        #     #     #     #     #     #     #"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         high = mid\n        #     else:\n        #         low = mid + 1\n        \n        # return nums[low]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(num"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if root is None:\n        #     return []\n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * n = area\n        # 2. n = area / 2\n        # 3. n * (n + 1) = area\n        # 4. n = sqrt(area)\n        # 5. n * (n + 1) = area\n        # 6. n = sqrt(area) - 1\n        # 7. n * (n + 1) = area\n        # 8. n = sqrt(area) + 1\n        # 9. n * (n + 1) = area\n        # 10. n = sqrt(area) + 2\n        # 11. n * (n + 1) = area\n        # 12. n = sqrt(area) + 3\n        # 13. n * (n + 1) = area\n        # 14. n = sqrt(area) + 4\n        # 15. n * (n + 1) = area\n        # 16. n = sqrt(area) + 5\n        # 17. n * (n + 1) = area\n        # 18. n = sqrt(area) + 6\n        # 19. n * (n + 1) = area\n        # 20. n = sqrt(area) + 7\n        # 21. n * (n + 1) = area\n        # 22. n = sqrt(area) + 8\n        # 23. n * (n + 1) = area\n        # 24. n = sqrt(area) + 9\n        # 25. n * (n + 1) = area\n        # 26. n = sqrt(area) + 10\n        # 27. n * (n + 1) = area\n        # 28. n = sqrt(area) + 11\n        # 29. n * (n + 1) = area\n        # 30. n = sqrt(area) + 12\n        # 31. n * (n + 1) = area\n        # 32. n = sqrt(area) + 13\n        # 33. n * (n + 1) = area\n        # 34. n = sqrt(area) + 14\n        # 35. n * (n + 1) = area\n        # 36. n = sqrt(area) + 15\n        # 37. n * (n + 1) = area\n        # 38. n = sqrt(area) + 16\n        # 39. n * (n + 1) = area\n        # 40. n = sqrt(area) + 17\n        # 41. n * (n + 1) = area\n        # 42. n = sqrt(area) + 18\n        # 43. n * (n + 1) = area\n        # 44. n = sqrt(area) + 19\n        # 45. n * (n + 1) = area\n        # 46. n = sqrt(area) + 20\n        # 47. n * (n + 1) = area\n        # 48. n = sqrt(area) + 21\n        # 49. n * (n + 1) = area\n        # 50. n = sqrt(area) + 22\n        # 51. n * (n + 1) = area\n        # 52. n = sqrt(area) + 23\n        # 53. n * (n + 1) = area\n        # 54. n = sqrt(area) + 24\n        # 55. n * (n + 1) = area\n        # 56. n = sqrt(area) + 25\n        # 57. n * (n + 1) = area\n        # 58. n = sqrt(area) + 26\n        # 59. n * (n + 1) = area\n        # 60. n = sqrt(area) + 27\n        # 61. n * (n + 1) = area\n        # 62. n = sqrt(area) + 28\n        # 63. n * (n + 1) = area\n        # 64. n = sqrt(area)"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build a graph\n        word_to_neighbors = defaultdict(set)\n        for word in wordList:\n            word_to_neighbors[word].add(word)\n            word_to_neighbors[word].add(word[:-1])\n            word_to_neighbors[word].add(word[1:])\n        \n        # build a reverse graph\n        word_to_neighbors_rev = defaultdict(set)\n        for word in wordList:\n            word_to_neighbors_rev[word].add(word)\n            word_to_neighbors_rev[word].add(word[:-1])\n            word_to_neighbors_rev[word].add(word[1:])\n        \n        # build a set of words that can be reached from beginWord\n        begin_words = set()\n        if beginWord in word_to_neighbors:\n            begin_words = word_to_neighbors[beginWord]\n        \n        # build a set of words that can be reached from endWord\n        end_words = set()\n        if endWord in word_to_neighbors_rev:\n            end_words = word_to_neighbors_rev[endWord]\n        \n        # build a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can be reached from beginWord\n        # and a set of words that can be reached from endWord\n        # and a set of words that can"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n is a power of 2, then n & (n - 1) should be 0\n        # for example, 16 = 2^4, 2^4 - 2^3, 2^3 - 2^2, 2^2 - 2^1, 2^1 - 2^0\n        # 16 & 15 = 0, 16 & 14 = 0, 16 & 13 = 0, 16 & 12 = 0, 16 & 11 = 0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 15 = 2^3, 14 = 2^2, 13 = 2^1, 12 = 2^0\n        # 16 = 2^4, 1"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        ans = [[]]\n        last = None\n        i = 0\n        while i < len(nums):\n            if nums[i] != last:\n                ans.append([nums[i]])\n                last = nums[i]\n            else:\n                ans.pop()\n            j = i + 1\n            while j < len(nums) and nums[j] == nums[j - 1]:\n                j += 1\n            k = len(ans) - 1\n            while j < len(nums):\n                ans.append(ans[k][:])\n                ans[k].append(nums[j])\n                j += 1\n                k -= 1\n            i = j\n        ans.pop()\n        ans.sort(key=lambda x: (len(x), x))\n        return ans"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not heights:\n        #     return 0\n        # n = len(heights)\n        # max_area = 0\n        # for i in range(n):\n        #     min_height = heights[i]\n        #     for j in range(i, n):\n        #         min_height = min(min_height, heights[j])\n        #         area = min_height * (j - i + 1)\n        #         max_area = max(max_area, area)\n        # return max_area\n        \n        # 2. \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not heights:\n        #     return 0\n        # n = len(heights)\n        # right = [n] * n\n        # left = [0] * n\n        # stack = []\n        # for i in range(n - 1, -1, -1):\n        #     height = heights[i]\n        #     while stack and height >= heights[stack[-1]]:\n        #         right[stack.pop()] = i\n        #     stack.append(i)\n        # ans = 0\n        # for i in range(n):\n        #     ans = max(ans, (right[i] - left[i] - 1) * heights[i])\n        # return ans\n        \n        # 3. \u5355\u8c03\u9012\u589e\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not heights:\n        #     return 0\n        # n = len(heights)\n        # right = [n] * n\n        # left = [0] * n\n        # stack = []\n        # for i in range(n):\n        #     height = heights[i]\n        #     while stack and height >= heights[stack[-1]]:\n        #         right[stack.pop()] = i\n        #     stack.append(i)\n        # ans = 0\n        # for i in range(n):\n        #     ans = max(ans, (right[i] - left[i] - 1) * heights[i])\n        #     if right[i] == n:\n        #         break\n        #     left[i] = min(left[i], left[i + 1])\n        # return ans\n        \n        # 4. \u53cc\u6307\u9488\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not heights:\n        #     return 0\n        # n = len(heights)\n        # left, right = 0, n - 1\n        # left_max, right_max = heights[left], heights[right]\n        # ans = 0\n        # while left < right:\n        #     if heights[left] < heights[right]:\n        #         left_max = max(left_max, heights[left])\n        #         ans = max(ans, left_max * (right - left))\n        #         left += 1\n        #     else:\n        #         right_max = max(right_max, heights[right])\n        #         ans = max(ans, right_max * (right - left))\n        #         right -= 1\n        # return ans\n        \n        # 5. \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(n)\n        # if not heights:\n        #     return 0\n        # n = len(heights)\n        # right = [n] * n\n        # left = [0] * n\n        # stack = []\n        # for i in range(n):\n        #     height = heights[i]\n        #     while stack and height >= heights[stack[-1]]:\n        #         right[stack.pop()] = i\n        #     stack.append(i)\n        # ans = 0\n        # for i in range(n):\n        #     ans = max(ans, (right[i] - left["}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                op2 = stack.pop()\n                op1 = stack.pop()\n                if token == \"+\":\n                    res = op1 + op2\n                elif token == \"-\":\n                    res = op1 - op2\n                elif token == \"*\":\n                    res = op1 * op2\n                else:\n                    if op1 * op2 < 0:\n                        res = op1 // op2 - 1\n                    else:\n                        res = op1 // op2\n                stack.append(res)\n        \n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), -float('inf'), -float('inf')\n        s = set()\n        seen_a, seen_b = 0, 0\n        \n        for rect in rectangles:\n            x, y, a, b = rect\n            if x < x_min:\n                x_min = x\n            if y < y_min:\n                y_min = y\n            if a > x_max:\n                x_max = a\n            if b > y_max:\n                y_max = b\n            if a < seen_a or b < seen_b:\n                return False\n            seen_a = a\n            seen_b = b\n            if (x, y) in s or (a, b) in s:\n                s.remove((x, y))\n                s.remove((a, b))\n            else:\n                s.add((x, y))\n                s.add((a, b))\n        \n        area = (x_max - x_min) * (y_max - y_min)\n        if (x_min, y_min) in s or (x_min, y_max) in s or (x_max, y_min) in s or (x_max, y_max) in s:\n            return False\n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        if (seen_a, seen_b) in s or (seen_a, seen_b) not in s:\n            return False\n        if (x_min, y_min) in s or (x_min, y_max) in s or (x_max, y_min) in s or (x_max, y_max) in s:\n            return False\n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        ans = ''\n        while columnNumber:\n            ans = chr((columnNumber-1)%26 + ord('A')) + ans\n            columnNumber = (columnNumber-1)//26\n        return ans"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        curr_sum = 0\n        max_sum = nums[0]\n        # max_sum_idx = 0\n        # curr_sum_idx = 0\n        # for i in range(len(nums)):\n        #     if curr_sum + nums[i] > nums[i]:\n        #         curr_sum += nums[i]\n        #     else:\n        #         curr_sum = nums[i]\n        #         curr_sum_idx = i\n        #     if curr_sum > max_sum:\n        #         max_sum = curr_sum\n        #         max_sum_idx = curr_sum_idx\n        # return nums[max_sum_idx:max_sum_idx+2]\n        \n        # if len(nums) == 1:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[0]\n        # if nums[0] < 0 and nums[1] < 0:\n        #     return nums[1]\n        # if nums[0] < 0 and nums[1] > 0:\n        #     return nums[1]\n        # if nums[0] > 0 and nums[1] < 0:\n        #     return nums[0]\n        # if nums[0] > 0 and nums[1] > 0:\n        #     if nums[0] > nums[1]:\n        #         return nums[0]\n        #     else:\n        #         return nums[1]\n        # if nums[0] == 0:\n        #     if nums[1] > 0:\n        #         return nums[1]\n        #     else:\n        #         return nums[0]\n        # if nums[1] == 0:\n        #     if nums[0] > 0:\n        #         return nums[0]\n        #     else:\n        #         return nums[1]\n        # if nums[0] < 0 and nums[1] > 0:\n        #     if nums[0] > nums[1]:\n        #         return nums[0]\n        #     else:\n        #         return nums[1]\n        # if nums[0] > 0 and nums[1] < 0:\n        #     if nums[0] > nums[1]:\n        #         return nums[0]\n        #     else:\n        #         return nums[1]\n        # if nums[0] > 0 and nums[1] > 0:\n        #     if nums[0] > nums[1]:\n        #         if nums[0] > nums[2]:\n        #             return nums[0]\n        #         else:\n        #             return nums[2]\n        #         if nums[1] > nums[2]:\n        #             return nums[1]\n        #         else:\n        #             return nums[2]\n        #         if nums[2] > nums[3]:\n        #             return nums[2]\n        #         else:\n        #             return nums[3]\n        #         if nums[3] > nums[4]:\n        #             return nums[3]\n        #         else:\n        #             return nums[4]\n        #         if nums[4] > nums[5]:\n        #             return nums[4]\n        #         else:\n        #             return nums[5]\n        #         if nums[5] > nums[6]:\n        #             return nums[5]\n        #         else:\n        #             return nums[6]\n        #         if nums[6] > nums[7]:\n        #             return nums[6]\n        #         else:\n        #             return nums[7]\n        #         if nums[7] > nums[8]:\n        #             return nums[7]\n        #         else:\n        #             return nums[8]\n        #         if nums[8] > nums[9]:\n        #             return nums[8]\n        #         else:\n        #             return nums[9]"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = 0\n        for row in board:\n            num <<= 1\n            num |= row[0]\n            num <<= 1\n            num |= row[1]\n            num <<= 1\n            num |= row[2]\n        \n        # convert board to a list of numbers\n        nums = [num & 0x1f, num >> 5, num >> 10, num >> 15, num >> 20]\n        \n        # convert board to a list of moves\n        moves = []\n        if nums[0] == 1 and nums[1] == 2 and nums[2] == 4 and nums[3] == 5 and nums[4] == 3:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 3 and nums[3] == 4 and nums[4] == 5:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 3 and nums[3] == 5 and nums[4] == 4:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 4 and nums[3] == 3 and nums[4] == 5:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 4 and nums[3] == 5 and nums[4] == 2:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 5 and nums[3] == 3 and nums[4] == 4:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 5 and nums[3] == 4 and nums[4] == 3:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 3 and nums[3] == 5 and nums[4] == 2:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 3 and nums[3] == 4 and nums[4] == 5:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3, 4)]\n        elif nums[0] == 1 and nums[1] == 2 and nums[2] == 5 and nums[3] == 2 and nums[4] == 3:\n            moves = [(0, 1), (0, 3), (1, 2), (1, 4), (2, 3), (2, 4), (3,"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if len(set(s)) == len(set(t)):\n            return True\n        \n        if len(set(s)) != len(set(t)):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_dict:\n                s_dict[s[i]] = t[i]\n            if t[i] not in t_dict:\n                t_dict[t[i]] = s[i]\n            if s_dict[s[i]] != t[i] or t_dict[t[i]] != s[i]:\n                return False\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot point\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest element\n        # if the array is rotated, then pivot point is the largest element\n        # if the array is not rotated, then pivot point is the smallest"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1 or obstacleGrid[0][0] == 1:\n            return 0\n        \n        obstacleGrid[m-1][n-1] = 1\n        \n        for i in range(m-2,-1,-1):\n            if obstacleGrid[i][n-1] == 1:\n                break\n            obstacleGrid[i][n-1] = obstacleGrid[i+1][n-1]\n        \n        for j in range(n-2,-1,-1):\n            if obstacleGrid[m-1][j] == 1:\n                break\n            obstacleGrid[m-1][j] = obstacleGrid[m-1][j+1]\n        \n        for i in range(m-2,-1,-1):\n            for j in range(n-2,-1,-1):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i+1][j] + obstacleGrid[i][j+1]\n        \n        return obstacleGrid[0][0]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        \n        n1, n2 = 1, 1\n        for i in range(len(s) - 2, -1, -1):\n            n1, n2 = n2, n1 * (s[i] != '0' and (s[i] == '1' or (s[i] == '2' and s[i+1] in '0123456')) + n2 * (s[i+1] != '0' and (s[i+1] in '123456' or s[i+1:i+3] in '123456'))\n        return n2"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[2]\n        \n        if ans > target:\n            ans -= target\n        elif ans < -target:\n            ans += target\n        \n        i = 0\n        j = n - 1\n        \n        while i < j:\n            if nums[i] + nums[j] > -target:\n                j -= 1\n            elif nums[i] + nums[j] < -target:\n                ans -= nums[i] + nums[j]\n                i += 1\n            else:\n                return target\n            \n            if abs(ans) < abs(nums[i] + nums[j] - target):\n                ans = nums[i] + nums[j]\n            \n            if ans > target:\n                j -= 1\n            elif ans < -target:\n                i += 1\n            else:\n                return target\n            \n        return ans + target"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        left_depth = self.maxDepth(root.left)\n        right_depth = self.maxDepth(root.right)\n        \n        if left_depth > right_depth:\n            return left_depth + 1\n        else:\n            return right_depth + 1"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        if not nums1 or not nums2:\n            return []\n        \n        if len(nums1) == 1 and len(nums2) == 1:\n            if nums1[0] == nums2[0]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 2 and len(nums2) == 2:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 3 and len(nums2) == 3:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1] and nums1[2] == nums2[2]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 4 and len(nums2) == 4:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1] and nums1[2] == nums2[2] and nums1[3] == nums2[3]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 5 and len(nums2) == 5:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1] and nums1[2] == nums2[2] and nums1[3] == nums2[3] and nums1[4] == nums2[4]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 6 and len(nums2) == 6:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1] and nums1[2] == nums2[2] and nums1[3] == nums2[3] and nums1[4] == nums2[4] and nums1[5] == nums2[5]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 7 and len(nums2) == 7:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1] and nums1[2] == nums2[2] and nums1[3] == nums2[3] and nums1[4] == nums2[4] and nums1[5] == nums2[5] and nums1[6] == nums2[6]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 8 and len(nums2) == 8:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1] and nums1[2] == nums2[2] and nums1[3] == nums2[3] and nums1[4] == nums2[4] and nums1[5] == nums2[5] and nums1[6] == nums2[6] and nums1[7] == nums2[7]:\n                return [nums1[0]]\n            else:\n                return []\n        \n        if len(nums1) == 9 and len(nums2) == 9:\n            if nums1[0] == nums2[0] and nums1[1] == nums2[1] and nums1[2] == nums2[2] and nums1[3] == nums2[3] and nums1[4] == nums2[4] and nums1[5] == nums2[5] and nums1[6] == nums2[6] and nums"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        prev = None\n        ans = float('inf')\n        # inorder traversal\n        # prev is the previous node\n        # ans is the minimum difference\n        def inorder(root):\n            nonlocal prev, ans\n            if root is None:\n                return\n            inorder(root.left)\n            if prev is not None:\n                ans = min(ans, root.val - prev.val)\n            prev = root\n            inorder(root.right)\n        \n        inorder(root)\n        return ans"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the max frequency\n        max_freq, ans, cur_max_freq, prev_val = self.find_max_freq(root)\n        \n        if cur_max_freq == max_freq:\n            ans.append(prev_val)\n        \n        return ans\n        \n    def find_max_freq(self, root):\n        if not root:\n            return (0, [], None, None)\n        \n        if not root.left:\n            cur_max_freq, ans, prev_val = 1, [root.val], root.val\n        else:\n            cur_max_freq, ans, prev_val = self.find_max_freq(root.left)\n            if prev_val == root.val:\n                cur_max_freq += 1\n        \n        if not root.right:\n            if cur_max_freq > max_freq:\n                max_freq = cur_max_freq\n                ans = [root.val]\n            elif cur_max_freq == max_freq:\n                ans.append(root.val)\n        else:\n            cur_max_freq, ans, prev_val = self.find_max_freq(root.right)\n            if prev_val == root.val:\n                cur_max_freq += 1\n            \n            if cur_max_freq > max_freq:\n                max_freq = cur_max_freq\n                ans = [root.val]\n            elif cur_max_freq == max_freq:\n                ans.append(root.val)\n        \n        return (max_freq, ans, prev_val)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        if not root:\n            return []\n        \n        # find the max frequency\n        max_freq, ans, cur_max_freq, prev_val = self.find_max_freq(root)\n        \n        if cur_max_freq == max_freq:\n            ans.append(prev_val)\n        \n        return ans\n        \n    def find_max_freq(self, root):\n        if not root:\n            return (0, [], None, None)\n        \n        if not root.left:\n            cur_max_freq, ans, prev_val = 1, [root.val], root.val\n        else:\n            cur_max_freq, ans, prev_val = self.find_max_freq(root.left)\n            if prev_val == root.val:\n                cur_max_freq += 1\n        \n        if not root.right:\n            if cur_max_freq > max_freq:\n                max_freq = cur_max_freq\n                ans = [root.val]\n            elif cur_max_freq == max_freq:\n                ans.append(root.val)\n        else:\n            cur_max_freq, ans, prev_val = self.find_max_freq(root.right)\n            if prev_val == root.val:\n                cur_max_freq += 1\n            \n            if cur_max_freq > max_freq:\n                max_freq = cur_max_freq\n                ans = [root.val]\n            elif cur_max_freq == max_freq:\n                ans.append(root.val)\n        \n        return (max_freq, ans, prev_val)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        if needle not in haystack:\n            return -1\n        \n        if needle in haystack[:len(needle)]:\n            return 0\n        \n        if needle not in haystack[:len(needle)]:\n            return -1\n        \n        if needle in haystack[len(needle):]:\n            return len(needle)\n        \n        if needle not in haystack[len(needle):]:\n            return -1\n        \n        if needle in haystack[len(needle)+1:]:\n            return len(needle)+1\n        \n        if needle not in haystack[len(needle)+1:]:\n            return -1\n        \n        if needle in haystack[len(needle)+2:]:\n            return len(needle)+2\n        \n        if needle not in haystack[len(needle)+2:]:\n            return -1\n        \n        if needle in haystack[len(needle)+3:]:\n            return len(needle)+3\n        \n        if needle not in haystack[len(needle)+3:]:\n            return -1\n        \n        if needle in haystack[len(needle)+4:]:\n            return len(needle)+4\n        \n        if needle not in haystack[len(needle)+4:]:\n            return -1\n        \n        if needle in haystack[len(needle)+5:]:\n            return len(needle)+5\n        \n        if needle not in haystack[len(needle)+5:]:\n            return -1\n        \n        if needle in haystack[len(needle)+6:]:\n            return len(needle)+6\n        \n        if needle not in haystack[len(needle)+6:]:\n            return -1\n        \n        if needle in haystack[len(needle)+7:]:\n            return len(needle)+7\n        \n        if needle not in haystack[len(needle)+7:]:\n            return -1\n        \n        if needle in haystack[len(needle)+8:]:\n            return len(needle)+8\n        \n        if needle not in haystack[len(needle)+8:]:\n            return -1\n        \n        if needle in haystack[len(needle)+9:]:\n            return len(needle)+9\n        \n        if needle not in haystack[len(needle)+9:]:\n            return -1\n        \n        if needle in haystack[len(needle)+10:]:\n            return len(needle)+10\n        \n        if needle not in haystack[len(needle)+10:]:\n            return -1\n        \n        if needle in haystack[len(needle)+11:]:\n            return len(needle)+11\n        \n        if needle not in haystack[len(needle)+11:]:\n            return -1\n        \n        if needle in haystack[len(needle)+12:]:\n            return len(needle)+12\n        \n        if needle not in haystack[len(needle)+12:]:\n            return -1\n        \n        if needle in haystack[len(needle)+13:]:\n            return len(needle)+13\n        \n        if needle not in haystack[len(needle)+13:]:\n            return -1\n        \n        if needle in haystack[len(needle)+14:]:\n            return len(needle)+14\n        \n        if needle not in haystack[len(needle)+14:]:\n            return -1\n        \n        if needle in haystack[len(needle)+15:]:\n            return len(needle)+15\n        \n        if needle not in haystack[len(needle)+15:]:\n            return -1\n        \n        if needle in haystack[len(needle)+16:]:\n            return len(needle)+16\n        \n        if needle not in haystack[len(needle)+16:]:\n            return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u957f\u5ea6\u81f3\u5c116\u4e2a\u5b57\u7b26\uff0c\u6700\u591a20\u4e2a\u5b57\u7b26\n        # 2. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 3. \u4e0d\u80fd\u6709\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 4. \u5982\u679c\u957f\u5ea6\u5c0f\u4e8e6\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c116-len(password)\u4e2a\u5b57\u7b26\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e20\uff0c\u5219\u9700\u8981\u51cf\u5c11\u81f320-len(password)\u4e2a\u5b57\u7b26\n        # 5. \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e6\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e10\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e13\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e16\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e20\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e23\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e26\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e30\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e35\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e40\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e45\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e50\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        # 6. \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e6\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e10\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e13\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e16\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e20\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e23\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e26\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e30\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e35\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e40\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e45\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e50\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        # 7. \u5982\u679c\u957f\u5ea6\u5927\u4e8e\u7b49\u4e8e6\uff0c\u5219\u9700\u8981\u589e\u52a0\u81f3\u5c111\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c1\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c1\u4e2a\u6570\u5b57\n        #    \u5982\u679c\u957f\u5ea6\u5927"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 2*5 = 10\n        # 3*5 = 15\n        # 4*5 = 20\n        # 5*5 = 25\n        # 6*5 = 30\n        # 7*5 = 35\n        # 8*5 = 40\n        # 9*5 = 45\n        # 10*5 = 50\n        # 11*5 = 55\n        # 12*5 = 60\n        # 13*5 = 65\n        # 14*5 = 70\n        # 15*5 = 75\n        # 16*5 = 80\n        # 17*5 = 85\n        # 18*5 = 90\n        # 19*5 = 95\n        # 20*5 = 100\n        # 21*5 = 105\n        # 22*5 = 110\n        # 23*5 = 115\n        # 24*5 = 120\n        # 25*5 = 125\n        # 26*5 = 130\n        # 27*5 = 135\n        # 28*5 = 140\n        # 29*5 = 145\n        # 30*5 = 150\n        # 31*5 = 155\n        # 32*5 = 160\n        # 33*5 = 165\n        # 34*5 = 170\n        # 35*5 = 175\n        # 36*5 = 180\n        # 37*5 = 185\n        # 38*5 = 190\n        # 39*5 = 195\n        # 40*5 = 200\n        # 41*5 = 205\n        # 42*5 = 210\n        # 43*5 = 215\n        # 44*5 = 220\n        # 45*5 = 225\n        # 46*5 = 230\n        # 47*5 = 235\n        # 48*5 = 240\n        # 49*5 = 245\n        # 50*5 = 250\n        # 51*5 = 255\n        # 52*5 = 260\n        # 53*5 = 265\n        # 54*5 = 270\n        # 55*5 = 275\n        # 56*5 = 280\n        # 57*5 = 285\n        # 58*5 = 290\n        # 59*5 = 295\n        # 60*5 = 300\n        # 61*5 = 305\n        # 62*5 = 310\n        # 63*5 = 315\n        # 64*5 = 320\n        # 65*5 = 325\n        # 66*5 = 330\n        # 67*5 = 335\n        # 68*5 = 340\n        # 69*5 = 345\n        # 70*5 = 350\n        # 71*5 = 355\n        # 72*5 = 360\n        # 73*5 = 365\n        # 74*5 = 370\n        # 75*5 = 375\n        # 76*5 = 380\n        # 77*5 = 385\n        # 78*5 = 390\n        # 79*5 = 395\n        # 80*5 = 400\n        # 81*5 = 405\n        # 82*5 = 410\n        # 83*5 = 415\n        # 84*5 = 420\n        # 85*5 = 425\n        # 86*5 = 430\n        # 87*5 = 435\n        # 88*5 = 440\n        # 89*"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        if numRows == 2:\n            return s[::2]\n        \n        if numRows == 3:\n            return ''.join([s[i::2] for i in range(2)] + [s[1::2]])\n        \n        if numRows > 3:\n            # 2n-2\n            n = 2 * numRows - 2\n            # 2n-2 * numRows\n            num_chars = len(s)\n            # num_chars // n\n            num_groups = num_chars // n\n            # num_groups * (2n-2)\n            num_chars_per_group = num_groups * (n - 2)\n            # num_groups * (2n-2) + num_chars % num_groups\n            num_extra_chars = num_groups * (n - 2) + num_chars % num_groups\n            # num_groups * (2n-2) + num_chars % num_groups + num_extra_chars\n            num_chars_per_group_plus_extra = num_groups * (n - 2) + num_chars % num_groups + num_extra_chars\n            # num_groups * (2n-2) + num_chars % num_groups + num_extra_chars + num_chars_per_group\n            num_chars_per_group_plus_extra_plus_chars_per_group = num_groups * (n - 2) + num_chars % num_groups + num_extra_chars + num_chars_per_group\n            # num_groups * (2n-2) + num_chars % num_groups + num_extra_chars + num_chars_per_group + num_chars_per_group_plus_extra\n            num_chars_per_group_plus_extra_plus_chars_per_group_plus_extra = num_groups * (n - 2) + num_chars % num_groups + num_extra_chars + num_chars_per_group + num_chars_per_group_plus_extra\n            # num_groups * (2n-2) + num_chars % num_groups + num_extra_chars + num_chars_per_group + num_chars_per_group_plus_extra + num_chars_per_group_plus_extra_plus_chars_per_group\n            num_chars_per_group_plus_extra_plus_chars_per_group_plus_extra_plus_chars_per_group = num_groups * (n - 2) + num_chars % num_groups + num_extra_chars + num_chars_per_group + num_chars_per_group_plus_extra + num_chars_per_group_plus_extra_plus_chars_per_group\n            # num_groups * (2n-2) + num_chars % num_groups + num_extra_chars + num_chars_per_group + num_chars_per_group_plus_extra + num_chars_per_group_plus_extra_plus_chars_per_group + num_chars_per_group_plus_extra_plus_chars_per_group_plus_extra\n            num_chars_per_group_plus_extra_plus_chars_per_group_plus_extra_plus_chars_per_group_plus_extra = num_groups * (n - 2) + num_chars % num_groups + num_extra_chars + num_chars_per_group + num_chars_per_group_plus_extra + num_chars_per_group_plus_extra_plus_chars_per_group + num_chars_per_group_plus_extra_plus_chars_per_group_plus_extra\n            # num_groups * (2n-2) + num_chars % num_groups + num_extra_chars + num_chars_per_group + num_chars_per_group_plus_extra + num_chars_per_group_plus_extra_plus_chars_per_group + num_chars_per_group_plus_extra_plus_ch"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        n = len(height)\n        left_max = right_max = 0\n        left = 0\n        right = n - 1\n        ans = 0\n        \n        while left < right:\n            if height[left] < height[right]:\n                if height[left] >= left_max:\n                    left_max = height[left]\n                else:\n                    ans += left_max - height[left]\n                \n                left += 1\n            else:\n                if height[right] >= right_max:\n                    right_max = height[right]\n                else:\n                    ans += right_max - height[right]\n                \n                right -= 1\n        \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## 1. use set to store the nums\n        ## 2. use nums as index, if nums[i] is positive, mark nums[nums[i]-1] as negative\n        ## 3. if nums[i] is negative, it means nums[i] has been visited\n        ## 4. if nums[i] is positive, it means nums[i] has not been visited\n        ## 5. if nums[i] is positive, it means nums[i] has not been visited\n        ## 6. if nums[i] is positive, it means nums[i] has not been visited\n        ## 7. if nums[i] is positive, it means nums[i] has not been visited\n        ## 8. if nums[i] is positive, it means nums[i] has not been visited\n        ## 9. if nums[i] is positive, it means nums[i] has not been visited\n        ## 10. if nums[i] is positive, it means nums[i] has not been visited\n        ## 11. if nums[i] is positive, it means nums[i] has not been visited\n        ## 12. if nums[i] is positive, it means nums[i] has not been visited\n        ## 13. if nums[i] is positive, it means nums[i] has not been visited\n        ## 14. if nums[i] is positive, it means nums[i] has not been visited\n        ## 15. if nums[i] is positive, it means nums[i] has not been visited\n        ## 16. if nums[i] is positive, it means nums[i] has not been visited\n        ## 17. if nums[i] is positive, it means nums[i] has not been visited\n        ## 18. if nums[i] is positive, it means nums[i] has not been visited\n        ## 19. if nums[i] is positive, it means nums[i] has not been visited\n        ## 20. if nums[i] is positive, it means nums[i] has not been visited\n        ## 21. if nums[i] is positive, it means nums[i] has not been visited\n        ## 22. if nums[i] is positive, it means nums[i] has not been visited\n        ## 23. if nums[i] is positive, it means nums[i] has not been visited\n        ## 24. if nums[i] is positive, it means nums[i] has not been visited\n        ## 25. if nums[i] is positive, it means nums[i] has not been visited\n        ## 26. if nums[i] is positive, it means nums[i] has not been visited\n        ## 27. if nums[i] is positive, it means nums[i] has not been visited\n        ## 28. if nums[i] is positive, it means nums[i] has not been visited\n        ## 29. if nums[i] is positive, it means nums[i] has not been visited\n        ## 30. if nums[i] is positive, it means nums[i] has not been visited\n        ## 31. if nums[i] is positive, it means nums[i] has not been visited\n        ## 32. if nums[i] is positive, it means nums[i] has not been visited\n        ## 33. if nums[i] is positive, it means nums[i] has not been visited\n        ## 34. if nums[i] is positive, it means nums[i] has not been visited\n        ## 35. if nums[i] is positive, it means nums[i] has not been visited\n        ## 36. if nums[i] is positive, it means nums[i] has not been visited\n        ## 37. if nums[i] is positive, it means nums[i] has not been visited\n        ##"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        if len(nums) == 1:\n            return [0]\n        \n        nums = [(v, i) for v in nums]\n        sorted_nums = sorted(nums)\n        ranks = {v: i for i, v in enumerate(sorted_nums, 1)}\n        \n        ans = [0] * len(nums)\n        nums = [None] * len(nums)\n        \n        for v in reversed(nums):\n            i = ranks[v]\n            ans[i] = ans[i] + ans[i-1] if i else ans[i]\n            j = i - 1\n            while j and nums[j-1] > v:\n                nums[j] = nums[j-1]\n                ranks[nums[j]] = ranks[nums[j-1]]\n                j -= 1\n                ans[j] = ans[j] + ans[j-1]\n        \n            ranks[v] = j\n        \n        return ans"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end\n        intervals.sort(key=lambda x: x[1])\n        \n        # sort by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # max number of elements in the set\n        ans = 0\n        \n        # last two elements\n        a, b = -2, -1\n        \n        # iterate over intervals\n        for i, (start, end) in enumerate(intervals):\n            \n            # if current element is greater than last two elements\n            if start > b:\n                \n                # if current element is greater than second last element\n                if a > b:\n                    \n                    # if current element is greater than second element\n                    if start > a:\n                        \n                        # if current element is greater than third element\n                        if start > c:\n                            \n                            # if current element is greater than fourth element\n                            if start > d:\n                                \n                                # if current element is greater than fifth element\n                                if start > e:\n                                    \n                                    # if current element is greater than sixth element\n                                    if start > f:\n                                        \n                                        # if current element is greater than seventh element\n                                        if start > g:\n                                            \n                                            # if current element is greater than eighth element\n                                            if start > h:\n                                                \n                                                # if current element is greater than ninth element\n                                                if start > i:\n                                                    \n                                                    # if current element is greater than tenth element\n                                                    if start > j:\n                                                        \n                                                        # if current element is greater than eleventh element\n                                                        if start > k:\n                                                            \n                                                            # if current element is greater than twelfth element\n                                                            if start > l:\n                                                                ans += 1\n                                                                a, b = b, c\n                                                                c, d = d, e\n                                                                e, f = f, g\n                                                                g, h = h, i\n                                                                i, j = j, k\n                                                                k, l = l, m\n                                                                m, n = n, o\n                                                                o, p = p, q\n                                                                q, r = r, s\n                                                                s, t = t, u\n                                                                u, v = v, w\n                                                                w, x = x, y\n                                                                y, z = z, a\n                                                                a, b = b, c\n                                                                c, d = d, e\n                                                                e, f = f, g\n                                                                g, h = h, i\n                                                                i, j = j, k\n                                                                k, l = l, m\n                                                                m, n = n, o\n                                                                o, p = p, q\n                                                                q, r = r, s\n                                                                s, t = t, u\n                                                                u, v = v, w\n                                                                w, x = x, y\n                                                                y, z = z, a\n                                                                a, b = b, c\n                                                                c, d = d, e\n                                                                e, f = f, g\n                                                                g, h = h, i\n                                                                i, j = j, k\n                                                                k, l = l, m\n                                                                m, n = n, o\n                                                                o, p = p, q\n                                                                q, r = r, s\n                                                                s, t = t, u\n                                                                u, v = v, w\n                                                                w, x = x, y\n                                                                y, z = z, a\n                                                                a, b = b, c\n                                                                c, d = d, e\n                                                                e, f = f, g\n                                                                g, h = h, i\n                                                                i, j = j, k\n                                                                k, l = l, m\n                                                                m, n = n, o\n                                                                o, p = p, q\n                                                                q, r = r, s\n                                                                s, t = t, u\n                                                                u, v = v, w\n                                                                w, x = x, y\n                                                                y, z = z, a\n                                                                a, b = b, c\n                                                                c, d = d, e\n                                                                e, f = f, g\n                                                                g, h = h, i\n                                                                i, j = j, k\n                                                                k, l = l, m\n                                                                m, n = n, o\n                                                                o, p = p, q\n                                                                q, r = r, s\n                                                                s, t = t, u\n                                                                u, v = v, w"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # Recursive solution\n        # if not root:\n        #     return True\n        # return self.isMirror(root.left, root.right)\n        \n        # Iterative solution\n        if not root:\n            return True\n        q = [root, root]\n        while q:\n            a = q.pop()\n            b = q.pop()\n            if not a and not b:\n                continue\n            if not a or not b or a.val != b.val:\n                return False\n            q += a.left, b.right, a.right, b.left\n        return True\n        \n    # def isMirror(self, a, b):\n    #     if not a and not b:\n    #         return True\n    #     if not a or not b or a.val != b.val:\n    #         return False\n    #     return self.isMirror(a.left, b.right) and self.isMirror(a.right, b.left)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, a, b):\n        if not a and not b:\n            return True\n        if not a or not b or a.val != b.val:\n            return False\n        return self.isMirror(a.left, b.right) and self.isMirror(a.right, b.left)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        s = [root]\n        while s:\n            a = s.pop()\n            b = s.pop() if s else None\n            if not a and not b:\n                continue\n            if not a or not b or a.val != b.val:\n                return False\n            s += a.right, b.left, a.left, b.right\n        return True\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, a, b):\n        if not a and not b:\n            return True\n        if not a or not b or a.val != b.val:\n            return False\n        return self.isMirror(a.left, b.right) and self.isMirror(a.right, b.left)\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        if not root:\n            return True\n        if not root.left and not root.right:\n            return True\n        if not root.left or not root.right:\n            return False\n        if root.left.val"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u7b97\u51fa\u6bcf\u4e2a\u539f\u5b50\u7684\u4e2a\u6570\n        # 2. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\n        # 3. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 4. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 5. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 6. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 7. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 8. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 9. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 10. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 11. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 12. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 13. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 14. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 15. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 16. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 17. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 18. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 19. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 20. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 21. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 22. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 23. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 24. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 25. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 26. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 27. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 28. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 29. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 30. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 31. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 32. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 33. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 34. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 35. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 36. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 37. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 38. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 39. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 40. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 41. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 42. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 43. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 44. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 45. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 46. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 47. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 48. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 49. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 50. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 51. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 52. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 53. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 54. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 55. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 56. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 57. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 58. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 59. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 60. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570\n        # 61. \u518d\u7b97\u51fa\u539f\u5b50\u79cd\u7c7b\u4e2a\u6570"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # Iterative solution\n        # if root is None:\n        #     return []\n        # stack = [root]\n        # res = []\n        # while stack:\n        #     node = stack.pop()\n        #     if node:\n        #         if node.right:\n        #             stack.append(node.right)\n        #         if node.left:\n        #             stack.append(node.left)\n        #         res.append(node.val)\n        # return res\n        \n        # Recursive solution\n        # if root is None:\n        #     return []\n        # res = []\n        # res.append(root.val)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # return res\n        # if root is None:\n        #     return []\n        # res = []\n        # res.append(root.val)\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # return res\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # res.append(root.val)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # return res\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # res.append(root.val)\n        # return res\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # res.append(root.val)\n        # return res[::-1]\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # res.append(root.val)\n        # return res[::-1]\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # res.append(root.val)\n        # return res[::-1]\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # res.append(root.val)\n        # return res[::-1]\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # res.append(root.val)\n        # return res[::-1]\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res += self.preorderTraversal(root.right)\n        # if root.left:\n        #     res += self.preorderTraversal(root.left)\n        # res.append(root.val)"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 4^0 = 1\n        # 4^1 = 4\n        # 4^2 = 16\n        # 4^3 = 64\n        # 4^4 = 256\n        # 4^5 = 1024\n        # 4^6 = 4096\n        # 4^7 = 16384\n        # 4^8 = 65536\n        # 4^9 = 262144\n        # 4^10 = 1048576\n        # 4^11 = 4194304\n        # 4^12 = 16777216\n        # 4^13 = 67108864\n        # 4^14 = 268435456\n        # 4^15 = 1073741824\n        # 4^16 = 4294967296\n        # 4^17 = 18446744073709551616\n        # 4^18 = 72057594037927936\n        # 4^19 = 2882303761317031250\n        # 4^20 = 109931162261711478400\n        # 4^21 = 472236649082365136\n        # 4^22 = 208888346117138605000\n        # 4^23 = 9007199254740992\n        # 4^24 = 39062970214323264000\n        # 4^25 = 177147031578368742000\n        # 4^26 = 729705960369648\n        # 4^27 = 303087441672632960000\n        # 4^28 = 1342177285347449920000\n        # 4^29 = 5878225636693945600000\n        # 4^30 = 26559020088344563200000\n        # 4^31 = 1187789999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return [\"\"]\n        \n        if n == 1:\n            return [\"()\"]\n        \n        ans = []\n        left = right = 0\n        \n        # right must be less than left\n        # if right > left, it means we have more right than left\n        # so we need to add more left\n        # if left > right, it means we have more left than right\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and right\n        # so we can add more left or more right\n        # if left < right, it means we have more left than right\n        # so we need to add more left\n        # if right < left, it means we have more right than left\n        # so we need to add more right\n        # if left == right, it means we have equal number of left and"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # initialize the patch count and the current number of nums\n        patch, num = 0, 0\n        \n        # initialize the next number in nums\n        next_num = 1\n        \n        # iterate through the nums\n        # if next_num is greater than patch, then we need a new patch\n        # if next_num is less than patch, then we can use the next num in nums\n        # if next_num is equal to patch, then we need a new patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to get the next number in nums\n        # we can use the next patch to get the next number in patch\n        # we can use the next num in nums to"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if not numerator:\n            return '0'\n        \n        res, remainder, seen = '', abs(numerator)//abs(denominator), {}\n        \n        if (numerator < 0) ^ (denominator < 0):\n            res += '-'\n        \n        remainder, curr = remainder % denominator, remainder // denominator\n        \n        if not remainder:\n            return res\n        \n        res += str(curr)\n        seen[remainder] = len(res)\n        \n        while remainder:\n            remainder *= 10\n            curr = remainder // denominator\n            res += str(curr)\n            \n            if remainder in seen:\n                idx = seen[remainder]\n                res = res[:idx] + '(' + res[idx:] + ')'\n                break\n            seen[remainder] = len(res)\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle node\n        slow = fast = head\n        prev = None\n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # break the list into two parts\n        prev.next = None\n        \n        # sort the two parts\n        left = self.sortList(head)\n        right = self.sortList(slow)\n        \n        # merge the two sorted parts\n        new_head = ListNode(None)\n        curr = new_head\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add the remaining nodes if any\n        if left:\n            curr.next = left\n        elif right:\n            curr.next = right\n        \n        return new_head.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        # sort by width, if widths are equal, sort by height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        # longest increasing subsequence\n        nums = [envelope[1] for envelope in envelopes]\n        \n        # length of longest increasing subsequence\n        return self.lengthOfLIS(nums)\n    \n    def lengthOfLIS(self, nums):\n        if not nums:\n            return 0\n        \n        # length of longest increasing subsequence\n        length = len(nums)\n        if length <= 1:\n            return length\n        \n        # longest increasing subsequence\n        sub = [nums[0]]\n        \n        for num in nums[1:]:\n            if num > sub[-1]:\n                sub.append(num)\n            else:\n                # find the index of the smallest number greater than num in sub\n                idx = self.binarySearch(sub, num)\n                sub[idx] = num\n        \n        return len(sub)\n    \n    def binarySearch(self, nums, target):\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any row or column has zero, mark it as True\n        # if any"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the nth node to be removed is the first node\n        if n == 1:\n            head = head.next\n            return head\n        \n        # if the nth node to be removed is the last node\n        if n == 2:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = None\n            return head\n        \n        # if the nth node to be removed is the second last node\n        if n == 3:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the third last node\n        if n == 4:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the fourth last node\n        if n == 5:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the fifth last node\n        if n == 6:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the sixth last node\n        if n == 7:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the seventh last node\n        if n == 8:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the eighth last node\n        if n == 9:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the ninth last node\n        if n == 10:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the tenth last node\n        if n == 11:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the eleventh last node\n        if n == 12:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node = node.next\n            node.next = node.next.next\n            return head\n        \n        # if the nth node to be removed is the twelfth last node\n        if n == 13:\n            node = head\n            while node.next:\n                if not node.next.next:\n                    node.next = None\n                    return head\n                node ="}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if len(nums1) > len(nums2):\n        #     return self.intersection(nums2, nums1)\n        \n        # if len(nums2) == 0:\n        #     return []\n        \n        # if len(nums1) == 0:\n        #     return []\n        \n        # if len(nums2) == 1:\n        #     if nums2[0] not in nums1:\n        #         return []\n        #     else:\n        #         return [nums2[0]]\n        \n        # if len(nums1) == 1:\n        #     if nums1[0] not in nums2:\n        #         return []\n        #     else:\n        #         return [nums1[0]]\n        \n        # if len(nums1) == 2 and len(nums2) == 2:\n        #     if nums1[0] == nums2[0] and nums1[1] == nums2[1]:\n        #         return [nums1[0]]\n        #     else:\n        #         return []\n        \n        # if len(nums1) == 2 and len(nums2) == 3:\n        #     if nums1[0] == nums2[0] or nums1[0] == nums2[1] or nums1[1] == nums2[0] or nums1[1] == nums2[1]:\n        #         return [nums1[0]]\n        #     else:\n        #         return []\n        \n        # if len(nums1) == 3 and len(nums2) == 2:\n        #     if nums1[0] == nums2[0] or nums1[0] == nums2[1] or nums1[1] == nums2[0] or nums1[1] == nums2[1] or nums1[2] == nums2[0] or nums1[2] == nums2[1]:\n        #         return [nums1[0]]\n        #     else:\n        #         return []\n        \n        # if len(nums1) == 3 and len(nums2) == 3:\n        #     if nums1[0] == nums2[0] or nums1[0] == nums2[1] or nums1[0] == nums2[2] or nums1[1] == nums2[0] or nums1[1] == nums2[1] or nums1[1] == nums2[2] or nums1[2] == nums2[0] or nums1[2] == nums2[1] or nums1[2] == nums2[2]:\n        #         return [nums1[0]]\n        #     else:\n        #         return []\n        \n        # if len(nums1) == 4 and len(nums2) == 2:\n        #     if nums1[0] == nums2[0] or nums1[0] == nums2[1] or nums1[1] == nums2[0] or nums1[1] == nums2[1] or nums1[2] == nums2[0] or nums1[2] == nums2[1] or nums1[3] == nums2[0] or nums1[3] == nums2[1]:\n        #         return [nums1[0]]\n        #     else:\n        #         return []\n        \n        # if len(nums1) == 4 and len(nums2) == 3:\n        #     if nums1[0] == nums2[0] or nums1[0] == nums2[1] or nums1[0] == nums2[2] or nums1[0] == nums2[3] or nums1[1] == nums2[0] or nums1[1] == nums2[1] or nums1[1] == nums2[2] or nums1[1] == nums2[3] or nums1[2] == nums2[0] or nums1[2] == nums2[1] or num"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % machines[0] != 0:\n            return -1\n        avg = total // machines[0]\n        if avg * machines[0] != total:\n            return -1\n        pre = 0\n        ans = 0\n        cnt = 0\n        for i in machines:\n            cnt += i - avg\n            ans = max(ans, pre + cnt)\n            pre = cnt\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if m > n:\n            return findKthNumber(n, m, k)\n        if k == 1:\n            return m\n        if k > m * (n // m + 1):\n            return m * (n // m + 1) + findKthNumber(n % m, m, k - m * (n // m))\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        if k == 5:\n            return 5\n        if k == 6:\n            return 6\n        if k == 7:\n            return 7\n        if k == 8:\n            return 8\n        if k == 9:\n            return 9\n        if k == 10:\n            return 10\n        if k == 11:\n            return 11\n        if k == 12:\n            return 12\n        if k == 13:\n            return 13\n        if k == 14:\n            return 14\n        if k == 15:\n            return 15\n        if k == 16:\n            return 16\n        if k == 17:\n            return 17\n        if k == 18:\n            return 18\n        if k == 19:\n            return 19\n        if k == 20:\n            return 20\n        if k == 21:\n            return 21\n        if k == 22:\n            return 22\n        if k == 23:\n            return 23\n        if k == 24:\n            return 24\n        if k == 25:\n            return 25\n        if k == 26:\n            return 26\n        if k == 27:\n            return 27\n        if k == 28:\n            return 28\n        if k == 29:\n            return 29\n        if k == 30:\n            return 30\n        if k == 31:\n            return 31\n        if k == 32:\n            return 32\n        if k == 33:\n            return 33\n        if k == 34:\n            return 34\n        if k == 35:\n            return 35\n        if k == 36:\n            return 36\n        if k == 37:\n            return 37\n        if k == 38:\n            return 38\n        if k == 39:\n            return 39\n        if k == 40:\n            return 40\n        if k == 41:\n            return 41\n        if k == 42:\n            return 42\n        if k == 43:\n            return 43\n        if k == 44:\n            return 44\n        if k == 45:\n            return 45\n        if k == 46:\n            return 46\n        if k == 47:\n            return 47\n        if k == 48:\n            return 48\n        if k == 49:\n            return 49\n        if k == 50:\n            return 50\n        if k == 51:\n            return 51\n        if k == 52:\n            return 52\n        if k == 53:\n            return 53\n        if k == 54:\n            return 54\n        if k == 55:\n            return 55\n        if k == 56:\n            return 56\n        if k == 57:\n            return 57\n        if k == 58:\n            return 58\n        if k == 59:\n            return 59\n        if k == 60:\n            return 60\n        if k == 61:\n            return 61\n        if k == 62:\n            return 62\n        if k == 63:\n            return 63\n        if k == 64:\n            return 64\n        if k == 65:\n            return 65\n        if k == 66:\n            return 66\n        if k == 67:\n            return 67\n        if k == 68:\n            return 68\n        if k == 69:\n            return 69\n        if k == 70:"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the middle node\n        slow = head\n        fast = head\n        prev = None\n        \n        # find the middle node\n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        # set the middle node as root\n        root = TreeNode(slow.val)\n        \n        # set the next node as right child of root\n        prev.next = None\n        \n        # recursively create left and right subtree\n        if head != slow:\n            root.left = self.sortedListToBST(head)\n        \n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        elif list2:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n+1)\n        max_area = 0\n        \n        for i in range(m):\n            new_heights = [heights[j+1:] if matrix[i][j] == '1' else heights[j+1:0] for j in range(n)]\n            area = self.largestRectangleArea(new_heights)\n            max_area = max(max_area, area)\n            heights = new_heights\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        # \u5355\u8c03\u6808\n        # \u65f6\u95f4\u590d\u6742\u5ea6O(n)\n        # \u7a7a\u95f4\u590d\u6742\u5ea6O(n)\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you-xian-hui-su-by-liang-chun-qi/\n        # \u53c2\u8003\uff1ahttps://leetcode-cn.com/problems/largest-rectangle-in-histogram/solution/a-o1-solution-shou-hui-su-you"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 2**n\n}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # if nums[0] == nums[-1]:\n        #     if len(nums) == 1:\n        #         return nums[0]\n        #     if nums[1] < nums[0]:\n        #         return nums[1]\n        #     if nums[-2] > nums[-1]:\n        #         return nums[-2]\n        \n        #     low = 0\n        #     high = len(nums) - 1\n        \n        #     while low < high:\n        #         mid = (low + high) // 2\n        #         if nums[mid] > nums[mid + 1]:\n        #             return nums[mid + 1]\n        #         elif nums[mid] > nums[high]:\n        #             low = mid + 1\n        #         else:\n        #             high = mid\n        \n        #     return nums[low]\n        \n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        \n        # if len(nums) == 1:\n        #     return nums[0]\n        \n        # low = 0\n        # high = len(nums) - 1\n        \n        # while low < high:\n        #     mid = (low + high) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     elif nums[mid] > nums[high]:\n        #         low = mid + 1\n        #     else:\n        #         high = mid\n        \n        #     if nums[mid] > nums[mid - 1]:\n        #         return nums[mid]\n        #     elif nums[mid] > nums[low]:\n        #         low = mid\n        \n        #     if nums[mid] > nums[high]:\n        #         high = mid - 1\n        \n        #     if nums[mid] > nums[low] and nums[mid] > nums[high]:\n        #         return nums[high]\n        \n        #     if nums[mid] > nums[low] and nums[mid] < nums[high]:\n        #         return nums[low]\n        \n        #     if nums[mid] < nums[low] and nums[mid] > nums[high]:\n        #         return nums[high]\n        \n        #     if nums[mid] < nums[low] and nums[mid] < nums[high]:\n        #         return nums[low]\n        \n        #     if nums[mid] < nums[low] and nums[mid] < nums[high]:\n        #         return nums[high]\n        \n        #     if nums[mid] < nums[low] and nums[mid] > nums[high]:\n        #         return nums[low]\n        \n        #     if nums[mid] > nums[low] and nums[mid] > nums[high]:\n        #         return nums[high]\n        \n        #     if nums[mid] < nums[low] and nums[mid] < nums[high]:\n        #         return nums[low]\n        \n        #     if nums[mid] < nums[low] and nums[mid] < nums[high]:\n        #         return nums[high]\n        \n        #     if nums[mid] > nums[low] and nums[mid] > nums[high]:\n        #         return nums[high]\n        \n        #     if nums[mid] > nums[low] and nums[mid] > nums[high]:\n        #         return nums[low]\n        \n        #     if nums[mid] < nums[low] and nums[mid] < nums[high]:\n        #         return nums[high]\n        \n        #     if nums[mid] < nums[low] and nums[mid] < nums[high]:\n        #         return nums[low]\n        \n        #     if nums[mid] > num"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. \u53bb\u9664\u7a7a\u683c\n        s = s.strip()\n        \n        # 2. \u5224\u65ad\u662f\u5426\u6709e\n        if 'e' in s:\n            num, exp = s.split('e')\n            if '+' in exp or '-' in exp:\n                if '+' in num or '-' in num:\n                    if not self.isDecimal(num) or not self.isInteger(exp):\n                        return False\n                else:\n                    if not self.isDecimal(num) or not self.isInteger(exp):\n                        return False\n            else:\n                if not self.isDecimal(num) or not self.isInteger(exp):\n                    return False\n        else:\n            if '+' in s or '-' in s:\n                if '+' in s:\n                    num = s[1:]\n                    if not self.isDecimal(num):\n                        return False\n                else:\n                    num = s[1:]\n                    if not self.isDecimal(num):\n                        return False\n            else:\n                if not self.isDecimal(s):\n                    return False\n        \n        return True\n    \n    def isDecimal(self, num):\n        if 'e' in num:\n            num, exp = num.split('e')\n            if '+' in exp or '-' in exp:\n                if '+' in num or '-' in num:\n                    if not self.isInteger(num):\n                        return False\n                else:\n                    if not self.isInteger(num):\n                        return False\n            else:\n                if not self.isInteger(num):\n                    return False\n        else:\n            if '+' in num or '-' in num:\n                if '+' in num:\n                    num = num[1:]\n                    if not self.isInteger(num):\n                        return False\n                else:\n                    num = num[1:]\n                    if not self.isInteger(num):\n                        return False\n            else:\n                if not self.isInteger(num):\n                    return False\n        \n        if '.' in num:\n            num, dot = num.split('.')\n            if '+' in dot or '-' in dot:\n                if '+' in num or '-' in num:\n                    if not self.isInteger(num):\n                        return False\n                else:\n                    if not self.isInteger(num):\n                        return False\n            else:\n                if not self.isInteger(num):\n                    return False\n        else:\n            if '+' in num or '-' in num:\n                if '+' in num:\n                    num = num[1:]\n                    if not self.isInteger(num):\n                        return False\n                else:\n                    num = num[1:]\n                    if not self.isInteger(num):\n                        return False\n            else:\n                if not self.isInteger(num):\n                    return False\n        \n        if '.' in dot:\n            dot, dot2 = dot.split('.')\n            if '+' in dot2 or '-' in dot2:\n                if '+' in num or '-' in num:\n                    if not self.isInteger(num):\n                        return False\n                else:\n                    if not self.isInteger(num):\n                        return False\n            else:\n                if not self.isInteger(num):\n                    return False\n        else:\n            if '+' in dot or '-' in dot:\n                if '+' in num or '-' in num:\n                    if not self.isInteger(num):\n                        return False\n                else:\n                    if not self.isInteger(num):\n                        return False\n            else:\n                if not self.isInteger(num):\n                    return False\n        \n        if '.' in dot2:\n            dot2, dot22 = dot2.split('.')\n            if '+' in dot22 or '-' in dot22:\n                if '+' in num or '-' in num:\n                    if not self.isInteger(num):\n                        return False\n                else:\n                    if not self.isInteger(num):\n                        return False\n            else:\n                if not self.isInteger(num):\n                    return False\n        else:\n            if '+' in dot2 or '-' in dot2:\n                if '+' in num or '-' in num:\n                    if not self.isInteger(num):"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X, XI, XII, XIII, XIV, XV, XVI, XVII, XVIII, XIX, XX\n        # 1, 4, 5, 9, 40, 50, 90, 100, 400, 500, 900, 4000, 5000, 9000, 10000\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # 1000, 900,"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))\n        \n        # if len(s) > len(t):\n        #     return chr(ord(t) ^ ord(s) ^ ord('a'))\n        # else:\n        #     return chr(ord(s) ^ ord(t) ^ ord('a'))"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # 1. \u627e\u7a7a\u683c\n        # 2. \u904d\u5386\u7a7a\u683c\uff0c\u4f9d\u6b21\u586b\u51651-9\n        # 3. \u5982\u679c\u586b\u5165\u540e\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 4. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 5. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 6. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 7. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 8. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 9. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 10. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 11. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 12. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 13. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 14. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 15. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 16. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 17. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 18. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 19. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 20. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 21. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 22. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 23. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 24. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 25. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 26. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 27. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 28. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 29. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 30. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 31. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 32. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 33. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 34. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 35. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 36. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 37. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 38. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 39. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 40. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 41. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 42. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 43. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 44. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 45. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 46. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 47. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 48. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 49. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 50. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 51. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 52. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 53. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 54. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 55. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 56. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 57. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 58. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52301\n        # 59. \u5982\u679c\u56de\u9000\u52301\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6\n        # 60. \u5982\u679c\u4e0d\u6ee1\u8db3\uff0c\u56de\u9000\u52302\n        # 61. \u5982\u679c\u56de\u9000\u52302\uff0c\u68c0\u6d4b\u662f\u5426\u6ee1\u8db3\u6761\u4ef6"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than its parent\n        # 3. swap the values of the two nodes\n        \n        # 1. find the first node that is smaller than its parent\n        # 2. find the second node that is bigger than"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle node\n        slow = fast = head\n        # if the list has odd number of nodes, middle node is the second node from the end\n        # if the list has even number of nodes, middle node is the second node from the end - 1\n        if not head or not head.next:\n            return True\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # reverse the second half of the list\n        # slow is the new head of the second half\n        slow = self.reverseList(slow)\n        # compare the first half and the reversed second half\n        # if any node in the first half doesn't match the corresponding node in the reversed second half, return False\n        # if we reach the end of the list, return True\n        # if we reach the end of the reversed second half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half, return True\n        # if we reach the end of the first half"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        if num < 4:\n            return False\n        \n        if num % 2 == 0:\n            return False\n        \n        if num % 4 == 0:\n            return False\n        \n        if num % 16 == 0:\n            return False\n        \n        if num % 256 == 0:\n            return False\n        \n        if num % 65536 == 0:\n            return False\n        \n        if num % 409600 == 0:\n            return False\n        \n        if num % 1048576 == 0:\n            return False\n        \n        if num % 16777216 == 0:\n            return False\n        \n        if num % 1073741824 == 0:\n            return False\n        \n        if num % 16777216000 == 0:\n            return False\n        \n        if num % 1099511627776 == 0:\n            return False\n        \n        if num % 16777216000000 == 0:\n            return False\n        \n        if num % 1099511627776000000 == 0:\n            return False\n        \n        if num % 167772160000000000000 == 0:\n            return False\n        \n        if num}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # if n == 0:\n        #     return [0]\n        # if n == 1:\n        #     return [0,1]\n        # if n == 2:\n        #     return [0,1,2]\n        # if n == 3:\n        #     return [0,1,2,3]\n        # if n == 4:\n        #     return [0,1,2,3,4]\n        # if n == 5:\n        #     return [0,1,2,3,4,5]\n        # if n == 6:\n        #     return [0,1,2,3,4,5,6]\n        # if n == 7:\n        #     return [0,1,2,3,4,5,6,7]\n        # if n == 8:\n        #     return [0,1,2,3,4,5,6,7,8]\n        # if n == 9:\n        #     return [0,1,2,3,4,5,6,7,8,9]\n        # if n == 10:\n        #     return [0,1,2,3,4,5,6,7,8,9,10]\n        # if n == 11:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11]\n        # if n == 12:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12]\n        # if n == 13:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13]\n        # if n == 14:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14]\n        # if n == 15:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n        # if n == 16:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]\n        # if n == 17:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]\n        # if n == 18:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]\n        # if n == 19:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]\n        # if n == 20:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n        # if n == 21:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]\n        # if n == 22:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]\n        # if n == 23:\n        #     return [0,1,2,3,4,5,6,7,8,9,10,11,12,13,"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return head.next\n        \n        # curr = head\n        # prev = None\n        # while curr:\n        #     if curr.val == val:\n        #         if prev:\n        #             prev.next = curr.next\n        #         else:\n        #             head = curr.next\n        #     else:\n        #         prev = curr\n        #     curr = curr.next\n        # return head\n        \n        # if head is None:\n        #     return None\n        # if head.val == val:\n        #     return head.next\n        \n        # curr = head\n        # while curr:\n        #     if curr.val == val:\n        #         curr = curr.next\n        #     else:\n        #         break\n        #     prev = curr\n        #     curr = curr.next\n        # return head\n        \n        if head is None:\n            return None\n        if head.val == val:\n            return head.next\n        \n        curr = head\n        prev = None\n        while curr:\n            if curr.val == val:\n                if prev:\n                    prev.next = curr.next\n                else:\n                    head = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        if len(s1) <= 3:\n            return True\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if len(set(s1)) != len(set(s2)):\n            return False\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[1] and s1[2] == s2[0]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[1] and s1[1] == s2[0] and s1[2] == s2[2]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[0] and s1[1] == s2[2] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[1] and s1[1] == s2[2] and s1[2] == s2[0]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[1] and s1[1] == s2[0] and s1[2] == s2[2]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[0] and s1[1] == s2[2] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[1] and s1[1] == s2[2] and s1[2] == s2[0]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[1] and s1[1] == s2[2] and s1[2] == s2[0]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[1] and s1[1] == s2[2] and s1[2] == s2[0]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] == s2[1]:\n            return True\n        \n        if len(s1) == 3 and s1[0] == s2[2] and s1[1] == s2[0] and s1[2] =="}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        path_list = path.split('/')\n        path_list = [p for p in path_list if p]\n        \n        if path_list[-1] == '..':\n            if path_list:\n                if path_list[-2] == '..':\n                    path_list.pop()\n                    path_list.pop()\n                else:\n                    path_list.pop()\n        else:\n            if path_list[-1] == '.':\n                path_list.pop()\n                if path_list and path_list[-1] == '..':\n                    path_list.pop()\n                    path_list.pop()\n        \n        if not path_list:\n            path_list.append('')\n        \n        return '/' + '/'.join(path_list)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = word\n        \n        m, n = len(board), len(board[0])\n        seen = set()\n        res = []\n        \n        def dfs(i, j):\n            if board[i][j] in trie:\n                word = trie[board[i][j]]\n                if '#' in word:\n                    res.append(word['#'])\n                    trie[board[i][j]] = None\n                board[i][j] = ''\n                if i and board[i-1][j] and board[i-1][j] in trie:\n                    dfs(i-1, j)\n                if j and board[i][j-1] and board[i][j-1] in trie:\n                    dfs(i, j-1)\n                if i < m-1 and board[i+1][j] and board[i+1][j] in trie:\n                    dfs(i+1, j)\n                if j < n-1 and board[i][j+1] and board[i][j+1] in trie:\n                    dfs(i, j+1)\n                board[i][j] = word[0]\n        \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] in trie:\n                    dfs(i, j)\n        \n        return res"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if sorted(s) == sorted(t):\n            return True\n        \n        if set(s) != set(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            if s_dict.get(s[i]) is None:\n                s_dict[s[i]] = 1\n            else:\n                s_dict[s[i]] += 1\n            \n            if t_dict.get(t[i]) is None:\n                t_dict[t[i]] = 1\n            else:\n                t_dict[t[i]] += 1\n        \n        for key in s_dict:\n            if key not in t_dict or t_dict[key] != s_dict[key]:\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check row\n        # 2. check col\n        # 3. check 3x3\n        \n        # 1. check row\n        row_set = [set() for _ in range(9)]\n        col_set = [set() for _ in range(9)]\n        box_set = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    num = int(board[i][j])\n                    if num in row_set[i]:\n                        return False\n                    row_set[i].add(num)\n                    \n                    if num in col_set[j]:\n                        return False\n                    col_set[j].add(num)\n                    \n                    box_idx = (i // 3) * 3 + j // 3\n                    if num in box_set[box_idx]:\n                        return False\n                    box_set[box_idx].add(num)\n        \n        # 2. check col\n        # 3. check 3x3\n        \n        # 1. check row\n        # 2. check col\n        # 3. check 3x3\n        \n        # 1. check row\n        row_set = [set() for _ in range(9)]\n        col_set = [set() for _ in range(9)]\n        box_set = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[j][i] != '.':\n                    num = int(board[j][i])\n                    if num in row_set[i]:\n                        return False\n                    row_set[i].add(num)\n                    \n                    if num in col_set[j]:\n                        return False\n                    col_set[j].add(num)\n                    \n                    box_idx = (i // 3) * 3 + j // 3\n                    if num in box_set[box_idx]:\n                        return False\n                    box_set[box_idx].add(num)\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['1']\n        \n        if n == 2:\n            return ['1', '2']\n        \n        if n == 3:\n            return ['1', '2', 'Fizz']\n        \n        if n == 4:\n            return ['1', '2', 'Fizz', '4']\n        \n        if n == 5:\n            return ['1', '2', 'Fizz', '4', 'Buzz']\n        \n        if n == 6:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz']\n        \n        if n == 7:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7']\n        \n        if n == 8:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8']\n        \n        if n == 9:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz']\n        \n        if n == 10:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz']\n        \n        if n == 11:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11']\n        \n        if n == 12:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz']\n        \n        if n == 13:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13']\n        \n        if n == 14:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14']\n        \n        if n == 15:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']\n        \n        if n == 16:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16']\n        \n        if n == 17:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17']\n        \n        if n == 18:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz']\n        \n        if n == 19:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '19']\n        \n        if n == 20:\n            return ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz', '16', '17', 'Fizz', '1"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the whole string\n        s = s[::-1]\n        \n        # reverse each word\n        words = s.split()\n        \n        # reverse each word\n        words = [word[::-1] for word in words]\n        \n        # join all the words together\n        ans = ' '.join(words)\n        \n        # remove extra spaces\n        ans = ans.strip()\n        \n        return ans"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26\u8fdb\u5236\u8f6c10\u8fdb\u5236\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801\u662f65\uff0cZ\u7684ASCII\u7801\u662f90\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\uff0c\u6240\u4ee50\u7684ASCII\u7801\u662f48\uff0c25\u7684ASCII\u7801\u662f57\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\uff0c\u6240\u4ee5A\u7684ASCII\u7801"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        if n <= 1:\n            return n\n        \n        # 1. \u5982\u679c\u4e00\u4e2a\u5b69\u5b50\u6bd4\u4ed6\u524d\u4e00\u4e2a\u5b69\u5b50\u591a\uff0c\u90a3\u4e48\u4ed6\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u7cd6\u679c\n        # 2. \u5982\u679c\u4e00\u4e2a\u5b69\u5b50\u6bd4\u4ed6\u524d\u4e00\u4e2a\u5b69\u5b50\u5c11\uff0c\u90a3\u4e48\u4ed6\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u7cd6\u679c\n        # 3. \u5982\u679c\u4e24\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e00\u4e2a\u7cd6\u679c\n        # 4. \u5982\u679c\u4e00\u4e2a\u5b69\u5b50\u6bd4\u4e24\u4e2a\u5b69\u5b50\u591a\uff0c\u90a3\u4e48\u4ed6\u81f3\u5c11\u9700\u8981\u4e24\u4e2a\u7cd6\u679c\n        # 5. \u5982\u679c\u4e24\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e24\u4e2a\u7cd6\u679c\n        # 6. \u5982\u679c\u4e09\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e09\u4e2a\u7cd6\u679c\n        # 7. \u5982\u679c\u56db\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u56db\u4e2a\u7cd6\u679c\n        # 8. \u5982\u679c\u4e94\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e94\u4e2a\u7cd6\u679c\n        # 9. \u5982\u679c\u516d\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u516d\u4e2a\u7cd6\u679c\n        # 10. \u5982\u679c\u4e03\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e03\u4e2a\u7cd6\u679c\n        # 11. \u5982\u679c\u516b\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u516b\u4e2a\u7cd6\u679c\n        # 12. \u5982\u679c\u4e5d\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e5d\u4e2a\u7cd6\u679c\n        # 13. \u5982\u679c\u5341\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u4e2a\u7cd6\u679c\n        # 14. \u5982\u679c\u5341\u4e00\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u4e00\u4e2a\u7cd6\u679c\n        # 15. \u5982\u679c\u5341\u4e8c\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u4e8c\u4e2a\u7cd6\u679c\n        # 16. \u5982\u679c\u5341\u4e09\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u4e09\u4e2a\u7cd6\u679c\n        # 17. \u5982\u679c\u5341\u56db\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u56db\u4e2a\u7cd6\u679c\n        # 18. \u5982\u679c\u5341\u4e94\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u4e94\u4e2a\u7cd6\u679c\n        # 19. \u5982\u679c\u5341\u516d\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u516d\u4e2a\u7cd6\u679c\n        # 20. \u5982\u679c\u5341\u4e03\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u4e03\u4e2a\u7cd6\u679c\n        # 21. \u5982\u679c\u5341\u516b\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u516b\u4e2a\u7cd6\u679c\n        # 22. \u5982\u679c\u5341\u4e5d\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u5341\u4e5d\u4e2a\u7cd6\u679c\n        # 23. \u5982\u679c\u4e8c\u5341\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u4e2a\u7cd6\u679c\n        # 24. \u5982\u679c\u4e8c\u5341\u4e00\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u4e00\u4e2a\u7cd6\u679c\n        # 25. \u5982\u679c\u4e8c\u5341\u4e8c\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u4e8c\u4e2a\u7cd6\u679c\n        # 26. \u5982\u679c\u4e8c\u5341\u4e09\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u4e09\u4e2a\u7cd6\u679c\n        # 27. \u5982\u679c\u4e8c\u5341\u56db\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u56db\u4e2a\u7cd6\u679c\n        # 28. \u5982\u679c\u4e8c\u5341\u4e94\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u4e94\u4e2a\u7cd6\u679c\n        # 29. \u5982\u679c\u4e8c\u5341\u516d\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u516d\u4e2a\u7cd6\u679c\n        # 30. \u5982\u679c\u4e8c\u5341\u4e03\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u4e03\u4e2a\u7cd6\u679c\n        # 31. \u5982\u679c\u4e8c\u5341\u516b\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u516b\u4e2a\u7cd6\u679c\n        # 32. \u5982\u679c\u4e8c\u5341\u4e5d\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e8c\u5341\u4e5d\u4e2a\u7cd6\u679c\n        # 33. \u5982\u679c\u4e09\u5341\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e09\u5341\u4e2a\u7cd6\u679c\n        # 34. \u5982\u679c\u4e09\u5341\u4e00\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e09\u5341\u4e00\u4e2a\u7cd6\u679c\n        # 35. \u5982\u679c\u4e09\u5341\u4e8c\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e09\u5341\u4e8c\u4e2a\u7cd6\u679c\n        # 36. \u5982\u679c\u4e09\u5341\u4e09\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e09\u5341\u4e09\u4e2a\u7cd6\u679c\n        # 37. \u5982\u679c\u4e09\u5341\u56db\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd\u81f3\u5c11\u9700\u8981\u4e09\u5341\u56db\u4e2a\u7cd6\u679c\n        # 38. \u5982\u679c\u4e09\u5341\u4e94\u4e2a\u5b69\u5b50\u4e4b\u95f4\u5206\u6570\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u90fd"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        # find the middle node\n        slow = fast = head\n        if not fast or not fast.next:\n            return head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        # reverse the second half\n        second = slow.next\n        slow.next = None\n        # reverse the second half\n        prev = None\n        curr = second\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        # merge the two halves\n        first = head\n        second = prev\n        while second:\n            # swap the next pointers\n            next1 = first.next\n            next2 = second.next\n            first.next = second\n            second.next = next1\n            # update the pointers\n            first = next1\n            second = next2\n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping between pattern and words\n        mapping = {}\n        \n        # create a set to store the set of words used in the pattern\n        used = set()\n        \n        # iterate over the pattern and words\n        for pattern_char, word in zip(pattern, words):\n            \n            # if the pattern_char is not in the mapping, add it to the mapping\n            if pattern_char not in mapping:\n                if word in used:\n                    return False\n                mapping[pattern_char] = word\n                used.add(word)\n            \n            # if the word is already in the mapping, check if it matches the pattern_char\n            else:\n                if mapping[pattern_char] != word:\n                    return False\n        \n        # if all the words are in the mapping, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        if len(nums) == 2:\n            return [[nums[0], nums[1]], [nums[1], nums[0]]]\n        \n        if len(nums) == 3:\n            return [[nums[0], nums[1], nums[2]], [nums[0], nums[2], nums[1]], [nums[1], nums[0], nums[2]], [nums[1], nums[2], nums[0]], [nums[2], nums[0], nums[1]], [nums[2], nums[1], nums[0]]]\n        \n        if len(nums) > 3:\n            if nums[0] == nums[1] and nums[1] == nums[2]:\n                return [[nums[0], nums[1], nums[2]], [nums[0], nums[2], nums[1]], [nums[1], nums[0], nums[2]], [nums[1], nums[2], nums[0]], [nums[2], nums[0], nums[1]], [nums[2], nums[1], nums[0]]]\n            if nums[0] == nums[1] and nums[2] == nums[3]:\n                return [[nums[0], nums[1], nums[2], nums[3]], [nums[0], nums[2], nums[3], nums[1]], [nums[0], nums[3], nums[1], nums[2]], [nums[0], nums[3], nums[2], nums[1]], [nums[1], nums[0], nums[2], nums[3]], [nums[1], nums[2], nums[3], nums[0]], [nums[2], nums[0], nums[3], nums[1]], [nums[2], nums[3], nums[1], nums[0]], [nums[3], nums[0], nums[2], nums[1]], [nums[3], nums[2], nums[1], nums[0]]]\n            if nums[1] == nums[2] and nums[3] == nums[4]:\n                return [[nums[1], nums[0], nums[2], nums[3], nums[4]], [nums[1], nums[2], nums[0], nums[3], nums[4]], [nums[1], nums[3], nums[0], nums[2], nums[4]], [nums[1], nums[3], nums[2], nums[0], nums[4]], [nums[2], nums[1], nums[0], nums[3], nums[4]], [nums[2], nums[3], nums[1], nums[0], nums[4]], [nums[3], nums[1], nums[2], nums[0], nums[4]], [nums[3], nums[2], nums[1], nums[0], nums[4]], [nums[4], nums[1], nums[2], nums[3], nums[0]], [nums[4], nums[2], nums[3], nums[1], nums[0]], [nums[4], nums[3], nums[1], nums[2], nums[0]], [nums[4], nums[3], nums[2], nums[1], nums[0]], [nums[4], nums[2], nums[3], nums[1], nums[0], nums[2], nums[3], nums[4], nums[1], nums[3], nums[4], nums[2], nums[0], nums[1], nums[3], nums[4], nums[2], nums[1], nums[3], nums[4], nums"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not in the first column\n        if target < matrix[0][0]:\n            return False\n        \n        # if target is greater than the last element in the last row,\n        # then it is definitely not in the last column\n        if target > matrix[-1][-1]:\n            return False\n        \n        # if target is less than the first element in the first row,\n        # then it is definitely not"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode()\n        # create a pointer to the dummy node\n        curr = dummy\n        # create a variable to store the carry over\n        carry = 0\n        \n        # loop through l1 and l2\n        while l1 or l2 or carry:\n            # if l1 is None, set l1 to 0\n            if l1:\n                val1 = l1.val\n            else:\n                val1 = 0\n            # if l2 is None, set l2 to 0\n            if l2:\n                val2 = l2.val\n            else:\n                val2 = 0\n            # add val1 and val2 together\n            total = val1 + val2 + carry\n            # set the next node to the next node in l1 and l2\n            curr.next = ListNode(total % 10)\n            # set carry to the total divided by 10\n            carry = total // 10\n            # if l1 is None, set l1 to None\n            if l1:\n                l1 = l1.next\n            # if l2 is None, set l2 to None\n            if l2:\n                l2 = l2.next\n            # set curr to the next node\n            curr = curr.next\n        \n        # return the next node in the dummy node\n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2's complement\n        # 2. 2's complement + 1\n        # 3. 2's complement + 2\n        # 4. 2's complement + 3\n        # 5. 2's complement + 4\n        # 6. 2's complement + 5\n        # 7. 2's complement + 6\n        # 8. 2's complement + 7\n        # 9. 2's complement + 8\n        # 10. 2's complement + 9\n        # 11. 2's complement + 10\n        # 12. 2's complement + 11\n        # 13. 2's complement + 12\n        # 14. 2's complement + 13\n        # 15. 2's complement + 14\n        # 16. 2's complement + 15\n        # 17. 2's complement + 16\n        # 18. 2's complement + 17\n        # 19. 2's complement + 18\n        # 20. 2's complement + 19\n        # 21. 2's complement + 20\n        # 22. 2's complement + 21\n        # 23. 2's complement + 22\n        # 24. 2's complement + 23\n        # 25. 2's complement + 24\n        # 26. 2's complement + 25\n        # 27. 2's complement + 26\n        # 28. 2's complement + 27\n        # 29. 2's complement + 28\n        # 30. 2's complement + 29\n        # 31. 2's complement + 30\n        # 32. 2's complement + 31\n        # 33. 2's complement + 32\n        # 34. 2's complement + 33\n        # 35. 2's complement + 34\n        # 36. 2's complement + 35\n        # 37. 2's complement + 36\n        # 38. 2's complement + 37\n        # 39. 2's complement + 38\n        # 40. 2's complement + 39\n        # 41. 2's complement + 40\n        # 42. 2's complement + 41\n        # 43. 2's complement + 42\n        # 44. 2's complement + 43\n        # 45. 2's complement + 44\n        # 46. 2's complement + 45\n        # 47. 2's complement + 46\n        # 48. 2's complement + 47\n        # 49. 2's complement + 48\n        # 50. 2's complement + 49\n        # 51. 2's complement + 50\n        # 52. 2's complement + 51\n        # 53. 2's complement + 52\n        # 54. 2's complement + 53\n        # 55. 2's complement + 54\n        # 56. 2's complement + 55\n        # 57. 2's complement + 56\n        # 58. 2's complement + 57\n        # 59. 2's complement + 58\n        # 60. 2's complement + 59\n        # 61. 2's complement + 60\n        # 62. 2's complement + 61\n        # 63. 2's complement + 62\n        # 64. 2's complement + 63\n        # 65. 2's complement + 64\n        # 66. 2's complement + 65\n        # 67. 2's complement + 66\n        # 68. 2's complement + 67\n        # 69. 2's complement + 68\n        # 70. 2's"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        if len(nums) == 3 and nums[2] - nums[1] == nums[1] - nums[0]:\n            return 1\n        \n        if len(nums) == 3 and nums[2] - nums[1] != nums[1] - nums[0]:\n            return 0\n        \n        if len(nums) == 4 and nums[3] - nums[2] == nums[2] - nums[1]:\n            if nums[3] - nums[0] == nums[2] - nums[1]:\n                return 2\n            else:\n                return 1\n        \n        if len(nums) == 4 and nums[3] - nums[2] != nums[2] - nums[1]:\n            if nums[3] - nums[0] == nums[2] - nums[1]:\n                return 3\n            else:\n                return 2\n        \n        if len(nums) == 5 and nums[4] - nums[3] == nums[3] - nums[2]:\n            if nums[4] - nums[0] == nums[3] - nums[1]:\n                return 4\n            else:\n                return 3\n        \n        if len(nums) == 5 and nums[4] - nums[3] != nums[3] - nums[2]:\n            if nums[4] - nums[0] == nums[3] - nums[1]:\n                return 5\n            else:\n                return 4\n        \n        if len(nums) == 6 and nums[5] - nums[4] == nums[4] - nums[3]:\n            if nums[5] - nums[0] == nums[4] - nums[1]:\n                return 6\n            else:\n                return 5\n        \n        if len(nums) == 6 and nums[5] - nums[4] != nums[4] - nums[3]:\n            if nums[5] - nums[0] == nums[4] - nums[1]:\n                return 7\n            else:\n                return 6\n        \n        if len(nums) == 7 and nums[6] - nums[5] == nums[5] - nums[4]:\n            if nums[6] - nums[0] == nums[5] - nums[3]:\n                return 8\n            else:\n                return 7\n        \n        if len(nums) == 7 and nums[6] - nums[5] != nums[5] - nums[4]:\n            if nums[6] - nums[0] == nums[5] - nums[3]:\n                return 9\n            else:\n                return 8\n        \n        if len(nums) == 8 and nums[7] - nums[6] == nums[6] - nums[5]:\n            if nums[7] - nums[0] == nums[6] - nums[3]:\n                return 10\n            else:\n                return 9\n        \n        if len(nums) == 8 and nums[7] - nums[6] != nums[6] - nums[5]:\n            if nums[7] - nums[0] == nums[6] - nums[3]:\n                return 11\n            else:\n                return 10\n        \n        if len(nums) == 9 and nums[8] - nums[7] == nums[7] - nums[6]:\n            if nums[8] - nums[0] == nums[7] - nums[3]:\n                return 12\n            else:\n                return 11\n        \n        if len(nums) == 9 and nums[8] - nums[7] != nums[7] - nums[6]:\n            if nums[8] - nums[0] == nums[7] - nums[3]:\n                return 13\n            else:\n                return 12"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \u5148\u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u4e2a\u6570\n        # 2. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u957f\u5ea6\n        # 3. \u7b97\u51fa\u6bcf\u884c\u7a7a\u683c\u7684\u4e2a\u6570\n        # 4. \u7b97\u51fa\u6bcf\u884c\u7a7a\u683c\u7684\u5e73\u5747\u957f\u5ea6\n        # 5. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u5e73\u5747\u957f\u5ea6\n        # 6. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 7. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 8. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 9. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 10. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 11. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 12. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 13. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 14. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 15. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 16. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 17. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 18. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 19. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 20. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 21. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 22. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 23. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 24. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 25. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 26. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 27. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 28. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 29. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 30. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 31. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 32. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 33. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 34. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 35. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 36. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 37. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 38. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 39. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 40. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 41. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 42. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 43. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 44. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 45. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 46. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 47. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 48. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 49. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 50. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 51. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 52. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 53. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 54. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 55. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 56. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 57. \u7b97\u51fa\u6bcf\u884c\u5355\u8bcd\u7684\u7a7a\u683c\u6570\n        # 58. \u7b97\u51fa"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        # iterative solution\n        # if root is None:\n        #     return []\n        # stack, res = [root], []\n        # while stack:\n        #     node = stack.pop()\n        #     if node:\n        #         if node.left:\n        #             stack.append(node.left)\n        #         if node.right:\n        #             stack.append(node.right)\n        #         res.append(node.val)\n        # return res[::-1]\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.left:\n        #     res = self.postorderTraversal(root.left)\n        # if root.right:\n        #     res += self.postorderTraversal(root.right)\n        # res.append(root.val)\n        # return res\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res = []\n        # if root.right:\n        #     res = self.postorderTraversal(root.right)\n        # res.append(root.val)\n        # if root.left:\n        #     res += self.postorderTraversal(root.left)\n        # return res\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res, node = [], root\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # if node.left:\n        #     res = self.postorderTraversal(node.left)\n        # res.append(node.val)\n        # return res\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res, node = [], root\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # if node.left:\n        #     res = self.postorderTraversal(node.left)\n        # res.append(node.val)\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # return res[::-1]\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res, node = [], root\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # if node.left:\n        #     res = self.postorderTraversal(node.left)\n        # res.append(node.val)\n        # if node.left:\n        #     res = self.postorderTraversal(node.left)\n        # return res[::-1]\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res, node = [], root\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # if node.left:\n        #     res = self.postorderTraversal(node.left)\n        # res.append(node.val)\n        # if node.left:\n        #     res = self.postorderTraversal(node.left)\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # return res[::-1]\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res, node = [], root\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # if node.left:\n        #     res = self.postorderTraversal(node.left)\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # res.append(node.val)\n        # return res[::-1]\n        \n        # recursive solution\n        # if root is None:\n        #     return []\n        # res, node = [], root\n        # if node.right:\n        #     res = self.postorderTraversal(node.right)\n        # if node.left:\n        #     res"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointer approach\n        # start from the end of the array\n        # if the height at the left pointer is smaller, move the left pointer to the right\n        # if the height at the right pointer is smaller, move the right pointer to the left\n        # if the height at the left pointer is larger, move the right pointer to the left\n        # if the height at the right pointer is larger, move the left pointer to the right\n        # if the height at the left pointer is the same as the height at the right pointer, move the right pointer to the left\n        \n        # time complexity: O(n)\n        # space complexity: O(1)\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = (right - left) * min(height[right], height[left])\n            max_area = max(area, max_area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n        \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a dict\n        word_set = set(words)\n        \n        # build a dict\n        word_dict = {}\n        \n        # build a list\n        res = []\n        \n        # build a list\n        for word in words:\n            if word in word_dict:\n                continue\n            if len(word) == 0:\n                word_dict[word] = True\n                continue\n            if word in word_set:\n                word_dict[word] = True\n                continue\n            if word_dict.get(word):\n                continue\n            if word_dict.get(word[:-1]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[1:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-1] + word[1:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[1:] + word[2:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-2] + word[-1:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-2] + word[-2:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-3] + word[-2:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-3] + word[-3:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-4] + word[-3:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-4] + word[-4:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-5] + word[-4:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-5] + word[-5:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-6] + word[-5:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-6] + word[-6:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-7] + word[-6:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-7] + word[-7:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-8] + word[-7:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-8] + word[-8:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-9] + word[-8:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-9] + word[-9:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-10] + word[-9:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-10] + word[-10:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-11] + word[-10:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-11] + word[-11:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-12] + word[-11:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-12] + word[-12:]):\n                word_dict[word] = True\n                continue\n            if word_dict.get(word[:-13] + word[-12:]):\n                word_dict[word] = True\n                continue\n            if"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num < 0:\n            return '-' + self.convertToBase7(-num)\n        \n        if num < 7:\n            return str(num)\n        \n        res = ''\n        if num < 0:\n            num = -num\n        \n        while num >= 7:\n            res = str(num % 7) + res\n            num //= 7\n        \n        return str(num) + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n is a multiple of 4, then it can't be a power of 4\n        # if n is not a multiple of 4, then it can be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then it can't be a power of 4\n        # if n is a multiple of 4, then it can be a power of 4\n        # if n is not a multiple of 4, then"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a\u5217\u8868\uff0c\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u8868\u793a\u4e00\u4e2a\u7a7a\u7684\u68cb\u76d8\n        # 2. \u904d\u5386\u5217\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\uff0c\u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 3. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 4. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 5. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 6. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 7. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 8. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 9. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 10. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 11. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 12. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 13. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 14. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 15. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 16. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 17. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 18. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 19. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 20. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 21. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 22. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 23. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 24. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 25. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 26. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 27. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 28. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 29. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 30. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 31. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 32. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 33. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 34. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 35. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 36. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 37. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 38. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 39. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 40. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 41. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 42. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 43. \u5982\u679c\u5143\u7d20\u4e0d\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 44. \u5982\u679c\u5143\u7d20\u662f\u7a7a\u7684\uff0c\u5219\u5c06\u5143\u7d20\u6dfb\u52a0\u5230\u7a7a\u5217\u8868\u4e2d\n        # 4"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        if not word or not board:\n            return False\n        \n        if len(word) > len(board)*len(board[0]):\n            return False\n        \n        if len(word) == len(board)*len(board[0]):\n            if word in board:\n                return True\n            else:\n                return False\n        \n        visited = [[False for i in range(len(board[0]))] for j in range(len(board))]\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] == word[0]:\n                    if self.dfs(board, visited, word, i, j):\n                        return True\n        \n        return False\n    \n    def dfs(self, board, visited, word, i, j):\n        if len(word) == 1:\n            return True\n        \n        if board[i][j] == word[1]:\n            if self.dfs(board, visited, word, i, j+1) or self.dfs(board, visited, word, i+1, j) or self.dfs(board, visited, word, i-1, j) or self.dfs(board, visited, word, i, j-1):\n                return True\n        \n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # if nums1 is empty\n        if m == 0:\n            nums1[:] = nums2[:]\n            return\n        \n        # if nums2 is empty\n        if n == 0:\n            return\n        \n        # if nums1 is longer than nums2\n        if m > n:\n            # swap nums1 and nums2\n            nums1, nums2 = nums2, nums1\n            # swap m and n\n            m, n = n, m\n        \n        # if nums2 is longer than nums1\n        if n > m:\n            # set p1 to the end of nums1\n            p1 = m - 1\n            # set p2 to the end of nums2\n            p2 = n - 1\n            # set p3 to the end of nums1\n            p3 = m + n - 1\n            \n            # while p2 is greater than or equal to 0\n            while p2 >= 0:\n                # if p1 is greater than or equal to 0 and nums1[p1] is greater than nums2[p2]\n                if p1 >= 0 and nums1[p1] > nums2[p2]:\n                    # set nums1[p3] to nums1[p1]\n                    nums1[p3] = nums1[p1]\n                    # decrement p1\n                    p1 -= 1\n                else:\n                    # set nums1[p3] to nums2[p2]\n                    nums1[p3] = nums2[p2]\n                    # decrement p2\n                    p2 -= 1\n                # decrement p3\n                p3 -= 1\n        \n        # if nums1 is longer than nums2\n        if n <= m:\n            # set p1 to the end of nums1\n            p1 = m - 1\n            # set p2 to the end of nums2\n            p2 = n - 1\n            # set p3 to the end of nums1\n            p3 = m + n - 1\n            \n            # while p2 is greater than or equal to 0\n            while p2 >= 0:\n                # if p1 is greater than or equal to 0 and nums1[p1] is greater than nums2[p2]\n                if p1 >= 0 and nums1[p1] > nums2[p2]:\n                    # set nums1[p3] to nums1[p1]\n                    nums1[p3] = nums1[p1]\n                    # decrement p1\n                    p1 -= 1\n                else:\n                    # set nums1[p3] to nums2[p2]\n                    nums1[p3] = nums2[p2]\n                    # decrement p2\n                    p2 -= 1\n                # decrement p3\n                p3 -= 1\n\n# 2022.09.28\n# 1. 2022.09.28\n# 2. 2022.09.28\n# 3. 2022.09.28\n# 4. 2022.09.28\n# 5. 2022.09.28\n# 6. 2022.09.28\n# 7. 2022.09.28\n# 8. 2022.09.28\n# 9. 2022.09.28\n# 10. 2022.09.28\n# 11. 2022.09.28\n# 12. 2022.09.28\n# 13. 2022.09.28\n# 14. 2022.09.28\n# 15. 2022.09.28\n# 16. 2022.09.28\n# 17. 2022.09.28\n# 18. 2022.09.28\n# 19. 2022.09.28\n# 2"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 3 possible values: max1, max2, max3\n        max1 = -2**31 - 1\n        max2 = -2**31 - 1\n        max3 = -2**31 - 1\n        \n        seen = set()\n        \n        for num in nums:\n            if num in seen or num > max1:\n                if num > max2:\n                    max3 = max2\n                    max2 = num\n                elif num > max3:\n                    max3 = num\n            \n            elif num > max2:\n                max3 = max2\n                max2 = num\n            \n            seen.add(num)\n        \n        if len(seen) < 3:\n            return max1\n        \n        return max3"}]}