{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    res.append(matrix[bottom][i])\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    res.append(matrix[i][left])\n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        res = []\n        start = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i] != nums[i - 1] + 1:\n                if start == nums[i - 1]:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(nums[i - 1]))\n                start = nums[i]\n        \n        if start == nums[-1]:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(nums[-1]))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(len(s)):\n            for j in range(len(t), 0, -1):\n                if s[i] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Mark all negative numbers as 0\n        ## 2. Mark all numbers in the range [1, len(nums)] as 1\n        ## 3. Iterate through the array and mark the corresponding number as -1\n        ## 4. Iterate through the array again and return the first number that is not marked as -1\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            num = abs(nums[i])\n            if num <= n:\n                nums[num - 1] = -abs(nums[num - 1])\n        \n        for i in range(1, n + 1):\n            if nums[i - 1] > 0:\n                return i\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. Initialize the result as an empty string\n        result = \"\"\n        \n        # 2. Initialize the list of numbers from 1 to n\n        nums = [str(i) for i in range(1, n + 1)]\n        \n        # 3. Calculate the factorial of n\n        fact = math.factorial(n)\n        \n        # 4. Iterate over the numbers in the list\n        for i in range(n - 1):\n            # 5. Calculate the index of the current number in the list\n            curr_index = (k - 1) // fact\n            \n            # 6. Add the current number to the result\n            result += nums[curr_index]\n            \n            # 7. Remove the current number from the list\n            nums.pop(curr_index)\n            \n            # 8. Update the k value\n            k %= fact\n            \n            # 9. Update the factorial\n            fact //= n - i\n            \n        # 10. Add the last number to the result\n        result += nums[0]\n        \n        # 11. Return the result\n        return result"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # iterate through the array\n        for i, num in enumerate(numbers):\n            \n            # if the difference between the target and the current number is in the hashmap, return the indices\n            if target - num in hashmap:\n                return [hashmap[target - num] + 1, i + 1]\n            \n            # otherwise, add the number to the hashmap\n            hashmap[num] = i"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(idx, res, path, val, prev, op):\n            if idx == len(num):\n                if val == target and op == \"\":\n                    res.append(path[:-1])\n                return\n            \n            for i in range(idx, len(num)):\n                if i > idx and num[idx] == \"0\":\n                    break\n                cur = int(num[idx:i+1])\n                if path:\n                    cur = int(path + num[i])\n                if not path:\n                    cur = cur\n                if op == \"+\":\n                    backtrack(i+1, res, path + \"+\" + str(cur), val + cur, cur, \"+\")\n                elif op == \"-\":\n                    backtrack(i+1, res, path + \"-\" + str(cur), val - cur, -cur, \"-\")\n                else:\n                    backtrack(i+1, res, path + \"*\" + str(cur), val - prev + prev * cur, prev * cur, op)\n        \n        if not num:\n            return []\n        \n        res = []\n        backtrack(0, res, \"\", 0, 0, \"\")\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            curr_sum = curr_sum * 10 + root.val\n            \n            if not root.left and not root.right:\n                return curr_sum\n            \n            return dfs(root.left, curr_sum) + dfs(root.right, curr_sum)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()[::-1]\n        return '-'.join(s[i:i+k] for i in range(0, len(s), k))[::-1]"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank, total, start = 0, 0, 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            total += gas[i] - cost[i]\n            \n            if tank < 0:\n                start = i + 1\n                tank = 0\n                \n        return start if total >= 0 else -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 2, n):\n                for k in range(i + 1, j):\n                    dp[i][j] = max(dp[i][j], dp[i][k] + dp[k][j] + nums[i] * nums[k] * nums[j])\n        \n        return dp[0][n - 1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        carry = 1\n        for i in range(len(digits)-1, -1, -1):\n            digits[i] += carry\n            carry = digits[i] // 10\n            digits[i] %= 10\n        if carry:\n            digits = [carry] + digits\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        first_match = bool(s) and p[0] in (s[0], '?')\n        \n        if len(p) > 1 and p[1] == '*':\n            return (self.isMatch(s, p[2:]) or\n                    (first_match and self.isMatch(s[1:], p)))\n        else:\n            return first_match and self.isMatch(s[1:], p[1:])"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            output = []\n            remaining = len(nums) - k\n            for num in nums:\n                while len(output) > 0 and remaining > 0 and output[-1] < num:\n                    output.pop()\n                    remaining -= 1\n                if len(output) < k:\n                    output.append(num)\n            return output\n        \n        def merge(nums1, nums2, k):\n            output = []\n            i, j = 0, 0\n            while len(output) < k:\n                if i == len(nums1) or (j < len(nums2) and nums1[i] < nums2[j]):\n                    output.append(nums1[i])\n                    i += 1\n                else:\n                    output.append(nums2[j])\n                    j += 1\n            return output\n        \n        if len(nums1) > len(nums2):\n            return self.maxNumber(nums2, nums1, k)\n        \n        if len(nums2) == 0:\n            return [0] * k\n        \n        if k == 0:\n            return []\n        \n        if k == len(nums1):\n            return nums1\n        \n        if k == len(nums1) + len(nums2):\n            return merge(nums1, nums2, k)\n        \n        nums1_picked = pick(nums1, k)\n        nums2_picked = pick(nums2, k - len(nums1))\n        \n        return merge(nums1_picked, nums2_picked, k)"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        divisors = set()\n        for i in range(1, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                divisors.add(i)\n                divisors.add(num / i)\n        \n        return sum(divisors) == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a, b = 0, 1\n        for i in range(2, n + 1):\n            a, b = b, a + b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i + 1][j] - dungeon[i][j], 1) - dungeon[i][j], 1)\n        \n        for i in range(m - 1, -1, -1):\n            for j in range(n - 1, -1, -1):\n                dp[i][j] = max(min(dp[i][j + 1] - dungeon[i][j], 1) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # Sort the array\n        nums.sort()\n        \n        # Initialize the result\n        result = 0\n        \n        # Initialize the left and right pointers\n        left, right = 0, 1\n        \n        # Iterate over the array\n        while right < len(nums):\n            # Calculate the distance between the current and the next element\n            distance = nums[right] - nums[left]\n            \n            # Update the result if the distance is less than or equal to k\n            if distance <= k:\n                # Update the result\n                result += right - left\n                \n                # Move the left pointer to the right\n                left += 1\n            else:\n                # Move the right pointer to the right\n                right += 1\n        \n        # Return the result\n        return result"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            if s[l] in vowels and s[r] in vowels:\n                s[l], s[r] = s[r], s[l]\n                l, r = l + 1, r - 1\n            elif s[l] not in vowels:\n                l += 1\n            elif s[r] not in vowels:\n                r -= 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        longest = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_streak = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_streak += 1\n                    \n                longest = max(longest, curr_streak)\n                \n        return longest"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 11:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 12:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 13:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 14:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 15:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 16:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 17:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 18:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 19:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 20:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 21:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 22:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 23:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 24:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 25:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 26:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 27:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Solution 2"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        queue = collections.deque([(beginWord, 1)])\n        visited = set([beginWord])\n        \n        while queue:\n            word, length = queue.popleft()\n            \n            if word == endWord:\n                return length\n            \n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    new_word = word[:i] + c + word[i+1:]\n                    if new_word in wordList and new_word not in visited:\n                        visited.add(new_word)\n                        queue.append((new_word, length + 1))\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        carry = 0\n        result = []\n        i, j = len(a) - 1, len(b) - 1\n        \n        while i >= 0 or j >= 0 or carry:\n            if i >= 0:\n                carry += int(a[i])\n                i -= 1\n            if j >= 0:\n                carry += int(b[j])\n                j -= 1\n            result.append(str(carry % 2))\n            carry //= 2\n        \n        return ''.join(result[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1, -1]\n        \n        start = left\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] <= target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return [start, left]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return len(nums)\n        \n        k = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[k - 1]:\n                nums[k] = nums[i]\n                k += 1\n        \n        return k"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n <= 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(n - 1):\n            if i > max_reach:\n                return -1\n            \n            max_reach = max(max_reach, i + nums[i])\n            \n            if i == curr_reach:\n                jumps += 1\n                curr_reach = max_reach\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(prices[i] - prices[i - 1] for i in range(1, len(prices)) if prices[i] > prices[i - 1]) - x for x in prices[1:] if x > 0)\n        \n        dp = [0] * (k + 1)\n        for price in prices:\n            for i in range(1, k + 1):\n                dp[i] = max(dp[i], dp[i - 1] + price)\n                dp[i] = max(dp[i], dp[i - 1] - price)\n        return dp[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        hex_dict = {10: \"a\", 11: \"b\", 12: \"c\", 13: \"d\", 14: \"e\", 15: \"f\"}\n        hex_list = []\n        if num < 0:\n            num += 2**32\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder > 9:\n                hex_list.append(hex_dict[remainder])\n            else:\n                hex_list.append(str(remainder))\n            num = num // 16\n        \n        hex_list.reverse()\n        return \"\".join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a hashmap to store the frequency of each character in the string\n        freq = {}\n        \n        # Iterate through the string and update the frequency of each character\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # Iterate through the string again and return the first character with a frequency of 1\n        for i, char in en.umerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # If no character with a frequency of 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        if valueDiff < 0:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        bucketDict = {}\n        \n        for i in range(len(nums)):\n            bucket = nums[i] // (valueDiff + 1)\n            \n            if bucket in bucketDict:\n                return True\n            \n            if bucket - 1 in bucketDict and abs(nums[i] - bucketDict[bucket - 1]) <= valueDiff:\n                return True\n            \n            if bucket + 1 in bucketDict and abs(nums[i] - bucketDict[bucket + 1]) <= valueDiff:\n                return True\n            \n            bucketDict[bucket] = nums[i]\n            \n            if i >= indexDiff:\n                del bucketDict[nums[i - indexDiff] // (valueDiff + 1)]\n                \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0: red, 1: white, 2: blue\n        red, white, blue = 0, 0, len(nums) - 1\n        \n        while white <= blue:\n            if nums[white] == 0:\n                nums[red], nums[white] = nums[white], nums[red]\n                red += 1\n                white += 1\n            elif nums[white] == 2:\n                nums[blue], nums[white] = nums[white], nums[blue]\n                blue -= 1\n            else:\n                white += 1"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        curr_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                curr_ones += 1\n                max_ones = max(max_ones, curr_ones)\n            else:\n                curr_ones = 0\n        \n        return max_ones"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return pow(2, left_height) + self.countNodes(root.right)\n        else:\n            return pow(2, right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        # Initialize the result and the carry\n        result, carry = \"\", 0\n        \n        # Iterate over the digits of the two numbers\n        for i in range(max(len(num1), len(num2))):\n            # Get the corresponding digit for each number\n            digit1 = int(num1[-i - 1] if i < len(num1) else 0)\n            digit2 = int(num2[-i - 1] if i < len(num2) else 0)\n            \n            # Add the digits together and the carry\n            digit_sum = digit1 + digit2 + carry\n            \n            # Get the digit and the carry\n            digit, carry = digit_sum % 10, digit_sum // 10\n            \n            # Append the digit to the result\n            result = str(digit) + result\n            \n        # If the carry is still non-zero, append it to the result\n        if carry:\n            result += str(carry)\n        \n        # Return the result\n        return result"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = 1\n        res = 0\n        \n        for c in s:\n            if c.isdigit():\n                num = num * 10 + int(c)\n            elif c == '+':\n                res += sign * num\n                sign = 1\n                num = 0\n            elif c == '-':\n                res += sign * num\n                sign = -1\n                num = 0\n            elif c == '(':\n                stack.append(res)\n                stack.append(sign)\n                res = 0\n                sign = 1\n            elif c == ')':\n                res += sign * num\n                res *= stack.pop()\n                res += stack.pop()\n                num = 0\n                \n        return res + sign * num"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        sorted_capital, sorted_profits = sorted(zip(capital, profits)), sorted(profits)\n        \n        # greedy\n        pq = []\n        i = 0\n        for _ in range(k):\n            while i < len(sorted_capital) and sorted_capital[i][0] <= w:\n                heapq.heappush(pq, -sorted_profits[i])\n                i += 1\n            if not pq:\n                break\n            w -= heapq.heappop(pq)\n        \n        return w + sum(pq)"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        d = {')':'(', ']':'[', '}':'{'}\n        \n        for c in s:\n            if c not in d:\n                stack.append(c)\n            elif not stack or d[c] != stack.pop():\n                return False\n        \n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the number to its right\n        # find the first number that is larger than the number to its right\n        # swap the two numbers\n        # reverse the numbers to the right of the first number\n        \n        # find the first number that is smaller than the number to its right\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if the number is the largest permutation, then reverse the entire array\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first number that is larger than the number to its right\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two numbers\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the numbers to the right of the first number\n        nums[i + 1:] = nums[len(nums) - 1: i:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        d = {}\n        \n        for i, num in enumerate(nums):\n            if num in d and i - d[num] <= k:\n                return True\n            d[num] = i\n        \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        max_num = max(nums)\n        min_num = min(nums)\n        \n        if max_num == min_num:\n            return 0\n        \n        gap = max(1, (max_num - min_num) // (len(nums) - 1))\n        \n        buckets = [None] * (len(nums) + 1)\n        \n        for num in nums:\n            bucket_id = (num - min_num) // gap\n            if buckets[bucket_id] is None:\n                buckets[bucket_id] = num\n            else:\n                buckets[bucket_id] = min(buckets[bucket_id], num)\n        \n        prev_max = buckets[0]\n        max_gap = 0\n        \n        for bucket in buckets[1:]:\n            if bucket is None:\n                continue\n            max_gap = max(max_gap, bucket - prev_max)\n            prev_max = bucket\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [(row[i], i) for i in range(n)]\n        couples.sort()\n        \n        ans = 0\n        for i in range(0, n, 2):\n            if couples[i][0] / 2 == couples[i + 1][0] / 2:\n                continue\n            j = couples.index((couples[i][0] + 1, couples[i][1]))\n            couples[i], couples[j] = couples[j], couples[i]\n            ans += 1\n        return ans"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2 and s1 == s3:\n            return True\n        \n        if s1 == s3[:len(s1)] and s2 == s3[len(s1):]:\n            return True\n        \n        if s2 == s3[:len(s2)]:\n            return self.isInterleave(s1, s3[len(s1):], s3)\n        \n        if s1 == s3[len(s2):]:\n            return self.isInterleave(s2, s3[len(s2):], s3)\n        \n        return False"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        \n        i = j = 0\n        \n        while i < len(g) and j < len(s):\n            if g[i] <= s[j]:\n                i += 1\n            j += 1\n        \n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        ans = []\n        \n        for word in words:\n            if set(word.lower()) <= row1:\n                ans.append(word)\n            elif set(word.lower()) <= row2:\n                ans.append(word)\n            elif set(word.lower()) <= row3:\n                ans.append(word)\n                \n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next or left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        \n        for _ in range(left - 1):\n            prev = prev.next\n        \n        curr = prev.next\n        \n        for _ in range(right - left):\n            tmp = curr.next\n            curr.next = tmp.next\n            tmp.next = prev.next\n            prev.next = tmp\n        \n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if s is a palindrome, return s\n        # otherwise, return the reversed string + \"a\" + reversed string\n        \n        # find the longest palindrome that is a prefix of s\n        # reverse the string and add it to the end of s\n        # if"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        # build hashmap of t\n        hashmap = {}\n        for c in t:\n            if c not in hashmap:\n                hashmap[c] = 0\n            hashmap[c] += 1\n        \n        # build hashmap of s\n        hashmap_s = {}\n        for c in s:\n            if c not in hashmap_s:\n                hashmap_s[c] = 0\n            hashmap_s[c] += 1\n        \n        # compare hashmaps\n        match = 0\n        min_window = \"\"\n        min_length = len(s) + 1\n        \n        for c in hashmap_s:\n            if c in hashmap and hashmap[c] == hashmap_s[c]:\n                match += 1\n        \n        left = 0\n        for right in range(len(s)):\n            if s[right] in hashmap_s:\n                hashmap_s[s[right]] -= 1\n                if hashmap_s[s[right]] < hashmap[s[right]]:\n                    match -= 1\n            \n            if match == len(hashmap):\n                while left <= right and match == len(hashmap):\n                    if min_length > right - left + 1:\n                        min_length = right - left + 1\n                        min_window = s[left:right + 1]\n                    \n                    if s[left] in hashmap_s:\n                        hashmap_s[s[left]] += 1\n                        if hashmap_s[s[left]] <= hashmap[s[left]]:\n                            match += 1\n                    \n                    left += 1\n        \n        return min_window"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[0] >= distance[3] and distance[1] <= distance[2]:\n            return True\n        \n        if distance[0] <= distance[3] and distance[1] >= distance[2]:\n            return True\n        \n        if distance[0] > distance[3] and distance[1] == distance[2]:\n            return True\n        \n        if distance[0] < distance[3] and distance[1] < distance[2] and distance[4] == distance[5] and distance[4] + distance[2] >= distance[6]:\n            return True\n        \n        if distance[0] > distance[3] and distance[1] > distance[2] and distance[4] == distance[5] and distance[4] + distance[2] <= distance[6]:\n            return True\n        \n        if distance[0] == distance[3] and distance[1] < distance[2] and distance[4] < distance[5] and distance[4] + distance[5] >= distance[6]:\n            return True\n        \n        if distance[0] == distance[3] and distance[1] > distance[2] and distance[4] > distance[5] and distance[4] + distance[5] <= distance[6]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Create a hashmap to store the frequency of each character in the string\n        hashmap = {}\n        \n        # Iterate through the string and update the hashmap with the frequency of each character\n        for char in s:\n            if char not in hashmap:\n                hashmap[char] = 1\n            else:\n                hashmap[char] += 1\n        \n        # Initialize the result to 0\n        result = 0\n        \n        # Iterate through the hashmap and check if the frequency is odd\n        for char, freq in hashmap.items():\n            if freq % 2 == 1:\n                result += freq - 1\n                hashmap[char] -= 1\n            result += hashmap[char]\n        \n        # If the result is greater than or equal to the length of the string, return the result\n        if result >= len(s):\n            return result\n        \n        # Otherwise, return the result plus 1\n        return result + 1"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder.pop())\n        idx = inorder.index(root.val)\n        \n        root.right = self.buildTree(inorder[idx+1:], postorder)\n        root.left = self.buildTree(inorder[:idx], postorder)\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the trees in the forest\n        trees = []\n        for row in forest:\n            for tree in row:\n                if tree > 1:\n                    trees.append(tree)\n        \n        # sort the trees in ascending order\n        trees.sort()\n        \n        # start from the top left corner\n        steps = 0\n        curr_pos = (0, 0)\n        for tree in trees:\n            steps += self.bfs(forest, curr_pos, tree)\n            if steps == -1:\n                return -1\n        \n        return steps\n    \n    def bfs(self, forest, start, target):\n        \"\"\"\n        :type forest: List[List[int]]\n        :type start: Tuple[int, int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # get the dimensions of the forest\n        m, n = len(forest), len(forest[0])\n        \n        # initialize the queue with the starting position\n        queue = collections.deque([start])\n        \n        # initialize the visited set\n        visited = set()\n        \n        # initialize the distance to the target\n        distance = 0\n        \n        # loop until the queue is empty\n        while queue:\n            # get the number of elements in the queue\n            size = len(queue)\n            \n            # loop through the queue\n            for _ in range(size):\n                # get the current position\n                curr_pos = queue.popleft()\n                \n                # check if the current position is the target\n                if forest[curr_pos[0]][curr_pos[1]] == target:\n                    return distance\n                \n                # check if the current position has been visited\n                if curr_pos in visited:\n                    continue\n                \n                # add the current position to the visited set\n                visited.add(curr_pos)\n                \n                # get the four adjacent positions\n                adj_pos = [(curr_pos[0] - 1, curr_pos[1]), (curr_pos[0], curr_pos[1] + 1), (curr_pos[0] + 1, curr_pos[1]), (curr_pos[0], curr_pos[1] - 1)]\n                \n                # loop through the adjacent positions\n                for adj_pos in adj_pos:\n                    # check if the adjacent position is within the bounds of the forest\n                    if 0 <= adj_pos[0] < m and 0 <= adj_pos[1] < n and forest[adj_pos[0]][adj_pos[1]] > 1:\n                        # add the adjacent position to the queue\n                        queue.append(adj_pos)\n            \n            # increment the distance\n            distance += 1\n        \n        # return -1 if the target is not found\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return 1 + self.minDepth(root.right)\n        \n        if not root.right:\n            return 1 + self.minDepth(root.left)\n        \n        return 1 + min(self.minDepth(root.left), self.minDepth(root.right))"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Calculate the prefix sum\n        # 2. Sort the prefix sum\n        # 3. Use two pointers to find the range sum\n        # 4. Use a hashmap to store the frequency of the prefix sum\n        # 5. Iterate the prefix sum\n        # 6. For each prefix sum, find the range sum in the hashmap\n        # 7. Update the frequency of the range sum\n        # 8. Return the result\n        \n        # 1. Calculate the prefix sum\n        n = len(nums)\n        prefix_sum = [0] * (n + 1)\n        for i in range(n):\n            prefix_sum[i + 1] = prefix_sum[i] + nums[i]\n        \n        # 2. Sort the prefix sum\n        prefix_sum.sort()\n        \n        # 3. Use two pointers to find the range sum\n        ans = 0\n        for i in range(n):\n            # 4. Use a hashmap to store the frequency of the prefix sum\n            # 5. Iterate the prefix sum\n            # 6. For each prefix sum, find the range sum in the hashmap\n            # 7. Update the frequency of the range sum\n            # 8. Return the result\n            ans += self.binary_search(prefix_sum, lower + prefix_sum[i], upper)\n            self.update(prefix_sum, prefix_sum[i])\n        \n        return ans\n    \n    def binary_search(self, prefix_sum, target, upper):\n        # 9. Return the result\n        # 10. Use a hashmap to store the frequency of the prefix sum\n        # 11. Iterate the prefix sum\n        # 12. For each prefix sum, find the range sum in the hashmap\n        # 13. Update the frequency of the range sum\n        # 14. Return the result\n        # 15. Use a hashmap to store the frequency of the prefix sum\n        # 16. Iterate the prefix sum\n        # 17. For each prefix sum, find the range sum in the hashmap\n        # 18. Update the frequency of the range sum\n        # 19. Return the result\n        # 20. Use a hashmap to store the frequency of the prefix sum\n        # 21. Iterate the prefix sum\n        # 22. For each prefix sum, find the range sum in the hashmap\n        # 23. Update the frequency of the range sum\n        # 24. Return the result\n        # 25. Use a hashmap to store the frequency of the prefix sum\n        # 26. Iterate the prefix sum\n        # 27. For each prefix sum, find the range sum in the hashmap\n        # 28. Update the frequency of the range sum\n        # 29. Return the result\n        # 30. Use a hashmap to store the frequency of the prefix sum\n        # 31. Iterate the prefix sum\n        # 32. For each prefix sum, find the range sum in the hashmap\n        # 33. Update the frequency of the range sum\n        # 34. Return the result\n        # 35. Use a hashmap to store the frequency of the prefix sum\n        # 36. Iterate the prefix sum\n        # 37. For each prefix sum, find the range sum in the hashmap\n        # 38. Update the frequency of the range sum\n        # 39. Return the result\n        # 40. Use a hashmap to store the frequency of the prefix sum\n        # 41. Iterate the prefix sum\n        # 42. For each prefix sum, find the range sum in the hashmap\n        # 43. Update the frequency of the range sum\n        # 44. Return the result\n        # 45. Use a hashmap to store the frequency of the prefix sum\n        # 46. Iterate the prefix sum\n        # 47. For each prefix sum, find the range sum in the hashmap\n        # 48. Update the frequency of the range sum\n        # 49. Return the result\n        # 50. Use a hashmap to store the frequency of the prefix sum\n        # 51. Iterate the prefix sum\n        # 52. For each prefix sum, find the range sum in the hash"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((2 * n + 0.25) ** 0.5 - 0.5)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            level = []\n            for _ in range(len(q)):\n                node = q.pop(0)\n                level.append(node.val)\n                if node.left:\n                    q.append(node.left)\n                if node.right:\n                    q.append(node.right)\n            res.insert(0, level)\n        \n        return res"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if not s or s[0] == '0':\n            return 0\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        j = 0\n        \n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        \n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2^n - 1 is the max value of the gray code sequence\n        # 2. 2^n - 1 - 2^(n-1) is the min value of the gray code sequence\n        # 3. 2^n - 1 - 2^(n-1) is the max value of the gray code sequence\n        # 4. 2^n - 1 - 2^(n-1) - 2^(n-1) is the min value of the gray code sequence\n        # 5. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) is the max value of the gray code sequence\n        # 6. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) is the min value of the gray code sequence\n        # 7. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) is the max value of the gray code sequence\n        # 8. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) - 2^(n-3) is the min value of the gray code sequence\n        # 9. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) - 2^(n-3) - 2^(n-4) is the max value of the gray code sequence\n        # 10. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) - 2^(n-3) - 2^(n-4) - 2^(n-4) is the min value of the gray code sequence\n        # 11. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) - 2^(n-3) - 2^(n-4) - 2^(n-4) - 2^(n-5) is the max value of the gray code sequence\n        # 12. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) - 2^(n-3) - 2^(n-4) - 2^(n-4) - 2^(n-5) - 2^(n-5) is the min value of the gray code sequence\n        # 13. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) - 2^(n-3) - 2^(n-4) - 2^(n-4) - 2^(n-5) - 2^(n-5) - 2^(n-6) is the max value of the gray code sequence\n        # 14. 2^n - 1 - 2^(n-1) - 2^(n-1) - 2^(n-2) - 2^(n-2) - 2^(n-3) - 2^(n-3) - 2^(n-4) - 2^(n-4) - 2^(n-5) - 2^(n-5) - 2^(n-6) - 2^(n-6) is the min value of the gray code sequence"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        \n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        \n        for i in range(3, n + 1):\n            a, b = b, a + b\n        \n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # create a set of words from wordDict\n        wordSet = set(wordDict)\n        \n        # create a list of booleans to track whether each index in s can be segmented\n        dp = [False] * (len(s) + 1)\n        \n        # initialize the first index to True\n        dp[0] = True\n        \n        # iterate through each character in s\n        for i in range(len(s)):\n            \n            # iterate through each word in wordSet\n            for word in wordSet:\n                \n                # if the current word is a prefix of s\n                if s[i:i + len(word)] == word:\n                    \n                    # if the current index is True, set the next index to True\n                    if dp[i]:\n                        dp[i + len(word)] = True\n        \n        # return the last index\n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, lower=float('-inf'), upper=float('inf')):\n            if not node:\n                return True\n            \n            val = node.val\n            if val <= lower or val >= upper:\n                return False\n            \n            if not valid(node.right, val, upper):\n                return False\n            \n            if not valid(node.left, lower, val):\n                return False\n            \n            return True\n        \n        return valid(root)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # initialize the result list\n        result = []\n        \n        # iterate over the intervals\n        for interval in intervals:\n            \n            # if the current interval is after the new interval, add it to the result\n            if interval[1] < newInterval[0]:\n                result.append(interval)\n            \n            # if the current interval is before the new interval, check if the new interval overlaps with the current interval\n            elif interval[0] > newInterval[1]:\n                \n                # if the new interval overlaps with the current interval, merge the new interval with the current interval\n                if not result or result[-1][1] < newInterval[0]:\n                    result.append(newInterval)\n                    newInterval = interval\n                \n                # if the new interval does not overlap with the current interval, add the current interval to the result\n                else:\n                    result[-1][1] = max(result[-1][1], interval[1])\n            \n            # if the current interval overlaps with the new interval, merge the current interval with the new interval\n            else:\n                newInterval = [min(newInterval[0], interval[0]), max(newInterval[1], interval[1])]\n        \n        # add the final interval to the result\n        result.append(newInterval)\n        \n        # return the result\n        return result"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_palindrome(s):\n            return s == s[::-1]\n        \n        res = []\n        if not is_palindrome(s):\n            return res\n        \n        res.append([s])\n        \n        for i in range(1, len(s)):\n            if is_palindrome(s[:i]):\n                for sub in res:\n                    if s[i:] and is_palindrome(s[i:]):\n                        sub.append(s[i:])\n                        res.append(sub)\n        \n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('inf')\n        max_val = float('-inf')\n        \n        # Initialize min_heap and max_heap\n        min_heap = []\n        max_heap = []\n        \n        # Initialize min_val and max_val\n        min_val = float('"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 2. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 3. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 4. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 5. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 6. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 7. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 8. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 9. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 10. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 11. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 12. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 13. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 14. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 15. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 16. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 17. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 18. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 19. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 20. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 21. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 22. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 23. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 24. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 25. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 26. The number of pigs needed is the ceil(log(buckets) / log(minutesToTest / minutesToDie + 1))\n        # 27. The number of pigs needed is the ceil(log("}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        heap = [(grid[0][0], 0, 0)]\n        seen = set((0, 0))\n        ans = 0\n        \n        while heap:\n            time, x, y = heapq.heappop(heap)\n            ans = max(ans, time)\n            if x == y == n - 1:\n                return ans\n            for nx, ny in ((x, y + 1), (x + 1, y), (x, y - 1), (x - 1, y)):\n                if 0 <= nx < n and 0 <= ny < n and (nx, ny) not in seen:\n                    seen.add((nx, ny))\n                    heapq.heappush(heap, (grid[nx][ny], nx, ny))\n                    heapq.heapify(heap)\n        \n        return ans"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [[0] * n for _ in range(m)]\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 or j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        \n        return dp[m - 1][n - 1]"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1) - 1, -1, -1):\n            for j in range(len(num2) - 1, -1, -1):\n                mul = int(num1[i]) * int(num2[j])\n                p1 = i + j\n                p2 = i + j + 1\n                \n                mul += res[p2]\n                res[p1] += mul // 10\n                res[p2] += mul % 10\n                \n        res_str = \"\"\n        for i in res:\n            if res_str or i != 0:\n                res_str += str(i)\n        \n        return res_str"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, nums, target, start, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n            return\n        \n        for i in xrange(start, len(nums)):\n            if i > start and nums[i] == nums[i - 1]:\n                continue\n            self.dfs(nums, target - nums[i], i + 1, path + [nums[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or (word[0].isupper() and word[1:].islower()):\n            return True\n        elif word[0].islower() and word[1:].isupper():\n            return False\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [], []\n        \n        while root or stack:\n            while root:\n                stack.append(root)\n                root = root.left\n            \n            root = stack.pop()\n            res.append(root.val)\n            root = root.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root_val = preorder[0]\n        root = TreeNode(root_val)\n        \n        inorder_index = inorder.index(root_val)\n        \n        root.left = self.buildTree(preorder[1:inorder_index+1], inorder[:inorder_index])\n        root.right = self.buildTree(preorder[inorder_index+1:], inorder[inorder_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the number of '(' and ')'\n        left, right = 0, 0\n        for c in s:\n            if c == '(':\n                left += 1\n            elif c == ')':\n                if left > 0:\n                    left -= 1\n                else:\n                    right += 1\n        \n        # find the minimum number of '(' and ')'\n        min_remove = left + right\n        \n        # find all valid strings\n        queue = collections.deque([s])\n        seen = {s}\n        while queue:\n            s = queue.popleft()\n            if s.replace('(', '') == s.replace(')', ''):\n                min_remove = min(min_remove, len(s))\n                if min_remove == 0:\n                    return [s]\n            else:\n                for i in range(len(s)):\n                    if s[i] != '(' and s[i] != ')':\n                        continue\n                    new_s = s[:i] + s[i+1:]\n                    if new_s not in seen:\n                        seen.add(new_s)\n                        queue.append(new_s)\n        \n        return list(seen)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode()\n        # create a heap\n        heap = []\n        # iterate over the lists\n        for l in lists:\n            # if the list is not empty\n            if l:\n                # add the head of the list to the heap\n                heapq.heappush(heap, (l.val, l))\n        # create a pointer to the dummy node\n        curr = dummy\n        # while the heap is not empty\n        while heap:\n            # pop the smallest element from the heap\n            val, node = heapq.heappop(heap)\n            # set the value of the current node to the value of the node\n            curr.next = node\n            # set the next node of the current node to the next node of the node\n            curr = curr.next\n            # if the next node is not None\n            if curr.next:\n                # push the next node to the heap\n                heapq.heappush(heap, (curr.next.val, curr.next))\n        # return the next node of the dummy node\n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. create a dp array of size len(s) + 1\n        # 2. initialize dp[i] = i - 1\n        # 3. iterate over s from right to left\n        # 4. for each char, iterate over all previous palindromes\n        # 5. if s[i - j - 1] == s[i] and s[i - j - 1:i + 1] is palindrome,\n        #    dp[i] = min(dp[i], dp[i - j - 1] + 1)\n        # 6. return dp[-1]\n        \n        n = len(s)\n        dp = [n - i - 1 for i in range(n)]\n        \n        for i in range(n - 2, -1, -1):\n            for j in range(i + 1, n):\n                if s[i] == s[j] and s[i:j + 1] == s[i:j + 1][::-1]:\n                    dp[j] = min(dp[j], dp[i] + 1)\n        \n        return dp[-1]"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the number of trailing zeros in n\n        # 2. find the number of trailing zeros in n-1\n        # 3. find the number of trailing zeros in n-2\n        # 4. find the number of trailing zeros in n-3\n        # 5. find the number of trailing zeros in n-4\n        # 6. find the number of trailing zeros in n-5\n        # 7. find the number of trailing zeros in n-6\n        # 8. find the number of trailing zeros in n-7\n        # 9. find the number of trailing zeros in n-8\n        # 10. find the number of trailing zeros in n-9\n        # 11. find the number of trailing zeros in n-10\n        # 12. find the number of trailing zeros in n-11\n        # 13. find the number of trailing zeros in n-12\n        # 14. find the number of trailing zeros in n-13\n        # 15. find the number of trailing zeros in n-14\n        # 16. find the number of trailing zeros in n-15\n        # 17. find the number of trailing zeros in n-16\n        # 18. find the number of trailing zeros in n-17\n        # 19. find the number of trailing zeros in n-18\n        # 20. find the number of trailing zeros in n-19\n        # 21. find the number of trailing zeros in n-20\n        # 22. find the number of trailing zeros in n-21\n        # 23. find the number of trailing zeros in n-22\n        # 24. find the number of trailing zeros in n-23\n        # 25. find the number of trailing zeros in n-24\n        # 26. find the number of trailing zeros in n-25\n        # 27. find the number of trailing zeros in n-26\n        # 28. find the number of trailing zeros in n-27\n        # 29. find the number of trailing zeros in n-28\n        # 30. find the number of trailing zeros in n-29\n        # 31. find the number of trailing zeros in n-30\n        # 32. find the number of trailing zeros in n-31\n        # 33. find the number of trailing zeros in n-32\n        # 34. find the number of trailing zeros in n-33\n        # 35. find the number of trailing zeros in n-34\n        # 36. find the number of trailing zeros in n-35\n        # 37. find the number of trailing zeros in n-36\n        # 38. find the number of trailing zeros in n-37\n        # 39. find the number of trailing zeros in n-38\n        # 40. find the number of trailing zeros in n-39\n        # 41. find the number of trailing zeros in n-40\n        # 42. find the number of trailing zeros in n-41\n        # 43. find the number of trailing zeros in n-42\n        # 44. find the number of trailing zeros in n-43\n        # 45. find the number of trailing zeros in n-44\n        # 46. find the number of trailing zeros in n-45\n        # 47. find the number of trailing zeros in n-46\n        # 48. find the number of trailing zeros in n-47\n        # 49. find the number of trailing zeros in n-48\n        # 50. find the number of trailing zeros in n-49\n        # 51. find the number of trailing zeros in n-50\n        # 52. find the number of trailing zeros in n-51\n        # 53"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # build a hashmap for words\n        word_map = {word: i for i, word in enumerate(words)}\n        \n        # build a hashmap for reversed words\n        reverse_map = {}\n        for word in words:\n            reverse_map[word[::-1]] = word_map[word]\n        \n        # build a result list\n        result = []\n        \n        # iterate over words\n        for i, word in enumerate(words):\n            # reverse the word\n            rev_word = word[::-1]\n            \n            # if the reversed word is a palindrome\n            if rev_word in reverse_map:\n                # if the reversed word is not the original word\n                if rev_word != word and rev_word[0] == word[0]:\n                    # add the pair to the result\n                    result.append([word_map[rev_word], i])\n            \n            # if the reversed word is a palindrome\n            if word in reverse_map:\n                # if the reversed word is not the original word\n                if rev_word != word and rev_word[0] == word[0]:\n                    # add the pair to the result\n                    result.append([i, word_map[rev_word]])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid + 1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        walls = 0\n        while True:\n            infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.add((i, j))\n            if not infected:\n                return walls\n            walls += 1\n            infected = set(infected)\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        for ni, nj in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                            if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 0:\n                                isInfected[ni][nj] = 2\n                                infected.add((ni, nj))\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 2:\n                        isInfected[i][j] = 3\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 3:\n                        for ni, nj in [(i - 1, j), (i + 1, j), (i, j - 1), (i, j + 1)]:\n                            if 0 <= ni < m and 0 <= nj < n and isInfected[ni][nj] == 1:\n                                isInfected[ni][nj] = 0\n                                infected.remove((ni, nj))\n            if not infected:\n                return walls"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        res = 0\n        \n        for i in range(m):\n            for j in range(n):\n                res = max(res, self.dfs(matrix, dp, i, j))\n        \n        return res\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        res = 1\n        \n        for di, dj in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n            ni, nj = i + di, j + dj\n            if 0 <= ni < m and 0 <= nj < n and matrix[ni][nj] > matrix[i][j]:\n                res = max(res, 1 + self.dfs(matrix, dp, ni, nj))\n        \n        dp[i][j] = res\n        return res"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            quotient, remainder = divmod(n, i)\n            count += quotient * (i / 10)\n            if remainder == 1:\n                count += n % i + 1\n            i *= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build the dp table\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        for i in range(len(s)):\n            for word in wordDict:\n                if s[i:i + len(word)] == word and dp[i]:\n                    dp[i + len(word)] = True\n        \n        # build the result\n        res = []\n        if dp[-1]:\n            self.dfs(s, wordDict, dp, \"\", res)\n        \n        return res\n    \n    def dfs(self, s, wordDict, dp, curr, res):\n        if not curr:\n            res.append(\" \".join(curr))\n            return\n        \n        for word in wordDict:\n            if s[:(len(word) - 1)] == word and dp[len(word) - 1]:\n                curr.append(word)\n                self.dfs(s[len(word):], wordDict, dp, curr, res)\n                curr.pop()"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = collections.deque([root])\n        result = []\n        left_to_right = True\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.popleft()\n                if left_to_right:\n                    level.append(node.val)\n                else:\n                    level.insert(0, node.val)\n                \n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            \n            result.append(level)\n            left_to_right = not left_to_right\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        res = []\n        for h in range(12):\n            for m in range(60):\n                if bin(h).count('1') + bin(m).count('1') == turnedOn:\n                    res.append('%d:%02d' % (h, m))\n        \n        return res"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1, 1]]\n        \n        res = [[1] * (numRows) for _ in range(numRows)]\n        \n        for i in range(2, numRows):\n            for j in range(1, i):\n                res[i][j] = res[i - 1][j - 1] + res[i - 1][j]\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n /= 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        seen = set((0, 0) + (m-1, n-1))\n        ans = 0\n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        \n        while heap:\n            h, i, j = heapq.heappop(heap)\n            for di, dj in dirs:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < m and 0 <= nj < n and (ni, nj) not in seen:\n                    ans += max(0, h - heightMap[ni][nj])\n                    heapq.heappush(heap, (max(h, heightMap[ni][nj]), ni, nj))\n                    seen.add((ni, nj))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # convert to lowercase\n        s = s.lower()\n        \n        # remove non-alphanumeric characters\n        s = re.sub(r'[^a-z0-9]', '', s)\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # Initialize the result list\n        result = []\n        \n        # Initialize the min heap\n        min_heap = []\n        \n        # Initialize the max heap\n        max_heap = []\n        \n        # Initialize the median\n        median = 0.0\n        \n        # Initialize the window\n        window = []\n        \n        # Initialize the window sum\n        window_sum = 0.0\n        \n        # Initialize the window median\n        window_median = 0.0\n        \n        # Initialize the window median\n        window_median_index = 0\n        \n        # Initialize the window median\n        window_median_count = 0\n        \n        # Initialize the window median\n        window_median_count_index = 0\n        \n        # Initialize the window median\n        window_median_count_index_2 = 0\n        \n        # Initialize the window median\n        window_median_count_index_3 = 0\n        \n        # Initialize the window median\n        window_median_count_index_4 = 0\n        \n        # Initialize the window median\n        window_median_count_index_5 = 0\n        \n        # Initialize the window median\n        window_median_count_index_6 = 0\n        \n        # Initialize the window median\n        window_median_count_index_7 = 0\n        \n        # Initialize the window median\n        window_median_count_index_8 = 0\n        \n        # Initialize the window median\n        window_median_count_index_9 = 0\n        \n        # Initialize the window median\n        window_median_count_index_10 = 0\n        \n        # Initialize the window median\n        window_median_count_index_11 = 0\n        \n        # Initialize the window median\n        window_median_count_index_12 = 0\n        \n        # Initialize the window median\n        window_median_count_index_13 = 0\n        \n        # Initialize the window median\n        window_median_count_index_14 = 0\n        \n        # Initialize the window median\n        window_median_count_index_15 = 0\n        \n        # Initialize the window median\n        window_median_count_index_16 = 0\n        \n        # Initialize the window median\n        window_median_count_index_17 = 0\n        \n        # Initialize the window median\n        window_median_count_index_18 = 0\n        \n        # Initialize the window median\n        window_median_count_index_19 = 0\n        \n        # Initialize the window median\n        window_median_count_index_20 = 0\n        \n        # Initialize the window median\n        window_median_count_index_21 = 0\n        \n        # Initialize the window median\n        window_median_count_index_22 = 0\n        \n        # Initialize the window median\n        window_median_count_index_23 = 0\n        \n        # Initialize the window median\n        window_median_count_index_24 = 0\n        \n        # Initialize the window median\n        window_median_count_index_25 = 0\n        \n        # Initialize the window median\n        window_median_count_index_26 = 0\n        \n        # Initialize the window median\n        window_median_count_index_27 = 0\n        \n        # Initialize the window median\n        window_median_count_index_28 = 0\n        \n        # Initialize the window median\n        window_median_count_index_29 = 0\n        \n        # Initialize the window median\n        window_median_count_index_30 = 0\n        \n        # Initialize the window median\n        window_median_count_index_31 = 0\n        \n        # Initialize the window median\n        window_median_count_index_32 = 0\n        \n        # Initialize the window median\n        window_median_count_index_33 = 0\n        \n        # Initialize the window median\n        window_median_count_index_34 = 0\n        \n        # Initialize the window median\n        window_median_count_index_35 = 0"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the new head and tail\n        new_head = head\n        for i in range(length - k % length - 1):\n            new_head = new_head.next\n        \n        new_tail = new_head\n        while new_tail.next:\n            new_tail = new_tail.next\n        \n        # connect the new tail to the old head\n        new_tail.next = head\n        \n        # cut the old list off\n        new_head = new_head.next\n        new_tail.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the answer list with the height of the tallest square\n        answer = [0]\n        \n        # Initialize the max height to 0\n        max_height = 0\n        \n        # Iterate over the positions\n        for position in positions:\n            # Get the left and height of the current square\n            left, height = position\n            \n            # Update the max height\n            max_height = max(max_height, height)\n            \n            # Update the answer list\n            answer.append(max_height)\n            \n            # Iterate over the squares falling from the left to the right\n            for square in range(left, left + height):\n                # Update the max height\n                max_height = max(max_height, answer[square] + height)\n                \n                # Update the answer list\n                answer[square] += height\n        \n        # Return the answer list\n        return answer[1:]"}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if root.left and not root.left.left and not root.left.right:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        ans = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for c in range(l, n):\n                for r in range(m):\n                    sums[r] += matrix[r][c]\n                sums = [max(s - k, 0) for s in sums]\n                ans = max(ans, self.maxSubArray(sums, k))\n        return ans\n    \n    def maxSubArray(self, nums, k):\n        ans = float('-inf')\n        s = 0\n        d = {0: -1}\n        for i, n in enumerate(nums):\n            s += n\n            if s - k in d:\n                ans = max(ans, s - d[s - k])\n            if s not in d:\n                d[s] = i\n            ans = max(ans, s)\n        return ans"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        \n        sign = 1 if (dividend > 0) ^ (divisor > 0) else -1\n        \n        dividend, divisor = abs(dividend), abs(divisor)\n        \n        quotient = 0\n        \n        while dividend >= divisor:\n            dividend -= divisor\n            quotient += 1\n        \n        return sign * quotient"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        def dfs(i, j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i + 1, j)\n            dfs(i - 1, j)\n            dfs(i, j + 1)\n            dfs(i, j - 1)\n            \n        for i in range(m):\n            dfs(i, 0)\n            dfs(i, n - 1)\n            \n        for j in range(n):\n            dfs(0, j)\n            dfs(m - 1, j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # iterate through the list\n        # check if the complement is in the dictionary\n        # if it is, return the index of the complement and the index of the current number\n        # if it is not, add the current number to the dictionary\n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        \n        # create a dictionary\n        nums_dict = {}\n        \n        # iterate through the list\n        for i, num in enumerate(nums):\n            \n            # check if the complement is in the dictionary\n            complement = target - num\n            if complement in nums_dict:\n                \n                # if it is, return the index of the complement and the index of the current number\n                return [nums_dict[complement], i]\n            \n            # if it is not, add the current number to the dictionary\n            nums_dict[num] = i\n        \n        # if the complement is not in the dictionary, add the current number to the dictionary\n        # return the index of the complement and the index of the current number\n        return None"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 1e-6\n        \n        for i in range(len(cards)):\n            for j in range(i + 1, len(cards)):\n                candidates = [cards[i] + cards[j],\n                             cards[i] * 1.0 / cards[j],\n                             cards[j] + cards[i],\n                             cards[j] * 1.0 / cards[i]]\n                for c in candidates:\n                    if c not in cards[:i] + cards[i + 1:]:\n                        if self.judgePoint24([c] + cards[:i] + cards[i + 1:]):\n                            return True\n                        if self.judgePoint24([cards[i] * 1.0 / c] + cards[:i] + cards[i + 1:]):\n                            return True\n        return False"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if len(p) == 1:\n            return len(s) == 1 and (s[0] == p[0] or p[0] == '?')\n        \n        if p[-1] != '*':\n            return len(s) == len(p) and re.match(p, s)\n        \n        star = p.rfind('*')\n        if s[0:star] == p[0:star]:\n            return self.isMatch(s[star:], p[star:])\n        else:\n            return self.isMatch(s, p[0:star]) and self.isMatch(s[len(s) - len(p[star:]) :], p[star:])"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-time-O(1)-space-beat-96\n        candidate, count = None, 0\n        for num in nums:\n            if count == 0:\n                candidate = num\n            count += 1 if candidate == num else -1\n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for ticket in tickets:\n            graph[ticket[0]].append(ticket[1])\n        \n        # sort the graph by alphabetical order\n        for city in graph:\n            graph[city].sort()\n        \n        # dfs\n        res = []\n        def dfs(city):\n            # if there is no more tickets, add the city to the result\n            if len(graph[city]) == 0:\n                res.append(city)\n                return True\n            \n            # if there are still tickets, pop the first ticket and dfs\n            while graph[city]:\n                next_city = graph[city].pop(0)\n                if dfs(next_city):\n                    res.append(city)\n                    return True\n            \n            # if there are no more tickets, return False\n            return False\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                \n                l, r = j+1, len(nums)-1\n                \n                while l < r:\n                    s = nums[i] + nums[j] + nums[l] + nums[r]\n                    \n                    if s == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        \n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        \n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        \n                        l += 1\n                        r -= 1\n                        \n                    elif s < target:\n                        l += 1\n                    else:\n                        r -= 1\n        \n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result and heap\n        result = [[0, 0]]\n        heap = [(0, float('inf'))]\n        \n        # iterate over buildings\n        for left, right, height in buildings:\n            # add new building to heap\n            heapq.heappush(heap, (height, right))\n            \n            # while the current building's right edge is greater than the next building's left edge\n            while heap[0][1] < right:\n                # pop the next building from heap\n                heapq.heappop(heap)\n                \n                # if the heap is empty, add 0 to result\n                if not heap:\n                    result.append([right, 0])\n                    break\n                \n                # get the maximum height from the heap\n                max_height = -heap[0][0]\n                \n                # if the maximum height is different from the previous maximum height\n                if max_height != result[-1][1]:\n                    # add the maximum height to result\n                    result.append([right, max_height])\n        \n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse each word\n        for i in range(len(s)):\n            s[i] = s[i][::-1]"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1, len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i - 1][j]\n                elif j == len(triangle[i]) - 1:\n                    triangle[i][j] += triangle[i - 1][j - 1]\n                else:\n                    triangle[i][j] += min(triangle[i - 1][j], triangle[i - 1][j - 1])\n        \n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 100:\n                return helper(num % 10) + \" \" + ones[num // 10] + \"Hundred\" + \" \" + helper(num % 10)\n            if num < 1000:\n                return helper(num // 100) + \"Hundred\" + \" \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \"Thousand\" + \" \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \"Million\" + \" \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \"Billion\" + \" \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        MOD = 10**9 + 7\n        dp = [0] * (k + 1)\n        dp[0] = 1\n        \n        for i in range(1, n + 1):\n            new_dp = [0] * (k + 1)\n            for j in range(1, k + 1):\n                new_dp[j] = (dp[j] + dp[j - 1] - (j >= i) * dp[j - i]) % MOD\n            dp = new_dp\n        \n        return dp[k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right and root.val == targetSum:\n            return True\n        \n        return (self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val))"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                p1.next = head\n                p1 = p1.next\n            # otherwise, add it to the second list\n            else:\n                p2.next = head\n                p2 = p2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        p1.next = dummy2.next\n        p2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(set)\n        parent = collections.defaultdict(set)\n        for u, v in edges:\n            if v in graph[u]:\n                return [u, v]\n            graph[u].add(v)\n            parent[v].add(u)\n        \n        # find a cycle\n        seen = set()\n        for u, v in edges:\n            if u in seen:\n                continue\n            seen.add(u)\n            if len(seen) == len(graph):\n                return [u, v]\n            seen.add(v)\n            if v in parent[u]:\n                return [u, v]\n        \n        # find the root\n        seen = set()\n        for u, v in edges:\n            if u in seen:\n                continue\n            seen.add(u)\n            if len(seen) == len(graph):\n                return [u, v]\n            seen.add(v)\n        \n        return []"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        used = [False] * len(nums)\n        self.dfs(nums, [], res, used)\n        return res\n        \n    def dfs(self, nums, path, res, used):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if used[i]:\n                continue\n            \n            if i > 0 and nums[i] == nums[i - 1] and not used[i - 1]:\n                continue\n            \n            used[i] = True\n            path.append(nums[i])\n            self.dfs(nums, path, res, used)\n            path.pop()\n            used[i] = False"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        \n        return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR all the numbers\n        # The result will be the number that appears only once\n        # XOR all the numbers again\n        # The result will be the number that appears twice\n        # XOR the result with the number that appears only once\n        # The result will be the number that appears once\n        # XOR the result with the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the number that appears once\n        # The result will be the number that appears twice\n        # The result will be the"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words and return the last word\n        return len(s.split()[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[float('-inf')] * (n + 1) for _ in range(n + 1)] for _ in range(n + 1)]\n        dp[1][1][1] = grid[0][0]\n        \n        for i in range(1, n + 1):\n            for j1 in range(1, n + 1):\n                for j2 in range(1, n + 1):\n                    if grid[i - 1][j1 - 1] == -1 or grid[i - 1][j2 - 1] == -1:\n                        continue\n                    cherries = grid[i - 1][j1 - 1] + (j1 != j2) * grid[i - 1][j2 - 1]\n                    for j1_new in (j1 - 1, j1):\n                        for j2_new in (j2 - 1, j2):\n                            dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1_new][j2_new] + cherries)\n        \n        return max(dp[n][n][n] - grid[n - 1][n - 1], 0)"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        \n        while n not in seen:\n            seen.add(n)\n            n = sum(int(d)**2 for d in str(n))\n            \n        return n == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        if target in nums:\n            return nums.index(target)\n        else:\n            for i, num in enumerate(nums):\n                if num > target:\n                    return i\n            return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        \n        for i, num in enumerate(nums):\n            if max_reachable < i:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        \n        return max_reachable >= len(nums) - 1"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(m):\n            for j in range(n):\n                if i == 0 and j == 0:\n                    continue\n                elif i == 0:\n                    grid[i][j] += grid[i][j-1]\n                elif j == 0:\n                    grid[i][j] += grid[i-1][j]\n                else:\n                    grid[i][j] += min(grid[i][j-1], grid[i-1][j])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        prev = self.countAndSay(n - 1)\n        res = \"\"\n        count = 1\n        for i in range(1, len(prev)):\n            if prev[i] == prev[i - 1]:\n                count += 1\n            else:\n                res += str(count) + prev[i - 1]\n                count = 1\n        res += str(count) + prev[-1]\n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # find the max sum of the array\n        max_sum = sum(nums)\n        \n        # find the min sum of the array\n        min_sum = max(nums)\n        \n        # binary search\n        while min_sum < max_sum:\n            mid = (min_sum + max_sum) // 2\n            # check if we can split the array into k subarrays with sum at least mid\n            if self.can_split(nums, k, mid):\n                max_sum = mid\n            else:\n                min_sum = mid + 1\n        \n        return min_sum\n    \n    def can_split(self, nums, k, target):\n        # check if we can split the array into k subarrays with sum at least target\n        subarray_sum = 0\n        subarray_count = 1\n        \n        for num in nums:\n            if subarray_sum + num <= target:\n                subarray_sum += num\n            else:\n                subarray_sum = num\n                if subarray_count < k:\n                    subarray_count += 1\n        \n        return subarray_count <= k"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if target is in the first half of the array\n        if nums[pivot] <= target and target <= nums[-1]:\n            return self.binary_search(nums, target, pivot, len(nums) - 1)\n        \n        # if target is in the second half of the array\n        return self.binary_search(nums, target, 0, pivot - 1)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n                \n        return left\n        \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n                \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz'\n        }\n        \n        combinations = ['']\n        \n        for digit in digits:\n            new_combinations = []\n            for letter in digit_to_letters[digit]:\n                for combination in combinations:\n                    new_combinations.append(combination + letter)\n            combinations = new_combinations\n        \n        return combinations"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(path)\n            return\n        \n        for i in xrange(start, len(candidates)):\n            if candidates[i] > target:\n                break\n            if i > start and candidates[i] == candidates[i - 1]:\n                continue\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        # convert n to a list\n        n_list = list(n)\n        \n        # convert n to an integer\n        n_int = int(n)\n        \n        # convert n to a list of digits\n        n_list_digits = [int(d) for d in n_list]\n        \n        # convert n to a list of digits\n        n_list_digits_rev = n_list_digits[::-1]\n        \n        # convert n to a string\n        n_str = ''.join(map(str, n_list_digits))\n        \n        # convert n to a string\n        n_str_rev = ''.join(map(str, n_list_digits_rev))\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int = int(n_str_rev)\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev = int(n_str)\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev = int(n_str_rev[::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev = int(n_str_rev[::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits\n        n_list_digits_rev_int_rev_rev_rev_rev_rev_rev_rev_rev = int(n_str_rev[::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1][::-1])\n        \n        # convert n to a list of digits"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n - 1, 0, n - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            \n            for i in range(top, bottom + 1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            \n            if top <= bottom:\n                for i in range(right, left - 1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            \n            if left <= right:\n                for i in range(bottom, top - 1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        \n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        \n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        \n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i] = matrix[i][::-1]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        max_prod_so_far = nums[0]\n        \n        for i in range(1, len(nums)):\n            curr_max = max(nums[i], max_prod * nums[i], min_prod * nums[i])\n            curr_min = min(nums[i], max_prod * nums[i], min_prod * nums[i])\n            \n            max_prod = curr_max\n            min_prod = curr_min\n            \n            max_prod_so_far = max(max_prod_so_far, max_prod)\n            \n        return max_prod_so_far"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        stone_set = set(stones)\n        \n        dp = {0: set([1])}\n        \n        for s in stones:\n            if s not in dp:\n                return False\n            \n            for k in dp[s]:\n                for nxt in (k - 1, k, k + 1):\n                    if nxt in stone_set:\n                        if nxt == stones[-1]:\n                            return True\n                        dp.setdefault(nxt, set()).add(k + 1)\n        \n        return False"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the score in descending order\n        score_sorted = sorted(score, reverse=True)\n        \n        # create a hashmap to store the score and its corresponding rank\n        score_rank = {score_sorted[i]: i + 1 for i in range(len(score_sorted))}\n        \n        # create a list to store the result\n        result = []\n        \n        # iterate over the score_sorted list\n        for s in score:\n            # if the score is in the hashmap, add the corresponding rank to the result list\n            if s in score_rank:\n                result.append(score_rank[s])\n            # if the score is not in the hashmap, add \"Gold Medal\" to the result list\n            else:\n                result.append(\"Gold Medal\")\n        \n        # create a list to store the result\n        result = [str(r) for r in result]\n        \n        # create a hashmap to store the rank and its corresponding score\n        rank_score = {v: k for k, v in score_rank.items()}\n        \n        # iterate over the result list\n        for i, r in enumerate(result):\n            # if the rank is in the hashmap, add the corresponding score to the result list\n            if r in rank_score:\n                result[i] = rank_score[r]\n        \n        return result"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the max length and the current length\n        max_len = 0\n        curr_len = 0\n        \n        # Initialize the set\n        seen = set()\n        \n        # Iterate over the string\n        for c in s:\n            # If the character is in the set, update the current length\n            if c in seen:\n                curr_len = max(curr_len, max_len)\n                max_len = max(max_len, curr_len)\n                seen.remove(c)\n                curr_len -= 1\n            # Otherwise, add the character to the set and update the current length\n            else:\n                seen.add(c)\n                curr_len += 1\n        \n        # Return the maximum length\n        return max(max_len, curr_len)"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = collections.Counter(words)\n        window_len = word_len * word_count\n        \n        res = []\n        for i in range(len(s) - window_len + 1):\n            window_dict = collections.Counter()\n            for j in range(i, i + window_len, word_len):\n                window_dict[s[j:j + word_len]] += 1\n            if window_dict == word_dict:\n                res.append(i)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = max(arr)\n        res = 0\n        curr_max = 0\n        \n        for i, val in enumerate(arr):\n            curr_max = max(curr_max, val)\n            if curr_max == i:\n                res += 1\n        \n        return res"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                tmp = curr.next\n                curr.next = tmp.next\n                tmp.next = prev.next\n                prev.next = tmp\n            else:\n                curr = curr.next\n        \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        \n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            \n            l, r = i+1, len(nums)-1\n            \n            while l < r:\n                s = nums[i] + nums[l] + nums[r]\n                \n                if s > 0:\n                    r -= 1\n                elif s < 0:\n                    l += 1\n                else:\n                    res.append([nums[i], nums[l], nums[r]])\n                    \n                    l += 1\n                    while nums[l] == nums[l-1] and l < r:\n                        l += 1\n        \n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n        \n        for i in range(m + 1):\n            for j in range(n + 1):\n                if i == 0:\n                    dp[i][j] = j\n                elif j == 0:\n                    dp[i][j] = i\n                elif word1[i - 1] == word2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1]\n                else:\n                    dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n        \n        return dp[m][n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += xor & 1\n            xor >>= 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        paths = []\n        path = []\n        self.dfs(root, paths, path)\n        return paths\n        \n    def dfs(self, root, paths, path):\n        if not root.left and not root.right:\n            path.append(str(root.val))\n            paths.append('->'.join(path))\n            return\n        \n        if root.left:\n            self.dfs(root.left, paths, path + [str(root.val)])\n        \n        if root.right:\n            self.dfs(root.right, paths, path + [str(root.val)])"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, low, mid, high):\n            count = 0\n            j = mid + 1\n            for i in range(low, mid + 1):\n                while j <= high and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += (j - (mid + 1))\n            i, j = low, mid + 1\n            res = []\n            while i <= mid and j <= high:\n                if nums[i] <= nums[j]:\n                    res.append(nums[i])\n                    i += 1\n                else:\n                    res.append(nums[j])\n                    j += 1\n            res += nums[i:mid + 1] + nums[j:high + 1]\n            for i in range(low, high + 1):\n                nums[i] = res[i - low]\n            return count\n        \n        def mergeSort(nums, low, high):\n            if low >= high:\n                return 0\n            mid = (low + high) // 2\n            count = mergeSort(nums, low, mid) + mergeSort(nums, mid + 1, high)\n            count += merge(nums, low, mid, high)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return (sx == tx and sy <= ty and (ty - sy) % sx == 0) or (sy == ty and sx <= tx and (tx - sx) % sy == 0"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1_val = v1[i]\n            else:\n                v1_val = 0\n                \n            if i < len(v2):\n                v2_val = v2[i]\n            else:\n                v2_val = 0\n                \n            if v1_val > v2_val:\n                return 1\n            elif v1_val < v2_val:\n                return -1\n            \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # iterate over courses\n        for duration, end in courses:\n            \n            # add course to priority queue\n            heapq.heappush(pq, (-duration, duration))\n            \n            # update total time\n            total += duration\n            \n            # if total time exceeds the end time of the last course\n            if total > end:\n                \n                # remove the course with the longest duration\n                total -= heapq.heappop(pq)[1]\n                \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        end = dummy\n        \n        while end:\n            for i in range(k):\n                end = end.next\n                if not end:\n                    return dummy.next\n            next_head = end.next\n            end.next = None\n            prev.next = self.reverse(prev.next, end)\n            prev = end\n            end = next_head\n            \n        return dummy.next\n    \n    def reverse(self, head, end):\n        prev = None\n        curr = head\n        \n        while curr != end:\n            next_node = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next_node\n            \n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] != s[len(s) - 1]:\n            return False\n        \n        if len(s) % len(set(s)) != 1:\n            return False\n        \n        return (s + s)[1:len(s) * 2 - 1] == s"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n + 1):\n            for j in range(1, i + 1):\n                dp[i] += dp[j - 1] * dp[i - j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR all the numbers\n        # XOR of a number with itself is 0\n        # XOR of a number with 0 is the number itself\n        # So we can XOR all the numbers together and the\n        # single number will have the bits that are different\n        # between the two numbers.\n        \n        single = 0\n        \n        for num in nums:\n            single ^= num\n            \n        return single"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # build a dict of target letters\n        target_dict = collections.Counter(target)\n        \n        # build a dict of sticker letters\n        sticker_dict = collections.defaultdict(int)\n        for sticker in stickers:\n            sticker_dict[tuple(sorted(collections.Counter(sticker) - target_dict))] += 1\n        \n        # build a queue of stickers\n        queue = [sticker_dict]\n        \n        # build a set of stickers\n        seen = set(queue)\n        \n        # build a dict of sticker counts\n        sticker_counts = collections.defaultdict(int)\n        \n        # build a dict of sticker counts\n        for sticker in stickers:\n            sticker_counts[tuple(collections.Counter(sticker) - target_dict)] += 1\n        \n        # build a dict of sticker counts\n        sticker_counts[tuple(target_dict - collections.Counter(target))] = -1\n        \n        # build a dict of sticker counts\n        sticker_counts[tuple(target_dict)] = 0\n        \n        # build a dict of sticker counts\n        while queue:\n            sticker_counts = collections.defaultdict(int)\n            \n            # build a dict of sticker counts\n            for sticker in queue:\n                for sticker_count in sticker.values():\n                    sticker_counts[sticker_count] += sticker_counts[sticker_count - sticker_count]\n                    \n                    # build a dict of sticker counts\n                    sticker_counts[sticker_count - sticker_count] += sticker_counts[sticker_count]\n                    \n            # build a dict of sticker counts\n            sticker_counts[sticker_counts[0]] -= 1\n            \n            # build a dict of sticker counts\n            if sticker_counts[0] == 0:\n                return -1\n            \n            # build a dict of sticker counts\n            queue = [sticker_counts[sticker_count] for sticker_count in sticker_counts if sticker_count > 0]\n            \n            # build a set of stickers\n            seen |= set(queue)\n        \n        # build a dict of sticker counts\n        return sticker_counts[sticker_counts[0]]"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n - 1, -1, -1):\n            dp[i][i] = 1\n            c = s[i]\n            for j in range(i + 1, n):\n                if s[j] == c:\n                    dp[i][j] = dp[i][j - 1] + 1\n                else:\n                    dp[i][j] = dp[i][j - 1]\n                    for k in range(i, j):\n                        if s[k] == c:\n                            dp[i][j] = max(dp[i][j], dp[i][k] + dp[k + 1][j - 1])\n        \n        return dp[0][n - 1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left, right = 1, x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == x:\n                return mid\n            elif mid * mid < x:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        result = 0\n        \n        for i in range(len(s)):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i + 1]]:\n                result -= roman_dict[s[i]]\n            else:\n                result += roman_dict[s[i]]\n        \n        return result"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # Initialize the deque and output list\n        dq = collections.deque()\n        output = []\n        \n        # Loop through the input array\n        for i, n in en.umerate(nums):\n            \n            # If the deque is not empty and the current element is greater than the last element in the deque,\n            # remove the last element\n            if dq and dq[-1] < n:\n                dq.pop()\n            \n            # Remove any elements that are out of the current window\n            while dq and dq[0] < i - k + 1:\n                dq.popleft()\n            \n            # Append the current element to the deque\n            dq.append(n)\n            \n            # If the current window is a valid subarray, append the maximum element to the output list\n            if i >= k - 1:\n                output.append(dq[0])\n        \n        return output"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # merge nums1 and nums2 into a single sorted list\n        nums1.extend(nums2)\n        nums1.sort()\n        \n        # find the median\n        if len(nums1) % 2 == 1:\n            return nums1[len(nums1) // 2]\n        else:\n            return (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[right]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid\n        \n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        row = [1]\n        \n        for i in range(1, rowIndex + 1):\n            row.append(row[i - 1] * (rowIndex - i + 1) // i)\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and root.val == targetSum:\n                return [[targetSum]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return [[root.val] + path for path in left + right]\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the sqrt of area\n        # 2. find the largest number that can divide area\n        # 3. return [area/largest_number, largest_number]\n        \n        sqrt_area = int(math.sqrt(area))\n        while area % sqrt_area != 0:\n            sqrt_area -= 1\n        \n        return [area/sqrt_area, sqrt_area]"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        graph = collections.defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                key = word[:i] + '_' + word[i+1:]\n                graph[key].append(word)\n        \n        # build the shortest path\n        q, seen, shortest = {beginWord}, set([beginWord]), {beginWord: 1}\n        while q:\n            next_q = set()\n            for word in q:\n                for i in range(len(word)):\n                    key = word[:i] + '_' + word[i+1:]\n                    for neighbor in graph[key]:\n                        if neighbor == endWord:\n                            return self.build_path(shortest, neighbor, beginWord)\n                        if neighbor not in seen:\n                            seen.add(neighbor)\n                            next_q.add(neighbor)\n                            shortest[neighbor] = shortest[word] + 1\n            q = next_q\n        \n        return []\n    \n    def build_path(self, shortest, endWord, beginWord):\n        path = [endWord]\n        while endWord != beginWord:\n            for neighbor in shortest[endWord]:\n                if shortest[neighbor] == shortest[endWord] - 1:\n                    path.append(neighbor)\n                    endWord = neighbor\n                    break\n        return list(reversed(path))"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            \n            left = height(root.left)\n            if left == -1:\n                return -1\n            \n            right = height(root.right)\n            if right == -1:\n                return -1\n            \n            if abs(left - right) > 1:\n                return -1\n            \n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = len(res) - 1\n            while j >= 0 and nums[i] == nums[i - 1]:\n                j -= 1\n            k = len(res)\n            while j >= 0:\n                res.append(res[j] + [nums[i]])\n                j -= 1\n            i += 1\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        heights.append(0)\n        \n        for i, h in en\n            if not stack or h >= heights[stack[-1]]:\n                stack.append(i)\n            else:\n                while stack and h < heights[stack[-1]]:\n                    top = stack.pop()\n                    max_area = max(max_area, heights[top] * (i - stack[-1] - 1))\n                stack.append(i)\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(float(first) / second))\n        return stack.pop()"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, y_min, x_max, y_max = float('inf'), float('inf'), float('-inf'), float('-inf')\n        area = 0\n        seen = set()\n        \n        for x1, y1, x2, y2 in rectangles:\n            x_min = min(x_min, x1)\n            y_min = min(y_min, y1)\n            x_max = max(x_max, x2)\n            y_max = max(y_max, y2)\n            area += (x2 - x1) * (y2 - y1)\n            for x, y in ((x1, y1), (x1, y2), (x2, y1), (x2, y2)):\n                if (x, y) in seen:\n                    area -= seen[(x, y)]\n                else:\n                    seen[(x, y)] = rectangles[0][-1] - rectangles[0][0]\n                    area += seen[(x, y)]\n        \n        return area == (x_max - x_min) * (y_max - y_min) and (x_min, y_min) in seen and (x_max, y_max) in seen and (x_min, y_max) not in seen and (x_max, y_min) not in seen"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber, remainder = divmod(columnNumber - 1, 26)\n            res = chr(ord('A') + remainder) + res\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            \n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a 1D array\n        board_str = \"\"\n        for row in board:\n            board_str += str(row[0]) + str(row[1]) + str(row[2])\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str(num)\n        \n        # convert board_str to a 0-1024 integer\n        board_int = int(board_str, 2)\n        \n        # convert board_int to a list of 5 integers\n        board_list = [board_int // (10 ** (4 - i)) % 10 for i in range(5)]\n        \n        # convert board_list to a 1D array\n        board_str = \"\"\n        for num in board_list:\n            board_str += str("}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            s_char = s[i]\n            t_char = t[i]\n            \n            if s_char in s_to_t and s_to_t[s_char] != t_char:\n                return False\n            \n            if t_char in t_to_s and t_to_s[t_char] != s_char:\n                return False\n            \n            s_to_t[s_char] = t_char\n            t_to_s[t_char] = s_char\n            \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.find_pivot(nums)\n        \n        # if target is in the first half of the array\n        if nums[pivot] == target:\n            return True\n        \n        # if target is in the second half of the array\n        if nums[len(nums) - 1] == target:\n            return True\n        \n        # if target is not in the first half of the array\n        if nums[pivot] < target and nums[len(nums) - 1] > target:\n            return self.binary_search(nums, target, pivot, len(nums) - 1)\n        \n        # if target is not in the second half of the array\n        return self.binary_search(nums, target, 0, pivot - 1)\n        \n    def find_pivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left\n    \n    def binary_search(self, nums, target, left, right):\n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return True\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        dp = [0] * n\n        dp[0] = 1 if obstacleGrid[0][0] == 0 else 0\n        \n        for i in range(m):\n            for j in range(n):\n                if obstacleGrid[i][j] == 1:\n                    dp[j] = 0\n                elif j > 0:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1 if s[0] != '0' else 0\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] += dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = float('inf')\n        \n        for i in range(len(nums) - 2):\n            left, right = i + 1, len(nums) - 1\n            \n            while left < right:\n                curr_sum = nums[i] + nums[left] + nums[right]\n                \n                if curr_sum == target:\n                    return target\n                \n                if abs(curr_sum - target) < abs(closest - target):\n                    closest = curr_sum\n                \n                if curr_sum > target:\n                    right -= 1\n                else:\n                    left += 1\n        \n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        res = []\n        i, j = 0, 0\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # inorder traversal\n        # keep track of the previous node\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference\n        # keep track of the min difference"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        max_count = 0\n        max_val = root.val\n        curr_count = 0\n        curr_val = root.val\n        res = []\n        \n        while root:\n            if root.val == curr_val:\n                curr_count += 1\n            else:\n                if curr_count > max_count:\n                    max_count = curr_count\n                    res = [curr_val]\n                elif curr_count == max_count:\n                    res.append(curr_val)\n                curr_val = root.val\n                curr_count = 1\n            root = root.right\n        \n        if curr_count > max_count:\n            res.append(curr_val)\n        elif curr_count == max_count:\n            res.append(curr_val)\n        \n        return res"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if len(needle) == 0:\n            return 0\n        \n        if len(haystack) < len(needle):\n            return -1\n        \n        for i in range(len(haystack) - len(needle) + 1):\n            if haystack[i:i+len(needle)] == needle:\n                return i\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid\n        # 2. if not, replace the invalid characters with 'a'\n        # 3. if password is valid, return 0\n        \n        # 1. check if password is valid"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the number of 5s in the factorial\n        # 2. count the number of 2s in the factorial\n        # 3. return the min of the two\n        \n        if n < 5:\n            return 0\n        \n        count = 0\n        while n > 0:\n            count += n / 5\n            n /= 5\n        \n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        curRow = 0\n        goingDown = False\n        \n        for c in s:\n            res[curRow] += c\n            if curRow == 0 or curRow == numRows - 1:\n                goingDown = not goingDown\n            curRow += 1 if goingDown else -1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Brute force\n        ## Time: O(n^2)\n        ## Space: O(1)\n        ## TLE\n        ## 2. Two pointers\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 3. DP\n        ## Time: O(n)\n        ## Space: O(n)\n        ## Accepted\n        ## 4. Monotonic stack\n        ## Time: O(n)\n        ## Space: O(n)\n        ## Accepted\n        ## 5. Two pointers + DP\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 6. Two pointers + DP + Monotonic stack\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 7. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 8. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 9. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 10. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 11. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 12. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 13. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 14. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 15. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 16. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 17. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 18. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 19. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 20. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 21. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O(1)\n        ## Accepted\n        ## 22. Two pointers + DP + Monotonic stack + Optimized\n        ## Time: O(n)\n        ## Space: O("}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## 1. Create a list of size n + 1, where n is the length of nums.\n        ## 2. Iterate through nums and mark the index at nums[i] as negative.\n        ## 3. Iterate through the list and build the answer list.\n        ## 4. Return the answer list.\n        \n        n = len(nums)\n        ans = [0] * (n + 1)\n        \n        for num in nums:\n            ans[num] = -1\n        \n        for i in range(1, n + 1):\n            if ans[i] == 0:\n                ans[i] = -1\n            else:\n                ans[i] = -ans[i]\n        \n        return [i for i in range(1, n + 1) if ans[i] > 0]"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use a dict to store the number of smaller elements to the right of each number\n        # 3. use a dict to store the number of smaller elements to the right of each number\n        # 4. use a dict to store the number of smaller elements to the right of each number\n        # 5. use a dict to store the number of smaller elements to the right of each number\n        # 6. use a dict to store the number of smaller elements to the right of each number\n        # 7. use a dict to store the number of smaller elements to the right of each number\n        # 8. use a dict to store the number of smaller elements to the right of each number\n        # 9. use a dict to store the number of smaller elements to the right of each number\n        # 10. use a dict to store the number of smaller elements to the right of each number\n        # 11. use a dict to store the number of smaller elements to the right of each number\n        # 12. use a dict to store the number of smaller elements to the right of each number\n        # 13. use a dict to store the number of smaller elements to the right of each number\n        # 14. use a dict to store the number of smaller elements to the right of each number\n        # 15. use a dict to store the number of smaller elements to the right of each number\n        # 16. use a dict to store the number of smaller elements to the right of each number\n        # 17. use a dict to store the number of smaller elements to the right of each number\n        # 18. use a dict to store the number of smaller elements to the right of each number\n        # 19. use a dict to store the number of smaller elements to the right of each number\n        # 20. use a dict to store the number of smaller elements to the right of each number\n        # 21. use a dict to store the number of smaller elements to the right of each number\n        # 22. use a dict to store the number of smaller elements to the right of each number\n        # 23. use a dict to store the number of smaller elements to the right of each number\n        # 24. use a dict to store the number of smaller elements to the right of each number\n        # 25. use a dict to store the number of smaller elements to the right of each number\n        # 26. use a dict to store the number of smaller elements to the right of each number\n        # 27. use a dict to store the number of smaller elements to the right of each number\n        # 28. use a dict to store the number of smaller elements to the right of each number\n        # 29. use a dict to store the number of smaller elements to the right of each number\n        # 30. use a dict to store the number of smaller elements to the right of each number\n        # 31. use a dict to store the number of smaller elements to the right of each number\n        # 32. use a dict to store the number of smaller elements to the right of each number\n        # 33. use a dict to store the number of smaller elements to the right of each number\n        # 34. use a dict to store the number of smaller elements to the right of each number\n        # 35. use a dict to store the number of smaller elements to the right of each number\n        # 36. use a dict to store the number of smaller elements to the right of each number\n        # 37. use a dict to store the number of smaller elements to the right of each number\n        # 38. use a dict to store the number of smaller elements to the right of each number\n        # 39. use a dict to store the number of smaller elements to the right of each number\n        # 40. use a dict to store the number of smaller elements to the right of each number\n        # 41. use a dict to store the number of smaller elements to the right of each number\n        # 42. use a dict to store the number of smaller elements to the right of each number\n        # 43. use a dict to store the number of smaller elements to the right of each number\n        # 44. use a dict to store the number of smaller elements to the right of each number\n        # 45. use a dict to store the number of smaller elements to the right of each number\n        # 46. use a dict to store"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by start and end\n        intervals.sort(key=lambda x: (x[0], -x[1]))\n        \n        # initialize result and max\n        res, max = 0, 0\n        \n        # iterate over intervals\n        for interval in intervals:\n            # if interval[0] > max, update result and max\n            if interval[0] > max:\n                res += 2\n                max = interval[1]\n            # if interval[1] > max, update result and max\n            elif interval[1] > max:\n                res += 1\n                max = interval[1]\n        \n        return res"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(left, right):\n            if not left and not right:\n                return True\n            if not left or not right:\n                return False\n            return left.val == right.val and isMirror(left.left, right.right) and isMirror(left.right, right.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. Build a dict of elements and their counts\n        # 2. Build a stack of elements and their counts\n        # 3. Iterate over the formula\n        # 4. If the current character is a letter, add it to the stack\n        # 5. If the current character is a digit, add the digit to the stack\n        # 6. If the current character is a left parenthesis, pop the stack and add the elements to the dict\n        # 7. If the current character is a right parenthesis, pop the stack and add the elements to the dict\n        # 8. If the current character is an uppercase letter, pop the stack and add the elements to the dict\n        # 9. If the current character is a lowercase letter, pop the stack and add the elements to the dict\n        # 10. If the current character is a digit, pop the stack and add the elements to the dict\n        # 11. If the current character is a left parenthesis, pop the stack and add the elements to the dict\n        # 12. If the current character is a right parenthesis, pop the stack and add the elements to the dict\n        # 13. If the current character is an uppercase letter, pop the stack and add the elements to the dict\n        # 14. If the current character is a lowercase letter, pop the stack and add the elements to the dict\n        # 15. If the current character is a digit, pop the stack and add the elements to the dict\n        # 16. If the current character is a left parenthesis, pop the stack and add the elements to the dict\n        # 17. If the current character is a right parenthesis, pop the stack and add the elements to the dict\n        # 18. If the current character is an uppercase letter, pop the stack and add the elements to the dict\n        # 19. If the current character is a lowercase letter, pop the stack and add the elements to the dict\n        # 20. If the current character is a digit, pop the stack and add the elements to the dict\n        # 21. If the current character is a left parenthesis, pop the stack and add the elements to the dict\n        # 22. If the current character is a right parenthesis, pop the stack and add the elements to the dict\n        # 23. If the current character is an uppercase letter, pop the stack and add the elements to the dict\n        # 24. If the current character is a lowercase letter, pop the stack and add the elements to the dict\n        # 25. If the current character is a digit, pop the stack and add the elements to the dict\n        # 26. If the current character is a left parenthesis, pop the stack and add the elements to the dict\n        # 27. If the current character is a right parenthesis, pop the stack and add the elements to the dict\n        # 28. If the current character is an uppercase letter, pop the stack and add the elements to the dict\n        # 29. If the current character is a lowercase letter, pop the stack and add the elements to the dict\n        # 30. If the current character is a digit, pop the stack and add the elements to the dict\n        # 31. If the current character is a left parenthesis, pop the stack and add the elements to the dict\n        # 32. If the current character is a right parenthesis, pop the stack and add the elements to the dict\n        # 33. If the current character is an uppercase letter, pop the stack and add the elements to the dict\n        # 34. If the current character is a lowercase letter, pop the stack and add the elements to the dict\n        # 35. If the current character is a digit, pop the stack and add the elements to the dict\n        # 36. If the current character is a left parenthesis, pop the stack and add the elements to the dict\n        # 37. If the current character is a right parenthesis, pop the stack and add the elements to the dict\n        # 38. If the current character is an uppercase letter, pop the stack and add the elements to the dict\n        # 39. If the current character is a lowercase letter, pop the stack and add the elements to the dict\n        # 40. If the current character is a digit, pop the stack and add the elements to the dict\n        # 41. If the current character is a left parenthesis, pop the stack"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n /= 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        res = []\n        self.dfs(res, [], 0, 0, n)\n        return res\n        \n    def dfs(self, res, cur, left, right, n):\n        if len(cur) == 2 * n:\n            res.append(''.join(cur))\n            return\n        \n        if left < n:\n            cur.append('(')\n            self.dfs(res, cur, left + 1, right, n)\n            cur.pop()\n        \n        if right < left:\n            cur.append(')')\n            self.dfs(res, cur, left, right + 1, n)\n            cur.pop()"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the result and the current sum\n        res, curr_sum = 0, 1\n        \n        # Iterate over the numbers in nums\n        for num in nums:\n            \n            # If the current sum is greater than n, break\n            if curr_sum > n:\n                break\n            \n            # If the current sum is less than or equal to n, add the current number to the sum\n            curr_sum += num\n            \n            # If the current sum exceeds n, add a patch and update the current sum\n            if curr_sum > n:\n                res += 1\n                curr_sum = curr_sum // 2 + 1\n        \n        # Add the remaining numbers to the sum until it exceeds n\n        while curr_sum <= n:\n            res += 1\n            curr_sum = curr_sum * 2\n        \n        # Return the number of patches required\n        return res"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Initialize the max_len to 0\n        max_len = 0\n        \n        # Initialize the stack\n        stack = [-1]\n        \n        # Iterate over the string\n        for i, c in enumerate(s):\n            # If the current character is '('\n            if c == '(':\n                # Push the index onto the stack\n                stack.append(i)\n            # If the current character is ')'\n            else:\n                # Pop the top element from the stack\n                top = stack.pop()\n                \n                # If the stack is empty or the top element is -1\n                if not stack or s[top] == ')':\n                    # Set the current element to be the current index minus the top element\n                    stack.append(i)\n                # If the stack is not empty and the top element is not -1\n                else:\n                    # Set the current element to be the current index minus the top element\n                    max_len = max(max_len, i - stack[-1])\n        \n        # Return the max_len\n        return max_len"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        res = \"\"\n        \n        if (numerator < 0) ^ (denominator < 0):\n            res += \"-\"\n        \n        numerator, denominator = abs(numerator), abs(denominator)\n        \n        res += str(numerator // denominator)\n        \n        if numerator % denominator == 0:\n            return res\n        \n        res += \".\"\n        \n        numerator %= denominator\n        seen = {}\n        \n        while numerator != 0:\n            if numerator in seen:\n                res = res[:seen[numerator]] + \"(\" + res[seen[numerator]:] + \")\"\n                break\n            \n            seen[numerator] = len(res)\n            numerator *= 10\n            res += str(numerator // denominator)\n            numerator %= denominator\n        \n        return res"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        \n        # split the list into two halves\n        mid = slow.next\n        slow.next = None\n        \n        # sort the two halves\n        left, right = self.sortList(head), self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode()\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # merge the remaining nodes\n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        \n        for w, h in envelopes:\n            if not dp or dp[-1] < h:\n                dp.append(h)\n            else:\n                left, right = 0, len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < h:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = h\n        \n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        row_zero = False\n        \n        for i in range(m):\n            if matrix[i][0] == 0:\n                row_zero = True\n                \n        for j in range(n):\n            if matrix[0][j] == 0:\n                row_zero = True\n                \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n                    \n        for i in range(1, m):\n            for j in range(1, n):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n                    \n        if row_zero:\n            for j in range(n):\n                matrix[0][j] = 0\n                \n        if row_zero:\n            for i in range(m):\n                matrix[i][0] = 0"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create a dummy node\n        dummy = ListNode(0, head)\n        \n        # set slow and fast pointers\n        slow = dummy\n        fast = head\n        \n        # move fast pointer n steps\n        for _ in range(n):\n            fast = fast.next\n        \n        # move both pointers until fast pointer reaches the end\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the nth node\n        slow.next = slow.next.next\n        \n        # return the modified head\n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        return list(set(nums1) & set(nums2))"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % len(machines) != 0:\n            return -1\n        \n        avg = total // len(machines)\n        ans = 0\n        curr = 0\n        for m in machines:\n            curr += m - avg\n            ans = max(ans, abs(curr), m - avg)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(n, x // i)\n            return c\n        \n        low, high = 1, m * n\n        while low < high:\n            mid = (low + high) // 2\n            if count(mid) < k:\n                low = mid + 1\n            else:\n                high = mid\n        \n        return low"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 and list2:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1:\n            curr.next = list1\n        elif list2:\n            curr.next = list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        max_area = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        \n        for i, height in enumerate(heights + [0]):\n            while stack and height < heights[stack[-1]]:\n                curr_height = heights[stack.pop()]\n                curr_width = i - stack[-1] - 1\n                max_area = max(max_area, curr_height * curr_width)\n            stack.append(i)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = [[]]\n        \n        for num in nums:\n            res += [curr + [num] for curr in res]\n        \n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = left + (right - left) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     elif nums[mid] < nums[mid - 1]:\n        #         return nums[mid]\n        #     elif nums[mid] > nums[left]:\n        #         left = mid + 1\n        #     else:\n        #         right = mid - 1\n        # return nums[left]\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = left + (right - left) // 2\n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s or s[0] not in '+-' and s[0] not in '0123456789':\n            return False\n        \n        num, exp, dot, e = False, False, False, False\n        \n        for c in s:\n            if c in '0123456789':\n                num = True\n            elif c in '+-' and (not num):\n                return False\n            elif c == '.':\n                if dot or e:\n                    return False\n                dot = True\n            elif c == 'e' or c == 'E':\n                if e or not num:\n                    return False\n                e = True\n                num = False\n            else:\n                return False\n        \n        return num"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_map = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\",\n        }\n        \n        result = \"\"\n        \n        for key in sorted(roman_map.keys(), reverse=True):\n            while num >= key:\n                result += roman_map[key]\n                num -= key\n                \n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        # \n        #"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_location(board, l):\n            for row in range(9):\n                for col in range(9):\n                    if board[row][col] == '.':\n                        l[0] = row\n                        l[1] = col\n                        return True\n            return False\n        \n        def used_in_row(board, row, num):\n            for col in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_col(board, col, num):\n            for row in range(9):\n                if board[row][col] == num:\n                    return True\n            return False\n        \n        def used_in_box(board, box_start_row, box_start_col, num):\n            for row in range(3):\n                for col in range(3):\n                    if board[row + box_start_row][col + box_start_col] == num:\n                        return True\n            return False\n        \n        def is_valid(board, row, col, num):\n            return not used_in_row(board, row, num) and not used_in_col(board, col, num) and not used_in_box(board, row - row % 3, col - col % 3, num)\n        \n        def solve(board):\n            l = [0, 0]\n            if not find_empty_location(board, l):\n                return True\n            \n            row = l[0]\n            col = l[1]\n            \n            for num in range(1, 10):\n                if is_valid(board, row, col, str(num)):\n                    board[row][col] = str(num)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[row][col] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node that are swapped\n        first_node, second_node, prev = None, None, TreeNode(float('-inf'))\n        \n        # traverse the tree in-order\n        def inorder(node):\n            nonlocal first_node, second_node, prev\n            if node:\n                inorder(node.left)\n                \n                # if the current node is smaller than the previous node, it's a new first node\n                if prev.val > node.val:\n                    if first_node is None:\n                        first_node = prev\n                    second_node = node\n                \n                prev = node\n                inorder(node.right)\n        \n        inorder(root)\n        \n        # swap the values of the first and second node\n        first_node.val, second_node.val = second_node.val, first_node.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node that are swapped\n        first_node, second_node, prev = None, None, TreeNode(float('-inf'))\n        \n        # traverse the tree in-order\n        def inorder(node):\n            nonlocal first_node, second_node, prev\n            if node:\n                inorder(node.left)\n                \n                # if the current node is smaller than the previous node, it's a new first node\n                if prev.val > node.val:\n                    if first_node is None:\n                        first_node = prev\n                    second_node = node\n                \n                prev = node\n                inorder(node.right)\n        \n        inorder(root)\n        \n        # swap the values of the first and second node\n        first_node.val, second_node.val = second_node.val, first_node.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node that are swapped\n        first_node, second_node, prev = None, None, TreeNode(float('-inf'))\n        \n        # traverse the tree in-order\n        def inorder(node):\n            nonlocal first_node, second_node, prev\n            if node:\n                inorder(node.left)\n                \n                # if the current node is smaller than the previous node, it's a new first node\n                if prev.val > node.val:\n                    if first_node is None:\n                        first_node = prev\n                    second_node = node\n                \n                prev = node\n                inorder(node.right)\n        \n        inorder(root)\n        \n        # swap the values of the first and second node\n        first_node.val, second_node.val = second_node.val, first_node.val\n\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node that are swapped\n        first_node, second_node, prev = None, None, TreeNode(float('-inf'))\n        \n        # traverse the tree in-order\n        def inorder(node):\n            nonlocal first_node,"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            nxt = slow.next\n            slow.next = prev\n            prev = slow\n            slow = nxt\n        \n        # compare the first half and the second half\n        while prev:\n            if head.val != prev.val:\n                return False\n            head = head.next\n            prev = prev.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left, right = 0, num\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid > num:\n                right = mid - 1\n            else:\n                left = mid + 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ans = [0] * (n + 1)\n        for i in range(1, n + 1):\n            ans[i] = ans[i & (i - 1)] + 1\n        return ans"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n                \n        return dummy.next"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for p in path.split('/'):\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                if letter not in node:\n                    node[letter] = {}\n                node = node[letter]\n            node['$'] = word\n        \n        res = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                self.dfs(board, i, j, trie, '', res)\n        \n        return list(res)\n    \n    def dfs(self, board, i, j, node, word, res):\n        letter = board[i][j]\n        if letter not in node:\n            return\n        \n        word += letter\n        if '$' in node[letter]:\n            res.add(node[letter]['$'])\n        \n        board[i][j] = '#'\n        for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n            if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] != '#':\n                self.dfs(board, x, y, node[letter], word, res)\n        \n        board[i][j] = letter"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for c in s_dict:\n            if s_dict[c] != t_dict.get(c, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != len(row):\n                return False\n        \n        # 2. check columns\n        for col in zip(*board):\n            if len(set(col)) != len(col):\n                return False\n        \n        # 3. check 3x3 squares\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                square = [board[x][y] for x in (i, i + 1, i + 2) for y in (j, j + 1, j + 2)]\n                if len(set(square)) != len(square):\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n + 1):\n            if i % 3 == 0 and i % 5 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        \n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the whole string\n        s = s[::-1]\n        \n        # reverse each word\n        s = s.split()\n        s = ' '.join(s[::-1])\n        \n        return s"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in range(len(columnTitle)):\n            res = res * 26 + (ord(columnTitle[i]) - ord('A') + 1)\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1] and candies[i] <= candies[i + 1]:\n                candies[i] = candies[i + 1] + 1\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second = slow.next\n        prev = None\n        while second:\n            next = second.next\n            second.next = prev\n            prev = second\n            second = next\n        \n        # merge the first and second halves\n        first, second = head, prev\n        while second:\n            next1, next2 = first.next, second.next\n            first.next = second\n            second.next = next1\n            first = next1\n            second = next2\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.split()\n        if len(s) != len(pattern):\n            return False\n        \n        d = {}\n        for i, j in zip(pattern, s):\n            if i not in d:\n                if j in d.values():\n                    return False\n                d[i] = j\n            elif d[i] != j:\n                return False\n        \n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            n = nums[i]\n            rem_nums = nums[:i] + nums[i+1:]\n            for p in self.permute(rem_nums):\n                res.append([n] + p)\n        \n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        l, r = 0, m * n - 1\n        \n        while l <= r:\n            mid = (l + r) // 2\n            num = matrix[mid // n][mid % n]\n            \n            if num == target:\n                return True\n            elif num < target:\n                l = mid + 1\n            else:\n                r = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 or l2 or carry:\n            val1 = (l1.val if l1 else 0)\n            val2 = (l2.val if l2 else 0)\n            \n            carry, out = divmod(val1 + val2 + carry, 10)\n            \n            curr.next = ListNode(out)\n            curr = curr.next\n            \n            l1 = (l1.next if l1 else None)\n            l2 = (l2.next if l2 else None)\n            \n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. convert to binary\n        # 2. flip bits\n        # 3. convert back to decimal\n        \n        # 1. convert to binary\n        binary = bin(num)[2:]\n        \n        # 2. flip bits\n        flipped = \"\"\n        for bit in binary:\n            if bit == \"0\":\n                flipped += \"1\"\n            else:\n                flipped += \"0\"\n        \n        # 3. convert back to decimal\n        return int(flipped, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        diff = nums[1] - nums[0]\n        ans = 0\n        count = 0\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n                ans += count\n            else:\n                diff = nums[i] - nums[i-1]\n                count = 0\n        \n        return ans"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res, cur, n = [], [], len(words)\n        \n        for w in words:\n            if len(cur) + len(w) + n > maxWidth:\n                if len(cur) == 1:\n                    res.append(cur[0] + ' ' * (maxWidth - n))\n                else:\n                    num_spaces = (maxWidth - sum(len(x) for x in cur)) % (len(cur) - 1)\n                    num_spaces_per_word = (maxWidth - sum(len(x) for x in cur)) // (len(cur) - 1)\n                    res.append(''.join(cur[i] + ' ' * num_spaces_per_word + cur[i + 1] if i < len(cur) - 1 else cur[i] + ' ' * num_spaces) for i in range(len(cur)))\n                cur, n = [], 0\n            cur += [w],\n            n += 1\n        return res + [' '.join(cur).ljust(maxWidth)]"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                res.append(node.val)\n                stack.append(node.left)\n                stack.append(node.right)\n                \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_area = 0\n        left = 0\n        right = len(height) - 1\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(max_area, area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a trie\n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                if letter not in node:\n                    node[letter] = {}\n                node = node[letter]\n            node['#'] = True\n        \n        # build a set of concatenated words\n        res = []\n        for word in words:\n            node = trie\n            seen = set()\n            while word:\n                if '#' in node:\n                    if word in seen:\n                        res.append(word)\n                        break\n                    seen.add(word)\n                    word = ''\n                else:\n                    if word not in node:\n                        break\n                    node = node[word[0]]\n                    word = word[1:]\n            else:\n                if '#' in node:\n                    res.append(word)\n        \n        return res"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        res = \"\"\n        if num < 0:\n            res += \"-\"\n            num = abs(num)\n        \n        while num:\n            res += str(num % 7)\n            num = num // 7\n        \n        return res[::-1]"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i] == col or board[i] + i == row + col or board[i] - i == row - col:\n                    return False\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row] = col\n                    count += backtrack(board, row + 1)\n            return count\n        \n        return backtrack([-1] * n, 0)"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i, j = row - 1, col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i, j = row - 1, col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.'] * n for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board or not board[0]:\n            return False\n        \n        if len(board) * len(board[0]) < len(word):\n            return False\n        \n        self.m, self.n = len(board), len(board[0])\n        self.word = word\n        self.visited = set()\n        \n        for i in range(self.m):\n            for j in range(self.n):\n                if self.dfs(board, i, j, 0):\n                    return True\n        \n        return False\n    \n    def dfs(self, board, i, j, k):\n        if k == len(self.word):\n            return True\n        \n        if i < 0 or i >= self.m or j < 0 or j >= self.n or board[i][j] != self.word[k]:\n            return False\n        \n        if (i, j) in self.visited:\n            return False\n        \n        self.visited.add((i, j))\n        \n        res = self.dfs(board, i + 1, j, k + 1) or \\\n            self.dfs(board, i - 1, j, k + 1) or \\\n            self.dfs(board, i, j + 1, k + 1) or \\\n            self.dfs(board, i, j - 1, k + 1)\n        \n        self.visited.remove((i, j))\n        \n        return res"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # iterate through nums1 and nums2\n        # if nums1[i] > nums2[j]\n        #   swap nums1[i] and nums2[j]\n        #   i += 1\n        #   j += 1\n        #   m += 1\n        # else:\n        #   i += 1\n        \n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        while j >= 0:\n            if i >= 0 and nums1[i] > nums2[j]:\n                nums1[k] = nums1[i]\n                i -= 1\n            else:\n                nums1[k] = nums2[j]\n                j -= 1\n            k -= 1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2 and num < max1:\n                max3 = max2\n                max2 = num\n            elif num > max3 and num < max2:\n                max3 = num\n                \n        return max3 if max3 != float('-inf') else max1"}]}