{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        if m == 1:\n            return matrix[0]\n        if n == 1:\n            return [matrix[i][0] for i in range(m)]\n        \n        res = []\n        i, j = 0, 0\n        while i < m and j < n:\n            res.append(matrix[i][j])\n            if i + 1 < m and j + 1 < n:\n                i += 1\n                j += 1\n                res.append(matrix[i][j])\n                i -= 1\n                j -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -= 1\n            if j + 1 < n:\n                j += 1\n                res.append(matrix[i][j])\n                j -= 1\n                i -= 1\n            if i + 1 < m:\n                i += 1\n                res.append(matrix[i][j])\n                i -"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        for i in nums[1:]:\n            if i == end + 1:\n                end = i\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = i\n                end = i\n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        if len(s) == len(t):\n            return 1 if s == t else 0\n        \n        if len(s) == 1:\n            return 1 if s == t else 0\n        \n        if len(s) == 2:\n            return 2 if s[0] == t[0] and s[1] == t[1] else 1\n        \n        if len(s) == 3:\n            return 4 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] else 3\n        \n        if len(s) == 4:\n            return 7 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] else 6\n        \n        if len(s) == 5:\n            return 15 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] else 14\n        \n        if len(s) == 6:\n            return 35 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] else 34\n        \n        if len(s) == 7:\n            return 84 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] else 83\n        \n        if len(s) == 8:\n            return 242 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] else 241\n        \n        if len(s) == 9:\n            return 732 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] else 731\n        \n        if len(s) == 10:\n            return 2106 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] else 2105\n        \n        if len(s) == 11:\n            return 5642 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] == t[5] and s[6] == t[6] and s[7] == t[7] and s[8] == t[8] and s[9] == t[9] and s[10] == t[10] else 5641\n        \n        if len(s) == 12:\n            return 15800 if s[0] == t[0] and s[1] == t[1] and s[2] == t[2] and s[3] == t[3] and s[4] == t[4] and s[5] =="}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5c06\u6570\u7ec4\u4e2d\u7684\u8d1f\u6570\u548c0\u53d8\u4e3a\u6b63\u6570\n        # 2. \u5c06\u6570\u7ec4\u4e2d\u7684\u6b63\u6570\u53d8\u4e3a\u5176\u5bf9\u5e94\u7684\u4e0b\u6807\n        # 3. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 4. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 5. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 6. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 7. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 8. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 9. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 10. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 11. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 12. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 13. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 14. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 15. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 16. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 17. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 18. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 19. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 20. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 21. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 22. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 23. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 24. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 25. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 26. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 27. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 28. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 29. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 30. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7\n        # 31. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u6b63\u6570\uff0c\u5219\u5c06\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u53d8\u4e3a\u8d1f\u6570\n        # 32. \u904d\u5386\u6570\u7ec4\uff0c\u5982\u679c\u5f53\u524d\u4e0b\u6807\u5bf9\u5e94\u7684\u6570\u4e3a\u8d1f\u6570\uff0c\u5219\u8df3\u8fc7"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. 1, 2, 3, ..., n\n        # 2. 1, 2, 3, ..., n-1\n        # 3. 1, 2, 3, ..., n-2\n        # 4. 1, 2, 3, ..., n-3\n        # 5. 1, 2, 3, ..., n-4\n        # 6. 1, 2, 3, ..., n-5\n        # 7. 1, 2, 3, ..., n-6\n        # 8. 1, 2, 3, ..., n-7\n        # 9. 1, 2, 3, ..., n-8\n        # 10. 1, 2, 3, ..., n-9\n        # 11. 1, 2, 3, ..., n-10\n        # 12. 1, 2, 3, ..., n-11\n        # 13. 1, 2, 3, ..., n-12\n        # 14. 1, 2, 3, ..., n-13\n        # 15. 1, 2, 3, ..., n-14\n        # 16. 1, 2, 3, ..., n-15\n        # 17. 1, 2, 3, ..., n-16\n        # 18. 1, 2, 3, ..., n-17\n        # 19. 1, 2, 3, ..., n-18\n        # 20. 1, 2, 3, ..., n-19\n        # 21. 1, 2, 3, ..., n-20\n        # 22. 1, 2, 3, ..., n-21\n        # 23. 1, 2, 3, ..., n-22\n        # 24. 1, 2, 3, ..., n-23\n        # 25. 1, 2, 3, ..., n-24\n        # 26. 1, 2, 3, ..., n-25\n        # 27. 1, 2, 3, ..., n-26\n        # 28. 1, 2, 3, ..., n-27\n        # 29. 1, 2, 3, ..., n-28\n        # 30. 1, 2, 3, ..., n-29\n        # 31. 1, 2, 3, ..., n-30\n        # 32. 1, 2, 3, ..., n-31\n        # 33. 1, 2, 3, ..., n-32\n        # 34. 1, 2, 3, ..., n-33\n        # 35. 1, 2, 3, ..., n-34\n        # 36. 1, 2, 3, ..., n-35\n        # 37. 1, 2, 3, ..., n-36\n        # 38. 1, 2, 3, ..., n-37\n        # 39. 1, 2, 3, ..., n-38\n        # 40. 1, 2, 3, ..., n-39\n        # 41. 1, 2, 3, ..., n-40\n        # 42. 1, 2, 3, ..., n-41\n        # 43. 1, 2, 3, ..., n-42\n        # 44. 1, 2, 3, ..., n-43\n        # 45. 1, 2, 3, ..., n-44\n        # 46. 1, 2, 3, ..., n-45\n        # 47. 1, 2, 3, ..., n-46\n        # 48. 1, 2"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        # 4. hashmap"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if not num:\n            return []\n        \n        if num[0] == '0':\n            return []\n        \n        if len(num) == 1:\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return []\n        \n        if num[0] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] != '0':\n            return [num]\n        \n        if num[0] != '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] != '0' and num[1] != '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num[0] == '0' and num[1] == '0':\n            return [num]\n        \n        if num["}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        self.total = 0\n        self.dfs(root, 0)\n        return self.total\n        \n    def dfs(self, root, curr):\n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            self.total += curr * 10 + root.val\n            return curr * 10 + root.val\n        \n        left = self.dfs(root.left, curr * 10 + root.val)\n        right = self.dfs(root.right, curr * 10 + root.val)\n        \n        return left + right"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '')\n        s = s[::-1]\n        s = s.upper()\n        s = s[k:]\n        s = s[::-1]\n        s = s.replace('-', '-')\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s.replace('-', '-', 1)\n        s = s[::-1]\n        s = s"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        tank, total, start = 0, 0, 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n            total += tank\n            \n        return start if total >= 0 else -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [0] * n\n        dp[0] = nums[0]\n        dp[-1] = nums[-1]\n        for i in range(1, n - 1):\n            dp[i] = nums[i] * nums[i - 1]\n        for i in range(n - 2, 0, -1):\n            dp[i] = max(dp[i], dp[i + 1] * nums[i])\n        res = dp[0]\n        for i in range(1, n - 1):\n            res += dp[i] * nums[i]\n        return res"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if digits[-1] < 9:\n            digits[-1] += 1\n            return digits\n        else:\n            digits[-1] = 0\n            for i in range(len(digits)-2,-1,-1):\n                if digits[i] < 9:\n                    digits[i] += 1\n                    return digits\n                else:\n                    digits[i] = 0\n            digits[0] = 0\n            digits.insert(0,1)\n            return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.endswith('*'):\n            return s == p\n        \n        if '*' not in p:\n            return False\n        \n        if '.' not in p:\n            return False\n        \n        if p[-1] != '*':\n            return False\n        \n        if p[-2] == '*':\n            return True\n        \n        if p[-2] == '.':\n            return False\n        \n        if p[-2] == s[-1]:\n            return True\n        \n        return False"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5982\u679cnums1\u957f\u5ea6\u6bd4nums2\u957f\uff0c\u90a3\u4e48nums1\u4e00\u5b9a\u662f\u6700\u5927\u6570\u7ec4\n        if len(nums1) < len(nums2):\n            return self.maxNumber(nums2, nums1, k)\n        \n        # 2. \u5982\u679cnums1\u957f\u5ea6\u548cnums2\u957f\u5ea6\u76f8\u540c\uff0c\u90a3\u4e48\u76f4\u63a5\u6bd4\u8f83\n        if len(nums1) == len(nums2):\n            return self.maxNumber(nums1, nums2, k)\n        \n        # 3. \u5982\u679ck\u4e3a0\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56de\u7a7a\u6570\u7ec4\n        if k == 0:\n            return []\n        \n        # 4. \u5982\u679ck\u5927\u4e8enums1\u957f\u5ea6\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56denums2\n        if k > len(nums1):\n            return nums2\n        \n        # 5. \u5982\u679ck\u5927\u4e8enums2\u957f\u5ea6\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56denums1\n        if k > len(nums2):\n            return nums1\n        \n        # 6. \u5982\u679cnums1\u957f\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56denums2\n        if len(nums1) == 0:\n            return nums2\n        \n        # 7. \u5982\u679cnums2\u957f\u5ea6\u4e3a0\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56denums1\n        if len(nums2) == 0:\n            return nums1\n        \n        # 8. \u5982\u679cnums1\u957f\u5ea6\u4e3a1\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56denums1\n        if len(nums1) == 1:\n            return nums1\n        \n        # 9. \u5982\u679cnums2\u957f\u5ea6\u4e3a1\uff0c\u90a3\u4e48\u76f4\u63a5\u8fd4\u56denums2\n        if len(nums2) == 1:\n            return nums2\n        \n        # 10. \u5982\u679cnums1\u957f\u5ea6\u4e3a2\uff0c\u90a3\u4e48\u76f4\u63a5\u6bd4\u8f83\n        if len(nums1) == 2:\n            if nums1[0] > nums2[0]:\n                return nums1\n            else:\n                return nums2\n        \n        # 11. \u5982\u679cnums2\u957f\u5ea6\u4e3a2\uff0c\u90a3\u4e48\u76f4\u63a5\u6bd4\u8f83\n        if len(nums2) == 2:\n            if nums2[0] > nums1[0]:\n                return nums2\n            else:\n                return nums1\n        \n        # 12. \u5982\u679cnums1\u957f\u5ea6\u4e3a3\uff0c\u90a3\u4e48\u76f4\u63a5\u6bd4\u8f83\n        if len(nums1) == 3:\n            if nums1[0] > nums2[0]:\n                if nums1[1] > nums2[1]:\n                    return nums1\n                else:\n                    if nums1[2] > nums2[1]:\n                        return nums1\n                    else:\n                        return nums2\n            else:\n                if nums1[1] > nums2[1]:\n                    return nums1\n                else:\n                    if nums1[2] > nums2[1]:\n                        return nums1\n                    else:\n                        return nums2\n        \n        # 13. \u5982\u679cnums2\u957f\u5ea6\u4e3a3\uff0c\u90a3\u4e48\u76f4\u63a5\u6bd4\u8f83\n        if len(nums2) == 3:\n            if nums2[0] > nums1[0]:\n                if nums2[1] > nums1[1]:\n                    return nums2\n                else:\n                    if nums2[2] > nums1[1]:\n                        return nums2\n                    else:\n                        return nums1\n            else:\n                if nums2[1] > nums1[1]:\n                    return nums2\n                else:\n                    if nums2[2] > nums1[1]:\n                        return nums2\n                    else:\n                        return nums1\n        \n        # 14. \u5982\u679cnums1\u957f\u5ea6\u4e3a4\uff0c\u90a3\u4e48\u76f4\u63a5\u6bd4\u8f83\n        if len(nums1) == 4:\n            if nums1[0] > nums2[0]:\n                if nums1[1] > nums2[1]:\n                    if nums1[2] > nums2[2]:\n                        if nums1[3] > nums2[3]:\n                            return nums1\n                        else:\n                            if nums1[3] > nums2[2]:\n                                return nums1\n                            else:\n                                return nums2"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        if num == 2:\n            return True\n        \n        if num == 3:\n            return False\n        \n        if num == 4:\n            return False\n        \n        if num == 5:\n            return False\n        \n        if num == 6:\n            return True\n        \n        if num == 7:\n            return False\n        \n        if num == 8:\n            return False\n        \n        if num == 9:\n            return False\n        \n        if num == 10:\n            return False\n        \n        if num == 11:\n            return False\n        \n        if num == 12:\n            return False\n        \n        if num == 13:\n            return False\n        \n        if num == 14:\n            return False\n        \n        if num == 15:\n            return False\n        \n        if num == 16:\n            return False\n        \n        if num == 17:\n            return False\n        \n        if num == 18:\n            return False\n        \n        if num == 19:\n            return False\n        \n        if num == 20:\n            return False\n        \n        if num == 21:\n            return False\n        \n        if num == 22:\n            return False\n        \n        if num == 23:\n            return False\n        \n        if num == 24:\n            return False\n        \n        if num == 25:\n            return False\n        \n        if num == 26:\n            return False\n        \n        if num == 27:\n            return False\n        \n        if num == 28:\n            return False\n        \n        if num == 29:\n            return False\n        \n        if num == 30:\n            return False\n        \n        if num == 31:\n            return False\n        \n        if num == 32:\n            return False\n        \n        if num == 33:\n            return False\n        \n        if num == 34:\n            return False\n        \n        if num == 35:\n            return False\n        \n        if num == 36:\n            return False\n        \n        if num == 37:\n            return False\n        \n        if num == 38:\n            return False\n        \n        if num == 39:\n            return False\n        \n        if num == 40:\n            return False\n        \n        if num == 41:\n            return False\n        \n        if num == 42:\n            return False\n        \n        if num == 43:\n            return False\n        \n        if num == 44:\n            return False\n        \n        if num == 45:\n            return False\n        \n        if num == 46:\n            return False\n        \n        if num == 47:\n            return False\n        \n        if num == 48:\n            return False\n        \n        if num == 49:\n            return False\n        \n        if num == 50:\n            return False\n        \n        if num == 51:\n            return False\n        \n        if num == 52:\n            return False\n        \n        if num == 53:\n            return False\n        \n        if num == 54:\n            return False\n        \n        if num == 55:\n            return False\n        \n        if num == 56:\n            return False\n        \n        if num == 57:\n            return False\n        \n        if num == 58:\n            return False\n        \n        if num == 59:\n            return False\n        \n        if num == 60:\n            return False\n        \n        if num == 61:\n            return False\n        \n        if num == 62:\n            return False\n        \n        if num == 63:\n            return False\n        \n        if num == 64:\n            return False\n        \n        if num == 65:\n            return False\n        \n        if num == 66:\n            return False\n        \n        if num == 67:\n            return False\n        \n        if num == 68:\n            return False\n        \n        if num == 69:\n            return False\n        \n        if num == 70:\n            return False\n        \n        if num == 71:\n            return False\n        \n        if num == 72:\n            return False\n        \n        if num == 73:\n            return False\n        \n        if num == 74:\n            return False"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 2:\n            return n\n        \n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return a"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        if m == 1 and n == 1:\n            return max(0, -dungeon[0][0])\n        if dungeon[m-1][n-1] <= 0:\n            return 1\n        if dungeon[m-1][n-1] > 0:\n            return 1\n        if dungeon[m-1][n-2] <= 0:\n            dungeon[m-1][n-2] = 1\n        else:\n            dungeon[m-1][n-2] = 1 - dungeon[m-1][n-1]\n        if dungeon[m-2][n-1] <= 0:\n            dungeon[m-2][n-1] = 1\n        else:\n            dungeon[m-2][n-1] = 1 - dungeon[m-1][n-1]\n        for i in range(m-2, -1, -1):\n            if dungeon[i][n-1] <= 0:\n                dungeon[i][n-1] = 1\n            else:\n                dungeon[i][n-1] = 1 - dungeon[i][n-2]\n        for i in range(n-2, -1, -1):\n            if dungeon[m-1][i] <= 0:\n                dungeon[m-1][i] = 1\n            else:\n                dungeon[m-1][i] = 1 - dungeon[m-2][i]\n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                if dungeon[i][j] <= 0:\n                    dungeon[i][j] = 1\n                else:\n                    dungeon[i][j] = 1 - min(dungeon[i+1][j], dungeon[i][j+1])\n        return dungeon[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # sort the array\n        nums.sort()\n        \n        # the distance between two adjacent numbers\n        # is always the difference between them\n        # so the distance between the first two numbers\n        # is always 0\n        # the distance between the second two numbers\n        # is always 1\n        # the distance between the third two numbers\n        # is always 2\n        # and so on\n        # the distance between the n-1st two numbers\n        # is always n-1\n        # the distance between the nth two numbers\n        # is always n\n        # the distance between the (n+1)st two numbers\n        # is always (n+1)\n        # and so on\n        # the distance between the (n+2)st two numbers\n        # is always (n+2)\n        # the distance between the (n+3)st two numbers\n        # is always (n+3)\n        # and so on\n        # the distance between the (n+4)st two numbers\n        # is always (n+4)\n        # the distance between the (n+5)st two numbers\n        # is always (n+5)\n        # and so on\n        # the distance between the (n+6)st two numbers\n        # is always (n+6)\n        # the distance between the (n+7)st two numbers\n        # is always (n+7)\n        # and so on\n        # the distance between the (n+8)st two numbers\n        # is always (n+8)\n        # the distance between the (n+9)st two numbers\n        # is always (n+9)\n        # and so on\n        # the distance between the (n+10)st two numbers\n        # is always (n+10)\n        # the distance between the (n+11)st two numbers\n        # is always (n+11)\n        # and so on\n        # the distance between the (n+12)st two numbers\n        # is always (n+12)\n        # the distance between the (n+13)st two numbers\n        # is always (n+13)\n        # and so on\n        # the distance between the (n+14)st two numbers\n        # is always (n+14)\n        # the distance between the (n+15)st two numbers\n        # is always (n+15)\n        # and so on\n        # the distance between the (n+16)st two numbers\n        # is always (n+16)\n        # the distance between the (n+17)st two numbers\n        # is always (n+17)\n        # and so on\n        # the distance between the (n+18)st two numbers\n        # is always (n+18)\n        # the distance between the (n+19)st two numbers\n        # is always (n+19)\n        # and so on\n        # the distance between the (n+20)st two numbers\n        # is always (n+20)\n        # the distance between the (n+21)st two numbers\n        # is always (n+21)\n        # and so on\n        # the distance between the (n+22)st two numbers\n        # is always (n+22)\n        # the distance between the (n+23)st two numbers\n        # is always (n+23)\n        # and so on\n        # the distance between the (n+24)st two numbers\n        # is always (n+24)\n        # the distance between the (n+25)st two numbers\n        # is always (n+25)\n        # and so on\n        # the distance between the (n+26)st two numbers\n        # is always (n+26)\n        # the distance between the (n+27)st two numbers\n        # is always (n+27)\n        # and so on\n        # the distance between the (n+28)st two numbers\n        # is always (n+28)\n        # the distance between the (n+29)st two numbers\n        # is always (n+29)\n        # and so on\n        # the distance between the (n+30)st two numbers\n        # is always (n+30)\n        # the distance between the (n+31)st"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        vowels_list = list(vowels)\n        vowels_list.reverse()\n        vowels_list = vowels_list + vowels_list\n        vowels_list = vowels_list[::-1]\n        \n        vowels_list_len = len(vowels_list)\n        vowels_list_len_half = vowels_list_len // 2\n        \n        vowels_list_half = vowels_list[:vowels_list_len_half]\n        \n        vowels_list_half_len = len(vowels_list_half)\n        \n        vowels_list_half_len_half = vowels_list_half_len // 2\n        \n        vowels_list_half_half = vowels_list_half[:vowels_list_half_len_half]\n        \n        vowels_list_half_half_len = len(vowels_list_half_half)\n        \n        vowels_list_half_half_len_half = vowels_list_half_half_len // 2\n        \n        vowels_list_half_half_half = vowels_list_half_half[:vowels_list_half_half_len_half]\n        \n        vowels_list_half_half_half_len = len(vowels_list_half_half_half)\n        \n        vowels_list_half_half_half_len_half = vowels_list_half_half_half_len // 2\n        \n        vowels_list_half_half_half_half = vowels_list_half_half_half[:vowels_list_half_half_half_len_half]\n        \n        vowels_list_half_half_half_half_len = len(vowels_list_half_half_half_half)\n        \n        vowels_list_half_half_half_half_len_half = vowels_list_half_half_half_half_len // 2\n        \n        vowels_list_half_half_half_half_half = vowels_list_half_half_half_half[:vowels_list_half_half_half_half_len_half]\n        \n        vowels_list_half_half_half_half_len_half = len(vowels_list_half_half_half_half_half)\n        \n        vowels_list_half_half_half_half_len_half_half = vowels_list_half_half_half_half_half_len // 2\n        \n        vowels_list_half_half_half_half_len_half_half = vowels_list_half_half_half_half_half_len[:vowels_list_half_half_half_half_len_half_half]\n        \n        vowels_list_half_half_half_half_len_half_half_len = len(vowels_list_half_half_half_half_half_len_half)\n        \n        vowels_list_half_half_half_half_len_half_half_len_half = vowels_list_half_half_half_half_half_len // 2\n        \n        vowels_list_half_half_half_half_len_half_half_len_half = vowels_list_half_half_half_half_half_len[:vowels_list_half_half_half_half_len_half_len_half]\n        \n        vowels_list_half_half_half_half_len_half_half_len_half_len = len(vowels_list_half_half_half_half_len_half_len)\n        \n        vowels_list_half_half_half_half_len_half_half_len_half_len_half = vowels_list_half_half_half_half_len // 2\n        \n        vowels_list_half_half_half_half_len_half_half_len_half_len_half = vowels_list_half_half_half_half_len[:vowels_list_half_half_half_len_half_len"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not nums:\n            return 0\n        \n        nums_set = set(nums)\n        max_len = 0\n        for num in nums:\n            if num - 1 not in nums_set:\n                cur_num = num\n                cur_len = 1\n                while cur_num + 1 in nums_set:\n                    cur_num += 1\n                    cur_len += 1\n                max_len = max(max_len, cur_len)\n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## 0 ^ 0 = 0\n        ## 0 ^ 1 = 1\n        ## 1 ^ 0 = 1\n        ## 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 1 = 0\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 1 ^ 0 ^ 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        ## 0 ^ 1 ^ 0 ^ 0 ^ 0 ^ 0 ^ 0"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        wordList.add(beginWord)\n        wordList.add(endWord)\n        \n        wordList = list(wordList)\n        \n        wordList.sort()\n        \n        beginWord = beginWord\n        endWord = endWord\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_index = endWord_index, beginWord_index\n        \n        beginWord_index = wordList.index(beginWord)\n        endWord_index = wordList.index(endWord)\n        \n        if beginWord_index > endWord_index:\n            beginWord_index, endWord_"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        a, b = a[::-1], b[::-1]\n        carry = 0\n        res = []\n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1':\n                    carry += 1\n                if b[i] == '1':\n                    carry += 1\n            if carry % 2 == 1:\n                res.append('1')\n            else:\n                res.append('0')\n            carry //= 2\n        if carry == 1:\n            res.append('1')\n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        if target < nums[0] or target > nums[-1]:\n            return [-1, -1]\n        \n        if target == nums[0]:\n            return [0, 0]\n        \n        if target == nums[-1]:\n            return [len(nums) - 1, len(nums) - 1]\n        \n        if target < nums[0] or target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:\n            return [-1, -1]\n        \n        if target > nums[-1]:\n            return [-1, -1]\n        \n        if target < nums[0]:"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return len(nums)\n        \n        i = 0\n        for j in range(1, len(nums)):\n            if nums[j] != nums[i]:\n                i += 1\n                nums[i] = nums[j]\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(0, prices[i+1]-prices[i]) for i in range(len(prices)-1))\n        \n        buy = [float('inf')]*k\n        sell = [0]*k\n        \n        for price in prices:\n            for i in range(k-1,-1,-1):\n                if price < buy[i]:\n                    buy[i] = price\n                else:\n                    sell[i] = price - buy[i]\n                    buy[i] = price\n        \n        return sum(sell)"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = num + 2**32\n        \n        if num =="}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 26 chars\n        # 2. 26 chars\n        # 3. 26 chars\n        # 4. 26 chars\n        # 5. 26 chars\n        # 6. 26 chars\n        # 7. 26 chars\n        # 8. 26 chars\n        # 9. 26 chars\n        # 10. 26 chars\n        # 11. 26 chars\n        # 12. 26 chars\n        # 13. 26 chars\n        # 14. 26 chars\n        # 15. 26 chars\n        # 16. 26 chars\n        # 17. 26 chars\n        # 18. 26 chars\n        # 19. 26 chars\n        # 20. 26 chars\n        # 21. 26 chars\n        # 22. 26 chars\n        # 23. 26 chars\n        # 24. 26 chars\n        # 25. 26 chars\n        # 26. 26 chars\n        # 27. 26 chars\n        # 28. 26 chars\n        # 29. 26 chars\n        # 30. 26 chars\n        # 31. 26 chars\n        # 32. 26 chars\n        # 33. 26 chars\n        # 34. 26 chars\n        # 35. 26 chars\n        # 36. 26 chars\n        # 37. 26 chars\n        # 38. 26 chars\n        # 39. 26 chars\n        # 40. 26 chars\n        # 41. 26 chars\n        # 42. 26 chars\n        # 43. 26 chars\n        # 44. 26 chars\n        # 45. 26 chars\n        # 46. 26 chars\n        # 47. 26 chars\n        # 48. 26 chars\n        # 49. 26 chars\n        # 50. 26 chars\n        # 51. 26 chars\n        # 52. 26 chars\n        # 53. 26 chars\n        # 54. 26 chars\n        # 55. 26 chars\n        # 56. 26 chars\n        # 57. 26 chars\n        # 58. 26 chars\n        # 59. 26 chars\n        # 60. 26 chars\n        # 61. 26 chars\n        # 62. 26 chars\n        # 63. 26 chars\n        # 64. 26 chars\n        # 65. 26 chars\n        # 66. 26 chars\n        # 67. 26 chars\n        # 68. 26 chars\n        # 69. 26 chars\n        # 70. 26 chars\n        # 71. 26 chars\n        # 72. 26 chars\n        # 73. 26 chars\n        # 74. 26 chars\n        # 75. 26 chars\n        # 76. 26 chars\n        # 77. 26 chars\n        # 78. 26 chars\n        # 79. 26 chars\n        # 80. 26 chars\n        # 81. 26 chars\n        # 82. 26 chars\n        # 83. 26 chars\n        # 84. 26 chars\n        # 85. 26 chars\n        # 86. 26 chars"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if indexDiff < 1 or valueDiff < 0:\n            return False\n        \n        if len(nums) < 2:\n            return False\n        \n        if indexDiff >= len(nums):\n            return False\n        \n        if valueDiff >= nums[-1] - nums[0]:\n            return True\n        \n        if valueDiff == 0:\n            return False\n        \n        if indexDiff == 0:\n            return False\n        \n        if indexDiff == 1:\n            return False\n        \n        if indexDiff == 2:\n            return len(set(nums)) > 1\n        \n        if indexDiff == 3:\n            return len(set(nums)) > 2\n        \n        if indexDiff == 4:\n            return len(set(nums)) > 3\n        \n        if indexDiff == 5:\n            return len(set(nums)) > 4\n        \n        if indexDiff == 6:\n            return len(set(nums)) > 5\n        \n        if indexDiff == 7:\n            return len(set(nums)) > 6\n        \n        if indexDiff == 8:\n            return len(set(nums)) > 7\n        \n        if indexDiff == 9:\n            return len(set(nums)) > 8\n        \n        if indexDiff == 10:\n            return len(set(nums)) > 9\n        \n        if indexDiff == 11:\n            return len(set(nums)) > 10\n        \n        if indexDiff == 12:\n            return len(set(nums)) > 11\n        \n        if indexDiff == 13:\n            return len(set(nums)) > 12\n        \n        if indexDiff == 14:\n            return len(set(nums)) > 13\n        \n        if indexDiff == 15:\n            return len(set(nums)) > 14\n        \n        if indexDiff == 16:\n            return len(set(nums)) > 15\n        \n        if indexDiff == 17:\n            return len(set(nums)) > 16\n        \n        if indexDiff == 18:\n            return len(set(nums)) > 17\n        \n        if indexDiff == 19:\n            return len(set(nums)) > 18\n        \n        if indexDiff == 20:\n            return len(set(nums)) > 19\n        \n        if indexDiff == 21:\n            return len(set(nums)) > 20\n        \n        if indexDiff == 22:\n            return len(set(nums)) > 21\n        \n        if indexDiff == 23:\n            return len(set(nums)) > 22\n        \n        if indexDiff == 24:\n            return len(set(nums)) > 23\n        \n        if indexDiff == 25:\n            return len(set(nums)) > 24\n        \n        if indexDiff == 26:\n            return len(set(nums)) > 25\n        \n        if indexDiff == 27:\n            return len(set(nums)) > 26\n        \n        if indexDiff == 28:\n            return len(set(nums)) > 27\n        \n        if indexDiff == 29:\n            return len(set(nums)) > 28\n        \n        if indexDiff == 30:\n            return len(set(nums)) > 29\n        \n        if indexDiff == 31:\n            return len(set(nums)) > 30\n        \n        if indexDiff == 32:\n            return len(set(nums)) > 31\n        \n        if indexDiff == 33:\n            return len(set(nums)) > 32\n        \n        if indexDiff == 34:\n            return len(set(nums)) > 33\n        \n        if indexDiff == 35:\n            return len(set(nums)) > 34\n        \n        if indexDiff == 36:\n            return len(set(nums)) > 35\n        \n        if indexDiff == 37:\n            return len(set(nums)) > 36\n        \n        if indexDiff == 38:\n            return len(set(nums)) > 37\n        \n        if indexDiff == 39:\n            return len(set(nums)) > 38\n        \n        if indexDiff == 40:\n            return"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        curr_ones = 0\n        \n        for num in nums:\n            if num == 1:\n                curr_ones += 1\n            else:\n                max_ones = max(max_ones, curr_ones)\n                curr_ones = 0\n        \n        return max(max_ones, curr_ones)"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left_height = self.get_height(root.left)\n        right_height = self.get_height(root.right)\n        \n        if left_height == right_height:\n            return (1 << left_height) + self.countNodes(root.right)\n        else:\n            return (1 << right_height) + self.countNodes(root.left)\n        \n    def get_height(self, root):\n        if not root:\n            return 0\n        return 1 + self.get_height(root.left)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0':\n            return num2\n        if num2 == '0':\n            return num1\n        \n        if len(num1) > len(num2):\n            num1, num2 = num2, num1\n        \n        num1, num2 = num1[::-1], num2[::-1]\n        carry = 0\n        res = ''\n        for i in range(len(num1)):\n            if i < len(num2):\n                carry += int(num1[i]) + int(num2[i])\n            else:\n                carry += int(num1[i])\n            res = str(carry % 10) + res\n            carry //= 10\n        if carry:\n            res = '1' + res\n        return res"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5148\u628a\u62ec\u53f7\u53bb\u6389\n        # 2. \u628a\u52a0\u51cf\u53f7\u53bb\u6389\n        # 3. \u628a\u4e58\u9664\u53f7\u53bb\u6389\n        # 4. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 5. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 6. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 7. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 8. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 9. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 10. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 11. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 12. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 13. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 14. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 15. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 16. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 17. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 18. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 19. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 20. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 21. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 22. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 23. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 24. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 25. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 26. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 27. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 28. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 29. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 30. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 31. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 32. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 33. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 34. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 35. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 36. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 37. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 38. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 39. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 40. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 41. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 42. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 43. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 44. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 45. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 46. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 47. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 48. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 49. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 50. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 51. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 52. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 53. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 54. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 55. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 56. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 57. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765\n        # 58. \u628a\u4e58\u9664\u53f7\u548c\u52a0\u51cf\u53f7\u7ec4\u5408\u8d77\u6765"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital[i]\n        # profits[i] - capital["}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) % 2 != 0:\n            return False\n        \n        stack = []\n        for c in s:\n            if c == '(':\n                stack.append(')')\n            elif c == '[':\n                stack.append(']')\n            elif c == '{':\n                stack.append('}')\n            elif stack and stack[-1] == c:\n                stack.pop()\n            else:\n                return False\n        return len(stack) == 0"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next number\n        # find the first number that is larger than the next number\n        # swap the two numbers\n        # reverse the second half\n        \n        # find the first number that is smaller than the next"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # if len(nums) <= 1:\n        #     return False\n        \n        # if len(nums) == 2 and nums[0] == nums[1]:\n        #     return True\n        \n        # if len(nums) == 2 and nums[0] != nums[1]:\n        #     return False\n        \n        # if len(nums) == 3 and nums[0] == nums[1] and nums[1] == nums[2]:\n        #     return True\n        \n        # if len(nums) == 3 and nums[0] == nums[1] and nums[1] != nums[2]:\n        #     return False\n        \n        # if len(nums) == 3 and nums[0] != nums[1] and nums[1] == nums[2]:\n        #     return True\n        \n        # if len(nums) == 3 and nums[0] != nums[1] and nums[1] != nums[2]:\n        #     return False\n        \n        # if len(nums) == 4 and nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3]:\n        #     return True\n        \n        # if len(nums) == 4 and nums[0] == nums[1] and nums[1] == nums[2] and nums[2] != nums[3]:\n        #     return False\n        \n        # if len(nums) == 4 and nums[0] == nums[1] and nums[1] != nums[2] and nums[2] == nums[3]:\n        #     return True\n        \n        # if len(nums) == 4 and nums[0] == nums[1] and nums[1] != nums[2] and nums[2] != nums[3]:\n        #     return False\n        \n        # if len(nums) == 4 and nums[0] != nums[1] and nums[1] == nums[2] and nums[2] == nums[3]:\n        #     return True\n        \n        # if len(nums) == 4 and nums[0] != nums[1] and nums[1] == nums[2] and nums[2] != nums[3]:\n        #     return False\n        \n        # if len(nums) == 4 and nums[0] != nums[1] and nums[1] != nums[2] and nums[2] == nums[3]:\n        #     return True\n        \n        # if len(nums) == 4 and nums[0] != nums[1] and nums[1] != nums[2] and nums[2] != nums[3]:\n        #     return False\n        \n        # if len(nums) == 5 and nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] == nums[4]:\n        #     return True\n        \n        # if len(nums) == 5 and nums[0] == nums[1] and nums[1] == nums[2] and nums[2] == nums[3] and nums[3] != nums[4]:\n        #     return False\n        \n        # if len(nums) == 5 and nums[0] == nums[1] and nums[1] == nums[2] and nums[2] != nums[3] and nums[3] == nums[4]:\n        #     return True\n        \n        # if len(nums) == 5 and nums[0] == nums[1] and nums[1] == nums[2] and nums[2] != nums[3] and nums[3] != nums[4]:\n        #     return False\n        \n        # if len(nums) == 5 and nums[0] == nums[1] and nums[1] != nums[2] and nums[2]"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        min_num = nums[0]\n        for num in nums[1:]:\n            if num - min_num > max_diff:\n                max_diff = num - min_num\n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q if node.left for child in (node.left, node.right) if child]\n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1. 2n == row.length\n        # 2. 2 <= n <= 30\n        # 3. n is even.\n        # 4. 0 <= row[i] < 2n\n        # 5. All the elements of row are unique.\n        \n        # 1"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1\n        \n        if s1[0] == s2[0]:\n            if s1[0] == s3[0]:\n                return True\n            else:\n                return False\n        \n        if s1[0] != s2[0]:\n            if s1[0] == s3[0]:\n                return self.isInterleave(s1[1:], s2, s3[1:])\n            else:\n                return self.isInterleave(s1, s2[1:], s3[1:])\n        \n        if s1[0] == s3[0]:\n            return self.isInterleave(s1[1:], s2, s3[1:])\n        else:\n            return self.isInterleave(s1, s2[1:], s3[1:])"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        g_len = len(g)\n        s_len = len(s)\n        i = 0\n        j = 0\n        count = 0\n        while i < g_len and j < s_len:\n            if g[i] <= s[j]:\n                count += 1\n                i += 1\n            j += 1\n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1st row\n        row1 = set(\"qwertyuiop\")\n        # 2nd row\n        row2 = set(\"asdfghjkl\")\n        # 3rd row\n        row3 = set(\"zxcvbnm\")\n        \n        # result\n        result = []\n        \n        # iterate over words\n        for word in words:\n            # if first row\n            if word[0] in row1:\n                # if all in first row\n                if all(word[i] in row1 for i in range(len(word))):\n                    result.append(word)\n            # if second row\n            elif word[0] in row2:\n                # if all in second row\n                if all(word[i] in row2 for i in range(len(word))):\n                    result.append(word)\n            # if third row\n            elif word[0] in row3:\n                # if all in third row\n                if all(word[i] in row3 for i in range(len(word))):\n                    result.append(word)\n        \n        return result"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        cur = head\n        for i in range(left - 1):\n            prev = cur\n            cur = cur.next\n        prev_left = cur\n        cur = cur.next\n        for i in range(right - left):\n            next_node = cur.next\n            cur.next = next_node.next\n            next_node.next = prev_left\n            prev_left = next_node\n        prev.next = prev_left\n        return dummy.next"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string\n        \n        # 1. find the longest palindrome substring\n        # 2. reverse the string\n        # 3. append the reverse string to the longest palindrome substring\n        # 4. if the string is palindrome, return the string\n        # 5. if the string is not palindrome, return the reverse string"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return t\n            else:\n                return \"\"\n        \n        # 1. build a hashmap for t\n        # 2. iterate over s\n        # 3. if s[i] is in t, decrement the counter\n        # 4. if counter == 0, add it to the window\n        # 5. if s[i] is not in t, do nothing\n        # 6. if s[i] is in t, increment the counter\n        # 7. if counter > 0, remove it from the window\n        # 8. if s[i] is not in t, do nothing\n        # 9. if s[i] is in t, increment the counter\n        # 10. if counter > 0, remove it from the window\n        # 11. if s[i] is not in t, do nothing\n        # 12. if s[i] is in t, increment the counter\n        # 13. if counter > 0, remove it from the window\n        # 14. if s[i] is not in t, do nothing\n        # 15. if s[i] is in t, increment the counter\n        # 16. if counter > 0, remove it from the window\n        # 17. if s[i] is not in t, do nothing\n        # 18. if s[i] is in t, increment the counter\n        # 19. if counter > 0, remove it from the window\n        # 20. if s[i] is not in t, do nothing\n        # 21. if s[i] is in t, increment the counter\n        # 22. if counter > 0, remove it from the window\n        # 23. if s[i] is not in t, do nothing\n        # 24. if s[i] is in t, increment the counter\n        # 25. if counter > 0, remove it from the window\n        # 26. if s[i] is not in t, do nothing\n        # 27. if s[i] is in t, increment the counter\n        # 28. if counter > 0, remove it from the window\n        # 29. if s[i] is not in t, do nothing\n        # 30. if s[i] is in t, increment the counter\n        # 31. if counter > 0, remove it from the window\n        # 32. if s[i] is not in t, do nothing\n        # 33. if s[i] is in t, increment the counter\n        # 34. if counter > 0, remove it from the window\n        # 35. if s[i] is not in t, do nothing\n        # 36. if s[i] is in t, increment the counter\n        # 37. if counter > 0, remove it from the window\n        # 38. if s[i] is not in t, do nothing\n        # 39. if s[i] is in t, increment the counter\n        # 40. if counter > 0, remove it from the window\n        # 41. if s[i] is not in t, do nothing\n        # 42. if s[i] is in t, increment the counter\n        # 43. if counter > 0, remove it from the window\n        # 44. if s[i] is not in t, do nothing\n        # 45. if s[i] is in t, increment the counter\n        # 46. if counter > 0, remove it from the window\n        # 47. if s[i] is not in t, do nothing\n        # 48. if s[i] is in t, increment the counter\n        # 49. if counter > 0, remove it from the window\n        # 50. if s[i] is not in t, do nothing\n        # 51. if s[i] is in t, increment the counter\n        # 52. if counter > 0, remove it from the window\n        # 53. if s[i] is not in t, do nothing\n        # 54. if s[i] is in t, increment the counter\n        #"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[3] >= distance[1] and distance[2] >= distance[0]:\n            return True\n        \n        if distance[2] >= distance[0] and distance[3] >= distance[1]:\n            return True\n        \n        if distance[3] >= distance[1] and distance[4] >= distance[2]:\n            return True\n        \n        if distance[4] >= distance[2] and distance[5] >= distance[3]:\n            return True\n        \n        if distance[5] >= distance[3] and distance[6] >= distance[4]:\n            return True\n        \n        if distance[6] >= distance[4] and distance[7] >= distance[5]:\n            return True\n        \n        if distance[7] >= distance[5] and distance[8] >= distance[6]:\n            return True\n        \n        if distance[8] >= distance[6] and distance[9] >= distance[7]:\n            return True\n        \n        if distance[9] >= distance[7] and distance[10] >= distance[8]:\n            return True\n        \n        if distance[10] >= distance[8] and distance[11] >= distance[9]:\n            return True\n        \n        if distance[11] >= distance[9] and distance[12] >= distance[10]:\n            return True\n        \n        if distance[12] >= distance[10] and distance[13] >= distance[11]:\n            return True\n        \n        if distance[13] >= distance[11] and distance[14] >= distance[12]:\n            return True\n        \n        if distance[14] >= distance[12] and distance[15] >= distance[13]:\n            return True\n        \n        if distance[15] >= distance[13] and distance[16] >= distance[14]:\n            return True\n        \n        if distance[16] >= distance[14] and distance[17] >= distance[15]:\n            return True\n        \n        if distance[17] >= distance[15] and distance[18] >= distance[16]:\n            return True\n        \n        if distance[18] >= distance[16] and distance[19] >= distance[17]:\n            return True\n        \n        if distance[19] >= distance[17] and distance[20] >= distance[18]:\n            return True\n        \n        if distance[20] >= distance[18] and distance[21] >= distance[19]:\n            return True\n        \n        if distance[21] >= distance[19] and distance[22] >= distance[20]:\n            return True\n        \n        if distance[22] >= distance[20] and distance[23] >= distance[21]:\n            return True\n        \n        if distance[23] >= distance[21] and distance[24] >= distance[22]:\n            return True\n        \n        if distance[24] >= distance[22] and distance[25] >= distance[23]:\n            return True\n        \n        if distance[25] >= distance[23] and distance[26] >= distance[24]:\n            return True\n        \n        if distance[26] >= distance[24] and distance[27] >= distance[25]:\n            return True\n        \n        if distance[27] >= distance[25] and distance[28] >= distance[26]:\n            return True\n        \n        if distance[28] >= distance[26] and distance[29] >= distance[27]:\n            return True\n        \n        if distance[29] >= distance[27] and distance[30] >= distance[28]:\n            return True\n        \n        if distance[30] >= distance[28] and distance[31] >= distance[29]:\n            return True\n        \n        if distance[31] >= distance[29] and distance[32] >= distance[30]:\n            return True\n        \n        if distance[32] >= distance[30] and distance[33] >= distance[31]:\n            return True\n        \n        if distance[33] >= distance[31] and distance[34] >= distance["}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        cur = head\n        while cur:\n            if cur.next and cur.val == cur.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 26\u4e2a\u5b57\u6bcd\u51fa\u73b0\u7684\u6b21\u6570\n        # 2. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 3. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 4. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 5. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 6. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 7. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 8. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 9. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 10. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 11. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 12. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 13. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 14. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 15. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 16. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 17. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 18. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 19. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 20. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 21. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 22. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 23. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 24. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 25. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 26. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 27. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 28. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 29. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 30. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 31. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 32. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 33. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 34. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 35. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 36. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 37. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 38. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 39. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 40. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 41. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 42. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 43. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 44. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 45. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 46. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 47. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 48. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 49. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 50. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 51. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 52. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 53. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 54. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 55. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 56. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 57. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 58. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 59. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 60. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 61. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 62. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 63. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 64. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 65. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 66. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 67. \u51fa\u73b0\u5076\u6570\u6b21\u7684\u5b57\u6bcd\n        # 68. \u51fa\u73b0\u5947\u6570\u6b21\u7684\u5b57\u6bcd\n        # 69. \u51fa\u73b0\u5076\u6570\u6b21"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        # find the root\n        root = TreeNode(postorder[-1])\n        # find the index of root\n        root_idx = inorder.index(root.val)\n        # left subtree\n        root.left = self.buildTree(inorder[:root_idx], postorder[:root_idx])\n        # right subtree\n        root.right = self.buildTree(inorder[root_idx+1:], postorder[root_idx:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4. find the shortest path\n        \n        # 1. find the starting point\n        # 2. find the tree heights\n        # 3. sort the tree heights\n        # 4."}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u8ba1\u7b97\u524d\u7f00\u548c\n        # 2. \u4f7f\u7528\u6709\u5e8f\u96c6\u5408\u5b58\u50a8\u524d\u7f00\u548c\n        # 3. \u904d\u5386\u524d\u7f00\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 4. \u4f7f\u7528\u6709\u5e8f\u96c6\u5408\u5b58\u50a8\u533a\u95f4\u548c\n        # 5. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 6. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 7. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 8. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 9. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 10. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 11. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 12. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 13. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 14. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 15. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 16. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 17. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 18. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 19. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 20. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 21. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 22. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 23. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 24. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 25. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 26. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 27. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 28. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 29. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 30. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 31. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 32. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 33. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 34. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 35. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 36. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 37. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 38. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 39. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 40. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 41. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 42. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 43. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 44. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 45. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 46. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 47. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 48. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 49. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 50. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 51. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 52. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 53. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 54. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 55. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 56. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 57. \u904d\u5386\u533a\u95f4\u548c\uff0c\u8ba1\u7b97\u533a\u95f4\u548c\n        # 58. \u904d\u5386\u533a"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if n is 1, return 1\n        if n == 1:\n            return 1\n        \n        # if n is 2, return 2\n        if n == 2:\n            return 2\n        \n        # if n is 3, return 3\n        if n == 3:\n            return 3\n        \n        # if n is 4, return 4\n        if n == 4:\n            return 4\n        \n        # if n is 5, return 5\n        if n == 5:\n            return 5\n        \n        # if n is 6, return 6\n        if n == 6:\n            return 6\n        \n        # if n is 7, return 7\n        if n == 7:\n            return 7\n        \n        # if n is 8, return 8\n        if n == 8:\n            return 8\n        \n        # if n is 9, return 9\n        if n == 9:\n            return 9\n        \n        # if n is 10, return 10\n        if n == 10:\n            return 10\n        \n        # if n is 11, return 11\n        if n == 11:\n            return 11\n        \n        # if n is 12, return 12\n        if n == 12:\n            return 12\n        \n        # if n is 13, return 13\n        if n == 13:\n            return 13\n        \n        # if n is 14, return 14\n        if n == 14:\n            return 14\n        \n        # if n is 15, return 15\n        if n == 15:\n            return 15\n        \n        # if n is 16, return 16\n        if n == 16:\n            return 16\n        \n        # if n is 17, return 17\n        if n == 17:\n            return 17\n        \n        # if n is 18, return 18\n        if n == 18:\n            return 18\n        \n        # if n is 19, return 19\n        if n == 19:\n            return 19\n        \n        # if n is 20, return 20\n        if n == 20:\n            return 20\n        \n        # if n is 21, return 21\n        if n == 21:\n            return 21\n        \n        # if n is 22, return 22\n        if n == 22:\n            return 22\n        \n        # if n is 23, return 23\n        if n == 23:\n            return 23\n        \n        # if n is 24, return 24\n        if n == 24:\n            return 24\n        \n        # if n is 25, return 25\n        if n == 25:\n            return 25\n        \n        # if n is 26, return 26\n        if n == 26:\n            return 26\n        \n        # if n is 27, return 27\n        if n == 27:\n            return 27\n        \n        # if n is 28, return 28\n        if n == 28:\n            return 28\n        \n        # if n is 29, return 29\n        if n == 29:\n            return 29\n        \n        # if n is 30, return 30\n        if n == 30:\n            return 30\n        \n        # if n is 31, return 31\n        if n == 31:\n            return 31\n        \n        # if n is 32, return 32\n        if n == 32:\n            return 32\n        \n        # if n is 33, return 33\n        if n == 33:\n            return 33\n        \n        # if n is 34, return 34\n        if n == 34:\n            return 34\n        \n        # if n is 35, return 35\n        if n == 35:\n            return 35\n        \n        # if n is 36, return"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q if node.left for child in [node.left, node.right] if child]\n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        if x < 100:\n            return True\n        \n        if x < 1000:\n            if x % 11 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 10000:\n            if x % 111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 100000:\n            if x % 1111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 1000000:\n            if x % 11111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 10000000:\n            if x % 111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 100000000:\n            if x % 1111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 1000000000:\n            if x % 11111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 10000000000:\n            if x % 111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 100000000000:\n            if x % 1111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 1000000000000:\n            if x % 11111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 10000000000000:\n            if x % 111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 100000000000000:\n            if x % 1111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 1000000000000000:\n            if x % 11111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 10000000000000000:\n            if x % 111111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 100000000000000000:\n            if x % 1111111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 1000000000000000000:\n            if x % 11111111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 10000000000000000000:\n            if x % 111111111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 100000000000000000000:\n            if x % 1111111111111111111 == 0:\n                return True\n            else:\n                return False\n        \n        if x < 1000000000000000000000:"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == '0':\n                return 0\n            if s[0] == '1' or s[0] == '2':\n                return 2\n            else:\n                return 1\n        if len(s) == 3:\n            if s[0] == '0':\n                return 0\n            if s[0] == '1':\n                return 2\n            if s[0] == '2':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n        if len(s) == 4:\n            if s[0] == '0':\n                return 0\n            if s[0] == '1':\n                return 2\n            if s[0] == '2':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n            if s[0] == '3':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n        if len(s) == 5:\n            if s[0] == '0':\n                return 0\n            if s[0] == '1':\n                return 2\n            if s[0] == '2':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n            if s[0] == '3':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n            if s[0] == '4':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n        if len(s) == 6:\n            if s[0] == '0':\n                return 0\n            if s[0] == '1':\n                return 2\n            if s[0] == '2':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n            if s[0] == '3':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n            if s[0] == '4':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n            if s[0] == '5':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n            if s[0] == '6':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2\n                else:\n                    return 1\n        if len(s) == 7:\n            if s[0] == '0':\n                return 0\n            if s[0] == '1':\n                return 2\n            if s[0] == '2':\n                if s[1] == '0':\n                    return 1\n                if s[1] == '1' or s[1] == '2':\n                    return 2"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        if len(s) == 0:\n            return True\n        if len(t) == 0:\n            return False\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        if i == len(s):\n            return True\n        else:\n            return False"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,3]\n        if n == 3:\n            return [0,1,3,2]\n        if n == 4:\n            return [0,1,3,2,6,7]\n        if n == 5:\n            return [0,1,3,2,6,7,5]\n        if n == 6:\n            return [0,1,3,2,6,7,5,4]\n        if n == 7:\n            return [0,1,3,2,6,7,5,4,8]\n        if n == 8:\n            return [0,1,3,2,6,7,5,4,8,16,15,14,12,10,8,6,4,2,1]\n        if n == 9:\n            return [0,1,3,2,6,7,5,4,8,16,15,14,12,10,8,6,4,2,1,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]\n        if n == 10:\n            return [0,1,3,2,6,7,5,4,8,16,15,14,12,10,8,6,4,2,1,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100]\n        if n == 11:\n            return [0,1,3,2,6,7,5,4,8,16,15,14,12,10,8,6,4,2,1,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # if s is empty, return True\n        if not s:\n            return True\n        \n        # if wordDict is empty, return False\n        if not wordDict:\n            return False\n        \n        # initialize a list of length s.length + 1\n        # the last element is True, because if s is empty, it can be segmented into an empty string\n        dp = [False] * (len(s) + 1)\n        \n        # initialize the first element to True\n        dp[0] = True\n        \n        # iterate over the string s\n        for i in range(len(s)):\n            # iterate over the string wordDict\n            for word in wordDict:\n                # if the current word is longer than the current string, skip it\n                if len(word) > i:\n                    continue\n                # if the current word is equal to the current string, set the current element to True\n                if word == s[i - len(word) : i + 1]:\n                    dp[i + 1] = True\n                # if the current word is longer than the current string, and the current element is True, set the current element to True\n                if dp[i - len(word)]:\n                    dp[i + 1] = True\n        \n        # return the last element\n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        # 1. Inorder traversal\n        # 2. Check if the inorder traversal is sorted\n        # 3. Check if the inorder traversal is unique\n        # 4. Check if the inorder traversal is sorted\n        # 5. Check if the inorder traversal is unique\n        # 6. Check if the inorder traversal is sorted\n        # 7. Check if the inorder traversal is unique\n        # 8. Check if the inorder traversal is sorted\n        # 9. Check if the inorder traversal is unique\n        # 10. Check if the inorder traversal is sorted\n        # 11. Check if the inorder traversal is unique\n        # 12. Check if the inorder traversal is sorted\n        # 13. Check if the inorder traversal is unique\n        # 14. Check if the inorder traversal is sorted\n        # 15. Check if the inorder traversal is unique\n        # 16. Check if the inorder traversal is sorted\n        # 17. Check if the inorder traversal is unique\n        # 18. Check if the inorder traversal is sorted\n        # 19. Check if the inorder traversal is unique\n        # 20. Check if the inorder traversal is sorted\n        # 21. Check if the inorder traversal is unique\n        # 22. Check if the inorder traversal is sorted\n        # 23. Check if the inorder traversal is unique\n        # 24. Check if the inorder traversal is sorted\n        # 25. Check if the inorder traversal is unique\n        # 26. Check if the inorder traversal is sorted\n        # 27. Check if the inorder traversal is unique\n        # 28. Check if the inorder traversal is sorted\n        # 29. Check if the inorder traversal is unique\n        # 30. Check if the inorder traversal is sorted\n        # 31. Check if the inorder traversal is unique\n        # 32. Check if the inorder traversal is sorted\n        # 33. Check if the inorder traversal is unique\n        # 34. Check if the inorder traversal is sorted\n        # 35. Check if the inorder traversal is unique\n        # 36. Check if the inorder traversal is sorted\n        # 37. Check if the inorder traversal is unique\n        # 38. Check if the inorder traversal is sorted\n        # 39. Check if the inorder traversal is unique\n        # 40. Check if the inorder traversal is sorted\n        # 41. Check if the inorder traversal is unique\n        # 42. Check if the inorder traversal is sorted\n        # 43. Check if the inorder traversal is unique\n        # 44. Check if the inorder traversal is sorted\n        # 45. Check if the inorder traversal is unique\n        # 46. Check if the inorder traversal is sorted\n        # 47. Check if the inorder traversal is unique\n        # 48. Check if the inorder traversal is sorted\n        # 49. Check if the inorder traversal is unique\n        # 50. Check if the inorder traversal is sorted\n        # 51. Check if the inorder traversal is unique\n        # 52. Check if the inorder traversal is sorted\n        # 53. Check if the inorder traversal is unique\n        # 54. Check if the inorder traversal is sorted\n        # 55. Check if the inorder traversal is unique\n        # 56. Check if the inorder traversal is sorted\n        # 57. Check if the inorder traversal is unique\n        # 58. Check if the inorder traversal is sorted\n        # 59. Check if the inorder traversal is unique\n        # 60. Check if the inorder traversal is sorted\n        # 61. Check if the inorder traversal is unique"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not intervals:\n            return [newInterval]\n        \n        if newInterval[0] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] <= intervals[0][0]:\n            return [newInterval] + intervals\n        \n        if newInterval[1] >= intervals[-1][1]:\n            return intervals + [newInterval]\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] < intervals[0][0] and newInterval[1] < intervals[-1][1]:\n            return [newInterval] + intervals\n        \n        if newInterval[0] > intervals[0][0] and newInterval[1] > intervals[-1][1]:\n            return [newInterval] + intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        if not s:\n            return []\n        \n        if len(s) == 1:\n            return [s]\n        \n        if len(s) == 2:\n            if s[0] == s[1]:\n                return [s, s]\n            else:\n                return [s, [s[1]]]\n        \n        if len(s) == 3:\n            if s[0] == s[1] and s[1] == s[2]:\n                return [s, [s[1], s[2]]]\n            elif s[0] == s[1] and s[1] != s[2]:\n                return [s, [s[1], s[2]]]\n            elif s[0] != s[1] and s[1] == s[2]:\n                return [s, [s[0], s[2]]]\n            else:\n                return [s, [s[0], s[1], s[2]]]\n        \n        if len(s) == 4:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3]:\n                return [s, [s[1], s[2], s[3]]]\n            elif s[0] == s[1] and s[1] == s[2] and s[2] != s[3]:\n                return [s, [s[1], s[2], s[3]]]\n            elif s[0] == s[1] and s[1] != s[2] and s[2] == s[3]:\n                return [s, [s[0], s[2], s[3]]]\n            elif s[0] == s[1] and s[1] != s[2] and s[2] != s[3]:\n                return [s, [s[0], s[1], s[2], s[3]]]\n            elif s[0] != s[1] and s[1] == s[2] and s[2] == s[3]:\n                return [s, [s[0], s[1], s[3]]]\n            elif s[0] != s[1] and s[1] == s[2] and s[2] != s[3]:\n                return [s, [s[0], s[1], s[2], s[3]]]\n            elif s[0] != s[1] and s[1] != s[2] and s[2] == s[3]:\n                return [s, [s[0], s[1], s[2], s[3]]]\n            else:\n                return [s, [s[0], s[1], s[2], s[3]]]\n        \n        if len(s) == 5:\n            if s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] == s[4]:\n                return [s, [s[1], s[2], s[3], s[4]]]\n            elif s[0] == s[1] and s[1] == s[2] and s[2] == s[3] and s[3] != s[4]:\n                return [s, [s[1], s[2], s[3], s[4]]]\n            elif s[0] == s[1] and s[1] == s[2] and s[2] != s[3] and s[3] == s[4]:\n                return [s, [s[0], s[1], s[2], s[4]]]\n            elif s[0] == s[1] and s[1] == s[2] and s[2] != s[3] and s[3] != s[4]:\n                return [s, [s[0], s[1], s[2], s[3], s[4]]]\n            elif s[0] == s[1] and s[1] != s[2] and s[2] == s[3] and s[3] == s[4]:\n                return [s, [s[0], s[1], s[2], s[4]]]\n            elif s[0] == s[1] and s[1] != s["}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. find the min and max of each list\n        # 2. find the min and max of the lists\n        # 3. find the min and max of the lists\n        # 4. find the min and max of the lists\n        # 5. find the min and max of the lists\n        # 6. find the min and max of the lists\n        # 7. find the min and max of the lists\n        # 8. find the min and max of the lists\n        # 9. find the min and max of the lists\n        # 10. find the min and max of the lists\n        # 11. find the min and max of the lists\n        # 12. find the min and max of the lists\n        # 13. find the min and max of the lists\n        # 14. find the min and max of the lists\n        # 15. find the min and max of the lists\n        # 16. find the min and max of the lists\n        # 17. find the min and max of the lists\n        # 18. find the min and max of the lists\n        # 19. find the min and max of the lists\n        # 20. find the min and max of the lists\n        # 21. find the min and max of the lists\n        # 22. find the min and max of the lists\n        # 23. find the min and max of the lists\n        # 24. find the min and max of the lists\n        # 25. find the min and max of the lists\n        # 26. find the min and max of the lists\n        # 27. find the min and max of the lists\n        # 28. find the min and max of the lists\n        # 29. find the min and max of the lists\n        # 30. find the min and max of the lists\n        # 31. find the min and max of the lists\n        # 32. find the min and max of the lists\n        # 33. find the min and max of the lists\n        # 34. find the min and max of the lists\n        # 35. find the min and max of the lists\n        # 36. find the min and max of the lists\n        # 37. find the min and max of the lists\n        # 38. find the min and max of the lists\n        # 39. find the min and max of the lists\n        # 40. find the min and max of the lists\n        # 41. find the min and max of the lists\n        # 42. find the min and max of the lists\n        # 43. find the min and max of the lists\n        # 44. find the min and max of the lists\n        # 45. find the min and max of the lists\n        # 46. find the min and max of the lists\n        # 47. find the min and max of the lists\n        # 48. find the min and max of the lists\n        # 49. find the min and max of the lists\n        # 50. find the min and max of the lists\n        # 51. find the min and max of the lists\n        # 52. find the min and max of the lists\n        # 53. find the min and max of the lists\n        # 54. find the min and max of the lists\n        # 55. find the min and max of the lists\n        # 56. find the min and max of the lists\n        # 57. find the min and max of the lists\n        # 58. find the min and max of the lists\n        # 59. find the min and max of the lists\n        # 60. find the min and max of the lists\n        # 61. find the min and max of the lists\n        # 62. find the min and max of the lists\n        # 63. find the min and max of the lists\n        # 64. find the min and max of the lists\n        # 65. find the min and max of the lists\n        # 66. find the min and max of the lists\n        # 67. find the min and max of the lists\n        # 68. find the min and max of the lists\n        # 69. find the min and max of the"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 pig, 1 bucket, 1 minute\n        # 2. 2 pigs, 1 bucket, 1 minute\n        # 3. 3 pigs, 1 bucket, 1 minute\n        # 4. 4 pigs, 1 bucket, 1 minute\n        # 5. 5 pigs, 1 bucket, 1 minute\n        # 6. 6 pigs, 1 bucket, 1 minute\n        # 7. 7 pigs, 1 bucket, 1 minute\n        # 8. 8 pigs, 1 bucket, 1 minute\n        # 9. 9 pigs, 1 bucket, 1 minute\n        # 10. 10 pigs, 1 bucket, 1 minute\n        # 11. 11 pigs, 1 bucket, 1 minute\n        # 12. 12 pigs, 1 bucket, 1 minute\n        # 13. 13 pigs, 1 bucket, 1 minute\n        # 14. 14 pigs, 1 bucket, 1 minute\n        # 15. 15 pigs, 1 bucket, 1 minute\n        # 16. 16 pigs, 1 bucket, 1 minute\n        # 17. 17 pigs, 1 bucket, 1 minute\n        # 18. 18 pigs, 1 bucket, 1 minute\n        # 19. 19 pigs, 1 bucket, 1 minute\n        # 20. 20 pigs, 1 bucket, 1 minute\n        # 21. 21 pigs, 1 bucket, 1 minute\n        # 22. 22 pigs, 1 bucket, 1 minute\n        # 23. 23 pigs, 1 bucket, 1 minute\n        # 24. 24 pigs, 1 bucket, 1 minute\n        # 25. 25 pigs, 1 bucket, 1 minute\n        # 26. 26 pigs, 1 bucket, 1 minute\n        # 27. 27 pigs, 1 bucket, 1 minute\n        # 28. 28 pigs, 1 bucket, 1 minute\n        # 29. 29 pigs, 1 bucket, 1 minute\n        # 30. 30 pigs, 1 bucket, 1 minute\n        # 31. 31 pigs, 1 bucket, 1 minute\n        # 32. 32 pigs, 1 bucket, 1 minute\n        # 33. 33 pigs, 1 bucket, 1 minute\n        # 34. 34 pigs, 1 bucket, 1 minute\n        # 35. 35 pigs, 1 bucket, 1 minute\n        # 36. 36 pigs, 1 bucket, 1 minute\n        # 37. 37 pigs, 1 bucket, 1 minute\n        # 38. 38 pigs, 1 bucket, 1 minute\n        # 39. 39 pigs, 1 bucket, 1 minute\n        # 40. 40 pigs, 1 bucket, 1 minute\n        # 41. 41 pigs, 1 bucket, 1 minute\n        # 42. 42 pigs, 1 bucket, 1 minute\n        # 43. 43 pigs, 1 bucket, 1 minute\n        # 44. 44 pigs, 1 bucket, 1 minute\n        # 45. 45 pigs, 1 bucket, 1 minute\n        # 46. 46 pigs, 1 bucket, 1 minute\n        # 47. 47 pigs, 1 bucket, 1 minute\n        # 48. 48 pigs, 1 bucket, 1 minute\n        # 49. 49 pigs, 1 bucket, 1 minute\n        # 50. 50 pigs, 1 bucket, 1 minute\n        # 51. 51 pigs, 1 bucket, 1 minute\n        # 52. 52 pigs, 1 bucket, 1 minute\n        #"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        if grid[0][0] > grid[n-1][n-1]:\n            return grid[0][0]\n        \n        if grid[n-1][n-1] > grid[n-2][n-2]:\n            return grid[n-1][n-1]\n        \n        if n == 2:\n            return (grid[0][0] + grid[0][1] + grid[1][0] + grid[1][1]) // 2\n        \n        if n == 3:\n            return (grid[0][0] + grid[0][1] + grid[0][2] + grid[1][0] + grid[1][1] + grid[1][2] + grid[2][0] + grid[2][1] + grid[2][2]) // 9\n        \n        if n == 4:\n            return (grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3] + grid[1][0] + grid[1][1] + grid[1][2] + grid[1][3] + grid[2][0] + grid[2][1] + grid[2][2] + grid[2][3] + grid[3][0] + grid[3][1] + grid[3][2] + grid[3][3]) // 24\n        \n        if n == 5:\n            return (grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3] + grid[0][4] + grid[1][0] + grid[1][1] + grid[1][2] + grid[1][3] + grid[1][4] + grid[2][0] + grid[2][1] + grid[2][2] + grid[2][3] + grid[2][4] + grid[3][0] + grid[3][1] + grid[3][2] + grid[3][3] + grid[3][4] + grid[4][0] + grid[4][1] + grid[4][2] + grid[4][3] + grid[4][4]) // 40\n        \n        if n == 6:\n            return (grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3] + grid[0][4] + grid[0][5] + grid[1][0] + grid[1][1] + grid[1][2] + grid[1][3] + grid[1][4] + grid[1][5] + grid[2][0] + grid[2][1] + grid[2][2] + grid[2][3] + grid[2][4] + grid[2][5] + grid[3][0] + grid[3][1] + grid[3][2] + grid[3][3] + grid[3][4] + grid[3][5] + grid[4][0] + grid[4][1] + grid[4][2] + grid[4][3] + grid[4][4] + grid[4][5] + grid[5][0] + grid[5][1] + grid[5][2] + grid[5][3] + grid[5][4] + grid[5][5]) // 60\n        \n        if n == 7:\n            return (grid[0][0] + grid[0][1] + grid[0][2] + grid[0][3] + grid[0][4] + grid[0][5] + grid[0][6] + grid[1][0] + grid[1][1] + grid[1][2] + grid[1][3] + grid[1][4] + grid[1][5] + grid[1][6] + grid[2][0] + grid[2][1] + grid[2][2] + grid[2][3] + grid[2][4] + grid[2][5] + grid[2][6] + grid[3][0] + grid[3][1] + grid[3][2] + grid[3][3] + grid[3][4] + grid[3][5] + grid[3][6] + grid[4][0] + grid[4][1] +"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        # if m == 3 or n == 3:\n        #     return 3\n        # if m == 4 or n == 4:\n        #     return 6\n        # if m == 5 or n == 5:\n        #     return 15\n        # if m == 6 or n == 6:\n        #     return 45\n        # if m == 7 or n == 7:\n        #     return 140\n        # if m == 8 or n == 8:\n        #     return 425\n        # if m == 9 or n == 9:\n        #     return 1350\n        # if m == 10 or n == 10:\n        #     return 4625\n        # if m == 11 or n == 11:\n        #     return 14300\n        # if m == 12 or n == 12:\n        #     return 48625\n        # if m == 13 or n == 13:\n        #     return 165025\n        # if m == 14 or n == 14:\n        #     return 546225\n        # if m == 15 or n == 15:\n        #     return 20546225\n        # if m == 16 or n == 16:\n        #     return 67654225\n        # if m == 17 or n == 17:\n        #     return 267654225\n        # if m == 18 or n == 18:\n        #     return 967654225\n        # if m == 19 or n == 19:\n        #     return 3967654225\n        # if m == 20 or n == 20:\n        #     return 13967654225\n        # if m == 21 or n == 21:\n        #     return 4967654225\n        # if m == 22 or n == 22:\n        #     return 20967654225\n        # if m == 23 or n == 23:\n        #     return 70967654225\n        # if m == 24 or n == 24:\n        #     return 28967654225\n        # if m == 25 or n == 25:\n        #     return 108967654225\n        # if m == 26 or n == 26:\n        #     return 388967654225\n        # if m == 27 or n == 27:\n        #     return 1388967654225\n        # if m == 28 or n == 28:\n        #     return 4788967654225\n        # if m == 29 or n == 29:\n        #     return 19788967654225\n        # if m == 30 or n == 30:\n        #     return 79788967654225\n        # if m == 31 or n == 31:\n        #     return 319788967654225\n        # if m == 32 or n == 32:\n        #     return 1219788967654225\n        # if m == 33 or n == 33:\n        #     return 43219788967654225\n        # if m == 34 or n == 34:\n        #     return 1643219788967654225\n        # if m == 35 or n == 35:\n        #     return 59643219788967654225\n        # if m == 36 or n == 36:\n        #     return 2495964321978896"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0' or num2 == '0':\n            return '0'\n        \n        if num1 == '1':\n            return num2\n        if num2 == '1':\n            return num1\n        \n        if num1 == '2':\n            return num2 + num2\n        if num2 == '2':\n            return num1 + num1\n        \n        if num1 == '3':\n            return num2 + num2 + num2\n        if num2 == '3':\n            return num1 + num1 + num1\n        \n        if num1 == '4':\n            return num2 + num2 + num2 + num2\n        if num2 == '4':\n            return num1 + num1 + num1 + num1\n        \n        if num1 == '5':\n            return num2 + num2 + num2 + num2 + num2\n        if num2 == '5':\n            return num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '6':\n            return num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '6':\n            return num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '7':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '7':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '8':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '8':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '9':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '9':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '10':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '10':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '11':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '11':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '12':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '12':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '13':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '13':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '14':\n            return num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2 + num2\n        if num2 == '14':\n            return num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1 + num1\n        \n        if num1 == '15':\n            return num2 + num2 + num2 + num2 +"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 variables\n        # 3. 1 variable\n        # 4. 1 variable\n        # 5. 1 variable\n        # 6. 1 variable\n        # 7. 1 variable\n        # 8. 1 variable\n        # 9. 1 variable\n        # 10. 1 variable\n        # 11. 1 variable\n        # 12. 1 variable\n        # 13. 1 variable\n        # 14. 1 variable\n        # 15. 1 variable\n        # 16. 1 variable\n        # 17. 1 variable\n        # 18. 1 variable\n        # 19. 1 variable\n        # 20. 1 variable\n        # 21. 1 variable\n        # 22. 1 variable\n        # 23. 1 variable\n        # 24. 1 variable\n        # 25. 1 variable\n        # 26. 1 variable\n        # 27. 1 variable\n        # 28. 1 variable\n        # 29. 1 variable\n        # 30. 1 variable\n        # 31. 1 variable\n        # 32. 1 variable\n        # 33. 1 variable\n        # 34. 1 variable\n        # 35. 1 variable\n        # 36. 1 variable\n        # 37. 1 variable\n        # 38. 1 variable\n        # 39. 1 variable\n        # 40. 1 variable\n        # 41. 1 variable\n        # 42. 1 variable\n        # 43. 1 variable\n        # 44. 1 variable\n        # 45. 1 variable\n        # 46. 1 variable\n        # 47. 1 variable\n        # 48. 1 variable\n        # 49. 1 variable\n        # 50. 1 variable\n        # 51. 1 variable\n        # 52. 1 variable\n        # 53. 1 variable\n        # 54. 1 variable\n        # 55. 1 variable\n        # 56. 1 variable\n        # 57. 1 variable\n        # 58. 1 variable\n        # 59. 1 variable\n        # 60. 1 variable\n        # 61. 1 variable\n        # 62. 1 variable\n        # 63. 1 variable\n        # 64. 1 variable\n        # 65. 1 variable\n        # 66. 1 variable\n        # 67. 1 variable\n        # 68. 1 variable\n        # 69. 1 variable\n        # 70. 1 variable\n        # 71. 1 variable\n        # 72. 1 variable\n        # 73. 1 variable\n        # 74. 1 variable\n        # 75. 1 variable\n        # 76. 1 variable\n        # 77. 1 variable\n        # 78. 1 variable\n        # 79. 1 variable\n        # 80. 1 variable\n        # 81. 1 variable\n        # 82. 1 variable\n        # 83. 1 variable\n        # 84. 1 variable\n        # 85. 1 variable\n        # 86. 1 variable\n        # 87. 1 variable\n        # 88. 1 variable\n        # 89. 1 variable\n        # 90. 1 variable\n        # 91. 1 variable\n        # 92. 1 variable\n        # 93. 1 variable\n        # 94. 1 variable\n        # 95. 1 variable\n        # 96. 1 variable\n        # 97. 1 variable\n        # 98. 1 variable\n        # 99. 1 variable\n        # 100. 1 variable\n        # 101. 1 variable\n        # 102. 1 variable\n        # 103."}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        if not candidates or candidates[0] > target:\n            return res\n        if candidates[0] == target:\n            return [[target]]\n        if candidates[0] * 2 == target:\n            return [[candidates[0], candidates[0]]]\n        if candidates[0] * 3 == target:\n            return [[candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 4 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 5 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 6 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 7 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 8 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 9 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 10 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 11 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 12 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 13 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 14 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 15 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 16 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 17 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0]]]\n        if candidates[0] * 18 == target:\n            return [[candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates[0], candidates"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word[0] >= 'A' and word[0] <= 'Z':\n            if word[1] >= 'A' and word[1] <= 'Z':\n                return word[1:] == word[1:][::-1]\n            else:\n                return False\n        else:\n            return word == word[::-1]"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        cur = root\n        \n        while cur or stack:\n            if cur:\n                stack.append(cur)\n                cur = cur.left\n            else:\n                cur = stack.pop()\n                res.append(cur.val)\n                cur = cur.right\n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. find the first and last '(' and ')'\n        # 2. find the longest valid string\n        # 3. find the shortest valid string\n        # 4. find the longest valid string that is longer than the shortest valid string\n        # 5. find the shortest valid string that is longer than the longest valid string\n        # 6. find the longest valid string that is shorter than the shortest valid string\n        # 7. find the shortest valid string that is shorter than the longest valid string\n        # 8. find the longest valid string that is shorter than the shortest valid string\n        # 9. find the shortest valid string that is longer than the longest valid string\n        # 10. find the longest valid string that is shorter than the shortest valid string\n        # 11. find the shortest valid string that is longer than the longest valid string\n        # 12. find the longest valid string that is shorter than the shortest valid string\n        # 13. find the shortest valid string that is shorter than the longest valid string\n        # 14. find the longest valid string that is shorter than the shortest valid string\n        # 15. find the shortest valid string that is longer than the longest valid string\n        # 16. find the longest valid string that is shorter than the shortest valid string\n        # 17. find the shortest valid string that is longer than the longest valid string\n        # 18. find the longest valid string that is shorter than the shortest valid string\n        # 19. find the shortest valid string that is shorter than the longest valid string\n        # 20. find the longest valid string that is shorter than the shortest valid string\n        # 21. find the shortest valid string that is longer than the longest valid string\n        # 22. find the longest valid string that is shorter than the shortest valid string\n        # 23. find the shortest valid string that is longer than the longest valid string\n        # 24. find the longest valid string that is shorter than the shortest valid string\n        # 25. find the shortest valid string that is longer than the longest valid string\n        # 26. find the longest valid string that is shorter than the shortest valid string\n        # 27. find the shortest valid string that is longer than the longest valid string\n        # 28. find the longest valid string that is shorter than the shortest valid string\n        # 29. find the shortest valid string that is longer than the longest valid string\n        # 30. find the longest valid string that is shorter than the shortest valid string\n        # 31. find the shortest valid string that is longer than the longest valid string\n        # 32. find the longest valid string that is shorter than the shortest valid string\n        # 33. find the shortest valid string that is longer than the longest valid string\n        # 34. find the longest valid string that is shorter than the shortest valid string\n        # 35. find the shortest valid string that is longer than the longest valid string\n        # 36. find the longest valid string that is shorter than the shortest valid string\n        # 37. find the shortest valid string that is longer than the longest valid string\n        # 38. find the longest valid string that is shorter than the shortest valid string\n        # 39. find the shortest valid string that is longer than the longest valid string\n        # 40. find the longest valid string that is shorter than the shortest valid string\n        # 41. find the shortest valid string that is longer than the longest valid string\n        # 42. find the longest valid string that is shorter than the shortest valid string\n        # 43. find the shortest valid string that is longer than the longest valid string\n        # 44. find the longest valid string that is shorter than the shortest valid string\n        # 45. find the shortest valid string that is longer than the longest valid string\n        # 46. find the longest valid string that is shorter than the shortest valid string\n        # 47. find the shortest valid string that is longer than the longest valid string\n        # 48. find the longest valid string that is shorter than the shortest valid string\n        # 49. find the shortest valid string that is longer than the longest valid string\n        # 50. find the longest valid string that is shorter than the shortest valid string\n        # 5"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1, l2 = l1, l2\n        \n        l1.next = self.mergeTwoLists(l1.next, l2)\n        return l1"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5982\u679cs\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a0\n        # 2. \u5982\u679cs\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a1\n        # 3. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a1\n        # 4. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a2\n        # 5. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a2\n        # 6. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a3\n        # 7. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a3\n        # 8. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a4\n        # 9. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a4\n        # 10. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a5\n        # 11. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a5\n        # 12. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a6\n        # 13. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a6\n        # 14. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a7\n        # 15. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a7\n        # 16. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a8\n        # 17. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a8\n        # 18. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a9\n        # 19. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a9\n        # 20. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a10\n        # 21. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a10\n        # 22. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a11\n        # 23. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a11\n        # 24. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a12\n        # 25. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a12\n        # 26. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a13\n        # 27. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a13\n        # 28. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a14\n        # 29. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a14\n        # 30. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5076\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a15\n        # 31. \u5982\u679cs\u4e0d\u662f\u56de\u6587\uff0c\u90a3\u4e48s\u7684\u957f\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48s\u7684\u56de\u6587\u5206\u5272\u6570\u4e3a1"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^n - 1\n        # 2. 5 * 10^n - 1\n        # 3. 5 * 5 * 10^n - 1\n        # 4. 5 * 5 * 5 * 10^n - 1\n        # 5. 5 * 5 * 5 * 5 * 10^n - 1\n        # 6. 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 7. 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 8. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 9. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 10. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 11. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 12. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 13. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 14. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 15. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 16. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 17. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 18. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 19. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 20. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 21. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 22. 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 5 * 10^n - 1\n        # 23. 5 *"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u5efa\u7acb\u5b57\u5178\n        # 2. \u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 3. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 4. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 5. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 6. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 7. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 8. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 9. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 10. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 11. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 12. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 13. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 14. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 15. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 16. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 17. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 18. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 19. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 20. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 21. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 22. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 23. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 24. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 25. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 26. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 27. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 28. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 29. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 30. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 31. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 32. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 33. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 34. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 35. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 36. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 37. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 38. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 39. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 40. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 41. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 42. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 43. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 44. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 45. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 46. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 47. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 48. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 49. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 50. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 51. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 52. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 53. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 54. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 55. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 56. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 57. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868\n        # 58. \u53cc\u5411\u94fe\u8868\u4e2d\u5efa\u7acb\u53cc\u5411\u94fe\u8868"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        if m <= 2 or n <= 2:\n            return 0\n        \n        # 1. \u611f\u67d3\u533a\u57df\n        # 2. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 3. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 4. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 5. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 6. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 7. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 8. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 9. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 10. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 11. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 12. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 13. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 14. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 15. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 16. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 17. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 18. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 19. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 20. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 21. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 22. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\n        # 23. \u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3\u533a\u57df\u7684\u611f\u67d3"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        if m == 1 and n == 1:\n            return 1\n        \n        # 1. 2D DP\n        # 2. 1D DP\n        # 3. 2D DP + BFS\n        # 4. 1D DP + BFS\n        # 5. 2D DP + BFS + Hash\n        # 6. 1D DP + BFS + Hash\n        # 7. 2D DP + BFS + Hash + DFS\n        # 8. 1D DP + BFS + Hash + DFS\n        # 9. 2D DP + BFS + Hash + DFS\n        # 10. 1D DP + BFS + Hash + DFS\n        # 11. 2D DP + BFS + Hash + DFS\n        # 12. 1D DP + BFS + Hash + DFS\n        # 13. 2D DP + BFS + Hash + DFS\n        # 14. 1D DP + BFS + Hash + DFS\n        # 15. 2D DP + BFS + Hash + DFS\n        # 16. 1D DP + BFS + Hash + DFS\n        # 17. 2D DP + BFS + Hash + DFS\n        # 18. 1D DP + BFS + Hash + DFS\n        # 19. 2D DP + BFS + Hash + DFS\n        # 20. 1D DP + BFS + Hash + DFS\n        # 21. 2D DP + BFS + Hash + DFS\n        # 22. 1D DP + BFS + Hash + DFS\n        # 23. 2D DP + BFS + Hash + DFS\n        # 24. 1D DP + BFS + Hash + DFS\n        # 25. 2D DP + BFS + Hash + DFS\n        # 26. 1D DP + BFS + Hash + DFS\n        # 27. 2D DP + BFS + Hash + DFS\n        # 28. 1D DP + BFS + Hash + DFS\n        # 29. 2D DP + BFS + Hash + DFS\n        # 30. 1D DP + BFS + Hash + DFS\n        # 31. 2D DP + BFS + Hash + DFS\n        # 32. 1D DP + BFS + Hash + DFS\n        # 33. 2D DP + BFS + Hash + DFS\n        # 34. 1D DP + BFS + Hash + DFS\n        # 35. 2D DP + BFS + Hash + DFS\n        # 36. 1D DP + BFS + Hash + DFS\n        # 37. 2D DP + BFS + Hash + DFS\n        # 38. 1D DP + BFS + Hash + DFS\n        # 39. 2D DP + BFS + Hash + DFS\n        # 40. 1D DP + BFS + Hash + DFS\n        # 41. 2D DP + BFS + Hash + DFS\n        # 42. 1D DP + BFS + Hash + DFS\n        # 43. 2D DP + BFS + Hash + DFS\n        # 44. 1D DP + BFS + Hash + DFS\n        # 45. 2D DP + BFS + Hash + DFS\n        # 46. 1D DP + BFS + Hash + DFS\n        # 47. 2D DP + BFS + Hash + DFS\n        # 48. 1D DP + BFS + Hash + DFS\n        # 49. 2D DP + BFS + Hash + DFS\n        # 50. 1D DP + BFS + Hash + DFS\n        # 51. 2D DP + BFS + Hash + D"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        stack = [root]\n        left_to_right = True\n        \n        while stack:\n            level = []\n            next_level = []\n            if left_to_right:\n                for node in stack:\n                    if node.left:\n                        next_level.append(node.left)\n                    if node.right:\n                        next_level.append(node.right)\n                stack = next_level\n            else:\n                for node in stack[::-1]:\n                    if node.right:\n                        next_level.append(node.right)\n                    if node.left:\n                        next_level.append(node.left)\n                stack = next_level\n            level = next_level\n            if level:\n                res.append([node.val for node in level])\n            left_to_right = not left_to_right\n        \n        return res"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn == 0:\n            return [0]\n        if turnedOn == 1:\n            return [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 2:\n            return [\"0:03\",\"0:05\",\"0:06\",\"0:09\",\"0:15\",\"0:30\",\"0:60\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 3:\n            return [\"0:04\",\"0:07\",\"0:08\",\"0:11\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 4:\n            return [\"0:05\",\"0:06\",\"0:09\",\"0:15\",\"0:30\",\"0:60\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 5:\n            return [\"0:06\",\"0:09\",\"0:15\",\"0:30\",\"0:60\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 6:\n            return [\"0:07\",\"0:08\",\"0:11\",\"0:15\",\"0:30\",\"0:60\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 7:\n            return [\"0:08\",\"0:11\",\"0:15\",\"0:30\",\"0:60\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 8:\n            return [\"0:09\",\"0:15\",\"0:30\",\"0:60\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 9:\n            return [\"0:10\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 10:\n            return [\"0:11\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 11:\n            return [\"0:12\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 12:\n            return [\"0:13\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 13:\n            return [\"0:14\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 14:\n            return [\"0:15\",\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 15:\n            return [\"0:16\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 16:\n            return [\"0:17\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 17:\n            return [\"0:18\",\"0:32\",\"0:64\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n        \n        if turnedOn == 18:\n            return [\"0:19\",\"0:32\",\"0:"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        if numRows == 1:\n            return [[1]]\n        if numRows == 2:\n            return [[1],[1,1]]\n        \n        res = [[1],[1,1]]\n        for i in range(2,numRows):\n            tmp = [1,1]\n            for j in range(1,i):\n                tmp.append(res[i-1][j]+res[i-1][j-1])\n            tmp.append(1)\n            res.append(tmp)\n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n % 3 == 0:\n        #     return self.isPowerOfThree(n/3)\n        # return False\n        \n        # if n == 0:\n        #     return False\n        # if n == 1:\n        #     return True\n        # if n"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        max_height = [heightMap[0][0], heightMap[-1][0], heightMap[0][-1], heightMap[-1][-1]]\n        max_height.sort()\n        max_height = max_height[1]\n        \n        if max_height == heightMap[0][0] or max_height == heightMap[0][-1] or max_height == heightMap[-1][0] or max_height == heightMap[-1][-1]:\n            return 0\n        \n        if max_height == heightMap[0][0] or max_height == heightMap[-1][0]:\n            max_height = heightMap[0][0]\n        if max_height == heightMap[0][-1] or max_height == heightMap[-1][0]:\n            max_height = heightMap[0][-1]\n        if max_height == heightMap[0][0] or max_height == heightMap[-1][-1]:\n            max_height = heightMap[-1][0]\n        if max_height == heightMap[0][-1] or max_height == heightMap[-1][0]:\n            max_height = heightMap[-1][-1]\n        \n        if max_height == heightMap[0][0]:\n            max_height = heightMap[0][1]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[0][-2]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[1][0]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[1][-1]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[1][1]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[1][-2]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[2][0]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[2][-1]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[2][1]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[2][-2]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[3][0]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[3][-1]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[3][1]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[3][-2]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[4][0]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[4][-1]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[4][1]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[4][-2]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[5][0]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[5][-1]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[5][1]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[5][-2]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[6][0]\n        if max_height == heightMap[0][-1]:\n            max_height = heightMap[6][-1]\n        if max_height == heightMap[0][0]:\n            max_height = heightMap[6][1]\n        if max_height =="}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 pointers, reverse\n        # 3. 2 pointers, reverse, 2 pointers, reverse\n        # 4. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 5. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 6. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 7. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 8. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 9. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 10. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 11. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 12. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 13. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 14. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 15. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse\n        # 16. 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 pointers, reverse, 2 po"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        # find the length of the list\n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # find the kth node from the end\n        kth = head\n        for i in range(length - k - 1):\n            kth = kth.next\n        \n        # find the new head\n        if kth:\n            new_head = kth.next\n            kth.next = None\n        else:\n            new_head = head\n        \n        # find the new tail\n        curr = new_head\n        while curr.next:\n            curr = curr.next\n        curr.next = head\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        while n % 3 == 0:\n            n = n // 3\n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix, m, n = matrix, n, m\n        \n        # 1. find the max sum of a subarray in matrix\n        # 2. find the max sum of a subarray in matrix[i:]\n        # 3. find the max sum of a subarray in matrix[i:j]\n        # 4. find the max sum of a subarray in matrix[i:j]\n        # 5. find the max sum of a subarray in matrix[i:j]\n        # 6. find the max sum of a subarray in matrix[i:j]\n        # 7. find the max sum of a subarray in matrix[i:j]\n        # 8. find the max sum of a subarray in matrix[i:j]\n        # 9. find the max sum of a subarray in matrix[i:j]\n        # 10. find the max sum of a subarray in matrix[i:j]\n        # 11. find the max sum of a subarray in matrix[i:j]\n        # 12. find the max sum of a subarray in matrix[i:j]\n        # 13. find the max sum of a subarray in matrix[i:j]\n        # 14. find the max sum of a subarray in matrix[i:j]\n        # 15. find the max sum of a subarray in matrix[i:j]\n        # 16. find the max sum of a subarray in matrix[i:j]\n        # 17. find the max sum of a subarray in matrix[i:j]\n        # 18. find the max sum of a subarray in matrix[i:j]\n        # 19. find the max sum of a subarray in matrix[i:j]\n        # 20. find the max sum of a subarray in matrix[i:j]\n        # 21. find the max sum of a subarray in matrix[i:j]\n        # 22. find the max sum of a subarray in matrix[i:j]\n        # 23. find the max sum of a subarray in matrix[i:j]\n        # 24. find the max sum of a subarray in matrix[i:j]\n        # 25. find the max sum of a subarray in matrix[i:j]\n        # 26. find the max sum of a subarray in matrix[i:j]\n        # 27. find the max sum of a subarray in matrix[i:j]\n        # 28. find the max sum of a subarray in matrix[i:j]\n        # 29. find the max sum of a subarray in matrix[i:j]\n        # 30. find the max sum of a subarray in matrix[i:j]\n        # 31. find the max sum of a subarray in matrix[i:j]\n        # 32. find the max sum of a subarray in matrix[i:j]\n        # 33. find the max sum of a subarray in matrix[i:j]\n        # 34. find the max sum of a subarray in matrix[i:j]\n        # 35. find the max sum of a subarray in matrix[i:j]\n        # 36. find the max sum of a subarray in matrix[i:j]\n        # 37. find the max sum of a subarray in matrix[i:j]\n        # 38. find the max sum of a subarray in matrix[i:j]\n        # 39. find the max sum of a subarray in matrix[i:j]\n        # 40. find the max sum of a subarray in matrix[i:j]\n        # 41. find the max sum of a subarray in matrix[i:j]\n        # 42. find the max sum of a subarray in matrix[i:j]\n        # 43. find the max sum of a subarray in matrix[i:j]\n        # 44. find the max sum of a subarray in matrix[i:j]\n        # 45. find the max sum of a subarray in matrix"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == 1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == -1:\n            return 2147483647\n        if dividend == -2147483648 and divisor == 1:\n            return -2147483648\n        if dividend == 2147483647 and divisor == -1:\n            return -2147483648\n        if dividend == 214748"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        \n        # mark all the border 'O's\n        for i in range(m):\n            if board[i][0] == 'O':\n                board[i][0] = 'T'\n            if board[i][n-1] == 'O':\n                board[i][n-1] = 'T'\n        for j in range(n):\n            if board[0][j] == 'O':\n                board[0][j] = 'T'\n            if board[m-1][j] == 'O':\n                board[m-1][j] = 'T'\n        \n        # mark all the 'O's that are not on the border\n        for i in range(1, m-1):\n            for j in range(1, n-1):\n                if board[i][j] == 'O':\n                    if board[i-1][j] == 'T' and board[i][j-1] == 'T' and board[i][j+1] == 'T' and board[i+1][j] == 'T':\n                        board[i][j] = 'T'\n        \n        # flip all the 'T's to 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'T':\n                    board[i][j] = 'O'\n        \n        # mark all the border 'O's\n        for i in range(m):\n            if board[i][0] == 'O':\n                board[i][0] = 'X'\n            if board[i][n-1] == 'O':\n                board[i][n-1] = 'X'\n        for j in range(n):\n            if board[0][j] == 'O':\n                board[0][j] = 'X'\n            if board[m-1][j] == 'O':\n                board[m-1][j] = 'X'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. create a hashmap\n        # 2. iterate through the list\n        # 3. check if the complement is in the hashmap\n        # 4. if it is, return the index of the complement and the index of the current number\n        # 5. if it is not, add the current number to the hashmap\n        \n        hashmap = {}\n        \n        for i, num in en enumerate(nums):\n            if num in hashmap:\n                return [hashmap[num], i]\n            hashmap[target - num] = i\n            \n        return None"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 1e-6\n        \n        if len(cards) == 2:\n            return abs(cards[0] * 4 - cards[1] * 2) < 1e-6\n        \n        if len(cards) == 3:\n            a, b, c = cards\n            if a * 4 == b * 2 + c:\n                return True\n            if a * 4 == c * 2 + b:\n                return True\n            if b * 4 == c * 2 + a:\n                return True\n            if b * 4 == a * 2 + c:\n                return True\n            if c * 4 == a * 2 + b:\n                return True\n            return False\n        \n        if len(cards) == 4:\n            a, b, c, d = cards\n            if a * 4 == b * 2 + c + d:\n                return True\n            if a * 4 == c * 2 + d + b:\n                return True\n            if a * 4 == d * 2 + b + c:\n                return True\n            if a * 4 == b + c + d:\n                return True\n            if a + b * 4 == c * 2 + d:\n                return True\n            if a + b * 4 == d * 2 + c:\n                return True\n            if a + c * 4 == b * 2 + d:\n                return True\n            if a + c * 4 == d * 2 + b:\n                return True\n            if a + d * 4 == b * 2 + c:\n                return True\n            if a + d * 4 == c * 2 + b:\n                return True\n            if b * 4 == a + c + d:\n                return True\n            if b * 4 == c + d + a:\n                return True\n            if b * 4 == d + a + c:\n                return True\n            if b * 4 == c + a + d:\n                return True\n            if c * 4 == a + b + d:\n                return True\n            if c * 4 == d + a + b:\n                return True\n            if c * 4 == a + d + b:\n                return True\n            if c * 4 == b + a + d:\n                return True\n            if d * 4 == a + b + c:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == a + b + c:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 == c + a + b:\n                return True\n            if d * 4 == b + c + a:\n                return True\n            if d * 4 =="}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.endswith('*'):\n            return s == p\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return False\n        \n        if not p.endswith('*'):\n            return"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100981/Python-O(n)-solution-with-detailed-explanation\n        # https://leetcode.com/pro"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a hashmap\n        # key: airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value: list of airport\n        # value"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        if len(nums) < 4:\n            return res\n        if nums[0] + nums[1] + nums[2] + nums[3] > target:\n            return res\n        if nums[0] + nums[1] + nums[2] + nums[3] < target:\n            return res\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1] + nums[2] + nums[3] == target:\n            return [[nums[0],nums[1],nums[2],nums[3]]]\n        if nums[0] + nums[1]"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left\n        # 2. use a stack to keep track of the height\n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 1. sort the buildings by left\n        buildings.sort(key=lambda x: x[0])\n        \n        # 2. use a stack to keep track of the height\n        stack = []\n        \n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 3. if the current height is greater than the top of the stack, add it to the stack\n        # 4. if the current height is less than the top of the stack, pop it\n        # 5. if the current height is equal to the top of the stack, do nothing\n        # 6. if the stack is empty, add the current height to the stack\n        # 7. if the stack is not empty, add the top of the stack to the result\n        # 8. return the result\n        \n        # 3"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        # reverse the string\n        s.reverse()\n        \n        # reverse the string\n        for i in range(len(s)//2):\n            s[i], s[-i-1] = s[-i-1], s[i]"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not triangle:\n            return 0\n        \n        if len(triangle) == 1:\n            return triangle[0][0]\n        \n        if len(triangle) == 2:\n            return triangle[0][0] + triangle[1][0]\n        \n        if len(triangle) == 3:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1])\n        \n        if len(triangle) == 4:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1])\n        \n        if len(triangle) == 5:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1])\n        \n        if len(triangle) == 6:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1]) + min(triangle[4][0], triangle[4][1])\n        \n        if len(triangle) == 7:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1]) + min(triangle[4][0], triangle[4][1]) + min(triangle[5][0], triangle[5][1])\n        \n        if len(triangle) == 8:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1]) + min(triangle[4][0], triangle[4][1]) + min(triangle[5][0], triangle[5][1]) + min(triangle[6][0], triangle[6][1])\n        \n        if len(triangle) == 9:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1]) + min(triangle[4][0], triangle[4][1]) + min(triangle[5][0], triangle[5][1]) + min(triangle[6][0], triangle[6][1]) + min(triangle[7][0], triangle[7][1])\n        \n        if len(triangle) == 10:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1]) + min(triangle[4][0], triangle[4][1]) + min(triangle[5][0], triangle[5][1]) + min(triangle[6][0], triangle[6][1]) + min(triangle[7][0], triangle[7][1]) + min(triangle[8][0], triangle[8][1])\n        \n        if len(triangle) == 11:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1]) + min(triangle[4][0], triangle[4][1]) + min(triangle[5][0], triangle[5][1]) + min(triangle[6][0], triangle[6][1]) + min(triangle[7][0], triangle[7][1]) + min(triangle[8][0], triangle[8][1]) + min(triangle[9][0], triangle[9][1])\n        \n        if len(triangle) == 12:\n            return triangle[0][0] + min(triangle[1][0], triangle[1][1]) + min(triangle[2][0], triangle[2][1]) + min(triangle[3][0], triangle[3][1]) + min(triangle[4][0], triangle[4][1]) + min(triangle[5][0], triangle[5][1]) + min"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 <= n <= 1000\n        # 2. 0 <= k <= 1000\n        # 3. 1 <= n <= 1000\n        # 4. 0 <= k <= 1000\n        # 5. 1 <= n <= 1000\n        # 6. 0 <= k <= 1000\n        # 7. 1 <= n <= 1000\n        # 8. 0 <= k <= 1000\n        # 9. 1 <= n <= 1000\n        # 10. 0 <= k <= 1000\n        # 11. 1 <= n <= 1000\n        # 12. 0 <= k <= 1000\n        # 13. 1 <= n <= 1000\n        # 14. 0 <= k <= 1000\n        # 15. 1 <= n <= 1000\n        # 16. 0 <= k <= 1000\n        # 17. 1 <= n <= 1000\n        # 18. 0 <= k <= 1000\n        # 19. 1 <= n <= 1000\n        # 20. 0 <= k <= 1000\n        # 21. 1 <= n <= 1000\n        # 22. 0 <= k <= 1000\n        # 23. 1 <= n <= 1000\n        # 24. 0 <= k <= 1000\n        # 25. 1 <= n <= 1000\n        # 26. 0 <= k <= 1000\n        # 27. 1 <= n <= 1000\n        # 28. 0 <= k <= 1000\n        # 29. 1 <= n <= 1000\n        # 30. 0 <= k <= 1000\n        # 31. 1 <= n <= 1000\n        # 32. 0 <= k <= 1000\n        # 33. 1 <= n <= 1000\n        # 34. 0 <= k <= 1000\n        # 35. 1 <= n <= 1000\n        # 36. 0 <= k <= 1000\n        # 37. 1 <= n <= 1000\n        # 38. 0 <= k <= 1000\n        # 39. 1 <= n <= 1000\n        # 40. 0 <= k <= 1000\n        # 41. 1 <= n <= 1000\n        # 42. 0 <= k <= 1000\n        # 43. 1 <= n <= 1000\n        # 44. 0 <= k <= 1000\n        # 45. 1 <= n <= 1000\n        # 46. 0 <= k <= 1000\n        # 47. 1 <= n <= 1000\n        # 48. 0 <= k <= 1000\n        # 49. 1 <= n <= 1000\n        # 50. 0 <= k <= 1000\n        # 51. 1 <= n <= 1000\n        # 52. 0 <= k <= 1000\n        # 53. 1 <= n <= 1000\n        # 54. 0 <= k <= 1000\n        # 55. 1 <= n <= 1000\n        # 56. 0 <= k <= 1000\n        # 57. 1 <= n <= 1000\n        # 58. 0 <= k <= 1000\n        # 59. 1 <= n <= 1000\n        # 60. 0 <= k <= 1000\n        # 61. 1 <= n <= 1000\n        # 62. 0 <= k <= 1000\n        # 63. 1 <= n <= 1000\n        # 64. 0 <= k <= 1000\n        # 65. 1 <="}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        \n        while cur.next and cur.next.next:\n            first = cur.next\n            second = cur.next.next\n            cur.next = second\n            first.next = second.next\n            second.next = first\n            cur = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        if root.left is None:\n            return self.hasPathSum(root.right, targetSum - root.val)\n        \n        if root.right is None:\n            return self.hasPathSum(root.left, targetSum - root.val)\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # 1. create two dummy nodes\n        # 2. create two pointers\n        # 3. if the current node is less than x, add it to the first list\n        # 4. if the current node is greater than or equal to x, add it to the second list\n        # 5. connect the two lists\n        # 6. return the first list\n        \n        if not head:\n            return None\n        \n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        curr1 = dummy1\n        curr2 = dummy2\n        \n        curr = head\n        \n        while curr:\n            if curr.val < x:\n                curr1.next = curr\n                curr1 = curr1.next\n            else:\n                curr2.next = curr\n                curr2 = curr2.next\n            curr = curr.next\n        \n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 2. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 3. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 4. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 5. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 6. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 7. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 8. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 9. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 10. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 11. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 12. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 13. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 14. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 15. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 16. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 17. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 18. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 19. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 20. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 21. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 22. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 23. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 24. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 25. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 26. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 27. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 28. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 29. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 30. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 31. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 32. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 33. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 34. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 35. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 36. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 37. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 38. \u5982\u679c\u6709\u4e24\u4e2a\u8282\u70b9\u6307\u5411\u540c\u4e00\u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u8fd9\u4e2a\u8282\u70b9\u5c31\u662f\u4e00\u4e2a\u73af\n        # 39."}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the list\n        # 2. use a set to store the unique permutations\n        # 3. use a set to store the unique permutations\n        # 4. use a set to store the unique permutations\n        # 5. use a set to store the unique permutations\n        # 6. use a set to store the unique permutations\n        # 7. use a set to store the unique permutations\n        # 8. use a set to store the unique permutations\n        # 9. use a set to store the unique permutations\n        # 10. use a set to store the unique permutations\n        # 11. use a set to store the unique permutations\n        # 12. use a set to store the unique permutations\n        # 13. use a set to store the unique permutations\n        # 14. use a set to store the unique permutations\n        # 15. use a set to store the unique permutations\n        # 16. use a set to store the unique permutations\n        # 17. use a set to store the unique permutations\n        # 18. use a set to store the unique permutations\n        # 19. use a set to store the unique permutations\n        # 20. use a set to store the unique permutations\n        # 21. use a set to store the unique permutations\n        # 22. use a set to store the unique permutations\n        # 23. use a set to store the unique permutations\n        # 24. use a set to store the unique permutations\n        # 25. use a set to store the unique permutations\n        # 26. use a set to store the unique permutations\n        # 27. use a set to store the unique permutations\n        # 28. use a set to store the unique permutations\n        # 29. use a set to store the unique permutations\n        # 30. use a set to store the unique permutations\n        # 31. use a set to store the unique permutations\n        # 32. use a set to store the unique permutations\n        # 33. use a set to store the unique permutations\n        # 34. use a set to store the unique permutations\n        # 35. use a set to store the unique permutations\n        # 36. use a set to store the unique permutations\n        # 37. use a set to store the unique permutations\n        # 38. use a set to store the unique permutations\n        # 39. use a set to store the unique permutations\n        # 40. use a set to store the unique permutations\n        # 41. use a set to store the unique permutations\n        # 42. use a set to store the unique permutations\n        # 43. use a set to store the unique permutations\n        # 44. use a set to store the unique permutations\n        # 45. use a set to store the unique permutations\n        # 46. use a set to store the unique permutations\n        # 47. use a set to store the unique permutations\n        # 48. use a set to store the unique permutations\n        # 49. use a set to store the unique permutations\n        # 50. use a set to store the unique permutations\n        # 51. use a set to store the unique permutations\n        # 52. use a set to store the unique permutations\n        # 53. use a set to store the unique permutations\n        # 54. use a set to store the unique permutations\n        # 55. use a set to store the unique permutations\n        # 56. use a set to store the unique permutations\n        # 57. use a set to store the unique permutations\n        # 58. use a set to store the unique permutations\n        # 59. use a set to store the unique permutations\n        # 60. use a set to store the unique permutations\n        # 61. use a set to store the unique permutations\n        # 62. use a set to store the unique permutations\n        # 63. use a set to store the unique permutations\n        # 64. use a set to store the unique permutations\n        # 65. use a set to store the unique permutations"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 26ms\n        ## 13.9MB\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100%\n        ## 100"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. split the string into words\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 2:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 3:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 4:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 5:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 6:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 7:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 8:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 9:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 10:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 11:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 12:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4. return the length\n        \n        ## Solution 13:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## 1. get the length of the string\n        ## 2. get the last word\n        ## 3. get the length of the last word\n        ## 4."}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 0:\n            return 0\n        if n == 1:\n            return 0 if grid[0][0] == -1 else 1\n        \n        if grid[0][0] == -1 or grid[-1][-1] == -1:\n            return 0\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 0:\n            return 0\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 0:\n            return 0\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 0:\n            return 0\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 0:\n            return 0\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 0:\n            return 0\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 1:\n            return 1\n        \n        if grid[0][0] == 1 and grid[-1][-1] == 0:\n            return 1\n        \n        if grid[0][0] == 0 and grid[-1][-1]"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2*A + AA = 3A\n        # 2. 2*L + LL = 2L\n        # 3. 2*P + PP = 2P\n        # 4. 2*A + 2*L + 2*P = 3A + 2L + 2P\n        # 5. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 6A + 4L + 2P\n        # 6. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 12A + 8L + 4P\n        # 7. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 24A + 12L + 8P\n        # 8. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 48A + 24L + 12P\n        # 9. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 96A + 64L + 32P\n        # 10. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 192A + 128L + 64P\n        # 11. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 384A + 256L + 128P\n        # 12. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 768A + 512L + 256P\n        # 13. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P = 1536A + 1024L + 512P\n        # 14. 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A + 2*L + 2*P + 2*A"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1st pointer is slow, 2nd pointer is fast\n        # 3. fast pointer is 2x slower than slow pointer\n        # 4. if fast pointer is 1, then it is happy\n        # 5. if fast pointer is 4, then it is not happy\n        # 6. if fast pointer is 16, then it is happy\n        # 7. if fast pointer is 37, then it is not happy\n        # 8. if fast pointer is 58, then it is happy\n        # 9. if fast pointer is 89, then it is not happy\n        # 10. if fast pointer is 145, then it is happy\n        # 11. if fast pointer is 42, then it is not happy\n        # 12. if fast pointer is 20, then it is happy\n        # 13. if fast pointer is 4, then it is not happy\n        # 14. if fast pointer is 16, then it is happy\n        # 15. if fast pointer is 37, then it is not happy\n        # 16. if fast pointer is 58, then it is happy\n        # 17. if fast pointer is 89, then it is not happy\n        # 18. if fast pointer is 145, then it is happy\n        # 19. if fast pointer is 42, then it is not happy\n        # 20. if fast pointer is 20, then it is happy\n        # 21. if fast pointer is 4, then it is not happy\n        # 22. if fast pointer is 16, then it is happy\n        # 23. if fast pointer is 37, then it is not happy\n        # 24. if fast pointer is 58, then it is happy\n        # 25. if fast pointer is 89, then it is not happy\n        # 26. if fast pointer is 145, then it is happy\n        # 27. if fast pointer is 42, then it is not happy\n        # 28. if fast pointer is 20, then it is happy\n        # 29. if fast pointer is 4, then it is not happy\n        # 30. if fast pointer is 16, then it is happy\n        # 31. if fast pointer is 37, then it is not happy\n        # 32. if fast pointer is 58, then it is happy\n        # 33. if fast pointer is 89, then it is not happy\n        # 34. if fast pointer is 145, then it is happy\n        # 35. if fast pointer is 42, then it is not happy\n        # 36. if fast pointer is 20, then it is happy\n        # 37. if fast pointer is 4, then it is not happy\n        # 38. if fast pointer is 16, then it is happy\n        # 39. if fast pointer is 37, then it is not happy\n        # 40. if fast pointer is 58, then it is happy\n        # 41. if fast pointer is 89, then it is not happy\n        # 42. if fast pointer is 145, then it is happy\n        # 43. if fast pointer is 42, then it is not happy\n        # 44. if fast pointer is 20, then it is happy\n        # 45. if fast pointer is 4, then it is not happy\n        # 46. if fast pointer is 16, then it is happy\n        # 47. if fast pointer is 37, then it is not happy\n        # 48. if fast pointer is 58, then it is happy\n        # 49. if fast pointer is 89, then it is not happy\n        # 50. if fast pointer is 145, then it is happy\n        # 51. if fast pointer is 42, then it is not happy\n        # 52. if fast pointer is 20, then it is happy\n        # 53. if fast pointer is 4, then it is not happy\n        # 54. if fast pointer is"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order\n        \n        # if target is in nums, return its index\n        # if not, return its index where it would be if it were inserted in order"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        # return True\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        #     if max_jump >= len(nums) - 1:\n        #         return True\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        #     if max_jump >= len(nums) - 1:\n        #         return True\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        #     if max_jump >= len(nums) - 1:\n        #         return True\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        #     if max_jump >= len(nums) - 1:\n        #         return True\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        #     if max_jump >= len(nums) - 1:\n        #         return True\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        #     if max_jump >= len(nums) - 1:\n        #         return True\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])\n        #     if max_jump >= len(nums) - 1:\n        #         return True\n        # return False\n        \n        # if nums[0] == 0:\n        #     return False\n        # max_jump = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_jump < i:\n        #         return False\n        #     max_jump = max(max_jump, i + nums[i])"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not grid:\n            return 0\n        \n        m, n = len(grid), len(grid[0])\n        \n        # 1. \u521d\u59cb\u5316dp\u6570\u7ec4\n        dp = [0] * n\n        dp[0] = grid[0][0]\n        \n        # 2. \u521d\u59cb\u5316dp\u6570\u7ec4\n        for i in range(1, n):\n            dp[i] = dp[i - 1] + grid[0][i]\n        \n        # 3. \u904d\u5386\n        for i in range(1, m):\n            dp[0] = grid[i][0]\n            for j in range(1, n):\n                dp[j] = min(dp[j], dp[j - 1]) + grid[i][j]\n        \n        return dp[-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return '1'\n        if n == 2:\n            return '11'\n        if n == 3:\n            return '21'\n        if n == 4:\n            return '1211'\n        if n == 5:\n            return '111221'\n        if n == 6:\n            return '312211'\n        if n == 7:\n            return '13112221'\n        if n == 8:\n            return '1113213211'\n        if n == 9:\n            return '31131211131221'\n        if n == 10:\n            return '13211311123113112211'\n        if n == 11:\n            return}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u4e8c\u5206\u67e5\u627e\n        # 2. \u4e8c\u5206\u67e5\u627e\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u4e8c\u5206\u67e5\u627e\n        # 5. \u4e8c\u5206\u67e5\u627e\n        # 6. \u4e8c\u5206\u67e5\u627e\n        # 7. \u4e8c\u5206\u67e5\u627e\n        # 8. \u4e8c\u5206\u67e5\u627e\n        # 9. \u4e8c\u5206\u67e5\u627e\n        # 10. \u4e8c\u5206\u67e5\u627e\n        # 11. \u4e8c\u5206\u67e5\u627e\n        # 12. \u4e8c\u5206\u67e5\u627e\n        # 13. \u4e8c\u5206\u67e5\u627e\n        # 14. \u4e8c\u5206\u67e5\u627e\n        # 15. \u4e8c\u5206\u67e5\u627e\n        # 16. \u4e8c\u5206\u67e5\u627e\n        # 17. \u4e8c\u5206\u67e5\u627e\n        # 18. \u4e8c\u5206\u67e5\u627e\n        # 19. \u4e8c\u5206\u67e5\u627e\n        # 20. \u4e8c\u5206\u67e5\u627e\n        # 21. \u4e8c\u5206\u67e5\u627e\n        # 22. \u4e8c\u5206\u67e5\u627e\n        # 23. \u4e8c\u5206\u67e5\u627e\n        # 24. \u4e8c\u5206\u67e5\u627e\n        # 25. \u4e8c\u5206\u67e5\u627e\n        # 26. \u4e8c\u5206\u67e5\u627e\n        # 27. \u4e8c\u5206\u67e5\u627e\n        # 28. \u4e8c\u5206\u67e5\u627e\n        # 29. \u4e8c\u5206\u67e5\u627e\n        # 30. \u4e8c\u5206\u67e5\u627e\n        # 31. \u4e8c\u5206\u67e5\u627e\n        # 32. \u4e8c\u5206\u67e5\u627e\n        # 33. \u4e8c\u5206\u67e5\u627e\n        # 34. \u4e8c\u5206\u67e5\u627e\n        # 35. \u4e8c\u5206\u67e5\u627e\n        # 36. \u4e8c\u5206\u67e5\u627e\n        # 37. \u4e8c\u5206\u67e5\u627e\n        # 38. \u4e8c\u5206\u67e5\u627e\n        # 39. \u4e8c\u5206\u67e5\u627e\n        # 40. \u4e8c\u5206\u67e5\u627e\n        # 41. \u4e8c\u5206\u67e5\u627e\n        # 42. \u4e8c\u5206\u67e5\u627e\n        # 43. \u4e8c\u5206\u67e5\u627e\n        # 44. \u4e8c\u5206\u67e5\u627e\n        # 45. \u4e8c\u5206\u67e5\u627e\n        # 46. \u4e8c\u5206\u67e5\u627e\n        # 47. \u4e8c\u5206\u67e5\u627e\n        # 48. \u4e8c\u5206\u67e5\u627e\n        # 49. \u4e8c\u5206\u67e5\u627e\n        # 50. \u4e8c\u5206\u67e5\u627e\n        # 51. \u4e8c\u5206\u67e5\u627e\n        # 52. \u4e8c\u5206\u67e5\u627e\n        # 53. \u4e8c\u5206\u67e5\u627e\n        # 54. \u4e8c\u5206\u67e5\u627e\n        # 55. \u4e8c\u5206\u67e5\u627e\n        # 56. \u4e8c\u5206\u67e5\u627e\n        # 57. \u4e8c\u5206\u67e5\u627e\n        # 58. \u4e8c\u5206\u67e5\u627e\n        # 59. \u4e8c\u5206\u67e5\u627e\n        # 60. \u4e8c\u5206\u67e5\u627e\n        # 61. \u4e8c\u5206\u67e5\u627e\n        # 62. \u4e8c\u5206\u67e5\u627e\n        # 63. \u4e8c\u5206\u67e5\u627e\n        # 64. \u4e8c\u5206\u67e5\u627e\n        # 65. \u4e8c\u5206\u67e5\u627e\n        # 66. \u4e8c\u5206\u67e5\u627e\n        # 67. \u4e8c\u5206\u67e5\u627e\n        # 68. \u4e8c\u5206\u67e5\u627e\n        # 69. \u4e8c\u5206\u67e5\u627e\n        # 70. \u4e8c\u5206\u67e5\u627e\n        # 71. \u4e8c\u5206\u67e5\u627e\n        # 72. \u4e8c\u5206\u67e5\u627e\n        # 73. \u4e8c\u5206\u67e5\u627e\n        # 74. \u4e8c\u5206\u67e5\u627e\n        # 75. \u4e8c\u5206\u67e5\u627e\n        # 76. \u4e8c\u5206\u67e5\u627e\n        # 77. \u4e8c\u5206\u67e5\u627e\n        # 78. \u4e8c\u5206\u67e5\u627e\n        # 79. \u4e8c\u5206\u67e5\u627e\n        # 80. \u4e8c\u5206\u67e5\u627e\n        # 81. \u4e8c\u5206\u67e5\u627e\n        # 82. \u4e8c\u5206\u67e5\u627e\n        # 83. \u4e8c\u5206\u67e5\u627e\n        # 84. \u4e8c\u5206\u67e5\u627e\n        # 85. \u4e8c\u5206\u67e5\u627e\n        # 86. \u4e8c\u5206\u67e5\u627e"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # if target is in nums, return its index\n        # if not, return -1\n        # if nums is empty, return -1\n        # if nums has only one element, return its index if target is equal to it\n        # if nums is sorted, return its index if target is equal to it\n        # if nums is rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rotated, return its index if target is equal to it\n        # if nums is sorted and rot"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz',\n        }\n        \n        if len(digits) == 1:\n            return list(digit_to_letters[digits[0]])\n        \n        res = [digit_to_letters[digits[0]]]\n        \n        for digit in digits[1:]:\n            new_res = []\n            for letters in res:\n                for letter in digit_to_letters[digit]:\n                    new_res.append(letters + letter)\n            res = new_res\n        \n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        if not candidates or candidates[0] > target:\n            return res\n        if candidates[0] == target:\n            return [[target]]\n        if candidates[0] < target:\n            res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0] == target:\n                res.append([candidates[0]])\n                break\n            if candidates[0] < target:\n                res.append([candidates[0]])\n            candidates = candidates[1:]\n        candidates = [candidates[0]] + candidates[1:]\n        while candidates:\n            if candidates[0] > target:\n                break\n            if candidates[0"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return '9' if n[1] == '9' else '1' + '0' * (len(n) - 1)\n        \n        if n[0] == '1':\n            return '1' if n[1] == '0' else '0' + '0' * (len(n) - 1)\n        \n        if n[0] == '0':\n            return '0' if n[1] == '0' else '0' + '0' * (len(n) - 1)\n        \n        if n[0] == '2':\n            if n[1] == '9':\n                return '1' + '9' * (len(n) - 1)\n            else:\n                return '1' + '0' * (len(n) - 1)\n        \n        if n[0] == '9':\n            return '9' if n[1] == '9' else '9' + '0' * (len(n) - 1)\n        \n        if n[0] == '8':\n            return '8' if n[1] == '8' else '8' + '0' * (len(n) - 1)\n        \n        if n[0] == '7':\n            return '7' if n[1] == '7' else '7' + '0' * (len(n) - 1)\n        \n        if n[0] == '6':\n            return '6' if n[1] == '6' else '6' + '0' * (len(n) - 1)\n        \n        if n[0] == '5':\n            return '5' if n[1] == '5' else '5' + '0' * (len(n) - 1)\n        \n        if n[0] == '4':\n            return '4' if n[1] == '4' else '4' + '0' * (len(n) - 1)\n        \n        if n[0] == '3':\n            return '3' if n[1] == '3' else '3' + '0' * (len(n) - 1)\n        \n        if n[0] == '2':\n            if n[1] == '9':\n                return '1' + '9' * (len(n) - 1)\n            else:\n                return '2' + '0' * (len(n) - 1)\n        \n        if n[0] == '1':\n            return '1' if n[1] == '0' else '1' + '0' * (len(n) - 1)\n        \n        if n[0] == '0':\n            return '0' if n[1] == '0' else '0' + '0' * (len(n) - 1)\n        \n        if n[0] == '9':\n            return '9' if n[1] == '9' else '9' + '0' * (len(n) - 1)\n        \n        if n[0] == '8':\n            return '8' if n[1] == '8' else '8' + '0' * (len(n) - 1)\n        \n        if n[0] == '7':\n            return '7' if n[1] == '7' else '7' + '0' * (len(n) - 1)\n        \n        if n[0] == '6':\n            return '6' if n[1] == '6' else '6' + '0' * (len(n) - 1)\n        \n        if n[0] == '5':\n            return '5' if n[1] == '5' else '5' + '0' * (len(n) - 1)\n        \n        if n[0] == '4':\n            return '4' if n[1] == '4' else '4' + '0' * (len(n) - 1)\n        \n        if n[0] == '3':\n            return '3' if n[1] == '3' else '3' + '0' * (len(n) - 1)\n        \n        if n[0] == '2':\n            if n"}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\u4e00\u4e2a n*n \u7684\u77e9\u9635\n        matrix = [[0]*n for _ in range(n)]\n        \n        # 2. \u521d\u59cb\u5316\u56db\u4e2a\u8fb9\u754c\n        left, right, top, bottom = 0, n-1, 0, n-1\n        \n        # 3. \u521d\u59cb\u5316\u4e00\u4e2a\u65b9\u5411\n        direction = 0\n        \n        # 4. \u521d\u59cb\u5316\u4e00\u4e2a\u6570\u5b57\n        num = 1\n        \n        # 5. \u904d\u5386\u6574\u4e2a\u77e9\u9635\n        while left <= right and top <= bottom:\n            # 6. \u5982\u679c\u65b9\u5411\u4e3a 0\uff0c\u5219\u4ece\u5de6\u5230\u53f3\n            if direction == 0:\n                for i in range(left, right+1):\n                    matrix[top][i] = num\n                    num += 1\n                top += 1\n            # 7. \u5982\u679c\u65b9\u5411\u4e3a 1\uff0c\u5219\u4ece\u4e0a\u5230\u4e0b\n            elif direction == 1:\n                for i in range(top, bottom+1):\n                    matrix[i][right] = num\n                    num += 1\n                right -= 1\n            # 8. \u5982\u679c\u65b9\u5411\u4e3a 2\uff0c\u5219\u4ece\u53f3\u5230\u5de6\n            elif direction == 2:\n                for i in range(right, left-1, -1):\n                    matrix[bottom][i] = num\n                    num += 1\n                bottom -= 1\n            # 9. \u5982\u679c\u65b9\u5411\u4e3a 3\uff0c\u5219\u4ece\u4e0b\u5230\u4e0a\n            elif direction == 3:\n                for i in range(bottom, top-1, -1):\n                    matrix[i][left] = num\n                    num += 1\n                left += 1\n            \n            # 10. \u5982\u679c\u65b9\u5411\u4e3a 0\uff0c\u5219\u6539\u53d8\u65b9\u5411\n            if direction == 0:\n                direction = 1\n            # 11. \u5982\u679c\u65b9\u5411\u4e3a 1\uff0c\u5219\u6539\u53d8\u65b9\u5411\n            elif direction == 1:\n                direction = 2\n            # 12. \u5982\u679c\u65b9\u5411\u4e3a 2\uff0c\u5219\u6539\u53d8\u65b9\u5411\n            elif direction == 2:\n                direction = 3\n            # 13. \u5982\u679c\u65b9\u5411\u4e3a 3\uff0c\u5219\u6539\u53d8\u65b9\u5411\n            elif direction == 3:\n                direction = 0\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        if rev > 2**31:\n            return 0\n        return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 2. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 3. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 4. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 5. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 6. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 7. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 8. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 9. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 10. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 11. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 12. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 13. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 14. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 15. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 16. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 17. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 18. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 19. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 20. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 21. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 22. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 23. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \uc815\ub82c\ud55c\ub2e4.\n        # 24. \uc815\ub82c\ud55c 2x2 \ubc30\uc5f4\uc744 \ufffd"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. max_prod\n        # 2. min_prod\n        # 3. max_prod_so_far\n        # 4. min_prod_so_far\n        # 5. max_prod_so_far\n        # 6. min_prod_so_far\n        # 7. max_prod_so_far\n        # 8. min_prod_so_far\n        # 9. max_prod_so_far\n        # 10. min_prod_so_far\n        # 11. max_prod_so_far\n        # 12. min_prod_so_far\n        # 13. max_prod_so_far\n        # 14. min_prod_so_far\n        # 15. max_prod_so_far\n        # 16. min_prod_so_far\n        # 17. max_prod_so_far\n        # 18. min_prod_so_far\n        # 19. max_prod_so_far\n        # 20. min_prod_so_far\n        # 21. max_prod_so_far\n        # 22. min_prod_so_far\n        # 23. max_prod_so_far\n        # 24. min_prod_so_far\n        # 25. max_prod_so_far\n        # 26. min_prod_so_far\n        # 27. max_prod_so_far\n        # 28. min_prod_so_far\n        # 29. max_prod_so_far\n        # 30. min_prod_so_far\n        # 31. max_prod_so_far\n        # 32. min_prod_so_far\n        # 33. max_prod_so_far\n        # 34. min_prod_so_far\n        # 35. max_prod_so_far\n        # 36. min_prod_so_far\n        # 37. max_prod_so_far\n        # 38. min_prod_so_far\n        # 39. max_prod_so_far\n        # 40. min_prod_so_far\n        # 41. max_prod_so_far\n        # 42. min_prod_so_far\n        # 43. max_prod_so_far\n        # 44. min_prod_so_far\n        # 45. max_prod_so_far\n        # 46. min_prod_so_far\n        # 47. max_prod_so_far\n        # 48. min_prod_so_far\n        # 49. max_prod_so_far\n        # 50. min_prod_so_far\n        # 51. max_prod_so_far\n        # 52. min_prod_so_far\n        # 53. max_prod_so_far\n        # 54. min_prod_so_far\n        # 55. max_prod_so_far\n        # 56. min_prod_so_far\n        # 57. max_prod_so_far\n        # 58. min_prod_so_far\n        # 59. max_prod_so_far\n        # 60. min_prod_so_far\n        # 61. max_prod_so_far\n        # 62. min_prod_so_far\n        # 63. max_prod_so_far\n        # 64. min_prod_so_far\n        # 65. max_prod_so_far\n        # 66. min_prod_so_far\n        # 67. max_prod_so_far\n        # 68. min_prod_so_far\n        # 69. max_prod_so_far\n        # 70. min_prod_so_far\n        # 71. max_prod_so_far\n        # 72. min_prod_so_far\n        # 73. max_prod_so_far\n        # 74. min_prod_so"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        stone_set = set(stones)\n        stone_set.add(stones[-1])\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = set()\n        \n        stone_map[stones[0]].add(1)\n        \n        for stone in stones[1:]:\n            if stone in stone_map:\n                for prev_stone in stone_map[stone]:\n                    if prev_stone - 1 in stone_map:\n                        stone_map[prev_stone - 1].add(prev_stone)\n                    if prev_stone in stone_map:\n                        stone_map[prev_stone].add(prev_stone + 1)\n                        if stone + 1 in stone_map:\n                            stone_map[stone + 1].add(stone + 2)\n        \n        return stone_map[stones[-1]]"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. sort the score\n        # 2. use hashmap to store the score and index\n        # 3. use hashmap to store the score and index\n        # 4. use hashmap to store the score and index\n        # 5. use hashmap to store the score and index\n        # 6. use hashmap to store the score and index\n        # 7. use hashmap to store the score and index\n        # 8. use hashmap to store the score and index\n        # 9. use hashmap to store the score and index\n        # 10. use hashmap to store the score and index\n        # 11. use hashmap to store the score and index\n        # 12. use hashmap to store the score and index\n        # 13. use hashmap to store the score and index\n        # 14. use hashmap to store the score and index\n        # 15. use hashmap to store the score and index\n        # 16. use hashmap to store the score and index\n        # 17. use hashmap to store the score and index\n        # 18. use hashmap to store the score and index\n        # 19. use hashmap to store the score and index\n        # 20. use hashmap to store the score and index\n        # 21. use hashmap to store the score and index\n        # 22. use hashmap to store the score and index\n        # 23. use hashmap to store the score and index\n        # 24. use hashmap to store the score and index\n        # 25. use hashmap to store the score and index\n        # 26. use hashmap to store the score and index\n        # 27. use hashmap to store the score and index\n        # 28. use hashmap to store the score and index\n        # 29. use hashmap to store the score and index\n        # 30. use hashmap to store the score and index\n        # 31. use hashmap to store the score and index\n        # 32. use hashmap to store the score and index\n        # 33. use hashmap to store the score and index\n        # 34. use hashmap to store the score and index\n        # 35. use hashmap to store the score and index\n        # 36. use hashmap to store the score and index\n        # 37. use hashmap to store the score and index\n        # 38. use hashmap to store the score and index\n        # 39. use hashmap to store the score and index\n        # 40. use hashmap to store the score and index\n        # 41. use hashmap to store the score and index\n        # 42. use hashmap to store the score and index\n        # 43. use hashmap to store the score and index\n        # 44. use hashmap to store the score and index\n        # 45. use hashmap to store the score and index\n        # 46. use hashmap to store the score and index\n        # 47. use hashmap to store the score and index\n        # 48. use hashmap to store the score and index\n        # 49. use hashmap to store the score and index\n        # 50. use hashmap to store the score and index\n        # 51. use hashmap to store the score and index\n        # 52. use hashmap to store the score and index\n        # 53. use hashmap to store the score and index\n        # 54. use hashmap to store the score and index\n        # 55. use hashmap to store the score and index\n        # 56. use hashmap to store the score and index\n        # 57. use hashmap to store the score and index\n        # 58. use hashmap to store the score and index\n        # 59. use hashmap to store the score and index\n        # 60. use hashmap to store the score and index\n        # 61. use hashmap to store the score and index\n        # 62. use hashmap to store the score and index\n        # 63. use hashmap to store the score and index\n        # 64. use hashmap to store the score and index\n        # 65. use hashmap to store the score and index"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears\n        # 3. if the character appears, move the pointer to the next character\n        # 4. if the character does not appear, move the pointer to the next character\n        # 5. update the max length\n        \n        # 1. use a set to store the characters\n        # 2. use a pointer to keep track of the last time the character appears"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        word_len_dict = {}\n        for word in words:\n            if word in word_len_dict:\n                word_len_dict[word] += 1\n            else:\n                word_len_dict[word] = 1\n        \n        word_len_dict_len = len(word_len_dict)\n        word_len_dict_len_count = len(word_len_dict)\n        word_len_dict_len_count_count = len(word_len_dict_len_count)\n        word_len_dict_len_count_count_count = len(word_len_dict_len_count_count)\n        word_len_dict_len_count_count_count_count = len(word_len_dict_len_count_count_count)\n        word_len_dict_len_count_count_count_count_count = len(word_len_dict_len_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count = len(word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count_count)\n        word_len_dict_len_count_count_count_count_count_count_count_count_count_count_count_count_count_count"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = head\n        while cur:\n            if cur.val < dummy.next.val:\n                dummy.next = cur\n                cur = cur.next\n                continue\n            prev = dummy\n            while prev.next.val < cur.val:\n                prev = prev.next\n            cur.next, prev.next, cur.next.next = prev.next, cur, cur.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        cur = dummy\n        while cur.next:\n            if cur.next.val == cur.next.next.val:\n                cur.next = cur.next.next\n            else:\n                cur = cur.next\n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        if len(nums) < 3:\n            return res\n        if nums[0] > 0 or nums[-1] < 0:\n            return res\n        if nums[0] == 0 and nums[-1] == 0:\n            res.append([0,0,0])\n            return res\n        if nums[0] == 0:\n            res.append([0,0,0])\n            return res\n        if nums[-1] == 0:\n            return res\n        if nums[0] == nums[-1]:\n            return res\n        if nums[0] == nums[-1] == 0:\n            return res\n        if nums[0] == nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1 and nums[-1] == 1:\n            return res\n        if nums[0] == 1"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # if word1 == word2:\n        #     return 0\n        # if len(word1) == 0:\n        #     return len(word2)\n        # if len(word2) == 0:\n        #     return len(word1)\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if word1[0] == word2[0]:\n        #     return self.minDistance(word1[1:], word2[1:])\n        # else:\n        #     return 1 + min(self.minDistance(word1[1:], word2), self.minDistance(word1, word2[1:]))\n        # if"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        # xor\n        # x ^ y\n        # x & ~y\n        # x & y\n        # x & (~y)\n        # x & (y - 1)\n        # x & (y - 1) - 1\n        # x & (y - 1) - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1\n        # x & (y - 1) - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 - 1 -"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return ['->'.join([str(root.val), x]) for x in left] + ['->'.join([str(root.val), x]) for x in right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. binary search\n        # 3. merge sort\n        # 4. binary search\n        # 5. binary search\n        # 6. binary search\n        # 7. binary search\n        # 8. binary search\n        # 9. binary search\n        # 10. binary search\n        # 11. binary search\n        # 12. binary search\n        # 13. binary search\n        # 14. binary search\n        # 15. binary search\n        # 16. binary search\n        # 17. binary search\n        # 18. binary search\n        # 19. binary search\n        # 20. binary search\n        # 21. binary search\n        # 22. binary search\n        # 23. binary search\n        # 24. binary search\n        # 25. binary search\n        # 26. binary search\n        # 27. binary search\n        # 28. binary search\n        # 29. binary search\n        # 30. binary search\n        # 31. binary search\n        # 32. binary search\n        # 33. binary search\n        # 34. binary search\n        # 35. binary search\n        # 36. binary search\n        # 37. binary search\n        # 38. binary search\n        # 39. binary search\n        # 40. binary search\n        # 41. binary search\n        # 42. binary search\n        # 43. binary search\n        # 44. binary search\n        # 45. binary search\n        # 46. binary search\n        # 47. binary search\n        # 48. binary search\n        # 49. binary search\n        # 50. binary search\n        # 51. binary search\n        # 52. binary search\n        # 53. binary search\n        # 54. binary search\n        # 55. binary search\n        # 56. binary search\n        # 57. binary search\n        # 58. binary search\n        # 59. binary search\n        # 60. binary search\n        # 61. binary search\n        # 62. binary search\n        # 63. binary search\n        # 64. binary search\n        # 65. binary search\n        # 66. binary search\n        # 67. binary search\n        # 68. binary search\n        # 69. binary search\n        # 70. binary search\n        # 71. binary search\n        # 72. binary search\n        # 73. binary search\n        # 74. binary search\n        # 75. binary search\n        # 76. binary search\n        # 77. binary search\n        # 78. binary search\n        # 79. binary search\n        # 80. binary search\n        # 81. binary search\n        # 82. binary search\n        # 83. binary search\n        # 84. binary search\n        # 85. binary search\n        # 86. binary search\n        # 87. binary search\n        # 88. binary search\n        # 89. binary search\n        # 90. binary search\n        # 91. binary search\n        # 92. binary search\n        # 93. binary search\n        # 94. binary search\n        # 95. binary search\n        # 96. binary search\n        # 97. binary search\n        # 98. binary search\n        # 99. binary search\n        # 100. binary search\n        # 101. binary search\n        # 102. binary search\n        # 103. binary search\n        # 104. binary search\n        # 105. binary search\n        # 106. binary search\n        # 107. binary search\n        # 108. binary search\n        # 109. binary search\n        # 110. binary search\n        # 111. binary search\n        # 112. binary search\n        # 113. binary search"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty > sy or tx > sx and ty > tx"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        v1_len = len(v1)\n        v2_len = len(v2)\n        if v1_len > v2_len:\n            v2 += ['0'] * (v1_len - v2_len)\n        elif v1_len < v2_len:\n            v1 += ['0'] * (v2_len - v1_len)\n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        # max heap\n        q = []\n        # total time\n        t = 0\n        # total courses\n        c = 0\n        # iterate over courses\n        for d, e in courses:\n            # add course to heap\n            heapq.heappush(q, -d)\n            # update total time\n            t += d\n            # if total time exceeds course duration\n            if t > e:\n                # remove course from heap\n                t += heapq.heappop(q)\n                # update total courses\n                c -= 1\n            # update total courses\n            c += 1\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c = min(c, len(q))\n            # update total courses\n            c = max(c, 1)\n            # update total courses\n            c"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k < 2:\n            return head\n        \n        # dummy node\n        dummy = ListNode(0)\n        dummy.next = head\n        \n        # prev, curr, next\n        prev, curr, next = dummy, dummy, dummy\n        \n        # length of the list\n        length = 0\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list\n        length = length * k\n        \n        # length of the list\n        length = length // k\n        \n        # length of the list"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(s) < 2:\n        #     return False\n        # if len(s) % 2 == 1:\n        #     return False\n        # if s[0] != s[len(s) - 1]:\n        #     return False\n        # if s[0] * 2 == s:\n        #     return True\n        # if s[1] * 2 == s:\n        #     return True\n        # if s[2] * 2 == s:\n        #     return True\n        # if s[3] * 2 == s:\n        #     return True\n        # if s[4] * 2 == s:\n        #     return True\n        # if s[5] * 2 == s:\n        #     return True\n        # if s[6] * 2 == s:\n        #     return True\n        # if s[7] * 2 == s:\n        #     return True\n        # if s[8] * 2 == s:\n        #     return True\n        # if s[9] * 2 == s:\n        #     return True\n        # if s[10] * 2 == s:\n        #     return True\n        # if s[11] * 2 == s:\n        #     return True\n        # if s[12] * 2 == s:\n        #     return True\n        # if s[13] * 2 == s:\n        #     return True\n        # if s[14] * 2 == s:\n        #     return True\n        # if s[15] * 2 == s:\n        #     return True\n        # if s[16] * 2 == s:\n        #     return True\n        # if s[17] * 2 == s:\n        #     return True\n        # if s[18] * 2 == s:\n        #     return True\n        # if s[19] * 2 == s:\n        #     return True\n        # if s[20] * 2 == s:\n        #     return True\n        # if s[21] * 2 == s:\n        #     return True\n        # if s[22] * 2 == s:\n        #     return True\n        # if s[23] * 2 == s:\n        #     return True\n        # if s[24] * 2 == s:\n        #     return True\n        # if s[25] * 2 == s:\n        #     return True\n        # if s[26] * 2 == s:\n        #     return True\n        # if s[27] * 2 == s:\n        #     return True\n        # if s[28] * 2 == s:\n        #     return True\n        # if s[29] * 2 == s:\n        #     return True\n        # if s[30] * 2 == s:\n        #     return True\n        # if s[31] * 2 == s:\n        #     return True\n        # if s[32] * 2 == s:\n        #     return True\n        # if s[33] * 2 == s:\n        #     return True\n        # if s[34] * 2 == s:\n        #     return True\n        # if s[35] * 2 == s:\n        #     return True\n        # if s[36] * 2 == s:\n        #     return True\n        # if s[37] * 2 == s:\n        #     return True\n        # if s[38] * 2 == s:\n        #     return True\n        # if s[39] * 2 == s:\n        #     return True\n        # if s[40] * 2 == s:\n        #     return True\n        # if s[41] * 2 == s:\n        #     return True\n        # if s[42] * 2 == s:\n        #     return True\n        # if s[43] * 2 == s:\n        #     return True\n        # if s[44] * 2 == s:\n        #     return True\n        # if s[45] * 2 == s:\n        #     return True\n        # if s["}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 2. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 3. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 4. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 5. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 6. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 7. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 8. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 9. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 10. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 11. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 12. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 13. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 14. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 15. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 16. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 17. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 18. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 19. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 20. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 21. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 22. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 23. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 24. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 25. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 26. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 27. 1, 2, 3, 4, 5, 6, 7, 8, 9, 10\n        # 28. 1, 2, 3, 4, 5, 6, 7, 8, 9,"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 262ms\n        # 2. 288ms\n        # 3. 240ms\n        # 4. 240ms\n        # 5. 240ms\n        # 6. 240ms\n        # 7. 240ms\n        # 8. 240ms\n        # 9. 240ms\n        # 10. 240ms\n        # 11. 240ms\n        # 12. 240ms\n        # 13. 240ms\n        # 14. 240ms\n        # 15. 240ms\n        # 16. 240ms\n        # 17. 240ms\n        # 18. 240ms\n        # 19. 240ms\n        # 20. 240ms\n        # 21. 240ms\n        # 22. 240ms\n        # 23. 240ms\n        # 24. 240ms\n        # 25. 240ms\n        # 26. 240ms\n        # 27. 240ms\n        # 28. 240ms\n        # 29. 240ms\n        # 30. 240ms\n        # 31. 240ms\n        # 32. 240ms\n        # 33. 240ms\n        # 34. 240ms\n        # 35. 240ms\n        # 36. 240ms\n        # 37. 240ms\n        # 38. 240ms\n        # 39. 240ms\n        # 40. 240ms\n        # 41. 240ms\n        # 42. 240ms\n        # 43. 240ms\n        # 44. 240ms\n        # 45. 240ms\n        # 46. 240ms\n        # 47. 240ms\n        # 48. 240ms\n        # 49. 240ms\n        # 50. 240ms\n        # 51. 240ms\n        # 52. 240ms\n        # 53. 240ms\n        # 54. 240ms\n        # 55. 240ms\n        # 56. 240ms\n        # 57. 240ms\n        # 58. 240ms\n        # 59. 240ms\n        # 60. 240ms\n        # 61. 240ms\n        # 62. 240ms\n        # 63. 240ms\n        # 64. 240ms\n        # 65. 240ms\n        # 66. 240ms\n        # 67. 240ms\n        # 68. 240ms\n        # 69. 240ms\n        # 70. 240ms\n        # 71. 240ms\n        # 72. 240ms\n        # 73. 240ms\n        # 74. 240ms\n        # 75. 240ms\n        # 76. 240ms\n        # 77. 240ms\n        # 78. 240ms\n        # 79. 240ms\n        # 80. 240ms\n        # 81. 240ms\n        # 82. 240ms\n        # 83. 240ms\n        # 84. 240ms\n        # 85. 240ms\n        # 86. 240ms"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:\n        #     return len(s) - 1\n        # return len(s)\n        \n        # if len(s) <= 1:\n        #     return len(s)\n        # if s[0] == s[-1]:"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        if x == 2:\n            return 1\n        \n        if x == 3:\n            return 1\n        \n        if x == 4:\n            return 2\n        \n        if x == 5:\n            return 2\n        \n        if x == 6:\n            return 2\n        \n        if x == 7:\n            return 2\n        \n        if x == 8:\n            return 3\n        \n        if x == 9:\n            return 3\n        \n        if x == 10:\n            return 3\n        \n        if x == 11:\n            return 3\n        \n        if x == 12:\n            return 3\n        \n        if x == 13:\n            return 3\n        \n        if x == 14:\n            return 4\n        \n        if x == 15:\n            return 4\n        \n        if x == 16:\n            return 4\n        \n        if x == 17:\n            return 4\n        \n        if x == 18:\n            return 4\n        \n        if x == 19:\n            return 4\n        \n        if x == 20:\n            return 5\n        \n        if x == 21:\n            return 5\n        \n        if x == 22:\n            return 5\n        \n        if x == 23:\n            return 5\n        \n        if x == 24:\n            return 5\n        \n        if x == 25:\n            return 5\n        \n        if x == 26:\n            return 5\n        \n        if x == 27:\n            return 5\n        \n        if x == 28:\n            return 5\n        \n        if x == 29:\n            return 5\n        \n        if x == 30:\n            return 5\n        \n        if x == 31:\n            return 5\n        \n        if x == 32:\n            return 6\n        \n        if x == 33:\n            return 6\n        \n        if x == 34:\n            return 6\n        \n        if x == 35:\n            return 6\n        \n        if x == 36:\n            return 6\n        \n        if x == 37:\n            return 6\n        \n        if x == 38:\n            return 6\n        \n        if x == 39:\n            return 6\n        \n        if x == 40:\n            return 6\n        \n        if x == 41:\n            return 6\n        \n        if x == 42:\n            return 6\n        \n        if x == 43:\n            return 6\n        \n        if x == 44:\n            return 6\n        \n        if x == 45:\n            return 6\n        \n        if x == 46:\n            return 6\n        \n        if x == 47:\n            return 6\n        \n        if x == 48:\n            return 6\n        \n        if x == 49:\n            return 6\n        \n        if x == 50:\n            return 6\n        \n        if x == 51:\n            return 6\n        \n        if x == 52:\n            return 6\n        \n        if x == 53:\n            return 6\n        \n        if x == 54:\n            return 6\n        \n        if x == 55:\n            return 6\n        \n        if x == 56:\n            return 6\n        \n        if x == 57:\n            return 6\n        \n        if x == 58:\n            return 6\n        \n        if x == 59:\n            return 6\n        \n        if x == 60:\n            return 6\n        \n        if x == 61:\n            return 6\n        \n        if x == 62:\n            return 6\n        \n        if x == 63:\n            return 6\n        \n        if x == 64:\n            return 6\n        \n        if x == 65:\n            return 6\n        \n        if x == 66:\n            return 6\n        \n        if x == 67:\n            return 6\n        \n        if x == 68:\n            return 6"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2020-09-22\n        # 2. 2020-09-23\n        # 3. 2020-09-24\n        # 4. 2020-09-25\n        # 5. 2020-09-26\n        # 6. 2020-09-27\n        # 7. 2020-09-28\n        # 8. 2020-09-29\n        # 9. 2020-09-30\n        # 10. 2020-10-01\n        # 11. 2020-10-02\n        # 12. 2020-10-03\n        # 13. 2020-10-04\n        # 14. 2020-10-05\n        # 15. 2020-10-06\n        # 16. 2020-10-07\n        # 17. 2020-10-08\n        # 18. 2020-10-09\n        # 19. 2020-10-10\n        # 20. 2020-10-11\n        # 21. 2020-10-12\n        # 22. 2020-10-13\n        # 23. 2020-10-14\n        # 24. 2020-10-15\n        # 25. 2020-10-16\n        # 26. 2020-10-17\n        # 27. 2020-10-18\n        # 28. 2020-10-19\n        # 29. 2020-10-20\n        # 30. 2020-10-21\n        # 31. 2020-10-22\n        # 32. 2020-10-23\n        # 33. 2020-10-24\n        # 34. 2020-10-25\n        # 35. 2020-10-26\n        # 36. 2020-10-27\n        # 37. 2020-10-28\n        # 38. 2020-10-29\n        # 39. 2020-10-30\n        # 40. 2020-10-31\n        # 41. 2020-11-01\n        # 42. 2020-11-02\n        # 43. 2020-11-03\n        # 44. 2020-11-04\n        # 45. 2020-11-05\n        # 46. 2020-11-06\n        # 47. 2020-11-07\n        # 48. 2020-11-08\n        # 49. 2020-11-09\n        # 50. 2020-11-10\n        # 51. 2020-11-11\n        # 52. 2020-11-12\n        # 53. 2020-11-13\n        # 54. 2020-11-14\n        # 55. 2020-11-15\n        # 56. 2020-11-16\n        # 57. 2020-11-17\n        # 58."}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        ## O(n) time and O(n) space\n        ## return True if any value appears at least twice in the array\n        ## return False if every element is distinct\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        ## use set to store the values\n        ## if the length of the set is less than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is greater than the length of the array,\n        ## then the array has duplicates\n        ## if the length of the set is equal to the length of the array,\n        ## then the array has no duplicates\n        #"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        if k == 1:\n            return nums\n        \n        q = []\n        res = []\n        for i in range(len(nums)):\n            if q and q[0] == i - k:\n                q.pop(0)\n            while q and nums[q[-1]] <= nums[i]:\n                q.pop()\n            q.append(i)\n            if i >= k - 1:\n                res.append(nums[q[0]])\n        return res"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n            \n        if len(nums1) == 0:\n            if len(nums2) % 2 == 0:\n                return (nums2[len(nums2) // 2] + nums2[len(nums2) // 2 - 1]) / 2.0\n            else:\n                return nums2[len(nums2) // 2]\n        \n        if len(nums2) == 0:\n            if len(nums1) % 2 == 0:\n                return (nums1[len(nums1) // 2] + nums1[len(nums1) // 2 - 1]) / 2.0\n            else:\n                return nums1[len(nums1) // 2]\n        \n        if len(nums1) == 1 and len(nums2) == 1:\n            return (nums1[0] + nums2[0]) / 2.0\n        \n        if len(nums1) == 1:\n            if len(nums2) % 2 == 0:\n                return (nums1[0] + nums2[len(nums2) // 2]) / 2.0\n            else:\n                return nums2[len(nums2) // 2]\n        \n        if len(nums2) == 1:\n            if len(nums1) % 2 == 0:\n                return (nums2[0] + nums1[len(nums1) // 2]) / 2.0\n            else:\n                return nums1[len(nums1) // 2]\n        \n        if len(nums1) == 2 and len(nums2) == 2:\n            if nums1[0] < nums2[0]:\n                if nums1[1] < nums2[1]:\n                    return (nums1[0] + nums1[1]) / 2.0\n                else:\n                    return nums1[0]\n            else:\n                if nums1[1] < nums2[1]:\n                    return (nums2[0] + nums1[1]) / 2.0\n                else:\n                    return nums2[0]\n        \n        if len(nums1) == 2:\n            if nums1[0] < nums2[0]:\n                if nums1[1] < nums2[1]:\n                    return (nums1[0] + nums1[1]) / 2.0\n                else:\n                    return nums1[0]\n            else:\n                if nums1[1] < nums2[1]:\n                    return (nums2[0] + nums1[1]) / 2.0\n                else:\n                    return nums2[0]\n        \n        if len(nums2) == 2:\n            if nums1[0] < nums2[0]:\n                if nums1[1] < nums2[1]:\n                    return (nums1[0] + nums1[1]) / 2.0\n                else:\n                    return nums1[0]\n            else:\n                if nums1[1] < nums2[1]:\n                    return (nums2[0] + nums1[1]) / 2.0\n                else:\n                    return nums2[0]\n        \n        if len(nums1) == 3 and len(nums2) == 3:\n            if nums1[0] < nums2[0]:\n                if nums1[1] < nums2[1]:\n                    if nums1[2] < nums2[2]:\n                        return (nums1[0] + nums1[1]) / 2.0\n                    else:\n                        return (nums1[0] + nums1[2]) / 2.0\n                else:\n                    if nums1[2] < nums2[2]:\n                        return (nums1[0] + nums1[2]) / 2.0\n                    else:\n                        return (nums1[1] + nums1[2]) / 2.0"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if len(nums) == 2:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        # if nums[0] > nums[-1]:\n        #     return nums[-1]\n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        # if nums[0] > nums[1]:\n        #     return nums[1]\n        # if nums[0] < nums[1]:\n        #     return nums[0]\n        #"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        if rowIndex == 1:\n            return [1,1]\n        if rowIndex == 2:\n            return [1,2,1]\n        if rowIndex == 3:\n            return [1,3,3,1]\n        if rowIndex == 4:\n            return [1,4,6,4,1]\n        if rowIndex == 5:\n            return [1,5,10,10,5,1]\n        if rowIndex == 6:\n            return [1,6,15,20,15,6,1]\n        if rowIndex == 7:\n            return [1,7,21,35,35,21,7,1]\n        if rowIndex == 8:\n            return [1,8,28,56,70,56,28,8,1]\n        if rowIndex == 9:\n            return [1,9,36,84,126,126,84,36,9,1]\n        if rowIndex == 10:\n            return [1,10,45,120,210,252,210,120,45,10,1]\n        if rowIndex == 11:\n            return [1,11,49,165,364,526,526,364,165,49,11,1]\n        if rowIndex == 12:\n            return [1,12,56,220,556,1000,1000,556,220,56,220,12,1]\n        if rowIndex == 13:\n            return [1,13,64,300,924,2032,3000,2032,924,300,924,64,64,1]\n        if rowIndex == 14:\n            return [1,14,72,432,1680,4320,8640,8640,4320,1680,432,864,864,14,1]\n        if rowIndex == 15:\n            return [1,15,84,560,2520,8280,21120,40320,40320,21120,8280,2520,560,84,15,1]\n        if rowIndex == 16:\n            return [1,16,96,648,3840,16320,51840,114400,184320,184320,114400,51840,16320,3840,648,96,16,1]\n        if rowIndex == 17:\n            return [1,17,100,720,4032,16800,54624,134400,243200,324320,324320,243200,134400,54624,16800,4032,720,100,17,1]\n        if rowIndex == 18:\n            return [1,18,112,840,5184,23040,80640,222400,441200,644240,644240,441200,222400,80640,23040,5184,840,112,18,1]\n        if rowIndex == 19:\n            return [1,19,128,960,6480,38400,163200,576400,1474400,3048000"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        res = []\n        path = []\n        \n        def dfs(root, target):\n            if not root:\n                return\n            \n            path.append(root.val)\n            \n            if root.val == target:\n                res.append(path[:])\n            \n            if root.left:\n                dfs(root.left, target - root.val)\n            \n            if root.right:\n                dfs(root.right, target - root.val)\n            \n            path.pop()\n        \n        dfs(root, targetSum)\n        \n        return res"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L = area / 2\n        # 3. L = sqrt(area)\n        # 4. L = area ** 0.5\n        # 5. L = area ** 0.5\n        # 6. L = area ** 0.5\n        # 7. L = area ** 0.5\n        # 8. L = area ** 0.5\n        # 9. L = area ** 0.5\n        # 10. L = area ** 0.5\n        # 11. L = area ** 0.5\n        # 12. L = area ** 0.5\n        # 13. L = area ** 0.5\n        # 14. L = area ** 0.5\n        # 15. L = area ** 0.5\n        # 16. L = area ** 0.5\n        # 17. L = area ** 0.5\n        # 18. L = area ** 0.5\n        # 19. L = area ** 0.5\n        # 20. L = area ** 0.5\n        # 21. L = area ** 0.5\n        # 22. L = area ** 0.5\n        # 23. L = area ** 0.5\n        # 24. L = area ** 0.5\n        # 25. L = area ** 0.5\n        # 26. L = area ** 0.5\n        # 27. L = area ** 0.5\n        # 28. L = area ** 0.5\n        # 29. L = area ** 0.5\n        # 30. L = area ** 0.5\n        # 31. L = area ** 0.5\n        # 32. L = area ** 0.5\n        # 33. L = area ** 0.5\n        # 34. L = area ** 0.5\n        # 35. L = area ** 0.5\n        # 36. L = area ** 0.5\n        # 37. L = area ** 0.5\n        # 38. L = area ** 0.5\n        # 39. L = area ** 0.5\n        # 40. L = area ** 0.5\n        # 41. L = area ** 0.5\n        # 42. L = area ** 0.5\n        # 43. L = area ** 0.5\n        # 44. L = area ** 0.5\n        # 45. L = area ** 0.5\n        # 46. L = area ** 0.5\n        # 47. L = area ** 0.5\n        # 48. L = area ** 0.5\n        # 49. L = area ** 0.5\n        # 50. L = area ** 0.5\n        # 51. L = area ** 0.5\n        # 52. L = area ** 0.5\n        # 53. L = area ** 0.5\n        # 54. L = area ** 0.5\n        # 55. L = area ** 0.5\n        # 56. L = area ** 0.5\n        # 57. L = area ** 0.5\n        # 58. L = area ** 0.5\n        # 59. L = area ** 0.5\n        # 60. L = area ** 0.5\n        # 61. L = area ** 0.5\n        # 62. L = area ** 0.5\n        # 63. L = area ** 0.5\n        # 64. L = area ** 0.5\n        # 65. L = area ** 0.5\n        # 66. L = area ** 0.5\n        # 67. L = area ** 0.5\n        # 68. L = area ** 0.5\n        # 69. L = area ** 0.5\n        #"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. build a graph\n        # 2. find the shortest path\n        # 3. find the shortest path\n        # 4. find the shortest path\n        # 5. find the shortest path\n        # 6. find the shortest path\n        # 7. find the shortest path\n        # 8. find the shortest path\n        # 9. find the shortest path\n        # 10. find the shortest path\n        # 11. find the shortest path\n        # 12. find the shortest path\n        # 13. find the shortest path\n        # 14. find the shortest path\n        # 15. find the shortest path\n        # 16. find the shortest path\n        # 17. find the shortest path\n        # 18. find the shortest path\n        # 19. find the shortest path\n        # 20. find the shortest path\n        # 21. find the shortest path\n        # 22. find the shortest path\n        # 23. find the shortest path\n        # 24. find the shortest path\n        # 25. find the shortest path\n        # 26. find the shortest path\n        # 27. find the shortest path\n        # 28. find the shortest path\n        # 29. find the shortest path\n        # 30. find the shortest path\n        # 31. find the shortest path\n        # 32. find the shortest path\n        # 33. find the shortest path\n        # 34. find the shortest path\n        # 35. find the shortest path\n        # 36. find the shortest path\n        # 37. find the shortest path\n        # 38. find the shortest path\n        # 39. find the shortest path\n        # 40. find the shortest path\n        # 41. find the shortest path\n        # 42. find the shortest path\n        # 43. find the shortest path\n        # 44. find the shortest path\n        # 45. find the shortest path\n        # 46. find the shortest path\n        # 47. find the shortest path\n        # 48. find the shortest path\n        # 49. find the shortest path\n        # 50. find the shortest path\n        # 51. find the shortest path\n        # 52. find the shortest path\n        # 53. find the shortest path\n        # 54. find the shortest path\n        # 55. find the shortest path\n        # 56. find the shortest path\n        # 57. find the shortest path\n        # 58. find the shortest path\n        # 59. find the shortest path\n        # 60. find the shortest path\n        # 61. find the shortest path\n        # 62. find the shortest path\n        # 63. find the shortest path\n        # 64. find the shortest path\n        # 65. find the shortest path\n        # 66. find the shortest path\n        # 67. find the shortest path\n        # 68. find the shortest path\n        # 69. find the shortest path\n        # 70. find the shortest path\n        # 71. find the shortest path\n        # 72. find the shortest path\n        # 73. find the shortest path\n        # 74. find the shortest path\n        # 75. find the shortest path\n        # 76. find the shortest path\n        # 77. find the shortest path\n        # 78. find the shortest path\n        # 79. find the shortest path\n        # 80. find the shortest path\n        # 81. find the shortest path\n        # 82. find the shortest path\n        # 83. find the shortest path\n        # 84. find the shortest path\n        # 85. find the shortest path\n        # 86. find the shortest path\n        #"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n == 0:\n            return False\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return self.isPowerOfTwo(n/2)\n        else:\n            return False"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        for n in nums:\n            if n != nums[i]:\n                i += 1\n                res += [n + r for r in res]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u5355\u8c03\u6808\n        # 3. \u53cc\u6307\u9488\n        # 4. \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 5. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e\n        # 6. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 7. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 8. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 9. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 10. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 11. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 12. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 13. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 14. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 15. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 16. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 17. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 18. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 19. \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e + \u4e8c\u5206\u67e5\u627e\n        # 20."}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token not in \"+-*/\":\n                stack.append(int(token))\n            else:\n                second = stack.pop()\n                first = stack.pop()\n                if token == \"+\":\n                    stack.append(first + second)\n                elif token == \"-\":\n                    stack.append(first - second)\n                elif token == \"*\":\n                    stack.append(first * second)\n                else:\n                    stack.append(int(first / second))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min, x_max = float('inf'), -float('inf')\n        y_min, y_max = float('inf'), -float('inf')\n        area = 0\n        x_set, y_set = set(), set()\n        for x1, y1, x2, y2 in rectangles:\n            x_min, x_max = min(x1, x_min), max(x2, x_max)\n            y_min, y_max = min(y1, y_min), max(y2, y_max)\n            area += (x2 - x1) * (y2 - y1)\n            if x1 in x_set:\n                x_set.remove(x1)\n            else:\n                x_set.add(x1)\n            if x2 in x_set:\n                x_set.remove(x2)\n            else:\n                x_set.add(x2)\n            if y1 in y_set:\n                y_set.remove(y1)\n            else:\n                y_set.add(y1)\n            if y2 in y_set:\n                y_set.remove(y2)\n            else:\n                y_set.add(y2)\n        if x_min == x_max or y_min == y_max:\n            return False\n        if len(x_set) != 1 or len(y_set) != 1:\n            return False\n        if x_set.pop() != x_min or y_set.pop() != y_min:\n            return False\n        if x_set.pop() != x_max or y_set.pop() != y_max:\n            return False\n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        # 26\u8fdb\u5236\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4eceA-Z\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-25\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece1-26\n        # 26\u8fdb\u5236\u7684\u5b57\u6bcd\u662f\u4ece0-"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4,5\n        # 1,2,3,4,5,0\n        # 2,3,4,5,0,1\n        # 3,4,5,0,1,2\n        # 4,5,0,1,2,3\n        # 5,0,1,2,3,4\n        \n        # 0,1,2,3,4"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if len(set(s)) != len(set(t)):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] not in s_to_t:\n                s_to_t[s[i]] = t[i]\n            if t[i] not in t_to_s:\n                t_to_s[t[i]] = s[i]\n            if s_to_t[s[i]] != t[i] or t_to_s[t[i]] != s[i]:\n                return False\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half, search in the second half\n        # if target is not in the second half, search in the first half\n        \n        # find the pivot\n        # if target is in the first half, search in the first half\n        # if target is in the second half, search in the second half\n        # if target is not in the first half"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if obstacleGrid[0][0] == 1:\n            return 0\n        if obstacleGrid[0][0] == 0:\n            obstacleGrid[0][0] = 1\n        else:\n            obstacleGrid[0][0] = 0\n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        for i in range(1,m):\n            if obstacleGrid[i][0] == 1:\n                obstacleGrid[i][0] = 0\n            else:\n                obstacleGrid[i][0] = obstacleGrid[i-1][0]\n        for i in range(1,n):\n            if obstacleGrid[0][i] == 1:\n                obstacleGrid[0][i] = 0\n            else:\n                obstacleGrid[0][i] = obstacleGrid[0][i-1]\n        for i in range(1,m):\n            for j in range(1,n):\n                if obstacleGrid[i][j] == 1:\n                    obstacleGrid[i][j] = 0\n                else:\n                    obstacleGrid[i][j] = obstacleGrid[i-1][j] + obstacleGrid[i][j-1]\n        return obstacleGrid[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        if len(s) == 1:\n            return 1\n        if len(s) == 2:\n            if s[0] == '*':\n                return 9\n            if s[1] == '*':\n                return 9\n            if s[0] == '1' and s[1] == '*':\n                return 9\n            if s[0] == '2' and s[1] == '*':\n                return 6\n            return 1\n        if s[-1] == '0':\n            return 0\n        if s[-2] == '*':\n            if s[-1] == '*':\n                return 15\n            if s[-1] == '1':\n                return 9\n            if s[-1] == '2':\n                return 6\n        if s[-2] == '1':\n            if s[-1] == '*':\n                return 9\n            if s[-1] == '1':\n                return 9\n            if s[-1] == '2':\n                return 6\n        if s[-2] == '2':\n            if s[-1] == '*':\n                return 6\n            if s[-1] == '1':\n                return 2\n            if s[-1] == '2':\n                return 1\n        if s[-2] == '*':\n            if s[-1] == '*':\n                return 15\n            if s[-1] == '1':\n                return 12\n            if s[-1] == '2':\n                return 4\n        if s[-2] == '1':\n            if s[-1] == '*':\n                return 12\n            if s[-1] == '1':\n                return 9\n            if s[-1] == '2':\n                return 3\n        if s[-2] == '2':\n            if s[-1] == '*':\n                return 3\n            if s[-1] == '1':\n                return 1\n            if s[-1] == '2':\n                return 1\n        if s[-2] == '*':\n            if s[-1] == '*':\n                return 15\n            if s[-1] == '1':\n                return 11\n            if s[-1] == '2':\n                return 3\n        if s[-2] == '1':\n            if s[-1] == '*':\n                return 11\n            if s[-1] == '1':\n                return 9\n            if s[-1] == '2':\n                return 2\n        if s[-2] == '2':\n            if s[-1] == '*':\n                return 2\n            if s[-1] == '1':\n                return 1\n            if s[-1] == '2':\n                return 1\n        if s[-2] == '*':\n            if s[-1] == '*':\n                return 15\n            if s[-1] == '1':\n                return 10\n            if s[-1] == '2':\n                return 4\n        if s[-2] == '1':\n            if s[-1] == '*':\n                return 10\n            if s[-1] == '1':\n                return 9\n            if s[-1] == '2':\n                return 2\n        if s[-2] == '2':\n            if s[-1] == '*':\n                return 2\n            if s[-1] == '1':\n                return 1\n            if s[-1] == '2':\n                return 1\n        if s[-2] == '*':\n            if s[-1] == '*':\n                return 15\n            if s[-1] == '1':\n                return 9\n            if s[-1] == '2':\n                return 2\n        if s[-2] == '1':\n            if s[-1] == '*':\n                return 9\n            if s[-1] == '1':\n                return 9\n            if s[-1] == '2':\n                return 2\n        if s[-2] == '2':\n            if s[-1] == '*':\n                return 2\n            if s[-1] == '1':\n                return 1"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        res = nums[0] + nums[1] + nums[2]\n        if len(nums) < 3:\n            return res\n        if len(nums) == 3:\n            return nums[0] + nums[1] + nums[2]\n        if nums[0] + nums[1] + nums[2] > target:\n            return nums[0] + nums[1] + nums[2]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] < target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if nums[-1] + nums[-2] + nums[-3] == target:\n            return target\n        if nums[-1] + nums[-2] + nums[-3] > target:\n            return nums[-1] + nums[-2] + nums[-3]\n        if num"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 1\n        \n        if root.left is None:\n            return 1 + self.maxDepth(root.right)\n        \n        if root.right is None:\n            return 1 + self.maxDepth(root.left)\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        if not nums1:\n            return []\n        \n        if not nums2:\n            return []\n        \n        if nums1[0] > nums2[0]:\n            return self.intersect(nums2, nums1)\n        \n        if nums1[-1] < nums2[-1]:\n            return self.intersect(nums1, nums2)\n        \n        if nums1[-1] == nums2[-1]:\n            if len(nums1) == 1:\n                return [nums1[0]]\n            else:\n                return [nums1[-1]] + self.intersect(nums1[:-1], nums2)\n        \n        if nums1[0] == nums2[0]:\n            if len(nums1) == 1:\n                return [nums1[0]]\n            else:\n                return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n        \n        if nums1[0] < nums2[0]:\n            if nums1[0] == nums2[0]:\n                return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n            else:\n                return [nums1[0]] + self.intersect(nums1[1:], nums2)\n        \n        if nums1[0] > nums2[0]:\n            if nums1[0] == nums2[0]:\n                return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n            else:\n                return self.intersect(nums1, nums2[1:])\n        \n        if nums1[0] == nums2[0]:\n            return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n        \n        if nums1[0] < nums2[0]:\n            return self.intersect(nums1[1:], nums2)\n        \n        if nums1[0] > nums2[0]:\n            return self.intersect(nums1, nums2[1:])\n        \n        if nums1[0] == nums2[0]:\n            return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n        \n        if nums1[0] < nums2[0]:\n            return self.intersect(nums1[1:], nums2)\n        \n        if nums1[0] > nums2[0]:\n            return self.intersect(nums1, nums2[1:])\n        \n        if nums1[0] == nums2[0]:\n            return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n        \n        if nums1[0] < nums2[0]:\n            return self.intersect(nums1[1:], nums2)\n        \n        if nums1[0] > nums2[0]:\n            return self.intersect(nums1, nums2[1:])\n        \n        if nums1[0] == nums2[0]:\n            return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n        \n        if nums1[0] < nums2[0]:\n            return self.intersect(nums1[1:], nums2)\n        \n        if nums1[0] > nums2[0]:\n            return self.intersect(nums1, nums2[1:])\n        \n        if nums1[0] == nums2[0]:\n            return [nums1[0]] + self.intersect(nums1[1:], nums2[1:])\n        \n        if nums1[0] < nums2[0]:\n            return self.intersect(nums1[1:], num"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.right)\n        \n        # inorder traversal\n        # find the min and max\n        # min = min(min, root.val - prev)\n        # prev = root.val\n        # inorder(root.left)\n        \n        # inorder"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the max frequency\n        max_freq = 0\n        max_freq_node = None\n        cur_freq = 0\n        prev_val = root.val\n        cur_val = root.val\n        cur_freq_node = root\n        max_freq_node = root\n        \n        while root:\n            if root.left:\n                if root.left.val == prev_val:\n                    cur_freq += 1\n                else:\n                    if cur_freq > max_freq:\n                        max_freq = cur_freq\n                        max_freq_node = cur_freq_node\n                    cur_freq = 1\n                    cur_val = root.left.val\n                    cur_freq_node = root.left\n                prev_val = root.left.val\n            else:\n                if cur_freq > max_freq:\n                    max_freq = cur_freq\n                    max_freq_node = cur_freq_node\n                cur_freq = 1\n                cur_val = root.val\n                cur_freq_node = root\n            if root.right:\n                if root.right.val == prev_val:\n                    cur_freq += 1\n                else:\n                    if cur_freq > max_freq:\n                        max_freq = cur_freq\n                        max_freq_node = cur_freq_node\n                    cur_freq = 1\n                    cur_val = root.right.val\n                    cur_freq_node = root.right\n                prev_val = root.right.val\n            else:\n                if cur_freq > max_freq:\n                    max_freq = cur_freq\n                    max_freq_node = cur_freq_node\n                cur_freq = 1\n                cur_val = root.val\n                cur_freq_node = root\n            root = root.right\n            \n        if cur_freq > max_freq:\n            max_freq = cur_freq\n            max_freq_node = cur_freq_node\n        \n        if max_freq == 1:\n            return [max_freq_node.val]\n        else:\n            cur_freq = 0\n            cur_val = None\n            cur_freq_node = None\n            prev_val = None\n            cur_freq_node = max_freq_node\n            while cur_freq_node:\n                if cur_freq_node.left:\n                    if cur_freq_node.left.val == prev_val:\n                        cur_freq += 1\n                    else:\n                        if cur_freq == max_freq:\n                            cur_val = cur_freq_node.left.val\n                        cur_freq = 1\n                        cur_val = cur_freq_node.left.val\n                        cur_freq_node = cur_freq_node.left\n                    prev_val = cur_freq_node.left.val\n                else:\n                    if cur_freq == max_freq:\n                        cur_val = cur_freq_node.val\n                    cur_freq = 1\n                    cur_val = cur_freq_node.val\n                    cur_freq_node = cur_freq_node.right\n                if cur_freq_node.right:\n                    if cur_freq_node.right.val == prev_val:\n                        cur_freq += 1\n                    else:\n                        if cur_freq == max_freq:\n                            cur_val = cur_freq_node.right.val\n                        cur_freq = 1\n                        cur_val = cur_freq_node.right.val\n                        cur_freq_node = cur_freq_node.right\n                    prev_val = cur_freq_node.right.val\n                else:\n                    if cur_freq == max_freq:\n                        cur_val = cur_freq_node.val\n                    cur_freq = 1\n                    cur_val = cur_freq_node.val\n                    cur_freq_node = cur_freq_node.right\n                cur_freq_node = cur_freq_node.right\n            \n            if cur_freq == max_freq:\n                cur_val = cur"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 2. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 3. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 4. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 5. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 6. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 7. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 8. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 9. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 10. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 11. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 12. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 13. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 14. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 15. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 16. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 17. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 18. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 19. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 20. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 21. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 22. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 23. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 24. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 25. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 26. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 27. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 28. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 29. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 30. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 31. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 32. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 33. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 34. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 35. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 36. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 37. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 38. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 39. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 40. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 41. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 42. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 43. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 44. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 45. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 46. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 47. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 48. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 49. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 50. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 51. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 52. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 53. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 54. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 55. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 56. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u5927\u5199\u5b57\u6bcd\uff0c\u4e00\u4e2a\u6570\u5b57\n        # 57. \u4e0d\u5305\u542b\u4e09\u4e2a\u8fde\u7eed\u7684\u76f8\u540c\u5b57\u7b26\n        # 58. \u957f\u5ea6\u81f3\u5c11\u4e3a6\n        # 59. \u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u5c0f\u5199\u5b57"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 2^x * 5^y = n\n        # x + y\n        # x = log(n) / log(5)\n        # x = log(n) / log(2)\n        # x = log(n) - log(2)\n        # x = log(n, 2)\n        # x = log(n, 5)\n        # x = log(n, 2) + log(n, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5)\n        # x = log(n, 2) + log(n, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log(2, 5) - log("}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        if numRows == 2:\n            return s[::2]\n        \n        if numRows == 3:\n            return s[::3]\n        \n        if numRows == 4:\n            return s[::4]\n        \n        if numRows == 5:\n            return s[::5]\n        \n        if numRows == 6:\n            return s[::6]\n        \n        if numRows == 7:\n            return s[::7]\n        \n        if numRows == 8:\n            return s[::8]\n        \n        if numRows == 9:\n            return s[::9]\n        \n        if numRows == 10:\n            return s[::10]\n        \n        if numRows == 11:\n            return s[::11]\n        \n        if numRows == 12:\n            return s[::12]\n        \n        if numRows == 13:\n            return s[::13]\n        \n        if numRows == 14:\n            return s[::14]\n        \n        if numRows == 15:\n            return s[::15]\n        \n        if numRows == 16:\n            return s[::16]\n        \n        if numRows == 17:\n            return s[::17]\n        \n        if numRows == 18:\n            return s[::18]\n        \n        if numRows == 19:\n            return s[::19]\n        \n        if numRows == 20:\n            return s[::20]\n        \n        if numRows == 21:\n            return s[::21]\n        \n        if numRows == 22:\n            return s[::22]\n        \n        if numRows == 23:\n            return s[::23]\n        \n        if numRows == 24:\n            return s[::24]\n        \n        if numRows == 25:\n            return s[::25]\n        \n        if numRows == 26:\n            return s[::26]\n        \n        if numRows == 27:\n            return s[::27]\n        \n        if numRows == 28:\n            return s[::28]\n        \n        if numRows == 29:\n            return s[::29]\n        \n        if numRows == 30:\n            return s[::30]\n        \n        if numRows == 31:\n            return s[::31]\n        \n        if numRows == 32:\n            return s[::32]\n        \n        if numRows == 33:\n            return s[::33]\n        \n        if numRows == 34:\n            return s[::34]\n        \n        if numRows == 35:\n            return s[::35]\n        \n        if numRows == 36:\n            return s[::36]\n        \n        if numRows == 37:\n            return s[::37]\n        \n        if numRows == 38:\n            return s[::38]\n        \n        if numRows == 39:\n            return s[::39]\n        \n        if numRows == 40:\n            return s[::40]\n        \n        if numRows == 41:\n            return s[::41]\n        \n        if numRows == 42:\n            return s[::42]\n        \n        if numRows == 43:\n            return s[::43]\n        \n        if numRows == 44:\n            return s[::44]\n        \n        if numRows == 45:\n            return s[::45]\n        \n        if numRows == 46:\n            return s[::46]\n        \n        if numRows == 47:\n            return s[::47]\n        \n        if numRows == 48:\n            return s[::48]\n        \n        if numRows == 49:\n            return s[::49]\n        \n        if numRows == 50:\n            return s[::50]\n        \n        if numRows == 51:\n            return s[::51]\n        \n        if numRows == 52:\n            return s[::52]\n        \n        if numRows == 5"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u89e3\u6cd5\n        # 2. \u53cc\u6307\u9488\n        # 3. \u5355\u8c03\u6808\n        # 4. \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 5. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 6. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 7. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 8. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 9. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 10. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 11. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 12. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 13. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 14. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 15. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 16. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 17. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 18. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808\n        # 19. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488\n        # 20. \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\u6808 + \u53cc\u6307\u9488 + \u5355\u8c03\ufffd"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## use the array as a hash table\n        ## the key is the number, the value is the index\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key and the number as the value\n        ## we can use the index as the key and the number as the value\n        ## if the number is not in the index, it means it is missing\n        ## if the number is in the index, it means it is repeated\n        ## so we can use the index as the key"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \u66b4\u529b\u6cd5\n        # 2. \u5f52\u5e76\u6392\u5e8f\n        # 3. \u4e8c\u5206\u67e5\u627e\n        # 4. \u6811\u72b6\u6570\u7ec4\n        # 5. \u7ebf\u6bb5\u6811\n        # 6. \u4f4d\u56fe\n        # 7. \u6709\u5e8f\u96c6\u5408\n        # 8. \u5806\n        # 9. \u6811\u72b6\u6570\u7ec4\n        # 10. \u7ebf\u6bb5\u6811\n        # 11. \u6811\u72b6\u6570\u7ec4\n        # 12. \u6811\u72b6\u6570\u7ec4\n        # 13. \u6811\u72b6\u6570\u7ec4\n        # 14. \u6811\u72b6\u6570\u7ec4\n        # 15. \u6811\u72b6\u6570\u7ec4\n        # 16. \u6811\u72b6\u6570\u7ec4\n        # 17. \u6811\u72b6\u6570\u7ec4\n        # 18. \u6811\u72b6\u6570\u7ec4\n        # 19. \u6811\u72b6\u6570\u7ec4\n        # 20. \u6811\u72b6\u6570\u7ec4\n        # 21. \u6811\u72b6\u6570\u7ec4\n        # 22. \u6811\u72b6\u6570\u7ec4\n        # 23. \u6811\u72b6\u6570\u7ec4\n        # 24. \u6811\u72b6\u6570\u7ec4\n        # 25. \u6811\u72b6\u6570\u7ec4\n        # 26. \u6811\u72b6\u6570\u7ec4\n        # 27. \u6811\u72b6\u6570\u7ec4\n        # 28. \u6811\u72b6\u6570\u7ec4\n        # 29. \u6811\u72b6\u6570\u7ec4\n        # 30. \u6811\u72b6\u6570\u7ec4\n        # 31. \u6811\u72b6\u6570\u7ec4\n        # 32. \u6811\u72b6\u6570\u7ec4\n        # 33. \u6811\u72b6\u6570\u7ec4\n        # 34. \u6811\u72b6\u6570\u7ec4\n        # 35. \u6811\u72b6\u6570\u7ec4\n        # 36. \u6811\u72b6\u6570\u7ec4\n        # 37. \u6811\u72b6\u6570\u7ec4\n        # 38. \u6811\u72b6\u6570\u7ec4\n        # 39. \u6811\u72b6\u6570\u7ec4\n        # 40. \u6811\u72b6\u6570\u7ec4\n        # 41. \u6811\u72b6\u6570\u7ec4\n        # 42. \u6811\u72b6\u6570\u7ec4\n        # 43. \u6811\u72b6\u6570\u7ec4\n        # 44. \u6811\u72b6\u6570\u7ec4\n        # 45. \u6811\u72b6\u6570\u7ec4\n        # 46. \u6811\u72b6\u6570\u7ec4\n        # 47. \u6811\u72b6\u6570\u7ec4\n        # 48. \u6811\u72b6\u6570\u7ec4\n        # 49. \u6811\u72b6\u6570\u7ec4\n        # 50. \u6811\u72b6\u6570\u7ec4\n        # 51. \u6811\u72b6\u6570\u7ec4\n        # 52. \u6811\u72b6\u6570\u7ec4\n        # 53. \u6811\u72b6\u6570\u7ec4\n        # 54. \u6811\u72b6\u6570\u7ec4\n        # 55. \u6811\u72b6\u6570\u7ec4\n        # 56. \u6811\u72b6\u6570\u7ec4\n        # 57. \u6811\u72b6\u6570\u7ec4\n        # 58. \u6811\u72b6\u6570\u7ec4\n        # 59. \u6811\u72b6\u6570\u7ec4\n        # 60. \u6811\u72b6\u6570\u7ec4\n        # 61. \u6811\u72b6\u6570\u7ec4\n        # 62. \u6811\u72b6\u6570\u7ec4\n        # 63. \u6811\u72b6\u6570\u7ec4\n        # 64. \u6811\u72b6\u6570\u7ec4\n        # 65. \u6811\u72b6\u6570\u7ec4\n        # 66. \u6811\u72b6\u6570\u7ec4\n        # 67. \u6811\u72b6\u6570\u7ec4\n        # 68. \u6811\u72b6\u6570\u7ec4\n        # 69. \u6811\u72b6\u6570\u7ec4\n        # 70. \u6811\u72b6\u6570\u7ec4\n        # 71. \u6811\u72b6\u6570\u7ec4\n        # 72. \u6811\u72b6\u6570\u7ec4\n        # 73. \u6811\u72b6\u6570\u7ec4\n        # 74. \u6811\u72b6\u6570\u7ec4\n        # 75. \u6811\u72b6\u6570\u7ec4\n        # 76. \u6811\u72b6\u6570\u7ec4\n        # 77. \u6811\u72b6\u6570\u7ec4\n        # 78. \u6811\u72b6\u6570\u7ec4\n        # 79. \u6811\u72b6\u6570\u7ec4\n        # 80. \u6811\u72b6\u6570\u7ec4\n        # 81. \u6811\u72b6\u6570\u7ec4\n        # 82. \u6811\u72b6\u6570\u7ec4\n        # 83. \u6811\u72b6\u6570\u7ec4\n        # 84. \u6811\u72b6\u6570\u7ec4\n        # 85. \u6811\u72b6\u6570\u7ec4\n        # 86. \u6811\u72b6\u6570\u7ec4\n        # 87. \u6811\u72b6"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by start\n        intervals.sort(key=lambda x: x[0])\n        \n        # max end\n        max_end = intervals[-1][1]\n        \n        # max size\n        max_size = 0\n        \n        # current size\n        cur_size = 0\n        \n        # current end\n        cur_end = 0\n        \n        # iterate\n        for interval in intervals:\n            # if interval[0] > cur_end\n            if interval[0] > cur_end:\n                # update current size\n                cur_size = interval[1] - cur_end\n                # update current end\n                cur_end = interval[1]\n            # if interval[1] > cur_end\n            if interval[1] > cur_end:\n                # update current size\n                cur_size -= 1\n                # update current end\n                cur_end = interval[1]\n            # if interval[1] == cur_end\n            if interval[1] == cur_end:\n                # update current size\n                cur_size -= 1\n                # update current end\n                cur_end = interval[1]\n            # if interval[0] == cur_end\n            if interval[0] == cur_end:\n                # update current size\n                cur_size += 1\n                # update current end\n                cur_end = interval[1]\n            # update max size\n            max_size = max(max_size, cur_size)\n        \n        # return max size\n        return max_size"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n        \n    def isMirror(self, left, right):\n        if left is None:\n            return right is None\n        if right is None:\n            return False\n        if left.val != right.val:\n            return False\n        return self.isMirror(left.left, right.right) and self.isMirror(left.right, right.left)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765\n        # 3. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u6392\u5e8f\n        # 4. \u628a\u6240\u6709\u539f\u5b50\u6309\u7167\u539f\u5b50\u51fa\u73b0\u7684\u6b21\u6570\u5408\u5e76\n        \n        # 1. \u5148\u628a\u6240\u6709\u62ec\u53f7\u5206\u79bb\u51fa\u6765\n        # 2. \u628a\u6240\u6709\u539f\u5b50\u5206\u79bb\u51fa\u6765"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.right:\n                    stack.append(node.right)\n                if node.left:\n                    stack.append(node.left)\n                res.append(node.val)\n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 4^0 = 1\n        # 2. 4^1 = 4\n        # 3. 4^2 = 16\n        # 4. 4^3 = 64\n        # 5. 4^4 = 256\n        # 6. 4^5 = 1024\n        # 7. 4^6 = 4096\n        # 8. 4^7 = 16384\n        # 9. 4^8 = 65536\n        # 10. 4^9 = 262144\n        # 11. 4^10 = 1048576\n        # 12. 4^11 = 4194304\n        # 13. 4^12 = 16777216\n        # 14. 4^13 = 67108864\n        # 15. 4^14 = 268435456\n        # 16. 4^16 = 1073741824\n        # 17. 4^17 = 4294967296\n        # 18. 4^18 = 17179869184\n        # 19. 4^19 = 7205759403792\n        # 20. 4^20 = 288230376151712\n        # 21. 4^21 = 1099511627776\n        # 22. 4^22 = 479231362311232\n        # 23. 4^23 = 2097152009923520\n        # 24. 4^24 = 9536743164062400\n        # 25. 4^25 = 38742048947436480\n        # 26. 4^26 = 19173269244460800\n        # 27. 4^27 = 87890769217456000\n        # 28. 4^28 = 36893488137152000\n        # 29. 4^29 = 16777213193548800\n        # 30. 4^30 = 6871947673600000\n        # 31. 4^31 = 2748779069440000\n        # 32. 4^32 = 1099511627776000\n        # 33. 4^33 = 479231362311200\n        # 34. 4^34 = 209715200992352\n        # 35. 4^35 = 95367431640624\n        # 36. 4^36 = 38742048947436\n        # 37. 4^37 = 19173269244460\n        # 38. 4^38 = 8789076921745\n        # 39. 4^39 = 3689348813715\n        # 40. 4^40 = 1677721319354\n        # 41. 4^41 = 687194767360\n        # 42. 4^42 = 274877906944\n        # 43. 4^43 = 109951162777\n        # 44. 4^44 = 4"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        if n == 2:\n            return ['()()','(())']\n        if n == 3:\n            return ['()()()','()(())','(())()']\n        \n        res = ['()']\n        for i in range(3,n+1):\n            if i % 2 == 1:\n                continue\n            tmp = []\n            for j in res:\n                tmp.append('()'+j)\n                tmp.append(j+'()')\n            res = tmp\n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if nums[0] > 1:\n            return 1\n        \n        # edge case\n        if nums[-1] < n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1] == n:\n            return 0\n        \n        # edge case\n        if nums[-1]"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. stack\n        # 3. 2 pointers + stack\n        # 4. 2 pointers + stack + dict\n        # 5. 2 pointers + stack + dict + variable\n        # 6. 2 pointers + stack + dict + variable + variable\n        # 7. 2 pointers + stack + dict + variable + variable + variable\n        # 8. 2 pointers + stack + dict + variable + variable + variable + variable\n        # 9. 2 pointers + stack + dict + variable + variable + variable + variable + variable\n        # 10. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable\n        # 11. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable\n        # 12. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable\n        # 13. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 14. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 15. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 16. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 17. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 18. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 19. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 20. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 21. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 22. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 23. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 24. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 25. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 26. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 27. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable\n        # 28. 2 pointers + stack + dict + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable + variable"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator > 0:\n            sign = -1\n        elif numerator > 0 and denominator < 0:\n            sign = 1\n        else:\n            sign = 1\n        \n        numerator = abs(numerator)\n        denominator = abs(denominator)\n        \n        if numerator < denominator:\n            return self.fractionToDecimal(denominator, numerator)\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = []\n        res.append(str(numerator // denominator))\n        numerator = numerator % denominator\n        \n        if numerator == 0:\n            return \".\".join(res)\n        \n        res.append(\".\")\n        numerator *= 10\n        seen = {}\n        seen[numerator] = len(res)\n        \n        while numerator:\n            if numerator in seen:\n                res.insert(seen[numerator], \"(\")\n                res.append(\")\")\n                break\n            seen[numerator] = len(res)\n            res.append(str(numerator // denominator))\n            numerator = numerator % denominator\n            numerator *= 10\n        \n        return \"\".join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # split the list into two halves\n        mid = slow\n        slow = head\n        while slow.next != mid:\n            slow = slow.next\n        \n        # recursively sort the two halves\n        slow.next = None\n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        # merge the sorted halves\n        dummy = ListNode(0)\n        curr = dummy\n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        # add any remaining nodes from the left half\n        if left:\n            curr.next = left\n        \n        # add any remaining nodes from the right half\n        if right:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not envelopes:\n            return 0\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        # envelopes.sort(key=lambda x: (x[0], x[1]))\n        # envelopes.sort(key=lambda x: x[1])\n        # envelopes.sort(key=lambda x: -x[0])\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[0])\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key=lambda x: -x[1], reverse=True)\n        # envelopes.sort(key=lambda x: x[0], reverse=True)\n        # envelopes.sort(key=lambda x: -x[0], reverse=True)\n        # envelopes.sort(key=lambda x: x[1], reverse=True)\n        # envelopes.sort(key"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        # 1. 2 pass\n        # 2. 1 pass\n        # 3. 1 pass\n        # 4. 1 pass\n        # 5. 1 pass\n        # 6. 1 pass\n        # 7. 1 pass\n        # 8. 1 pass\n        # 9. 1 pass\n        # 10. 1 pass\n        # 11. 1 pass\n        # 12. 1 pass\n        # 13. 1 pass\n        # 14. 1 pass\n        # 15. 1 pass\n        # 16. 1 pass\n        # 17. 1 pass\n        # 18. 1 pass\n        # 19. 1 pass\n        # 20. 1 pass\n        # 21. 1 pass\n        # 22. 1 pass\n        # 23. 1 pass\n        # 24. 1 pass\n        # 25. 1 pass\n        # 26. 1 pass\n        # 27. 1 pass\n        # 28. 1 pass\n        # 29. 1 pass\n        # 30. 1 pass\n        # 31. 1 pass\n        # 32. 1 pass\n        # 33. 1 pass\n        # 34. 1 pass\n        # 35. 1 pass\n        # 36. 1 pass\n        # 37. 1 pass\n        # 38. 1 pass\n        # 39. 1 pass\n        # 40. 1 pass\n        # 41. 1 pass\n        # 42. 1 pass\n        # 43. 1 pass\n        # 44. 1 pass\n        # 45. 1 pass\n        # 46. 1 pass\n        # 47. 1 pass\n        # 48. 1 pass\n        # 49. 1 pass\n        # 50. 1 pass\n        # 51. 1 pass\n        # 52. 1 pass\n        # 53. 1 pass\n        # 54. 1 pass\n        # 55. 1 pass\n        # 56. 1 pass\n        # 57. 1 pass\n        # 58. 1 pass\n        # 59. 1 pass\n        # 60. 1 pass\n        # 61. 1 pass\n        # 62. 1 pass\n        # 63. 1 pass\n        # 64. 1 pass\n        # 65. 1 pass\n        # 66. 1 pass\n        # 67. 1 pass\n        # 68. 1 pass\n        # 69. 1 pass\n        # 70. 1 pass\n        # 71. 1 pass\n        # 72. 1 pass\n        # 73. 1 pass\n        # 74. 1 pass\n        # 75. 1 pass\n        # 76. 1 pass\n        # 77. 1 pass\n        # 78. 1 pass\n        # 79. 1 pass\n        # 80. 1 pass\n        # 81. 1 pass\n        # 82. 1 pass\n        # 83. 1 pass\n        # 84. 1 pass\n        # 85. 1 pass\n        # 86. 1 pass\n        # 87. 1 pass\n        # 88. 1 pass\n        # 89. 1 pass\n        # 90. 1 pass\n        # 91. 1 pass\n        # 92. 1 pass\n        # 93. 1 pass\n        # 94. 1 pass\n        # 95. 1 pass\n        # 96. 1 pass\n        # 97. 1 pass\n        # 98. 1 pass\n        # 99. 1 pass\n        # 100. 1 pass\n        # 101. 1 pass\n        # 102. 1 pass\n        # 103. 1 pass"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list is empty\n        if not head:\n            return None\n        \n        # if the list has only one node\n        if not head.next:\n            return None\n        \n        # if the list has two nodes\n        if not head.next.next:\n            head = head.next\n            return head\n        \n        # if the list has more than two nodes\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the list to the head of the list\n        # set the head of the"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersection(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        res = []\n        i, j = 0, 0\n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                if i == 0 or nums1[i] != nums1[i-1]:\n                    res.append(nums1[i])\n                i += 1\n                j += 1\n        return res"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(machines) % len(machines) != 0:\n            return -1\n        \n        avg = sum(machines) // len(machines)\n        ans, curr = 0, 0\n        for m in machines:\n            curr += m - avg\n            ans = max(ans, curr)\n            curr = max(curr, 0)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if m > n:\n            m, n = n, m\n        if m == 1:\n            return k\n        if k == 1:\n            return 1\n        if k == m * n:\n            return m * n\n        if k > m * n:\n            return -1\n        if k == 2:\n            return 2\n        if k == 3:\n            return 3\n        if k == 4:\n            return 4\n        if k == 5:\n            return 5\n        if k == 6:\n            return 6\n        if k == 7:\n            return 7\n        if k == 8:\n            return 8\n        if k == 9:\n            return 9\n        if k == 10:\n            return 10\n        if k == 11:\n            return 11\n        if k == 12:\n            return 12\n        if k == 13:\n            return 13\n        if k == 14:\n            return 14\n        if k == 15:\n            return 15\n        if k == 16:\n            return 16\n        if k == 17:\n            return 17\n        if k == 18:\n            return 18\n        if k == 19:\n            return 19\n        if k == 20:\n            return 20\n        if k == 21:\n            return 21\n        if k == 22:\n            return 22\n        if k == 23:\n            return 23\n        if k == 24:\n            return 24\n        if k == 25:\n            return 25\n        if k == 26:\n            return 26\n        if k == 27:\n            return 27\n        if k == 28:\n            return 28\n        if k == 29:\n            return 29\n        if k == 30:\n            return 30\n        if k == 31:\n            return 31\n        if k == 32:\n            return 32\n        if k == 33:\n            return 33\n        if k == 34:\n            return 34\n        if k == 35:\n            return 35\n        if k == 36:\n            return 36\n        if k == 37:\n            return 37\n        if k == 38:\n            return 38\n        if k == 39:\n            return 39\n        if k == 40:\n            return 40\n        if k == 41:\n            return 41\n        if k == 42:\n            return 42\n        if k == 43:\n            return 43\n        if k == 44:\n            return 44\n        if k == 45:\n            return 45\n        if k == 46:\n            return 46\n        if k == 47:\n            return 47\n        if k == 48:\n            return 48\n        if k == 49:\n            return 49\n        if k == 50:\n            return 50\n        if k == 51:\n            return 51\n        if k == 52:\n            return 52\n        if k == 53:\n            return 53\n        if k == 54:\n            return 54\n        if k == 55:\n            return 55\n        if k == 56:\n            return 56\n        if k == 57:\n            return 57\n        if k == 58:\n            return 58\n        if k == 59:\n            return 59\n        if k == 60:\n            return 60\n        if k == 61:\n            return 61\n        if k == 62:\n            return 62\n        if k == 63:\n            return 63\n        if k == 64:\n            return 64\n        if k == 65:\n            return 65\n        if k == 66:\n            return 66\n        if k == 67:\n            return 67\n        if k == 68:\n            return 68\n        if k == 69:\n            return 69\n        if k == 70:\n            return 70\n        if k == 71"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return head\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = slow\n        root = self.sortedListToBST(head)\n        root.next = self.sortedListToBST(slow)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is None:\n            curr.next = list2\n        else:\n            curr.next = list1\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        n, m = len(matrix), len(matrix[0])\n        heights = [0] * (m + 1)\n        max_area = 0\n        \n        for i in range(n):\n            new_heights = [m + 1] + [h if h else 0 for h in heights] + [m + 1]\n            stack = [0]\n            for j in range(1, m + 1):\n                if new_heights[j] > new_heights[stack[-1]]:\n                    while new_heights[j] < new_heights[stack[-1]]:\n                        h = new_heights[stack.pop()]\n                        max_area = max(max_area, (j - stack[-1] - 1) * h)\n                    stack.append(j)\n                else:\n                    stack.append(j)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not nums:\n            return [[]]\n        \n        if len(nums) == 1:\n            return [[], [nums[0]]]\n        \n        res = [[]]\n        for num in nums:\n            res += [item + [num] for item in res]\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if nums[0] < nums[-1]:\n            return nums[0]\n        \n        l, r = 0, len(nums) - 1\n        \n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            elif nums[m] < nums[r]:\n                r = m\n            else:\n                r -= 1\n        return nums[l]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s or s[0] not in ('+', '-', '.'):\n            s = '0' + s\n        s = s.split('e')\n        if len(s) == 2:\n            s = s[0].split('+')\n            if len(s) == 2:\n                s = s[0].split('-')\n                if len(s) == 2:\n                    s = s[0].split('+')\n                    if len(s) == 2:\n                        s = s[0].split('-')\n                        if len(s) == 2:\n                            s = s[0].split('+')\n                            if len(s) == 2:\n                                s = s[0].split('-')\n                                if len(s) == 2:\n                                    s = s[0].split('+')\n                                    if len(s) == 2:\n                                        s = s[0].split('-')\n                                        if len(s) == 2:\n                                            s = s[0].split('+')\n                                            if len(s) == 2:\n                                                s = s[0].split('-')\n                                                if len(s) == 2:\n                                                    s = s[0].split('+')\n                                                    if len(s) == 2:\n                                                        s = s[0].split('-')\n                                                        if len(s) == 2:\n                                                            s = s[0].split('+')\n                                                            if len(s) == 2:\n                                                                s = s[0].split('-')\n                                                                if len(s) == 2:\n                                                                    s = s[0].split('+')\n                                                                    if len(s) == 2:\n                                                                        s = s[0].split('-')\n                                                                        if len(s) == 2:\n                                                                            s = s[0].split('+')\n                                                                            if len(s) == 2:\n                                                                                s = s[0].split('-')\n                                                                                if len(s) == 2:\n                                                                                    s = s[0].split('+')\n                                                                                    if len(s) == 2:\n                                                                                        s = s[0].split('-')\n                                                                                        if len(s) == 2:\n                                                                                            s = s[0].split('+')\n                                                                                            if len(s) == 2:\n                                                                                                s = s[0].split('-')\n                                                                                                if len(s) == 2:\n                                                                                                    s = s[0].split('+')\n                                                                                                    if len(s) == 2:\n                                                                                                        s = s[0].split('-')\n                                                                                                        if len(s) == 2:\n                                                                                                            s = s[0].split('+')\n                                                                                                            if len(s) == 2:\n                                                                                                                s = s[0].split('-')\n                                                                                                                if len(s) == 2:\n                                                                                                                    s = s[0].split('+')\n                                                                                                                    if len(s) == 2:\n                                                                                                                        s = s[0].split('-')\n                                                                                                                        if len(s) == 2:\n                                                                                                                            s = s[0].split('+')\n                                                                                                                            if len(s) == 2:\n                                                                                                                                s = s[0].split('-')\n                                                                                                                                if len(s) == 2:\n                                                                                                                                    s = s[0].split('+')\n                                                                                                                                    if len(s) == 2:\n                                                                                                                                        s = s[0].split('-')\n                                                                                                                                        if len(s) == 2:\n                                                                                                                                            s = s[0].split('+')\n                                                                                                                                            if len(s) == 2:\n                                                                                                                                                s = s[0].split('-')\n                                                                                                                                                if len(s) == 2:\n                                                                                                                                                    s = s[0].split('+')\n                                                                                                                                                    if len(s) == 2:\n                                                                                                                                                        s = s[0].split('-')\n                                                                                                                                                        if len(s) == 2:\n                                                                                                                                                            s = s[0].split('+')\n                                                                                                                                                            if len(s) == 2:\n                                                                                                                                                                s = s[0].split('-')\n                                                                                                                                                                if len(s) == 2:\n                                                                                                                                                                    s = s[0].split('+')\n                                                                                                                                                                    if len(s) == 2:\n                                                                                                                                                                        s = s[0].split('-')\n                                                                                                                                                                        if len(s) == 2:"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        # 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1\n        # I, II, III, IV, V, VI, VII, VIII, IX, X, XI, XII, XIII, XIV, XV, XVI, XVII, XVIII, XIX, XX\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000\n        # 1, 4, 5, 9, 10, 40, 50, 9"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        ## O(n) time and O(1) space\n        ## XOR\n        ## s = a b c d\n        ## t = a b c d e\n        ## s ^ t = a b c d\n        ## t ^ s = a b c d\n        ## t ^ t = a b c d\n        ## s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s = a b c d\n        ## s ^ t ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ t = a b c d\n        ## s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t ^ s ^ t = a"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # 1. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 2. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u7a7a\u683c\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 3. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 4. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 5. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 6. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 7. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 8. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 9. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 10. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 11. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 12. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 13. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 14. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 15. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 16. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 17. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 18. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 19. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 20. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 21. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 22. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 23. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 24. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 25. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 26. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 27. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 28. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 29. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 30. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 31. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 32. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 33. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 34. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 35. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 36. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 37. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 38. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 39. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219\u5c06\u5176\u52a0\u5165\u5230\u4e00\u4e2a\u96c6\u5408\u4e2d\n        # 40. \u904d\u5386\u6574\u4e2a\u6570\u7ec4\uff0c\u5982\u679c\u9047\u5230\u6570\u5b57\uff0c\u5219"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3. Recursively traverse the tree\n        \n        # 1. Find the first and second node that are swapped\n        # 2. Swap the values of the two nodes\n        # 3"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # compare the first half and the second half\n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        if num < 4:\n            return False\n        \n        if num % 10 in [1, 4, 9]:\n            return False\n        \n        if num % 100 in [10, 25, 49]:\n            return False\n        \n        if num % 10000 in [1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000]:\n            return False\n        \n        if num}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0,1]\n        if n == 2:\n            return [0,1,1]\n        if n == 3:\n            return [0,1,1,2]\n        if n == 4:\n            return [0,1,1,2,2]\n        if n == 5:\n            return [0,1,1,2,2,3]\n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        if n == 25:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if head.val == val:\n            return self.removeElements(head.next, val)\n        \n        head.next = self.removeElements(head.next, val)\n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        if len(s1) != len(s2):\n            return False\n        if len(s1) < 4:\n            return s1 == s2\n        if s1[0] != s2[0]:\n            return False\n        if s1[0] == s2[-1]:\n            return self.isScramble(s1[1:], s2[:-1])\n        if s1[0] == s2[-2]:\n            return self.isScramble(s1[1:-1], s2[-1])\n        if s1[1] == s2[-1]:\n            return self.isScramble(s1[2:], s2[:-1])\n        if s1[1] == s2[-2]:\n            return self.isScramble(s1[2:], s2[-1])\n        if s1[2] == s2[-1]:\n            return self.isScramble(s1[3:], s2[:-1])\n        if s1[2] == s2[-2]:\n            return self.isScramble(s1[3:], s2[-1])\n        if s1[3] == s2[-1]:\n            return self.isScramble(s1[4:], s2[:-1])\n        if s1[3] == s2[-2]:\n            return self.isScramble(s1[4:], s2[-1])\n        if s1[4] == s2[-1]:\n            return self.isScramble(s1[5:], s2[:-1])\n        if s1[4] == s2[-2]:\n            return self.isScramble(s1[5:], s2[-1])\n        if s1[5] == s2[-1]:\n            return self.isScramble(s1[6:], s2[:-1])\n        if s1[5] == s2[-2]:\n            return self.isScramble(s1[6:], s2[-1])\n        if s1[6] == s2[-1]:\n            return self.isScramble(s1[7:], s2[:-1])\n        if s1[6] == s2[-2]:\n            return self.isScramble(s1[7:], s2[-1])\n        if s1[7] == s2[-1]:\n            return self.isScramble(s1[8:], s2[:-1])\n        if s1[7] == s2[-2]:\n            return self.isScramble(s1[8:], s2[-1])\n        if s1[8] == s2[-1]:\n            return self.isScramble(s1[9:], s2[:-1])\n        if s1[8] == s2[-2]:\n            return self.isScramble(s1[9:], s2[-1])\n        if s1[9] == s2[-1]:\n            return self.isScramble(s1[10:], s2[:-1])\n        if s1[9] == s2[-2]:\n            return self.isScramble(s1[10:], s2[-1])\n        if s1[10] == s2[-1]:\n            return self.isScramble(s1[11:], s2[:-1])\n        if s1[10] == s2[-2]:\n            return self.isScramble(s1[11:], s2[-1])\n        if s1[11] == s2[-1]:\n            return self.isScramble(s1[12:], s2[:-1])\n        if s1[11] == s2[-2]:\n            return self.isScramble(s1[12:], s2[-1])\n        if s1[12] == s2[-1]:\n            return self.isScramble(s1[13:], s2[:-1])\n        if s1[12] == s2[-2]:\n            return self.isScramble(s1[13:], s2[-1])\n        if s1[13] == s2[-1]:"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        # split the path into a list of directories\n        dirs = path.split('/')\n        \n        # initialize a stack to store the directories\n        stack = []\n        \n        # iterate over the directories in the list\n        for dir in dirs:\n            # if the directory is '..', pop the last directory from the stack\n            if dir == '..':\n                if stack:\n                    stack.pop()\n            # if the directory is not '..', add it to the stack\n            elif dir and dir != '.':\n                stack.append(dir)\n        \n        # join the stack with a '/' and return the result\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a trie\n        trie = {}\n        for word in words:\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            node['#'] = '#'\n        \n        # build a set of words\n        res = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if board[i][j] in trie:\n                    self.dfs(board, i, j, trie, res)\n        \n        return list(res)\n    \n    def dfs(self, board, i, j, node, res):\n        char = board[i][j]\n        if char not in node:\n            return\n        if '#' in node:\n            res.add(char)\n        board[i][j] = '#'\n        if i > 0:\n            self.dfs(board, i-1, j, node[char], res)\n        if i < len(board)-1:\n            self.dfs(board, i+1, j, node[char], res)\n        if j > 0:\n            self.dfs(board, i, j-1, node[char], res)\n        if j < len(board[0])-1:\n            self.dfs(board, i, j+1, node[char], res)\n        board[i][j] = char"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        if len(s) == 0:\n            return True\n        \n        if len(s) == 1:\n            return False\n        \n        if len(s) == 2:\n            return s[0] == t[1]\n        \n        if len(s) == 3:\n            if s[0] == t[2]:\n                return True\n            if s[1] == t[0]:\n                return True\n            return False\n        \n        if len(s) == 4:\n            if s[0] == t[3]:\n                return True\n            if s[1] == t[2]:\n                return True\n            if s[2] == t[1]:\n                return True\n            return False\n        \n        if len(s) == 5:\n            if s[0] == t[4]:\n                return True\n            if s[1] == t[3]:\n                return True\n            if s[2] == t[2]:\n                return True\n            if s[3] == t[1]:\n                return True\n            return False\n        \n        if len(s) == 6:\n            if s[0] == t[5]:\n                return True\n            if s[1] == t[4]:\n                return True\n            if s[2] == t[3]:\n                return True\n            if s[3] == t[2]:\n                return True\n            if s[4] == t[1]:\n                return True\n            return False\n        \n        if len(s) == 7:\n            if s[0] == t[6]:\n                return True\n            if s[1] == t[5]:\n                return True\n            if s[2] == t[4]:\n                return True\n            if s[3] == t[3]:\n                return True\n            if s[4] == t[2]:\n                return True\n            if s[5] == t[1]:\n                return True\n            return False\n        \n        if len(s) == 8:\n            if s[0] == t[7]:\n                return True\n            if s[1] == t[6]:\n                return True\n            if s[2] == t[5]:\n                return True\n            if s[3] == t[4]:\n                return True\n            if s[4] == t[3]:\n                return True\n            if s[5] == t[2]:\n                return True\n            if s[6] == t[1]:\n                return True\n            return False\n        \n        if len(s) == 9:\n            if s[0] == t[8]:\n                return True\n            if s[1] == t[7]:\n                return True\n            if s[2] == t[6]:\n                return True\n            if s[3] == t[5]:\n                return True\n            if s[4] == t[4]:\n                return True\n            if s[5] == t[3]:\n                return True\n            if s[6] == t[2]:\n                return True\n            if s[7] == t[1]:\n                return True\n            return False\n        \n        if len(s) == 10:\n            if s[0] == t[9]:\n                return True\n            if s[1] == t[8]:\n                return True\n            if s[2] == t[7]:\n                return True\n            if s[3] == t[6]:\n                return True\n            if s[4] == t[5]:\n                return True\n            if s[5] == t[4]:\n                return True\n            if s[6] == t[3]:\n                return True\n            if s[7] == t[2]:\n                return True\n            if s[8] == t[1]:\n                return True\n            return False\n        \n        if len(s) == 11:\n            if s[0] == t[10]:\n                return True\n            if s[1] == t[9]:\n                return True\n            if s[2] == t[8]:\n                return True\n            if s[3] == t[7]:\n                return True\n            if s[4] == t[6]:\n                return True\n            if s[5] == t[5]:\n                return True\n            if s[6] == t"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check row\n        # 2. check col\n        # 3. check 3x3\n        \n        # 1. check row\n        # 2. check col\n        # 3. check 3x3\n        \n        # 1. check row\n        row_set = [set() for _ in range(9)]\n        col_set = [set() for _ in range(9)]\n        box_set = [set() for _ in range(9)]\n        \n        for i in range(9):\n            for j in range(9):\n                if board[i][j] != '.':\n                    if board[i][j] in row_set[i]:\n                        return False\n                    else:\n                        row_set[i].add(board[i][j])\n                if board[j][i] != '.':\n                    if board[j][i] in col_set[i]:\n                        return False\n                    else:\n                        col_set[i].add(board[j][i])\n                if i % 3 == 0 and j % 3 == 0:\n                    if board[i][j] in box_set[0]:\n                        return False\n                    else:\n                        box_set[0].add(board[i][j])\n                if i % 3 == 1 and j % 3 == 0:\n                    if board[i][j] in box_set[1]:\n                        return False\n                    else:\n                        box_set[1].add(board[i][j])\n                if i % 3 == 2 and j % 3 == 0:\n                    if board[i][j] in box_set[2]:\n                        return False\n                    else:\n                        box_set[2].add(board[i][j])\n                if i % 3 == 0 and j % 3 == 1:\n                    if board[i][j] in box_set[3]:\n                        return False\n                    else:\n                        box_set[3].add(board[i][j])\n                if i % 3 == 1 and j % 3 == 1:\n                    if board[i][j] in box_set[4]:\n                        return False\n                    else:\n                        box_set[4].add(board[i][j])\n                if i % 3 == 2 and j % 3 == 1:\n                    if board[i][j] in box_set[5]:\n                        return False\n                    else:\n                        box_set[5].add(board[i][j])\n                if i % 3 == 0 and j % 3 == 2:\n                    if board[i][j] in box_set[6]:\n                        return False\n                    else:\n                        box_set[6].add(board[i][j])\n                if i % 3 == 1 and j % 3 == 2:\n                    if board[i][j] in box_set[7]:\n                        return False\n                    else:\n                        box_set[7].add(board[i][j])\n                if i % 3 == 2 and j % 3 == 2:\n                    if board[i][j] in box_set[8]:\n                        return False\n                    else:\n                        box_set[8].add(board[i][j])\n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        i = 1\n        while i <= n:\n            if i % 15 == 0:\n                res.append(\"FizzBuzz\")\n            elif i % 5 == 0:\n                res.append(\"Buzz\")\n            elif i % 3 == 0:\n                res.append(\"Fizz\")\n            else:\n                res.append(str(i))\n            i += 1\n        return res"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^3 * 26^4 * 26^5 * 26^6 * 26^7\n        # 26^0 * 26^1 * 26^2 * 26^"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 1 pass\n        # 3. 2 pass\n        # 4. 2 pass\n        # 5. 2 pass\n        # 6. 2 pass\n        # 7. 2 pass\n        # 8. 2 pass\n        # 9. 2 pass\n        # 10. 2 pass\n        # 11. 2 pass\n        # 12. 2 pass\n        # 13. 2 pass\n        # 14. 2 pass\n        # 15. 2 pass\n        # 16. 2 pass\n        # 17. 2 pass\n        # 18. 2 pass\n        # 19. 2 pass\n        # 20. 2 pass\n        # 21. 2 pass\n        # 22. 2 pass\n        # 23. 2 pass\n        # 24. 2 pass\n        # 25. 2 pass\n        # 26. 2 pass\n        # 27. 2 pass\n        # 28. 2 pass\n        # 29. 2 pass\n        # 30. 2 pass\n        # 31. 2 pass\n        # 32. 2 pass\n        # 33. 2 pass\n        # 34. 2 pass\n        # 35. 2 pass\n        # 36. 2 pass\n        # 37. 2 pass\n        # 38. 2 pass\n        # 39. 2 pass\n        # 40. 2 pass\n        # 41. 2 pass\n        # 42. 2 pass\n        # 43. 2 pass\n        # 44. 2 pass\n        # 45. 2 pass\n        # 46. 2 pass\n        # 47. 2 pass\n        # 48. 2 pass\n        # 49. 2 pass\n        # 50. 2 pass\n        # 51. 2 pass\n        # 52. 2 pass\n        # 53. 2 pass\n        # 54. 2 pass\n        # 55. 2 pass\n        # 56. 2 pass\n        # 57. 2 pass\n        # 58. 2 pass\n        # 59. 2 pass\n        # 60. 2 pass\n        # 61. 2 pass\n        # 62. 2 pass\n        # 63. 2 pass\n        # 64. 2 pass\n        # 65. 2 pass\n        # 66. 2 pass\n        # 67. 2 pass\n        # 68. 2 pass\n        # 69. 2 pass\n        # 70. 2 pass\n        # 71. 2 pass\n        # 72. 2 pass\n        # 73. 2 pass\n        # 74. 2 pass\n        # 75. 2 pass\n        # 76. 2 pass\n        # 77. 2 pass\n        # 78. 2 pass\n        # 79. 2 pass\n        # 80. 2 pass\n        # 81. 2 pass\n        # 82. 2 pass\n        # 83. 2 pass\n        # 84. 2 pass\n        # 85. 2 pass\n        # 86. 2 pass\n        # 87. 2 pass\n        # 88. 2 pass\n        # 89. 2 pass\n        # 90. 2 pass\n        # 91. 2 pass\n        # 92. 2 pass\n        # 93. 2 pass\n        # 94. 2 pass\n        # 95. 2 pass\n        # 96. 2 pass\n        # 97. 2 pass\n        # 98. 2 pass\n        # 99. 2 pass\n        # 100. 2 pass\n        # 101. 2 pass\n        # 102. 2 pass\n        # 103."}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            next = slow.next\n            slow.next = prev\n            prev = slow\n            slow = next\n        \n        # connect the first half to the second half\n        first, second = head, prev\n        while second.next:\n            first, second = first.next, second.next\n        \n        # reorder the list\n        first.next = None\n        while first:\n            next = first.next\n            first.next = second\n            first, second = next, first\n        \n        return head"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # if len(pattern) != len(s.split(' ')):\n        #     return False\n        \n        # pattern_dict = {}\n        # s_dict = {}\n        # for i, p in en\n        #     if p not in pattern_dict:\n        #         pattern_dict[p] = i\n        #     if i not in s_dict:\n        #         s_dict[i] = p\n        #     if pattern_dict[p] != s_dict[i]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len(s.split(' ')):\n        #     return False\n        \n        # pattern_dict = {}\n        # s_dict = {}\n        # for i, p in enumerate(pattern):\n        #     if p not in pattern_dict:\n        #         pattern_dict[p] = s[i]\n        #     if s[i] not in s_dict:\n        #         s_dict[s[i]] = p\n        #     if pattern_dict[p] != s_dict[s[i]]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len(s.split(' ')):\n        #     return False\n        \n        # pattern_dict = {}\n        # s_dict = {}\n        # for i, p in enumerate(pattern):\n        #     if p not in pattern_dict:\n        #         pattern_dict[p] = s[i]\n        #     if s[i] not in s_dict:\n        #         s_dict[s[i]] = p\n        #     if pattern_dict[p] != s_dict[s[i]]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len(s.split(' ')):\n        #     return False\n        \n        # pattern_dict = {}\n        # s_dict = {}\n        # for i, p in enumerate(pattern):\n        #     if p not in pattern_dict:\n        #         pattern_dict[p] = s[i]\n        #     if s[i] not in s_dict:\n        #         s_dict[s[i]] = p\n        #     if pattern_dict[p] != s_dict[s[i]]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len(s.split(' ')):\n        #     return False\n        \n        # pattern_dict = {}\n        # s_dict = {}\n        # for i, p in enumerate(pattern):\n        #     if p not in pattern_dict:\n        #         pattern_dict[p] = s[i]\n        #     if s[i] not in s_dict:\n        #         s_dict[s[i]] = p\n        #     if pattern_dict[p] != s_dict[s[i]]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len(s.split(' ')):\n        #     return False\n        \n        # pattern_dict = {}\n        # s_dict = {}\n        # for i, p in enumerate(pattern):\n        #     if p not in pattern_dict:\n        #         pattern_dict[p] = s[i]\n        #     if s[i] not in s_dict:\n        #         s_dict[s[i]] = p\n        #     if pattern_dict[p] != s_dict[s[i]]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len(s.split(' ')):\n        #     return False\n        \n        # pattern_dict = {}\n        # s_dict = {}\n        # for i, p in enumerate(pattern):\n        #     if p not in pattern_dict:\n        #         pattern_dict[p] = s[i]\n        #     if s[i] not in s_dict:\n        #         s_dict[s[i]] = p\n        #     if pattern_dict[p] != s_dict[s[i]]:\n        #         return False\n        # return True\n        \n        # if len(pattern) != len"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        if len(nums) == 2:\n            return [nums, [nums[1], nums[0]]]\n        \n        if len(nums) == 3:\n            return [nums, [nums[1], nums[2], nums[0]], [nums[2], nums[1], nums[0]]]\n        \n        if len(nums) == 4:\n            return [nums, [nums[1], nums[2], nums[3], nums[0]], [nums[2], nums[3], nums[1], nums[0]], [nums[3], nums[1], nums[2], nums[0]], [nums[3], nums[2], nums[1], nums[0]]]\n        \n        if len(nums) == 5:\n            return [nums, [nums[1], nums[2], nums[3], nums[4], nums[0]], [nums[2], nums[3], nums[4], nums[1], nums[0]], [nums[3], nums[4], nums[1], nums[2], nums[0]], [nums[4], nums[1], nums[2], nums[3], nums[0]], [nums[4], nums[2], nums[3], nums[1], nums[0]], [nums[4], nums[3], nums[1], nums[2], nums[0]], [nums[4], nums[3], nums[2], nums[1], nums[0]]]\n        \n        if len(nums) == 6:\n            return [nums, [nums[1], nums[2], nums[3], nums[4], nums[5], nums[0]], [nums[2], nums[3], nums[4], nums[5], nums[1], nums[0]], [nums[3], nums[4], nums[5], nums[1], nums[2], nums[0]], [nums[4], nums[5], nums[1], nums[2], nums[3], nums[0]], [nums[5], nums[1], nums[2], nums[3], nums[4], nums[0]], [nums[5], nums[2], nums[3], nums[4], nums[1], nums[0]], [nums[5], nums[3], nums[4], nums[1], nums[2], nums[0]], [nums[5], nums[4], nums[1], nums[2], nums[3], nums[0]], [nums[5], nums[4], nums[2], nums[3], nums[1], nums[0]], [nums[5], nums[4], nums[3], nums[1], nums[2], nums[0]], [nums[5], nums[4], nums[3], nums[2], nums[1], nums[0]]]\n        \n        if len(nums) == 7:\n            return [nums, [nums[1], nums[2], nums[3], nums[4], nums[5], nums[6], nums[0]], [nums[2], nums[3], nums[4], nums[5], nums[6], nums[1], nums[0]], [nums[3], nums[4], nums[5], nums[6], nums[1], nums[2], nums[0]], [nums[4], nums[5], nums[6], nums[1], nums[2], nums[3], nums[0]], [nums[5], nums[6], nums[1], nums[2], nums[3], nums[4], nums[0]], [nums[6], nums[1], nums[2], nums[3], nums[4], num"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # if target is in the first row\n        if target < matrix[0][0] or target > matrix[-1][-1]:\n            return False\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[-1][0]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True\n        \n        # if target is in the first row\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last row\n        if target == matrix[-1][-1]:\n            return True\n        \n        # if target is in the first column\n        if target == matrix[0][0]:\n            return True\n        \n        # if target is in the last column\n        if target == matrix[0][-1]:\n            return True"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize the result list\n        result = ListNode(0)\n        # Initialize the current node\n        current = result\n        # Initialize the carry\n        carry = 0\n        \n        # Iterate over the lists\n        while l1 or l2 or carry:\n            # Calculate the sum of the current nodes\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            # Calculate the new value for the current node\n            current.val = carry % 10\n            # Calculate the carry for the next iteration\n            carry //= 10\n            # Create a new node if the sum is greater than 9\n            if carry or l1 or l2:\n                current.next = ListNode(0)\n                current = current.next\n        \n        # Return the result list\n        return result"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2's complement\n        # 2. 2's complement + 1\n        # 3. 2's complement + 1\n        # 4. 2's complement + 1\n        # 5. 2's complement + 1\n        # 6. 2's complement + 1\n        # 7. 2's complement + 1\n        # 8. 2's complement + 1\n        # 9. 2's complement + 1\n        # 10. 2's complement + 1\n        # 11. 2's complement + 1\n        # 12. 2's complement + 1\n        # 13. 2's complement + 1\n        # 14. 2's complement + 1\n        # 15. 2's complement + 1\n        # 16. 2's complement + 1\n        # 17. 2's complement + 1\n        # 18. 2's complement + 1\n        # 19. 2's complement + 1\n        # 20. 2's complement + 1\n        # 21. 2's complement + 1\n        # 22. 2's complement + 1\n        # 23. 2's complement + 1\n        # 24. 2's complement + 1\n        # 25. 2's complement + 1\n        # 26. 2's complement + 1\n        # 27. 2's complement + 1\n        # 28. 2's complement + 1\n        # 29. 2's complement + 1\n        # 30. 2's complement + 1\n        # 31. 2's complement + 1\n        # 32. 2's complement + 1\n        # 33. 2's complement + 1\n        # 34. 2's complement + 1\n        # 35. 2's complement + 1\n        # 36. 2's complement + 1\n        # 37. 2's complement + 1\n        # 38. 2's complement + 1\n        # 39. 2's complement + 1\n        # 40. 2's complement + 1\n        # 41. 2's complement + 1\n        # 42. 2's complement + 1\n        # 43. 2's complement + 1\n        # 44. 2's complement + 1\n        # 45. 2's complement + 1\n        # 46. 2's complement + 1\n        # 47. 2's complement + 1\n        # 48. 2's complement + 1\n        # 49. 2's complement + 1\n        # 50. 2's complement + 1\n        # 51. 2's complement + 1\n        # 52. 2's complement + 1\n        # 53. 2's complement + 1\n        # 54. 2's complement + 1\n        # 55. 2's complement + 1\n        # 56. 2's complement + 1\n        # 57. 2's complement + 1\n        # 58. 2's complement + 1\n        # 59. 2's complement + 1\n        # 60. 2's complement + 1\n        # 61. 2's complement + 1\n        # 62. 2's complement + 1\n        # 63. 2's complement + 1\n        # 64. 2's complement + 1\n        # 65. 2's complement + 1\n        # 66. 2's complement + 1\n        # 67. 2's complement + 1\n        # 68. 2's complement + 1\n        # 69. 2's complement + 1\n        # 70. 2's complement + 1\n        # 71. 2's complement + 1\n        # 72. 2's complement + 1\n        # 73. 2's complement + 1\n        # 74. 2's complement + 1"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        res = 0\n        diff = nums[1] - nums[0]\n        cnt = 0\n        \n        for i in range(1, len(nums) - 1):\n            if nums[i] - nums[i + 1] == diff:\n                cnt += 1\n            else:\n                res += cnt * (cnt + 1) // 2\n                cnt = 0\n                diff = nums[i] - nums[i + 1]\n        \n        res += cnt * (cnt + 1) // 2\n        \n        return res"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            if node.left:\n                stack.append(node.left)\n            if node.right:\n                stack.append(node.right)\n            result.append(node.val)\n            \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O(n) time, O(1) space\n        # 2 pointers\n        # O("}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. sort the words by length\n        # 2. use a set to store the words\n        # 3. use a dict to store the words\n        # 4. use a set to store the words\n        # 5. use a dict to store the words\n        # 6. use a set to store the words\n        # 7. use a dict to store the words\n        # 8. use a set to store the words\n        # 9. use a dict to store the words\n        # 10. use a set to store the words\n        # 11. use a dict to store the words\n        # 12. use a set to store the words\n        # 13. use a dict to store the words\n        # 14. use a set to store the words\n        # 15. use a dict to store the words\n        # 16. use a set to store the words\n        # 17. use a dict to store the words\n        # 18. use a set to store the words\n        # 19. use a dict to store the words\n        # 20. use a set to store the words\n        # 21. use a dict to store the words\n        # 22. use a set to store the words\n        # 23. use a dict to store the words\n        # 24. use a set to store the words\n        # 25. use a dict to store the words\n        # 26. use a set to store the words\n        # 27. use a dict to store the words\n        # 28. use a set to store the words\n        # 29. use a dict to store the words\n        # 30. use a set to store the words\n        # 31. use a dict to store the words\n        # 32. use a set to store the words\n        # 33. use a dict to store the words\n        # 34. use a set to store the words\n        # 35. use a dict to store the words\n        # 36. use a set to store the words\n        # 37. use a dict to store the words\n        # 38. use a set to store the words\n        # 39. use a dict to store the words\n        # 40. use a set to store the words\n        # 41. use a dict to store the words\n        # 42. use a set to store the words\n        # 43. use a dict to store the words\n        # 44. use a set to store the words\n        # 45. use a dict to store the words\n        # 46. use a set to store the words\n        # 47. use a dict to store the words\n        # 48. use a set to store the words\n        # 49. use a dict to store the words\n        # 50. use a set to store the words\n        # 51. use a dict to store the words\n        # 52. use a set to store the words\n        # 53. use a dict to store the words\n        # 54. use a set to store the words\n        # 55. use a dict to store the words\n        # 56. use a set to store the words\n        # 57. use a dict to store the words\n        # 58. use a set to store the words\n        # 59. use a dict to store the words\n        # 60. use a set to store the words\n        # 61. use a dict to store the words\n        # 62. use a set to store the words\n        # 63. use a dict to store the words\n        # 64. use a set to store the words\n        # 65. use a dict to store the words\n        # 66. use a set to store the words\n        # 67. use a dict to store the words\n        # 68. use a set to store the words\n        # 69. use a dict to store the words\n        # 70. use a set to store the words\n        # 71. use a dict to store the words\n        # 72. use a set to store the words\n        # 73. use a dict to store the words\n        # 74. use a set to store the words"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = -num\n        \n        res = ''\n        while num:\n            res = str(num % 7) + res\n            num //= 7\n        \n        if res[0] == '-':\n            res = '-' + res[1:]\n        \n        return res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # if n % 4 == 0:\n        #     return False\n        # return True\n        \n        # if n < 4:\n        #     return True\n        # return False\n        \n        # if n < 4:\n        #     return True\n        # return not n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 != 0\n        \n        # if n < 4:\n        #     return True\n        # return n % 4 == 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen\n        # 2. 2 queens\n        # 3. 3 queens\n        # 4. 4 queens\n        # 5. 5 queens\n        # 6. 6 queens\n        # 7. 7 queens\n        # 8. 8 queens\n        # 9. 9 queens\n        # 10. 10 queens\n        # 11. 11 queens\n        # 12. 12 queens\n        # 13. 13 queens\n        # 14. 14 queens\n        # 15. 15 queens\n        # 16. 16 queens\n        # 17. 17 queens\n        # 18. 18 queens\n        # 19. 19 queens\n        # 20. 20 queens\n        # 21. 21 queens\n        # 22. 22 queens\n        # 23. 23 queens\n        # 24. 24 queens\n        # 25. 25 queens\n        # 26. 26 queens\n        # 27. 27 queens\n        # 28. 28 queens\n        # 29. 29 queens\n        # 30. 30 queens\n        # 31. 31 queens\n        # 32. 32 queens\n        # 33. 33 queens\n        # 34. 34 queens\n        # 35. 35 queens\n        # 36. 36 queens\n        # 37. 37 queens\n        # 38. 38 queens\n        # 39. 39 queens\n        # 40. 40 queens\n        # 41. 41 queens\n        # 42. 42 queens\n        # 43. 43 queens\n        # 44. 44 queens\n        # 45. 45 queens\n        # 46. 46 queens\n        # 47. 47 queens\n        # 48. 48 queens\n        # 49. 49 queens\n        # 50. 50 queens\n        # 51. 51 queens\n        # 52. 52 queens\n        # 53. 53 queens\n        # 54. 54 queens\n        # 55. 55 queens\n        # 56. 56 queens\n        # 57. 57 queens\n        # 58. 58 queens\n        # 59. 59 queens\n        # 60. 60 queens\n        # 61. 61 queens\n        # 62. 62 queens\n        # 63. 63 queens\n        # 64. 64 queens\n        # 65. 65 queens\n        # 66. 66 queens\n        # 67. 67 queens\n        # 68. 68 queens\n        # 69. 69 queens\n        # 70. 70 queens\n        # 71. 71 queens\n        # 72. 72 queens\n        # 73. 73 queens\n        # 74. 74 queens\n        # 75. 75 queens\n        # 76. 76 queens\n        # 77. 77 queens\n        # 78. 78 queens\n        # 79. 79 queens\n        # 80. 80 queens\n        # 81. 81 queens\n        # 82. 82 queens\n        # 83. 83 queens\n        # 84. 84 queens\n        # 85. 85 queens\n        # 86. 86 queens\n        # 87. 87 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. \u521d\u59cb\u5316\n        # 2. \u9012\u5f52\n        # 3. \u7ec8\u6b62\u6761\u4ef6\n        # 4. \u8fd4\u56de\u503c\n        # 5. \u72b6\u6001\u8f6c\u79fb\n        # 6. \u521d\u59cb\u5316\u72b6\u6001\n        # 7. \u72b6\u6001\u8f6c\u79fb\n        # 8. \u7ec8\u6b62\u6761\u4ef6\n        # 9. \u8fd4\u56de\u503c\n        # 10. \u72b6\u6001\u8f6c\u79fb\n        # 11. \u521d\u59cb\u5316\u72b6\u6001\n        # 12. \u72b6\u6001\u8f6c\u79fb\n        # 13. \u7ec8\u6b62\u6761\u4ef6\n        # 14. \u8fd4\u56de\u503c\n        # 15. \u72b6\u6001\u8f6c\u79fb\n        # 16. \u521d\u59cb\u5316\u72b6\u6001\n        # 17. \u72b6\u6001\u8f6c\u79fb\n        # 18. \u7ec8\u6b62\u6761\u4ef6\n        # 19. \u8fd4\u56de\u503c\n        # 20. \u72b6\u6001\u8f6c\u79fb\n        # 21. \u521d\u59cb\u5316\u72b6\u6001\n        # 22. \u72b6\u6001\u8f6c\u79fb\n        # 23. \u7ec8\u6b62\u6761\u4ef6\n        # 24. \u8fd4\u56de\u503c\n        # 25. \u72b6\u6001\u8f6c\u79fb\n        # 26. \u521d\u59cb\u5316\u72b6\u6001\n        # 27. \u72b6\u6001\u8f6c\u79fb\n        # 28. \u7ec8\u6b62\u6761\u4ef6\n        # 29. \u8fd4\u56de\u503c\n        # 30. \u72b6\u6001\u8f6c\u79fb\n        # 31. \u521d\u59cb\u5316\u72b6\u6001\n        # 32. \u72b6\u6001\u8f6c\u79fb\n        # 33. \u7ec8\u6b62\u6761\u4ef6\n        # 34. \u8fd4\u56de\u503c\n        # 35. \u72b6\u6001\u8f6c\u79fb\n        # 36. \u521d\u59cb\u5316\u72b6\u6001\n        # 37. \u72b6\u6001\u8f6c\u79fb\n        # 38. \u7ec8\u6b62\u6761\u4ef6\n        # 39. \u8fd4\u56de\u503c\n        # 40. \u72b6\u6001\u8f6c\u79fb\n        # 41. \u521d\u59cb\u5316\u72b6\u6001\n        # 42. \u72b6\u6001\u8f6c\u79fb\n        # 43. \u7ec8\u6b62\u6761\u4ef6\n        # 44. \u8fd4\u56de\u503c\n        # 45. \u72b6\u6001\u8f6c\u79fb\n        # 46. \u521d\u59cb\u5316\u72b6\u6001\n        # 47. \u72b6\u6001\u8f6c\u79fb\n        # 48. \u7ec8\u6b62\u6761\u4ef6\n        # 49. \u8fd4\u56de\u503c\n        # 50. \u72b6\u6001\u8f6c\u79fb\n        # 51. \u521d\u59cb\u5316\u72b6\u6001\n        # 52. \u72b6\u6001\u8f6c\u79fb\n        # 53. \u7ec8\u6b62\u6761\u4ef6\n        # 54. \u8fd4\u56de\u503c\n        # 55. \u72b6\u6001\u8f6c\u79fb\n        # 56. \u521d\u59cb\u5316\u72b6\u6001\n        # 57. \u72b6\u6001\u8f6c\u79fb\n        # 58. \u7ec8\u6b62\u6761\u4ef6\n        # 59. \u8fd4\u56de\u503c\n        # 60. \u72b6\u6001\u8f6c\u79fb\n        # 61. \u521d\u59cb\u5316\u72b6\u6001\n        # 62. \u72b6\u6001\u8f6c\u79fb\n        # 63. \u7ec8\u6b62\u6761\u4ef6\n        # 64. \u8fd4\u56de\u503c\n        # 65. \u72b6\u6001\u8f6c\u79fb\n        # 66. \u521d\u59cb\u5316\u72b6\u6001\n        # 67. \u72b6\u6001\u8f6c\u79fb\n        # 68. \u7ec8\u6b62\u6761\u4ef6\n        # 69. \u8fd4\u56de\u503c\n        # 70. \u72b6\u6001\u8f6c\u79fb\n        # 71. \u521d\u59cb\u5316\u72b6\u6001\n        # 72. \u72b6\u6001\u8f6c\u79fb\n        # 73. \u7ec8\u6b62\u6761\u4ef6\n        # 74. \u8fd4\u56de\u503c\n        # 75. \u72b6\u6001\u8f6c\u79fb\n        # 76. \u521d\u59cb\u5316\u72b6\u6001\n        # 77. \u72b6\u6001\u8f6c\u79fb\n        # 78. \u7ec8\u6b62\u6761\u4ef6\n        # 79. \u8fd4\u56de\u503c\n        # 80. \u72b6\u6001\u8f6c\u79fb\n        # 81. \u521d\u59cb\u5316\u72b6\u6001\n        # 82. \u72b6\u6001\u8f6c\u79fb\n        # 83. \u7ec8\u6b62\u6761\u4ef6\n        # 84. \u8fd4\u56de\u503c\n        # 85. \u72b6\u6001\u8f6c\u79fb\n        # 86. \u521d\u59cb\u5316\u72b6\u6001\n        # 87. \u72b6\u6001\u8f6c\u79fb\n        # 88. \u7ec8\u6b62\u6761\u4ef6\n        # 89. \u8fd4\u56de\u503c\n        # 90. \u72b6\u6001\u8f6c\u79fb\n        # 91. \u521d\u59cb\u5316\u72b6\u6001\n        # 92. \u72b6\u6001\u8f6c\u79fb\n        # 93. \u7ec8\u6b62\u6761\u4ef6\n        # 94. \u8fd4\u56de\u503c\n        # 95. \u72b6\u6001\u8f6c\u79fb\n        # 96. \u521d"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return True\n        \n        if not board:\n            return False\n        \n        if not board[0]:\n            return False\n        \n        if not word[0]:\n            return False\n        \n        if len(board) == 1 and len(board[0]) == 1:\n            return board[0][0] == word[0]\n        \n        if len(board) == 1:\n            return word[0] in board[0]\n        \n        if len(board[0]) == 1:\n            return any(word[0] in row for row in board)\n        \n        if word[0] in board[0]:\n            return True\n        \n        if word[-1] in board[-1]:\n            return True\n        \n        if word[-1] in board[0]:\n            return True\n        \n        if word[0] in board[-1]:\n            return True\n        \n        if word[0] in board[0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[-1][0]:\n            return True\n        \n        if word[-1] in board[-1][-1]:\n            return True\n        \n        if word[0] in board[0][-1]:\n            return True\n        \n        if word[-1] in board[0][-1]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0][0]:\n            return True\n        \n        if word[-1] in board[0][0]:\n            return True\n        \n        if word[0] in board[0"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1] = nums1[m-1]\n        # nums1[m+n-1]"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1st max\n        # 2nd max\n        # 3rd max\n        # 4th max\n        # 5th max\n        # 6th max\n        # 7th max\n        # 8th max\n        # 9th max\n        # 10th max\n        # 11th max\n        # 12th max\n        # 13th max\n        # 14th max\n        # 15th max\n        # 16th max\n        # 17th max\n        # 18th max\n        # 19th max\n        # 20th max\n        # 21st max\n        # 22nd max\n        # 23rd max\n        # 24th max\n        # 25th max\n        # 26th max\n        # 27th max\n        # 28th max\n        # 29th max\n        # 30th max\n        # 31st max\n        # 32nd max\n        # 33rd max\n        # 34th max\n        # 35th max\n        # 36th max\n        # 37th max\n        # 38th max\n        # 39th max\n        # 40th max\n        # 41st max\n        # 42nd max\n        # 43rd max\n        # 44th max\n        # 45th max\n        # 46th max\n        # 47th max\n        # 48th max\n        # 49th max\n        # 50th max\n        # 51st max\n        # 52nd max\n        # 53rd max\n        # 54th max\n        # 55th max\n        # 56th max\n        # 57th max\n        # 58th max\n        # 59th max\n        # 60th max\n        # 61st max\n        # 62nd max\n        # 63rd max\n        # 64th max\n        # 65th max\n        # 66th max\n        # 67th max\n        # 68th max\n        # 69th max\n        # 70th max\n        # 71st max\n        # 72nd max\n        # 73rd max\n        # 74th max\n        # 75th max\n        # 76th max\n        # 77th max\n        # 78th max\n        # 79th max\n        # 80th max\n        # 81st max\n        # 82nd max\n        # 83rd max\n        # 84th max\n        # 85th max\n        # 86th max\n        # 87th max\n        # 88th max\n        # 89th max\n        # 90th max\n        # 91st max\n        # 92nd max\n        # 93rd max\n        # 94th max\n        # 95th max\n        # 96th max\n        # 97th max\n        # 98th max\n        # 99th max\n        # 100th max\n        # 101st max\n        # 102nd max\n        # 103rd max\n        # 104th max\n        # 105th max\n        # 106th max\n        # 107th max\n        # 108th max\n        # 109th max\n        # 110th max\n        # 111th max\n        # 112th max\n        # 113th max\n        # 114th max\n        # 115th max\n        # 116th max\n        # 117th max\n        # 118th max\n        # 119th max\n        # 120th max\n        # 121st max\n        # 122nd max\n        # 123rd max\n        # 124th max\n        # 125th max\n        # 126th"}]}