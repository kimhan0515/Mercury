{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        res = []\n        left, right = 0, n-1\n        top, bottom = 0, m-1\n        \n        while left <= right and top <= bottom:\n            \n            # left to right\n            for i in range(left, right+1):\n                res.append(matrix[top][i])\n            \n            top += 1\n            \n            # top to bottom\n            for i in range(top, bottom+1):\n                res.append(matrix[i][right])\n            \n            right -= 1\n            \n            # right to left\n            if top <= bottom:\n                for i in range(right, left-1, -1):\n                    res.append(matrix[bottom][i])\n                \n                bottom -= 1\n            \n            # bottom to top\n            if left <= right:\n                for i in range(bottom, top-1, -1):\n                    res.append(matrix[i][left])\n                \n                left += 1\n        \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end = nums[i]\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        for i in range(1, len(s) + 1):\n            for j in range(len(t), 0, -1):\n                if s[i - 1] == t[j - 1]:\n                    dp[j] += dp[j - 1]\n        \n        return dp[-1]"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Check if the array contains 0\n        if 0 not in nums:\n            return 1\n        \n        ## 2. Check if the array contains -1\n        if -1 not in nums:\n            return 1\n        \n        ## 3. Check if the array contains 1\n        if 1 not in nums:\n            return 2\n        \n        ## 4. Check if the array contains 2\n        if 2 not in nums:\n            return 3\n        \n        ## 5. Check if the array contains 3\n        if 3 not in nums:\n            return 4\n        \n        ## 6. Check if the array contains 4\n        if 4 not in nums:\n            return 5\n        \n        ## 7. Check if the array contains 5\n        if 5 not in nums:\n            return 6\n        \n        ## 8. Check if the array contains 6\n        if 6 not in nums:\n            return 7\n        \n        ## 9. Check if the array contains 7\n        if 7 not in nums:\n            return 8\n        \n        ## 10. Check if the array contains 8\n        if 8 not in nums:\n            return 9\n        \n        ## 11. Check if the array contains 9\n        if 9 not in nums:\n            return 10\n        \n        ## 12. Check if the array contains 10\n        if 10 not in nums:\n            return 11\n        \n        ## 13. Check if the array contains 11\n        if 11 not in nums:\n            return 12\n        \n        ## 14. Check if the array contains 12\n        if 12 not in nums:\n            return 13\n        \n        ## 15. Check if the array contains 13\n        if 13 not in nums:\n            return 14\n        \n        ## 16. Check if the array contains 14\n        if 14 not in nums:\n            return 15\n        \n        ## 17. Check if the array contains 15\n        if 15 not in nums:\n            return 16\n        \n        ## 18. Check if the array contains 16\n        if 16 not in nums:\n            return 17\n        \n        ## 19. Check if the array contains 17\n        if 17 not in nums:\n            return 18\n        \n        ## 20. Check if the array contains 18\n        if 18 not in nums:\n            return 19\n        \n        ## 21. Check if the array contains 19\n        if 19 not in nums:\n            return 20\n        \n        ## 22. Check if the array contains 20\n        if 20 not in nums:\n            return 21\n        \n        ## 23. Check if the array contains 21\n        if 21 not in nums:\n            return 22\n        \n        ## 24. Check if the array contains 22\n        if 22 not in nums:\n            return 23\n        \n        ## 25. Check if the array contains 23\n        if 23 not in nums:\n            return 24\n        \n        ## 26. Check if the array contains 24\n        if 24 not in nums:\n            return 25\n        \n        ## 27. Check if the array contains 25\n        if 25 not in nums:\n            return 26\n        \n        ## 28. Check if the array contains 26\n        if 26 not in nums:\n            return 27\n        \n        ## 29. Check if the array contains 27\n        if 27 not in nums:\n            return 28\n        \n        ## 30. Check if the array contains 28\n        if 28 not in nums:\n            return 29\n        \n        ## 31. Check if the array contains 29"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. Calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. Calculate the number of permutations\n        k -= 1\n        ans = \"\"\n        while True:\n            # 3. Find the number of the current permutation\n            ans += str(k // fact + 1)\n            k %= fact\n            if k == 0:\n                break\n            # 4. Find the next number\n            fact //= n - i\n            n -= 1\n        \n        return ans"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        left = 0\n        right = len(numbers) - 1\n        \n        while left < right:\n            if numbers[left] + numbers[right] == target:\n                return [left + 1, right + 1]\n            elif numbers[left] + numbers[right] < target:\n                left += 1\n            else:\n                right -= 1\n        \n        return [-1, -1]"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(i, curr, prev, res, op):\n            if i == len(num):\n                if curr == target:\n                    res.append(op)\n                return\n            \n            if i == 0:\n                backtrack(i + 1, curr, prev, res, op + num[i])\n            else:\n                backtrack(i + 1, curr + prev, int(num[i]), res, op + \"+\" + num[i])\n                backtrack(i + 1, curr - prev, -prev, res, op + \"-\" + num[i])\n                backtrack(i + 1, curr - prev + prev * i, prev * int(num[i]), res, op + \"*\" + num[i])\n        \n        res = []\n        backtrack(0, 0, 0, res, \"\")\n        return res"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr_sum):\n            if not root:\n                return 0\n            \n            if not root.left and not root.right:\n                return curr_sum * 10 + root.val\n            \n            left_sum = dfs(root.left, curr_sum * 10 + root.val)\n            right_sum = dfs(root.right, curr_sum * 10 + root.val)\n            \n            return left_sum + right_sum\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        \n        res = []\n        i = n - 1\n        while i >= 0:\n            if len(res) % (k + 1) == 0:\n                res.append('-')\n            res.append(s[i])\n            i -= 1\n        \n        return ''.join(res[::-1])"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total_gas = sum(gas)\n        total_cost = sum(cost)\n        \n        if total_gas < total_cost:\n            return -1\n        \n        start = 0\n        curr_gas = 0\n        \n        for i in range(len(gas)):\n            curr_gas += gas[i] - cost[i]\n            \n            if curr_gas < 0:\n                start = i + 1\n                curr_gas = 0\n                \n        return start"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-2, -1, -1):\n            for j in range(i+2, n):\n                for k in range(i+1, j):\n                    dp[i][j] = max(dp[i][j], nums[i] * nums[k] * nums[j] + dp[i][k] + dp[k][j])\n        \n        return dp[0][n-1]"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. iterate from the end of the list\n        # 2. if the last digit is 9, set it to 0 and carry = 1\n        # 3. if the last digit is not 9, set it to last digit + 1 and carry = 0\n        # 4. if the list is empty, add 1 to the beginning\n        # 5. return the list\n        \n        carry = 1\n        for i in range(len(digits)-1,-1,-1):\n            if digits[i] == 9:\n                digits[i] = 0\n                carry = 1\n            else:\n                digits[i] += carry\n                carry = 0\n                break\n        if carry == 1:\n            digits.insert(0,1)\n        return digits"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p:\n            return not s\n        \n        if len(p) == 1:\n            return s and (s[0] == p[0] or p[0] == '.')\n        \n        if p[1] == '*':\n            return self.isMatch(s, p[2:]) or (s and (s[0] == p[0] or p[0] == '.') and self.isMatch(s[1:], p))\n        \n        return self.isMatch(s[1:], p[1:]) and (s[0] == p[0] or p[0] == '.')"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        def pick(nums, k):\n            out = []\n            for i, num in enumerate(nums):\n                if len(out) < k:\n                    if num > out[-1]:\n                        out.append(num)\n                else:\n                    if num > out[-1]:\n                        out.pop()\n                        out.append(num)\n            return out\n        \n        if len(nums1) < k:\n            return pick(nums2, k)\n        if len(nums2) < k:\n            return pick(nums1, k)\n        \n        out = []\n        for i in range(k):\n            if nums1[i] > nums2[i]:\n                out.append(nums1[i])\n            else:\n                out.append(nums2[i])\n        \n        if len(nums1) - i > k - len(out):\n            out = out + pick(nums1[i+1:], k - len(out))\n        elif len(nums2) - i > k - len(out):\n            out = out + pick(nums2[i+1:], k - len(out))\n        \n        return out"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                sum += i + num // i\n        \n        return sum == num"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        \n        a = 0\n        b = 1\n        for i in range(2, n+1):\n            c = a + b\n            a = b\n            b = c\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(dungeon)\n        n = len(dungeon[0])\n        \n        dp = [[0 for _ in range(n)] for _ in range(m)]\n        \n        dp[m-1][n-1] = max(1, 1 - dungeon[m-1][n-1])\n        \n        for i in range(m-2, -1, -1):\n            dp[i][n-1] = max(dp[i+1][n-1] - dungeon[i][n-1], 1)\n        \n        for j in range(n-2, -1, -1):\n            dp[m-1][j] = max(dp[m-1][j+1] - dungeon[m-1][j], 1)\n        \n        for i in range(m-2, -1, -1):\n            for j in range(n-2, -1, -1):\n                dp[i][j] = max(min(dp[i+1][j], dp[i][j+1]) - dungeon[i][j], 1)\n        \n        return dp[0][0]"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        left, right = 0, nums[-1] - nums[0]\n        while left < right:\n            mid = (left + right) // 2\n            count = 0\n            j = 0\n            for i in range(len(nums)):\n                while nums[i] - nums[j] > mid:\n                    j += 1\n                count += i - j\n            if count >= k:\n                right = mid\n            else:\n                left = mid + 1\n        return left"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] != ' ':\n                count += 1\n        return count"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n        vowel_list = []\n        for i in s:\n            if i in vowels:\n                vowel_list.append(i)\n        vowel_list.reverse()\n        vowel_index = 0\n        result = []\n        for i in s:\n            if i in vowels:\n                result.append(vowel_list[vowel_index])\n                vowel_index += 1\n            else:\n                result.append(i)\n        return ''.join(result)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums:\n            if num - 1 not in nums_set:\n                curr_len = 1\n                while num + 1 in nums_set:\n                    curr_len += 1\n                    num += 1\n                max_len = max(max_len, curr_len)\n        \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach:\n        ## XOR all the numbers from 0 to n\n        ## XOR all the numbers from 0 to n+1\n        ## XOR all the numbers from 0 to n+2\n        ## XOR all the numbers from 0 to n+3\n        ## XOR all the numbers from 0 to n+4\n        ## XOR all the numbers from 0 to n+5\n        ## XOR all the numbers from 0 to n+6\n        ## XOR all the numbers from 0 to n+7\n        ## XOR all the numbers from 0 to n+8\n        ## XOR all the numbers from 0 to n+9\n        ## XOR all the numbers from 0 to n+10\n        ## XOR all the numbers from 0 to n+11\n        ## XOR all the numbers from 0 to n+12\n        ## XOR all the numbers from 0 to n+13\n        ## XOR all the numbers from 0 to n+14\n        ## XOR all the numbers from 0 to n+15\n        ## XOR all the numbers from 0 to n+16\n        ## XOR all the numbers from 0 to n+17\n        ## XOR all the numbers from 0 to n+18\n        ## XOR all the numbers from 0 to n+19\n        ## XOR all the numbers from 0 to n+20\n        ## XOR all the numbers from 0 to n+21\n        ## XOR all the numbers from 0 to n+22\n        ## XOR all the numbers from 0 to n+23\n        ## XOR all the numbers from 0 to n+24\n        ## XOR all the numbers from 0 to n+25\n        ## XOR all the numbers from 0 to n+26\n        ## XOR all the numbers from 0 to n+27\n        ## XOR all the numbers from 0 to n+28\n        ## XOR all the numbers from 0 to n+29\n        ## XOR all the numbers from 0 to n+30\n        ## XOR all the numbers from 0 to n+31\n        ## XOR all the numbers from 0 to n+32\n        ## XOR all the numbers from 0 to n+33\n        ## XOR all the numbers from 0 to n+34\n        ## XOR all the numbers from 0 to n+35\n        ## XOR all the numbers from 0 to n+36\n        ## XOR all the numbers from 0 to n+37\n        ## XOR all the numbers from 0 to n+38\n        ## XOR all the numbers from 0 to n+39\n        ## XOR all the numbers from 0 to n+40\n        ## XOR all the numbers from 0 to n+41\n        ## XOR all the numbers from 0 to n+42\n        ## XOR all the numbers from 0 to n+43\n        ## XOR all the numbers from 0 to n+44\n        ## XOR all the numbers from 0 to n+45\n        ## XOR all the numbers from 0 to n+46\n        ## XOR all the numbers from 0 to n+47\n        ## XOR all the numbers from 0 to n+48\n        ## XOR all the numbers from 0 to n+49\n        ## XOR all the numbers from 0 to n+50\n        ## XOR all the numbers from 0 to n+51\n        ## XOR all the numbers from 0 to n+52\n        ## XOR all the numbers from 0 to n+53\n        ## XOR all the numbers from 0 to n+54\n        ## XOR all the numbers from 0 to n+55\n        ## XOR all the numbers from 0 to n+56\n        ## XOR all the numbers from 0 to n+57\n        ## XOR all"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 1\n        \n        while queue:\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                if curr == endWord:\n                    return level\n                for i in range(len(curr)):\n                    for neighbor in graph[curr[:i] + \"*\" + curr[i+1:]]:\n                        if neighbor not in visited:\n                            visited.add(neighbor)\n                            queue.append(neighbor)\n            level += 1\n        \n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                if a[i] == '1' and b[i] == '1':\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n                        carry = 1\n                elif a[i] == '1' or b[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n            else:\n                if a[i] == '1':\n                    if carry == 1:\n                        res.append('0')\n                    else:\n                        res.append('1')\n                else:\n                    if carry == 1:\n                        res.append('1')\n                    else:\n                        res.append('0')\n        \n        if carry == 1:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums) == 0:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid\n        \n        if nums[left] != target:\n            return [-1,-1]\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = (left + right + 1) // 2\n            if nums[mid] > target:\n                right = mid - 1\n            else:\n                left = mid\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 0:\n            return 0\n        \n        i = 0\n        j = 1\n        \n        while j < len(nums):\n            if nums[i] == nums[j]:\n                j += 1\n            else:\n                i += 1\n                nums[i] = nums[j]\n                j += 1\n        \n        return i + 1"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(nums)\n        if n == 1:\n            return 0\n        \n        max_reach = nums[0]\n        jumps = 1\n        curr_reach = 0\n        \n        for i in range(1, n):\n            if i > max_reach:\n                jumps += 1\n                max_reach = curr_reach\n            curr_reach = max(curr_reach, i + nums[i])\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices)//2:\n            return sum(max(prices[i+1]-prices[i] for i in range(len(prices)-1)) for i in range(len(prices)-1))\n        \n        dp = [[0]*2 for _ in range(k+1)]\n        \n        for i in range(len(prices)-1):\n            for j in range(1,k+1):\n                dp[j][0] = max(dp[j][0],dp[j-1][1]+prices[i])\n                dp[j][1] = max(dp[j][1],dp[j][0]-prices[i])\n        \n        return dp[k][0]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = 2**32 + num\n        \n        hex_dict = {10:\"a\", 11:\"b\", 12:\"c\", 13:\"d\", 14:\"e\", 15:\"f\"}\n        hex_list = []\n        \n        while num > 0:\n            remainder = num % 16\n            if remainder < 10:\n                hex_list.append(str(remainder))\n            else:\n                hex_list.append(hex_dict[remainder])\n            num = num // 16\n        \n        hex_list.reverse()\n        return \"\".join(hex_list)"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # Create a hashmap to store the frequency of each character in the string\n        freq = {}\n        \n        # Iterate through the string and add each character to the hashmap\n        for char in s:\n            if char not in freq:\n                freq[char] = 1\n            else:\n                freq[char] += 1\n        \n        # Iterate through the string again and return the first character with a frequency of 1\n        for i, char in enumerate(s):\n            if freq[char] == 1:\n                return i\n        \n        # If no character with a frequency of 1 is found, return -1\n        return -1"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(nlog(k))\n        # Space Complexity: O(k)\n        \n        # Approach:\n        # 1. Sort the array\n        # 2. Iterate over the array and check if the difference between the current element and the next element is less than or equal to valueDiff\n        # 3. If the difference is greater than valueDiff, return True\n        # 4. If the difference is less than valueDiff, check if the difference between the current element and the next element is less than or equal to indexDiff\n        # 5. If the difference is greater than indexDiff, return True\n        # 6. If the difference is less than indexDiff, check if the difference between the current element and the next element is less than or equal to valueDiff\n        # 7. If the difference is greater than valueDiff, return True\n        # 8. If the difference is less than valueDiff, return False\n        \n        # Edge Cases:\n        # 1. If the array is empty, return False\n        # 2. If the valueDiff is 0, return False\n        # 3. If the indexDiff is 0, return False\n        \n        if len(nums) == 0 or valueDiff == 0:\n            return False\n        \n        nums.sort()\n        \n        for i in range(len(nums) - 1):\n            if nums[i + 1] - nums[i] > valueDiff:\n                return True\n            if i >= indexDiff:\n                if nums[i + 1] - nums[i] > indexDiff:\n                    return True\n        \n        return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,2\n        # 0,1,"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_count = 0\n        count = 0\n        \n        for i in nums:\n            if i == 1:\n                count += 1\n            else:\n                count = 0\n            max_count = max(max_count, count)\n        return max_count"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.countNodes(root.left)\n        right = self.countNodes(root.right)\n        \n        return left + right + 1"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if len(num1) < len(num2):\n            num1, num2 = num2, num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(num1)):\n            if i < len(num2):\n                val = int(num1[i]) + int(num2[i]) + carry\n            else:\n                val = int(num1[i]) + carry\n            \n            carry = val // 10\n            res.append(val % 10)\n        \n        if carry:\n            res.append(carry)\n        \n        return ''.join(map(str, res[::-1]))"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        num = 0\n        sign = '+'\n        for i in range(len(s)):\n            if s[i].isdigit():\n                num = num * 10 + int(s[i])\n            if s[i] in '+-' or i == len(s) - 1:\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                num = 0\n                sign = s[i]\n            if s[i] == '(':\n                stack.append(sign)\n            if s[i] == ')':\n                sign = stack.pop()\n                if sign == '+':\n                    stack.append(num)\n                elif sign == '-':\n                    stack.append(-num)\n                num = 0\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        sorted_capital = sorted(zip(capital, profits))\n        \n        # iterate over sorted capital\n        for i in range(len(sorted_capital)):\n            # if we can afford the capital\n            if sorted_capital[i][0] <= w:\n                # add the profit\n                w += sorted_capital[i][1]\n            # if we have no more capital\n            else:\n                # we can't afford anymore\n                break\n        \n        # return the capital\n        return w"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        stack = []\n        for i in s:\n            if i == '(' or i == '{' or i == '[':\n                stack.append(i)\n            else:\n                if stack:\n                    if i == ')' and stack[-1] == '(':\n                        stack.pop()\n                    elif i == '}' and stack[-1] == '{':\n                        stack.pop()\n                    elif i == ']' and stack[-1] == '[':\n                        stack.pop()\n                    else:\n                        return False\n                else:\n                    return False\n        if stack:\n            return False\n        else:\n            return True"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first index i where nums[i] < nums[i+1]\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i+1]:\n            i -= 1\n        \n        # if i < 0, it means that the array is in descending order, which means it is the last permutation\n        if i < 0:\n            nums.reverse()\n            return\n        \n        # find the index j where nums[j] > nums[i]\n        j = len(nums) - 1\n        while j > i and nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap nums[i] and nums[j]\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the subarray from i+1 to the end\n        left, right = i+1, len(nums) - 1\n        while left < right:\n            nums[left], nums[right] = nums[right], nums[left]\n            left += 1\n            right -= 1\n        \n        return nums"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap\n        hashmap = {}\n        \n        # Iterate through the array\n        for i in range(len(nums)):\n            \n            # If the element is already in the hashmap, return True\n            if nums[i] in hashmap:\n                return True\n            \n            # Otherwise, add the element to the hashmap\n            hashmap[nums[i]] = i\n            \n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_gap = 0\n        for i in range(1, len(nums)):\n            max_gap = max(max_gap, nums[i] - nums[i - 1])\n        \n        return max_gap"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for i in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.append(level)\n        \n        return result"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row)\n        couples = [(row[i], row[i+1]) for i in range(0, n, 2)]\n        couples.sort()\n        couples = [couple for couple in couples if couple[0] % 2 != couple[1] % 2]\n        couples.sort()\n        return len(couples)"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if len(s1) == 0 and len(s2) == 0:\n            return True\n        \n        if len(s1) == 0:\n            return s2 == s3\n        \n        if len(s2) == 0:\n            return s1 == s3\n        \n        dp = [[False for _ in range(len(s2) + 1)] for _ in range(len(s1) + 1)]\n        \n        dp[0][0] = True\n        \n        for i in range(1, len(s1) + 1):\n            dp[i][0] = dp[i - 1][0] and s1[i - 1] == s3[i - 1]\n        \n        for j in range(1, len(s2) + 1):\n            dp[0][j] = dp[0][j - 1] and s2[j - 1] == s3[j - 1]\n        \n        for i in range(1, len(s1) + 1):\n            for j in range(1, len(s2) + 1):\n                dp[i][j] = (dp[i - 1][j] and s1[i - 1] == s3[i + j - 1]) or (dp[i][j - 1] and s2[j - 1] == s3[i + j - 1])\n        \n        return dp[len(s1)][len(s2)]"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        count = 0\n        i = 0\n        j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                count += 1\n                i += 1\n            j += 1\n        return count"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set(\"qwertyuiop\")\n        row2 = set(\"asdfghjkl\")\n        row3 = set(\"zxcvbnm\")\n        \n        res = []\n        \n        for word in words:\n            if word[0].lower() in row1:\n                row = row1\n            elif word[0].lower() in row2:\n                row = row2\n            else:\n                row = row3\n            \n            for letter in word:\n                if letter.lower() not in row:\n                    break\n            else:\n                res.append(word)\n        \n        return res"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        count = 1\n        \n        while count < left:\n            prev = curr\n            curr = curr.next\n            count += 1\n        \n        prev.next = None\n        tail = curr\n        \n        while count <= right:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n            count += 1\n        \n        tail.next = curr\n        head = prev\n        \n        return head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome that can be made from the beginning of the string\n        # then add the rest of the string to the beginning\n        # this is because the longest palindrome that can be made from the beginning of the string\n        # is the longest palindrome that can be made from the end of the string\n        # so we can add the rest of the string to the beginning of the string\n        # and then reverse the string and add it to the beginning\n        # this will give us the shortest palindrome that can be made from the beginning of the string\n        \n        # find the longest palindrome that can be made from the beginning of the string\n        # this is done by finding the longest palindrome that can be made from the end of the string\n        # and then reversing the string and adding it to the beginning\n        # this will give us the longest palindrome that can be made from the beginning of the string\n        # this is because the longest palindrome that can be made from the beginning of the string\n        # is the longest palindrome that can be made from the end of the string\n        # so we can add the rest of the string to the beginning of the string\n        # and then reverse the string and add it to the beginning\n        # this will give us the shortest palindrome that can be made from the beginning of the string\n        \n        # find the longest palindrome that can be made from the beginning of the string\n        # this is done by finding the longest palindrome that can be made from the end of the string\n        # and then reversing the string and adding it to the beginning\n        # this will give us the longest palindrome that can be made from the beginning of the string\n        # this is because the longest palindrome that can be made from the beginning of the string\n        # is the longest palindrome that can be made from the end of the string\n        # so we can add the rest of the string to the beginning of the string\n        # and then reverse the string and add it to the beginning\n        # this will give us the shortest palindrome that can be made from the beginning of the string\n        \n        # find the longest palindrome that can be made from the beginning of the string\n        # this is done by finding the longest palindrome that can be made from the end of the string\n        # and then reversing the string and adding it to the beginning\n        # this will give us the longest palindrome that can be made from the beginning of the string\n        # this is because the longest palindrome that can be made from the beginning of the string\n        # is the longest palindrome that can be made from the end of the string\n        # so we can add the rest of the string to the beginning of the string\n        # and then reverse the string and add it to the beginning\n        # this will give us the shortest palindrome that can be made from the beginning of the string\n        \n        # find the longest palindrome that can be made from the beginning of the string\n        # this is done by finding the longest palindrome that can be made from the end of the string\n        # and then reversing the string and adding it to the beginning\n        # this will give us the longest palindrome that can be made from the beginning of the string\n        # this is because the longest palindrome that can be made from the beginning of the string\n        # is the longest palindrome that can be made from the end of the string\n        # so we can add the rest of the string to the beginning of the string\n        # and then reverse the string and add it to the beginning\n        # this will give us the shortest palindrome that can be made from the beginning of the string\n        \n        # find the longest palindrome that can be made from the beginning of the string\n        # this is done by finding the longest palindrome that can be made from the end of the string\n        # and then reversing the string and adding it to the beginning\n        # this will give us the longest palindrome that can be made from the beginning of the string\n        # this is because the longest palindrome that can be made from the beginning of the string\n        # is the longest palindrome that can be made from the end of the string\n        # so we can add the rest of the string to the beginning of the string\n        # and then reverse the string and add it to the beginning\n        # this will give us the shortest palindrome that can be made from the beginning of the string\n        \n        # find the longest palindrome that can be made from the beginning"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(s) < len(t):\n            return \"\"\n        \n        if len(s) == len(t):\n            if s == t:\n                return s\n            else:\n                return \"\"\n        \n        t_dict = {}\n        for c in t:\n            if c not in t_dict:\n                t_dict[c] = 1\n            else:\n                t_dict[c] += 1\n        \n        s_dict = {}\n        for c in s:\n            if c not in s_dict:\n                s_dict[c] = 1\n            else:\n                s_dict[c] += 1\n        \n        if t_dict == s_dict:\n            return s\n        \n        left = 0\n        right = 0\n        min_len = len(s) + 1\n        min_left = 0\n        min_right = 0\n        while right < len(s):\n            if s[right] in t_dict:\n                if s_dict[s[right]] < t_dict[s[right]]:\n                    s_dict[s[right]] += 1\n                else:\n                    s_dict[s[right]] -= 1\n            right += 1\n            \n            while left < right and s_dict[s[left]] > t_dict[s[left]]:\n                s_dict[s[left]] -= 1\n                left += 1\n            \n            if s_dict[s[left]] == t_dict[s[left]]:\n                if right - left < min_len:\n                    min_len = right - left\n                    min_left = left\n                    min_right = right\n                s_dict[s[left]] -= 1\n                left += 1\n        \n        if min_len == len(s) + 1:\n            return \"\"\n        else:\n            return s[min_left:min_right]"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        for i in range(len(distance)-3):\n            if distance[i] >= distance[i+2] and distance[i+1] <= distance[i+3]:\n                return True\n            elif distance[i] <= distance[i+2] and distance[i+1] >= distance[i+3]:\n                return True\n            elif distance[i] >= distance[i+2] and distance[i+1] >= distance[i+3]:\n                if distance[i] >= distance[i+4] and distance[i+2] >= distance[i+4]:\n                    return True\n                elif distance[i] <= distance[i+4] and distance[i+2] <= distance[i+4]:\n                    return True\n                elif distance[i] <= distance[i+4] and distance[i+2] >= distance[i+4]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] <= distance[i+4]:\n                    return True\n            elif distance[i] <= distance[i+2] and distance[i+1] <= distance[i+3]:\n                if distance[i] <= distance[i+4] and distance[i+2] <= distance[i+4]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] >= distance[i+4]:\n                    return True\n                elif distance[i] >= distance[i+4] and distance[i+2] <= distance[i+4]:\n                    return True\n                elif distance[i] <= distance[i+4] and distance[i+2] >= distance[i+4]:\n                    return True\n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. count the frequency of each letter\n        # 2. if the frequency is odd, add 1 to the result\n        # 3. if the frequency is even, add it to the result\n        # 4. if the frequency is 1, add 1 to the result\n        # 5. return the result\n        \n        # 1.\n        freq = {}\n        for letter in s:\n            if letter not in freq:\n                freq[letter] = 1\n            else:\n                freq[letter] += 1\n        \n        # 2.\n        result = 0\n        for letter in freq:\n            if freq[letter] % 2 == 0:\n                result += freq[letter]\n            else:\n                result += freq[letter] - 1\n        \n        # 3.\n        if result < len(s):\n            result += 1\n        \n        # 4.\n        return result"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root = TreeNode(postorder[-1])\n        root_index = inorder.index(root.val)\n        root.left = self.buildTree(inorder[:root_index], postorder[:root_index])\n        root.right = self.buildTree(inorder[root_index+1:], postorder[root_index:-1])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 1. Find all the trees in the forest\n        trees = []\n        for i in range(len(forest)):\n            for j in range(len(forest[0])):\n                if forest[i][j] > 1:\n                    trees.append((i, j))\n        \n        # 2. Sort the trees by height\n        trees.sort(key=lambda x: forest[x[0]][x[1]])\n        \n        # 3. Start from the first tree and move to the next one\n        curr_row, curr_col = trees[0]\n        steps = 0\n        for i in range(1, len(trees)):\n            next_row, next_col = trees[i]\n            steps += self.bfs(forest, curr_row, curr_col, next_row, next_col)\n            if steps == -1:\n                return -1\n            curr_row, curr_col = next_row, next_col\n        \n        return steps\n    \n    def bfs(self, forest, start_row, start_col, end_row, end_col):\n        # Initialize a queue with the starting point\n        queue = collections.deque([(start_row, start_col)])\n        # Initialize a set to keep track of visited cells\n        visited = set()\n        visited.add((start_row, start_col))\n        # Initialize a list to keep track of the number of steps taken\n        steps = 0\n        \n        # Loop until the queue is empty\n        while queue:\n            # Increment the number of steps taken\n            steps += 1\n            # Loop through the number of cells in the queue\n            for _ in range(len(queue)):\n                # Pop the first cell from the queue\n                row, col = queue.popleft()\n                # Check if the current cell is the end point\n                if row == end_row and col == end_col:\n                    return steps\n                # Check if the current cell is not blocked\n                if forest[row][col] > 1:\n                    # Check if the cell to the left is not blocked\n                    if col > 0 and (row, col - 1) not in visited:\n                        queue.append((row, col - 1))\n                        visited.add((row, col - 1))\n                    # Check if the cell to the right is not blocked\n                    if col < len(forest[0]) - 1 and (row, col + 1) not in visited:\n                        queue.append((row, col + 1))\n                        visited.add((row, col + 1))\n                    # Check if the cell above is not blocked\n                    if row > 0 and (row - 1, col) not in visited:\n                        queue.append((row - 1, col))\n                        visited.add((row - 1, col))\n                    # Check if the cell below is not blocked\n                    if row < len(forest) - 1 and (row + 1, col) not in visited:\n                        queue.append((row + 1, col))\n                        visited.add((row + 1, col))\n        \n        # If the queue is empty, it means that there is no path from the starting point to the end point\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left and not root.right:\n            return 1\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        \n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc811\ub450\uc0ac \ud569\uc744 \uad6c\ud55c\ub2e4.\n        # 2. \uc811\ub450\uc0ac \ud569\uc744 \uc624\ub984\ucc28\uc21c\uc73c\ub85c \uc815\ub82c\ud55c\ub2e4.\n        # 3. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c\ub2e4.\n        # 4. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \uad6c\ud55c\ub2e4.\n        # 5. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 6. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 7. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 8. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 9. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 10. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 11. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 12. \uc811\ub450\uc0ac \ud569\uc758 \uc911\ubcf5\uc744 \uc81c\uac70\ud55c \uc811\ub450\uc0ac \ud569\uc758 \uc218\uc5d0\uc11c \uc811\ub450\uc0ac \ud569\uc758 \uc218\ub97c \ube7c\uc900\ub2e4.\n        # 13"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 2:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 3:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 4:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 5:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 6:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 7:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 8:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 9:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 10:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 11:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 12:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 13:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 14:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 15:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 16:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 17:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 18:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 19:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 20:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 21:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 22:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 23:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 24:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 25:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 26:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 27:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 28:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 29:\n        # Time Complexity: O(1)\n        # Space Complexity: O(1)\n        \n        # Approach 30:\n        # Time Complexity: O("}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        \n        while queue:\n            level = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            result.insert(0, level)\n        \n        return result"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        i = 0\n        j = 0\n        while i < len(s) and j < len(t):\n            if s[i] == t[j]:\n                i += 1\n            j += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        res = [0]\n        for i in range(1,n):\n            res.append(res[-1] + (1<<i))\n        \n        return res"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a = 1\n        b = 2\n        for i in range(3, n+1):\n            c = a + b\n            a = b\n            b = c\n        return c"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            \n            if (left and node.val <= left.val) or (right and node.val >= right.val):\n                return False\n            \n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # edge case\n        if len(intervals) == 0:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # edge case\n        if newInterval[1] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return intervals\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [newInterval]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[-1][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[-1][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] <= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] <= intervals[0][0] and newInterval[1] >= intervals[0][1]:\n            return [intervals[0], intervals[-1]]\n        \n        # edge case\n        if newInterval[0] >= intervals[0][0] and newInterval[1] <= intervals[0][1]:"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def isPalindrome(s):\n            return s == s[::-1]\n        \n        def backtrack(s, start, path, res):\n            if start == len(s):\n                res.append(path[:])\n                return\n            \n            for i in range(start, len(s)):\n                if isPalindrome(s[start:i+1]):\n                    backtrack(s, i+1, path + [s[start:i+1]], res)\n        \n        res = []\n        backtrack(s, 0, [], res)\n        return res"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        min_val = float('inf')\n        max_val = float('-inf')\n        min_range = [float('inf'), float('-inf')]\n        heap = []\n        \n        for i in range(len(nums)):\n            heapq.heappush(heap, (nums[i][0], i, 0))\n            min_val = min(min_val, nums[i][0])\n            max_val = max(max_val, nums[i][-1])\n            \n        while heap:\n            val, i, j = heapq.heappop(heap)\n            if max_val - val < min_range[1] - min_range[0]:\n                min_range = [val, val]\n            else:\n                min_range[1] = max_val\n            \n            if j + 1 < len(nums[i]):\n                heapq.heappush(heap, (nums[i][j+1], i, j+1))\n                max_val = max(max_val, nums[i][j+1])\n                \n        return min_range"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # BFS\n        q = [(grid[0][0], 0, 0)]\n        visited = set()\n        visited.add((0, 0))\n        res = 0\n        \n        while q:\n            curr, i, j = q.pop(0)\n            res = max(res, curr)\n            if i == n - 1 and j == n - 1:\n                return res\n            \n            for di, dj in [(0, 1), (0, -1), (1, 0), (-1, 0)]:\n                ni, nj = i + di, j + dj\n                if 0 <= ni < n and 0 <= nj < n and (ni, nj) not in visited:\n                    q.append((grid[ni][nj], ni, nj))\n                    visited.add((ni, nj))\n                    \n        return res"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 and n == 2:\n        #     return 2\n        # if m == 2 and n == 3:\n        #     return 3\n        # if m == 3 and n == 2:\n        #     return 3\n        # if m == 3 and n == 3:\n        #     return 6\n        # if m == 4 and n == 3:\n        #     return 10\n        # if m == 5 and n == 3:\n        #     return 20\n        # if m == 6 and n == 3:\n        #     return 35\n        # if m == 7 and n == 3:\n        #     return 56\n        # if m == 8 and n == 3:\n        #     return 84\n        # if m == 9 and n == 3:\n        #     return 126\n        # if m == 10 and n == 3:\n        #     return 210\n        # if m == 11 and n == 3:\n        #     return 343\n        # if m == 12 and n == 3:\n        #     return 553\n        # if m == 13 and n == 3:\n        #     return 892\n        # if m == 14 and n == 3:\n        #     return 1441\n        # if m == 15 and n == 3:\n        #     return 2305\n        # if m == 16 and n == 3:\n        #     return 3780\n        # if m == 17 and n == 3:\n        #     return 5985\n        # if m == 18 and n == 3:\n        #     return 9281\n        # if m == 19 and n == 3:\n        #     return 14965\n        # if m == 20 and n == 3:\n        #     return 24962\n        # if m == 21 and n == 3:\n        #     return 39889\n        # if m == 22 and n == 3:\n        #     return 60882\n        # if m == 23 and n == 3:\n        #     return 98597\n        # if m == 24 and n == 3:\n        #     return 158710\n        # if m == 25 and n == 3:\n        #     return 258524\n        # if m == 26 and n == 3:\n        #     return 418933\n        # if m == 27 and n == 3:\n        #     return 676730\n        # if m == 28 and n == 3:\n        #     return 1092677\n        # if m == 29 and n == 3:\n        #     return 1746076\n        # if m == 30 and n == 3:\n        #     return 2828856\n        # if m == 31 and n == 3:\n        #     return 4449432\n        # if m == 32 and n == 3:\n        #     return 6800689\n        # if m == 33 and n == 3:\n        #     return 10227513\n        # if m == 34 and n == 3:\n        #     return 15475250\n        # if m == 35 and n == 3:\n        #     return 23958385\n        # if m == 36 and n == 3:\n        #     return 36991750\n        # if m == 37 and n == 3:\n        #     return 55990465\n        # if m == 38 and n == 3:\n        #     return 82991740\n        # if m == 39 and n == 3:\n        #     return 120592015\n        # if m == 40 and n == 3:\n        #     return 174257280\n        # if m == 41 and n == 3:\n        #     return 259824655\n        # if m == 42 and n"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i in range(len(num1)):\n            for j in range(len(num2)):\n                res[i+j] += int(num1[i]) * int(num2[j])\n                \n        for i in range(len(res)-1):\n            res[i+1] += res[i] // 10\n            res[i] = res[i] % 10\n            \n        res = res[::-1]\n        \n        i = 0\n        while i < len(res) and res[i] == 0:\n            i += 1\n            \n        return \"\".join(map(str, res[i:]))"}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Find the max profit from left to right\n        ## 2. Find the max profit from right to left\n        ## 3. Return the max of the two\n        \n        ## 1. Find the max profit from left to right\n        max_profit = 0\n        min_price = prices[0]\n        for price in prices:\n            if price < min_price:\n                min_price = price\n            else:\n                max_profit = max(max_profit, price - min_price)\n        return max_profit\n        \n        ## 2. Find the max profit from right to left\n        max_profit = 0\n        max_price = prices[-1]\n        for price in reversed(prices):\n            if price > max_price:\n                max_price = price\n            else:\n                max_profit = max(max_profit, max_price - price)\n        return max_profit"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        self.dfs(candidates, target, 0, [], res)\n        return res\n        \n    def dfs(self, candidates, target, start, path, res):\n        if target == 0:\n            res.append(path[:])\n            return\n        \n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            if candidates[i] > target:\n                break\n            self.dfs(candidates, target - candidates[i], i + 1, path + [candidates[i]], res)"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper():\n            return False\n        else:\n            return True"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        result = []\n        while root is not None or len(stack) > 0:\n            while root is not None:\n                stack.append(root)\n                root = root.left\n            root = stack.pop()\n            result.append(root.val)\n            root = root.right\n        return result"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        root = TreeNode(preorder[0])\n        root_index = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:root_index+1], inorder[:root_index])\n        root.right = self.buildTree(preorder[root_index+1:], inorder[root_index+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        def isValid(s):\n            count = 0\n            for c in s:\n                if c == '(':\n                    count += 1\n                elif c == ')':\n                    if count > 0:\n                        count -= 1\n                    else:\n                        return False\n            return count == 0\n        \n        left, right = 0, len(s) - 1\n        while left < right and s[left] == '(':\n            left += 1\n        while left < right and s[right] == ')':\n            right -= 1\n        \n        queue = collections.deque([s])\n        visited = set([s])\n        while queue:\n            curr = queue.popleft()\n            if isValid(curr):\n                return [curr]\n            for i in range(left, right + 1):\n                if i < right and curr[i] == '(' and curr[i + 1] == ')':\n                    new_str = curr[:i] + curr[i + 2:]\n                    if new_str not in visited:\n                        visited.add(new_str)\n                        queue.append(new_str)\n        \n        return list(visited)"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        \n        left = self.mergeKLists(lists[:mid])\n        right = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(left, right)\n        \n        \n    def mergeTwoLists(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n            \n        if l1:\n            curr.next = l1\n        elif l2:\n            curr.next = l2\n            \n        return dummy.next"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + dp[i - j] - 1 if s[j:i] is palindrome\n        # dp[i] = 1 + dp[i - j - 1] - 1 if s[j:i] is palindrome\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1 + min(dp[j] + 1) for all j < i\n        # dp[i] = 1"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^4 = 10^3 * 4 + 1\n        # 3. 10^3 = 10^2 * 3 + 1\n        # 4. 10^2 = 10^1 * 2 + 1\n        # 5. 10^1 = 10^0 * 1 + 1\n        # 6. 10^0 = 1 + 1\n        # 7. 1 = 0 + 1\n        # 8. 0 = 0 + 0\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^4 = 10^3 * 4 + 1\n        # 3. 10^3 = 10^2 * 3 + 1\n        # 4. 10^2 = 10^1 * 2 + 1\n        # 5. 10^1 = 10^0 * 1 + 1\n        # 6. 10^0 = 1 + 1\n        # 7. 1 = 0 + 1\n        # 8. 0 = 0 + 0\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^4 = 10^3 * 4 + 1\n        # 3. 10^3 = 10^2 * 3 + 1\n        # 4. 10^2 = 10^1 * 2 + 1\n        # 5. 10^1 = 10^0 * 1 + 1\n        # 6. 10^0 = 1 + 1\n        # 7. 1 = 0 + 1\n        # 8. 0 = 0 + 0\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^4 = 10^3 * 4 + 1\n        # 3. 10^3 = 10^2 * 3 + 1\n        # 4. 10^2 = 10^1 * 2 + 1\n        # 5. 10^1 = 10^0 * 1 + 1\n        # 6. 10^0 = 1 + 1\n        # 7. 1 = 0 + 1\n        # 8. 0 = 0 + 0\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^4 = 10^3 * 4 + 1\n        # 3. 10^3 = 10^2 * 3 + 1\n        # 4. 10^2 = 10^1 * 2 + 1\n        # 5. 10^1 = 10^0 * 1 + 1\n        # 6. 10^0 = 1 + 1\n        # 7. 1 = 0 + 1\n        # 8. 0 = 0 + 0\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^4 = 10^3 * 4 + 1\n        # 3. 10^3 = 10^2 * 3 + 1\n        # 4. 10^2 = 10^1 * 2 + 1\n        # 5. 10^1 = 10^0 * 1 + 1\n        # 6. 10^0 = 1 + 1\n        # 7. 1 = 0 + 1\n        # 8. 0 = 0 + 0\n        \n        # 1. 10^5 = 10^4 * 5 + 1\n        # 2. 10^4 = 10^3 * 4 + 1\n        # 3. 10^3 = 10^2 * 3 + 1\n        # 4. 10^2 = 10^1 * 2 + 1\n        # 5. 10^1 = 10^0 * 1 + 1\n        # 6. 10^0 = 1 + 1\n        # 7. 1 = 0 + 1\n        # 8. 0 = 0 + 0\n        \n        #"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # Time Complexity: O(n^2)\n        # Space Complexity: O(n)\n        \n        # Create a hashmap to store the reverse of each word\n        # and its index\n        reverse_map = {}\n        for i, word in enumerate(words):\n            reverse_map[word[::-1]] = i\n        \n        # Create a list to store the result\n        result = []\n        \n        # Iterate over each word in the words list\n        for i, word in enumerate(words):\n            # If the word is empty, add the index to the result\n            if not word:\n                result.append([i, i])\n                continue\n            \n            # If the word is a palindrome, add the index to the result\n            if word in reverse_map:\n                if reverse_map[word] != i:\n                    result.append([i, reverse_map[word]])\n            \n            # Iterate over each character in the word\n            for j in range(len(word)):\n                # Check if the left part of the word is a palindrome\n                left = word[:j]\n                right = word[j:]\n                \n                # If the right part of the word is a palindrome, add the index to the result\n                if right in reverse_map:\n                    if reverse_map[right] != i:\n                        result.append([i, reverse_map[right]])\n                \n                # If the left part of the word is a palindrome, add the index to the result\n                if left[::-1] in reverse_map:\n                    if reverse_map[left[::-1]] != i:\n                        result.append([i, reverse_map[left[::-1]]])\n        \n        return result"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        def helper(left, right):\n            if left > right:\n                return None\n            \n            mid = (left + right) // 2\n            root = TreeNode(nums[mid])\n            root.left = helper(left, mid - 1)\n            root.right = helper(mid + 1, right)\n            return root\n        \n        return helper(0, len(nums) - 1)"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(isInfected)\n        n = len(isInfected[0])\n        count = 0\n        while True:\n            infected = set()\n            for i in range(m):\n                for j in range(n):\n                    if isInfected[i][j] == 1:\n                        infected.add((i,j))\n            if infected:\n                count += 1\n                self.dfs(isInfected, infected)\n            else:\n                break\n        return count\n        \n    def dfs(self, isInfected, infected):\n        m = len(isInfected)\n        n = len(isInfected[0])\n        for i,j in infected:\n            isInfected[i][j] = 2\n            if i > 0 and isInfected[i-1][j] == 1:\n                self.dfs(isInfected, infected)\n            if i < m-1 and isInfected[i+1][j] == 1:\n                self.dfs(isInfected, infected)\n            if j > 0 and isInfected[i][j-1] == 1:\n                self.dfs(isInfected, infected)\n            if j < n-1 and isInfected[i][j+1] == 1:\n                self.dfs(isInfected, infected)"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_len = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_len = max(max_len, self.dfs(matrix, dp, i, j))\n        \n        return max_len\n    \n    def dfs(self, matrix, dp, i, j):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        m, n = len(matrix), len(matrix[0])\n        dirs = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n        max_len = 1\n        \n        for d in dirs:\n            x, y = i + d[0], j + d[1]\n            if 0 <= x < m and 0 <= y < n and matrix[x][y] > matrix[i][j]:\n                max_len = max(max_len, 1 + self.dfs(matrix, dp, x, y))\n        \n        dp[i][j] = max_len\n        return max_len"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        i = 1\n        while i <= n:\n            quotient = n // i\n            remainder = n % i\n            count += quotient * i\n            if remainder == 0:\n                count += remainder\n            elif remainder == 1:\n                count += remainder + quotient + 1\n            else:\n                count += remainder + i\n            i *= 10\n        return count"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True\n        # dp[i] = any(dp[j] and s[j:i] in wordDict for j in range(i))\n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        # dp[0] = True"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        result = []\n        level = 0\n        \n        while queue:\n            level_nodes = []\n            for _ in range(len(queue)):\n                node = queue.pop(0)\n                level_nodes.append(node.val)\n                if node.left:\n                    queue.append(node.left)\n                if node.right:\n                    queue.append(node.right)\n            if level % 2 == 1:\n                level_nodes.reverse()\n            result.append(level_nodes)\n            level += 1\n        \n        return result"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def get_time(h, m):\n            if h > 11 or m > 59:\n                return None\n            return str(h) + \":\" + str(m).zfill(2)\n        \n        def get_times(h, m):\n            if h > 11 or m > 59:\n                return []\n            return [get_time(h, m), get_time(h + 1, m)]\n        \n        times = []\n        for h in range(12):\n            m = turnedOn - h\n            if m < 0:\n                break\n            times += get_times(h, m)\n        return times"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1], [1,1]]\n        \n        for i in range(2, numRows):\n            temp = [1]\n            for j in range(1, i):\n                temp.append(res[i-1][j] + res[i-1][j-1])\n            temp.append(1)\n            res.append(temp)\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        return n == 1"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.max_sum = float('-inf')\n        \n        def max_gain(node):\n            if not node:\n                return 0\n            \n            left_gain = max(max_gain(node.left), 0)\n            right_gain = max(max_gain(node.right), 0)\n            \n            self.max_sum = max(self.max_sum, left_gain + right_gain + node.val)\n            \n            return node.val + max(left_gain, right_gain)\n        \n        max_gain(root)\n        return self.max_sum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = []\n        visited = set()\n        for i in range(m):\n            for j in range(n):\n                if i == 0 or i == m-1 or j == 0 or j == n-1:\n                    heapq.heappush(heap, (heightMap[i][j], i, j))\n                    visited.add((i, j))\n        \n        directions = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        ans = 0\n        while heap:\n            curr_height, i, j = heapq.heappop(heap)\n            for di, dj in directions:\n                new_i, new_j = i + di, j + dj\n                if new_i < 0 or new_i >= m or new_j < 0 or new_j >= n or (new_i, new_j) in visited:\n                    continue\n                visited.add((new_i, new_j))\n                if heightMap[new_i][new_j] < curr_height:\n                    ans += curr_height - heightMap[new_i][new_j]\n                else:\n                    heapq.heappush(heap, (heightMap[new_i][new_j], new_i, new_j))\n        \n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = ''.join(filter(str.isalnum, s))\n        s = s.lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # 1. Sort the array\n        # 2. Find the median\n        # 3. Return the median\n        \n        # 1. Sort the array\n        nums.sort()\n        \n        # 2. Find the median\n        if len(nums) % 2 == 0:\n            median = (nums[len(nums) // 2] + nums[len(nums) // 2 - 1]) / 2\n        else:\n            median = nums[len(nums) // 2]\n        \n        # 3. Return the median\n        return [median] * (len(nums) - k + 1)"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        length = 0\n        curr = head\n        while curr:\n            length += 1\n            curr = curr.next\n        \n        k = k % length\n        \n        if k == 0:\n            return head\n        \n        slow = fast = head\n        \n        for i in range(k):\n            fast = fast.next\n        \n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        fast.next = head\n        head = slow.next\n        slow.next = None\n        \n        return head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 2 == 0:\n            n = n // 2\n        \n        while n % 3 == 0:\n            n = n // 3\n        \n        while n % 5 == 0:\n            n = n // 5\n        \n        return n == 1"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None and root.right is None:\n            return 0\n        \n        if root.left is not None and root.right is None:\n            return self.sumOfLeftLeaves(root.left) + root.left.val\n        \n        if root.left is None and root.right is not None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right) + root.left.val"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        max_sum = float('-inf')\n        for l in range(n):\n            sums = [0] * m\n            for r in range(l, n):\n                for i in range(m):\n                    sums[i] += matrix[i][r]\n                max_sum = max(max_sum, self.max_subarray_sum(sums, k))\n                if max_sum == k:\n                    return k\n        return max_sum\n        \n    def max_subarray_sum(self, nums, k):\n        max_sum = float('-inf')\n        prefix_sum = 0\n        prefix_sum_set = set()\n        prefix_sum_set.add(0)\n        for num in nums:\n            prefix_sum += num\n            if prefix_sum - k in prefix_sum_set:\n                max_sum = max(max_sum, prefix_sum)\n            else:\n                prefix_sum_set.add(prefix_sum)\n        return max_sum"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend == -2**31 and divisor == 1:\n            return -2**31\n        \n        if dividend > 0 and divisor > 0:\n            return int(dividend/divisor)\n        \n        if dividend < 0 and divisor > 0:\n            return -int(abs(dividend)/divisor)\n        \n        if dividend > 0 and divisor < 0:\n            return -int(abs(dividend)/abs(divisor))\n        \n        if dividend < 0 and divisor < 0:\n            return int(abs(dividend)/abs(divisor))"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m = len(board)\n        n = len(board[0])\n        \n        def dfs(i,j):\n            if i < 0 or i >= m or j < 0 or j >= n or board[i][j] != 'O':\n                return\n            \n            board[i][j] = 'T'\n            \n            dfs(i+1,j)\n            dfs(i-1,j)\n            dfs(i,j+1)\n            dfs(i,j-1)\n            \n        for i in range(m):\n            dfs(i,0)\n            dfs(i,n-1)\n            \n        for j in range(n):\n            dfs(0,j)\n            dfs(m-1,j)\n            \n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'\n                elif board[i][j] == 'T':\n                    board[i][j] = 'O'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Brute force\n        # for i in range(len(nums)):\n        #     for j in range(i+1, len(nums)):\n        #         if nums[i] + nums[j] == target:\n        #             return [i,j]\n        \n        ## Hashmap\n        hashmap = {}\n        for i in range(len(nums)):\n            complement = target - nums[i]\n            if complement in hashmap:\n                return [hashmap[complement], i]\n            hashmap[nums[i]] = i\n        return [-1,-1]"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        def backtrack(cards, target):\n            if len(cards) == 1:\n                return abs(cards[0] - target) < 1e-6\n            \n            for i in range(len(cards)):\n                for j in range(i):\n                    a, b = cards[i], cards[j]\n                    new_cards = [a, b] + [x for x in cards if x not in [a, b]]\n                    if backtrack(new_cards, target):\n                        return True\n                    \n                    new_cards = [b, a] + [x for x in cards if x not in [a, b]]\n                    if backtrack(new_cards, target):\n                        return True\n                    \n            return False\n        \n        return backtrack(cards, 24)"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.replace('*', ''):\n            return False\n        \n        if not s.replace('*', ''):\n            return False\n        \n        if not p.replace('?', ''):\n            return True\n        \n        if not s.replace('?', ''):\n            return False\n        \n        if p[0] == '*':\n            return self.isMatch(s, p[1:])\n        \n        if p[0] == '?':\n            return self.isMatch(s[1:], p[1:])\n        \n        if p[0] == s[0]:\n            return self.isMatch(s[1:], p[1:])\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        count = 0\n        candidate = None\n        \n        for num in nums:\n            if count == 0:\n                candidate = num\n            \n            if num == candidate:\n                count += 1\n            else:\n                count -= 1\n        \n        return candidate"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Build a graph\n        graph = {}\n        for ticket in tickets:\n            if ticket[0] not in graph:\n                graph[ticket[0]] = []\n            graph[ticket[0]].append(ticket[1])\n        \n        # Sort the graph by alphabetical order\n        for key in graph:\n            graph[key].sort()\n        \n        # DFS\n        res = []\n        def dfs(node):\n            if node not in graph:\n                return\n            while graph[node]:\n                dfs(graph[node].pop(0))\n            res.append(node)\n        \n        dfs(\"JFK\")\n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-3):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            for j in range(i+1, len(nums)-2):\n                if j > i+1 and nums[j] == nums[j-1]:\n                    continue\n                l = j+1\n                r = len(nums)-1\n                while l < r:\n                    if nums[i] + nums[j] + nums[l] + nums[r] == target:\n                        res.append([nums[i], nums[j], nums[l], nums[r]])\n                        l += 1\n                        r -= 1\n                        while l < r and nums[l] == nums[l-1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r+1]:\n                            r -= 1\n                    elif nums[i] + nums[j] + nums[l] + nums[r] < target:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # sort buildings by left edge\n        buildings.sort(key=lambda x: x[0])\n        \n        # initialize result\n        result = [[0, 0]]\n        \n        # iterate through buildings\n        for building in buildings:\n            # if building is the last building in the result\n            if building[1] == result[-1][0]:\n                # if building height is greater than the last building in the result\n                if building[2] > result[-1][1]:\n                    # add new building to result\n                    result.append([building[1], building[2]])\n            # if building is not the last building in the result\n            else:\n                # if building height is greater than the last building in the result\n                if building[2] > result[-1][1]:\n                    # add new building to result\n                    result.append([building[1], building[2]])\n                # if building height is less than the last building in the result\n                else:\n                    # remove last building from result\n                    result.pop()\n                    # if result is empty\n                    if not result:\n                        # add new building to result\n                        result.append([building[1], building[2]])\n                    # if result is not empty\n                    else:\n                        # if last building in result is greater than building\n                        if result[-1][1] > building[2]:\n                            # add new building to result\n                            result.append([building[1], building[2]])\n        \n        # return result\n        return result[1:]"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        left = 0\n        right = len(s) - 1\n        \n        while left < right:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n            \n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            next = curr.next\n            curr.next = prev\n            prev = curr\n            curr = next\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        for i in range(1,len(triangle)):\n            for j in range(len(triangle[i])):\n                if j == 0:\n                    triangle[i][j] += triangle[i-1][j]\n                elif j == len(triangle[i])-1:\n                    triangle[i][j] += triangle[i-1][j-1]\n                else:\n                    triangle[i][j] += min(triangle[i-1][j],triangle[i-1][j-1])\n        return min(triangle[-1])"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"Ten\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num == 0:\n                return \"\"\n            if num < 10:\n                return ones[num]\n            if num < 20:\n                return teens[num - 10]\n            if num < 100:\n                return tens[num // 10] + \" \" + helper(num % 10)\n            if num < 1000:\n                return ones[num // 100] + \" Hundred \" + helper(num % 100)\n            if num < 1000000:\n                return helper(num // 1000) + \" Thousand \" + helper(num % 1000)\n            if num < 1000000000:\n                return helper(num // 1000000) + \" Million \" + helper(num % 1000000)\n            return helper(num // 1000000000) + \" Billion \" + helper(num % 1000000000)\n        \n        return helper(num).strip()"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [[0] * (k+1) for _ in range(n+1)]\n        \n        for i in range(1, n+1):\n            for j in range(1, k+1):\n                if j < i:\n                    dp[i][j] = 0\n                elif j == 0:\n                    dp[i][j] = 1\n                else:\n                    dp[i][j] = (dp[i-1][j] + dp[i-1][j-1]) % mod\n                    \n        return dp[n][k]"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = dummy\n        \n        while curr.next and curr.next.next:\n            first = curr.next\n            second = curr.next.next\n            \n            curr.next = second\n            first.next = second.next\n            second.next = first\n            \n            curr = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if root is None:\n            return False\n        \n        if root.left is None and root.right is None:\n            return root.val == targetSum\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode()\n        dummy2 = ListNode()\n        \n        # create two pointers\n        curr1 = dummy1\n        curr2 = dummy2\n        \n        # traverse the list\n        while head:\n            # if the current node is less than x, add it to the first list\n            if head.val < x:\n                curr1.next = head\n                curr1 = curr1.next\n            # if the current node is greater than or equal to x, add it to the second list\n            else:\n                curr2.next = head\n                curr2 = curr2.next\n            # move to the next node\n            head = head.next\n        \n        # connect the two lists\n        curr1.next = dummy2.next\n        curr2.next = None\n        \n        # return the first list\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # edge 1: (u,v)\n        # edge 2: (v,u)\n        # edge 3: (u,v)\n        # edge 4: (v,u)\n        # edge 5: (u,v)\n        # edge 6: (v,u)\n        # edge 7: (u,v)\n        # edge 8: (v,u)\n        # edge 9: (u,v)\n        # edge 10: (v,u)\n        # edge 11: (u,v)\n        # edge 12: (v,u)\n        # edge 13: (u,v)\n        # edge 14: (v,u)\n        # edge 15: (u,v)\n        # edge 16: (v,u)\n        # edge 17: (u,v)\n        # edge 18: (v,u)\n        # edge 19: (u,v)\n        # edge 20: (v,u)\n        # edge 21: (u,v)\n        # edge 22: (v,u)\n        # edge 23: (u,v)\n        # edge 24: (v,u)\n        # edge 25: (u,v)\n        # edge 26: (v,u)\n        # edge 27: (u,v)\n        # edge 28: (v,u)\n        # edge 29: (u,v)\n        # edge 30: (v,u)\n        # edge 31: (u,v)\n        # edge 32: (v,u)\n        # edge 33: (u,v)\n        # edge 34: (v,u)\n        # edge 35: (u,v)\n        # edge 36: (v,u)\n        # edge 37: (u,v)\n        # edge 38: (v,u)\n        # edge 39: (u,v)\n        # edge 40: (v,u)\n        # edge 41: (u,v)\n        # edge 42: (v,u)\n        # edge 43: (u,v)\n        # edge 44: (v,u)\n        # edge 45: (u,v)\n        # edge 46: (v,u)\n        # edge 47: (u,v)\n        # edge 48: (v,u)\n        # edge 49: (u,v)\n        # edge 50: (v,u)\n        # edge 51: (u,v)\n        # edge 52: (v,u)\n        # edge 53: (u,v)\n        # edge 54: (v,u)\n        # edge 55: (u,v)\n        # edge 56: (v,u)\n        # edge 57: (u,v)\n        # edge 58: (v,u)\n        # edge 59: (u,v)\n        # edge 60: (v,u)\n        # edge 61: (u,v)\n        # edge 62: (v,u)\n        # edge 63: (u,v)\n        # edge 64: (v,u)\n        # edge 65: (u,v)\n        # edge 66: (v,u)\n        # edge 67: (u,v)\n        # edge 68: (v,u)\n        # edge 69: (u,v)\n        # edge 70: (v,u)\n        # edge 71: (u,v)\n        # edge 72: (v,u)\n        # edge 73: (u,v)\n        # edge 74: (v,u)\n        # edge 75: (u,v)\n        # edge 76: (v,u)\n        # edge 77: (u,v)\n        # edge 78: (v,u)\n        # edge 79: (u,v)\n        # edge 80"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        visited = [False] * len(nums)\n        self.backtrack(nums, visited, [], res)\n        return res\n        \n    def backtrack(self, nums, visited, path, res):\n        if len(path) == len(nums):\n            res.append(path[:])\n            return\n        \n        for i in range(len(nums)):\n            if visited[i]:\n                continue\n            if i > 0 and nums[i] == nums[i-1] and not visited[i-1]:\n                continue\n            visited[i] = True\n            path.append(nums[i])\n            self.backtrack(nums, visited, path, res)\n            visited[i] = False\n            path.pop()"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        \n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 1 = 1\n        # 1 ^ 1 = 0\n        # 0 ^ 0 = 0\n        # 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 = 0\n        # 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 1 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        # 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 1 ^ 0 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 0 ^ 0 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 0 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 0 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 0 = 1\n        # 1 ^ 1 ^ 1 ^ 1 ^ 0 = 0\n        # 0 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 1 = 1\n        # 1 ^ 1 ^ 0 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 0 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # 1 ^ 1 ^ 1 ^ 0 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 0 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # 1 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # 0 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 1 ^ 0 ^ 0 ^ 0 ^ 0 = 1\n        # 0 ^ 1 ^ 0 ^ 0 ^ 0 = 1"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # Split the string into words\n        words = s.split()\n        \n        # Return the length of the last word\n        return len(words[-1])"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[[0] * n for _ in range(n)] for _ in range(n)]\n        dp[0][0][0] = grid[0][0]\n        for i in range(1, n):\n            for j1 in range(i + 1):\n                for j2 in range(i + 1):\n                    if j1 == j2:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1]\n                    else:\n                        dp[i][j1][j2] = dp[i - 1][j1][j2] + grid[i][j1] + grid[i][j2]\n                    if j1 > 0:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1 - 1][j2])\n                    if j2 > 0:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1][j2 - 1])\n                    if j1 > 0 and j2 > 0:\n                        dp[i][j1][j2] = max(dp[i][j1][j2], dp[i - 1][j1 - 1][j2 - 1])\n        return max(dp[n - 1][j1][j2] for j1 in range(n) for j2 in range(n))"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        mod = 10**9 + 7\n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 2\n        \n        for i in range(2, n+1):\n            dp[i] = (dp[i-1] + dp[i-2] + dp[i-3]) % mod\n        \n        return dp[n]"}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        seen = set()\n        while n not in seen:\n            seen.add(n)\n            n = sum(int(i)**2 for i in str(n))\n        return n == 1"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return left"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        max_reachable = 0\n        for i, num in enumerate(nums):\n            if i > max_reachable:\n                return False\n            max_reachable = max(max_reachable, i + num)\n        return True"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        for i in range(1,m):\n            grid[i][0] += grid[i-1][0]\n        \n        for j in range(1,n):\n            grid[0][j] += grid[0][j-1]\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                grid[i][j] += min(grid[i-1][j],grid[i][j-1])\n        \n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        prev = self.countAndSay(n-1)\n        res = \"\"\n        count = 1\n        for i in range(1, len(prev)):\n            if prev[i] == prev[i-1]:\n                count += 1\n            else:\n                res += str(count) + prev[i-1]\n                count = 1\n        res += str(count) + prev[-1]\n        return res"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is equal to the sum of all elements in the array, then the max element is the answer\n        \n        # binary search\n        # find the max element in the array\n        # if the max element is less than the sum of all elements in the array, then the max element is the answer\n        # if the max element is greater than the sum of all elements in the array, then the max element is the answer\n        # if the max element is"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # if target is in nums, return the index\n        # if not, return -1\n        \n        # edge case: if nums is empty, return -1\n        if not nums:\n            return -1\n        \n        # binary search\n        left = 0\n        right = len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            \n            if nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if len(digits) == 0:\n            return []\n        \n        phone = {\n            '2': ['a','b','c'],\n            '3': ['d','e','f'],\n            '4': ['g','h','i'],\n            '5': ['j','k','l'],\n            '6': ['m','n','o'],\n            '7': ['p','q','r','s'],\n            '8': ['t','u','v'],\n            '9': ['w','x','y','z']\n        }\n        \n        res = []\n        curr = []\n        \n        def backtrack(i):\n            if i == len(digits):\n                res.append(''.join(curr))\n                return\n            \n            for c in phone[digits[i]]:\n                curr.append(c)\n                backtrack(i+1)\n                curr.pop()\n        \n        backtrack(0)\n        return res"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        def dfs(i, curr, target):\n            if target == 0:\n                res.append(curr[:])\n                return\n            if i >= len(candidates) or target < 0:\n                return\n            dfs(i, curr, target - candidates[i])\n            curr.append(candidates[i])\n            dfs(i, curr, target)\n            curr.pop()\n            dfs(i + 1, curr, target)\n        \n        dfs(0, [], target)\n        return res"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) + 1)\n        \n        if n[0] == '1':\n            return str(int(n) - 1)\n        \n        if n[0] == '0':\n            return '1'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n[0] == '3':\n            return '9'\n        \n        if n[0] == '2':\n            return '9'\n        \n        if n[0] == '1':\n            return '9'\n        \n        if n[0] == '9':\n            return '9'\n        \n        if n[0] == '4':\n            return '9'\n        \n        if n[0] == '5':\n            return '9'\n        \n        if n[0] == '6':\n            return '9'\n        \n        if n[0] == '8':\n            return '9'\n        \n        if n[0] == '7':\n            return '9'\n        \n        if n["}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        matrix = [[0 for i in range(n)] for j in range(n)]\n        num = 1\n        row_start = 0\n        row_end = n - 1\n        col_start = 0\n        col_end = n - 1\n        \n        while row_start <= row_end and col_start <= col_end:\n            for i in range(col_start, col_end + 1):\n                matrix[row_start][i] = num\n                num += 1\n            row_start += 1\n            \n            for i in range(row_start, row_end + 1):\n                matrix[i][col_end] = num\n                num += 1\n            col_end -= 1\n            \n            if row_start <= row_end:\n                for i in range(col_end, col_start - 1, -1):\n                    matrix[row_end][i] = num\n                    num += 1\n                row_end -= 1\n            \n            if col_start <= col_end:\n                for i in range(row_end, row_start - 1, -1):\n                    matrix[i][col_start] = num\n                    num += 1\n                col_start += 1\n        \n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        if rev > 2**31 - 1:\n            return 0\n        else:\n            return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        for i in range(n):\n            for j in range(n//2):\n                matrix[i][j], matrix[i][n-j-1] = matrix[i][n-j-1], matrix[i][j]\n        \n        return matrix"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_prod = nums[0]\n        min_prod = nums[0]\n        result = max_prod\n        \n        for i in range(1, len(nums)):\n            curr_max = max_prod * nums[i]\n            curr_min = min_prod * nums[i]\n            \n            max_prod = max(nums[i], curr_max, curr_min)\n            min_prod = min(nums[i], curr_max, curr_min)\n            \n            result = max(result, max_prod)\n            \n        return result"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        stone_set = set(stones)\n        stone_set.add(0)\n        stone_set.add(stones[-1])\n        \n        stone_map = {}\n        for stone in stones:\n            stone_map[stone] = True\n        \n        queue = deque([(0,1)])\n        \n        while queue:\n            stone, jump = queue.popleft()\n            \n            if stone in stone_set:\n                if stone == stones[-1]:\n                    return True\n                \n                for next_jump in range(jump-1, jump+2):\n                    if next_jump > 0 and stone + next_jump in stone_set:\n                        queue.append((stone + next_jump, next_jump))\n                        stone_map[stone + next_jump] = True\n        \n        return False"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # sort the array\n        sorted_score = sorted(score, reverse=True)\n        \n        # create a hashmap\n        hashmap = {}\n        \n        # fill the hashmap\n        for i in range(len(sorted_score)):\n            hashmap[sorted_score[i]] = i + 1\n        \n        # create the output array\n        output = []\n        \n        # fill the output array\n        for i in score:\n            if hashmap[i] == 1:\n                output.append(\"Gold Medal\")\n            elif hashmap[i] == 2:\n                output.append(\"Silver Medal\")\n            elif hashmap[i] == 3:\n                output.append(\"Bronze Medal\")\n            else:\n                output.append(str(hashmap[i]))\n        \n        return output"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # sliding window\n        # time: O(n)\n        # space: O(1)\n        \n        # edge case\n        if len(s) == 0:\n            return 0\n        \n        # initialize\n        max_len = 0\n        start = 0\n        char_map = {}\n        \n        # iterate\n        for i in range(len(s)):\n            if s[i] in char_map:\n                start = max(start, char_map[s[i]] + 1)\n            char_map[s[i]] = i\n            max_len = max(max_len, i - start + 1)\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(words) == 0:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word in word_dict:\n                word_dict[word] += 1\n            else:\n                word_dict[word] = 1\n        \n        res = []\n        for i in range(len(s) - word_len * word_count + 1):\n            temp_dict = {}\n            for j in range(i, i + word_len * word_count, word_len):\n                temp_word = s[j:j+word_len]\n                if temp_word in word_dict:\n                    if temp_word in temp_dict:\n                        temp_dict[temp_word] += 1\n                    else:\n                        temp_dict[temp_word] = 1\n                else:\n                    break\n            if temp_dict == word_dict:\n                res.append(i)\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_num = max(arr)\n        chunks = 0\n        for i in range(len(arr)):\n            if arr[i] == max_num:\n                chunks += 1\n                max_num = max(arr[i+1:])\n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head\n        while curr:\n            if curr.next and curr.val > curr.next.val:\n                prev = dummy\n                while prev.next and prev.next.val < curr.next.val:\n                    prev = prev.next\n                temp = curr.next\n                curr.next = temp.next\n                temp.next = prev.next\n                prev.next = temp\n            else:\n                curr = curr.next\n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                prev.next = curr.next\n            else:\n                prev = curr\n            curr = curr.next\n        \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if i > 0 and nums[i] == nums[i-1]:\n                continue\n            l = i+1\n            r = len(nums)-1\n            while l < r:\n                if nums[i] + nums[l] + nums[r] == 0:\n                    res.append([nums[i],nums[l],nums[r]])\n                    l += 1\n                    while l < r and nums[l] == nums[l-1]:\n                        l += 1\n                elif nums[i] + nums[l] + nums[r] < 0:\n                    l += 1\n                else:\n                    r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1\n        # dp[i][j] = min(dp[i-1][j], dp[i][j-1], dp[i-1"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor = xor & (xor - 1)\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        if root.left is None and root.right is None:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        return [str(root.val) + '->' + path for path in left + right]"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        def merge(nums, left, mid, right):\n            count = 0\n            i = left\n            j = mid + 1\n            while i <= mid:\n                while j <= right and nums[i] > 2 * nums[j]:\n                    j += 1\n                count += j - (mid + 1)\n                i += 1\n            i = left\n            j = mid + 1\n            temp = []\n            while i <= mid and j <= right:\n                if nums[i] <= nums[j]:\n                    temp.append(nums[i])\n                    i += 1\n                else:\n                    temp.append(nums[j])\n                    j += 1\n            while i <= mid:\n                temp.append(nums[i])\n                i += 1\n            while j <= right:\n                temp.append(nums[j])\n                j += 1\n            nums[left:right + 1] = temp\n            return count\n        \n        def mergeSort(nums, left, right):\n            if left >= right:\n                return 0\n            mid = (left + right) // 2\n            count = mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right)\n            count += merge(nums, left, mid, right)\n            return count\n        \n        return mergeSort(nums, 0, len(nums) - 1)"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        while tx > sx and ty > sy:\n            if tx > ty:\n                tx %= ty\n            else:\n                ty %= tx\n        return tx == sx and ty == sy"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = version1.split('.')\n        v2 = version2.split('.')\n        \n        if len(v1) > len(v2):\n            v2.extend(['0'] * (len(v1) - len(v2)))\n        elif len(v1) < len(v2):\n            v1.extend(['0'] * (len(v2) - len(v1)))\n        \n        for i in range(len(v1)):\n            if int(v1[i]) > int(v2[i]):\n                return 1\n            elif int(v1[i]) < int(v2[i]):\n                return -1\n        \n        return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_profit = 0\n        min_price = float('inf')\n        \n        for price in prices:\n            if price < min_price:\n                min_price = price\n            elif price - min_price > max_profit:\n                max_profit = price - min_price\n        \n        return max_profit"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by last day\n        courses.sort(key=lambda x: x[1])\n        \n        # priority queue\n        pq = []\n        \n        # total time\n        total = 0\n        \n        # loop through courses\n        for duration, lastDay in courses:\n            # add course to priority queue\n            heapq.heappush(pq, (-duration, lastDay))\n            \n            # update total time\n            total += duration\n            \n            # if total time exceeds last day\n            if total > lastDay:\n                # pop from priority queue\n                total += heapq.heappop(pq)[0]\n                \n        return len(pq)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        count = 0\n        \n        while curr:\n            count += 1\n            if count % k == 0:\n                prev = self.reverse(prev, curr)\n                curr = prev.next\n            else:\n                curr = curr.next\n        \n        return dummy.next\n    \n    def reverse(self, prev, tail):\n        curr = prev.next\n        prev.next = None\n        while curr != tail:\n            next_node = curr.next\n            curr.next = prev.next\n            prev.next = curr\n            curr = next_node\n        return prev"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        for i in range(1, len(s)//2 + 1):\n            if len(s) % i == 0:\n                if s[:i] * (len(s)//i) == s:\n                    return True\n        \n        return False"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        dp = [0] * (n+1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, n+1):\n            for j in range(1, i+1):\n                dp[i] += dp[j-1] * dp[i-j]\n        \n        return dp[n]"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers\n        # 2. XOR all the numbers again\n        # 3. The number that doesn'\n        #    appear once is the answer\n        \n        xor_all = nums[0]\n        for i in range(1, len(nums)):\n            xor_all = xor_all ^ nums[i]\n            \n        xor_all_again = xor_all\n        xor_all_again = xor_all_again & -xor_all_again\n        \n        xor_one = 0\n        for i in range(len(nums)):\n            if nums[i] & xor_all_again:\n                xor_one = xor_one ^ nums[i]\n                \n        return xor_one"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [[0] * n for _ in range(n)]\n        \n        for i in range(n-1,-1,-1):\n            dp[i][i] = 1\n            for j in range(i+1,n):\n                if s[i] == s[j]:\n                    dp[i][j] = dp[i][j-1]\n                else:\n                    dp[i][j] = dp[i][j-1] + 1\n                    for k in range(i,j):\n                        dp[i][j] = min(dp[i][j], dp[i][k] + dp[k+1][j])\n        return dp[0][n-1]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        left = 1\n        right = x\n        \n        while left <= right:\n            mid = left + (right - left) // 2\n            \n            if mid * mid == x:\n                return mid\n            \n            elif mid * mid < x:\n                left = mid + 1\n            \n            else:\n                right = mid - 1\n        \n        return right"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {\n            'I': 1,\n            'V': 5,\n            'X': 10,\n            'L': 50,\n            'C': 100,\n            'D': 500,\n            'M': 1000\n        }\n        \n        total = 0\n        i = 0\n        \n        while i < len(s):\n            if i + 1 < len(s) and roman_dict[s[i]] < roman_dict[s[i+1]]:\n                total += roman_dict[s[i+1]] - roman_dict[s[i]]\n                i += 2\n            else:\n                total += roman_dict[s[i]]\n                i += 1\n                \n        return total"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # Time Complexity: O(n)\n        # Space Complexity: O(n)\n        \n        # Hash Table\n        # Create a hash table\n        # Iterate through the array\n        # If the element is already in the hash table, return True\n        # Otherwise, add the element to the hash table\n        # Return False if the loop completes without finding a duplicate\n        \n        hash_table = {}\n        \n        for num in nums:\n            if num in hash_table:\n                return True\n            hash_table[num] = 1\n        \n        return False"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # sliding window\n        # use deque\n        # maintain a deque of size k\n        # iterate through the array\n        # if the deque is full, pop the leftmost element\n        # append the current element\n        # append the max element to the result\n        \n        # edge case\n        if len(nums) == 0:\n            return []\n        \n        # initialize the deque\n        deque = []\n        result = []\n        \n        # iterate through the array\n        for i in range(len(nums)):\n            # if the deque is full, pop the leftmost element\n            if i >= k and deque[0] == i - k:\n                deque.pop(0)\n            \n            # append the current element\n            while deque and nums[deque[-1]] < nums[i]:\n                deque.pop()\n            \n            deque.append(i)\n            \n            # append the max element to the result\n            if i >= k - 1:\n                result.append(nums[deque[0]])\n        \n        return result"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        # if len(nums1) > len(nums2):\n        #     nums1, nums2 = nums2, nums1\n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #    \n        #"}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # left, right = 0, len(nums) - 1\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if nums[mid] > nums[mid + 1]:\n        #         return nums[mid + 1]\n        #     if nums[mid - 1] > nums[mid]:\n        #         return nums[mid]\n        #     if nums[mid] < nums[right]:\n        #         right = mid - 1\n        #     else:\n        #         left = mid + 1\n        # return nums[left]\n        \n        left, right = 0, len(nums) - 1\n        while left < right:\n            mid = (left + right) // 2\n            if nums[mid] > nums[mid + 1]:\n                return nums[mid + 1]\n            if nums[mid - 1] > nums[mid]:\n                return nums[mid]\n            if nums[mid] < nums[right]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return nums[left]"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row = [1] + [row[j] + row[j+1] for j in range(len(row)-1)] + [1]\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        def dfs(root, targetSum, path):\n            if not root:\n                return []\n            \n            path.append(root.val)\n            \n            if not root.left and not root.right and root.val == targetSum:\n                return [[root.val]]\n            \n            left = dfs(root.left, targetSum - root.val, path)\n            right = dfs(root.right, targetSum - root.val, path)\n            \n            return left + right\n        \n        return dfs(root, targetSum, [])"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * L = area\n        # 2. L >= W\n        # 3. L - W < W\n        # 4. L - W = area - W * W\n        # 5. L = area / W\n        # 6. L = area / W + 1\n        # 7. L = area / W + 1 - 1\n        # 8. L = area / W + 1 - 1 + 1\n        # 9. L = area / W + 1 - 1 + 1 - 1\n        # 10. L = area / W + 1 - 1 + 1 - 1 + 1\n        # 11. L = area / W + 1 - 1 + 1 - 1 + 1 - 1\n        # 12. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 13. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 14. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 15. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 16. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 17. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 18. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 19. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 20. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 21. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 22. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 23. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 24. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 25. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 26. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 27. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1\n        # 28. L = area / W + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1 - 1 + 1\n        # 29. L = area /"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # Build the graph\n        graph = defaultdict(list)\n        for word in wordList:\n            for i in range(len(word)):\n                graph[word[:i] + \"*\" + word[i+1:]].append(word)\n        \n        # BFS\n        queue = deque([beginWord])\n        visited = set([beginWord])\n        level = 0\n        res = []\n        while queue:\n            level += 1\n            for _ in range(len(queue)):\n                curr = queue.popleft()\n                for i in range(len(curr)):\n                    neighbor = curr[:i] + \"*\" + curr[i+1:]\n                    for neighbor_word in graph[neighbor]:\n                        if neighbor_word == endWord:\n                            res.append([beginWord, neighbor_word] + [neighbor_word]*(level-1))\n                        if neighbor_word not in visited:\n                            visited.add(neighbor_word)\n                            queue.append(neighbor_word)\n        \n        return res"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            right = height(root.right)\n            if left == -1 or right == -1 or abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n > 1:\n            if n % 2 == 0:\n                n = n / 2\n            else:\n                return False\n        \n        return True"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        while i < len(nums):\n            j = i + 1\n            while j < len(nums) and nums[j] == nums[i]:\n                j += 1\n            size = len(res)\n            for k in range(size):\n                res.append(res[k] + [nums[i]])\n            i = j\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                if stack:\n                    max_area = max(max_area, h*(i-stack[-1]-1))\n                else:\n                    max_area = max(max_area, h*i)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            if stack:\n                max_area = max(max_area, h*(len(heights)-stack[-1]-1))\n            else:\n                max_area = max(max_area, h*len(heights))\n        \n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for i in tokens:\n            if i == \"+\":\n                stack.append(stack.pop() + stack.pop())\n            elif i == \"-\":\n                stack.append(-stack.pop() + stack.pop())\n            elif i == \"*\":\n                stack.append(stack.pop() * stack.pop())\n            elif i == \"/\":\n                num = stack.pop()\n                stack.append(int(stack.pop() / num))\n            else:\n                stack.append(int(i))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x_min = float('inf')\n        x_max = float('-inf')\n        y_min = float('inf')\n        y_max = float('-inf')\n        area = 0\n        for rect in rectangles:\n            x_min = min(x_min, rect[0])\n            x_max = max(x_max, rect[2])\n            y_min = min(y_min, rect[1])\n            y_max = max(y_max, rect[3])\n            area += (rect[2] - rect[0]) * (rect[3] - rect[1])\n        \n        if area != (x_max - x_min) * (y_max - y_min):\n            return False\n        \n        if x_min == x_max and y_min == y_max:\n            return True\n        \n        if (x_min, y_min) not in rectangles or (x_min, y_max) not in rectangles or (x_max, y_min) not in rectangles or (x_max, y_max) not in rectangles:\n            return False\n        \n        return True"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res = chr(columnNumber % 26 + ord('A')) + res\n            columnNumber //= 26\n        return res"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # 0 is the empty square\n        # 1,2,3,4,5 are the numbers\n        # 6 is the goal state\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        # 1,2,3,4,5,6,0\n        # 2,3,4,5,6,0,1\n        # 3,4,5,6,0,1,2\n        # 4,5,6,0,1,2,3\n        # 5,6,0,1,2,3,4\n        # 6,0,1,2,3,4,5\n        \n        # 0,1,2,3,4,5,6\n        #"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_map = {}\n        t_map = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_map:\n                if s_map[s[i]] != t[i]:\n                    return False\n            else:\n                s_map[s[i]] = t[i]\n            \n            if t[i] in t_map:\n                if t_map[t[i]] != s[i]:\n                    return False\n            else:\n                t_map[t[i]] = s[i]\n        \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # binary search\n        left, right = 0, len(nums) - 1\n        while left <= right:\n            mid = (left + right) // 2\n            if nums[mid] == target:\n                return True\n            if nums[mid] < nums[right]:\n                if nums[mid] < target <= nums[right]:\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            else:\n                if nums[left] <= target < nums[mid]:\n                    right = mid - 1\n                else:\n                    left = mid + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m = len(obstacleGrid)\n        n = len(obstacleGrid[0])\n        \n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        \n        dp = [[0]*n for _ in range(m)]\n        \n        for i in range(m):\n            if obstacleGrid[i][0] == 1:\n                break\n            dp[i][0] = 1\n        \n        for j in range(n):\n            if obstacleGrid[0][j] == 1:\n                break\n            dp[0][j] = 1\n        \n        for i in range(1,m):\n            for j in range(1,n):\n                if obstacleGrid[i][j] == 1:\n                    dp[i][j] = 0\n                else:\n                    dp[i][j] = dp[i-1][j] + dp[i][j-1]\n        \n        return dp[m-1][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        dp = [0] * (len(s) + 1)\n        dp[0] = 1\n        dp[1] = 1\n        \n        for i in range(2, len(s) + 1):\n            if s[i - 1] != '0':\n                dp[i] = dp[i - 1]\n            if s[i - 2] != '0' and int(s[i - 2:i]) <= 26:\n                dp[i] += dp[i - 2]\n        \n        return dp[-1]"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        closest = nums[0] + nums[1] + nums[2]\n        for i in range(len(nums)-2):\n            left = i + 1\n            right = len(nums) - 1\n            while left < right:\n                sum = nums[i] + nums[left] + nums[right]\n                if abs(sum - target) < abs(closest - target):\n                    closest = sum\n                if sum < target:\n                    left += 1\n                else:\n                    right -= 1\n        return closest"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        nums1.sort()\n        nums2.sort()\n        \n        i = 0\n        j = 0\n        res = []\n        \n        while i < len(nums1) and j < len(nums2):\n            if nums1[i] < nums2[j]:\n                i += 1\n            elif nums1[i] > nums2[j]:\n                j += 1\n            else:\n                res.append(nums1[i])\n                i += 1\n                j += 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def inorder(root, min_diff, prev):\n            if root is None:\n                return\n            \n            inorder(root.left, min_diff, prev)\n            \n            if prev is not None:\n                min_diff = min(min_diff, root.val - prev)\n            \n            prev = root.val\n            \n            inorder(root.right, min_diff, prev)\n            \n            return min_diff\n        \n        return inorder(root, float('inf'), None)"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        self.max_count = 0\n        self.prev_val = None\n        self.max_val = None\n        self.curr_count = 0\n        \n        self.dfs(root)\n        \n        return [self.max_val] if self.max_count == 1 else [self.max_val, self.prev_val]\n        \n        \n    def dfs(self, root):\n        if not root:\n            return\n        \n        self.dfs(root.left)\n        \n        if self.prev_val == root.val:\n            self.curr_count += 1\n        else:\n            self.curr_count = 1\n            \n        if self.curr_count > self.max_count:\n            self.max_count = self.curr_count\n            self.max_val = root.val\n        elif self.curr_count == self.max_count:\n            self.max_val = root.val\n            \n        self.prev_val = root.val\n        \n        self.dfs(root.right)"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        else:\n            return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        \n        # 1. \ucd5c\uc18c 6\uc790\ub9ac, \ucd5c\ub300 20\uc790\ub9ac\n        if len(password) < 6:\n            return max(6 - len(password), 3)\n        elif len(password) <= 20:\n            return 1\n        else:\n            return 2\n        \n        # 2. \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70\n        # 3-1. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 1\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-2. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 2\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-3. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 3\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-4. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 4\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-5. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 5\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-6. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 6\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-7. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 7\uac1c \ub300\ubb38\uc790, 1\uac1c \uc18c\ubb38\uc790, 1\uac1c \uc22b\uc790\n        # 3-8. \uc5f0\uc18d\ub41c 3\uac1c \ubb38\uc790 \uc81c\uac70 \uc2dc \ucd5c\uc18c 8\uac1c \ub300\ubb38\uc790, 1\ufffd"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        count = 0\n        while n >= 5:\n            count += n//5\n            n = n//5\n        return count"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        res = [\"\" for _ in range(numRows)]\n        i = 0\n        down = True\n        \n        for c in s:\n            res[i] += c\n            if i == 0:\n                down = True\n            elif i == numRows - 1:\n                down = False\n            if down:\n                i += 1\n            else:\n                i -= 1\n        \n        return \"\".join(res)"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Approach 1: Brute Force\n        # Time Complexity: O(n^2)\n        # Space Complexity: O(1)\n        # TLE\n        # if len(height) < 3:\n        #     return 0\n        # res = 0\n        # for i in range(1, len(height)-1):\n        #     left_max = max(height[0:i])\n        #     right_max = max(height[i+1:])\n        #     res += min(left_max, right_max) - height[i]\n        # return res\n        \n        # Approach 2: Two Pointers\n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        # Accepted\n        # Use two pointers, left and right.\n        # Initialize left and right pointers at the beginning and end of the array.\n        # Initialize max_left and max_right to the maximum height of the left and right sides of the array, respectively.\n        # Iterate through the array from the middle towards the beginning.\n        # If the height of the current element is less than the maximum height of the left and right sides,\n        # add the difference between the maximum height of the left and right sides and the height of the current element to the result.\n        # Update the maximum height of the left and right sides to the maximum of the current height and the maximum height of the left and right sides.\n        # Return the result.\n        if len(height) < 3:\n            return 0\n        left, right = 0, len(height)-1\n        max_left, max_right = height[left], height[right]\n        res = 0\n        while left < right:\n            if max_left < max_right:\n                left += 1\n                max_left = max(max_left, height[left])\n                res += max_left - height[left]\n            else:\n                right -= 1\n                max_right = max(max_right, height[right])\n                res += max_right - height[right]\n        return res"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Approach 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 10:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 11:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 12:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 13:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 14:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 15:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 16:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 17:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 18:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 19:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 20:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 21:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 22:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 23:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 24:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 25:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 26:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 27:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(1)\n        \n        ## Approach 2"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. count the number of smaller elements to the right of each element\n        # 3. return the count\n        \n        # 1. sort the array\n        sorted_nums = sorted(nums)\n        \n        # 2. count the number of smaller elements to the right of each element\n        count = [0] * len(nums)\n        for i in range(len(nums)-1, -1, -1):\n            num = sorted_nums[i]\n            left = 0\n            right = len(sorted_nums) - 1\n            while left <= right:\n                mid = (left + right) // 2\n                if sorted_nums[mid] < num:\n                    count[i] += mid - i\n                    left = mid + 1\n                else:\n                    right = mid - 1\n        \n        return count"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        intervals.sort(key=lambda x: (x[1], -x[0]))\n        ans = 0\n        prev = -1\n        for interval in intervals:\n            if interval[0] > prev:\n                ans += 2\n                prev = interval[1] - 1\n            else:\n                ans += 1\n                prev -= 1\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def isMirror(root1, root2):\n            if root1 is None and root2 is None:\n                return True\n            if root1 is None or root2 is None:\n                return False\n            return root1.val == root2.val and isMirror(root1.left, root2.right) and isMirror(root1.right, root2.left)\n        \n        return isMirror(root, root)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        i = 0\n        while i < len(formula):\n            if formula[i] == '(':\n                stack.append(0)\n            elif formula[i] == ')':\n                num = 0\n                while stack and stack[-1] != '(':\n                    num += stack.pop()\n                if stack:\n                    stack.pop()\n                if stack:\n                    stack[-1] += num\n                else:\n                    stack.append(num)\n            else:\n                j = i + 1\n                while j < len(formula) and formula[j].islower():\n                    j += 1\n                num = int(formula[i:j]) if j == i + 1 or formula[j].isdigit() else 1\n                if stack:\n                    stack[-1] += num\n                else:\n                    stack.append(num)\n                i = j\n        count = {}\n        for num in stack:\n            if num == 0:\n                continue\n            if stack[-1] == 1:\n                count[stack[0]] = num\n            else:\n                count[stack[0]] = count.get(stack[0], 0) + num\n        return ''.join([key + (str(val) if val > 1 else '') for key, val in sorted(count.items())])"}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            res.append(node.val)\n            \n            if node.right:\n                stack.append(node.right)\n                \n            if node.left:\n                stack.append(node.left)\n                \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        while n % 4 == 0:\n            n = n // 4\n        \n        return n == 1"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root is None:\n            return None\n        \n        temp = root.left\n        root.left = root.right\n        root.right = temp\n        \n        self.invertTree(root.left)\n        self.invertTree(root.right)\n        \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        if n == 1:\n            return ['()']\n        \n        res = []\n        for i in range(n):\n            left = self.generateParenthesis(i)\n            right = self.generateParenthesis(n - i - 1)\n            for l in left:\n                for r in right:\n                    res.append('({}){}'.format(l, r))\n        \n        return res"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # edge case\n        if len(nums) == 0:\n            return 0\n        \n        # edge case\n        if nums[0] > n:\n            return 0\n        \n        # edge case\n        if nums[0] == 1:\n            return 1\n        \n        # edge case\n        if nums[-1] == n:\n            return 1\n        \n        # edge case\n        if nums[-1] == n - 1:\n            return 2\n        \n        # edge case\n        if nums[-1] > n:\n            return 1\n        \n        # edge case\n        if nums[-1] > n - 1:\n            return 2\n        \n        # edge case\n        if nums[-1] > n - 2:\n            return 3\n        \n        # edge case\n        if nums[-1] > n - 3:\n            return 4\n        \n        # edge case\n        if nums[-1] > n - 4:\n            return 5\n        \n        # edge case\n        if nums[-1] > n - 5:\n            return 6\n        \n        # edge case\n        if nums[-1] > n - 6:\n            return 7\n        \n        # edge case\n        if nums[-1] > n - 7:\n            return 8\n        \n        # edge case\n        if nums[-1] > n - 8:\n            return 9\n        \n        # edge case\n        if nums[-1] > n - 9:\n            return 10\n        \n        # edge case\n        if nums[-1] > n - 10:\n            return 11\n        \n        # edge case\n        if nums[-1] > n - 11:\n            return 12\n        \n        # edge case\n        if nums[-1] > n - 12:\n            return 13\n        \n        # edge case\n        if nums[-1] > n - 13:\n            return 14\n        \n        # edge case\n        if nums[-1] > n - 14:\n            return 15\n        \n        # edge case\n        if nums[-1] > n - 15:\n            return 16\n        \n        # edge case\n        if nums[-1] > n - 16:\n            return 17\n        \n        # edge case\n        if nums[-1] > n - 17:\n            return 18\n        \n        # edge case\n        if nums[-1] > n - 18:\n            return 19\n        \n        # edge case\n        if nums[-1] > n - 19:\n            return 20\n        \n        # edge case\n        if nums[-1] > n - 20:\n            return 21\n        \n        # edge case\n        if nums[-1] > n - 21:\n            return 22\n        \n        # edge case\n        if nums[-1] > n - 22:\n            return 23\n        \n        # edge case\n        if nums[-1] > n - 23:\n            return 24\n        \n        # edge case\n        if nums[-1] > n - 24:\n            return 25\n        \n        # edge case\n        if nums[-1] > n - 25:\n            return 26\n        \n        # edge case\n        if nums[-1] > n - 26:\n            return 27\n        \n        # edge case\n        if nums[-1] > n - 27:\n            return 28\n        \n        # edge case\n        if nums[-1] > n - 28:\n            return 29\n        \n        # edge case\n        if nums[-1] > n - 29:\n            return 30\n        \n        # edge case\n        if nums[-1] > n - 30:\n            return 31\n        \n        # edge case\n        if nums[-1] > n - 31:\n            return 32\n        \n        # edge case\n        if nums[-1] > n - 32:\n            return 33\n        \n        # edge case"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \uc2a4\ud0dd\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc81c\uac70\ud558\uace0 \uc9dd\uc774 \ub9de\uc9c0 \uc54a\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\n        # 2. \uc2a4\ud0dd\uc758 \uae38\uc774\ub97c \ubc18\ud658\n        # 3. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud558\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\n        # 4. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\n        # 5. \uc2a4\ud0dd\uc758 \uae38\uc774\ub97c \ubc18\ud658\n        # 6. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud558\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\n        # 7. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\n        # 8. \uc2a4\ud0dd\uc758 \uae38\uc774\ub97c \ubc18\ud658\n        # 9. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud558\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\n        # 10. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\n        # 11. \uc2a4\ud0dd\uc758 \uae38\uc774\ub97c \ubc18\ud658\n        # 12. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0 \ucd94\uac00\ud558\uace0 \uc9dd\uc774 \ub9de\ub294 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\n        # 13. \uc2a4\ud0dd\uc774 \ube44\uc5b4\uc788\uc9c0 \uc54a\uc740 \uacbd\uc6b0 \uc2a4\ud0dd\uc5d0\uc11c \uc81c\uac70\ud558\uace0 \uc9dd\uc774 \ub9de\ufffd"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if numerator < 0 and denominator < 0:\n            numerator = abs(numerator)\n            denominator = abs(denominator)\n        elif numerator < 0:\n            numerator = abs(numerator)\n            denominator = -denominator\n        elif denominator < 0:\n            numerator = -numerator\n            denominator = abs(denominator)\n        \n        if numerator % denominator == 0:\n            return str(numerator // denominator)\n        \n        res = []\n        res.append(str(numerator // denominator))\n        numerator = numerator % denominator\n        numerator = numerator * 10\n        seen = {}\n        while numerator != 0:\n            if numerator in seen:\n                res.insert(seen[numerator], \"(\")\n                res.append(\")\")\n                break\n            seen[numerator] = len(res)\n            res.append(str(numerator // denominator))\n            numerator = numerator % denominator\n            numerator = numerator * 10\n        \n        return \"\".join(res)"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        mid = slow.next\n        slow.next = None\n        \n        left = self.sortList(head)\n        right = self.sortList(mid)\n        \n        dummy = ListNode()\n        curr = dummy\n        \n        while left and right:\n            if left.val < right.val:\n                curr.next = left\n                left = left.next\n            else:\n                curr.next = right\n                right = right.next\n            curr = curr.next\n        \n        if left:\n            curr.next = left\n        else:\n            curr.next = right\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        dp = []\n        for i in envelopes:\n            if not dp or i[1] > dp[-1]:\n                dp.append(i[1])\n            else:\n                left, right = 0, len(dp) - 1\n                while left <= right:\n                    mid = (left + right) // 2\n                    if dp[mid] < i[1]:\n                        left = mid + 1\n                    else:\n                        right = mid - 1\n                dp[left] = i[1]\n        return len(dp)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        rows = len(matrix)\n        cols = len(matrix[0])\n        \n        row_zero = False\n        \n        for i in range(rows):\n            if matrix[i][0] == 0:\n                row_zero = True\n            for j in range(1, cols):\n                if matrix[i][j] == 0:\n                    matrix[i][0] = 0\n                    matrix[0][j] = 0\n        \n        for i in range(1, rows):\n            for j in range(1, cols):\n                if matrix[i][0] == 0 or matrix[0][j] == 0:\n                    matrix[i][j] = 0\n        \n        if matrix[0][0] == 0:\n            for i in range(rows):\n                matrix[i][0] = 0\n        \n        if row_zero:\n            for i in range(rows):\n                matrix[i][0] = 0\n        \n        return matrix"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if head is None or head.next is None:\n        #     return None\n        \n        # dummy = ListNode(0)\n        # dummy.next = head\n        \n        # slow = dummy\n        # fast = dummy\n        \n        # for i in range(n):\n        #     fast = fast.next\n        \n        # while fast.next is not None:\n        #     slow = slow.next\n        #     fast = fast.next\n        \n        # slow.next = slow.next.next\n        \n        # return dummy.next\n        \n        # if head is None or head.next is None:\n        #     return None\n        \n        # dummy = ListNode(0)\n        # dummy.next = head\n        \n        # slow = dummy\n        # fast = dummy\n        \n        # for i in range(n):\n        #     fast = fast.next\n        \n        # while fast.next is not None:\n        #     slow = slow.next\n        #     fast = fast.next\n        \n        # slow.next = slow.next.next\n        \n        # return dummy.next\n        \n        if head is None:\n            return None\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        \n        slow = dummy\n        fast = dummy\n        \n        for i in range(n):\n            fast = fast.next\n        \n        while fast.next is not None:\n            slow = slow.next\n            fast = fast.next\n        \n        slow.next = slow.next.next\n        \n        return dummy.next"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 2:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 3:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 4:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 5:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 6:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 7:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 8:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        ## 4. Return the result set\n        \n        ## Solution 9:\n        ## Time Complexity: O(n)\n        ## Space Complexity: O(n)\n        ## Approach:\n        ## 1. Create a set from nums1\n        ## 2. Iterate through nums2 and check if nums2[i] is in set\n        ## 3. If yes, add nums2[i] to the result set\n        #"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        n = len(machines)\n        if total % n:\n            return -1\n        \n        avg = total // n\n        left = 0\n        right = 0\n        ans = 0\n        for i in machines:\n            left += i - avg\n            right += i - avg\n            ans = max(ans, abs(left), right)\n        return ans"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        def count(x):\n            c = 0\n            for i in range(1, m + 1):\n                c += min(x // i, n)\n            return c\n        \n        l, r = 1, m * n\n        while l < r:\n            mid = (l + r) // 2\n            if count(mid) < k:\n                l = mid + 1\n            else:\n                r = mid\n        return l"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = head\n        fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.left = self.sortedListToBST(head)\n        root.right = self.sortedListToBST(slow.next)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if list1 is None:\n            return list2\n        if list2 is None:\n            return list1\n        \n        if list1.val < list2.val:\n            head = list1\n            list1 = list1.next\n        else:\n            head = list2\n            list2 = list2.next\n        \n        curr = head\n        \n        while list1 is not None and list2 is not None:\n            if list1.val < list2.val:\n                curr.next = list1\n                list1 = list1.next\n            else:\n                curr.next = list2\n                list2 = list2.next\n            curr = curr.next\n        \n        if list1 is None:\n            curr.next = list2\n        else:\n            curr.next = list1\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        # 3. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\u4e58\u4ee5\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        # 4. \u8fd4\u56de\u6700\u5927\u9762\u79ef\n        \n        # 1. \u8ba1\u7b97\u6bcf\u4e00\u5217\u7684\u6700\u5927\u9762\u79ef\n        max_area = 0\n        heights = [0] * n\n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        # 2. \u8ba1\u7b97\u6bcf\u4e00\u884c\u7684\u9ad8\u5ea6\n        for i in range(m):\n            heights = [0] * n\n            for j in range(n-1, -1, -1):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            max_area = max(max_area, self.largestRectangleArea(heights))\n        \n        return max_area\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        stack = []\n        max_area = 0\n        for i in range(len(heights)):\n            while stack and heights[stack[-1]] > heights[i]:\n                h = heights[stack.pop()]\n                w = i if not stack else i - stack[-1] - 1\n                max_area = max(max_area, h * w)\n            stack.append(i)\n        \n        while stack:\n            h = heights[stack.pop()]\n            w = len(heights) if not stack else len(heights) - stack[-1] - 1\n            max_area = max(max_area, h * w)\n        \n        return max_area"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        res = []\n        n = len(nums)\n        for i in range(2**n):\n            subset = []\n            for j in range(n):\n                if i & (1<<j):\n                    subset.append(nums[j])\n            res.append(subset)\n        return res"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(nums) - 1\n        \n        while left < right:\n            mid = left + (right - left) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            elif nums[mid] < nums[right]:\n                right = mid\n            else:\n                right -= 1\n        \n        return nums[left]"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s:\n            return False\n        \n        if s[0] in ['+','-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        \n        if not s:\n            return False\n        \n        if 'e' in s:\n            try:\n                a,b = s.split('e')\n                return self.isInteger(a) and self.isInteger(b)\n            except:\n                return False\n        \n        return self.isInteger(s)\n        \n        \n    def isInteger(self, s):\n        if not s:\n            return False\n        \n        if s[0] in ['+','-']:\n            s = s[1:]\n        \n        if not s:\n            return False\n        \n        if s[-1] in ['+','-']:\n            s = s[:-1]\n        \n        if not s:\n            return False\n        \n        if '.' in s:\n            try:\n                a,b = s.split('.')\n                return self.isInteger(a) and self.isInteger(b)\n            except:\n                return False\n        \n        return True"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_dict = {\n            1000: \"M\",\n            900: \"CM\",\n            500: \"D\",\n            400: \"CD\",\n            100: \"C\",\n            90: \"XC\",\n            50: \"L\",\n            40: \"XL\",\n            10: \"X\",\n            9: \"IX\",\n            5: \"V\",\n            4: \"IV\",\n            1: \"I\",\n        }\n        \n        roman_num = \"\"\n        \n        for key in roman_dict.keys():\n            while num >= key:\n                roman_num += roman_dict[key]\n                num -= key\n                \n        return roman_num"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        # \n        # Time Complexity: O(n)\n        # Space Complexity: O(1)\n        \n        # XOR\n        #"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        def find_empty_space(board):\n            for i in range(9):\n                for j in range(9):\n                    if board[i][j] == '.':\n                        return (i,j)\n            return None\n        \n        def is_valid(board, num, pos):\n            # check row\n            for i in range(9):\n                if board[pos[0]][i] == num and pos[1] != i:\n                    return False\n            \n            # check column\n            for i in range(9):\n                if board[i][pos[1]] == num and pos[0] != i:\n                    return False\n            \n            # check box\n            box_x = pos[0] // 3\n            box_y = pos[1] // 3\n            \n            for i in range(box_x * 3, box_x * 3 + 3):\n                for j in range(box_y * 3, box_y * 3 + 3):\n                    if board[i][j] == num and (i,j) != pos:\n                        return False\n            \n            return True\n        \n        def solve(board):\n            empty = find_empty_space(board)\n            if empty is None:\n                return True\n            \n            for i in range(1,10):\n                if is_valid(board, str(i), empty):\n                    board[empty[0]][empty[1]] = str(i)\n                    \n                    if solve(board):\n                        return True\n                    \n                    board[empty[0]][empty[1]] = '.'\n            \n            return False\n        \n        solve(board)"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the first node that is smaller than its parent\n        # find the second node that is larger than its parent\n        # swap the values of the two nodes\n        \n        # inorder traversal\n        # find the"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        if not head:\n            return True\n        \n        slow = fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev = None\n        while slow:\n            temp = slow.next\n            slow.next = prev\n            prev = slow\n            slow = temp\n        \n        while prev:\n            if prev.val != head.val:\n                return False\n            prev = prev.next\n            head = head.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        left = 0\n        right = num\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        \n        if n == 1:\n            return [0,1]\n        \n        if n == 2:\n            return [0,1,1]\n        \n        if n == 3:\n            return [0,1,1,2]\n        \n        if n == 4:\n            return [0,1,1,2,2]\n        \n        if n == 5:\n            return [0,1,1,2,2,3]\n        \n        if n == 6:\n            return [0,1,1,2,2,3,3]\n        \n        if n == 7:\n            return [0,1,1,2,2,3,3,4]\n        \n        if n == 8:\n            return [0,1,1,2,2,3,3,4,4]\n        \n        if n == 9:\n            return [0,1,1,2,2,3,3,4,4,5]\n        \n        if n == 10:\n            return [0,1,1,2,2,3,3,4,4,5,5]\n        \n        if n == 11:\n            return [0,1,1,2,2,3,3,4,4,5,5,6]\n        \n        if n == 12:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6]\n        \n        if n == 13:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7]\n        \n        if n == 14:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7]\n        \n        if n == 15:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8]\n        \n        if n == 16:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8]\n        \n        if n == 17:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9]\n        \n        if n == 18:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10]\n        \n        if n == 19:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10]\n        \n        if n == 20:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11]\n        \n        if n == 21:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12]\n        \n        if n == 22:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13]\n        \n        if n == 23:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14]\n        \n        if n == 24:\n            return [0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,10,10,11,12,13,14,15]\n        \n        if n == 25"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        while head and head.val == val:\n            head = head.next\n        \n        curr = head\n        \n        while curr and curr.next:\n            if curr.next.val == val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        \n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) != len(s2):\n            return False\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        for i in range(1, len(s1)):\n            if self.isScramble(s1[:i], s2[:i]) and self.isScramble(s1[i:], s2[i:]):\n                return True\n            \n            if self.isScramble(s1[:i], s2[-i:]) and self.isScramble(s1[i:], s2[:-i]):\n                return True\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        for i in path.split('/'):\n            if i == '..':\n                if stack:\n                    stack.pop()\n            elif i and i != '.':\n                stack.append(i)\n        return '/' + '/'.join(stack)"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for letter in word:\n                if letter not in node:\n                    node[letter] = {}\n                node = node[letter]\n            node['*'] = True\n        \n        def dfs(i, j, node):\n            letter = board[i][j]\n            if letter not in node:\n                return False\n            \n            node = node[letter]\n            if '*' in node:\n                res.add(word)\n            \n            board[i][j] = '#'\n            for x, y in [(i-1, j), (i+1, j), (i, j-1), (i, j+1)]:\n                if 0 <= x < len(board) and 0 <= y < len(board[0]) and board[x][y] != '#':\n                    dfs(x, y, node)\n            board[i][j] = letter\n            return True\n        \n        res = set()\n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i, j, trie):\n                    pass\n        \n        return list(res)"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for key in s_dict:\n            if s_dict[key] != t_dict.get(key, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # 1. check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # 2. check columns\n        for col in range(9):\n            if len(set([board[row][col] for row in range(9)])) != 9:\n                return False\n        \n        # 3. check 3x3 boxes\n        for i in range(0, 9, 3):\n            for j in range(0, 9, 3):\n                if len(set([board[i+k][j+l] for k in range(3) for l in range(3)])) != 9:\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        answer = []\n        for i in range(1,n+1):\n            if i%3 == 0 and i%5 == 0:\n                answer.append(\"FizzBuzz\")\n            elif i%3 == 0:\n                answer.append(\"Fizz\")\n            elif i%5 == 0:\n                answer.append(\"Buzz\")\n            else:\n                answer.append(str(i))\n        return answer"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # reverse the order of the words\n        words.reverse()\n        \n        # join the words back into a string\n        return ' '.join(words)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        # 26^0 = 1\n        # 26^1 = 26\n        # 26^2 = 676\n        # 26^3 = 25600\n        # 26^4 = 1440000\n        # 26^5 = 73728000\n        # 26^6 = 3689600000\n        # 26^7 = 195312500000\n        # 26^8 = 1073741824000\n        # 26^9 = 53687091200000\n        # 26^10 = 2684354560000000\n        # 26^11 = 134217728000000000\n        # 26^12 = 6710886400000000000\n        # 26^13 = 335544320000000000000\n        # 26^14 = 16777216000000000000000\n        # 26^15 = 838860800000000000000000\n        # 26^16 = 41474560000000000000000000\n        # 26^17 = 2097152000000000000000000000\n        # 26^18 = 104857600000000000000000000000\n        # 26^19 = 5242880000000000000000000000000\n        # 26^20 = 262144000000000000000000000000000\n        # 26^21 = 13107200000000000000000000000000000\n        # 26^22 = 655360000000000000000000000000000000\n        # 26^23 = 32768000000000000000000000000000000000\n        # 26^24 = 1638400000000000000000000000000000000000\n        # 26^25 = 81920000000000000000000000000000000000000\n        # 26^26 = 4096000000000000000000000000000000000000000\n        # 26^27 = 204800000000000000000000000000000000000000000\n        # 26^28 = 10240000000000000000000000000000000000000000000\n        # 26^29 = 512000000000000000000000000000000000000000000000\n        # 26^30 = 25600000"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1]:\n                candies[i] = max(candies[i], candies[i + 1] + 1)\n        \n        return sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        slow = head\n        fast = head\n        \n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        second = slow.next\n        slow.next = None\n        \n        second = self.reverse(second)\n        \n        first = head\n        \n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n        \n    def reverse(self, head):\n        prev = None\n        curr = head\n        \n        while curr:\n            temp = curr.next\n            curr.next = prev\n            prev = curr\n            curr = temp\n        \n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of pattern and words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping\n        mapping = {}\n        \n        # iterate through the pattern and words\n        for i in range(len(pattern)):\n            # if the pattern and word are not in the mapping, add them\n            if pattern[i] not in mapping:\n                if words[i] not in mapping.values():\n                    mapping[pattern[i]] = words[i]\n                else:\n                    return False\n            # if the pattern and word are in the mapping, check if they match\n            else:\n                if mapping[pattern[i]] != words[i]:\n                    return False\n        \n        # if all the words are mapped, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        res = []\n        for i in range(len(nums)):\n            temp = nums[:i] + nums[i+1:]\n            for j in self.permute(temp):\n                res.append([nums[i]] + j)\n        return res"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m = len(matrix)\n        n = len(matrix[0])\n        \n        low = 0\n        high = m*n - 1\n        \n        while low <= high:\n            mid = (low + high) // 2\n            \n            if matrix[mid//n][mid%n] == target:\n                return True\n            elif matrix[mid//n][mid%n] < target:\n                low = mid + 1\n            else:\n                high = mid - 1\n        \n        return False"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        # Initialize a new linked list\n        head = ListNode()\n        # Initialize a pointer to the new linked list\n        curr = head\n        # Initialize a variable to keep track of the carry\n        carry = 0\n        \n        # Loop until both linked lists are empty\n        while l1 and l2:\n            # Add the values of the two linked lists\n            sum = l1.val + l2.val + carry\n            # Set the value of the current node to the sum modulo 10\n            curr.val = sum % 10\n            # Set the carry to the sum divided by 10\n            carry = sum // 10\n            # If the sum is greater than 9, set the carry to 1\n            if sum > 9:\n                carry = 1\n            # Move to the next node\n            if l1.next or l2.next or carry:\n                # Create a new node if the next node is not None\n                curr.next = ListNode()\n                # Move to the next node\n                curr = curr.next\n            # Move to the next node\n            l1 = l1.next\n            l2 = l2.next\n        \n        # If the second linked list is longer than the first linked list, add the remaining nodes to the new linked list\n        while l1:\n            sum = l1.val + carry\n            curr.val = sum % 10\n            carry = sum // 10\n            if sum > 9:\n                carry = 1\n            if l1.next or carry:\n                curr.next = ListNode()\n                curr = curr.next\n            l1 = l1.next\n        \n        # If the first linked list is longer than the second linked list, add the remaining nodes to the new linked list\n        while l2:\n            sum = l2.val + carry\n            curr.val = sum % 10\n            carry = sum // 10\n            if sum > 9:\n                carry = 1\n            if l2.next or carry:\n                curr.next = ListNode()\n                curr = curr.next\n            l2 = l2.next\n        \n        # If there is a carry, add a new node to the new linked list\n        if carry:\n            curr.next = ListNode(carry)\n        \n        # Return the new linked list\n        return head"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. Convert the number to binary\n        # 2. Flip the bits\n        # 3. Convert the binary to decimal\n        \n        # 1. Convert the number to binary\n        binary = bin(num)[2:]\n        \n        # 2. Flip the bits\n        complement = \"\"\n        for bit in binary:\n            if bit == \"0\":\n                complement += \"1\"\n            else:\n                complement += \"0\"\n        \n        # 3. Convert the binary to decimal\n        return int(complement, 2)"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        count = 0\n        diff = nums[1] - nums[0]\n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                count += 1\n            else:\n                diff = nums[i] - nums[i-1]\n                count += count\n        \n        return count"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        res = []\n        curr_len = 0\n        curr_words = []\n        for word in words:\n            if curr_len + len(word) + len(curr_words) > maxWidth:\n                if len(curr_words) == 1:\n                    res.append(curr_words[0] + ' ' * (maxWidth - curr_len))\n                else:\n                    spaces = (maxWidth - curr_len) // (len(curr_words) - 1)\n                    extra = (maxWidth - curr_len) % (len(curr_words) - 1)\n                    res.append(''.join([curr_words[i] + ' ' * (spaces + 1) + (' ' if i < extra else '') for i in range(len(curr_words))]))\n                curr_len = 0\n                curr_words = []\n            curr_len += len(word)\n            curr_words.append(word)\n        if curr_len:\n            res.append(' '.join(curr_words) + ' ' * (maxWidth - curr_len))\n        return res"}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        result = []\n        \n        while stack:\n            node = stack.pop()\n            result.append(node.val)\n            \n            if node.left:\n                stack.append(node.left)\n                \n            if node.right:\n                stack.append(node.right)\n                \n        return result[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        \n        while left < right:\n            area = min(height[left], height[right]) * (right - left)\n            max_area = max(area, max_area)\n            \n            if height[left] < height[right]:\n                left += 1\n            else:\n                right -= 1\n                \n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # Time Complexity: O(N * L)\n        # Space Complexity: O(N)\n        \n        # We can use a trie to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store the words in the dictionary.\n        # We can also use a set to store"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"0\"\n        \n        if num < 0:\n            num = abs(num)\n            sign = \"-\"\n        else:\n            sign = \"\"\n        \n        res = \"\"\n        \n        while num > 0:\n            res = str(num % 7) + res\n            num = num // 7\n        \n        return sign + res"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n%4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        def backtrack(row, cols, diag1, diag2):\n            if row == n:\n                return 1\n            \n            count = 0\n            for col in range(n):\n                if col not in cols and row - col not in diag1 and row + col not in diag2:\n                    cols.add(col)\n                    diag1.add(row - col)\n                    diag2.add(row + col)\n                    count += backtrack(row + 1, cols, diag1, diag2)\n                    cols.remove(col)\n                    diag1.remove(row - col)\n                    diag2.remove(row + col)\n            return count\n        \n        return backtrack(0, set(), set(), set())"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        def is_valid(board, row, col):\n            for i in range(row):\n                if board[i][col] == 'Q':\n                    return False\n            i = row - 1\n            j = col - 1\n            while i >= 0 and j >= 0:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j -= 1\n            i = row - 1\n            j = col + 1\n            while i >= 0 and j < n:\n                if board[i][j] == 'Q':\n                    return False\n                i -= 1\n                j += 1\n            return True\n        \n        def backtrack(board, row):\n            if row == n:\n                res.append([''.join(row) for row in board])\n                return\n            for col in range(n):\n                if is_valid(board, row, col):\n                    board[row][col] = 'Q'\n                    backtrack(board, row + 1)\n                    board[row][col] = '.'\n        \n        res = []\n        board = [['.' for _ in range(n)] for _ in range(n)]\n        backtrack(board, 0)\n        return res"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        def dfs(i,j,k):\n            if k == len(word):\n                return True\n            if i < 0 or i >= len(board) or j < 0 or j >= len(board[0]) or board[i][j] != word[k]:\n                return False\n            temp = board[i][j]\n            board[i][j] = \"#\"\n            res = dfs(i+1,j,k+1) or dfs(i-1,j,k+1) or dfs(i,j+1,k+1) or dfs(i,j-1,k+1)\n            board[i][j] = temp\n            return res\n        \n        for i in range(len(board)):\n            for j in range(len(board[0])):\n                if dfs(i,j,0):\n                    return True\n        return False"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # 2 pointer approach\n        # 1. iterate through nums1 and nums2\n        # 2. if nums1[i] < nums2[j]\n        # 3. append nums1[i] to nums1\n        # 4. else\n        # 5. append nums2[j] to nums1\n        # 6. increment i and j\n        # 7. if i == m\n        # 8. append nums2[j] to nums1\n        # 9. else\n        # 10. append nums1[i] to nums1\n        \n        i = m - 1\n        j = n - 1\n        k = m + n - 1\n        \n        while i >= 0 and j >= 0:\n            if nums1[i] < nums2[j]:\n                nums1[k] = nums2[j]\n                j -= 1\n            else:\n                nums1[k] = nums1[i]\n                i -= 1\n            k -= 1\n        \n        while j >= 0:\n            nums1[k] = nums2[j]\n            j -= 1\n            k -= 1\n        \n        return nums1"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max1 = max2 = max3 = float('-inf')\n        \n        for num in nums:\n            if num > max1:\n                max3 = max2\n                max2 = max1\n                max1 = num\n            elif num > max2:\n                max3 = max2\n                max2 = num\n            elif num > max3:\n                max3 = num\n        \n        return max3 if max3 != float('-inf') else max1"}]}