{"spiral-matrix": [{"task_id": "spiral-matrix", "completion": "class Solution(object):\n    def spiralOrder(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not matrix:\n            return []\n        \n        m, n = len(matrix), len(matrix[0])\n        res = []\n        left, right = 0, n - 1\n        top, bottom = 0, m - 1\n        \n        while left <= right and top <= bottom:\n            for i in range(left, right + 1):\n                res.append(matrix[top][i])\n            top += 1\n            if top > bottom:\n                break\n            \n            for i in range(top, bottom + 1):\n                res.append(matrix[i][right])\n            right -= 1\n            if right < left:\n                break\n            \n            for i in range(right, left - 1, -1):\n                res.append(matrix[bottom][i])\n            bottom -= 1\n            if bottom < top:\n                break\n            \n            for i in range(bottom, top - 1, -1):\n                res.append(matrix[i][left])\n            left += 1\n            \n        return res"}], "summary-ranges": [{"task_id": "summary-ranges", "completion": "class Solution(object):\n    def summaryRanges(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        if len(nums) == 1:\n            return [str(nums[0])]\n        \n        start = nums[0]\n        end = nums[0]\n        res = []\n        \n        for i in range(1, len(nums)):\n            if nums[i] == end + 1:\n                end += 1\n            else:\n                if start == end:\n                    res.append(str(start))\n                else:\n                    res.append(str(start) + \"->\" + str(end))\n                start = nums[i]\n                end = nums[i]\n        \n        if start == end:\n            res.append(str(start))\n        else:\n            res.append(str(start) + \"->\" + str(end))\n        \n        return res"}], "distinct-subsequences": [{"task_id": "distinct-subsequences", "completion": "class Solution(object):\n    def numDistinct(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: int\n        \"\"\"\n        \n        if len(s) < len(t):\n            return 0\n        \n        dp = [0] * (len(t) + 1)\n        dp[0] = 1\n        \n        count = 0\n        for i in range(len(s)):\n            if s[i] == t[count]:\n                count += 1\n            if count > 0:\n                dp[count] += 1\n        \n        if dp[count] == 0:\n            return 0\n        \n        ans = dp[count]\n        \n        for i in range(len(s) - len(t), -1, -1):\n            if s[i] == t[count]:\n                count += 1\n            if count > 0:\n                dp[count] += 1\n            ans += dp[count]\n            dp[count] -= 1\n        \n        return ans"}], "first-missing-positive": [{"task_id": "first-missing-positive", "completion": "class Solution(object):\n    def firstMissingPositive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. mark all negative numbers as 0\n        # 2. mark all numbers greater than n as 0\n        # 3. iterate through the array and mark the number at nums[i] as negative\n        # 4. iterate through the array again and if nums[i] is positive, then we have found the first missing positive\n        # 5. if all numbers are positive, then the first missing positive is n + 1\n        \n        n = len(nums)\n        for i in range(n):\n            if nums[i] <= 0:\n                nums[i] = n + 1\n        \n        for i in range(n):\n            if abs(nums[i]) <= n:\n                nums[abs(nums[i]) - 1] = -abs(nums[abs(nums[i]) - 1])\n        \n        for i in range(1, n):\n            if nums[i] > 0:\n                return i\n        \n        return n + 1"}], "permutation-sequence": [{"task_id": "permutation-sequence", "completion": "class Solution(object):\n    def getPermutation(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        # 1. calculate the factorial of n\n        fact = 1\n        for i in range(1, n):\n            fact *= i\n        \n        # 2. calculate the kth permutation\n        k -= 1\n        ans = \"\"\n        nums = [i for i in range(1, n+1)]\n        for i in range(n-1, -1, -1):\n            # 2.1 calculate the number of digits in the current permutation\n            num_digits = fact // (i+1)\n            # 2.2 calculate the index of the digit in the current permutation\n            idx = k // num_digits\n            # 2.3 calculate the digit in the current permutation\n            ans += str(nums[idx])\n            # 2.4 remove the digit from the nums\n            nums.remove(nums[idx])\n            # 2.5 update the k\n            k -= idx * num_digits\n            # 2.6 update the factorial\n            fact //= i+1\n        \n        # 3. add the remaining digits\n        ans += str(nums[0])\n        \n        return ans"}], "two-sum-ii-input-array-is-sorted": [{"task_id": "two-sum-ii-input-array-is-sorted", "completion": "class Solution(object):\n    def twoSum(self, numbers, target):\n        \"\"\"\n        :type numbers: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1. 2 pointers\n        # 2. 2 sum\n        # 3. binary search\n        \n        # 1"}], "expression-add-operators": [{"task_id": "expression-add-operators", "completion": "class Solution(object):\n    def addOperators(self, num, target):\n        \"\"\"\n        :type num: str\n        :type target: int\n        :rtype: List[str]\n        \"\"\"\n        \n        def backtrack(num, target, op, val, res, prev, mult):\n            if not num:\n                if val == target:\n                    res.append(op[1:] if mult else op)\n                return\n            for i in range(1, len(num)+1):\n                if i == 1 or (num[0] != '0' and i > 1):\n                    val = int(num[:i])\n                    if op:\n                        if mult:\n                            backtrack(num[i:], target - val - (op[-1] - '0') * val, op + '*' + num[i:], val * val, res, val, True)\n                        else:\n                            backtrack(num[i:], target - val, op + '+' + num[i:], val + val, res, val, True)\n                    else:\n                        backtrack(num[i:], target - val, num[i:], val, res, val, True)\n                elif i == len(num) and val > 0:\n                    break\n                else:\n                    break\n            return res\n        \n        if not num:\n            return []\n        if num[0] == '0':\n            return [None]\n        if len(num) == 1:\n            return [num] if int(num) == target else [None]\n        return backtrack(num, target, '', int(num[:1]), [num], int(num[:1]), False)"}], "sum-root-to-leaf-numbers": [{"task_id": "sum-root-to-leaf-numbers", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumNumbers(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        def dfs(root, curr):\n            if not root:\n                return 0\n            if not root.left and not root.right:\n                return curr * 10 + root.val\n            return dfs(root.left, curr * 10 + root.val) + dfs(root.right, curr * 10 + root.val)\n        \n        return dfs(root, 0)"}], "license-key-formatting": [{"task_id": "license-key-formatting", "completion": "class Solution(object):\n    def licenseKeyFormatting(self, s, k):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :rtype: str\n        \"\"\"\n        \n        s = s.replace('-', '').upper()\n        n = len(s)\n        if n <= k:\n            return s\n        r = n % k\n        if r == 0:\n            r = k\n        return '-'.join(s[i:i+k] for i in range(n-r, n-r-k, k))"}], "gas-station": [{"task_id": "gas-station", "completion": "class Solution(object):\n    def canCompleteCircuit(self, gas, cost):\n        \"\"\"\n        :type gas: List[int]\n        :type cost: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if sum(gas) < sum(cost):\n            return -1\n        \n        start, tank, total = 0, 0, 0\n        \n        for i in range(len(gas)):\n            tank += gas[i] - cost[i]\n            if tank < 0:\n                start = i + 1\n                tank = 0\n            total += gas[i] - cost[i]\n        \n        return start if total >= 0 else -1"}], "burst-balloons": [{"task_id": "burst-balloons", "completion": "class Solution(object):\n    def maxCoins(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums = [1] + nums + [1]\n        n = len(nums)\n        dp = [0] * n\n        dp[n - 2] = nums[n - 2] * nums[n - 1]\n        for i in range(n - 3, -1, -1):\n            dp[i] = nums[i] * dp[i + 1] + dp[i + 2]\n        res = dp[1]\n        for i in range(1, n - 1):\n            res = max(res, dp[i] + nums[i - 1] * nums[i + 1])\n        return res"}], "plus-one": [{"task_id": "plus-one", "completion": "class Solution(object):\n    def plusOne(self, digits):\n        \"\"\"\n        :type digits: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # if digits[-1] != 9:\n        #     digits[-1] += 1\n        #     return digits\n        # else:\n        #     carry = 1\n        #     for i in range(len(digits)-2, -1, -1):\n        #         if digits[i] != 9:\n        #             digits[i] += 1\n        #             carry = 0\n        #             break\n        #         else:\n        #             digits[i] = 0\n        #     if carry:\n        #         digits[0] += 1\n        #         digits.append(0)\n        #     return digits\n        \n        # if digits[-1] != 9:\n        #     digits[-1] += 1\n        #     return digits\n        # else:\n        #     carry = 1\n        #     for i in range(len(digits)-2, -1, -1):\n        #         if digits[i] != 9:\n        #             digits[i] += 1\n        #             carry = 0\n        #             break\n        #         else:\n        #             digits[i] = 0\n        #     if carry:\n        #         digits[0] += 1\n        #         digits.append(0)\n        #     return digits\n        \n        # if digits[-1] != 9:\n        #     digits[-1] += 1\n        #     return digits\n        # else:\n        #     carry = 1\n        #     for i in range(len(digits)-2, -1, -1):\n        #         if digits[i] != 9:\n        #             digits[i] += 1\n        #             carry = 0\n        #             break\n        #         else:\n        #             digits[i] = 0\n        #     if carry:\n        #         digits[0] += 1\n        #         digits.append(0)\n        #     return digits\n        \n        # if digits[-1] != 9:\n        #     digits[-1] += 1\n        #     return digits\n        # else:\n        #     carry = 1\n        #     for i in range(len(digits)-2, -1, -1):\n        #         if digits[i] != 9:\n        #             digits[i] += 1\n        #             carry = 0\n        #             break\n        #         else:\n        #             digits[i] = 0\n        #     if carry:\n        #         digits[0] += 1\n        #         digits.append(0)\n        #     return digits\n        \n        # if digits[-1] != 9:\n        #     digits[-1] += 1\n        #     return digits\n        # else:\n        #     carry = 1\n        #     for i in range(len(digits)-2, -1, -1):\n        #         if digits[i] != 9:\n        #             digits[i] += 1\n        #             carry = 0\n        #             break\n        #         else:\n        #             digits[i] = 0\n        #     if carry:\n        #         digits[0] += 1\n        #         digits.append(0)\n        #     return digits\n        \n        # if digits[-1] != 9:\n        #     digits[-1] += 1\n        #     return digits\n        # else:\n        #     carry = 1\n        #     for i in range(len(digits)-2, -1, -1):\n        #         if digits[i] != 9:\n        #             digits[i] += 1\n        #             carry = 0\n        #             break\n        #         else:\n        #             digits[i] = 0\n        #     if carry:\n        #         digits[0] += 1\n        #         digits.append(0)\n        #     return digits\n        \n        # if digits[-1] != 9:\n        #     digits[-1] += 1\n        #     return digits\n        # else:\n        #     carry = 1\n        #     for i in range(len(digits)-2, -1, -1):\n        #         if digits[i] != 9:\n        #"}], "regular-expression-matching": [{"task_id": "regular-expression-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.endswith('*'):\n            return s.endswith(p) and s.startswith(p[:-1]) and s[1:].find(p[-1] + '*') != -1\n        else:\n            return s.endswith(p) and s.startswith(p[:-1]) and s[1:].find(p[-1] + '*') != -1 or p.endswith('*') and s.startswith(p[:-1]) and s[1:].find(p[-1] + '*') != -1"}], "create-maximum-number": [{"task_id": "create-maximum-number", "completion": "class Solution(object):\n    def maxNumber(self, nums1, nums2, k):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        m, n = len(nums1), len(nums2)\n        if m > n:\n            return self.maxNumber(nums2, nums1, k)\n        \n        if n - m > k:\n            return [0] * k\n        \n        if n == 0:\n            return nums1[:k]\n        \n        if k == 0:\n            return [0] * k\n        \n        if k == m:\n            return nums1 if nums1 > nums2 else nums2\n        \n        if k == 1:\n            return [max(nums1[0], nums2[0])]\n        \n        # find the number of digits to remove from nums2\n        # such that we can make nums1 > nums2\n        # by removing the digits from nums2\n        # and keeping the digits from nums1\n        # to the right of the removed digits\n        # in nums2\n        #\n        # e.g.\n        # nums1 = [3, 4, 6, 5]\n        # nums2 = [9, 1, 2, 5, 8, 3]\n        #\n        # if we remove 3 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = [9, 1, 2, 5, 8, 3]\n        # nums1 = [3, 4, 6, 5]\n        #\n        # if we remove 5 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = [9, 1, 2, 5, 8, 3]\n        # nums1 = [3, 4, 6]\n        #\n        # if we remove 8 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = [9, 1, 2, 5, 3]\n        # nums1 = [3, 4]\n        #\n        # if we remove 9 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = [1, 2, 5, 3]\n        # nums1 = [3]\n        #\n        # if we remove 1 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = [2, 5, 3]\n        # nums1 = [3]\n        #\n        # if we remove 2 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = [5, 3]\n        # nums1 = [3]\n        #\n        # if we remove 5 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = [3]\n        # nums1 = [3]\n        #\n        # if we remove 3 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = []\n        # nums1 = [3]\n        #\n        # if we remove 3 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = []\n        # nums1 = []\n        #\n        # if we remove 3 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = []\n        # nums1 = []\n        #\n        # if we remove 3 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = []\n        # nums1 = []\n        #\n        # if we remove 3 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = []\n        # nums1 = []\n        #\n        # if we remove 3 from nums2, we can make\n        # nums1 > nums2\n        #\n        # nums2 = []\n        # nums1 = []\n        #\n        # if we remove 3 from num"}], "perfect-number": [{"task_id": "perfect-number", "completion": "class Solution(object):\n    def checkPerfectNumber(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return False\n        \n        if num == 2:\n            return True\n        \n        if num == 3:\n            return False\n        \n        if num == 4:\n            return True\n        \n        if num == 5:\n            return False\n        \n        if num == 6:\n            return True\n        \n        if num == 7:\n            return False\n        \n        if num == 8:\n            return True\n        \n        if num == 9:\n            return False\n        \n        if num == 10:\n            return True\n        \n        if num == 11:\n            return False\n        \n        if num == 12:\n            return True\n        \n        if num == 13:\n            return False\n        \n        if num == 14:\n            return True\n        \n        if num == 15:\n            return False\n        \n        if num == 16:\n            return True\n        \n        if num == 17:\n            return False\n        \n        if num == 18:\n            return True\n        \n        if num == 19:\n            return False\n        \n        if num == 20:\n            return True\n        \n        if num == 21:\n            return False\n        \n        if num == 22:\n            return True\n        \n        if num == 23:\n            return False\n        \n        if num == 24:\n            return True\n        \n        if num == 25:\n            return False\n        \n        if num == 26:\n            return True\n        \n        if num == 27:\n            return False\n        \n        if num == 28:\n            return True\n        \n        if num == 29:\n            return False\n        \n        if num == 30:\n            return True\n        \n        if num == 31:\n            return False\n        \n        if num == 32:\n            return True\n        \n        if num == 33:\n            return False\n        \n        if num == 34:\n            return True\n        \n        if num == 35:\n            return False\n        \n        if num == 36:\n            return True\n        \n        if num == 37:\n            return False\n        \n        if num == 38:\n            return True\n        \n        if num == 39:\n            return False\n        \n        if num == 40:\n            return True\n        \n        if num == 41:\n            return False\n        \n        if num == 42:\n            return True\n        \n        if num == 43:\n            return False\n        \n        if num == 44:\n            return True\n        \n        if num == 45:\n            return False\n        \n        if num == 46:\n            return True\n        \n        if num == 47:\n            return False\n        \n        if num == 48:\n            return True\n        \n        if num == 49:\n            return False\n        \n        if num == 50:\n            return True\n        \n        if num == 51:\n            return False\n        \n        if num == 52:\n            return True\n        \n        if num == 53:\n            return False\n        \n        if num == 54:\n            return True\n        \n        if num == 55:\n            return False\n        \n        if num == 56:\n            return True\n        \n        if num == 57:\n            return False\n        \n        if num == 58:\n            return True\n        \n        if num == 59:\n            return False\n        \n        if num == 60:\n            return True\n        \n        if num == 61:\n            return False\n        \n        if num == 62:\n            return True\n        \n        if num == 63:\n            return False\n        \n        if num == 64:\n            return True\n        \n        if num == 65:\n            return False\n        \n        if num == 66:\n            return True\n        \n        if num == 67:\n            return False\n        \n        if num == 68:\n            return True\n        \n        if num == 69:\n            return False\n        \n        if num == 70:\n            return True\n        \n        if num == 71:\n            return False\n        \n        if num == 72:\n            return True\n        \n        if num == 73:\n            return False\n        \n        if num == 74:\n            return True"}], "fibonacci-number": [{"task_id": "fibonacci-number", "completion": "class Solution(object):\n    def fib(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 2:\n            return n\n        \n        a, b = 0, 1\n        for i in range(n-1):\n            a, b = b, a+b\n        return b"}], "dungeon-game": [{"task_id": "dungeon-game", "completion": "class Solution(object):\n    def calculateMinimumHP(self, dungeon):\n        \"\"\"\n        :type dungeon: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(dungeon), len(dungeon[0])\n        dp = [float('inf')] * (n + 1)\n        dp[-1] = 1\n        \n        for i in range(m - 1, -1, -1):\n            dp[n - 1] = max(dp[n - 1] - dungeon[i][n - 1], 1)\n            for j in range(n - 2, -1, -1):\n                dp[j] = max(dp[j + 1] - dungeon[i][j], 1)\n            dp[n - 1] = min(dp[n - 1], dp[n - 2] - dungeon[i][n - 1])\n        \n        return dp[0] if dp[0] > 1 else 1"}], "find-k-th-smallest-pair-distance": [{"task_id": "find-k-th-smallest-pair-distance", "completion": "class Solution(object):\n    def smallestDistancePair(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # sort the array\n        nums.sort()\n        \n        # find the min and max distance\n        min_dist = nums[1] - nums[0]\n        max_dist = nums[-1] - nums[0]\n        \n        # binary search for the min distance\n        left, right = min_dist, max_dist\n        \n        while left < right:\n            mid = (left + right) // 2\n            # find the number of pairs with distance <= mid\n            # if the number of pairs is >= k, then the min distance is mid + 1\n            # otherwise, the min distance is mid\n            if self.count_pairs(nums, mid) >= k:\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left\n    \n    def count_pairs(self, nums, dist):\n        \"\"\"\n        :type nums: List[int]\n        :type dist: int\n        :rtype: int\n        \"\"\"\n        \n        # count the number of pairs with distance <= dist\n        # if the number of pairs is >= k, then the min distance is dist + 1\n        # otherwise, the min distance is dist\n        count, left = 0, 0\n        for right in range(1, len(nums)):\n            count += right - left\n            # if the number of pairs is >= k, then the min distance is dist + 1\n            # otherwise, the min distance is dist\n            if nums[right] - nums[left] > dist:\n                left += 1\n            count -= (right - left)\n        \n        return count"}], "number-of-segments-in-a-string": [{"task_id": "number-of-segments-in-a-string", "completion": "class Solution(object):\n    def countSegments(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        return len(s.split())"}], "reverse-vowels-of-a-string": [{"task_id": "reverse-vowels-of-a-string", "completion": "class Solution(object):\n    def reverseVowels(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n        s = list(s)\n        l, r = 0, len(s) - 1\n        while l < r:\n            if s[l] in vowels:\n                while r > 0 and s[r] not in vowels:\n                    r -= 1\n                s[l], s[r] = s[r], s[l]\n                r -= 1\n            l += 1\n        return ''.join(s)"}], "longest-consecutive-sequence": [{"task_id": "longest-consecutive-sequence", "completion": "class Solution(object):\n    def longestConsecutive(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        nums_set = set(nums)\n        max_len = 0\n        \n        for num in nums_set:\n            if num - 1 not in nums_set:\n                curr_num = num\n                curr_len = 1\n                \n                while curr_num + 1 in nums_set:\n                    curr_num += 1\n                    curr_len += 1\n                    \n                max_len = max(max_len, curr_len)\n                \n        return max_len"}], "missing-number": [{"task_id": "missing-number", "completion": "class Solution(object):\n    def missingNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## Solution 1:\n        ## Time: O(n)\n        ## Space: O(1)\n        ## XOR\n        ## XOR all the numbers from 0 to n, then XOR all the numbers from 0 to n+1, then XOR all the numbers from 0 to n+2, ..., then XOR all the numbers from 0 to n+k, where k is the number of numbers in nums.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n.\n        ## The missing number will be the XOR of all numbers from 0 to n+k, so XOR all the numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from 0 to n+k, then XOR the missing number with the XOR of all numbers from"}], "word-ladder": [{"task_id": "word-ladder", "completion": "class Solution(object):\n    def ladderLength(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: int\n        \"\"\"\n        \n        if endWord not in wordList:\n            return 0\n        \n        wordList = set(wordList)\n        q = collections.deque([(beginWord, 1)])\n        wordList.discard(beginWord)\n        \n        while q:\n            word, dist = q.popleft()\n            for i in range(len(word)):\n                for c in string.ascii_lowercase:\n                    newWord = word[:i] + c + word[i+1:]\n                    if newWord in wordList:\n                        if newWord == endWord:\n                            return dist + 1\n                        q.append((newWord, dist + 1))\n                        wordList.discard(newWord)\n        return 0"}], "add-binary": [{"task_id": "add-binary", "completion": "class Solution(object):\n    def addBinary(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: str\n        \"\"\"\n        \n        if len(a) < len(b):\n            a, b = b, a\n        \n        a = a[::-1]\n        b = b[::-1]\n        \n        carry = 0\n        res = []\n        \n        for i in range(len(a)):\n            if i < len(b):\n                carry += int(a[i]) + int(b[i])\n            else:\n                carry += int(a[i])\n            \n            res.append(carry % 2)\n            carry //= 2\n        \n        if carry:\n            res.append(carry)\n        \n        res = res[::-1]\n        \n        if res[0] == 0:\n            return ''.join(map(str, res[1:]))\n        else:\n            return ''.join(map(str, res))"}], "find-first-and-last-position-of-element-in-sorted-array": [{"task_id": "find-first-and-last-position-of-element-in-sorted-array", "completion": "class Solution(object):\n    def searchRange(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return [-1, -1]\n        \n        left, right = 0, len(nums) - 1\n        while left < right and nums[left] != target:\n            left += 1\n        if left == len(nums) or nums[left] != target:\n            return [-1, -1]\n        \n        right = len(nums) - 1\n        while left < right and nums[right] > target:\n            right -= 1\n        if nums[right] != target:\n            return [-1, -1]\n        \n        return [left, right]"}], "remove-duplicates-from-sorted-array": [{"task_id": "remove-duplicates-from-sorted-array", "completion": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return len(nums)\n        \n        k = 1\n        for i in range(1, len(nums)):\n            if nums[i] != nums[k-1]:\n                nums[k] = nums[i]\n                k += 1\n        \n        return k"}], "jump-game-ii": [{"task_id": "jump-game-ii", "completion": "class Solution(object):\n    def jump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) == 1:\n            return 0\n        \n        if nums[0] >= len(nums) - 1:\n            return 1\n        \n        max_reach = nums[0]\n        jumps = 1\n        cur_reach = nums[0]\n        \n        for i in range(1, len(nums) - 1):\n            if i + nums[i] > max_reach:\n                max_reach = i + nums[i]\n            if i == cur_reach:\n                jumps += 1\n                cur_reach = max_reach\n        \n        return jumps"}], "best-time-to-buy-and-sell-stock-iv": [{"task_id": "best-time-to-buy-and-sell-stock-iv", "completion": "class Solution(object):\n    def maxProfit(self, k, prices):\n        \"\"\"\n        :type k: int\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if k >= len(prices) // 2:\n            return sum(max(0, p - prices[0]) for p in prices[1:] if p > 0)\n        \n        buy = [float('inf')] * k\n        sell = [0] * k\n        \n        for p in prices:\n            for i in range(k - 1, 0, -1):\n                buy[i] = min(buy[i], p - sell[i - 1])\n                sell[i] = max(sell[i], p - buy[i])\n            sell[0] = max(sell[0], p + buy[0])\n        \n        return sell[-1]"}], "convert-a-number-to-hexadecimal": [{"task_id": "convert-a-number-to-hexadecimal", "completion": "class Solution(object):\n    def toHex(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return '0'\n        \n        if num < 0:\n            num = 0xffffffff + num + 1\n        \n        hex_dict = {10: 'a', 11: 'b', 12: 'c', 13: 'd', 14: 'e', 15: 'f'}\n        res = ''\n        while num:\n            res = hex_dict[num & 15] + res\n            num >>= 4\n        return res if res else '0'"}], "first-unique-character-in-a-string": [{"task_id": "first-unique-character-in-a-string", "completion": "class Solution(object):\n    def firstUniqChar(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a hashmap with the frequency of each character in the string\n        # iterate through the string and return the index of the first character with frequency 1\n        # if the character is not found, return -1\n        \n        # create a"}], "contains-duplicate-iii": [{"task_id": "contains-duplicate-iii", "completion": "class Solution(object):\n    def containsNearbyAlmostDuplicate(self, nums, indexDiff, valueDiff):\n        \"\"\"\n        :type nums: List[int]\n        :type indexDiff: int\n        :type valueDiff: int\n        :rtype: bool\n        \"\"\"\n        \n        if valueDiff < 0:\n            return False\n        \n        if len(nums) < 2:\n            return False\n        \n        if valueDiff >= nums[-1] - nums[0]:\n            return True\n        \n        if indexDiff >= len(nums) - 1:\n            return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False\n        \n        # if valueDiff >= nums[-1] - nums[0]:\n        #     return True\n        \n        # if indexDiff >= len(nums) - 1:\n        #     return False"}], "sort-colors": [{"task_id": "sort-colors", "completion": "class Solution(object):\n    def sortColors(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2\n        # 0, 1, 2"}], "max-consecutive-ones": [{"task_id": "max-consecutive-ones", "completion": "class Solution(object):\n    def findMaxConsecutiveOnes(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_ones = 0\n        ones = 0\n        \n        for n in nums:\n            if n == 1:\n                ones += 1\n            else:\n                ones = 0\n            max_ones = max(max_ones, ones)\n        return max_ones"}], "count-complete-tree-nodes": [{"task_id": "count-complete-tree-nodes", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def countNodes(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        left = self.getLeftHeight(root)\n        right = self.getRightHeight(root)\n        \n        if left == right:\n            return pow(2, left) - 1\n        \n        return 1 + self.countNodes(root.left) + self.countNodes(root.right)\n        \n    def getLeftHeight(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.getLeftHeight(root.left)\n        \n    def getRightHeight(self, root):\n        if not root:\n            return 0\n        \n        return 1 + self.getRightHeight(root.right)"}], "add-strings": [{"task_id": "add-strings", "completion": "class Solution(object):\n    def addStrings(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == '0':\n            return num2\n        if num2 == '0':\n            return num1\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        carry = 0\n        res = []\n        i = 0\n        while i < len(num1) or i < len(num2) or carry:\n            if i < len(num1):\n                carry += int(num1[i])\n            if i < len(num2):\n                carry += int(num2[i])\n            res.append(str(carry % 10))\n            carry //= 10\n            i += 1\n        \n        if carry:\n            res.append('1')\n        \n        return ''.join(res[::-1])"}], "basic-calculator": [{"task_id": "basic-calculator", "completion": "class Solution(object):\n    def calculate(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57\u548c\u7b26\u53f7\u63d0\u53d6\u51fa\u6765\n        # 2. \u5c06\u6570\u5b57\u548c\u7b26\u53f7\u5206\u7ec4\n        # 3. \u5c06\u5206\u7ec4\u540e\u7684\u6570\u5b57\u548c\u7b26\u53f7\u8fdb\u884c\u8ba1\u7b97\n        # 4. \u5c06\u8ba1\u7b97\u7ed3\u679c\u548c\u7b26\u53f7\u8fdb\u884c\u7ec4\u5408\n        \n        # 1. \u5c06\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57\u548c\u7b26\u53f7\u63d0\u53d6\u51fa\u6765\n        nums = []\n        sign = '+'\n        num = 0\n        for c in s:\n            if c.isdigit():\n                num = num * 10 + int(c)\n            elif c in '+-':\n                nums.append(num)\n                num = 0\n                sign = c\n            elif c == '(':\n                nums.append(num)\n                num = 0\n                nums.append(num)\n                num = 0\n                sign = c\n            elif c == ')':\n                nums.append(num)\n                num = nums.pop()\n                nums[-1] = nums[-1] * nums.pop() + nums.pop()\n                num = nums.pop()\n            else:\n                raise ValueError('Invalid expression')\n        if num:\n            nums.append(num)\n        \n        # 2. \u5c06\u6570\u5b57\u548c\u7b26\u53f7\u5206\u7ec4\n        # 3. \u5c06\u5206\u7ec4\u540e\u7684\u6570\u5b57\u548c\u7b26\u53f7\u8fdb\u884c\u8ba1\u7b97\n        # 4. \u5c06\u8ba1\u7b97\u7ed3\u679c\u548c\u7b26\u53f7\u8fdb\u884c\u7ec4\u5408\n        stack = [nums[0]]\n        i = 1\n        while i < len(nums):\n            if sign == '+':\n                stack.append(nums[i])\n            elif sign == '-':\n                stack.append(-nums[i])\n            elif sign == '*':\n                stack.append(stack.pop() * nums[i])\n            else:\n                stack.append(int(stack.pop() / nums[i]))\n            i += 1\n        \n        # 4. \u5c06\u8ba1\u7b97\u7ed3\u679c\u548c\u7b26\u53f7\u8fdb\u884c\u7ec4\u5408\n        return sum(stack)"}], "ipo": [{"task_id": "ipo", "completion": "class Solution(object):\n    def findMaximizedCapital(self, k, w, profits, capital):\n        \"\"\"\n        :type k: int\n        :type w: int\n        :type profits: List[int]\n        :type capital: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # sort capital and profits\n        # profits[i] - capital[i]\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] == 0, then we can't do it\n        # if profits[i] - capital[i] < 0, then we can't do it\n        # if profits[i] - capital[i] > 0, then we can do it\n        # if profits[i"}], "valid-parentheses": [{"task_id": "valid-parentheses", "completion": "class Solution(object):\n    def isValid(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) % 2 == 1:\n            return False\n        \n        stack = []\n        d = {')':'(', ']':'[', '}':'{'}\n        \n        for c in s:\n            if c not in d:\n                stack.append(c)\n            elif not stack or d[c] != stack.pop():\n                return False\n        \n        return not stack"}], "next-permutation": [{"task_id": "next-permutation", "completion": "class Solution(object):\n    def nextPermutation(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: None Do not return anything, modify nums in-place instead.\n        \"\"\"\n        \n        # find the first decreasing element from the end\n        i = len(nums) - 2\n        while i >= 0 and nums[i] >= nums[i + 1]:\n            i -= 1\n        \n        # if the array is already in descending order, reverse it\n        if i == -1:\n            nums.reverse()\n            return\n        \n        # find the first element greater than the decreasing element\n        j = len(nums) - 1\n        while nums[j] <= nums[i]:\n            j -= 1\n        \n        # swap the two elements\n        nums[i], nums[j] = nums[j], nums[i]\n        \n        # reverse the suffix\n        nums[i + 1:] = nums[len(nums) - 1: i:-1]"}], "contains-duplicate-ii": [{"task_id": "contains-duplicate-ii", "completion": "class Solution(object):\n    def containsNearbyDuplicate(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: bool\n        \"\"\"\n        \n        if len(nums) <= 1:\n            return False\n        \n        d = {}\n        for i, v in en.umerate(nums):\n            if v in d and i - d[v] <= k:\n                return True\n            d[v] = i\n        return False"}], "maximum-gap": [{"task_id": "maximum-gap", "completion": "class Solution(object):\n    def maximumGap(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 2:\n            return 0\n        \n        nums.sort()\n        max_diff = 0\n        for i in range(1, len(nums)):\n            max_diff = max(max_diff, nums[i] - nums[i - 1])\n        return max_diff"}], "binary-tree-level-order-traversal": [{"task_id": "binary-tree-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        queue = [root]\n        res = []\n        \n        while queue:\n            res.append([node.val for node in queue])\n            queue = [child for node in queue if node.left for child in [node.left, node.right] if child]\n            if queue:\n                queue = [child for node in queue if node.right for child in [node.right, node.left] if child]\n        \n        return res"}], "couples-holding-hands": [{"task_id": "couples-holding-hands", "completion": "class Solution(object):\n    def minSwapsCouples(self, row):\n        \"\"\"\n        :type row: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(row) // 2\n        d = {}\n        for i in range(n):\n            d[row[2*i]//2] = i\n        ans = 0\n        for i in range(0, n, 2):\n            if row[i+1] == row[i]^1:\n                continue\n            j = d[row[i+1]^1]\n            d[row[i]] = j\n            d[row[i+1]] = i\n            if j < i:\n                ans += 1\n        return ans"}], "interleaving-string": [{"task_id": "interleaving-string", "completion": "class Solution(object):\n    def isInterleave(self, s1, s2, s3):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :type s3: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s1) + len(s2) != len(s3):\n            return False\n        \n        if s1 == s2:\n            return s3 == s1 + s2\n        \n        if s1[0] == s3[0]:\n            s1 = s1[1:]\n        elif s2[0] == s3[0]:\n            s2 = s2[1:]\n        else:\n            return False\n        \n        if s1 == s2:\n            return s3[1:] == s1\n        \n        if s1[0] == s3[1]:\n            s1 = s1[1:]\n        elif s2[0] == s3[1]:\n            s2 = s2[1:]\n        else:\n            return False\n        \n        if s1 == s2:\n            return s3[2:] == s1\n        \n        if s1[0] == s3[2]:\n            s1 = s1[1:]\n        elif s2[0] == s3[2]:\n            s2 = s2[1:]\n        else:\n            return False\n        \n        if s1 == s2:\n            return s3[3:] == s1\n        \n        return s3[3:] == s1"}], "assign-cookies": [{"task_id": "assign-cookies", "completion": "class Solution(object):\n    def findContentChildren(self, g, s):\n        \"\"\"\n        :type g: List[int]\n        :type s: List[int]\n        :rtype: int\n        \"\"\"\n        \n        g.sort()\n        s.sort()\n        i = j = 0\n        while i < len(g) and j < len(s):\n            if s[j] >= g[i]:\n                i += 1\n            j += 1\n        return i"}], "keyboard-row": [{"task_id": "keyboard-row", "completion": "class Solution(object):\n    def findWords(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        row1 = set('qwertyuiop')\n        row2 = set('asdfghjkl')\n        row3 = set('zxcvbnm')\n        \n        ans = []\n        for word in words:\n            if word[0] in row1:\n                r = row1\n            elif word[0] in row2:\n                r = row2\n            else:\n                r = row3\n            if all(w in r for w in word[1:]):\n                ans.append(word)\n        return ans"}], "reverse-linked-list-ii": [{"task_id": "reverse-linked-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseBetween(self, head, left, right):\n        \"\"\"\n        :type head: ListNode\n        :type left: int\n        :type right: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if left == right:\n            return head\n        \n        dummy = ListNode(0, head)\n        dummy.next = head\n        prev = dummy\n        curr = head\n        for i in range(left - 1):\n            prev = prev.next\n            curr = curr.next\n        \n        tail = curr\n        for i in range(right - left):\n            tail = tail.next\n        \n        new_head = tail.next\n        tail.next = None\n        \n        prev.next = self.reverse(curr, new_head)\n        \n        return dummy.next\n    \n    def reverse(self, curr, new_head):\n        prev = None\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        return new_head"}], "shortest-palindrome": [{"task_id": "shortest-palindrome", "completion": "class Solution(object):\n    def shortestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # find the longest palindrome suffix\n        # if the string is a palindrome, then the suffix is itself\n        # if the string is not a palindrome, then the suffix is the reverse of the suffix without the center character\n        # if the suffix is not a palindrome, then the suffix is the reverse of the suffix without the last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first and last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, and second-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, and third-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, and fourth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, and fifth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, and sixth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, sixth-to-last, and seventh-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, sixth-to-last, seventh-to-last, and eighth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, sixth-to-last, seventh-to-last, eighth-to-last, and ninth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, sixth-to-last, seventh-to-last, eighth-to-last, ninth-to-last, and tenth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, sixth-to-last, seventh-to-last, eighth-to-last, ninth-to-last, tenth-to-last, and eleventh-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, sixth-to-last, seventh-to-last, eighth-to-last, ninth-to-last, tenth-to-last, eleventh-to-last, and twelfth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last, third-to-last, fourth-to-last, fifth-to-last, sixth-to-last, seventh-to-last, eighth-to-last, ninth-to-last, tenth-to-last, eleventh-to-last, twelfth-to-last, and thirteenth-to-last character\n        # if the suffix is not a palindrome either, then the suffix is the reverse of the suffix without the first, last, second-to-last,"}], "minimum-window-substring": [{"task_id": "minimum-window-substring", "completion": "class Solution(object):\n    def minWindow(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        if len(t) > len(s):\n            return \"\"\n        \n        # build hashmap of t\n        t_map = {}\n        for c in t:\n            t_map[c] = t_map.get(c, 0) + 1\n        \n        # build hashmap of s\n        s_map = {}\n        for c in s:\n            s_map[c] = s_map.get(c, 0) + 1\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map[s[0]] == 0:\n            del s_map[s[0]]\n        \n        # build hashmap of s\n        if s_map == t_map:\n            return t\n        \n        # build hashmap of s\n        if s_map[s[0]] == t_map[s[0]]:\n            s_map[s[0]] -= 1\n        \n        # build hashmap of s\n        if s_map"}], "self-crossing": [{"task_id": "self-crossing", "completion": "class Solution(object):\n    def isSelfCrossing(self, distance):\n        \"\"\"\n        :type distance: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(distance) < 4:\n            return False\n        \n        if distance[3] >= distance[1] and distance[2] >= distance[0]:\n            return True\n        \n        if distance[4] >= distance[0] and distance[3] >= distance[1] and distance[2] >= distance[0]:\n            return True\n        \n        if distance[3] >= distance[1] and distance[5] >= distance[4] and distance[2] >= distance[0]:\n            return True\n        \n        if distance[4] >= distance[0] and distance[5] >= distance[1] and distance[2] >= distance[0]:\n            return True\n        \n        if distance[3] >= distance[1] and distance[5] >= distance[2] and distance[0] >= distance[4]:\n            return True\n        \n        if distance[4] >= distance[0] and distance[5] >= distance[2] and distance[1] >= distance[3]:\n            return True\n        \n        return False"}], "remove-duplicates-from-sorted-list": [{"task_id": "remove-duplicates-from-sorted-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        curr = head\n        while curr.next:\n            if curr.next.val == curr.val:\n                curr.next = curr.next.next\n            else:\n                curr = curr.next\n        return head"}], "longest-palindrome": [{"task_id": "longest-palindrome", "completion": "class Solution(object):\n    def longestPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd, add 1 to the count\n        # 4. if even, add the frequency to the count\n        # 5. if the count is greater than 1, add 1 to the count\n        # 6. return the count\n        \n        # 1. create a hashmap to store the frequency of each character\n        # 2. iterate through the hashmap and check if the frequency is odd\n        # 3. if odd,"}], "construct-binary-tree-from-inorder-and-postorder-traversal": [{"task_id": "construct-binary-tree-from-inorder-and-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, inorder, postorder):\n        \"\"\"\n        :type inorder: List[int]\n        :type postorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not inorder:\n            return None\n        \n        root_val = postorder[-1]\n        root_idx = inorder.index(root_val)\n        \n        root = TreeNode(root_val)\n        root.right = self.buildTree(inorder[root_idx+1:], postorder[root_idx:-1])\n        root.left = self.buildTree(inorder[:root_idx], postorder[:root_idx])\n        \n        return root"}], "cut-off-trees-for-golf-event": [{"task_id": "cut-off-trees-for-golf-event", "completion": "class Solution(object):\n    def cutOffTree(self, forest):\n        \"\"\"\n        :type forest: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # get all the heights of trees\n        heights = [height for row in forest if height := forest[row][0]]\n        heights.sort()\n        if heights[0] == 0:\n            return -1\n        \n        # get the starting point\n        r, c = 0, 0\n        for row in forest:\n            if row[0] > 0:\n                r, c = row[0], row.index(0)\n                break\n        \n        # get the total steps\n        steps = 0\n        for h in heights[1:]:\n            steps += self.bfs(forest, r, c, h)\n            if steps < 0:\n                return steps\n            r, c = r, c + forest[r][c]\n        \n        return steps\n    \n    def bfs(self, forest, r, c, h):\n        q = [(r, c)]\n        nr, nc = len(forest), len(forest[0])\n        visited = set()\n        steps = 0\n        while q:\n            steps += 1\n            nq = []\n            for r, c in q:\n                if forest[r][c] == h:\n                    return steps\n                for nr, nc in ((r-1, c), (r, c-1), (r+1, c), (r, c+1)):\n                    if 0 <= nr < nr and 0 <= nc < nc and forest[nr][nc] > 1 and (nr, nc) not in visited:\n                        nq.append((nr, nc))\n                        visited.add((nr, nc))\n            q = nq\n        return -1"}], "minimum-depth-of-binary-tree": [{"task_id": "minimum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def minDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if not root:\n            return 0\n        \n        if not root.left:\n            return self.minDepth(root.right) + 1\n        if not root.right:\n            return self.minDepth(root.left) + 1\n        \n        return min(self.minDepth(root.left), self.minDepth(root.right)) + 1"}], "count-of-range-sum": [{"task_id": "count-of-range-sum", "completion": "class Solution(object):\n    def countRangeSum(self, nums, lower, upper):\n        \"\"\"\n        :type nums: List[int]\n        :type lower: int\n        :type upper: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap to store the number of prefix sum that is equal to the current sum - upper\n        # 4. use a hashmap to store the number of prefix sum that is equal to the current sum - lower\n        # 5. return the number of prefix sum that is equal to the current sum - lower\n        \n        # 1. compute the prefix sum\n        # 2. use a hashmap to store the number of prefix sum that is equal to the current sum\n        # 3. use a hashmap"}], "arranging-coins": [{"task_id": "arranging-coins", "completion": "class Solution(object):\n    def arrangeCoins(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        return int((-1 + sqrt(1 + 8 * n)) / 2)"}], "longest-uncommon-subsequence-i": [{"task_id": "longest-uncommon-subsequence-i", "completion": "class Solution(object):\n    def findLUSlength(self, a, b):\n        \"\"\"\n        :type a: str\n        :type b: str\n        :rtype: int\n        \"\"\"\n        \n        if a == b:\n            return -1\n        else:\n            return max(len(a), len(b))"}], "binary-tree-level-order-traversal-ii": [{"task_id": "binary-tree-level-order-traversal-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def levelOrderBottom(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        \n        while q:\n            res.append([node.val for node in q])\n            q = [child for node in q if node.left for child in [node.left, node.right] if child]\n        \n        return res[::-1]"}], "palindrome-number": [{"task_id": "palindrome-number", "completion": "class Solution(object):\n    def isPalindrome(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: bool\n        \"\"\"\n        \n        if x < 0:\n            return False\n        \n        if x < 10:\n            return True\n        \n        if x % 10 == 0:\n            return False\n        \n        rev = 0\n        while x > rev:\n            rev = rev * 10 + x % 10\n            x = x // 10\n        \n        return x == rev or x == rev // 10"}], "decode-ways": [{"task_id": "decode-ways", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if s[-1] == '0':\n            return 0\n        \n        if len(s) == 2:\n            if s[1] == '0':\n                return 0\n            else:\n                return 1\n        \n        a, b, c = 1, 1, int(s[0] != '0')\n        \n        for i in range(2, len(s)):\n            d = int(s[i-1] != '0') * (s[i] != '0') * a + int(s[i-1] == '1') * b + int(s[i-1] == '2' and s[i] < '7') * c\n            a, b, c = d, b, c\n        \n        return a"}], "is-subsequence": [{"task_id": "is-subsequence", "completion": "class Solution(object):\n    def isSubsequence(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) > len(t):\n            return False\n        \n        i = 0\n        for c in t:\n            if i < len(s) and c == s[i]:\n                i += 1\n        return i == len(s)"}], "gray-code": [{"task_id": "gray-code", "completion": "class Solution(object):\n    def grayCode(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2^n - 1 is the last number in the sequence\n        # 2"}], "climbing-stairs": [{"task_id": "climbing-stairs", "completion": "class Solution(object):\n    def climbStairs(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        \n        a, b = 1, 2\n        for i in range(3, n+1):\n            a, b = b, a+b\n        return b"}], "word-break": [{"task_id": "word-break", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: bool\n        \"\"\"\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        dp = [False] * (len(s) + 1)\n        dp[0] = True\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        dp[1] = s[0] in wordDict\n        \n        # dp[i] = True if s[:i] can be segmented into a space-separated sequence of one or more dictionary words.\n        # dp[i] = False otherwise.\n        for i in range(2, len(s) + 1):\n            for j in range(1, i):\n                if dp[j] and s[j:i] in wordDict:\n                    dp[i] = True\n                    break\n        \n        return dp[-1]"}], "validate-binary-search-tree": [{"task_id": "validate-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isValidBST(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def valid(node, left, right):\n            if not node:\n                return True\n            if left and node.val <= left.val:\n                return False\n            if right and node.val >= right.val:\n                return False\n            return valid(node.left, left, node) and valid(node.right, node, right)\n        \n        return valid(root, None, None)"}], "insert-interval": [{"task_id": "insert-interval", "completion": "class Solution(object):\n    def insert(self, intervals, newInterval):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :type newInterval: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if the new interval is empty, return the original list\n        if not newInterval:\n            return intervals\n        \n        # if the list is empty, return the new interval\n        if not intervals:\n            return [newInterval]\n        \n        # if the new interval starts before the first interval,\n        # insert it at the beginning of the list\n        if newInterval[0] < intervals[0][0]:\n            intervals.insert(0, newInterval)\n            return intervals\n        \n        # if the new interval ends after the last interval,\n        # insert it at the end of the list\n        if newInterval[1] > intervals[-1][1]:\n            intervals.append(newInterval)\n            return intervals\n        \n        # otherwise, find the index of the first interval that\n        # starts after the new interval\n        i = 0\n        while i < len(intervals) and intervals[i][1] < newInterval[0]:\n            i += 1\n        \n        # find the index of the last interval that ends before the\n        # new interval\n        j = len(intervals) - 1\n        while j >= 0 and intervals[j][0] > newInterval[1]:\n            j -= 1\n        \n        # merge the new interval with the last interval if they overlap\n        if intervals[j][1] >= newInterval[0]:\n            intervals[j][1] = max(intervals[j][1], newInterval[1])\n        else:\n            intervals.insert(j + 1, newInterval)\n        \n        # remove intervals that start after the new interval\n        if i < j:\n            intervals = intervals[:i + 1] + intervals[j:]\n        \n        return intervals"}], "palindrome-partitioning": [{"task_id": "palindrome-partitioning", "completion": "class Solution(object):\n    def partition(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # if len(s) <= 1:\n        #     return [s]\n        \n        # if len(s) == 2:\n        #     return [[s[0], s[1]], [s[1], s[0]]]\n        \n        # if len(s) == 3:\n        #     return [[s[0], s[1], s[2]], [s[0], s[2], s[1]], [s[1], s[0], s[2]], [s[2], s[0], s[1]]]\n        \n        # if len(s) == 4:\n        #     return [[s[0], s[1], s[2], s[3]], [s[0], s[2], s[3], s[1]], [s[1], s[0], s[3], s[2]], [s[2], s[0], s[3], s[1]], [s[3], s[0], s[1], s[2]], [s[3], s[2], s[0], s[1]]]\n        \n        # if len(s) == 5:\n        #     return [[s[0], s[1], s[2], s[3], s[4]], [s[0], s[2], s[3], s[4], s[1]], [s[1], s[0], s[3], s[4], s[2]], [s[2], s[0], s[3], s[4], s[1]], [s[3], s[0], s[1], s[4], s[2]], [s[4], s[0], s[1], s[2], s[3]], [s[4], s[2], s[0], s[1], s[3]], [s[2], s[1], s[0], s[3], s[4]], [s[3], s[1], s[0], s[4], s[2]], [s[4], s[1], s[0], s[2], s[3]], [s[2], s[1], s[3], s[0], s[4]], [s[3], s[1], s[2], s[0], s[4]], [s[4], s[1], s[2], s[0], s[3]], [s[2], s[1], s[3], s[4], s[0]], [s[3], s[1], s[4], s[0], s[2]], [s[4], s[1], s[3], s[0], s[2]], [s[2], s[1], s[4], s[0], s[3]], [s[3], s[1], s[4], s[2], s[0]], [s[4], s[1], s[3], s[2], s[0]], [s[2], s[1], s[3], s[4], s[5]], [s[3], s[1], s[4], s[5], s[2]], [s[4], s[1], s[3], s[5], s[2]], [s[2], s[1], s[4], s[5], s[3]], [s[3], s[1], s[5], s[2], s[4]], [s[4], s[1], s[5], s[2], s[3]], [s[5], s[1], s[2], s[4], s[3]], [s[2], s[1], s[5], s[3], s[4]], [s[3], s[1], s[5], s[4], s[2]], [s[4], s[1], s[5], s[3], s[2]], [s[5], s[1], s[3], s[4], s[2]], [s[2], s[1], s[5], s[4], s[3]], [s[3], s[1], s[5], s[4], s[2]], [s[4], s[1], s[5], s[3], s[2]], [s[5], s[1], s[3], s[4], s[2]], [s"}], "smallest-range-covering-elements-from-k-lists": [{"task_id": "smallest-range-covering-elements-from-k-lists", "completion": "class Solution(object):\n    def smallestRange(self, nums):\n        \"\"\"\n        :type nums: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the min and max in the first list\n        min_val = nums[0][0]\n        max_val = nums[0][0]\n        for l in nums[1:]:\n            if l[0] < min_val:\n                min_val = l[0]\n            if l[-1] > max_val:\n                max_val = l[-1]\n        \n        # find the max in the last list\n        max_val_last = max_val\n        for l in nums[-1:0:-1]:\n            if l[-1] > max_val_last:\n                max_val_last = l[-1]\n        \n        # find the min in the first list\n        min_val_first = min_val\n        for l in nums[1:]:\n            if l[0] > min_val_first:\n                min_val_first = l[0]\n        \n        # find the min and max in the first list\n        min_val = min_val_first\n        max_val = max_val_last\n        \n        # find the min in the last list\n        min_val_last = min_val\n        for l in nums[-1:0:-1]:\n            if l[0] > min_val_last:\n                min_val_last = l[0]\n        \n        # find the max in the first list\n        max_val_first = max_val\n        for l in nums[1:]:\n            if l[-1] < max_val_first:\n                max_val_first = l[-1]\n        \n        # find the min in the last list\n        min_val_last = min_val_last\n        for l in nums[-1:0:-1]:\n            if l[-1] < min_val_last:\n                min_val_last = l[-1]\n        \n        # find the min and max in the first list\n        min_val = min_val_last\n        max_val = max_val_first\n        \n        # find the min in the last list\n        min_val_last = min_val\n        for l in nums[-1:0:-1]:\n            if l[0] < min_val_last:\n                min_val_last = l[0]\n        \n        # find the max in the first list\n        max_val_first = max_val\n        for l in nums[1:]:\n            if l[-1] > max_val_first:\n                max_val_first = l[-1]\n        \n        # find the min in the last list\n        min_val_last = min_val_last\n        for l in nums[-1:0:-1]:\n            if l[-1] > min_val_last:\n                min_val_last = l[-1]\n        \n        # find the min and max in the first list\n        min_val = min_val_last\n        max_val = max_val_first\n        \n        # find the min in the last list\n        min_val_last = min_val\n        for l in nums[-1:0:-1]:\n            if l[0] < min_val_last:\n                min_val_last = l[0]\n        \n        # find the max in the first list\n        max_val_first = max_val\n        for l in nums[1:]:\n            if l[-1] > max_val_first:\n                max_val_first = l[-1]\n        \n        # find the min in the last list\n        min_val_last = min_val_last\n        for l in nums[-1:0:-1]:\n            if l[-1] > min_val_last:\n                min_val_last = l[-1]\n        \n        # find the min and max in the first list\n        min_val = min_val_last\n        max_val = max_val_first\n        \n        # find the min in the last list\n        min_val_last = min_val\n        for l in nums[-1:0:-1]:\n            if l[0] < min_val_last:\n                min_val_last = l[0]\n        \n        # find the max in the first list\n        max_val_first = max_val\n        for l in nums[1:]:\n            if l"}], "poor-pigs": [{"task_id": "poor-pigs", "completion": "class Solution(object):\n    def poorPigs(self, buckets, minutesToDie, minutesToTest):\n        \"\"\"\n        :type buckets: int\n        :type minutesToDie: int\n        :type minutesToTest: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000 buckets, 15 minutes to die, 15 minutes to test\n        # 1000 / 15 = 64 pigs\n        # 1000 / 15 / 64 = 2 pigs\n        # 1000 / 15 / 64 / 2 = 1 pigs\n        # 1000 / 15 / 64 / 2 / 1 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1000 / 15 / 64 / 2 / 1 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 / 0 = 0 pigs\n        # 1"}], "swim-in-rising-water": [{"task_id": "swim-in-rising-water", "completion": "class Solution(object):\n    def swimInWater(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        if n == 1:\n            return grid[0][0]\n        \n        # find the max elevation\n        max_elevation = max(grid[0][0], grid[n-1][n-1])\n        \n        # binary search for the time\n        left, right = 0, max_elevation\n        while left < right:\n            mid = (left + right) // 2\n            if self.is_possible(grid, mid, n):\n                right = mid\n            else:\n                left = mid + 1\n        \n        return left\n    \n    def is_possible(self, grid, time, n):\n        # check if we can reach the bottom right square\n        if grid[n-1][n-1] <= time:\n            return True\n        \n        # check if we can reach the bottom right square\n        q = [(n-1, n-1)]\n        seen = set()\n        seen.add(n-1)\n        seen.add(n-1)\n        while q:\n            x, y = q.pop()\n            if x > 0 and grid[x-1][y] <= time:\n                if (x-1, y) not in seen:\n                    q.append((x-1, y))\n                    seen.add((x-1, y))\n            if x < n-1 and grid[x+1][y] <= time:\n                if (x+1, y) not in seen:\n                    q.append((x+1, y))\n                    seen.add((x+1, y))\n            if y > 0 and grid[x][y-1] <= time:\n                if (x, y-1) not in seen:\n                    q.append((x, y-1))\n                    seen.add((x, y-1))\n            if y < n-1 and grid[x][y+1] <= time:\n                if (x, y+1) not in seen:\n                    q.append((x, y+1))\n                    seen.add((x, y+1))\n            if len(seen) == n*n:\n                return True\n        \n        return False"}], "unique-paths": [{"task_id": "unique-paths", "completion": "class Solution(object):\n    def uniquePaths(self, m, n):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        \n        # dp = [[1] * n] + [[1] + [0] * (n - 1) for _ in range(m - 1)]\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        \n        # dp = [[1] * n] + [[1] + [0] * (n - 1) for _ in range(m - 1)]\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        \n        # dp = [[1] * n] + [[1] + [0] * (n - 1) for _ in range(m - 1)]\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        \n        # dp = [[1] * n] + [[1] + [0] * (n - 1) for _ in range(m - 1)]\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        \n        # dp = [[1] * n] + [[1] + [0] * (n - 1) for _ in range(m - 1)]\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        \n        # dp = [[1] * n] + [[1] + [0] * (n - 1) for _ in range(m - 1)]\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        # return dp[-1][-1]\n        \n        # if m == 1 or n == 1:\n        #     return 1\n        # if m == 2 or n == 2:\n        #     return 2\n        \n        # dp = [[1] * n] + [[1] + [0] * (n - 1) for _ in range(m - 1)]\n        # for i in range(1, m):\n        #     for j in range(1, n):\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j"}], "multiply-strings": [{"task_id": "multiply-strings", "completion": "class Solution(object):\n    def multiply(self, num1, num2):\n        \"\"\"\n        :type num1: str\n        :type num2: str\n        :rtype: str\n        \"\"\"\n        \n        if num1 == \"0\" or num2 == \"0\":\n            return \"0\"\n        \n        num1 = num1[::-1]\n        num2 = num2[::-1]\n        \n        res = [0] * (len(num1) + len(num2))\n        \n        for i, d1 in enumerate(num1):\n            for j, d2 in enuemr(num2):\n                res[i + j] += int(d1) * int(d2)\n                res[i + j + 1] += res[i + j] // 10\n                res[i + j] %= 10\n        \n        res, idx = [str(r) for r in res if r != 0], len(res) - 1\n        while idx > 0 and res[idx] == \"0\":\n            idx -= 1\n        return \"\".join(res[:idx + 1]) or \"0\""}], "best-time-to-buy-and-sell-stock-iii": [{"task_id": "best-time-to-buy-and-sell-stock-iii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. Find the max profit from the left\n        ## 2. Find the max profit from the right\n        ## 3. Add the two profits\n        \n        ## 1. Find the max profit from the left\n        max_profit_left = 0\n        min_price_left = prices[0]\n        for price in prices:\n            min_price_left = min(min_price_left, price)\n            max_profit_left = max(max_profit_left, price - min_price_left)\n            \n        ## 2. Find the max profit from the right\n        max_profit_right = 0\n        max_price_right = prices[-1]\n        for price in prices[::-1]:\n            max_price_right = max(max_price_right, price)\n            max_profit_right = max(max_profit_right, max_price_right - price)\n            \n        ## 3. Add the two profits\n        return max_profit_left + max_profit_right"}], "combination-sum-ii": [{"task_id": "combination-sum-ii", "completion": "class Solution(object):\n    def combinationSum2(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        cur = []\n        self.dfs(candidates, target, 0, cur, res)\n        return res\n        \n    def dfs(self, candidates, target, start, cur, res):\n        if target < 0:\n            return\n        if target == 0:\n            res.append(cur[:])\n            return\n        for i in range(start, len(candidates)):\n            if i > start and candidates[i] == candidates[i-1]:\n                continue\n            cur.append(candidates[i])\n            self.dfs(candidates, target - candidates[i], i + 1, cur, res)\n            cur.pop()"}], "detect-capital": [{"task_id": "detect-capital", "completion": "class Solution(object):\n    def detectCapitalUse(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if word.isupper() or word.islower() or word[0].isupper():\n            return True\n        elif word[1:].isupper() and word[0].islower():\n            return True\n        else:\n            return False"}], "best-time-to-buy-and-sell-stock": [{"task_id": "best-time-to-buy-and-sell-stock", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        min_price = float('inf')\n        max_profit = 0\n        \n        for price in prices:\n            min_price = min(min_price, price)\n            max_profit = max(max_profit, price - min_price)\n            \n        return max_profit"}], "binary-tree-inorder-traversal": [{"task_id": "binary-tree-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def inorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = []\n        res = []\n        curr = root\n        \n        while curr or stack:\n            if curr:\n                stack.append(curr)\n                curr = curr.left\n            else:\n                curr = stack.pop()\n                res.append(curr.val)\n                curr = curr.right\n        \n        return res"}], "construct-binary-tree-from-preorder-and-inorder-traversal": [{"task_id": "construct-binary-tree-from-preorder-and-inorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def buildTree(self, preorder, inorder):\n        \"\"\"\n        :type preorder: List[int]\n        :type inorder: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not preorder:\n            return None\n        \n        if len(preorder) == 1:\n            return TreeNode(preorder[0])\n        \n        root = TreeNode(preorder[0])\n        idx = inorder.index(preorder[0])\n        root.left = self.buildTree(preorder[1:idx+1], inorder[:idx])\n        root.right = self.buildTree(preorder[idx+1:], inorder[idx+1:])\n        \n        return root"}], "remove-invalid-parentheses": [{"task_id": "remove-invalid-parentheses", "completion": "class Solution(object):\n    def removeInvalidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: List[str]\n        \"\"\"\n        \n        # find the first and last invalid parentheses\n        # if there is no invalid parentheses, return [s]\n        # if there is only one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)) if s[i] == '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] == '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == '(' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == '(' and s[i-1] == '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] == '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == '(' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == '(' and s[i-1] == '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] == '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == '(' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == '(' and s[i-1] == '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range(len(s)-1, -1, -1) if s[i] == ')' and s[i-1] != '(']\n        # if there are more than one invalid parentheses, return [s[0:i] + s[i+1:] for i in range"}], "merge-k-sorted-lists": [{"task_id": "merge-k-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeKLists(self, lists):\n        \"\"\"\n        :type lists: List[ListNode]\n        :rtype: ListNode\n        \"\"\"\n        \n        if not lists or len(lists) == 0:\n            return None\n        \n        if len(lists) == 1:\n            return lists[0]\n        \n        if len(lists) == 2:\n            return self.mergeTwoLists(lists[0], lists[1])\n        \n        mid = len(lists) // 2\n        l1 = self.mergeKLists(lists[:mid])\n        l2 = self.mergeKLists(lists[mid:])\n        \n        return self.mergeTwoLists(l1, l2)\n        \n    def mergeTwoLists(self, l1, l2):\n        if not l1:\n            return l2\n        if not l2:\n            return l1\n        \n        if l1.val < l2.val:\n            l1, l2 = l1.next, l2\n        \n        head = l1\n        \n        while l1 and l2:\n            if l1.val < l2.val:\n                l1, l1.next = l1.next, l2\n            else:\n                l2, l2.next = l2.next, l1\n        \n        return head"}], "palindrome-partitioning-ii": [{"task_id": "palindrome-partitioning-ii", "completion": "class Solution(object):\n    def minCut(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # dp[1] = 0\n        \n        # for i in range(2, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(1, i):\n        #         if s[i - j - 1] == s[i - 1]:\n        #             dp[i] = min(dp[i], dp[i - j - 1] - 1 if i - j >= 2 else 0)\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # dp[1] = 0\n        \n        # for i in range(2, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(1, i):\n        #         if s[i - j - 1] == s[i - 1]:\n        #             dp[i] = min(dp[i], dp[i - j - 1] - 1 if i - j >= 2 else 0)\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # dp[1] = 0\n        \n        # for i in range(2, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(1, i):\n        #         if s[i - j - 1] == s[i - 1]:\n        #             dp[i] = min(dp[i], dp[i - j - 1] - 1 if i - j >= 2 else 0)\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # dp[1] = 0\n        \n        # for i in range(2, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(1, i):\n        #         if s[i - j - 1] == s[i - 1]:\n        #             dp[i] = min(dp[i], dp[i - j - 1] - 1 if i - j >= 2 else 0)\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0\n        \n        # dp = [0] * (len(s) + 1)\n        # dp[0] = -1\n        # dp[1] = 0\n        \n        # for i in range(2, len(s) + 1):\n        #     dp[i] = i - 1\n        #     for j in range(1, i):\n        #         if s[i - j - 1] == s[i - 1]:\n        #             dp[i] = min(dp[i], dp[i - j - 1] - 1 if i - j >= 2 else 0)\n        #             dp[i] = min(dp[i], dp[j] + 1)\n        # return dp[-1]\n        \n        # if len(s) <= 1:\n        #     return 0"}], "preimage-size-of-factorial-zeroes-function": [{"task_id": "preimage-size-of-factorial-zeroes-function", "completion": "class Solution(object):\n    def preimageSizeFZF(self, k):\n        \"\"\"\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226,"}], "palindrome-pairs": [{"task_id": "palindrome-pairs", "completion": "class Solution(object):\n    def palindromePairs(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # create a hashmap to store the reverse of each word\n        # and store the index of each word in the hashmap\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is also a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is not a palindrome, then the reverse of the word itself is a palindrome\n        # if the reverse of a word is a palindrome, then the reverse of the word itself is not a palindrome\n        # if the reverse of a word is not a palindrome, then"}], "convert-sorted-array-to-binary-search-tree": [{"task_id": "convert-sorted-array-to-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedArrayToBST(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: TreeNode\n        \"\"\"\n        \n        if not nums:\n            return None\n        \n        if len(nums) == 1:\n            return TreeNode(nums[0])\n        \n        mid = len(nums) // 2\n        root = TreeNode(nums[mid])\n        root.left = self.sortedArrayToBST(nums[:mid])\n        root.right = self.sortedArrayToBST(nums[mid+1:])\n        \n        return root"}], "contain-virus": [{"task_id": "contain-virus", "completion": "class Solution(object):\n    def containVirus(self, isInfected):\n        \"\"\"\n        :type isInfected: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(isInfected), len(isInfected[0])\n        total_infected = m * n\n        if total_infected == 0:\n            return 0\n        \n        # 1. Find the largest region\n        # 2. Put walls in that region\n        # 3. If the region is not fully infected, repeat step 1\n        # 4. If the region is fully infected, repeat step 2\n        # 5. If the region is fully infected, repeat step 2\n        # 6. If the region is fully infected, repeat step 2\n        # 7. If the region is fully infected, repeat step 2\n        # 8. If the region is fully infected, repeat step 2\n        # 9. If the region is fully infected, repeat step 2\n        # 10. If the region is fully infected, repeat step 2\n        # 11. If the region is fully infected, repeat step 2\n        # 12. If the region is fully infected, repeat step 2\n        # 13. If the region is fully infected, repeat step 2\n        # 14. If the region is fully infected, repeat step 2\n        # 15. If the region is fully infected, repeat step 2\n        # 16. If the region is fully infected, repeat step 2\n        # 17. If the region is fully infected, repeat step 2\n        # 18. If the region is fully infected, repeat step 2\n        # 19. If the region is fully infected, repeat step 2\n        # 20. If the region is fully infected, repeat step 2\n        # 21. If the region is fully infected, repeat step 2\n        # 22. If the region is fully infected, repeat step 2\n        # 23. If the region is fully infected, repeat step 2\n        # 24. If the region is fully infected, repeat step 2\n        # 25. If the region is fully infected, repeat step 2\n        # 26. If the region is fully infected, repeat step 2\n        # 27. If the region is fully infected, repeat step 2\n        # 28. If the region is fully infected, repeat step 2\n        # 29. If the region is fully infected, repeat step 2\n        # 30. If the region is fully infected, repeat step 2\n        # 31. If the region is fully infected, repeat step 2\n        # 32. If the region is fully infected, repeat step 2\n        # 33. If the region is fully infected, repeat step 2\n        # 34. If the region is fully infected, repeat step 2\n        # 35. If the region is fully infected, repeat step 2\n        # 36. If the region is fully infected, repeat step 2\n        # 37. If the region is fully infected, repeat step 2\n        # 38. If the region is fully infected, repeat step 2\n        # 39. If the region is fully infected, repeat step 2\n        # 40. If the region is fully infected, repeat step 2\n        # 41. If the region is fully infected, repeat step 2\n        # 42. If the region is fully infected, repeat step 2\n        # 43. If the region is fully infected, repeat step 2\n        # 44. If the region is fully infected, repeat step 2\n        # 45. If the region is fully infected, repeat step 2\n        # 46. If the region is fully infected, repeat step 2\n        # 47. If the region is fully infected, repeat step 2\n        # 48. If the region is fully infected, repeat step 2\n        # 49. If the region is fully infected, repeat step 2\n        # 50. If the region is fully infected, repeat step 2\n        # 51. If the region is fully infected, repeat step 2\n        # 52. If the region is fully infected, repeat step 2\n        # 53. If the region is fully infected, repeat step 2\n        # 54. If the region is fully infected, repeat step 2\n        # 55. If the region is fully infected, repeat step 2\n        # 5"}], "longest-increasing-path-in-a-matrix": [{"task_id": "longest-increasing-path-in-a-matrix", "completion": "class Solution(object):\n    def longestIncreasingPath(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        dp = [[0] * n for _ in range(m)]\n        max_path = 0\n        \n        for i in range(m):\n            for j in range(n):\n                max_path = max(max_path, self.dfs(matrix, dp, i, j, m, n))\n        \n        return max_path\n    \n    def dfs(self, matrix, dp, i, j, m, n):\n        if dp[i][j]:\n            return dp[i][j]\n        \n        max_path = 1\n        \n        if i > 0 and matrix[i - 1][j] > matrix[i][j]:\n            max_path = max(max_path, 1 + self.dfs(matrix, dp, i - 1, j, m, n))\n        \n        if i < m - 1 and matrix[i + 1][j] > matrix[i][j]:\n            max_path = max(max_path, 1 + self.dfs(matrix, dp, i + 1, j, m, n))\n        \n        if j > 0 and matrix[i][j - 1] > matrix[i][j]:\n            max_path = max(max_path, 1 + self.dfs(matrix, dp, i, j - 1, m, n))\n        \n        if j < n - 1 and matrix[i][j + 1] > matrix[i][j]:\n            max_path = max(max_path, 1 + self.dfs(matrix, dp, i, j + 1, m, n))\n        \n        dp[i][j] = max_path\n        return max_path"}], "number-of-digit-one": [{"task_id": "number-of-digit-one", "completion": "class Solution(object):\n    def countDigitOne(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 1:\n            return 0\n        if n < 10:\n            return 1\n        \n        # 10^x\n        # 10^(x-1) * 10\n        # 10^(x-1) * 10 + (n - 10^x + 1)\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100 + (n - 10^x + 1) / 1000\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100 + (n - 10^x + 1) / 1000 + (n - 10^x + 1) / 10000\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100 + (n - 10^x + 1) / 1000 + (n - 10^x + 1) / 10000 + (n - 10^x + 1) / 100000\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100 + (n - 10^x + 1) / 1000 + (n - 10^x + 1) / 10000 + (n - 10^x + 1) / 100000 + (n - 10^x + 1) / 1000000\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100 + (n - 10^x + 1) / 1000 + (n - 10^x + 1) / 10000 + (n - 10^x + 1) / 100000 + (n - 10^x + 1) / 1000000 + (n - 10^x + 1) / 10000000\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100 + (n - 10^x + 1) / 1000 + (n - 10^x + 1) / 10000 + (n - 10^x + 1) / 100000 + (n - 10^x + 1) / 1000000 + (n - 10^x + 1) / 10000000 + (n - 10^x + 1) / 100000000\n        # 10^(x-1) * 10 + (n - 10^x + 1) / 10 + (n - 10^x + 1) / 100 + (n - 10^x + 1) / 1000 + (n - 10^x + 1) / 10000 + (n - 10^x + 1) / 100000 + (n - 10^x + 1) / 1000000 + (n - 10^x + 1) / 10000000 + (n - 10^x"}], "word-break-ii": [{"task_id": "word-break-ii", "completion": "class Solution(object):\n    def wordBreak(self, s, wordDict):\n        \"\"\"\n        :type s: str\n        :type wordDict: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # create a set of words from wordDict\n        wordSet = set(wordDict)\n        \n        # create a list of length s.length + 1\n        # the last element will be True if s can be segmented into words in wordDict\n        dp = [False] * (len(s) + 1)\n        \n        # initialize the first element to True\n        dp[0] = True\n        \n        # iterate over the string s\n        for i in range(1, len(s) + 1):\n            # iterate over the string s backwards\n            for j in range(i - 1, -1, -1):\n                # if the substring s[j:i] is in wordSet, and the substring s[0:j] can be segmented into words in wordDict\n                if s[j:i] in wordSet and dp[j]:\n                    # set dp[i] to True\n                    dp[i] = True\n                    break\n        \n        # if dp[len(s)] is False, return an empty list\n        if not dp[len(s)]:\n            return []\n        \n        # create a list of strings\n        res = []\n        \n        # iterate over the string s backwards\n        i = len(s)\n        \n        # iterate over the string s backwards\n        while i > 0:\n            # if the substring s[i - 1:i] is in wordSet, and the substring s[0:i - 1] can be segmented into words in wordDict\n            if s[i - 1:i] in wordSet and dp[i - 1]:\n                # if the substring s[0:i - 1] is not in res, add it to the list\n                if not res or res[-1] != s[i - 1 - len(res[-1]):i - 1]:\n                    res.append(s[i - 1 - len(res[-1]):i - 1])\n                # set i to i - 1 - len(res[-1])\n                i -= len(res[-1])\n        \n        # return the list of strings\n        return res[::-1]"}], "binary-tree-zigzag-level-order-traversal": [{"task_id": "binary-tree-zigzag-level-order-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def zigzagLevelOrder(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        q = [root]\n        res = []\n        level = 0\n        \n        while q:\n            level += 1\n            res.append([])\n            q2 = []\n            for node in q:\n                if node.left:\n                    q2.append(node.left)\n                if node.right:\n                    q2.append(node.right)\n            q = q2\n            if level % 2 == 0:\n                res[-1] = res[-1][::-1]\n        \n        return res"}], "binary-watch": [{"task_id": "binary-watch", "completion": "class Solution(object):\n    def readBinaryWatch(self, turnedOn):\n        \"\"\"\n        :type turnedOn: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if turnedOn > 8:\n            return []\n        \n        if turnedOn == 0:\n            return [\"0:00\"]\n        \n        if turnedOn == 1:\n            return [\"12:00\", \"36:00\"]\n        \n        if turnedOn == 2:\n            return [\"06:00\", \"18:00\", \"30:00\", \"42:00\", \"54:00\", \"66:00\", \"78:00\", \"90:00\"]\n        \n        if turnedOn == 3:\n            return [\"04:00\", \"12:01\", \"18:02\", \"24:03\", \"30:04\", \"36:05\", \"42:06\", \"54:07\", \"60:08\", \"66:09\", \"72:10\", \"78:11\", \"84:12\", \"90:13\", \"96:14\"]\n        \n        if turnedOn == 4:\n            return [\"02:00\", \"04:01\", \"06:02\", \"08:03\", \"10:04\", \"12:05\", \"14:06\", \"16:07\", \"18:08\", \"20:09\", \"22:10\", \"24:11\", \"26:12\", \"28:13\", \"30:14\", \"32:15\", \"34:16\", \"36:17\", \"38:18\", \"40:19\", \"42:20\", \"44:21\", \"46:22\", \"48:23\", \"50:24\", \"52:25\", \"54:26\", \"56:27\", \"58:28\", \"60:29\", \"62:30\", \"64:31\", \"66:32\", \"68:33\", \"70:34\", \"72:35\", \"74:36\", \"76:37\", \"78:38\", \"80:39\", \"82:40\", \"84:41\", \"86:42\", \"88:43\", \"90:44\", \"92:45\", \"94:46\", \"96:47\", \"98:48\"]\n        \n        if turnedOn == 5:\n            return [\"01:01\", \"02:02\", \"04:04\", \"05:05\", \"06:06\", \"08:08\", \"10:10\", \"11:11\", \"13:13\", \"15:15\", \"16:16\", \"18:18\", \"20:20\", \"21:21\", \"23:23\", \"24:24\", \"26:26\", \"28:28\", \"30:30\", \"31:31\", \"33:33\", \"35:35\", \"37:37\", \"39:39\", \"40:40\", \"42:42\", \"44:44\", \"46:46\", \"48:48\", \"50:50\", \"51:51\", \"53:53\", \"55:55\", \"57:57\", \"59:59\", \"61:61\", \"63:63\", \"65:65\", \"67:67\", \"69:69\", \"71:71\", \"73:73\", \"75:75\", \"77:77\", \"79:79\", \"81:81\", \"83:83\", \"85:85\", \"87:87\", \"89:89\", \"91:91\", \"93:93\", \"95:95\", \"97:97\", \"99:99\"]\n        \n        if turnedOn == 6:\n            return [\"00:03\", \"00:05"}], "pascals-triangle": [{"task_id": "pascals-triangle", "completion": "class Solution(object):\n    def generate(self, numRows):\n        \"\"\"\n        :type numRows: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if numRows == 0:\n            return []\n        \n        if numRows == 1:\n            return [[1]]\n        \n        if numRows == 2:\n            return [[1], [1,1]]\n        \n        res = [[1] * (i+1) for i in range(numRows)]\n        \n        for i in range(2, numRows):\n            for j in range(1, i):\n                res[i][j] = res[i-1][j-1] + res[i-1][j]\n        \n        return res"}], "power-of-three": [{"task_id": "power-of-three", "completion": "class Solution(object):\n    def isPowerOfThree(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 3 == 0:\n            return self.isPowerOfThree(n // 3)\n        \n        return False"}], "binary-tree-maximum-path-sum": [{"task_id": "binary-tree-maximum-path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxPathSum(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        self.maxSum = float('-inf')\n        def maxGain(node):\n            if not node:\n                return 0\n            \n            leftGain = max(maxGain(node.left), 0)\n            rightGain = max(maxGain(node.right), 0)\n            \n            self.maxSum = max(self.maxSum, leftGain + rightGain + node.val)\n            \n            return node.val + max(leftGain, rightGain)\n        \n        maxGain(root)\n        return self.maxSum"}], "trapping-rain-water-ii": [{"task_id": "trapping-rain-water-ii", "completion": "class Solution(object):\n    def trapRainWater(self, heightMap):\n        \"\"\"\n        :type heightMap: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        if not heightMap or not heightMap[0]:\n            return 0\n        \n        m, n = len(heightMap), len(heightMap[0])\n        heap = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(heap)\n        q = [(heightMap[i][0], i, 0) for i in range(m)] + [(heightMap[i][n-1], i, n-1) for i in range(m)]\n        heapq.heapify(q)\n        seen = set(q)\n        ans = 0\n        dirs = [(1, 0), (-1, 0), (0, 1), (0, -1)]\n        for i in range(1, m+n-1):\n            if not heap:\n                break\n            h, x, y = heapq.heappop(heap)\n            if x > 0:\n                ans += h - heightMap[x-1][y]\n                heapq.heappush(heap, (h, x-1, y))\n            if x < m-1:\n                ans += h - heightMap[x+1][y]\n                heapq.heappush(heap, (h, x+1, y))\n            if y > 0:\n                ans += h - heightMap[x][y-1]\n                heapq.heappush(heap, (h, x, y-1))\n            if y < n-1:\n                ans += h - heightMap[x][y+1]\n                heapq.heappush(heap, (h, x, y+1))\n            if i < m+n-1:\n                heightMap[x][y] = h\n                if x > 0:\n                    seen.add((x-1, y))\n                    heapq.heappush(q, (heightMap[x-1][y], x-1, y))\n                if x < m-1:\n                    seen.add((x+1, y))\n                    heapq.heappush(q, (heightMap[x+1][y], x+1, y))\n                if y > 0:\n                    seen.add((x, y-1))\n                    heapq.heappush(q, (heightMap[x][y-1], x, y-1))\n                if y < n-1:\n                    seen.add((x, y+1))\n                    heapq.heappush(q, (heightMap[x][y+1], x, y+1))\n        return ans"}], "valid-palindrome": [{"task_id": "valid-palindrome", "completion": "class Solution(object):\n    def isPalindrome(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # remove all non-alphanumeric characters\n        s = re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n        \n        # check if the string is a palindrome\n        return s == s[::-1]"}], "sliding-window-median": [{"task_id": "sliding-window-median", "completion": "class Solution(object):\n    def medianSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[float]\n        \"\"\"\n        \n        # if k is odd, we need to take the middle value\n        if k % 2 == 1:\n            median = nums[k // 2]\n        else:\n            median = (nums[k // 2] + nums[k // 2 - 1]) / 2.0\n        \n        # initialize the result\n        result = [median]\n        \n        # iterate over the rest of the array\n        for i in range(k, len(nums)):\n            # add the next value to the window\n            median = (median + nums[i] - nums[i - k]) / 2.0\n            # add the new value to the result\n            result.append(median)\n        \n        return result"}], "rotate-list": [{"task_id": "rotate-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def rotateRight(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the length of the list\n        length = 1\n        curr = head\n        while curr.next:\n            curr = curr.next\n            length += 1\n        \n        # find the new head\n        k = k % length\n        if k == 0:\n            return head\n        \n        # find the new tail\n        curr.next = head\n        curr = head\n        for i in range(length - k - 1):\n            curr = curr.next\n        \n        # find the new head\n        new_head = curr.next\n        curr.next = None\n        \n        return new_head"}], "ugly-number": [{"task_id": "ugly-number", "completion": "class Solution(object):\n    def isUgly(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n == 1:\n            return True\n        \n        if n % 2 == 0:\n            return self.isUgly(n // 2)\n        \n        if n % 3 == 0:\n            return self.isUgly(n // 3)\n        \n        if n % 5 == 0:\n            return self.isUgly(n // 5)\n        \n        return False"}], "falling-squares": [{"task_id": "falling-squares", "completion": "class Solution(object):\n    def fallingSquares(self, positions):\n        \"\"\"\n        :type positions: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "sum-of-left-leaves": [{"task_id": "sum-of-left-leaves", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sumOfLeftLeaves(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        if root.left is None:\n            return self.sumOfLeftLeaves(root.right)\n        \n        if root.left.left is None and root.left.right is None:\n            return root.left.val + self.sumOfLeftLeaves(root.right)\n        \n        return self.sumOfLeftLeaves(root.left) + self.sumOfLeftLeaves(root.right)"}], "max-sum-of-rectangle-no-larger-than-k": [{"task_id": "max-sum-of-rectangle-no-larger-than-k", "completion": "class Solution(object):\n    def maxSumSubmatrix(self, matrix, k):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if not matrix or not matrix[0]:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        if m > n:\n            matrix = zip(*matrix)\n            m, n = n, m\n            k = -k\n        \n        # find the max sum of a subarray <= k\n        maxSum = float('-inf')\n        curSum = 0\n        prefixSum = [0] * n\n        for num in matrix[0]:\n            curSum += num\n            prefixSum[0] = max(prefixSum[0], curSum) if curSum > 0 else curSum\n        maxSum = max(maxSum, prefixSum[0])\n        \n        # find the max sum of a subarray <= k - maxSum\n        for i in range(1, n):\n            prefixSum[i] = prefixSum[i - 1] + matrix[i][0]\n            if prefixSum[i] > k:\n                prefixSum[i] -= matrix[i][i]\n            else:\n                maxSum = max(maxSum, prefixSum[i])\n        \n        # find the max sum of a subarray <= k - maxSum\n        for i in range(1, m):\n            curSum = prefixSum[0] + matrix[i][i]\n            if curSum > k:\n                curSum -= matrix[i][i]\n            else:\n                maxSum = max(maxSum, curSum)\n                if maxSum == k:\n                    return k\n        \n            for j in range(1, n - i):\n                curSum += matrix[i][j]\n                if curSum > k:\n                    curSum -= matrix[i][j]\n                else:\n                    maxSum = max(maxSum, curSum)\n                    if maxSum == k:\n                        return k\n                prefixSum[j] = max(prefixSum[j], curSum)\n        \n        return maxSum if maxSum <= k else maxSum - k"}], "divide-two-integers": [{"task_id": "divide-two-integers", "completion": "class Solution(object):\n    def divide(self, dividend, divisor):\n        \"\"\"\n        :type dividend: int\n        :type divisor: int\n        :rtype: int\n        \"\"\"\n        \n        if dividend == 0:\n            return 0\n        \n        if dividend == -2**31 and divisor == -1:\n            return 2**31 - 1\n        \n        if dividend > 0 and divisor > 0:\n            sign = 1\n        elif dividend < 0 and divisor > 0:\n            sign = -1\n        elif dividend > 0 and divisor < 0:\n            sign = -1\n        else:\n            sign = 1\n        \n        dividend = abs(dividend)\n        divisor = abs(divisor)\n        \n        if dividend < divisor:\n            return 0\n        \n        if dividend == divisor:\n            return sign\n        \n        if dividend < divisor * 2:\n            return sign * (dividend // divisor)\n        \n        if dividend % divisor == 0:\n            return sign * (dividend // divisor)\n        \n        if dividend % divisor == 1:\n            return sign * (dividend // divisor + 1)\n        \n        if dividend % divisor == 2:\n            return sign * (dividend // divisor + 2)\n        \n        if dividend % divisor == 3:\n            return sign * (dividend // divisor + 3)\n        \n        if dividend % divisor == 4:\n            return sign * (dividend // divisor + 4)\n        \n        if dividend % divisor == 5:\n            return sign * (dividend // divisor + 5)\n        \n        if dividend % divisor == 6:\n            return sign * (dividend // divisor + 6)\n        \n        if dividend % divisor == 7:\n            return sign * (dividend // divisor + 7)\n        \n        if dividend % divisor == 8:\n            return sign * (dividend // divisor + 8)\n        \n        if dividend % divisor == 9:\n            return sign * (dividend // divisor + 9)\n        \n        if dividend % divisor == 10:\n            return sign * (dividend // divisor + 10)\n        \n        if dividend % divisor == 11:\n            return sign * (dividend // divisor + 11)\n        \n        if dividend % divisor == 12:\n            return sign * (dividend // divisor + 12)\n        \n        if dividend % divisor == 13:\n            return sign * (dividend // divisor + 13)\n        \n        if dividend % divisor == 14:\n            return sign * (dividend // divisor + 14)\n        \n        if dividend % divisor == 15:\n            return sign * (dividend // divisor + 15)\n        \n        if dividend % divisor == 16:\n            return sign * (dividend // divisor + 16)\n        \n        if dividend % divisor == 17:\n            return sign * (dividend // divisor + 17)\n        \n        if dividend % divisor == 18:\n            return sign * (dividend // divisor + 18)\n        \n        if dividend % divisor == 19:\n            return sign * (dividend // divisor + 19)\n        \n        if dividend % divisor == 20:\n            return sign * (dividend // divisor + 20)\n        \n        if dividend % divisor == 21:\n            return sign * (dividend // divisor + 21)\n        \n        if dividend % divisor == 22:\n            return sign * (dividend // divisor + 22)\n        \n        if dividend % divisor == 23:\n            return sign * (dividend // divisor + 23)\n        \n        if dividend % divisor == 24:\n            return sign * (dividend // divisor + 24)\n        \n        if dividend % divisor == 25:\n            return sign * (dividend // divisor + 25)\n        \n        if dividend % divisor == 26:\n            return sign * (dividend // divisor + 26)\n        \n        if dividend % divisor == 27:\n            return sign * (dividend // divisor + 27)\n        \n        if dividend % divisor == 28:"}], "surrounded-regions": [{"task_id": "surrounded-regions", "completion": "class Solution(object):\n    def solve(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        if not board:\n            return\n        \n        m, n = len(board), len(board[0])\n        # mark all the border 'O's with 'S'\n        for i in range(m):\n            if board[i][0] == 'O':\n                board[i][0] = 'S'\n            if board[i][n-1] == 'O':\n                board[i][n-1] = 'S'\n        for j in range(n):\n            if board[0][j] == 'O':\n                board[0][j] = 'S'\n            if board[m-1][j] == 'O':\n                board[m-1][j] = 'S'\n        \n        # mark all the 'O's that are not on the border with 'S'\n        for i in range(1, m-1):\n            for j in range(1, n-1):\n                if board[i][j] == 'O':\n                    board[i][j] = 'S' if board[i-1][j] == 'S' and board[i][j-1] == 'S' and board[i+1][j] == 'S' and board[i][j+1] == 'S' else 'O'\n        \n        # flip all the 'S's with 'O's\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] == 'S':\n                    board[i][j] = 'O'\n                if board[i][j] == 'O':\n                    board[i][j] = 'X'"}], "two-sum": [{"task_id": "two-sum", "completion": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # create a dictionary\n        # key: number, value: index\n        # if target - number in dictionary, return index\n        # else, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary\n        # if number not in dictionary, add number to dictionary"}], "24-game": [{"task_id": "24-game", "completion": "class Solution(object):\n    def judgePoint24(self, cards):\n        \"\"\"\n        :type cards: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if len(cards) == 1:\n            return abs(cards[0] - 24) < 1e-6\n        \n        if 0 in cards:\n            return False\n        \n        if len(cards) == 2:\n            return abs(cards[0] * 4 - sum(cards)) < 1e-6\n        \n        if len(cards) == 3:\n            return abs(cards[0] * 3 - sum(cards[1:])) < 1e-6 or abs(cards[1] * 2 - sum(cards[2:])) < 1e-6 or abs(cards[2] * 2 - sum(cards[3:])) < 1e-6\n        \n        if len(cards) == 4:\n            return abs(cards[0] * 3 - sum(cards[1:])) < 1e-6 or abs(cards[1] * 2 - sum(cards[2:])) < 1e-6 or abs(cards[2] * 2 - sum(cards[3:])) < 1e-6 or abs(cards[3] * 2 - sum(cards[0:])) < 1e-6\n        \n        if len(cards) == 5:\n            return abs(cards[0] * 4 - sum(cards[1:])) < 1e-6 or abs(cards[1] * 3 - sum(cards[2:])) < 1e-6 or abs(cards[2] * 2 - sum(cards[3:])) < 1e-6 or abs(cards[3] * 2 - sum(cards[4:])) < 1e-6 or abs(cards[4] * 2 - sum(cards[0:])) < 1e-6\n        \n        if len(cards) == 6:\n            return abs(cards[0] * 5 - sum(cards[1:])) < 1e-6 or abs(cards[1] * 4 - sum(cards[2:])) < 1e-6 or abs(cards[2] * 3 - sum(cards[3:])) < 1e-6 or abs(cards[3] * 2 - sum(cards[4:])) < 1e-6 or abs(cards[4] * 2 - sum(cards[5:])) < 1e-6 or abs(cards[5] * 2 - sum(cards[0:])) < 1e-6\n        \n        if len(cards) == 7:\n            return abs(cards[0] * 6 - sum(cards[1:])) < 1e-6 or abs(cards[1] * 5 - sum(cards[2:])) < 1e-6 or abs(cards[2] * 4 - sum(cards[3:])) < 1e-6 or abs(cards[3] * 3 - sum(cards[4:])) < 1e-6 or abs(cards[4] * 2 - sum(cards[5:])) < 1e-6 or abs(cards[5] * 2 - sum(cards[6:])) < 1e-6 or abs(cards[6] * 2 - sum(cards[0:])) < 1e-6\n        \n        if len(cards) == 8:\n            return abs(cards[0] * 7 - sum(cards[1:])) < 1e-6 or abs(cards[1] * 6 - sum(cards[2:])) < 1e-6 or abs(cards[2] * 5 - sum(cards[3:])) < 1e-6 or abs(cards[3] * 4 - sum(cards[4:])) < 1e-6 or abs(cards[4] * 3 - sum(cards[5:])) < 1e-6 or abs(cards[5] * 2 - sum(cards[6:])) < 1e-6 or abs(cards[6] * 2 - sum(cards[7:])) < 1e-6 or abs(cards[7] * 2 - sum(cards[0:])) < 1e-6\n        \n        if len(cards) == 9:\n            return abs(cards[0] * 8 - sum"}], "wildcard-matching": [{"task_id": "wildcard-matching", "completion": "class Solution(object):\n    def isMatch(self, s, p):\n        \"\"\"\n        :type s: str\n        :type p: str\n        :rtype: bool\n        \"\"\"\n        \n        if not p.endswith('*'):\n            return s.endswith(p)\n        \n        star = p.rfind('*')\n        if star == -1:\n            return False\n        \n        if s[0:star] == p[0:star]:\n            return self.isMatch(s[star:], p[star:])\n        \n        return False"}], "majority-element": [{"task_id": "majority-element", "completion": "class Solution(object):\n    def majorityElement(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # Boyer-Moore Voting Algorithm\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        # https://leetcode.com/problems/majority-element/discuss/100988/Python-O(n)-solution-with-explanation/282556#\n        #"}], "reconstruct-itinerary": [{"task_id": "reconstruct-itinerary", "completion": "class Solution(object):\n    def findItinerary(self, tickets):\n        \"\"\"\n        :type tickets: List[List[str]]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a graph\n        graph = collections.defaultdict(list)\n        for a, b in sorted(tickets)[::-1]:\n            graph[a] += [b]\n        \n        # find the starting point\n        start = \"JFK\"\n        res = []\n        while graph[start]:\n            start = graph[start].pop()\n            res += [start]\n        \n        return res[::-1]"}], "4sum": [{"task_id": "4sum", "completion": "class Solution(object):\n    def fourSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        if n < 4:\n            return []\n        if nums[0]+nums[1]+nums[2]+nums[3] > target:\n            return []\n        if nums[n-1]*4 < target:\n            return []\n        if nums[n-1] == nums[n-2] == nums[n-3] == nums[n-4]:\n            return [[nums[n-4],nums[n-4],nums[n-4],nums[n-4]]]\n        if nums[0] == nums[n-1] == nums[n-2] == nums[n-3]:\n            return [[nums[0],nums[0],nums[0],nums[0]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,3,-1):\n            if nums[i]*4 > target:\n                break\n            if nums[i] in d:\n                if d[nums[i]] < i-1:\n                    return [[nums[i],nums[i],nums[i],nums[i]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,2,-1):\n            if nums[i]*3 > target:\n                break\n            if nums[i] in d:\n                if d[nums[i]] < i-1:\n                    return [[nums[i],nums[i],nums[i],nums[i]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,1,-1):\n            if nums[i]*2 > target:\n                break\n            if nums[i] in d:\n                if d[nums[i]] < i-1:\n                    return [[nums[i],nums[i],nums[i],nums[i]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,0,-1):\n            if nums[i] > target:\n                break\n            if nums[i] in d:\n                if d[nums[i]] < i-1:\n                    return [[nums[i],nums[i],nums[i],nums[i]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,3,-1):\n            if nums[i]*4 < target:\n                break\n            if nums[i] in d:\n                if d[nums[i]] < i-1:\n                    return [[nums[i],nums[i],nums[i],nums[i]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,2,-1):\n            if nums[i]*3 < target:\n                break\n            if nums[i] in d:\n                if d[nums[i]] < i-1:\n                    return [[nums[i],nums[i],nums[i],nums[i]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,1,-1):\n            if nums[i]*2 < target:\n                break\n            if nums[i] in d:\n                if d[nums[i]] < i-1:\n                    return [[nums[i],nums[i],nums[i],nums[i]]]\n        d = {}\n        for i in range(n-1):\n            d[nums[i]] = i\n        for i in range(n-1,0,-1):\n            if nums[i] < target:\n                break\n            if nums"}], "the-skyline-problem": [{"task_id": "the-skyline-problem", "completion": "class Solution(object):\n    def getSkyline(self, buildings):\n        \"\"\"\n        :type buildings: List[List[int]]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 1. sort the buildings by left edge\n        # 2. use a stack to store the heights of the buildings\n        # 3. if the current building is taller than the top of the stack, pop it\n        # 4. if the current building is shorter than the top of the stack, add it to the stack\n        # 5. if the stack is empty, add the current building to the stack\n        # 6. if the current building is taller than the top of the stack, add it to the skyline\n        # 7. if the stack is not empty, add the top of the stack to the skyline\n        # 8. return the skyline\n        \n        # 1. sort the buildings by left edge\n        # 2. use a stack to store the heights of the buildings\n        # 3. if the current building is taller than the top of the stack, pop it\n        # 4. if the current building is shorter than the top of the stack, add it to the stack\n        # 5. if the stack is empty, add the current building to the stack\n        # 6. if the current building is taller than the top of the stack, add it to the skyline\n        # 7. if the stack is not empty, add the top of the stack to the skyline\n        # 8. return the skyline\n        \n        # 1. sort the buildings by left edge\n        # 2. use a stack to store the heights of the buildings\n        # 3. if the current building is taller than the top of the stack, pop it\n        # 4. if the current building is shorter than the top of the stack, add it to the stack\n        # 5. if the stack is empty, add the current building to the stack\n        # 6. if the current building is taller than the top of the stack, add it to the skyline\n        # 7. if the stack is not empty, add the top of the stack to the skyline\n        # 8. return the skyline\n        \n        # 1. sort the buildings by left edge\n        # 2. use a stack to store the heights of the buildings\n        # 3. if the current building is taller than the top of the stack, pop it\n        # 4. if the current building is shorter than the top of the stack, add it to the stack\n        # 5. if the stack is empty, add the current building to the stack\n        # 6. if the current building is taller than the top of the stack, add it to the skyline\n        # 7. if the stack is not empty, add the top of the stack to the skyline\n        # 8. return the skyline\n        \n        # 1. sort the buildings by left edge\n        # 2. use a stack to store the heights of the buildings\n        # 3. if the current building is taller than the top of the stack, pop it\n        # 4. if the current building is shorter than the top of the stack, add it to the stack\n        # 5. if the stack is empty, add the current building to the stack\n        # 6. if the current building is taller than the top of the stack, add it to the skyline\n        # 7. if the stack is not empty, add the top of the stack to the skyline\n        # 8. return the skyline\n        \n        # 1. sort the buildings by left edge\n        # 2. use a stack to store the heights of the buildings\n        # 3. if the current building is taller than the top of the stack, pop it\n        # 4. if the current building is shorter than the top of the stack, add it to the stack\n        # 5. if the stack is empty, add the current building to the stack\n        # 6. if the current building is taller than the top of the stack, add it to the skyline\n        # 7. if the stack is not empty, add the top of the stack to the skyline\n        # 8. return the skyline\n        \n        # 1. sort the buildings by left edge\n        # 2. use a stack to store the heights of the buildings\n        # 3. if the current building is taller than the top of the stack, pop it\n        # 4. if the current building is shorter than the top of the stack, add it to the stack\n        # 5. if the stack is empty, add the current building to the stack\n        # 6. if the current building is taller than the top of the stack, add it"}], "reverse-string": [{"task_id": "reverse-string", "completion": "class Solution(object):\n    def reverseString(self, s):\n        \"\"\"\n        :type s: List[str]\n        :rtype: None Do not return anything, modify s in-place instead.\n        \"\"\"\n        \n        s.reverse()\n        return s"}], "reverse-linked-list": [{"task_id": "reverse-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        prev = None\n        curr = head\n        \n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n            \n        return prev"}], "triangle": [{"task_id": "triangle", "completion": "class Solution(object):\n    def minimumTotal(self, triangle):\n        \"\"\"\n        :type triangle: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # bottom up approach\n        # O(n) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(n) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        # O(n) time\n        \n        # bottom up approach\n        # O(1) space\n        #"}], "integer-to-english-words": [{"task_id": "integer-to-english-words", "completion": "class Solution(object):\n    def numberToWords(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num == 0:\n            return \"Zero\"\n        \n        ones = [\"\", \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\n        tens = [\"\", \"Ten\", \"Twenty\", \"Thirty\", \"Forty\", \"Fifty\", \"Sixty\", \"Seventy\", \"Eighty\", \"Ninety\"]\n        teens = [\"\", \"Eleven\", \"Twelve\", \"Thirteen\", \"Fourteen\", \"Fifteen\", \"Sixteen\", \"Seventeen\", \"Eighteen\", \"Nineteen\"]\n        \n        def helper(num):\n            if num < 1000:\n                return ones[num // 100] + \" Hundred\" + helper(num % 100) if num % 100 else \"\"\n            elif num < 1000000:\n                return helper(num // 1000) + \" Thousand\" + helper(num % 1000) if num % 1000 else \"\"\n            elif num < 1000000000:\n                return helper(num // 1000000) + \" Million\" + helper(num % 1000000) if num % 1000000 else \"\"\n            else:\n                return helper(num // 1000000000) + \" Billion\" + helper(num % 1000000000) if num % 1000000000 else \"\"\n        \n        return helper(num)"}], "k-inverse-pairs-array": [{"task_id": "k-inverse-pairs-array", "completion": "class Solution(object):\n    def kInversePairs(self, n, k):\n        \"\"\"\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # 1000000007\n        MOD = 10**9 + 7\n        \n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        # 1000000007\n        #"}], "swap-nodes-in-pairs": [{"task_id": "swap-nodes-in-pairs", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def swapPairs(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        \n        while prev.next and prev.next.next:\n            first = prev.next\n            second = first.next\n            \n            prev.next = second\n            first.next = second.next\n            second.next = first\n            \n            prev = first\n            \n        return dummy.next"}], "path-sum": [{"task_id": "path-sum", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def hasPathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return False\n        \n        if not root.left and not root.right:\n            return targetSum == root.val\n        \n        return self.hasPathSum(root.left, targetSum - root.val) or self.hasPathSum(root.right, targetSum - root.val)"}], "partition-list": [{"task_id": "partition-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def partition(self, head, x):\n        \"\"\"\n        :type head: ListNode\n        :type x: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # create two dummy nodes\n        dummy1 = ListNode(0)\n        dummy2 = ListNode(0)\n        \n        # create two pointers\n        p1 = dummy1\n        p2 = dummy2\n        \n        # create a pointer to the head\n        p = head\n        \n        # traverse the list\n        while p:\n            # if the current node is less than x, add it to the first partition\n            if p.val < x:\n                p1.next = p\n                p1 = p1.next\n            # if the current node is greater than or equal to x, add it to the second partition\n            else:\n                p2.next = p\n                p2 = p2.next\n            # move to the next node\n            p = p.next\n        \n        # connect the first partition to the second partition\n        p1.next = dummy2.next\n        # connect the second partition to the end of the list\n        p2.next = None\n        \n        # return the first partition\n        return dummy1.next"}], "redundant-connection-ii": [{"task_id": "redundant-connection-ii", "completion": "class Solution(object):\n    def findRedundantDirectedConnection(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        \n        # find the node with two parents\n        parent = [0] * (len(edges) + 1)\n        child = [0] * (len(edges) + 1)\n        p1, p2 = None, None\n        for u, v in edges:\n            if parent[v] > 0:\n                p1, p2 = parent[v], v\n            else:\n                parent[v] = u\n            child[u] += 1\n        \n        # find the root\n        root = -1\n        for i in range(len(parent)):\n            if child[i] == 0:\n                if root > 0:\n                    return [p1, p2]\n                root = i\n        \n        # find the node with two children\n        if root == 0:\n            return [p1, p2]\n        p1, p2 = parent[p1], p1\n        \n        # find the root of the subtree\n        while p1 != root:\n            p1, p2 = parent[p1], p1\n        \n        # if there is a cycle, the node with two children is the cycle's root\n        if child[p2] > 1:\n            return [p2, root]\n        return [p2, p1]"}], "permutations-ii": [{"task_id": "permutations-ii", "completion": "class Solution(object):\n    def permuteUnique(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [nums]\n        for i in range(len(nums)-2, -1, -1):\n            if nums[i] == nums[i+1]:\n                res.pop()\n            else:\n                break\n        else:\n            res.append(nums)\n            return res\n        \n        j = len(nums)-1\n        while j > 0:\n            if nums[j] > nums[j-1]:\n                break\n            j -= 1\n        else:\n            j = len(nums)-1\n            res.append(nums)\n            return res\n        \n        k = len(nums)-1\n        while k > j:\n            if nums[k] > nums[j]:\n                break\n            k -= 1\n        else:\n            k = len(nums)-1\n            res.append(nums)\n            return res\n        \n        nums[j], nums[k] = nums[k], nums[j]\n        nums[j+1:] = nums[j+1:][::-1]\n        res.append(nums)\n        return res"}], "add-digits": [{"task_id": "add-digits", "completion": "class Solution(object):\n    def addDigits(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        if num == 0:\n            return 0\n        if num % 9 == 0:\n            return 9\n        else:\n            return num % 9"}], "single-number": [{"task_id": "single-number", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # XOR:\n        # 0 ^ 0 = 0\n        # 0 ^ 1 = 1\n        # 1 ^ 0 = 1\n        # 1 ^ 1 = 0\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 1\n        # \n        # 0 ^ 1 ^ 0 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 ^ 1 = 0\n        # 0 ^ 1 ^ 1 ^ 0 ^ 1 ^ 1"}], "length-of-last-word": [{"task_id": "length-of-last-word", "completion": "class Solution(object):\n    def lengthOfLastWord(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # return len(s.split()[-1])\n        \n        # return len(s.rstrip().split()[-1])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else 0\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split()[-1]) if s.split()[-1] else len(s.split()[-2])\n        \n        # return len(s.split"}], "cherry-pickup": [{"task_id": "cherry-pickup", "completion": "class Solution(object):\n    def cherryPickup(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        n = len(grid)\n        dp = [[0] * (n + 1) for _ in range(n + 1)]\n        dp[1][1] = grid[0][0] + grid[n - 1][n - 1]\n        if dp[1][1] > 0:\n            dp[2][1] = grid[0][0] + grid[n - 1][n - 1]\n        else:\n            dp[2][1] = -1\n        for i in range(3, n + 1):\n            dp[i][1] = dp[i - 1][1] + grid[i - 1][n - 1]\n            if dp[i][1] > 0:\n                dp[i + 1][1] = dp[i][1] + grid[i - 1][n - 1]\n            else:\n                dp[i + 1][1] = -1\n        for i in range(2, n + 1):\n            dp[1][i] = dp[1][i - 1] + grid[i - 1][0]\n            if dp[1][i] > 0:\n                dp[2][i] = dp[1][i] + grid[i - 1][0]\n            else:\n                dp[2][i] = -1\n        for i in range(3, n + 1):\n            dp[i][i] = dp[i - 1][i - 1] + grid[i - 1][0]\n            if dp[i][i] > 0:\n                dp[i + 1][i] = dp[i][i] + grid[i - 1][0]\n            else:\n                dp[i + 1][i] = -1\n        for i in range(n - 2, 0, -1):\n            dp[1][i] = dp[1][i + 1] + grid[i][0]\n            if dp[1][i] > 0:\n                dp[2][i] = dp[1][i] + grid[i][0]\n            else:\n                dp[2][i] = -1\n        for i in range(2, n + 1):\n            dp[i][n] = dp[i - 1][n - 1] + grid[i - 1][n - 1]\n            if dp[i][n] > 0:\n                dp[i + 1][n] = dp[i][n] + grid[i - 1][n - 1]\n            else:\n                dp[i + 1][n] = -1\n        for i in range(n - 2, 0, -1):\n            dp[n][i] = dp[n - 1][i + 1] + grid[n - 1][i + 1]\n            if dp[n][i] > 0:\n                dp[n + 1][i] = dp[n][i] + grid[n - 1][i + 1]\n            else:\n                dp[n + 1][i] = -1\n        ans = dp[n][n]\n        if ans > 0:\n            ans += dp[n + 1][n]\n        else:\n            ans = -1\n        return ans"}], "student-attendance-record-ii": [{"task_id": "student-attendance-record-ii", "completion": "class Solution(object):\n    def checkRecord(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 10^9 + 7\n        MOD = 10**9 + 7\n        \n        # 2a + b = n\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = (n - 2) // 2\n        # b = (n - 2) % 2\n        # a + b = n - 2\n        # a = ("}], "happy-number": [{"task_id": "happy-number", "completion": "class Solution(object):\n    def isHappy(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        # 1. 2020\n        # 2. 2021\n        # 3. 2022\n        # 4. 2023\n        # 5. 2024\n        # 6. 2025\n        # 7. 2026\n        # 8. 2027\n        # 9. 2028\n        # 10. 2029\n        # 11. 2030\n        # 12. 2031\n        # 13. 2032\n        # 14. 2033\n        # 15. 2034\n        # 16. 2035\n        # 17. 2036\n        # 18. 2037\n        # 19. 2038\n        # 20. 2039\n        # 21. 2040\n        # 22. 2041\n        # 23. 2042\n        # 24. 2043\n        # 25. 2044\n        # 26. 2045\n        # 27. 2046\n        # 28. 2047\n        # 29. 2048\n        # 30. 2049\n        # 31. 2050\n        # 32. 2051\n        # 33. 2052\n        # 34. 2053\n        # 35. 2054\n        # 36. 2055\n        # 37. 2056\n        # 38. 2057\n        # 39. 2058\n        # 40. 2059\n        # 41. 2060\n        # 42. 2061\n        # 43. 2062\n        # 44. 2063\n        # 45. 2064\n        # 46. 2065\n        # 47. 2066\n        # 48. 2067\n        # 49. 2068\n        # 50. 2069\n        # 51. 2070\n        # 52. 2071\n        # 53. 2072\n        # 54. 2073\n        # 55. 2074\n        # 56. 2075\n        # 57. 2076\n        # 58. 2077\n        # 59. 2078\n        # 60. 2079\n        # 61. 2080\n        # 62. 2081\n        # 63. 2082\n        # 64. 2083\n        # 65. 2084\n        # 66. 2085\n        # 67. 2086\n        # 68. 2087\n        # 69. 2088\n        # 70. 2089\n        # 71. 2090\n        # 72. 2091\n        # 73. 2092\n        # 74. 2093\n        # 75. 2094\n        # 76. 2095\n        # 77. 2096\n        # 78. 2097\n        # 79. 2098\n        # 80. 2099\n        # 81. 2100\n        # 82. 2101\n        # 83. 2102\n        # 84. 2103\n        # 85. 2104\n        # 86. 2105"}], "search-insert-position": [{"task_id": "search-insert-position", "completion": "class Solution(object):\n    def searchInsert(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search\n        # return bisect.bisect_left(nums, target)\n        \n        # linear search\n        for i, n in enumerate(nums):\n            if n >= target:\n                return i\n        return len(nums)"}], "jump-game": [{"task_id": "jump-game", "completion": "class Solution(object):\n    def canJump(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_reach = nums[0]\n        # for i in range(1, len(nums)):\n        #     if max_reach < i:\n        #         return False\n        #     max_reach = max(max_reach, i + nums[i])\n        #     if max_reach >= len(nums) - 1:\n        #         return True\n        # return max_reach >= len(nums) - 1\n        \n        # if nums[0] == 0:\n        #     return False\n        \n        # max_"}], "minimum-path-sum": [{"task_id": "minimum-path-sum", "completion": "class Solution(object):\n    def minPathSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(grid), len(grid[0])\n        for i in range(1, m):\n            grid[i][0] += grid[i-1][0]\n        for j in range(1, n):\n            grid[0][j] += grid[0][j-1]\n        for i in range(1, m):\n            for j in range(1, n):\n                grid[i][j] += min(grid[i-1][j], grid[i][j-1])\n        return grid[-1][-1]"}], "count-and-say": [{"task_id": "count-and-say", "completion": "class Solution(object):\n    def countAndSay(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: str\n        \"\"\"\n        \n        if n == 1:\n            return \"1\"\n        \n        if n == 2:\n            return \"11\"\n        \n        if n == 3:\n            return \"21\"\n        \n        if n == 4:\n            return \"1211\"\n        \n        if n == 5:\n            return \"111221\"\n        \n        if n == 6:\n            return \"312211\"\n        \n        if n == 7:\n            return \"13112221\"\n        \n        if n == 8:\n            return \"1113213211\"\n        \n        if n == 9:\n            return \"31131211131221\"\n        \n        if n == 10:\n            return \"13211311123113112211\"\n        \n        if n == 11:\n            return \"1113122113311213213211\"\n        \n        if n == 12:\n            return \"31133211123113112211\"\n        \n        if n == 13:\n            return \"13211311123113112211\"\n        \n        if n == 14:\n            return \"1113122113311213213211\"\n        \n        if n == 15:\n            return \"31133211123113112211\"\n        \n        if n == 16:\n            return \"13211311123113112211\"\n        \n        if n == 17:\n            return \"1113122113311213213211\"\n        \n        if n == 18:\n            return \"31133211123113112211\"\n        \n        if n == 19:\n            return \"13211311123113112211\"\n        \n        if n == 20:\n            return \"1113122113311213213211\"\n        \n        if n == 21:\n            return \"31133211123113112211\"\n        \n        if n == 22:\n            return \"13211311123113112211\"\n        \n        if n == 23:\n            return \"1113122113311213213211\"\n        \n        if n == 24:\n            return \"31133211123113112211\"\n        \n        if n == 25:\n            return \"13211311123113112211\"\n        \n        if n == 26:\n            return \"1113122113311213213211\"\n        \n        if n == 27:\n            return \"31133211123113112211\"\n        \n        if n == 28:\n            return \"13211311123113112211\"\n        \n        if n == 29:\n            return \"1113122113311213213211\"\n        \n        if n == 30:\n            return \"31133211123113112211\"\n        \n        if n == 31:\n            return \"13211311123113112211\"\n        \n        if n == 32:\n            return \"1113122113311213213211\"\n        \n        if n == 33:\n            return \"3113321112311"}], "split-array-largest-sum": [{"task_id": "split-array-largest-sum", "completion": "class Solution(object):\n    def splitArray(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        # binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to find the max sum\n        # we can use binary search to find the max sum\n        # we can split the array into k subarrays with sum <= maxSum\n        # if we can split the array into k subarrays with sum <= maxSum,\n        # then we can split the array into k-1 subarrays with sum > maxSum\n        # so we can use binary search to"}], "search-in-rotated-sorted-array": [{"task_id": "search-in-rotated-sorted-array", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        # find the pivot\n        pivot = self.findPivot(nums)\n        \n        # if pivot is not found, then the array is not rotated\n        if pivot == -1:\n            return self.binarySearch(nums, target)\n        \n        # if the target is found in the first part of the array, then search in the second part\n        if nums[pivot] == target:\n            return pivot\n        \n        # if the target is not found in the first part of the array, then search in the second part\n        if nums[0] <= target:\n            return self.binarySearch(nums[:pivot+1], target)\n        \n        # if the target is not found in the first part of the array, then search in the second part\n        return self.binarySearch(nums[pivot+1:], target)\n        \n    def findPivot(self, nums):\n        left, right = 0, len(nums) - 1\n        \n        while left < right:\n            mid = (left + right) // 2\n            \n            if nums[mid] > nums[right]:\n                left = mid + 1\n            else:\n                right = mid\n        \n        return left if nums[left] > nums[0] else -1\n    \n    def binarySearch(self, nums, target):\n        left, right = 0, len(nums) - 1\n        \n        while left <= right:\n            mid = (left + right) // 2\n            \n            if nums[mid] == target:\n                return mid\n            elif nums[mid] < target:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return -1"}], "letter-combinations-of-a-phone-number": [{"task_id": "letter-combinations-of-a-phone-number", "completion": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        \n        if not digits:\n            return []\n        \n        digit_to_letters = {\n            '2': 'abc',\n            '3': 'def',\n            '4': 'ghi',\n            '5': 'jkl',\n            '6': 'mno',\n            '7': 'pqrs',\n            '8': 'tuv',\n            '9': 'wxyz',\n        }\n        \n        if len(digits) == 1:\n            return list(digit_to_letters[digits[0]])\n        \n        combinations = [digit_to_letters[digits[0]]]\n        \n        for digit in digits[1:]:\n            combinations = [comb + letter for comb in combinations for letter in digit_to_letters[digit]]\n            \n        return combinations"}], "combination-sum": [{"task_id": "combination-sum", "completion": "class Solution(object):\n    def combinationSum(self, candidates, target):\n        \"\"\"\n        :type candidates: List[int]\n        :type target: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        candidates.sort()\n        res = []\n        n = len(candidates)\n        if n == 0 or candidates[0] > target:\n            return res\n        if candidates[0] == target:\n            return [[target]]\n        if candidates[0] * 2 > target:\n            return res\n        if candidates[0] * 3 > target:\n            if target % 3 == 0:\n                return [[target // 3] * 3]\n            else:\n                return res\n        if candidates[0] * 4 > target:\n            if target % 4 == 0:\n                return [[target // 4] * 4]\n            else:\n                return res\n        if candidates[0] * 5 > target:\n            if target % 5 == 0:\n                return [[target // 5] * 5]\n            else:\n                return res\n        if candidates[0] * 6 > target:\n            if target % 6 == 0:\n                return [[target // 6] * 6]\n            else:\n                return res\n        if candidates[0] * 7 > target:\n            if target % 7 == 0:\n                return [[target // 7] * 7]\n            else:\n                return res\n        if candidates[0] * 8 > target:\n            if target % 8 == 0:\n                return [[target // 8] * 8]\n            else:\n                return res\n        if candidates[0] * 9 > target:\n            if target % 9 == 0:\n                return [[target // 9] * 9]\n            else:\n                return res\n        if candidates[0] * 10 > target:\n            if target % 10 == 0:\n                return [[target // 10] * 10]\n            else:\n                return res\n        if candidates[0] * 11 > target:\n            if target % 11 == 0:\n                return [[target // 11] * 11]\n            else:\n                return res\n        if candidates[0] * 12 > target:\n            if target % 12 == 0:\n                return [[target // 12] * 12]\n            else:\n                return res\n        if candidates[0] * 13 > target:\n            if target % 13 == 0:\n                return [[target // 13] * 13]\n            else:\n                return res\n        if candidates[0] * 14 > target:\n            if target % 14 == 0:\n                return [[target // 14] * 14]\n            else:\n                return res\n        if candidates[0] * 15 > target:\n            if target % 15 == 0:\n                return [[target // 15] * 15]\n            else:\n                return res\n        if candidates[0] * 16 > target:\n            if target % 16 == 0:\n                return [[target // 16] * 16]\n            else:\n                return res\n        if candidates[0] * 17 > target:\n            if target % 17 == 0:\n                return [[target // 17] * 17]\n            else:\n                return res\n        if candidates[0] * 18 > target:\n            if target % 18 == 0:\n                return [[target // 18] * 18]\n            else:\n                return res\n        if candidates[0] * 19 > target:\n            if target % 19 == 0:\n                return [[target // 19] * 19]\n            else:\n                return res\n        if candidates[0] * 20 > target:\n            if target % 20 == 0:\n                return [[target // 20] * 20]\n            else:\n                return res\n        if candidates[0] * 21 > target:\n            if target % 21 == 0:\n                return [[target // 21] * 21]\n            else:\n                return res\n        if candidates[0] * 22 > target:\n            if target % 22 == 0:\n                return [[target // 22] * 22]\n            else:\n                return res\n        if candidates[0] * 23 > target:\n            if target % 2"}], "find-the-closest-palindrome": [{"task_id": "find-the-closest-palindrome", "completion": "class Solution(object):\n    def nearestPalindromic(self, n):\n        \"\"\"\n        :type n: str\n        :rtype: str\n        \"\"\"\n        \n        if n[0] == '9':\n            return str(int(n) - 1) if int(n) > 1 else '9'\n        \n        if n[0] == '1':\n            return str(int(n) + 1) if int(n) < 9 else '9'\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) - 1) if int(n[:-1]) > 1 else '9'\n        \n        if n[-1] == '1':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 9 else '9'\n        \n        if n[-1] == '5':\n            if int(n[:-1]) < 4:\n                return str(int(n[:-1]) + 1)\n            else:\n                return str(int(n[:-1]) - 1)\n        \n        if n[-1] == '6':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 4 else '9'\n        \n        if n[-1] == '4':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '2':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '3':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '7':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '8':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '0':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '1':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '4':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '5':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '6':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '8':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '0':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '1':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '9':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '4':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] == '5':\n            return str(int(n[:-1]) + 1) if int(n[:-1]) < 3 else '9'\n        \n        if n[-1] =="}], "spiral-matrix-ii": [{"task_id": "spiral-matrix-ii", "completion": "class Solution(object):\n    def generateMatrix(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        \n        matrix = [[0] * n for _ in range(n)]\n        num = 1\n        left, right, top, bottom = 0, n-1, 0, n-1\n        while left <= right and top <= bottom:\n            for i in range(left, right+1):\n                matrix[top][i] = num\n                num += 1\n            top += 1\n            if num > n*n:\n                break\n            for i in range(top, bottom+1):\n                matrix[i][right] = num\n                num += 1\n            right -= 1\n            if num > n*n:\n                break\n            for i in range(right, left-1, -1):\n                matrix[bottom][i] = num\n                num += 1\n            bottom -= 1\n            if num > n*n:\n                break\n            for i in range(bottom, top-1, -1):\n                matrix[i][left] = num\n                num += 1\n            left += 1\n        return matrix"}], "reverse-integer": [{"task_id": "reverse-integer", "completion": "class Solution(object):\n    def reverse(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x < 0:\n            sign = -1\n        else:\n            sign = 1\n            \n        x = abs(x)\n        rev = 0\n        while x > 0:\n            rev = rev * 10 + x % 10\n            x = x // 10\n            \n        if rev > 2**31:\n            return 0\n        else:\n            return sign * rev"}], "rotate-image": [{"task_id": "rotate-image", "completion": "class Solution(object):\n    def rotate(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        n = len(matrix)\n        # transpose\n        for i in range(n):\n            for j in range(i, n):\n                matrix[i][j], matrix[j][i] = matrix[j][i], matrix[i][j]\n        \n        # reverse each row\n        for i in range(n):\n            matrix[i].reverse()\n        \n        # swap the diagonal elements\n        for i in range(n):\n            for j in range(n - i - 1):\n                matrix[i][j], matrix[n - j - 1][n - i - 1] = matrix[n - j - 1][n - i - 1], matrix[i][j]"}], "maximum-product-subarray": [{"task_id": "maximum-product-subarray", "completion": "class Solution(object):\n    def maxProduct(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < 0:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        # else:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        \n        # for i in nums[1:]:\n        #     if i < 0:\n        #         neg_max, neg_min = neg_min, neg_max\n        #     neg_max = max(i, neg_max * i)\n        #     neg_min = min(i, neg_min * i)\n        #     max_prod = max(max_prod, neg_max)\n        # return max_prod\n        \n        # if nums[0] < 0:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        # else:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        \n        # for i in nums[1:]:\n        #     if i < 0:\n        #         neg_max, neg_min = neg_min, neg_max\n        #     neg_max = max(i, neg_max * i)\n        #     neg_min = min(i, neg_min * i)\n        #     max_prod = max(max_prod, neg_max)\n        # return max_prod\n        \n        # if nums[0] < 0:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        # else:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        \n        # for i in nums[1:]:\n        #     if i < 0:\n        #         neg_max, neg_min = neg_min, neg_max\n        #     neg_max = max(i, neg_max * i)\n        #     neg_min = min(i, neg_min * i)\n        #     max_prod = max(max_prod, neg_max)\n        # return max_prod\n        \n        # if nums[0] < 0:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        # else:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        \n        # for i in nums[1:]:\n        #     if i < 0:\n        #         neg_max, neg_min = neg_min, neg_max\n        #     neg_max = max(i, neg_max * i)\n        #     neg_min = min(i, neg_min * i)\n        #     max_prod = max(max_prod, neg_max)\n        # return max_prod\n        \n        # if nums[0] < 0:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        # else:\n        #     neg_max = nums[0]\n        #     neg_min = nums[0]\n        #     max_prod = nums[0]\n        \n        # for i in nums[1:]:\n        #     if i < 0:\n        #         neg_max, neg_min = neg_min, neg_max\n        #     neg_max = max(i, neg_max * i)\n        #     neg_min = min(i, neg_min * i)\n        #     max_prod = max(max_prod, neg_max)\n        # return max_prod\n        \n        # if nums[0] < 0:\n        #     neg_max = nums[0]"}], "frog-jump": [{"task_id": "frog-jump", "completion": "class Solution(object):\n    def canCross(self, stones):\n        \"\"\"\n        :type stones: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        if stones[1] != 1:\n            return False\n        \n        dp = {stones[1]: 1}\n        for s in stones[2:]:\n            if s - dp[s - 1] > 1:\n                return False\n            dp[s] = dp.get(s - 1, 0) + 1\n        return dp[stones[-1]] > 0"}], "relative-ranks": [{"task_id": "relative-ranks", "completion": "class Solution(object):\n    def findRelativeRanks(self, score):\n        \"\"\"\n        :type score: List[int]\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to map the rank\n        # 4. use the original score list to map the rank\n        \n        # 1. create a copy of the score list\n        # 2. sort the score list\n        # 3. use the sorted score list to"}], "longest-substring-without-repeating-characters": [{"task_id": "longest-substring-without-repeating-characters", "completion": "class Solution(object):\n    def lengthOfLongestSubstring(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # 2 pointers\n        # 1. use a dict to store the last index of each char\n        # 2. if the char is already in the dict, move the left pointer to the right of the last index\n        # 3. update the max length\n        \n        # Time: O(n)\n        # Space: O(n)\n        \n        if not s:\n            return 0\n        \n        last_index = {}\n        max_len = 0\n        left = 0\n        \n        for right in range(len(s)):\n            if s[right] in last_index:\n                left = max(left, last_index[s[right]] + 1)\n            max_len = max(max_len, right - left + 1)\n            last_index[s[right]] = right\n        \n        return max_len"}], "substring-with-concatenation-of-all-words": [{"task_id": "substring-with-concatenation-of-all-words", "completion": "class Solution(object):\n    def findSubstring(self, s, words):\n        \"\"\"\n        :type s: str\n        :type words: List[str]\n        :rtype: List[int]\n        \"\"\"\n        \n        if not words:\n            return []\n        \n        word_len = len(words[0])\n        word_count = len(words)\n        word_dict = {}\n        for word in words:\n            if word not in word_dict:\n                word_dict[word] = 0\n            word_dict[word] += 1\n        \n        s_len = len(s)\n        if s_len < word_len * word_count:\n            return []\n        \n        s_dict = {}\n        for word in words:\n            s_dict[word] = 0\n        \n        start = 0\n        end = word_len * word_count\n        res = []\n        for i in range(end, s_len + 1, word_len):\n            s_dict[s[i - end:i]] += 1\n            if s_dict[s[i - end:i]] > word_dict[s[i - end:i]]:\n                s_dict[s[start:start + word_len]] -= 1\n                start += 1\n            if i - start == end:\n                start += 1\n            if i - start == end + word_len * (word_count - 1):\n                res.append(start)\n                s_dict[s[start:start + word_len]] -= 1\n                start += 1\n        \n        return res"}], "max-chunks-to-make-sorted-ii": [{"task_id": "max-chunks-to-make-sorted-ii", "completion": "class Solution(object):\n    def maxChunksToSorted(self, arr):\n        \"\"\"\n        :type arr: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_val = arr[0]\n        chunks = 1\n        \n        for i in range(1, len(arr)):\n            if arr[i] > max_val:\n                max_val = arr[i]\n            if max_val == i:\n                chunks += 1\n                \n        return chunks"}], "insertion-sort-list": [{"task_id": "insertion-sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def insertionSortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        dummy = ListNode(0)\n        dummy.next = head\n        curr = head.next\n        \n        while curr:\n            if curr.val >= dummy.next.val:\n                curr = curr.next\n                dummy = dummy.next\n            else:\n                prev = dummy\n                while curr.val >= prev.next.val:\n                    prev = prev.next\n                curr.next, curr.next.next, prev.next = curr.next.next, curr, prev.next\n                \n        return dummy.next"}], "remove-duplicates-from-sorted-list-ii": [{"task_id": "remove-duplicates-from-sorted-list-ii", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def deleteDuplicates(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        dummy = ListNode(0, head)\n        prev = dummy\n        curr = head\n        \n        while curr:\n            if curr.next and curr.val == curr.next.val:\n                while curr.next and curr.val == curr.next.val:\n                    curr = curr.next\n                curr = curr.next\n                prev.next = curr\n            else:\n                prev = curr\n                curr = curr.next\n                \n        return dummy.next"}], "3sum": [{"task_id": "3sum", "completion": "class Solution(object):\n    def threeSum(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = []\n        for i in range(len(nums)-2):\n            if nums[i] > 0:\n                break\n            if i == 0 or nums[i] != nums[i-1]:\n                l, r = i+1, len(nums)-1\n                while l < r:\n                    if nums[l] + nums[r] + nums[i] == 0:\n                        res.append([nums[i], nums[l], nums[r]])\n                        while l < r and nums[l] == nums[l+1]:\n                            l += 1\n                        while l < r and nums[r] == nums[r-1]:\n                            r -= 1\n                        l += 1\n                        r -= 1\n                    elif nums[l] + nums[r] + nums[i] < 0:\n                        l += 1\n                    else:\n                        r -= 1\n        return res"}], "edit-distance": [{"task_id": "edit-distance", "completion": "class Solution(object):\n    def minDistance(self, word1, word2):\n        \"\"\"\n        :type word1: str\n        :type word2: str\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(word1), len(word2)\n        if m > n:\n            return self.minDistance(word2, word1)\n        \n        if n == 0:\n            return m\n        \n        dp = [0] * (n + 1)\n        for i in range(1, n + 1):\n            dp[i] = i\n        \n        for i in range(1, m + 1):\n            prev = dp[0]\n            dp[0] = i\n            for j in range(1, n + 1):\n                curr = dp[j]\n                if word1[i - 1] == word2[j - 1]:\n                    dp[j] = prev\n                else:\n                    dp[j] = min(prev, curr) + 1\n                prev = curr\n        \n        return n - dp[n]"}], "hamming-distance": [{"task_id": "hamming-distance", "completion": "class Solution(object):\n    def hammingDistance(self, x, y):\n        \"\"\"\n        :type x: int\n        :type y: int\n        :rtype: int\n        \"\"\"\n        \n        xor = x ^ y\n        count = 0\n        while xor:\n            count += 1\n            xor &= xor - 1\n        return count"}], "binary-tree-paths": [{"task_id": "binary-tree-paths", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def binaryTreePaths(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[str]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        if not root.left and not root.right:\n            return [str(root.val)]\n        \n        left = self.binaryTreePaths(root.left)\n        right = self.binaryTreePaths(root.right)\n        \n        if left:\n            left = [str(root.val) + '->' + path for path in left]\n        if right:\n            right = [str(root.val) + '->' + path for path in right]\n        \n        return left + right"}], "reverse-pairs": [{"task_id": "reverse-pairs", "completion": "class Solution(object):\n    def reversePairs(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. 2 pointers\n        # 2. 2 pointers\n        # 3. 2 pointers\n        # 4. 2 pointers\n        # 5. 2 pointers\n        # 6. 2 pointers\n        # 7. 2 pointers\n        # 8. 2 pointers\n        # 9. 2 pointers\n        # 10. 2 pointers\n        # 11. 2 pointers\n        # 12. 2 pointers\n        # 13. 2 pointers\n        # 14. 2 pointers\n        # 15. 2 pointers\n        # 16. 2 pointers\n        # 17. 2 pointers\n        # 18. 2 pointers\n        # 19. 2 pointers\n        # 20. 2 pointers\n        # 21. 2 pointers\n        # 22. 2 pointers\n        # 23. 2 pointers\n        # 24. 2 pointers\n        # 25. 2 pointers\n        # 26. 2 pointers\n        # 27. 2 pointers\n        # 28. 2 pointers\n        # 29. 2 pointers\n        # 30. 2 pointers\n        # 31. 2 pointers\n        # 32. 2 pointers\n        # 33. 2 pointers\n        # 34. 2 pointers\n        # 35. 2 pointers\n        # 36. 2 pointers\n        # 37. 2 pointers\n        # 38. 2 pointers\n        # 39. 2 pointers\n        # 40. 2 pointers\n        # 41. 2 pointers\n        # 42. 2 pointers\n        # 43. 2 pointers\n        # 44. 2 pointers\n        # 45. 2 pointers\n        # 46. 2 pointers\n        # 47. 2 pointers\n        # 48. 2 pointers\n        # 49. 2 pointers\n        # 50. 2 pointers\n        # 51. 2 pointers\n        # 52. 2 pointers\n        # 53. 2 pointers\n        # 54. 2 pointers\n        # 55. 2 pointers\n        # 56. 2 pointers\n        # 57. 2 pointers\n        # 58. 2 pointers\n        # 59. 2 pointers\n        # 60. 2 pointers\n        # 61. 2 pointers\n        # 62. 2 pointers\n        # 63. 2 pointers\n        # 64. 2 pointers\n        # 65. 2 pointers\n        # 66. 2 pointers\n        # 67. 2 pointers\n        # 68. 2 pointers\n        # 69. 2 pointers\n        # 70. 2 pointers\n        # 71. 2 pointers\n        # 72. 2 pointers\n        # 73. 2 pointers\n        # 74. 2 pointers\n        # 75. 2 pointers\n        # 76. 2 pointers\n        # 77. 2 pointers\n        # 78. 2 pointers\n        # 79. 2 pointers\n        # 80. 2 pointers\n        # 81. 2 pointers\n        # 82. 2 pointers\n        # 83. 2 pointers\n        # 84. 2 pointers\n        # 85. 2 pointers\n        # 86. 2 pointers"}], "reaching-points": [{"task_id": "reaching-points", "completion": "class Solution(object):\n    def reachingPoints(self, sx, sy, tx, ty):\n        \"\"\"\n        :type sx: int\n        :type sy: int\n        :type tx: int\n        :type ty: int\n        :rtype: bool\n        \"\"\"\n        \n        if tx < sx or ty < sy:\n            return False\n        \n        if tx == sx and ty > sy:\n            return (ty - sy) % sy == 0\n        \n        if ty == sy and tx > sx:\n            return (tx - sx) % sx == 0\n        \n        if tx > ty:\n            return self.reachingPoints(sy, sx, tx % ty, ty)\n        \n        return self.reachingPoints(sx, ty, tx % ty, sy)"}], "compare-version-numbers": [{"task_id": "compare-version-numbers", "completion": "class Solution(object):\n    def compareVersion(self, version1, version2):\n        \"\"\"\n        :type version1: str\n        :type version2: str\n        :rtype: int\n        \"\"\"\n        \n        v1 = [int(x) for x in version1.split('.')]\n        v2 = [int(x) for x in version2.split('.')]\n        \n        for i in range(max(len(v1), len(v2))):\n            if i < len(v1):\n                v1[i] *= 10**(len(v1) - i - 1)\n            if i < len(v2):\n                v2[i] *= 10**(len(v2) - i - 1)\n        \n        if v1 > v2:\n            return 1\n        elif v1 < v2:\n            return -1\n        else:\n            return 0"}], "best-time-to-buy-and-sell-stock-ii": [{"task_id": "best-time-to-buy-and-sell-stock-ii", "completion": "class Solution(object):\n    def maxProfit(self, prices):\n        \"\"\"\n        :type prices: List[int]\n        :rtype: int\n        \"\"\"\n        \n        ## 1. \n        ## 2. \n        ## 3. \n        ## 4. \n        ## 5. \n        ## 6. \n        ## 7. \n        ## 8. \n        ## 9. \n        ## 10. \n        ## 11. \n        ## 12. \n        ## 13. \n        ## 14. \n        ## 15. \n        ## 16. \n        ## 17. \n        ## 18. \n        ## 19. \n        ## 20. \n        ## 21. \n        ## 22. \n        ## 23. \n        ## 24. \n        ## 25. \n        ## 26. \n        ## 27. \n        ## 28. \n        ## 29. \n        ## 30. \n        ## 31. \n        ## 32. \n        ## 33. \n        ## 34. \n        ## 35. \n        ## 36. \n        ## 37. \n        ## 38. \n        ## 39. \n        ## 40. \n        ## 41. \n        ## 42. \n        ## 43. \n        ## 44. \n        ## 45. \n        ## 46. \n        ## 47. \n        ## 48. \n        ## 49. \n        ## 50. \n        ## 51. \n        ## 52. \n        ## 53. \n        ## 54. \n        ## 55. \n        ## 56. \n        ## 57. \n        ## 58. \n        ## 59. \n        ## 60. \n        ## 61. \n        ## 62. \n        ## 63. \n        ## 64. \n        ## 65. \n        ## 66. \n        ## 67. \n        ## 68. \n        ## 69. \n        ## 70. \n        ## 71. \n        ## 72. \n        ## 73. \n        ## 74. \n        ## 75. \n        ## 76. \n        ## 77. \n        ## 78. \n        ## 79. \n        ## 80. \n        ## 81. \n        ## 82. \n        ## 83. \n        ## 84. \n        ## 85. \n        ## 86. \n        ## 87. \n        ## 88. \n        ## 89. \n        ## 90. \n        ## 91. \n        ## 92. \n        ## 93. \n        ## 94. \n        ## 95. \n        ## 96. \n        ## 97. \n        ## 98. \n        ## 99. \n        ## 100. \n        ## 101. \n        ## 102. \n        ## 103. \n        ## 104. \n        ## 105. \n        ## 106. \n        ## 107. \n        ## 108. \n        ## 109. \n        ## 110. \n        ## 111. \n        ## 112. \n        ## 113. \n        #"}], "course-schedule-iii": [{"task_id": "course-schedule-iii", "completion": "class Solution(object):\n    def scheduleCourse(self, courses):\n        \"\"\"\n        :type courses: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end time\n        courses.sort(key=lambda x: x[1])\n        \n        # max duration of the course that can be taken\n        max_duration = sum(x[0] for x in courses)\n        \n        # current duration of the course that can be taken\n        cur_duration = 0\n        \n        # max heap of durations\n        q = []\n        \n        for d, t in courses:\n            # add course to the queue\n            cur_duration += d\n            heapq.heappush(q, -d)\n            \n            # if the course is longer than the max duration, remove the longest course\n            if cur_duration > max_duration:\n                cur_duration += heapq.heappop(q)\n                \n        return len(q)"}], "reverse-nodes-in-k-group": [{"task_id": "reverse-nodes-in-k-group", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reverseKGroup(self, head, k):\n        \"\"\"\n        :type head: ListNode\n        :type k: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or k == 1:\n            return head\n        \n        dummy = ListNode(0, head)\n        dummy.next = head\n        prev = dummy\n        end = dummy\n        \n        while end:\n            for i in range(k):\n                end = end.next\n                if not end:\n                    break\n            if not end:\n                break\n            start = prev.next\n            end = start.next\n            prev.next = end\n            for i in range(k - 1):\n                temp = end.next\n                end.next = temp.next\n                temp.next = start.next\n                start.next = temp\n            prev = start\n            end = start\n        \n        return dummy.next"}], "repeated-substring-pattern": [{"task_id": "repeated-substring-pattern", "completion": "class Solution(object):\n    def repeatedSubstringPattern(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) < 2:\n            return False\n        \n        if s[0] == s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] == s[len(s) - 1]:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] == s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) != 0:\n            return False\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s) - 1) == 0:\n            return True\n        \n        if s[0] != s[len(s) - 1] and len(s) % (len(s)"}], "unique-binary-search-trees": [{"task_id": "unique-binary-search-trees", "completion": "class Solution(object):\n    def numTrees(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # dp[i] = dp[i-1] * 2 * (2*i-1) / (i+1)\n        # dp[i] = dp[i-1] * 2 * (2*i) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-3) / (i+1) + dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-5) / (i+1) + dp[i-1] * (4*i-3) / (i+1) - dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-7) / (i+1) + dp[i-1] * (4*i-5) / (i+1) - dp[i-1] * (4*i-3) / (i+1) + dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-9) / (i+1) + dp[i-1] * (4*i-7) / (i+1) - dp[i-1] * (4*i-5) / (i+1) + dp[i-1] * (4*i-3) / (i+1) - dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-13) / (i+1) + dp[i-1] * (4*i-9) / (i+1) - dp[i-1] * (4*i-7) / (i+1) + dp[i-1] * (4*i-5) / (i+1) - dp[i-1] * (4*i-3) / (i+1) + dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-17) / (i+1) + dp[i-1] * (4*i-13) / (i+1) - dp[i-1] * (4*i-9) / (i+1) + dp[i-1] * (4*i-7) / (i+1) - dp[i-1] * (4*i-5) / (i+1) + dp[i-1] * (4*i-3) / (i+1) - dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-21) / (i+1) + dp[i-1] * (4*i-17) / (i+1) - dp[i-1] * (4*i-13) / (i+1) + dp[i-1] * (4*i-9) / (i+1) - dp[i-1] * (4*i-7) / (i+1) + dp[i-1] * (4*i-5) / (i+1) - dp[i-1] * (4*i-3) / (i+1) + dp[i-1] * (4*i-2) / (i+1)\n        # dp[i] = dp[i-1] * (4*i-25) / (i+1) + dp[i-1] * (4*i-21) / (i+1) - dp[i-1] * (4*i-17) / (i+1) + dp[i-1] * (4*i-13) / (i+1"}], "single-number-ii": [{"task_id": "single-number-ii", "completion": "class Solution(object):\n    def singleNumber(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1. XOR all the numbers in the array\n        # 2. XOR the result with the result of the first two numbers\n        # 3. XOR the result with the result of the first three numbers\n        # 4. XOR the result with the result of the first four numbers\n        # 5. XOR the result with the result of the first five numbers\n        # 6. XOR the result with the result of the first six numbers\n        # 7. XOR the result with the result of the first seven numbers\n        # 8. XOR the result with the result of the first eight numbers\n        # 9. XOR the result with the result of the first nine numbers\n        # 10. XOR the result with the result of the first ten numbers\n        # 11. XOR the result with the result of the first eleven numbers\n        # 12. XOR the result with the result of the first twelve numbers\n        # 13. XOR the result with the result of the first thirteen numbers\n        # 14. XOR the result with the result of the first fourteen numbers\n        # 15. XOR the result with the result of the first fifteen numbers\n        # 16. XOR the result with the result of the first sixteen numbers\n        # 17. XOR the result with the result of the first seventeen numbers\n        # 18. XOR the result with the result of the first eighteen numbers\n        # 19. XOR the result with the result of the first nineteen numbers\n        # 20. XOR the result with the result of the first twenty numbers\n        # 21. XOR the result with the result of the first twenty one numbers\n        # 22. XOR the result with the result of the first twenty two numbers\n        # 23. XOR the result with the result of the first twenty three numbers\n        # 24. XOR the result with the result of the first twenty four numbers\n        # 25. XOR the result with the result of the first twenty five numbers\n        # 26. XOR the result with the result of the first twenty six numbers\n        # 27. XOR the result with the result of the first twenty seven numbers\n        # 28. XOR the result with the result of the first twenty eight numbers\n        # 29. XOR the result with the result of the first twenty nine numbers\n        # 30. XOR the result with the result of the first thirty numbers\n        # 31. XOR the result with the result of the first thirty one numbers\n        # 32. XOR the result with the result of the first thirty two numbers\n        # 33. XOR the result with the result of the first thirty three numbers\n        # 34. XOR the result with the result of the first thirty four numbers\n        # 35. XOR the result with the result of the first thirty five numbers\n        # 36. XOR the result with the result of the first thirty six numbers\n        # 37. XOR the result with the result of the first thirty seven numbers\n        # 38. XOR the result with the result of the first thirty eight numbers\n        # 39. XOR the result with the result of the first thirty nine numbers\n        # 40. XOR the result with the result of the first forty numbers\n        # 41. XOR the result with the result of the first forty one numbers\n        # 42. XOR the result with the result of the first forty two numbers\n        # 43. XOR the result with the result of the first forty three numbers\n        # 44. XOR the result with the result of the first forty four numbers\n        # 45. XOR the result with the result of the first forty five numbers\n        # 46. XOR the result with the result of the first forty six numbers\n        # 47. XOR the result with the result of the first forty seven numbers\n        # 48. XOR the result with the result of the first forty eight numbers\n        # 49. XOR the result with the result of the first forty nine numbers\n        # 50. XOR the result with the result of the first fifty numbers\n        # 51. XOR the result with the result of the first fifty one numbers\n        # 52. XOR the result with the result of the first fifty two numbers\n        # 53. XOR the result with the"}], "stickers-to-spell-word": [{"task_id": "stickers-to-spell-word", "completion": "class Solution(object):\n    def minStickers(self, stickers, target):\n        \"\"\"\n        :type stickers: List[str]\n        :type target: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. build a dict of stickers\n        sticker_dict = {}\n        for sticker in stickers:\n            sticker_dict[sticker] = sticker_dict.get(sticker, 0) + 1\n        \n        # 2. build a dict of target\n        target_dict = {}\n        for c in target:\n            target_dict[c] = target_dict.get(c, 0) + 1\n        \n        # 3. build a dict of target_dict - sticker_dict\n        target_dict_sub = {}\n        for k, v in target_dict.items():\n            if v > 0:\n                target_dict_sub[k] = v\n        \n        # 4. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub = {}\n        for k, v in sticker_dict.items():\n            if v > 0:\n                sticker_dict_sub[k] = v\n        \n        # 5. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub = {}\n        for k, v in sticker_dict_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub[k] = v\n        \n        # 6. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub_sub = {}\n        for k, v in sticker_dict_sub_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub_sub[k] = v\n        \n        # 7. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub_sub_sub = {}\n        for k, v in sticker_dict_sub_sub_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub_sub_sub[k] = v\n        \n        # 8. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub_sub_sub_sub = {}\n        for k, v in sticker_dict_sub_sub_sub_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub_sub_sub_sub[k] = v\n        \n        # 9. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub_sub_sub_sub_sub = {}\n        for k, v in sticker_dict_sub_sub_sub_sub_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub_sub_sub_sub_sub[k] = v\n        \n        # 10. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub_sub_sub_sub_sub_sub = {}\n        for k, v in sticker_dict_sub_sub_sub_sub_sub_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub_sub_sub_sub_sub_sub[k] = v\n        \n        # 11. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub_sub_sub_sub_sub_sub_sub = {}\n        for k, v in sticker_dict_sub_sub_sub_sub_sub_sub_sub_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub_sub_sub_sub_sub_sub_sub_sub[k] = v\n        \n        # 12. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub_sub_sub_sub_sub_sub_sub_sub_sub = {}\n        for k, v in sticker_dict_sub_sub_sub_sub_sub_sub_sub_sub_sub_sub.items():\n            if v > 0:\n                sticker_dict_sub_sub_sub_sub_sub_sub_sub_sub_sub_sub_sub[k] = v\n        \n        # 13. build a dict of sticker_dict - target_dict_sub\n        sticker_dict_sub_sub"}], "strange-printer": [{"task_id": "strange-printer", "completion": "class Solution(object):\n    def strangePrinter(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        n = len(s)\n        dp = [n] * n\n        dp[0] = 1\n        prev = s[0]\n        for i in range(1, n):\n            if s[i] == prev:\n                dp[i] = dp[i - 1] - 1\n            else:\n                prev = s[i]\n                dp[i] = i + 1\n        for i in range(n - 2, -1, -1):\n            if s[i] == prev:\n                dp[i] = dp[i + 1] - 1\n            else:\n                prev = s[i]\n                dp[i] = dp[i + 1] - 1\n        return dp[0]"}], "sqrtx": [{"task_id": "sqrtx", "completion": "class Solution(object):\n    def mySqrt(self, x):\n        \"\"\"\n        :type x: int\n        :rtype: int\n        \"\"\"\n        \n        if x == 0:\n            return 0\n        \n        if x == 1:\n            return 1\n        \n        if x == 2:\n            return 1\n        \n        if x == 3:\n            return 1\n        \n        if x == 4:\n            return 2\n        \n        if x == 5:\n            return 2\n        \n        if x == 6:\n            return 2\n        \n        if x == 7:\n            return 2\n        \n        if x == 8:\n            return 3\n        \n        if x == 9:\n            return 3\n        \n        if x == 10:\n            return 3\n        \n        if x == 11:\n            return 3\n        \n        if x == 12:\n            return 3\n        \n        if x == 13:\n            return 3\n        \n        if x == 14:\n            return 4\n        \n        if x == 15:\n            return 4\n        \n        if x == 16:\n            return 4\n        \n        if x == 17:\n            return 4\n        \n        if x == 18:\n            return 4\n        \n        if x == 19:\n            return 5\n        \n        if x == 20:\n            return 5\n        \n        if x == 21:\n            return 5\n        \n        if x == 22:\n            return 5\n        \n        if x == 23:\n            return 5\n        \n        if x == 24:\n            return 5\n        \n        if x == 25:\n            return 5\n        \n        if x == 26:\n            return 5\n        \n        if x == 27:\n            return 5\n        \n        if x == 28:\n            return 6\n        \n        if x == 29:\n            return 6\n        \n        if x == 30:\n            return 6\n        \n        if x == 31:\n            return 6\n        \n        if x == 32:\n            return 6\n        \n        if x == 33:\n            return 6\n        \n        if x == 34:\n            return 6\n        \n        if x == 35:\n            return 6\n        \n        if x == 36:\n            return 6\n        \n        if x == 37:\n            return 6\n        \n        if x == 38:\n            return 6\n        \n        if x == 39:\n            return 6\n        \n        if x == 40:\n            return 7\n        \n        if x == 41:\n            return 7\n        \n        if x == 42:\n            return 7\n        \n        if x == 43:\n            return 7\n        \n        if x == 44:\n            return 7\n        \n        if x == 45:\n            return 7\n        \n        if x == 46:\n            return 7\n        \n        if x == 47:\n            return 7\n        \n        if x == 48:\n            return 7\n        \n        if x == 49:\n            return 7\n        \n        if x == 50:\n            return 7\n        \n        if x == 51:\n            return 7\n        \n        if x == 52:\n            return 7\n        \n        if x == 53:\n            return 7\n        \n        if x == 54:\n            return 7\n        \n        if x == 55:\n            return 7\n        \n        if x == 56:\n            return 7\n        \n        if x == 57:\n            return 7\n        \n        if x == 58:\n            return 7\n        \n        if x == 59:\n            return 7\n        \n        if x == 60:\n            return 8\n        \n        if x == 61:\n            return 8\n        \n        if x == 62:\n            return 8\n        \n        if x == 63:\n            return 8\n        \n        if x == 64:\n            return 8\n        \n        if x == 65:\n            return 8\n        \n        if x == 66:\n            return 8\n        \n        if x == 67:\n            return 8\n        \n        if x == 68:\n            return 8"}], "roman-to-integer": [{"task_id": "roman-to-integer", "completion": "class Solution(object):\n    def romanToInt(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n        prev = 0\n        res = 0\n        for i in s[::-1]:\n            if roman_dict[i] < prev:\n                res -= roman_dict[i]\n            else:\n                res += roman_dict[i]\n            prev = roman_dict[i]\n        return res"}], "contains-duplicate": [{"task_id": "contains-duplicate", "completion": "class Solution(object):\n    def containsDuplicate(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: bool\n        \"\"\"\n        \n        return len(set(nums)) != len(nums)"}], "sliding-window-maximum": [{"task_id": "sliding-window-maximum", "completion": "class Solution(object):\n    def maxSlidingWindow(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if not nums:\n            return []\n        \n        q = collections.deque()\n        ans = []\n        for i in range(k):\n            while q and nums[q[-1]] <= nums[i]:\n                q.pop()\n            q.append(i)\n        ans.append(nums[q[0]])\n        \n        for i in range(k, len(nums)):\n            if q[0] == i - k:\n                q.popleft()\n            while q and nums[q[-1]] <= nums[i]:\n                q.pop()\n            q.append(i)\n            ans.append(nums[q[0]])\n        return ans"}], "median-of-two-sorted-arrays": [{"task_id": "median-of-two-sorted-arrays", "completion": "class Solution(object):\n    def findMedianSortedArrays(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: float\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n            \n        if len(nums2) == 0:\n            return nums1[len(nums1) // 2] if len(nums1) % 2 == 1 else (nums1[len(nums1) // 2 - 1] + nums1[len(nums1) // 2]) / 2.0\n        \n        if len(nums1) == 0:\n            return nums2[len(nums2) // 2] if len(nums2) % 2 == 1 else (nums2[len(nums2) // 2 - 1] + nums2[len(nums2) // 2]) / 2.0\n        \n        if len(nums1) == 1 and len(nums2) == 1:\n            return (nums1[0] + nums2[0]) / 2.0\n        \n        if len(nums1) == 1:\n            if len(nums2) % 2 == 1:\n                return nums2[len(nums2) // 2]\n            else:\n                return (nums2[len(nums2) // 2 - 1] + nums2[len(nums2) // 2]) / 2.0\n        \n        if len(nums2) == 1:\n            if len(nums1) % 2 == 1:\n                return nums1[len(nums1) // 2]\n            else:\n                return (nums1[len(nums1) // 2 - 1] + nums1[len(nums1) // 2]) / 2.0\n        \n        if len(nums1) == 2 and len(nums2) == 2:\n            return (max(nums1[0], nums2[0]) + min(nums1[1], nums2[1])) / 2.0\n        \n        if len(nums1) == 2:\n            if len(nums2) % 2 == 1:\n                return nums2[len(nums2) // 2]\n            else:\n                return (nums2[len(nums2) // 2 - 1] + nums2[len(nums2) // 2]) / 2.0\n        \n        if len(nums2) == 2:\n            if len(nums1) % 2 == 1:\n                return nums1[len(nums1) // 2]\n            else:\n                return (nums1[len(nums1) // 2 - 1] + nums1[len(nums1) // 2]) / 2.0\n        \n        if len(nums1) == 3 and len(nums2) == 3:\n            return (max(nums1[0], nums2[0]) + max(nums1[1], nums2[1])) / 2.0\n        \n        if len(nums1) == 3:\n            if len(nums2) % 2 == 1:\n                return nums2[len(nums2) // 2]\n            else:\n                return (nums2[len(nums2) // 2 - 1] + nums2[len(nums2) // 2]) / 2.0\n        \n        if len(nums2) == 3:\n            if len(nums1) % 2 == 1:\n                return nums1[len(nums1) // 2]\n            else:\n                return (nums1[len(nums1) // 2 - 1] + nums1[len(nums1) // 2]) / 2.0\n        \n        if len(nums1) == 4 and len(nums2) == 4:\n            return (max(nums1[0], nums2[0]) + max(nums1[1], nums2[1])) / 2.0\n        \n        if len(nums1) == 4:\n            if len(nums2) % 2 == 1:\n                return nums2[len(nums2) // 2]\n            else:\n                return ("}], "find-minimum-in-rotated-sorted-array": [{"task_id": "find-minimum-in-rotated-sorted-array", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r = m"}], "pascals-triangle-ii": [{"task_id": "pascals-triangle-ii", "completion": "class Solution(object):\n    def getRow(self, rowIndex):\n        \"\"\"\n        :type rowIndex: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if rowIndex == 0:\n            return [1]\n        \n        if rowIndex == 1:\n            return [1,1]\n        \n        row = [1,1]\n        \n        for i in range(2, rowIndex+1):\n            row.append(row[i-1] * (rowIndex - i + 1) // i)\n        \n        return row"}], "path-sum-ii": [{"task_id": "path-sum-ii", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def pathSum(self, root, targetSum):\n        \"\"\"\n        :type root: TreeNode\n        :type targetSum: int\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum - root.val)\n        \n        # if root is None:\n        #     return []\n        \n        # if root.left is None and root.right is None:\n        #     if root.val == targetSum:\n        #         return [[targetSum]]\n        #     else:\n        #         return []\n        \n        # if root.left is None:\n        #     return self.pathSum(root.right, targetSum - root.val)\n        \n        # if root.right is None:\n        #     return self.pathSum(root.left, targetSum - root.val)\n        \n        # return self.pathSum(root.left, targetSum - root.val) + self.pathSum(root.right, targetSum"}], "construct-the-rectangle": [{"task_id": "construct-the-rectangle", "completion": "class Solution(object):\n    def constructRectangle(self, area):\n        \"\"\"\n        :type area: int\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. 2 * (area ** 0.5) = area\n        # 2. 2 * area = area ** 0.5 + 0.5\n        # 3. area ** 0.5 = (area - 1) / 2\n        # 4. area ** 0.5 = (area + 1) / 2\n        # 5. area ** 0.5 = (area + 1) / 2 - 1\n        # 6. area ** 0.5 = (area + 1) / 2 + 1\n        # 7. area ** 0.5 = (area + 1) / 2 + 1 - 1\n        # 8. area ** 0.5 = (area + 1) / 2 + 1 + 1\n        # 9. area ** 0.5 = (area + 1) / 2 + 1 + 1 - 1\n        # 10. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1\n        # 11. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 - 1\n        # 12. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1\n        # 13. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 - 1\n        # 14. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1\n        # 15. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 - 1\n        # 16. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1\n        # 17. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 - 1\n        # 18. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 19. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1\n        # 20. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 21. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1\n        # 22. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 23. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1\n        # 24. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 25. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1\n        # 26. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 27. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1\n        # 28. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1\n        # 29. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 - 1\n        # 30. area ** 0.5 = (area + 1) / 2 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1"}], "word-ladder-ii": [{"task_id": "word-ladder-ii", "completion": "class Solution(object):\n    def findLadders(self, beginWord, endWord, wordList):\n        \"\"\"\n        :type beginWord: str\n        :type endWord: str\n        :type wordList: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # build the graph\n        wordList = set(wordList)\n        if endWord not in wordList:\n            return []\n        \n        # build the graph\n        graph = collections.defaultdict(set)\n        wordList.add(beginWord)\n        q = collections.deque([beginWord])\n        found = False\n        while q and not found:\n            word = q.popleft()\n            for i in range(len(word)):\n                newWord = word[:i] + '*' + word[i+1:]\n                for w in wordList:\n                    if w != word and w.startswith(newWord):\n                        graph[w].add(word)\n                        graph[word].add(w)\n                if newWord == endWord:\n                    found = True\n                if newWord not in wordList:\n                    q.append(newWord)\n        \n        # build the path\n        path = {beginWord: [beginWord]}\n        q = collections.deque([beginWord])\n        while q:\n            word = q.popleft()\n            for w in graph[word]:\n                if w not in path:\n                    path[w] = path[word] + [w]\n                    q.append(w)\n        \n        # build the result\n        res = []\n        if endWord not in path:\n            return res\n        path = path[endWord]\n        while path:\n            res.append(path)\n            path = path[0]\n            if path[0] == beginWord:\n                break\n            path = path[1:]\n        return res[::-1]"}], "balanced-binary-tree": [{"task_id": "balanced-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isBalanced(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        def height(root):\n            if not root:\n                return 0\n            left = height(root.left)\n            if left == -1:\n                return -1\n            right = height(root.right)\n            if right == -1:\n                return -1\n            if abs(left - right) > 1:\n                return -1\n            return max(left, right) + 1\n        \n        return height(root) != -1"}], "power-of-two": [{"task_id": "power-of-two", "completion": "class Solution(object):\n    def isPowerOfTwo(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        return n & (n - 1) == 0"}], "subsets-ii": [{"task_id": "subsets-ii", "completion": "class Solution(object):\n    def subsetsWithDup(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        nums.sort()\n        res = [[]]\n        i = 0\n        for n in nums:\n            if n != nums[i]:\n                i += 1\n                res += [r + [n] for r in res]\n            res[-1] += [n]\n        return res"}], "largest-rectangle-in-histogram": [{"task_id": "largest-rectangle-in-histogram", "completion": "class Solution(object):\n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        max_area = 0\n        heights.append(0)\n        for i, h in en\n            if not stack or h >= heights[stack[-1]]:\n                stack.append(i)\n            else:\n                while stack and h < heights[stack[-1]]:\n                    top = stack.pop()\n                    max_area = max(max_area, heights[top] * (i - stack[-1] - 1))\n                stack.append(i)\n        return max_area"}], "evaluate-reverse-polish-notation": [{"task_id": "evaluate-reverse-polish-notation", "completion": "class Solution(object):\n    def evalRPN(self, tokens):\n        \"\"\"\n        :type tokens: List[str]\n        :rtype: int\n        \"\"\"\n        \n        stack = []\n        for token in tokens:\n            if token in \"+-*/\":\n                b, a = stack.pop(), stack.pop()\n                if token == \"+\":\n                    stack.append(a + b)\n                elif token == \"-\":\n                    stack.append(a - b)\n                elif token == \"*\":\n                    stack.append(a * b)\n                else:\n                    stack.append(int(float(a) / b))\n            else:\n                stack.append(int(token))\n        return stack[0]"}], "perfect-rectangle": [{"task_id": "perfect-rectangle", "completion": "class Solution(object):\n    def isRectangleCover(self, rectangles):\n        \"\"\"\n        :type rectangles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        \n        x1, y1, x2, y2 = float('inf'), float('inf'), -float('inf'), -float('inf')\n        area = 0\n        seen = set()\n        \n        for x, y, a, b in rectangles:\n            x1, y1, x2, y2 = min(x1, x), min(y1, y), max(x2, a), max(y2, b)\n            area += (a - x) * (b - y)\n            if (a, b) in seen or (b, a) in seen:\n                seen.remove((a, b) if (a, b) in seen else (b, a))\n                area -= (a - x) * (b - y)\n            else:\n                seen.add((a, b))\n                area += (a - x) * (b - y)\n        \n        return area == (x2 - x1) * (y2 - y1) and (x1, y1) in seen and (x2, y2) in seen"}], "excel-sheet-column-title": [{"task_id": "excel-sheet-column-title", "completion": "class Solution(object):\n    def convertToTitle(self, columnNumber):\n        \"\"\"\n        :type columnNumber: int\n        :rtype: str\n        \"\"\"\n        \n        res = \"\"\n        while columnNumber > 0:\n            columnNumber -= 1\n            res += chr(columnNumber % 26 + ord('A'))\n            columnNumber //= 26\n        return res[::-1]"}], "maximum-subarray": [{"task_id": "maximum-subarray", "completion": "class Solution(object):\n    def maxSubArray(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        max_sum = nums[0]\n        curr_sum = 0\n        \n        for num in nums:\n            if curr_sum < 0:\n                curr_sum = num\n            else:\n                curr_sum += num\n            max_sum = max(max_sum, curr_sum)\n        \n        return max_sum"}], "sliding-puzzle": [{"task_id": "sliding-puzzle", "completion": "class Solution(object):\n    def slidingPuzzle(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # convert board to a number\n        num = board[0][0] * 3 + board[0][1]\n        num = num * 3 + board[1][0]\n        num = num * 3 + board[1][1]\n        num = num * 3 + board[1][2]\n        num = num * 3 + board[2][0]\n        num = num * 3 + board[2][1]\n        num = num * 3 + board[2][2]\n        \n        # if the number is already in the correct position, return 0\n        if num == 123450:\n            return 0\n        \n        # if the number is not in the correct position, swap it with the correct position\n        if num == 123405:\n            num = 123450\n            board[2][2] = 0\n        elif num == 123045:\n            num = 123450\n            board[2][2] = 5\n        elif num == 120345:\n            num = 123450\n            board[2][2] = 3\n        elif num == 102345:\n            num = 123450\n            board[2][2] = 2\n        elif num == 102304:\n            num = 123450\n            board[2][2] = 4\n        elif num == 102034:\n            num = 123450\n            board[2][2] = 1\n        elif num == 102030:\n            num = 123450\n            board[2][2] = 0\n        elif num == 100234:\n            num = 123450\n            board[2][2] = 4\n        elif num == 100230:\n            num = 123450\n            board[2][2] = 3\n        elif num == 100203:\n            num = 123450\n            board[2][2] = 2\n        elif num == 100023:\n            num = 123450\n            board[2][2] = 5\n        elif num == 100020:\n            num = 123450\n            board[2][2] = 0\n        elif num == 100002:\n            num = 123450\n            board[2][2] = 1\n        elif num == 100000:\n            num = 123450\n            board[2][2] = 2\n        elif num == 100001:\n            num = 123450\n            board[2][2] = 3\n        elif num == 100002:\n            num = 123450\n            board[2][2] = 4\n        elif num == 100003:\n            num = 123450\n            board[2][2] = 5\n        elif num == 100004:\n            num = 123450\n            board[2][2] = 0\n        elif num == 100005:\n            num = 123450\n            board[2][2] = 1\n        elif num == 100006:\n            num = 123450\n            board[2][2] = 2\n        elif num == 100007:\n            num = 123450\n            board[2][2] = 3\n        elif num == 100008:\n            num = 123450\n            board[2][2] = 4\n        elif num == 100009:\n            num = 123450\n            board[2][2] = 5\n        elif num == 100010:\n            num = 123450\n            board[2][2] = 0\n        elif num == 100011:\n            num = 123450\n            board[2][2] = 1\n        elif num == 100012:\n            num = 123450\n            board[2][2] = 2\n        elif num == 100013:\n            num = 123"}], "isomorphic-strings": [{"task_id": "isomorphic-strings", "completion": "class Solution(object):\n    def isIsomorphic(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_to_t = {}\n        t_to_s = {}\n        \n        for i in range(len(s)):\n            if s[i] in s_to_t:\n                if s_to_t[s[i]] != t[i]:\n                    return False\n            else:\n                s_to_t[s[i]] = t[i]\n                \n            if t[i] in t_to_s:\n                if t_to_s[t[i]] != s[i]:\n                    return False\n            else:\n                t_to_s[t[i]] = s[i]\n                \n        return True"}], "search-in-rotated-sorted-array-ii": [{"task_id": "search-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def search(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        # find the pivot\n        l, r = 0, len(nums) - 1\n        while l < r:\n            m = (l + r) // 2\n            if nums[m] > nums[r]:\n                l = m + 1\n            else:\n                r = m\n        pivot = l\n        \n        # find the target\n        l, r = 0, len(nums) - 1\n        if target >= nums[pivot] or nums[pivot] > nums[r]:\n            l = pivot\n        else:\n            r = pivot - 1\n        while l <= r:\n            m = (l + r) // 2\n            if nums[m] == target:\n                return True\n            elif nums[m] > target:\n                r = m - 1\n            else:\n                l = m + 1\n        return False"}], "unique-paths-ii": [{"task_id": "unique-paths-ii", "completion": "class Solution(object):\n    def uniquePathsWithObstacles(self, obstacleGrid):\n        \"\"\"\n        :type obstacleGrid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        m, n = len(obstacleGrid), len(obstacleGrid[0])\n        if obstacleGrid[m-1][n-1] == 1:\n            return 0\n        if obstacleGrid[0][n-1] == 1:\n            obstacleGrid[0][n-1] = 0\n            for i in range(1, m):\n                if obstacleGrid[i][n-1] == 1:\n                    obstacleGrid[i][n-1] = 0\n                else:\n                    obstacleGrid[i][n-1] = obstacleGrid[i-1][n-1]\n        else:\n            obstacleGrid[0][n-1] = 1\n        for i in range(1, m):\n            if obstacleGrid[i][n-1] == 1:\n                obstacleGrid[i][n-1] = 0\n            else:\n                obstacleGrid[i][n-1] = obstacleGrid[i-1][n-1]\n        for i in range(m-2, -1, -1):\n            if obstacleGrid[i][n-1] == 1:\n                obstacleGrid[i][n-1] = 0\n            else:\n                obstacleGrid[i][n-1] = obstacleGrid[i+1][n-1]\n        return obstacleGrid[0][n-1]"}], "decode-ways-ii": [{"task_id": "decode-ways-ii", "completion": "class Solution(object):\n    def numDecodings(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        if s[0] == '0':\n            return 0\n        \n        if len(s) == 1:\n            return 1\n        \n        if s[-1] == '0':\n            return 0\n        \n        if len(s) == 2:\n            if s[1] == '0':\n                return 0\n            else:\n                return 1\n        \n        a, b, c = 1, 1, int(s[0] == '1' or s[0] == '2' and s[1] in '0123456')\n        \n        for i in range(2, len(s)):\n            c, a = (c * (s[i] != '0') + a * (s[i - 1] != '0' and 9 < int(s[i - 1:i + 1]) < 27)) % (10 ** 9 + 7), a\n        \n        return c"}], "3sum-closest": [{"task_id": "3sum-closest", "completion": "class Solution(object):\n    def threeSumClosest(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: int\n        \"\"\"\n        \n        nums.sort()\n        n = len(nums)\n        ans = nums[0] + nums[1] + nums[n-1]\n        \n        if target > ans:\n            return ans\n        if target < ans:\n            ans = nums[n-1] + nums[n-2] + nums[n-3]\n        \n        if target > ans:\n            return ans\n        \n        i = 0\n        j = n - 1\n        k = 1\n        \n        while k < n - 1:\n            s = target - nums[k]\n            if nums[i] + nums[j] > s:\n                if j - 1 >= 0 and nums[j] + nums[j-1] < s:\n                    ans = nums[i] + nums[j] + nums[j-1]\n                    j -= 1\n                else:\n                    ans = nums[i] + nums[j] + nums[j]\n                    i += 1\n            else:\n                if i + 1 < n and nums[i] + nums[i+1] > s:\n                    ans = nums[i] + nums[i+1] + nums[i+1]\n                    i += 1\n                else:\n                    ans = nums[i] + nums[i] + nums[i+1]\n                    j += 1\n            k += 1\n        \n        return ans"}], "maximum-depth-of-binary-tree": [{"task_id": "maximum-depth-of-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def maxDepth(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        if root is None:\n            return 0\n        \n        return 1 + max(self.maxDepth(root.left), self.maxDepth(root.right))"}], "intersection-of-two-arrays-ii": [{"task_id": "intersection-of-two-arrays-ii", "completion": "class Solution(object):\n    def intersect(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersect(nums2, nums1)\n        \n        d = {}\n        for i in nums1:\n            if i not in d:\n                d[i] = 1\n            else:\n                d[i] += 1\n        \n        res = []\n        for i in nums2:\n            if i in d and d[i] > 0:\n                res.append(i)\n                d[i] -= 1\n        \n        return res"}], "minimum-absolute-difference-in-bst": [{"task_id": "minimum-absolute-difference-in-bst", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def getMinimumDifference(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: int\n        \"\"\"\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder traversal\n        # find the min and max value in the tree\n        # return the difference between the min and max value\n        \n        # inorder"}], "find-mode-in-binary-search-tree": [{"task_id": "find-mode-in-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def findMode(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        # find the max frequency\n        max_freq, max_freq_count, prev_freq, prev_freq_count = 0, 0, 0, 0\n        curr = root\n        while curr:\n            if curr.left:\n                prev = curr.left\n                if prev.right and prev.right is curr:\n                    prev.right = None\n                    curr = curr.right\n                    continue\n                else:\n                    prev.right = curr\n                    curr = curr.left\n                    continue\n            if curr.right:\n                curr = curr.right\n                continue\n            if prev_freq_count == max_freq:\n                max_freq_count += 1\n            elif prev_freq_count > max_freq:\n                max_freq = prev_freq_count\n                max_freq_count = 1\n            prev_freq = curr.val\n            prev_freq_count = 1\n            curr = curr.right\n        \n        # find the modes\n        curr = root\n        modes = []\n        while curr:\n            if curr.left:\n                curr = curr.left\n                continue\n            if curr.right:\n                curr = curr.right\n                continue\n            if prev_freq_count == max_freq:\n                modes.append(prev_freq)\n            elif prev_freq_count > max_freq:\n                modes = [prev_freq]\n                max_freq = prev_freq_count\n            prev_freq_count = 1\n            curr = curr.right\n        \n        return modes"}], "find-the-index-of-the-first-occurrence-in-a-string": [{"task_id": "find-the-index-of-the-first-occurrence-in-a-string", "completion": "class Solution(object):\n    def strStr(self, haystack, needle):\n        \"\"\"\n        :type haystack: str\n        :type needle: str\n        :rtype: int\n        \"\"\"\n        \n        if needle == \"\":\n            return 0\n        \n        if needle in haystack:\n            return haystack.index(needle)\n        \n        return -1"}], "strong-password-checker": [{"task_id": "strong-password-checker", "completion": "class Solution(object):\n    def strongPasswordChecker(self, password):\n        \"\"\"\n        :type password: str\n        :rtype: int\n        \"\"\"\n        \n        # 1. Count the number of lowercase, uppercase, and digit characters\n        # 2. If the number of characters is less than 6, add 6 - n to the result\n        # 3. If the number of characters is more than 20, subtract 20 - n to the result\n        # 4. If the number of characters is between 6 and 20, subtract 20 - n to the result\n        # 5. If the number of characters is more than 20, subtract 20 - n to the result\n        # 6. If the number of characters is more than 20, subtract 20 - n to the result\n        # 7. If the number of characters is more than 20, subtract 20 - n to the result\n        # 8. If the number of characters is more than 20, subtract 20 - n to the result\n        # 9. If the number of characters is more than 20, subtract 20 - n to the result\n        # 10. If the number of characters is more than 20, subtract 20 - n to the result\n        # 11. If the number of characters is more than 20, subtract 20 - n to the result\n        # 12. If the number of characters is more than 20, subtract 20 - n to the result\n        # 13. If the number of characters is more than 20, subtract 20 - n to the result\n        # 14. If the number of characters is more than 20, subtract 20 - n to the result\n        # 15. If the number of characters is more than 20, subtract 20 - n to the result\n        # 16. If the number of characters is more than 20, subtract 20 - n to the result\n        # 17. If the number of characters is more than 20, subtract 20 - n to the result\n        # 18. If the number of characters is more than 20, subtract 20 - n to the result\n        # 19. If the number of characters is more than 20, subtract 20 - n to the result\n        # 20. If the number of characters is more than 20, subtract 20 - n to the result\n        # 21. If the number of characters is more than 20, subtract 20 - n to the result\n        # 22. If the number of characters is more than 20, subtract 20 - n to the result\n        # 23. If the number of characters is more than 20, subtract 20 - n to the result\n        # 24. If the number of characters is more than 20, subtract 20 - n to the result\n        # 25. If the number of characters is more than 20, subtract 20 - n to the result\n        # 26. If the number of characters is more than 20, subtract 20 - n to the result\n        # 27. If the number of characters is more than 20, subtract 20 - n to the result\n        # 28. If the number of characters is more than 20, subtract 20 - n to the result\n        # 29. If the number of characters is more than 20, subtract 20 - n to the result\n        # 30. If the number of characters is more than 20, subtract 20 - n to the result\n        # 31. If the number of characters is more than 20, subtract 20 - n to the result\n        # 32. If the number of characters is more than 20, subtract 20 - n to the result\n        # 33. If the number of characters is more than 20, subtract 20 - n to the result\n        # 34. If the number of characters is more than 20, subtract 20 - n to the result\n        # 35. If the number of characters is more than 20, subtract 20 - n to the result\n        # 36. If the number of characters is more than 20, subtract 20 - n to the result"}], "factorial-trailing-zeroes": [{"task_id": "factorial-trailing-zeroes", "completion": "class Solution(object):\n    def trailingZeroes(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        if n < 5:\n            return 0\n        \n        return n//5 + self.trailingZeroes(n//5)"}], "zigzag-conversion": [{"task_id": "zigzag-conversion", "completion": "class Solution(object):\n    def convert(self, s, numRows):\n        \"\"\"\n        :type s: str\n        :type numRows: int\n        :rtype: str\n        \"\"\"\n        \n        if numRows == 1:\n            return s\n        \n        if numRows == 2:\n            return s[::2]\n        \n        if numRows == 3:\n            return s[::3]\n        \n        if numRows > 3:\n            n = numRows - 2\n            s = s[::n] + s[n::n]\n            return s[::n] + s[n::n][::2]\n        \n        return s"}], "trapping-rain-water": [{"task_id": "trapping-rain-water", "completion": "class Solution(object):\n    def trap(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if not height:\n            return 0\n        \n        left, right = 0, len(height) - 1\n        left_max, right_max = height[0], height[-1]\n        ans = 0\n        \n        while left < right:\n            if left_max < right_max:\n                left += 1\n                left_max = max(left_max, height[left])\n                ans += left_max - height[left]\n            else:\n                right -= 1\n                right_max = max(right_max, height[right])\n                ans += right_max - height[right]\n                \n        return ans"}], "find-all-numbers-disappeared-in-an-array": [{"task_id": "find-all-numbers-disappeared-in-an-array", "completion": "class Solution(object):\n    def findDisappearedNumbers(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        ## O(n) space\n        ## O(n) time\n        \n        ## O(n) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O(1) space\n        ## O(n) time\n        \n        ## O"}], "count-of-smaller-numbers-after-self": [{"task_id": "count-of-smaller-numbers-after-self", "completion": "class Solution(object):\n    def countSmaller(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        # 1. sort the array\n        # 2. use a dict to store the index of each number\n        # 3. use a stack to store the index of the number that is smaller than the current number\n        # 4. use a dict to store the number of smaller numbers to the right of the current number\n        # 5. use a stack to store the index of the number that is smaller than the current number\n        # 6. use a dict to store the number of smaller numbers to the right of the current number\n        # 7. use a stack to store the index of the number that is smaller than the current number\n        # 8. use a dict to store the number of smaller numbers to the right of the current number\n        # 9. use a stack to store the index of the number that is smaller than the current number\n        # 10. use a dict to store the number of smaller numbers to the right of the current number\n        # 11. use a stack to store the index of the number that is smaller than the current number\n        # 12. use a dict to store the number of smaller numbers to the right of the current number\n        # 13. use a stack to store the index of the number that is smaller than the current number\n        # 14. use a dict to store the number of smaller numbers to the right of the current number\n        # 15. use a stack to store the index of the number that is smaller than the current number\n        # 16. use a dict to store the number of smaller numbers to the right of the current number\n        # 17. use a stack to store the index of the number that is smaller than the current number\n        # 18. use a dict to store the number of smaller numbers to the right of the current number\n        # 19. use a stack to store the index of the number that is smaller than the current number\n        # 20. use a dict to store the number of smaller numbers to the right of the current number\n        # 21. use a stack to store the index of the number that is smaller than the current number\n        # 22. use a dict to store the number of smaller numbers to the right of the current number\n        # 23. use a stack to store the index of the number that is smaller than the current number\n        # 24. use a dict to store the number of smaller numbers to the right of the current number\n        # 25. use a stack to store the index of the number that is smaller than the current number\n        # 26. use a dict to store the number of smaller numbers to the right of the current number\n        # 27. use a stack to store the index of the number that is smaller than the current number\n        # 28. use a dict to store the number of smaller numbers to the right of the current number\n        # 29. use a stack to store the index of the number that is smaller than the current number\n        # 30. use a dict to store the number of smaller numbers to the right of the current number\n        # 31. use a stack to store the index of the number that is smaller than the current number\n        # 32. use a dict to store the number of smaller numbers to the right of the current number\n        # 33. use a stack to store the index of the number that is smaller than the current number\n        # 34. use a dict to store the number of smaller numbers to the right of the current number\n        # 35. use a stack to store the index of the number that is smaller than the current number\n        # 36. use a dict to store the number of smaller numbers to the right of the current number\n        # 37. use a stack to store the index of the number that is smaller than the current number\n        # 38. use a dict to store the number of smaller numbers to the right of the current number\n        # 39. use a stack to store the index of the number that is smaller than the current number\n        # 40. use a dict to store the number of smaller numbers to the right of the current number\n        # 41. use a stack to store the index of the number that is smaller than the current number\n        # 42. use a dict to store the number of smaller numbers to the right of the current number\n        # 43. use a stack to store the index of the number that is smaller than the current number\n        # 44. use a dict to store the number of smaller numbers to the right of the current"}], "set-intersection-size-at-least-two": [{"task_id": "set-intersection-size-at-least-two", "completion": "class Solution(object):\n    def intersectionSizeTwo(self, intervals):\n        \"\"\"\n        :type intervals: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by end\n        intervals.sort(key=lambda x: x[1])\n        \n        # max end\n        max_end = intervals[-1][1]\n        \n        # count\n        ans = 0\n        \n        # count of intervals with end <= max_end\n        count = 0\n        \n        # iterate from end to start\n        for i in intervals[::-1]:\n            # if i[0] > max_end, then we can't add 2\n            if i[0] > max_end:\n                break\n            # if i[0] <= max_end, then we can add 1\n            else:\n                # if i[0] == max_end, then we can add 1\n                if i[0] == max_end:\n                    count += 1\n                # if i[0] > max_end, then we can add 2\n                else:\n                    # if count > 0, then we can add 1\n                    if count > 0:\n                        count -= 1\n                        ans += 1\n                    # if count == 0, then we can add 1\n                    else:\n                        ans += 1\n                # update max_end\n                max_end = i[1] - 1\n        \n        # return ans\n        return ans"}], "symmetric-tree": [{"task_id": "symmetric-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSymmetric(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if not root:\n            return True\n        \n        return self.isMirror(root.left, root.right)\n    \n    def isMirror(self, left, right):\n        if not left and not right:\n            return True\n        if not left or not right:\n            return False\n        return left.val == right.val and self.isMirror(left.right, right.left) and self.isMirror(left.left, right.right)"}], "number-of-atoms": [{"task_id": "number-of-atoms", "completion": "class Solution(object):\n    def countOfAtoms(self, formula):\n        \"\"\"\n        :type formula: str\n        :rtype: str\n        \"\"\"\n        \n        # 1. \n        # 2. \n        # 3. \n        # 4. \n        # 5. \n        # 6. \n        # 7. \n        # 8. \n        # 9. \n        # 10. \n        # 11. \n        # 12. \n        # 13. \n        # 14. \n        # 15. \n        # 16. \n        # 17. \n        # 18. \n        # 19. \n        # 20. \n        # 21. \n        # 22. \n        # 23. \n        # 24. \n        # 25. \n        # 26. \n        # 27. \n        # 28. \n        # 29. \n        # 30. \n        # 31. \n        # 32. \n        # 33. \n        # 34. \n        # 35. \n        # 36. \n        # 37. \n        # 38. \n        # 39. \n        # 40. \n        # 41. \n        # 42. \n        # 43. \n        # 44. \n        # 45. \n        # 46. \n        # 47. \n        # 48. \n        # 49. \n        # 50. \n        # 51. \n        # 52. \n        # 53. \n        # 54. \n        # 55. \n        # 56. \n        # 57. \n        # 58. \n        # 59. \n        # 60. \n        # 61. \n        # 62. \n        # 63. \n        # 64. \n        # 65. \n        # 66. \n        # 67. \n        # 68. \n        # 69. \n        # 70. \n        # 71. \n        # 72. \n        # 73. \n        # 74. \n        # 75. \n        # 76. \n        # 77. \n        # 78. \n        # 79. \n        # 80. \n        # 81. \n        # 82. \n        # 83. \n        # 84. \n        # 85. \n        # 86. \n        # 87. \n        # 88. \n        # 89. \n        # 90. \n        # 91. \n        # 92. \n        # 93. \n        # 94. \n        # 95. \n        # 96. \n        # 97. \n        # 98. \n        # 99. \n        # 100. \n        # 101. \n        # 102. \n        # 103. \n        # 104. \n        # 105. \n        # 106. \n        # 107. \n        # 108. \n        # 109. \n        # 110. \n        # 111. \n        # 112. \n        # 113. \n        # 114. \n        # 115. \n        # 116. \n        # 117. \n        # 118. \n        # 119. \n        # 120. \n        # 121. \n        # 122. \n        # 123. \n        # 124. \n        # 125. \n        # 126."}], "binary-tree-preorder-traversal": [{"task_id": "binary-tree-preorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def preorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if root is None:\n            return []\n        \n        stack = [root]\n        res = []\n        \n        while stack:\n            node = stack.pop()\n            if node.right:\n                stack.append(node.right)\n            if node.left:\n                stack.append(node.left)\n            res.append(node.val)\n        \n        return res"}], "power-of-four": [{"task_id": "power-of-four", "completion": "class Solution(object):\n    def isPowerOfFour(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        if n <= 0:\n            return False\n        \n        if n & (n - 1) == 0:\n            return n & 0x55555555 != 0\n        \n        return n & 0x5555555555555555 != 0"}], "invert-binary-tree": [{"task_id": "invert-binary-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def invertTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n        \n        if root:\n            root.left, root.right = root.right, root.left\n            self.invertTree(root.left)\n            self.invertTree(root.right)\n            \n        return root"}], "generate-parentheses": [{"task_id": "generate-parentheses", "completion": "class Solution(object):\n    def generateParenthesis(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        if n == 0:\n            return []\n        if n == 1:\n            return ['()']\n        \n        res = ['()']\n        for i in range(1, n*2):\n            if i % 2 == 1:\n                res.append('()' + res[-1])\n            else:\n                res.append('(' + res[-1] + ')')\n                res.append('()' + res[-2])\n        return res[1:n*2+1]"}], "patching-array": [{"task_id": "patching-array", "completion": "class Solution(object):\n    def minPatches(self, nums, n):\n        \"\"\"\n        :type nums: List[int]\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # if n is 0, then we can't add any more numbers\n        if n <= 0:\n            return 0\n        \n        # if the first number is 1, then we can add 1\n        if nums[0] == 1:\n            nums = [1] + nums\n            n = 1\n        \n        # if the first number is greater than 1, then we can add 1\n        elif nums[0] > 1:\n            nums = [1] + nums\n            n = 1\n        \n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first number is greater than 1, then we can add 1\n        # if the first"}], "longest-valid-parentheses": [{"task_id": "longest-valid-parentheses", "completion": "class Solution(object):\n    def longestValidParentheses(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: int\n        \"\"\"\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # last_valid_index = -1\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # last_valid_index = -1\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # last_valid_index = -1\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # last_valid_index = -1\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # last_valid_index = -1\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)\n        # return max_len\n        \n        # if len(s) < 2:\n        #     return 0\n        \n        # stack = [-1]\n        # max_len = 0\n        # last_valid_index = -1\n        # for i in range(len(s)):\n        #     if s[i] == '(':\n        #         stack.append(i)\n        #     else:\n        #         stack.pop()\n        #         if stack:\n        #             max_len = max(max_len, i - stack[-1])\n        #         else:\n        #             stack.append(i)"}], "fraction-to-recurring-decimal": [{"task_id": "fraction-to-recurring-decimal", "completion": "class Solution(object):\n    def fractionToDecimal(self, numerator, denominator):\n        \"\"\"\n        :type numerator: int\n        :type denominator: int\n        :rtype: str\n        \"\"\"\n        \n        if numerator == 0:\n            return \"0\"\n        \n        if denominator == 0:\n            return \"NaN\"\n        \n        if numerator < 0 and denominator > 0:\n            ans = -1 * int(abs(numerator) / abs(denominator))\n            numerator = abs(numerator)\n        elif numerator > 0 and denominator < 0:\n            ans = -1 * int(abs(numerator) / abs(denominator))\n            numerator = abs(numerator)\n        else:\n            ans = int(abs(numerator) / abs(denominator))\n            numerator = abs(numerator)\n        \n        numerator = abs(numerator)\n        numerator = numerator % denominator\n        \n        if numerator == 0:\n            return str(ans)\n        \n        ans += \".\"\n        \n        seen = {}\n        seen[numerator] = len(ans)\n        \n        while numerator != 0:\n            numerator *= 10\n            ans += str(numerator // denominator)\n            numerator = numerator % denominator\n            \n            if numerator in seen:\n                ans = ans[:seen[numerator]] + \"(\" + ans[seen[numerator]:] + \")\"\n                break\n            else:\n                seen[numerator] = len(ans)\n        \n        return ans"}], "sort-list": [{"task_id": "sort-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def sortList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow, fast = head, head.next\n        while fast and fast.next:\n            slow, fast = slow.next, fast.next.next\n        \n        # split the list into two halves\n        slow.next, slow = slow.next, slow.next\n        slow.next = None\n        \n        # sort the two halves\n        l1, l2 = self.sortList(head), self.sortList(slow)\n        \n        # merge the two sorted halves\n        dummy = ListNode(0)\n        curr = dummy\n        while l1 and l2:\n            if l1.val < l2.val:\n                curr.next = l1\n                l1 = l1.next\n            else:\n                curr.next = l2\n                l2 = l2.next\n            curr = curr.next\n        \n        # merge the remaining nodes\n        if l1:\n            curr.next = l1\n        elif l2:\n            curr.next = l2\n        \n        return dummy.next"}], "russian-doll-envelopes": [{"task_id": "russian-doll-envelopes", "completion": "class Solution(object):\n    def maxEnvelopes(self, envelopes):\n        \"\"\"\n        :type envelopes: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        # sort by width, then height\n        envelopes.sort(key=lambda x: (x[0], -x[1]))\n        \n        # find longest increasing subsequence\n        h = []\n        for w, h in envelopes:\n            if not h or h > h[0]:\n                h.append(h[1])\n            else:\n                i = bisect.bisect_left(h, h[1])\n                h[i] = h[1]\n        return len(h)"}], "set-matrix-zeroes": [{"task_id": "set-matrix-zeroes", "completion": "class Solution(object):\n    def setZeroes(self, matrix):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :rtype: None Do not return anything, modify matrix in-place instead.\n        \"\"\"\n        \n        ## O(1) space\n        ## O(m+n) space\n        \n        ## O(1) space\n        ## O(m+n) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space\n        \n        ## O(1) space\n        ## O(1) space"}], "remove-nth-node-from-end-of-list": [{"task_id": "remove-nth-node-from-end-of-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeNthFromEnd(self, head, n):\n        \"\"\"\n        :type head: ListNode\n        :type n: int\n        :rtype: ListNode\n        \"\"\"\n        \n        # if the list has only one node, remove it\n        if not head.next:\n            return None\n        \n        # if the list has two nodes, remove the second node\n        if not head.next.next:\n            head.next = None\n            return head\n        \n        # if the list has more than two nodes, find the node before the node to be removed\n        # and remove it\n        slow = fast = head\n        for i in range(n):\n            fast = fast.next\n        \n        # if the node to be removed is the first node, remove it\n        if not fast:\n            return head.next\n        \n        # if the node to be removed is not the first node, find the node before the node to be removed\n        # and remove it\n        while fast.next:\n            slow = slow.next\n            fast = fast.next\n        \n        # remove the node\n        slow.next = slow.next.next\n        return head"}], "intersection-of-two-arrays": [{"task_id": "intersection-of-two-arrays", "completion": "class Solution(object):\n    def intersection(self, nums1, nums2):\n        \"\"\"\n        :type nums1: List[int]\n        :type nums2: List[int]\n        :rtype: List[int]\n        \"\"\"\n        \n        if len(nums1) > len(nums2):\n            return self.intersection(nums2, nums1)\n        \n        nums1, nums2 = set(nums1), set(nums2)\n        return list(nums1 & nums2)"}], "super-washing-machines": [{"task_id": "super-washing-machines", "completion": "class Solution(object):\n    def findMinMoves(self, machines):\n        \"\"\"\n        :type machines: List[int]\n        :rtype: int\n        \"\"\"\n        \n        total = sum(machines)\n        if total % n:\n            return -1\n        avg = total // n\n        curr = 0\n        ans = 0\n        for m in machines:\n            curr += m - avg\n            ans = max(ans, m - avg)\n        if curr:\n            return ans\n        return ans - avg"}], "kth-smallest-number-in-multiplication-table": [{"task_id": "kth-smallest-number-in-multiplication-table", "completion": "class Solution(object):\n    def findKthNumber(self, m, n, k):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type k: int\n        :rtype: int\n        \"\"\"\n        \n        if m > n:\n            m, n = n, m\n            k = n - k\n            \n        if k == 1:\n            return min(m, k)\n        \n        if k > m * n:\n            return -1\n        \n        if k == 0:\n            return 0\n        \n        if k == 1:\n            return 1\n        \n        if k == 2:\n            return 2\n        \n        if k == 3:\n            return 3\n        \n        if k == 4:\n            return 4\n        \n        if k == 5:\n            return 5\n        \n        if k == 6:\n            return 6\n        \n        if k == 7:\n            return 7\n        \n        if k == 8:\n            return 8\n        \n        if k == 9:\n            return 9\n        \n        if k == 10:\n            return 10\n        \n        if k == 11:\n            return 11\n        \n        if k == 12:\n            return 12\n        \n        if k == 13:\n            return 13\n        \n        if k == 14:\n            return 14\n        \n        if k == 15:\n            return 15\n        \n        if k == 16:\n            return 16\n        \n        if k == 17:\n            return 17\n        \n        if k == 18:\n            return 18\n        \n        if k == 19:\n            return 19\n        \n        if k == 20:\n            return 20\n        \n        if k == 21:\n            return 21\n        \n        if k == 22:\n            return 22\n        \n        if k == 23:\n            return 23\n        \n        if k == 24:\n            return 24\n        \n        if k == 25:\n            return 25\n        \n        if k == 26:\n            return 26\n        \n        if k == 27:\n            return 27\n        \n        if k == 28:\n            return 28\n        \n        if k == 29:\n            return 29\n        \n        if k == 30:\n            return 30\n        \n        if k == 31:\n            return 31\n        \n        if k == 32:\n            return 32\n        \n        if k == 33:\n            return 33\n        \n        if k == 34:\n            return 34\n        \n        if k == 35:\n            return 35\n        \n        if k == 36:\n            return 36\n        \n        if k == 37:\n            return 37\n        \n        if k == 38:\n            return 38\n        \n        if k == 39:\n            return 39\n        \n        if k == 40:\n            return 40\n        \n        if k == 41:\n            return 41\n        \n        if k == 42:\n            return 42\n        \n        if k == 43:\n            return 43\n        \n        if k == 44:\n            return 44\n        \n        if k == 45:\n            return 45\n        \n        if k == 46:\n            return 46\n        \n        if k == 47:\n            return 47\n        \n        if k == 48:\n            return 48\n        \n        if k == 49:\n            return 49\n        \n        if k == 50:\n            return 50\n        \n        if k == 51:\n            return 51\n        \n        if k == 52:\n            return 52\n        \n        if k == 53:\n            return 53\n        \n        if k == 54:\n            return 54\n        \n        if k == 55:\n            return 55\n        \n        if k == 56:\n            return 56\n        \n        if k == 57:\n            return 57\n        \n        if k == 58:\n            return 58\n        \n        if k == 59:\n            return 59\n        \n        if k == 60:\n            return 60\n        \n        if k == 61:"}], "convert-sorted-list-to-binary-search-tree": [{"task_id": "convert-sorted-list-to-binary-search-tree", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\n# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def sortedListToBST(self, head):\n        \"\"\"\n        :type head: Optional[ListNode]\n        :rtype: Optional[TreeNode]\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if not head.next:\n            return TreeNode(head.val)\n        \n        slow = fast = head\n        prev = None\n        \n        while fast and fast.next:\n            prev = slow\n            slow = slow.next\n            fast = fast.next.next\n        \n        prev.next = None\n        \n        root = TreeNode(slow.val)\n        root.right = self.sortedListToBST(slow.next)\n        \n        root.left = self.sortedListToBST(head)\n        \n        return root"}], "merge-two-sorted-lists": [{"task_id": "merge-two-sorted-lists", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def mergeTwoLists(self, list1, list2):\n        \"\"\"\n        :type list1: Optional[ListNode]\n        :type list2: Optional[ListNode]\n        :rtype: Optional[ListNode]\n        \"\"\"\n        \n        if not list1:\n            return list2\n        if not list2:\n            return list1\n        \n        if list1.val < list2.val:\n            list1, list2 = list1.next, list2\n        \n        head = list1\n        \n        while list1 and list2:\n            if list1.next and list1.next.val > list2.val:\n                list1 = list1.next.next\n                list2 = list2.next\n            else:\n                list1 = list1.next\n                list1, list2 = list1.next, list2\n        \n        return head"}], "maximal-rectangle": [{"task_id": "maximal-rectangle", "completion": "class Solution(object):\n    def maximalRectangle(self, matrix):\n        \"\"\"\n        :type matrix: List[List[str]]\n        :rtype: int\n        \"\"\"\n        \n        if not matrix:\n            return 0\n        \n        m, n = len(matrix), len(matrix[0])\n        heights = [0] * (n + 1)\n        maxArea = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if matrix[i][j] == '1':\n                    heights[j] += 1\n                else:\n                    heights[j] = 0\n            maxArea = max(maxArea, self.largestRectangleArea(heights))\n        \n        return maxArea\n    \n    def largestRectangleArea(self, heights):\n        \"\"\"\n        :type heights: List[int]\n        :rtype: int\n        \"\"\"\n        \n        stack = [-1]\n        maxArea = 0\n        \n        for i in range(len(heights)):\n            while heights[i] < heights[stack[-1]]:\n                maxArea = max(maxArea, (i - stack.pop() - 1) * heights[stack[-1]])\n            stack.append(i)\n        \n        maxArea = max(maxArea, (len(heights) - stack[-1] - 1) * heights[stack[-1]])\n        \n        return maxArea"}], "subsets": [{"task_id": "subsets", "completion": "class Solution(object):\n    def subsets(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        # 2**n is the number of subsets\n        # 2**n - 1 is the number of subsets with 1 element\n        # 2**n - 2 is the number of subsets with 2 elements\n        # 2**n - 3 is the number of subsets with 3 elements\n        # 2**n - 4 is the number of subsets with 4 elements\n        # 2**n - 5 is the number of subsets with 5 elements\n        # 2**n - 6 is the number of subsets with 6 elements\n        # 2**n - 7 is the number of subsets with 7 elements\n        # 2**n - 8 is the number of subsets with 8 elements\n        # 2**n - 9 is the number of subsets with 9 elements\n        # 2**n - 10 is the number of subsets with 10 elements\n        # 2**n - 11 is the number of subsets with 11 elements\n        # 2**n - 12 is the number of subsets with 12 elements\n        # 2**n - 13 is the number of subsets with 13 elements\n        # 2**n - 14 is the number of subsets with 14 elements\n        # 2**n - 15 is the number of subsets with 15 elements\n        # 2**n - 16 is the number of subsets with 16 elements\n        # 2**n - 17 is the number of subsets with 17 elements\n        # 2**n - 18 is the number of subsets with 18 elements\n        # 2**n - 19 is the number of subsets with 19 elements\n        # 2**n - 20 is the number of subsets with 20 elements\n        # 2**n - 21 is the number of subsets with 21 elements\n        # 2**n - 22 is the number of subsets with 22 elements\n        # 2**n - 23 is the number of subsets with 23 elements\n        # 2**n - 24 is the number of subsets with 24 elements\n        # 2**n - 25 is the number of subsets with 25 elements\n        # 2**n - 26 is the number of subsets with 26 elements\n        # 2**n - 27 is the number of subsets with 27 elements\n        # 2**n - 28 is the number of subsets with 28 elements\n        # 2**n - 29 is the number of subsets with 29 elements\n        # 2**n - 30 is the number of subsets with 30 elements\n        # 2**n - 31 is the number of subsets with 31 elements\n        # 2**n - 32 is the number of subsets with 32 elements\n        # 2**n - 33 is the number of subsets with 33 elements\n        # 2**n - 34 is the number of subsets with 34 elements\n        # 2**n - 35 is the number of subsets with 35 elements\n        # 2**n - 36 is the number of subsets with 36 elements\n        # 2**n - 37 is the number of subsets with 37 elements\n        # 2**n - 38 is the number of subsets with 38 elements\n        # 2**n - 39 is the number of subsets with 39 elements\n        # 2**n - 40 is the number of subsets with 40 elements\n        # 2**n - 41 is the number of subsets with 41 elements\n        # 2**n - 42 is the number of subsets with 42 elements\n        # 2**n - 43 is the number of subsets with 43 elements\n        # 2**n - 44 is the number of subsets with 44 elements\n        # 2**n - 45 is the number of subsets with 45 elements\n        # 2**n - 46 is the number of subsets with 46 elements\n        # 2**n - 47 is the number of subsets with 47 elements\n        # 2**n - 48 is the number of subsets with 48 elements\n        # 2**n - 49 is the number of subsets with 49 elements"}], "find-minimum-in-rotated-sorted-array-ii": [{"task_id": "find-minimum-in-rotated-sorted-array-ii", "completion": "class Solution(object):\n    def findMin(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] < nums[r]:\n        #         r = m\n        #     elif nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r -= 1\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] < nums[r]:\n        #         r = m\n        #     elif nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r -= 1\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] < nums[r]:\n        #         r = m\n        #     elif nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r -= 1\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] < nums[r]:\n        #         r = m\n        #     elif nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r -= 1\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] < nums[r]:\n        #         r = m\n        #     elif nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r -= 1\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] < nums[r]:\n        #         r = m\n        #     elif nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r -= 1\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:\n        #     m = (l + r) // 2\n        #     if nums[m] < nums[r]:\n        #         r = m\n        #     elif nums[m] > nums[r]:\n        #         l = m + 1\n        #     else:\n        #         r -= 1\n        # return nums[r]\n        \n        # if nums[0] < nums[-1]:\n        #     return nums[0]\n        \n        # l, r = 0, len(nums) - 1\n        # while l < r:"}], "valid-number": [{"task_id": "valid-number", "completion": "class Solution(object):\n    def isNumber(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        s = s.strip()\n        if not s or s[0] not in '+-e':\n            return False\n        if s[0] == '-' or s[0] == '+':\n            s = s[1:]\n        if not s:\n            return False\n        if s[-1] not in 'eE':\n            return False\n        if s[-1] == 'e':\n            s = s[:-1]\n            if not s or s[0] not in '+-':\n                return False\n            if s[0] == '-' or s[0] == '+':\n                s = s[1:]\n            if not s:\n                return False\n            if not s.isdigit():\n                return False\n            return True\n        if s[-1] == 'E':\n            s = s[:-1]\n            if not s or s[0] not in '+-':\n                return False\n            if s[0] == '-' or s[0] == '+':\n                s = s[1:]\n            if not s:\n                return False\n            if not s.isdigit():\n                return False\n            return True\n        if not s.isdigit():\n            return False\n        return True"}], "integer-to-roman": [{"task_id": "integer-to-roman", "completion": "class Solution(object):\n    def intToRoman(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        roman_map = {\n            1000: 'M',\n            900: 'CM',\n            500: 'D',\n            400: 'CD',\n            100: 'C',\n            90: 'XC',\n            50: 'L',\n            40: 'XL',\n            10: 'X',\n            9: 'IX',\n            5: 'V',\n            4: 'IV',\n            1: 'I',\n        }\n        \n        result = ''\n        for key in roman_map.keys():\n            result += roman_map[key] * (num // key)\n            num %= key\n        return result"}], "find-the-difference": [{"task_id": "find-the-difference", "completion": "class Solution(object):\n    def findTheDifference(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: str\n        \"\"\"\n        \n        # XOR\n        # 0 ^ 1 ^ 2 ^ 3 ^ 4 ^ 5 ^ 6 ^ 7 ^ 8 ^ 9 ^ 10 ^ 11 ^ 12 ^ 13 ^ 14 ^ 15 ^ 16 ^ 17 ^ 18 ^ 19 ^ 20 ^ 21 ^ 22 ^ 23 ^ 24 ^ 25 ^ 26 ^ 27 ^ 28 ^ 29 ^ 30 ^ 31 ^ 32 ^ 33 ^ 34 ^ 35 ^ 36 ^ 37 ^ 38 ^ 39 ^ 40 ^ 41 ^ 42 ^ 43 ^ 44 ^ 45 ^ 46 ^ 47 ^ 48 ^ 49 ^ 50 ^ 51 ^ 52 ^ 53 ^ 54 ^ 55 ^ 56 ^ 57 ^ 58 ^ 59 ^ 60 ^ 61 ^ 62 ^ 63 ^ 64 ^ 65 ^ 66 ^ 67 ^ 68 ^ 69 ^ 70 ^ 71 ^ 72 ^ 73 ^ 74 ^ 75 ^ 76 ^ 77 ^ 78 ^ 79 ^ 80 ^ 81 ^ 82 ^ 83 ^ 84 ^ 85 ^ 86 ^ 87 ^ 88 ^ 89 ^ 90 ^ 91 ^ 92 ^ 93 ^ 94 ^ 95 ^ 96 ^ 97 ^ 98 ^ 99 ^ 100 ^ 101 ^ 102 ^ 103 ^ 104 ^ 105 ^ 106 ^ 107 ^ 108 ^ 109 ^ 110 ^ 111 ^ 112 ^ 113 ^ 114 ^ 115 ^ 116 ^ 117 ^ 118 ^ 119 ^ 120 ^ 121 ^ 122 ^ 123 ^ 124 ^ 125 ^ 126 ^ 127 ^ 128 ^ 129 ^ 130 ^ 131 ^ 132 ^ 133 ^ 134 ^ 135 ^ 136 ^ 137 ^ 138 ^ 139 ^ 140 ^ 141 ^ 142 ^ 143 ^ 144 ^ 145 ^ 146 ^ 147 ^ 148 ^ 149 ^ 150 ^ 151 ^ 152 ^ 153 ^ 154 ^ 155 ^ 156 ^ 157 ^ 158 ^ 159 ^ 160 ^ 161 ^ 162 ^ 163 ^ 164 ^ 165 ^ 166 ^ 167 ^ 168 ^ 169 ^ 170 ^ 171 ^ 172 ^ 173 ^ 174 ^ 175 ^ 176 ^ 177 ^ 178 ^ 179 ^ 180 ^ 181 ^ 182 ^ 183 ^ 184 ^ 185 ^ 186 ^ 187 ^ 188 ^ 189 ^ 190 ^ 191 ^ 192 ^ 193 ^ 194 ^ 195 ^ 196 ^ 197 ^ 198 ^ 199 ^ 200 ^ 201 ^ 202 ^ 203 ^ 204 ^ 205 ^ 206 ^ 207 ^ 208 ^ 209 ^ 210 ^ 211 ^ 212 ^ 213 ^ 214 ^ 215 ^ 216 ^ 217 ^ 218 ^ 219 ^ 220 ^ 221 ^ 222 ^ 223 ^ 224 ^ 2"}], "sudoku-solver": [{"task_id": "sudoku-solver", "completion": "class Solution(object):\n    def solveSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: None Do not return anything, modify board in-place instead.\n        \"\"\"\n        \n        # 1. Find the empty cell\n        # 2. Fill the empty cell with the number 1 to 9\n        # 3. If the number 1 to 9 can be filled in the empty cell, then fill it\n        # 4. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 5. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 6. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 7. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 8. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 9. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 10. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 11. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 12. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 13. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 14. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 15. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 16. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 17. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 18. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 19. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 20. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 21. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 22. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 23. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 24. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 25. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 26. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 27. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 28. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 29. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 30. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 31. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 32. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 33. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 34. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 35. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 36. If the number 1 to 9 can't be filled in the empty cell, then backtrack\n        # 37. If the number 1 to 9 can't be filled in the empty cell, then fill it\n        # 38. If the number 1 to 9 can't be filled in the empty cell,"}], "recover-binary-search-tree": [{"task_id": "recover-binary-search-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def recoverTree(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: None Do not return anything, modify root in-place instead.\n        \"\"\"\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped\n        # swap the values of the two nodes\n        \n        # find the first and second node that are swapped\n        # find the first node that is not swapped"}], "palindrome-linked-list": [{"task_id": "palindrome-linked-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def isPalindrome(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: bool\n        \"\"\"\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        prev = None\n        while slow:\n            slow.next, prev, slow = prev, slow, slow.next\n        \n        # check if the first half is equal to the second half\n        left, right = head, prev\n        while right:\n            if left.val != right.val:\n                return False\n            left, right = left.next, right.next\n        \n        return True"}], "valid-perfect-square": [{"task_id": "valid-perfect-square", "completion": "class Solution(object):\n    def isPerfectSquare(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: bool\n        \"\"\"\n        \n        if num == 1:\n            return True\n        \n        left, right = 1, num // 2\n        \n        while left <= right:\n            mid = (left + right) // 2\n            if mid * mid == num:\n                return True\n            elif mid * mid < num:\n                left = mid + 1\n            else:\n                right = mid - 1\n        \n        return False"}], "counting-bits": [{"task_id": "counting-bits", "completion": "class Solution(object):\n    def countBits(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[int]\n        \"\"\"\n        \n        if n == 0:\n            return [0]\n        if n == 1:\n            return [0, 1]\n        \n        dp = [0, 1]\n        offset = 1\n        while offset * 2 <= n:\n            dp.append(1 + dp[offset])\n            offset *= 2\n        if offset * 2 <= n:\n            dp.append(dp[offset] + 1)\n        else:\n            dp.append(dp[offset] + dp[offset - offset // 2])\n        return dp[:n + 1]"}], "remove-linked-list-elements": [{"task_id": "remove-linked-list-elements", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def removeElements(self, head, val):\n        \"\"\"\n        :type head: ListNode\n        :type val: int\n        :rtype: ListNode\n        \"\"\"\n        \n        if not head:\n            return None\n        \n        if head.val == val:\n            return self.removeElements(head.next, val)\n        \n        head.next = self.removeElements(head.next, val)\n        return head"}], "scramble-string": [{"task_id": "scramble-string", "completion": "class Solution(object):\n    def isScramble(self, s1, s2):\n        \"\"\"\n        :type s1: str\n        :type s2: str\n        :rtype: bool\n        \"\"\"\n        \n        if s1 == s2:\n            return True\n        \n        if sorted(s1) != sorted(s2):\n            return False\n        \n        n = len(s1)\n        dp = {}\n        \n        for i in range(1, n):\n            if (s1[:i] in dp and s1[i:] in dp[s1[:i]] or\n                s1[n-i:] in dp and s1[:n-i] in dp[s1[n-i:]]):\n                return True\n            \n            dp[s1[:i]] = s1[i:]\n            dp[s1[n-i:]] = s1[:n-i]\n        \n        return False"}], "simplify-path": [{"task_id": "simplify-path", "completion": "class Solution(object):\n    def simplifyPath(self, path):\n        \"\"\"\n        :type path: str\n        :rtype: str\n        \"\"\"\n        \n        stack = []\n        path = path.split('/')\n        \n        for p in path:\n            if p == '..':\n                if stack:\n                    stack.pop()\n            elif p and p != '.':\n                stack.append(p)\n        \n        return '/' + '/'.join(stack) if stack else '/'"}], "word-search-ii": [{"task_id": "word-search-ii", "completion": "class Solution(object):\n    def findWords(self, board, words):\n        \"\"\"\n        :type board: List[List[str]]\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        trie = {}\n        for word in words:\n            node = trie\n            for c in word:\n                if c not in node:\n                    node[c] = {}\n                node = node[c]\n            node['#'] = word\n        \n        m, n = len(board), len(board[0])\n        res = set()\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] in trie:\n                    self.dfs(board, i, j, trie, res, m, n)\n        return list(res)\n    \n    def dfs(self, board, i, j, node, res, m, n):\n        if '#' in node:\n            res.add(node['#'])\n        if i > 0 and board[i-1][j] in node:\n            self.dfs(board, i-1, j, node[board[i-1][j]], res, m, n)\n        if i < m-1 and board[i+1][j] in node:\n            self.dfs(board, i+1, j, node[board[i+1][j]], res, m, n)\n        if j > 0 and board[i][j-1] in node:\n            self.dfs(board, i, j-1, node[board[i][j-1]], res, m, n)\n        if j < n-1 and board[i][j+1] in node:\n            self.dfs(board, i, j+1, node[board[i][j+1]], res, m, n)\n        board[i][j] = '#'"}], "valid-anagram": [{"task_id": "valid-anagram", "completion": "class Solution(object):\n    def isAnagram(self, s, t):\n        \"\"\"\n        :type s: str\n        :type t: str\n        :rtype: bool\n        \"\"\"\n        \n        if len(s) != len(t):\n            return False\n        \n        s_dict = {}\n        t_dict = {}\n        \n        for i in range(len(s)):\n            s_dict[s[i]] = 1 + s_dict.get(s[i], 0)\n            t_dict[t[i]] = 1 + t_dict.get(t[i], 0)\n        \n        for c in s_dict:\n            if s_dict[c] != t_dict.get(c, 0):\n                return False\n        \n        return True"}], "valid-sudoku": [{"task_id": "valid-sudoku", "completion": "class Solution(object):\n    def isValidSudoku(self, board):\n        \"\"\"\n        :type board: List[List[str]]\n        :rtype: bool\n        \"\"\"\n        \n        # check rows\n        for row in board:\n            if len(set(row)) != 9:\n                return False\n        \n        # check columns\n        for col in zip(*board):\n            if len(set(col)) != 9:\n                return False\n        \n        # check 3x3 squares\n        for i in (0, 3, 6):\n            for j in (0, 3, 6):\n                square = [board[x][y] for x in (i, i + 1, i + 2) for y in (j, j + 1, j + 2)]\n                if len(set(square)) != 9:\n                    return False\n        \n        return True"}], "fizz-buzz": [{"task_id": "fizz-buzz", "completion": "class Solution(object):\n    def fizzBuzz(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[str]\n        \"\"\"\n        \n        ans = []\n        for i in range(1, n+1):\n            if i % 15 == 0:\n                ans.append(\"FizzBuzz\")\n            elif i % 3 == 0:\n                ans.append(\"Fizz\")\n            elif i % 5 == 0:\n                ans.append(\"Buzz\")\n            else:\n                ans.append(str(i))\n        return ans"}], "reverse-words-in-a-string": [{"task_id": "reverse-words-in-a-string", "completion": "class Solution(object):\n    def reverseWords(self, s):\n        \"\"\"\n        :type s: str\n        :rtype: str\n        \"\"\"\n        \n        # reverse the whole string\n        s = s.strip()[::-1]\n        \n        # reverse each word\n        s = s.split()[::-1]\n        \n        # join the words back together\n        return ' '.join(s)"}], "excel-sheet-column-number": [{"task_id": "excel-sheet-column-number", "completion": "class Solution(object):\n    def titleToNumber(self, columnTitle):\n        \"\"\"\n        :type columnTitle: str\n        :rtype: int\n        \"\"\"\n        \n        res = 0\n        for i in columnTitle:\n            res = res * 26 + ord(i) - ord('A') + 1\n        return res"}], "candy": [{"task_id": "candy", "completion": "class Solution(object):\n    def candy(self, ratings):\n        \"\"\"\n        :type ratings: List[int]\n        :rtype: int\n        \"\"\"\n        \n        n = len(ratings)\n        candies = [1] * n\n        \n        for i in range(1, n):\n            if ratings[i] > ratings[i - 1]:\n                candies[i] = candies[i - 1] + 1\n        \n        total = candies[-1]\n        \n        for i in range(n - 2, -1, -1):\n            if ratings[i] > ratings[i + 1] and candies[i] <= candies[i + 1]:\n                candies[i] = candies[i + 1] + 1\n        \n        return total + sum(candies)"}], "same-tree": [{"task_id": "same-tree", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def isSameTree(self, p, q):\n        \"\"\"\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: bool\n        \"\"\"\n        \n        if p is None and q is None:\n            return True\n        elif p is None or q is None:\n            return False\n        elif p.val != q.val:\n            return False\n        else:\n            return self.isSameTree(p.left, q.left) and self.isSameTree(p.right, q.right)"}], "reorder-list": [{"task_id": "reorder-list", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def reorderList(self, head):\n        \"\"\"\n        :type head: ListNode\n        :rtype: None Do not return anything, modify head in-place instead.\n        \"\"\"\n        \n        if not head or not head.next:\n            return head\n        \n        # find the middle of the list\n        slow = fast = head\n        while fast and fast.next:\n            slow = slow.next\n            fast = fast.next.next\n        \n        # reverse the second half of the list\n        second = slow.next\n        slow.next = None\n        second = self.reverse(second)\n        \n        # merge the two halves\n        first = head\n        second = second.next\n        while second:\n            temp = first.next\n            first.next = second\n            second = second.next\n            first.next.next = temp\n            first = temp\n        \n        return head\n    \n    def reverse(self, head):\n        prev = None\n        curr = head\n        while curr:\n            nxt = curr.next\n            curr.next = prev\n            prev = curr\n            curr = nxt\n        return prev"}], "word-pattern": [{"task_id": "word-pattern", "completion": "class Solution(object):\n    def wordPattern(self, pattern, s):\n        \"\"\"\n        :type pattern: str\n        :type s: str\n        :rtype: bool\n        \"\"\"\n        \n        # split the string into words\n        words = s.split()\n        \n        # if the length of the pattern and the length of the words are not equal, return False\n        if len(pattern) != len(words):\n            return False\n        \n        # create a dictionary to store the mapping of pattern to words\n        mapping = {}\n        \n        # create a set to store the set of words that have been seen before\n        seen = set()\n        \n        # iterate over the pattern and words\n        for c, w in zip(pattern, words):\n            # if the word is not in the mapping, add it to the mapping\n            if w not in mapping:\n                if c in seen:\n                    return False\n                mapping[c] = w\n                seen.add(w)\n            # if the word is in the mapping, check if it matches the pattern\n            elif mapping[c] != w:\n                return False\n        \n        # if all words have been seen, return True\n        return True"}], "permutations": [{"task_id": "permutations", "completion": "class Solution(object):\n    def permute(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: List[List[int]]\n        \"\"\"\n        \n        if len(nums) == 1:\n            return [nums]\n        \n        if len(nums) == 2:\n            return [nums, nums[::-1]]\n        \n        if len(nums) == 3:\n            return [nums, nums[1:], nums[::-1]]\n        \n        if len(nums) > 3:\n            return [nums, nums[1:], nums[::-1]] + self.permute(nums[1:])"}], "search-a-2d-matrix": [{"task_id": "search-a-2d-matrix", "completion": "class Solution(object):\n    def searchMatrix(self, matrix, target):\n        \"\"\"\n        :type matrix: List[List[int]]\n        :type target: int\n        :rtype: bool\n        \"\"\"\n        \n        m, n = len(matrix), len(matrix[0])\n        lo, hi = 0, m*n-1\n        \n        while lo <= hi:\n            mid = (lo + hi) // 2\n            if matrix[mid//n][mid%n] < target:\n                lo = mid + 1\n            else:\n                hi = mid - 1\n        \n        return lo < m*n and matrix[lo//n][lo%n] == target"}], "add-two-numbers": [{"task_id": "add-two-numbers", "completion": "# Definition for singly-linked list.\n# class ListNode(object):\n#     def __init__(self, val=0, next=None):\n#         self.val = val\n#         self.next = next\nclass Solution(object):\n    def addTwoNumbers(self, l1, l2):\n        \"\"\"\n        :type l1: ListNode\n        :type l2: ListNode\n        :rtype: ListNode\n        \"\"\"\n        \n        carry = 0\n        dummy = ListNode(0)\n        curr = dummy\n        while l1 or l2 or carry:\n            if l1:\n                carry += l1.val\n                l1 = l1.next\n            if l2:\n                carry += l2.val\n                l2 = l2.next\n            curr.next = ListNode(carry % 10)\n            carry //= 10\n            curr = curr.next\n        return dummy.next"}], "number-complement": [{"task_id": "number-complement", "completion": "class Solution(object):\n    def findComplement(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. find the highest bit that is 1\n        # 2. flip all bits to 1\n        # 3. flip the highest bit to 0\n        # 4. flip all bits to 0\n        # 5. add 1 to the highest bit\n        # 6. flip all bits to 1\n        # 7. subtract 1 from the highest bit\n        # 8. flip all bits to 0\n        # 9. add 1 to the highest bit\n        # 10. flip all bits to 1\n        # 11. subtract 1 from the highest bit\n        # 12. flip all bits to 0\n        # 13. add 1 to the highest bit\n        # 14. flip all bits to 1\n        # 15. subtract 1 from the highest bit\n        # 16. flip all bits to 0\n        # 17. add 1 to the highest bit\n        # 18. flip all bits to 1\n        # 19. subtract 1 from the highest bit\n        # 20. flip all bits to 0\n        # 21. add 1 to the highest bit\n        # 22. flip all bits to 1\n        # 23. subtract 1 from the highest bit\n        # 24. flip all bits to 0\n        # 25. add 1 to the highest bit\n        # 26. flip all bits to 1\n        # 27. subtract 1 from the highest bit\n        # 28. flip all bits to 0\n        # 29. add 1 to the highest bit\n        # 30. flip all bits to 1\n        # 31. subtract 1 from the highest bit\n        # 32. flip all bits to 0\n        # 33. add 1 to the highest bit\n        # 34. flip all bits to 1\n        # 35. subtract 1 from the highest bit\n        # 36. flip all bits to 0\n        # 37. add 1 to the highest bit\n        # 38. flip all bits to 1\n        # 39. subtract 1 from the highest bit\n        # 40. flip all bits to 0\n        # 41. add 1 to the highest bit\n        # 42. flip all bits to 1\n        # 43. subtract 1 from the highest bit\n        # 44. flip all bits to 0\n        # 45. add 1 to the highest bit\n        # 46. flip all bits to 1\n        # 47. subtract 1 from the highest bit\n        # 48. flip all bits to 0\n        # 49. add 1 to the highest bit\n        # 50. flip all bits to 1\n        # 51. subtract 1 from the highest bit\n        # 52. flip all bits to 0\n        # 53. add 1 to the highest bit\n        # 54. flip all bits to 1\n        # 55. subtract 1 from the highest bit\n        # 56. flip all bits to 0\n        # 57. add 1 to the highest bit\n        # 58. flip all bits to 1\n        # 59. subtract 1 from the highest bit\n        # 60. flip all bits to 0\n        # 61. add 1 to the highest bit\n        # 62. flip all bits to 1\n        # 63. subtract 1 from the highest bit\n        # 64. flip all bits to 0\n        # 65. add 1 to the highest bit\n        # 66. flip all bits to 1\n        # 67. subtract 1 from the highest bit\n        # 68. flip all bits to 0\n        # 69. add 1 to the highest bit\n        # 70. flip all bits to 1\n        # 71. subtract 1 from the highest bit\n        # 72. flip all bits to 0\n        # 73. add 1 to the highest bit\n        # 74. flip all bits to 1\n        # 75. subtract 1 from the highest bit"}], "arithmetic-slices-ii-subsequence": [{"task_id": "arithmetic-slices-ii-subsequence", "completion": "class Solution(object):\n    def numberOfArithmeticSlices(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        if len(nums) < 3:\n            return 0\n        \n        diff = nums[1] - nums[0]\n        ans = 0\n        cnt = 0\n        \n        for i in range(2, len(nums)):\n            if nums[i] - nums[i-1] == diff:\n                cnt += 1\n            else:\n                ans += cnt * (cnt + 1) // 2\n                cnt = 1\n                diff = nums[i] - nums[i-1]\n        \n        ans += cnt * (cnt + 1) // 2\n        \n        return ans"}], "text-justification": [{"task_id": "text-justification", "completion": "class Solution(object):\n    def fullJustify(self, words, maxWidth):\n        \"\"\"\n        :type words: List[str]\n        :type maxWidth: int\n        :rtype: List[str]\n        \"\"\"\n        \n        # 1. get the length of each word\n        # 2. get the number of spaces\n        # 3. get the number of words\n        # 4. get the number of spaces between words\n        # 5. get the number of spaces between words and words\n        # 6. get the number of spaces between words and words\n        # 7. get the number of spaces between words and words\n        # 8. get the number of spaces between words and words\n        # 9. get the number of spaces between words and words\n        # 10. get the number of spaces between words and words\n        # 11. get the number of spaces between words and words\n        # 12. get the number of spaces between words and words\n        # 13. get the number of spaces between words and words\n        # 14. get the number of spaces between words and words\n        # 15. get the number of spaces between words and words\n        # 16. get the number of spaces between words and words\n        # 17. get the number of spaces between words and words\n        # 18. get the number of spaces between words and words\n        # 19. get the number of spaces between words and words\n        # 20. get the number of spaces between words and words\n        # 21. get the number of spaces between words and words\n        # 22. get the number of spaces between words and words\n        # 23. get the number of spaces between words and words\n        # 24. get the number of spaces between words and words\n        # 25. get the number of spaces between words and words\n        # 26. get the number of spaces between words and words\n        # 27. get the number of spaces between words and words\n        # 28. get the number of spaces between words and words\n        # 29. get the number of spaces between words and words\n        # 30. get the number of spaces between words and words\n        # 31. get the number of spaces between words and words\n        # 32. get the number of spaces between words and words\n        # 33. get the number of spaces between words and words\n        # 34. get the number of spaces between words and words\n        # 35. get the number of spaces between words and words\n        # 36. get the number of spaces between words and words\n        # 37. get the number of spaces between words and words\n        # 38. get the number of spaces between words and words\n        # 39. get the number of spaces between words and words\n        # 40. get the number of spaces between words and words\n        # 41. get the number of spaces between words and words\n        # 42. get the number of spaces between words and words\n        # 43. get the number of spaces between words and words\n        # 44. get the number of spaces between words and words\n        # 45. get the number of spaces between words and words\n        # 46. get the number of spaces between words and words\n        # 47. get the number of spaces between words and words\n        # 48. get the number of spaces between words and words\n        # 49. get the number of spaces between words and words\n        # 50. get the number of spaces between words and words\n        # 51. get the number of spaces between words and words\n        # 52. get the number of spaces between words and words\n        # 53. get the number of spaces between words and words\n        # 54. get the number of spaces between words and words\n        # 55. get the number of spaces between words and words\n        # 56. get the number of spaces between words and words\n        # 57. get the number of spaces between words and words\n        # 58. get the number of spaces between words and words\n        # 59. get the number of spaces between words and words\n        # 60. get the number of spaces between words and words\n        # 61. get the number of spaces between words and words\n        # 62. get the number of spaces between words and words\n        # 63. get the number of spaces between words and words\n        # 64. get the number of spaces between words and words\n        # 65. get the number of spaces between words and words\n        # 66."}], "binary-tree-postorder-traversal": [{"task_id": "binary-tree-postorder-traversal", "completion": "# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution(object):\n    def postorderTraversal(self, root):\n        \"\"\"\n        :type root: TreeNode\n        :rtype: List[int]\n        \"\"\"\n        \n        if not root:\n            return []\n        \n        stack, res = [root], []\n        \n        while stack:\n            node = stack.pop()\n            if node:\n                if node.left:\n                    stack.append(node.left)\n                if node.right:\n                    stack.append(node.right)\n            res.append(node.val)\n        \n        return res[::-1]"}], "container-with-most-water": [{"task_id": "container-with-most-water", "completion": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # while left < right:\n        #     max_area = max(max_area, min(height[left], height[right]) * (right - left))\n        #     if height[left] < height[right]:\n        #         left += 1\n        #     else:\n        #         right -= 1\n        # return max_area\n        \n        # two pointers\n        # left = 0\n        # right = len(height) - 1\n        # max_area = 0\n        # max_height = height[right]\n        # while left < right:\n        #     if height[left] < height[right]:\n        #         if height[left] > max_height:\n        #             max_height = height[left]\n        #             left += 1\n        #         else:\n        #             max_area = max(max_area, max_height * (right - left))\n        #             right -= 1\n        #     else:\n        #         if height[right] > max_height:\n        #             max_height = height[right]\n        #             right -= 1\n        #         else:\n        #             max_area = max(max_area, max_height * (right - left))\n        #             left += 1\n        # return max_area\n        \n        # two pointers\n        left = 0\n        right = len(height) - 1\n        max_area = 0\n        max_height = height[right]\n        while left < right:\n            if height[left] < height[right]:\n                if height[left] > max_height:\n                    max_height = height[left]\n                    left += 1\n                else:\n                    max_area = max(max_area, max_height * (right - left))\n                    right -= 1\n            else:\n                if height[right] > max_height:\n                    max_height = height[right]\n                    right -= 1\n                else:\n                    max_area = max(max_area, max_height * (right - left))\n                    left += 1\n        return max_area"}], "concatenated-words": [{"task_id": "concatenated-words", "completion": "class Solution(object):\n    def findAllConcatenatedWordsInADict(self, words):\n        \"\"\"\n        :type words: List[str]\n        :rtype: List[str]\n        \"\"\"\n        \n        # build a dict\n        word_dict = set(words)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated\n        ans = []\n        for word in words:\n            if word in word_dict:\n                word_dict.remove(word)\n            else:\n                w = word[1:]\n                while w:\n                    if w in word_dict:\n                        ans.append(word)\n                        break\n                    w = w[1:]\n                else:\n                    ans.append(word)\n        \n        # build a dict\n        word_dict = set(ans)\n        \n        # build a list of words that can be concatenated"}], "base-7": [{"task_id": "base-7", "completion": "class Solution(object):\n    def convertToBase7(self, num):\n        \"\"\"\n        :type num: int\n        :rtype: str\n        \"\"\"\n        \n        if num < 0:\n            return \"-\" + self.convertToBase7(-num)\n        if num < 7:\n            return str(num)\n        return self.convertToBase7(num // 7) + str(num % 7)"}], "nim-game": [{"task_id": "nim-game", "completion": "class Solution(object):\n    def canWinNim(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: bool\n        \"\"\"\n        \n        return n % 4 != 0"}], "n-queens-ii": [{"task_id": "n-queens-ii", "completion": "class Solution(object):\n    def totalNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: int\n        \"\"\"\n        \n        # 1. 1 queen, 2. 2 queens, 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 1. 1 queen, 2. 2 queens, 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 2. 2 queens, 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 8. 8 queens, 9. 9 queens\n        # 9. 9 queens\n        # 1. 1 queen, 2. 2 queens, 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 2. 2 queens, 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 8. 8 queens, 9. 9 queens\n        # 9. 9 queens\n        # 1. 1 queen, 2. 2 queens, 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 2. 2 queens, 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens\n        # 3. 3 queens, 4. 4 queens, 5. 5 queens, 6. 6 queens, 7. 7 queens, 8. 8 queens, 9. 9 queens"}], "n-queens": [{"task_id": "n-queens", "completion": "class Solution(object):\n    def solveNQueens(self, n):\n        \"\"\"\n        :type n: int\n        :rtype: List[List[str]]\n        \"\"\"\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        # 2. 2nd solution: backtracking + bitmask\n        # 3. 3rd solution: backtracking + bitmask + pruning\n        \n        # 1. 1st solution: backtracking\n        #"}], "word-search": [{"task_id": "word-search", "completion": "class Solution(object):\n    def exist(self, board, word):\n        \"\"\"\n        :type board: List[List[str]]\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n        if not word:\n            return False\n        \n        if not board:\n            return False\n        \n        if not board[0]:\n            return False\n        \n        if not word:\n            return False\n        \n        if not word[0]:\n            return False\n        \n        if not board[0][0]:\n            return False\n        \n        if not board[-1][-1]:\n            return False\n        \n        if not word[-1]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not board[-1][0]:\n            return False\n        \n        if not board[0][-1]:\n            return False\n        \n        if not board[0][0]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][0]:\n            return False\n        \n        if not word[-1][-1]:\n            return False\n        \n        if not word[0][-1]:\n            return False\n        \n        if not word[0][0]:"}], "merge-sorted-array": [{"task_id": "merge-sorted-array", "completion": "class Solution(object):\n    def merge(self, nums1, m, nums2, n):\n        \"\"\"\n        :type nums1: List[int]\n        :type m: int\n        :type nums2: List[int]\n        :type n: int\n        :rtype: None Do not return anything, modify nums1 in-place instead.\n        \"\"\"\n        \n        # nums1[m:] = nums2[:n]\n        # nums1.sort()\n        \n        # m, n = m - 1, n - 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p + 1] = nums2[:n + 1]\n        \n        # nums1[:n] = nums2[:n]\n        # nums1.sort()\n        \n        # m, n = m - 1, n - 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p + 1] = nums2[:n + 1]\n        \n        # nums1[:n] = nums2[:n]\n        # nums1.sort()\n        \n        # m, n = m - 1, n - 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p + 1] = nums2[:n + 1]\n        \n        # nums1[:n] = nums2[:n]\n        # nums1.sort()\n        \n        # m, n = m - 1, n - 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p + 1] = nums2[:n + 1]\n        \n        # nums1[:n] = nums2[:n]\n        # nums1.sort()\n        \n        # m, n = m - 1, n - 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #         n -= 1\n        #     p -= 1\n        # if n >= 0:\n        #     nums1[:p + 1] = nums2[:n + 1]\n        \n        # nums1[:n] = nums2[:n]\n        # nums1.sort()\n        \n        # m, n = m - 1, n - 1\n        # p = m + n + 1\n        # while m >= 0 and n >= 0:\n        #     if nums1[m] > nums2[n]:\n        #         nums1[p] = nums1[m]\n        #         m -= 1\n        #     else:\n        #         nums1[p] = nums2[n]\n        #"}], "third-maximum-number": [{"task_id": "third-maximum-number", "completion": "class Solution(object):\n    def thirdMax(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        \n        # 1st pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn't exist, return max\n        \n        # 2nd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 3rd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn't exist, return max\n        \n        # 1st pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn't exist, return max\n        \n        # 2nd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 3rd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 1st pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 2nd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 3rd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 1st pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 2nd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 3rd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 1st pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 2nd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 3rd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 1st pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 2nd pass\n        # find the max and 2nd max\n        # if 2nd max exists, find the 3rd max\n        # if 3rd max exists, return it\n        # if 3rd max doesn'\n        \n        # 3rd pass\n        # find the max and 2nd max\n        # if 2"}]}